language: d
name: HumanEval_158_find_max
results:
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    int\
    \ max = 0;\n    string max_word = \"\";\n    foreach(word; words)\n    {\n   \
    \     int len = word.length;\n        int unique_chars = 0;\n        foreach(ch;\
    \ word)\n        {\n            if(word.count(ch) == 1)\n            {\n     \
    \           unique_chars++;\n            }\n        }\n        if(unique_chars\
    \ > max)\n        {\n            max = unique_chars;\n            max_word = word;\n\
    \        }\n        else if(unique_chars == max)\n        {\n            if(word\
    \ < max_word)\n            {\n                max_word = word;\n            }\n\
    \        }\n    }\n    return max_word;\n}\nunittest\n{\n    alias candidate =\
    \ find_max;\n\n    assert(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    );\n    assert(candidate([\"name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"\
    cba\"]) == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"\
    is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\"\
    );\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\");\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp147y0u3n.d(17): Error: cannot implicitly convert expression `word.length`
    of type `ulong` to `int`

    /tmp/tmp147y0u3n.d(21): Error: no property `count` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp147y0u3n.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_unique = 0;\n    foreach(string word; words)\n\
    \    {\n        int unique = 0;\n        foreach(char c; word)\n        {\n  \
    \          if(!max_word.canFind(c))\n            {\n                unique++;\n\
    \            }\n        }\n        if(unique > max_unique)\n        {\n      \
    \      max_unique = unique;\n            max_word = word;\n        }\n    }\n\
    \    return max_word;\n}\nunittest\n{\n    alias candidate = find_max;\n\n   \
    \ assert(candidate([\"name\", \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\"\
    , \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"])\
    \ == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\"\
    , \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"\
    a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7286wr3a.d(20): Error: no property `canFind` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7286wr3a.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_unique = 0;\n    foreach(string word; words) \n\
    \    {\n        int unique = 0;\n        foreach(char c; word) \n        {\n \
    \           if(!max_word.canFind(c)) \n            {\n                unique++;\n\
    \            }\n        }\n        if(unique > max_unique) \n        {\n     \
    \       max_unique = unique;\n            max_word = word;\n        }\n    }\n\
    \    return max_word;\n}\nunittest\n{\n    alias candidate = find_max;\n\n   \
    \ assert(candidate([\"name\", \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\"\
    , \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"])\
    \ == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\"\
    , \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"\
    a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnr2lv63e.d(20): Error: no property `canFind` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnr2lv63e.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max = \"\";\n    int max_count = 0;\n    foreach(string word; words)\n    {\n\
    \        int count = 0;\n        foreach(char c; word)\n        {\n          \
    \  if(count == 0)\n            {\n                count++;\n            }\n  \
    \          else\n            {\n                if(word[0..count].count(c) ==\
    \ 0)\n                {\n                    count++;\n                }\n   \
    \         }\n        }\n        if(count > max_count)\n        {\n           \
    \ max_count = count;\n            max = word;\n        }\n        else if(count\
    \ == max_count)\n        {\n            if(word < max)\n            {\n      \
    \          max = word;\n            }\n        }\n    }\n    return max;\n}\n\
    unittest\n{\n    alias candidate = find_max;\n\n    assert(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"\
    ]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n \
    \   assert(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"a\", \"prrk\"])\
    \ == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpz7venp9v.d(26): Error: no property `count` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz7venp9v.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_unique = 0;\n    foreach(string word; words) \n\
    \    {\n        int unique = 0;\n        foreach(char c; word) \n        {\n \
    \           if(c !in max_word) \n            {\n                unique++;\n  \
    \              max_word ~= c;\n            }\n        }\n        if(unique > max_unique)\
    \ \n        {\n            max_unique = unique;\n            max_word = word;\n\
    \        }\n    }\n    return max_word;\n}\nunittest\n{\n    alias candidate =\
    \ find_max;\n\n    assert(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    );\n    assert(candidate([\"name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"\
    cba\"]) == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"\
    is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\"\
    );\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\");\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp75qfa42d.d(20): Error: incompatible types for `(c) in (max_word)`:
    `char` and `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp75qfa42d.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word;\n    int max_count = 0;\n    foreach(word; words)\n    {\n       \
    \ int count = 0;\n        foreach(c; word)\n        {\n            if(c in word[0..count])\n\
    \                continue;\n            count++;\n        }\n        if(count\
    \ > max_count)\n        {\n            max_count = count;\n            max_word\
    \ = word;\n        }\n    }\n    return max_word;\n}\nunittest\n{\n    alias candidate\
    \ = find_max;\n\n    assert(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    );\n    assert(candidate([\"name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"\
    cba\"]) == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"\
    is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\"\
    );\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\");\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa2_29iq0.d(20): Error: incompatible types for `(c) in (word[0..cast(ulong)count])`:
    `immutable(char)` and `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa2_29iq0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_unique = 0;\n    foreach(word; words) \n    {\n\
    \        int unique = 0;\n        foreach(c; word) \n        {\n            if(word.count(c)\
    \ == 1) \n            {\n                unique++;\n            }\n        }\n\
    \        if(unique > max_unique) \n        {\n            max_unique = unique;\n\
    \            max_word = word;\n        }\n        else if(unique == max_unique)\
    \ \n        {\n            if(word < max_word) \n            {\n             \
    \   max_word = word;\n            }\n        }\n    }\n    return max_word;\n\
    }\nunittest\n{\n    alias candidate = find_max;\n\n    assert(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"\
    ]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n \
    \   assert(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"a\", \"prrk\"])\
    \ == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9gth7dwa.d(20): Error: no property `count` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9gth7dwa.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word;\n    int max_unique_chars = 0;\n    foreach(word; words)\n    {\n\
    \        int unique_chars = 0;\n        foreach(char ch; word)\n        {\n  \
    \          if(!ch.isAlpha)\n                continue;\n            if(!ch.isUpper)\n\
    \                ch = ch.toUpper;\n            if(!ch.isAlpha)\n             \
    \   continue;\n            unique_chars++;\n        }\n        if(unique_chars\
    \ > max_unique_chars)\n        {\n            max_unique_chars = unique_chars;\n\
    \            max_word = word;\n        }\n    }\n    return max_word;\n}\nunittest\n\
    {\n    alias candidate = find_max;\n\n    assert(candidate([\"name\", \"of\",\
    \ \"string\"]) == \"string\");\n    assert(candidate([\"name\", \"enam\", \"game\"\
    ]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    );\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n    assert(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\");\n    assert(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"])\
    \ == \"b\");\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\"\
    );\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2utsw66h.d(20): Error: no property `isAlpha` for type `char`

    /tmp/tmp2utsw66h.d(22): Error: no property `isUpper` for type `char`

    /tmp/tmp2utsw66h.d(23): Error: no property `toUpper` for type `char`

    /tmp/tmp2utsw66h.d(24): Error: no property `isAlpha` for type `char`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2utsw66h.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word;\n    int max_unique = 0;\n    foreach(word; words)\n    {\n      \
    \  int unique = 0;\n        foreach(c; word)\n        {\n            if(!c.canFindIn(word[0..$-1]))\n\
    \                unique++;\n        }\n        if(unique > max_unique)\n     \
    \   {\n            max_unique = unique;\n            max_word = word;\n      \
    \  }\n    }\n    return max_word;\n}\nunittest\n{\n    alias candidate = find_max;\n\
    \n    assert(candidate([\"name\", \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\"\
    , \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"])\
    \ == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\"\
    , \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"\
    a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2o60stfn.d(20): Error: no property `canFindIn` for type `immutable(char)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2o60stfn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_unique = 0;\n    foreach(word; words) \n    {\n\
    \        int unique = 0;\n        foreach(c; word) \n        {\n            if(word.count(c)\
    \ == 1) \n            {\n                unique++;\n            }\n        }\n\
    \        if(unique > max_unique) \n        {\n            max_unique = unique;\n\
    \            max_word = word;\n        }\n        else if(unique == max_unique)\
    \ \n        {\n            if(word < max_word) \n            {\n             \
    \   max_word = word;\n            }\n        }\n    }\n    return max_word;\n\
    }\nunittest\n{\n    alias candidate = find_max;\n\n    assert(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"\
    ]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n \
    \   assert(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"a\", \"prrk\"])\
    \ == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9gth7dwa.d(20): Error: no property `count` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9gth7dwa.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word;\n    int max_unique = 0;\n    foreach(word; words)\n    {\n      \
    \  auto unique_chars = set(word);\n        if(unique_chars.length > max_unique)\n\
    \        {\n            max_unique = unique_chars.length;\n            max_word\
    \ = word;\n        }\n    }\n    return max_word;\n}\nunittest\n{\n    alias candidate\
    \ = find_max;\n\n    assert(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    );\n    assert(candidate([\"name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"\
    cba\"]) == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"\
    is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\"\
    );\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\");\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5wy53qxk.d(17): Error: undefined identifier `set`, did you mean
    template `get(K, V)(inout(V[K]) aa, K key, lazy inout(V) defaultValue)`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5wy53qxk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_unique = 0;\n    foreach(word; words) \n    {\n\
    \        int unique = 0;\n        foreach(c; word) \n        {\n            if(word.count(c)\
    \ == 1) \n            {\n                unique++;\n            }\n        }\n\
    \        if(unique > max_unique) \n        {\n            max_unique = unique;\n\
    \            max_word = word;\n        }\n        else if(unique == max_unique)\
    \ \n        {\n            if(word < max_word) \n            {\n             \
    \   max_word = word;\n            }\n        }\n    }\n    return max_word;\n\
    }\nunittest\n{\n    alias candidate = find_max;\n\n    assert(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"\
    ]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n \
    \   assert(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"a\", \"prrk\"])\
    \ == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9gth7dwa.d(20): Error: no property `count` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9gth7dwa.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    int\
    \ max_unique = 0;\n    string result = \"\";\n    foreach(word; words)\n    {\n\
    \        int unique = 0;\n        foreach(c; word)\n        {\n            if(word.count(c)\
    \ == 1)\n            {\n                unique++;\n            }\n        }\n\
    \        if(unique > max_unique)\n        {\n            max_unique = unique;\n\
    \            result = word;\n        }\n        else if(unique == max_unique)\n\
    \        {\n            if(word < result)\n            {\n                result\
    \ = word;\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = find_max;\n\n    assert(candidate([\"name\", \"of\",\
    \ \"string\"]) == \"string\");\n    assert(candidate([\"name\", \"enam\", \"game\"\
    ]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    );\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n    assert(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\");\n    assert(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"])\
    \ == \"b\");\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\"\
    );\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplpz_3_ux.d(20): Error: no property `count` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplpz_3_ux.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_count = 0;\n    foreach(word; words) \n    {\n\
    \        int count = 0;\n        foreach(char c; word) \n        {\n         \
    \   if(c in word[0..$-1]) \n            {\n                continue;\n       \
    \     }\n            count++;\n        }\n        if(count > max_count) \n   \
    \     {\n            max_count = count;\n            max_word = word;\n      \
    \  }\n    }\n    return max_word;\n}\nunittest\n{\n    alias candidate = find_max;\n\
    \n    assert(candidate([\"name\", \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\"\
    , \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"])\
    \ == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\"\
    , \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"\
    a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmps9rqovvo.d(20): Error: incompatible types for `(c) in (word[0..__dollar
    - 1LU])`: `char` and `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmps9rqovvo.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    int\
    \ max = 0;\n    string max_word = \"\";\n    foreach(word; words)\n    {\n   \
    \     int count = 0;\n        foreach(c; word)\n        {\n            if(count\
    \ == 0)\n            {\n                count++;\n            }\n            else\n\
    \            {\n                if(word[0..count].count(c) == 0)\n           \
    \     {\n                    count++;\n                }\n            }\n    \
    \    }\n        if(count > max)\n        {\n            max = count;\n       \
    \     max_word = word;\n        }\n        else if(count == max)\n        {\n\
    \            if(word < max_word)\n            {\n                max_word = word;\n\
    \            }\n        }\n    }\n    return max_word;\n}\nunittest\n{\n    alias\
    \ candidate = find_max;\n\n    assert(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\");\n    assert(candidate([\"name\", \"enam\", \"game\"]) == \"\
    enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\");\n\
    \    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n    assert(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\");\n    assert(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"])\
    \ == \"b\");\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\"\
    );\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3izrzxwc.d(26): Error: no property `count` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3izrzxwc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_unique = 0;\n    foreach(word; words) \n    {\n\
    \        int unique = 0;\n        foreach(c; word) \n        {\n            if(word.count(c)\
    \ == 1) \n            {\n                unique++;\n            }\n        }\n\
    \        if(unique > max_unique) \n        {\n            max_unique = unique;\n\
    \            max_word = word;\n        }\n        else if(unique == max_unique)\
    \ \n        {\n            max_word = min(max_word, word);\n        }\n    }\n\
    \    return max_word;\n}\nunittest\n{\n    alias candidate = find_max;\n\n   \
    \ assert(candidate([\"name\", \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\"\
    , \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"])\
    \ == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\"\
    , \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"\
    a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgmqz3dn5.d(20): Error: no property `count` for type `string`

    /tmp/tmpgmqz3dn5.d(32): Error: undefined identifier `min`, did you mean function
    `main`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgmqz3dn5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_unique = 0;\n    foreach(word; words)\n    {\n\
    \        int unique = 0;\n        foreach(c; word)\n        {\n            if(word.count(c)\
    \ == 1)\n            {\n                unique++;\n            }\n        }\n\
    \        if(unique > max_unique)\n        {\n            max_unique = unique;\n\
    \            max_word = word;\n        }\n        else if(unique == max_unique)\n\
    \        {\n            if(word < max_word)\n            {\n                max_word\
    \ = word;\n            }\n        }\n    }\n    return max_word;\n}\nunittest\n\
    {\n    alias candidate = find_max;\n\n    assert(candidate([\"name\", \"of\",\
    \ \"string\"]) == \"string\");\n    assert(candidate([\"name\", \"enam\", \"game\"\
    ]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    );\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n    assert(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\");\n    assert(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"])\
    \ == \"b\");\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\"\
    );\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpd2ej3odv.d(20): Error: no property `count` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd2ej3odv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_unique = 0;\n    foreach(string word; words) \n\
    \    {\n        int unique = 0;\n        foreach(char c; word) \n        {\n \
    \           if(!contains(max_word, c)) \n            {\n                unique++;\n\
    \                max_word ~= c;\n            }\n        }\n        if(unique >\
    \ max_unique) \n        {\n            max_unique = unique;\n            max_word\
    \ = word;\n        }\n    }\n    return max_word;\n}\nunittest\n{\n    alias candidate\
    \ = find_max;\n\n    assert(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    );\n    assert(candidate([\"name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"\
    cba\"]) == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"\
    is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\"\
    );\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\");\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphd26qfhl.d(20): Error: undefined identifier `contains`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphd26qfhl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_count = 0;\n    foreach(word; words) \n    {\n\
    \        int count = 0;\n        foreach(c; word) \n        {\n            if(!max_word.canFind(c))\
    \ \n            {\n                count++;\n            }\n        }\n      \
    \  if(count > max_count) \n        {\n            max_count = count;\n       \
    \     max_word = word;\n        }\n    }\n    return max_word;\n}\nunittest\n\
    {\n    alias candidate = find_max;\n\n    assert(candidate([\"name\", \"of\",\
    \ \"string\"]) == \"string\");\n    assert(candidate([\"name\", \"enam\", \"game\"\
    ]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    );\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n    assert(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\");\n    assert(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"])\
    \ == \"b\");\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\"\
    );\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpumwklsks.d(20): Error: no property `canFind` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpumwklsks.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    int\
    \ max = 0;\n    string result = \"\";\n    foreach(string word; words)\n    {\n\
    \        int count = 0;\n        foreach(char c; word)\n        {\n          \
    \  if(c in word[0..count])\n                continue;\n            count++;\n\
    \        }\n        if(count > max)\n        {\n            max = count;\n   \
    \         result = word;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = find_max;\n\n    assert(candidate([\"name\", \"of\",\
    \ \"string\"]) == \"string\");\n    assert(candidate([\"name\", \"enam\", \"game\"\
    ]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    );\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n    assert(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\");\n    assert(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"])\
    \ == \"b\");\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\"\
    );\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsrqcjtls.d(20): Error: incompatible types for `(c) in (word[0..cast(ulong)count])`:
    `char` and `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsrqcjtls.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_unique = 0;\n    foreach(word; words)\n    {\n\
    \        int unique = 0;\n        foreach(c; word)\n        {\n            if(word.count(c)\
    \ == 1)\n                unique++;\n        }\n        if(unique > max_unique)\n\
    \        {\n            max_unique = unique;\n            max_word = word;\n \
    \       }\n        else if(unique == max_unique)\n        {\n            if(word\
    \ < max_word)\n                max_word = word;\n        }\n    }\n    return\
    \ max_word;\n}\nunittest\n{\n    alias candidate = find_max;\n\n    assert(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"name\",\
    \ \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\"\
    );\n    assert(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"a\", \"prrk\"])\
    \ == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpygktm5v5.d(20): Error: no property `count` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpygktm5v5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_unique = 0;\n    foreach(word; words) \n    {\n\
    \        int unique = 0;\n        foreach(c; word) \n        {\n            if(!c.isAlpha)\n\
    \                continue;\n            if(!max_word.canFind(c))\n           \
    \     unique++;\n        }\n        if(unique > max_unique) \n        {\n    \
    \        max_unique = unique;\n            max_word = word;\n        }\n    }\n\
    \    return max_word;\n}\nunittest\n{\n    alias candidate = find_max;\n\n   \
    \ assert(candidate([\"name\", \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\"\
    , \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"])\
    \ == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\"\
    , \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"\
    a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkdcpjj3t.d(20): Error: no property `isAlpha` for type `immutable(char)`

    /tmp/tmpkdcpjj3t.d(22): Error: no property `canFind` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkdcpjj3t.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_chars = 0;\n    foreach(word; words)\n    {\n\
    \        int num_chars = 0;\n        foreach(char c; word)\n        {\n      \
    \      if(!c.in(max_word))\n            {\n                num_chars++;\n    \
    \            max_word ~= c;\n            }\n        }\n        if(num_chars >\
    \ max_chars)\n        {\n            max_chars = num_chars;\n            max_word\
    \ = word;\n        }\n    }\n    return max_word;\n}\nunittest\n{\n    alias candidate\
    \ = find_max;\n\n    assert(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    );\n    assert(candidate([\"name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"\
    cba\"]) == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"\
    is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\"\
    );\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\");\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdv9w1lf6.d(20): Error: identifier expected following `.`, not `in`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdv9w1lf6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_unique = 0;\n    foreach(word; words)\n    {\n\
    \        int unique = 0;\n        foreach(c; word)\n        {\n            if(word.count(c)\
    \ == 1)\n            {\n                unique++;\n            }\n        }\n\
    \        if(unique > max_unique)\n        {\n            max_unique = unique;\n\
    \            max_word = word;\n        }\n        else if(unique == max_unique)\n\
    \        {\n            if(word < max_word)\n            {\n                max_word\
    \ = word;\n            }\n        }\n    }\n    return max_word;\n}\nunittest\n\
    {\n    alias candidate = find_max;\n\n    assert(candidate([\"name\", \"of\",\
    \ \"string\"]) == \"string\");\n    assert(candidate([\"name\", \"enam\", \"game\"\
    ]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    );\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n    assert(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\");\n    assert(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"])\
    \ == \"b\");\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\"\
    );\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpd2ej3odv.d(20): Error: no property `count` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd2ej3odv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_unique = 0;\n    foreach(string word; words)\n\
    \    {\n        int unique = 0;\n        foreach(char c; word)\n        {\n  \
    \          if(c !in max_word)\n            {\n                unique++;\n    \
    \            max_word ~= c;\n            }\n        }\n        if(unique > max_unique)\n\
    \        {\n            max_unique = unique;\n            max_word = word;\n \
    \       }\n    }\n    return max_word;\n}\nunittest\n{\n    alias candidate =\
    \ find_max;\n\n    assert(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    );\n    assert(candidate([\"name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"\
    cba\"]) == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"\
    is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\"\
    );\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\");\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwvdsl23k.d(20): Error: incompatible types for `(c) in (max_word)`:
    `char` and `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwvdsl23k.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max = \"\";\n    int max_unique = 0;\n    foreach(string word; words)\n    {\n\
    \        int unique = 0;\n        foreach(char c; word)\n        {\n         \
    \   if(!max.canFind(c))\n            {\n                unique++;\n          \
    \  }\n        }\n        if(unique > max_unique)\n        {\n            max =\
    \ word;\n            max_unique = unique;\n        }\n    }\n    return max;\n\
    }\nunittest\n{\n    alias candidate = find_max;\n\n    assert(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"\
    ]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n \
    \   assert(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"a\", \"prrk\"])\
    \ == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6d_xz_st.d(20): Error: no property `canFind` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6d_xz_st.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_unique = 0;\n    foreach(string word; words) \n\
    \    {\n        int unique = 0;\n        foreach(char c; word) \n        {\n \
    \           if(c !in word[0 .. $ - 1]) \n            {\n                unique++;\n\
    \            }\n        }\n        if(unique > max_unique) \n        {\n     \
    \       max_unique = unique;\n            max_word = word;\n        }\n    }\n\
    \    return max_word;\n}\nunittest\n{\n    alias candidate = find_max;\n\n   \
    \ assert(candidate([\"name\", \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\"\
    , \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"])\
    \ == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\"\
    , \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"\
    a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwg251efs.d(20): Error: incompatible types for `(c) in (word[0..__dollar
    - 1LU])`: `char` and `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwg251efs.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word;\n    int max_count = 0;\n    foreach(word; words)\n    {\n       \
    \ int count = 0;\n        foreach(c; word)\n        {\n            if(count ==\
    \ 0)\n            {\n                count = 1;\n            }\n            else\n\
    \            {\n                if(word[$-count] != c)\n                {\n  \
    \                  count++;\n                }\n            }\n        }\n   \
    \     if(count > max_count)\n        {\n            max_count = count;\n     \
    \       max_word = word;\n        }\n    }\n    return max_word;\n}\nunittest\n\
    {\n    alias candidate = find_max;\n\n    assert(candidate([\"name\", \"of\",\
    \ \"string\"]) == \"string\");\n    assert(candidate([\"name\", \"enam\", \"game\"\
    ]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    );\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n    assert(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\");\n    assert(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"])\
    \ == \"b\");\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\"\
    );\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpx5ebc2sx.d(45): unittest failure

    ----------------

    ??:? _d_unittestp [0x42910d]

    ??:? void tmpx5ebc2sx.__unittest_L40_C1() [0x427d6a]

    ??:? void tmpx5ebc2sx.__modtest() [0x428374]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42da5b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x428e66]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42a909]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42a998]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42a895]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428e3d]

    ??:? runModuleUnitTests [0x42d831]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4295d0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164137
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_count = 0;\n    foreach(string word; words) \n\
    \    {\n        int count = 0;\n        foreach(char c; word) \n        {\n  \
    \          if(c !in word[0..$-1]) \n            {\n                count++;\n\
    \            }\n        }\n        if(count > max_count) \n        {\n       \
    \     max_count = count;\n            max_word = word;\n        }\n    }\n   \
    \ return max_word;\n}\nunittest\n{\n    alias candidate = find_max;\n\n    assert(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"name\",\
    \ \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\"\
    );\n    assert(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"a\", \"prrk\"])\
    \ == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphqtroj1v.d(20): Error: incompatible types for `(c) in (word[0..__dollar
    - 1LU])`: `char` and `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphqtroj1v.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_count = 0;\n    foreach(string word; words) \n\
    \    {\n        int count = 0;\n        foreach(char c; word) \n        {\n  \
    \          if(count == 0) \n            {\n                count++;\n        \
    \    }\n            else \n            {\n                bool found = false;\n\
    \                foreach(char c2; word[0..$-1]) \n                {\n        \
    \            if(c == c2) \n                    {\n                        found\
    \ = true;\n                        break;\n                    }\n           \
    \     }\n                if(!found) \n                {\n                    count++;\n\
    \                }\n            }\n        }\n        if(count > max_count) \n\
    \        {\n            max_count = count;\n            max_word = word;\n   \
    \     }\n        else if(count == max_count) \n        {\n            if(word\
    \ < max_word) \n            {\n                max_word = word;\n            }\n\
    \        }\n    }\n    return max_word;\n}\nunittest\n{\n    alias candidate =\
    \ find_max;\n\n    assert(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    );\n    assert(candidate([\"name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"\
    cba\"]) == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"\
    is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\"\
    );\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\");\n}\nvoid\
    \ main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp3gxgsou2.d(60): unittest failure

    ----------------

    ??:? _d_unittestp [0x429255]

    ??:? void tmp3gxgsou2.__unittest_L56_C1() [0x427dd1]

    ??:? void tmp3gxgsou2.__modtest() [0x4284bc]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42dbf7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x428fae]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42aaa5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ab34]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42aa31]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428f85]

    ??:? runModuleUnitTests [0x42d9cd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42976c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_count = 0;\n    foreach(string word; words)\n\
    \    {\n        int count = 0;\n        foreach(char c; word)\n        {\n   \
    \         if(count == 0)\n            {\n                count++;\n          \
    \  }\n            else\n            {\n                if(word[0..count].count(c)\
    \ == 0)\n                {\n                    count++;\n                }\n\
    \            }\n        }\n        if(count > max_count)\n        {\n        \
    \    max_count = count;\n            max_word = word;\n        }\n    }\n    return\
    \ max_word;\n}\nunittest\n{\n    alias candidate = find_max;\n\n    assert(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"name\",\
    \ \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\"\
    );\n    assert(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"a\", \"prrk\"])\
    \ == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxpk5rije.d(26): Error: no property `count` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxpk5rije.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word;\n    int max_unique = 0;\n    foreach(word; words) \n    {\n     \
    \   int unique = 0;\n        foreach(ch; word) \n        {\n            if(!ch\
    \ in max_word) \n            {\n                unique++;\n                max_word\
    \ ~= ch;\n            }\n        }\n        if(unique > max_unique) \n       \
    \ {\n            max_unique = unique;\n            max_word = word;\n        }\n\
    \    }\n    return max_word;\n}\nunittest\n{\n    alias candidate = find_max;\n\
    \n    assert(candidate([\"name\", \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\"\
    , \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"])\
    \ == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\"\
    , \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"\
    a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjvcdhxvv.d(20): Error: incompatible types for `(!ch) in (max_word)`:
    `bool` and `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjvcdhxvv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_count = 0;\n    foreach(word; words) \n    {\n\
    \        int count = 0;\n        foreach(c; word) \n        {\n            if(count\
    \ == 0) \n            {\n                count++;\n            }\n           \
    \ else \n            {\n                if(word[0..count].count(c) == 0) \n  \
    \              {\n                    count++;\n                }\n          \
    \  }\n        }\n        if(count > max_count) \n        {\n            max_count\
    \ = count;\n            max_word = word;\n        }\n        else if(count ==\
    \ max_count) \n        {\n            if(word < max_word) \n            {\n  \
    \              max_word = word;\n            }\n        }\n    }\n    return max_word;\n\
    }\nunittest\n{\n    alias candidate = find_max;\n\n    assert(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"\
    ]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n \
    \   assert(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"a\", \"prrk\"])\
    \ == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkgdmzzxx.d(26): Error: no property `count` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkgdmzzxx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_count = 0;\n    foreach(word; words)\n    {\n\
    \        int count = 0;\n        foreach(c; word)\n        {\n            if(count\
    \ == 0)\n            {\n                count = 1;\n            }\n          \
    \  else\n            {\n                if(word[0..count].count(c) == 0)\n   \
    \             {\n                    count++;\n                }\n           \
    \ }\n        }\n        if(count > max_count)\n        {\n            max_count\
    \ = count;\n            max_word = word;\n        }\n    }\n    return max_word;\n\
    }\nunittest\n{\n    alias candidate = find_max;\n\n    assert(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"\
    ]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n \
    \   assert(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"a\", \"prrk\"])\
    \ == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpcj6w1dso.d(26): Error: no property `count` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcj6w1dso.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    auto\
    \ max_word = words[0];\n    auto max_count = 0;\n    foreach(word; words) \n \
    \   {\n        auto count = 0;\n        foreach(c; word) \n        {\n       \
    \     if(c !in word[0..count]) \n            {\n                count++;\n   \
    \         }\n        }\n        if(count > max_count) \n        {\n          \
    \  max_count = count;\n            max_word = word;\n        }\n    }\n    return\
    \ max_word;\n}\nunittest\n{\n    alias candidate = find_max;\n\n    assert(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"name\",\
    \ \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\"\
    );\n    assert(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"a\", \"prrk\"])\
    \ == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppznj1_4u.d(20): Error: incompatible types for `(c) in (word[0..cast(ulong)count])`:
    `immutable(char)` and `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppznj1_4u.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word;\n    int max_count = 0;\n    foreach(word; words)\n    {\n       \
    \ int count = 0;\n        foreach(c; word)\n        {\n            if(count ==\
    \ 0)\n            {\n                count++;\n            }\n            else\n\
    \            {\n                if(word[0..count].canFind(c))\n              \
    \  {\n                    continue;\n                }\n                else\n\
    \                {\n                    count++;\n                }\n        \
    \    }\n        }\n        if(count > max_count)\n        {\n            max_count\
    \ = count;\n            max_word = word;\n        }\n        else if(count ==\
    \ max_count)\n        {\n            if(word < max_word)\n            {\n    \
    \            max_word = word;\n            }\n        }\n    }\n    return max_word;\n\
    }\nunittest\n{\n    alias candidate = find_max;\n\n    assert(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"\
    ]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n \
    \   assert(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"a\", \"prrk\"])\
    \ == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpy_wjznto.d(26): Error: no property `canFind` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy_wjznto.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    int\
    \ max_count = 0;\n    string max_word = \"\";\n    foreach(string word; words)\n\
    \    {\n        int count = 0;\n        foreach(char c; word)\n        {\n   \
    \         if(count == 0)\n            {\n                count++;\n          \
    \  }\n            else\n            {\n                if(word[0..count].count(c)\
    \ == 0)\n                {\n                    count++;\n                }\n\
    \            }\n        }\n        if(count > max_count)\n        {\n        \
    \    max_count = count;\n            max_word = word;\n        }\n        else\
    \ if(count == max_count)\n        {\n            if(word < max_word)\n       \
    \     {\n                max_word = word;\n            }\n        }\n    }\n \
    \   return max_word;\n}\nunittest\n{\n    alias candidate = find_max;\n\n    assert(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"name\",\
    \ \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\"\
    );\n    assert(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"a\", \"prrk\"])\
    \ == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmph_qt7n9l.d(26): Error: no property `count` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph_qt7n9l.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_unique = 0;\n    foreach(string word; words) \n\
    \    {\n        int unique = 0;\n        foreach(char c; word) \n        {\n \
    \           if(c in word[0..$-1]) \n            {\n                continue;\n\
    \            }\n            unique++;\n        }\n        if(unique > max_unique)\
    \ \n        {\n            max_unique = unique;\n            max_word = word;\n\
    \        }\n    }\n    return max_word;\n}\nunittest\n{\n    alias candidate =\
    \ find_max;\n\n    assert(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    );\n    assert(candidate([\"name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"\
    cba\"]) == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"\
    is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\"\
    );\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\");\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpaytekros.d(20): Error: incompatible types for `(c) in (word[0..__dollar
    - 1LU])`: `char` and `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpaytekros.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word;\n    int max_count = 0;\n    foreach(string word; words)\n    {\n\
    \        int count = 0;\n        foreach(char c; word)\n        {\n          \
    \  if(count == 0)\n            {\n                count++;\n            }\n  \
    \          else\n            {\n                if(word[$-1] != c)\n         \
    \       {\n                    count++;\n                }\n            }\n  \
    \      }\n        if(count > max_count)\n        {\n            max_count = count;\n\
    \            max_word = word;\n        }\n    }\n    return max_word;\n}\nunittest\n\
    {\n    alias candidate = find_max;\n\n    assert(candidate([\"name\", \"of\",\
    \ \"string\"]) == \"string\");\n    assert(candidate([\"name\", \"enam\", \"game\"\
    ]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    );\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n    assert(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\");\n    assert(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"])\
    \ == \"b\");\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\"\
    );\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp9ahvdte1.d(45): unittest failure

    ----------------

    ??:? _d_unittestp [0x429105]

    ??:? void tmp9ahvdte1.__unittest_L40_C1() [0x427d66]

    ??:? void tmp9ahvdte1.__modtest() [0x428370]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42da53]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x428e5e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42a901]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42a990]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42a88d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428e35]

    ??:? runModuleUnitTests [0x42d829]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4295c8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164137
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    int\
    \ max_unique = 0;\n    string max_word = \"\";\n    foreach(word; words)\n   \
    \ {\n        int unique = 0;\n        foreach(c; word)\n        {\n          \
    \  if(word.count(c) == 1)\n            {\n                unique++;\n        \
    \    }\n        }\n        if(unique > max_unique)\n        {\n            max_unique\
    \ = unique;\n            max_word = word;\n        }\n        else if(unique ==\
    \ max_unique)\n        {\n            if(word < max_word)\n            {\n   \
    \             max_word = word;\n            }\n        }\n    }\n    return max_word;\n\
    }\nunittest\n{\n    alias candidate = find_max;\n\n    assert(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"\
    ]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n \
    \   assert(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"a\", \"prrk\"])\
    \ == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6v1xysz6.d(20): Error: no property `count` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6v1xysz6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_unique = 0;\n    foreach(word; words)\n    {\n\
    \        int unique = 0;\n        foreach(c; word)\n        {\n            if(c\
    \ !in max_word)\n            {\n                unique++;\n                max_word\
    \ ~= c;\n            }\n        }\n        if(unique > max_unique)\n        {\n\
    \            max_unique = unique;\n            max_word = word;\n        }\n \
    \   }\n    return max_word;\n}\nunittest\n{\n    alias candidate = find_max;\n\
    \n    assert(candidate([\"name\", \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\"\
    , \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"])\
    \ == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\"\
    , \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"\
    a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqsq2x4si.d(20): Error: incompatible types for `(c) in (max_word)`:
    `immutable(char)` and `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqsq2x4si.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    int\
    \ max_unique = 0;\n    string max_word = \"\";\n    foreach(string word; words)\n\
    \    {\n        int unique = 0;\n        foreach(char c; word)\n        {\n  \
    \          if(c !in max_word)\n            {\n                unique++;\n    \
    \            max_word ~= c;\n            }\n        }\n        if(unique > max_unique)\n\
    \        {\n            max_unique = unique;\n            max_word = word;\n \
    \       }\n    }\n    return max_word;\n}\nunittest\n{\n    alias candidate =\
    \ find_max;\n\n    assert(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    );\n    assert(candidate([\"name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"\
    cba\"]) == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"\
    is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\"\
    );\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\");\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplb0t_nub.d(20): Error: incompatible types for `(c) in (max_word)`:
    `char` and `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplb0t_nub.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word;\n    int max_unique_chars = 0;\n    foreach(word; words) \n    {\n\
    \        int unique_chars = 0;\n        foreach(ch; word) \n        {\n      \
    \      if(ch in word[0 .. $-1]) \n            {\n                continue;\n \
    \           }\n            unique_chars++;\n        }\n        if(unique_chars\
    \ > max_unique_chars) \n        {\n            max_unique_chars = unique_chars;\n\
    \            max_word = word;\n        }\n    }\n    return max_word;\n}\nunittest\n\
    {\n    alias candidate = find_max;\n\n    assert(candidate([\"name\", \"of\",\
    \ \"string\"]) == \"string\");\n    assert(candidate([\"name\", \"enam\", \"game\"\
    ]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    );\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n    assert(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\");\n    assert(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"])\
    \ == \"b\");\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\"\
    );\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmps1jgv4hg.d(20): Error: incompatible types for `(ch) in (word[0..__dollar
    - 1LU])`: `immutable(char)` and `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmps1jgv4hg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_unique = 0;\n    foreach(word; words)\n    {\n\
    \        int unique = 0;\n        foreach(c; word)\n        {\n            if(!max_word.canFind(c))\n\
    \            {\n                unique++;\n            }\n        }\n        if(unique\
    \ > max_unique)\n        {\n            max_unique = unique;\n            max_word\
    \ = word;\n        }\n    }\n    return max_word;\n}\nunittest\n{\n    alias candidate\
    \ = find_max;\n\n    assert(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    );\n    assert(candidate([\"name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"\
    cba\"]) == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"\
    is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\"\
    );\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\");\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9rth_v6b.d(20): Error: no property `canFind` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9rth_v6b.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_count = 0;\n    foreach(word; words) \n    {\n\
    \        int count = 0;\n        foreach(ch; word) \n        {\n            if(!max_word.canFind(ch))\
    \ \n            {\n                count++;\n            }\n        }\n      \
    \  if(count > max_count) \n        {\n            max_count = count;\n       \
    \     max_word = word;\n        }\n    }\n    return max_word;\n}\nunittest\n\
    {\n    alias candidate = find_max;\n\n    assert(candidate([\"name\", \"of\",\
    \ \"string\"]) == \"string\");\n    assert(candidate([\"name\", \"enam\", \"game\"\
    ]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    );\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n    assert(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\");\n    assert(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"])\
    \ == \"b\");\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\"\
    );\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzdhcv83x.d(20): Error: no property `canFind` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzdhcv83x.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_unique = 0;\n    foreach(word; words) \n    {\n\
    \        int unique = 0;\n        foreach(c; word) \n        {\n            if(word.count(c)\
    \ == 1) \n            {\n                unique++;\n            }\n        }\n\
    \        if(unique > max_unique) \n        {\n            max_unique = unique;\n\
    \            max_word = word;\n        }\n        else if(unique == max_unique)\
    \ \n        {\n            max_word = min(max_word, word);\n        }\n    }\n\
    \    return max_word;\n}\nunittest\n{\n    alias candidate = find_max;\n\n   \
    \ assert(candidate([\"name\", \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\"\
    , \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"])\
    \ == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\"\
    , \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"\
    a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgmqz3dn5.d(20): Error: no property `count` for type `string`

    /tmp/tmpgmqz3dn5.d(32): Error: undefined identifier `min`, did you mean function
    `main`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgmqz3dn5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    int\
    \ max_count = 0;\n    string max_word = \"\";\n    foreach(word; words)\n    {\n\
    \        int count = 0;\n        foreach(c; word)\n        {\n            if(count\
    \ == 0)\n            {\n                count++;\n            }\n            else\n\
    \            {\n                if(word[0..count].count(c) == 0)\n           \
    \     {\n                    count++;\n                }\n            }\n    \
    \    }\n        if(count > max_count)\n        {\n            max_count = count;\n\
    \            max_word = word;\n        }\n        else if(count == max_count)\n\
    \        {\n            if(word < max_word)\n            {\n                max_word\
    \ = word;\n            }\n        }\n    }\n    return max_word;\n}\nunittest\n\
    {\n    alias candidate = find_max;\n\n    assert(candidate([\"name\", \"of\",\
    \ \"string\"]) == \"string\");\n    assert(candidate([\"name\", \"enam\", \"game\"\
    ]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    );\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n    assert(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\");\n    assert(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"])\
    \ == \"b\");\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\"\
    );\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplnhtdtv6.d(26): Error: no property `count` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplnhtdtv6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    int\
    \ max = 0;\n    string result = \"\";\n    foreach(word; words)\n    {\n     \
    \   int unique = 0;\n        foreach(c; word)\n        {\n            if(word.count(c)\
    \ == 1)\n            {\n                unique++;\n            }\n        }\n\
    \        if(unique > max)\n        {\n            max = unique;\n            result\
    \ = word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = find_max;\n\n    assert(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    );\n    assert(candidate([\"name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"\
    cba\"]) == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"\
    is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\"\
    );\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\");\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzqfcna14.d(20): Error: no property `count` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzqfcna14.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    int\
    \ max = 0;\n    string result = \"\";\n    foreach(string word; words) \n    {\n\
    \        int count = 0;\n        foreach(char c; word) \n        {\n         \
    \   if(c in word[0..count])\n                continue;\n            count++;\n\
    \        }\n        if(count > max) \n        {\n            max = count;\n  \
    \          result = word;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = find_max;\n\n    assert(candidate([\"name\", \"of\",\
    \ \"string\"]) == \"string\");\n    assert(candidate([\"name\", \"enam\", \"game\"\
    ]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    );\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n    assert(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\");\n    assert(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"])\
    \ == \"b\");\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\"\
    );\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpp3_59z15.d(20): Error: incompatible types for `(c) in (word[0..cast(ulong)count])`:
    `char` and `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp3_59z15.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_unique = 0;\n    foreach(word; words)\n    {\n\
    \        int unique = 0;\n        foreach(c; word)\n        {\n            if(!max_word.canFind(c))\n\
    \            {\n                unique++;\n            }\n        }\n        if(unique\
    \ > max_unique)\n        {\n            max_unique = unique;\n            max_word\
    \ = word;\n        }\n    }\n    return max_word;\n}\nunittest\n{\n    alias candidate\
    \ = find_max;\n\n    assert(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    );\n    assert(candidate([\"name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"\
    cba\"]) == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"\
    is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\"\
    );\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\");\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9rth_v6b.d(20): Error: no property `canFind` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9rth_v6b.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max = \"\";\n    int max_len = 0;\n    foreach(word; words) \n    {\n      \
    \  int len = 0;\n        foreach(c; word) \n        {\n            if(!c.canFindIn(word[0..$-1]))\n\
    \                len++;\n        }\n        if(len > max_len) \n        {\n  \
    \          max_len = len;\n            max = word;\n        }\n    }\n    return\
    \ max;\n}\nunittest\n{\n    alias candidate = find_max;\n\n    assert(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"name\",\
    \ \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\"\
    );\n    assert(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"a\", \"prrk\"])\
    \ == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpl1_5yvng.d(20): Error: no property `canFindIn` for type `immutable(char)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl1_5yvng.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_unique = 0;\n    foreach(word; words)\n    {\n\
    \        int unique = 0;\n        foreach(c; word)\n        {\n            if(count(word,\
    \ c) == 1)\n                unique++;\n        }\n        if(unique > max_unique)\n\
    \        {\n            max_unique = unique;\n            max_word = word;\n \
    \       }\n        else if(unique == max_unique)\n        {\n            if(word\
    \ < max_word)\n                max_word = word;\n        }\n    }\n    return\
    \ max_word;\n}\nunittest\n{\n    alias candidate = find_max;\n\n    assert(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"name\",\
    \ \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\"\
    );\n    assert(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"a\", \"prrk\"])\
    \ == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphqo5mihq.d(20): Error: undefined identifier `count`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphqo5mihq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    int\
    \ max = 0;\n    string result = \"\";\n    foreach(string word; words)\n    {\n\
    \        int count = 0;\n        foreach(char c; word)\n        {\n          \
    \  if(count == 0)\n            {\n                count++;\n            }\n  \
    \          else\n            {\n                int i = 0;\n                foreach(char\
    \ d; word[0..$-1])\n                {\n                    if(c == d)\n      \
    \              {\n                        i++;\n                    }\n      \
    \          }\n                if(i == 0)\n                {\n                \
    \    count++;\n                }\n            }\n        }\n        if(count >\
    \ max)\n        {\n            max = count;\n            result = word;\n    \
    \    }\n        else if(count == max)\n        {\n            if(word < result)\n\
    \            {\n                result = word;\n            }\n        }\n   \
    \ }\n    return result;\n}\nunittest\n{\n    alias candidate = find_max;\n\n \
    \   assert(candidate([\"name\", \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\"\
    , \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"])\
    \ == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\"\
    , \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"\
    a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp1dqz4u4y.d(59): unittest failure

    ----------------

    ??:? _d_unittestp [0x429255]

    ??:? void tmp1dqz4u4y.__unittest_L55_C1() [0x427dd1]

    ??:? void tmp1dqz4u4y.__modtest() [0x4284bc]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42dbf7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x428fae]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42aaa5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ab34]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42aa31]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428f85]

    ??:? runModuleUnitTests [0x42d9cd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42976c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164137
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    int\
    \ max_unique = 0;\n    string max_word = \"\";\n    foreach(word; words) \n  \
    \  {\n        int unique = 0;\n        foreach(c; word) \n        {\n        \
    \    if(word.count(c) == 1) \n            {\n                unique++;\n     \
    \       }\n        }\n        if(unique > max_unique) \n        {\n          \
    \  max_unique = unique;\n            max_word = word;\n        }\n        else\
    \ if(unique == max_unique) \n        {\n            if(word < max_word) \n   \
    \         {\n                max_word = word;\n            }\n        }\n    }\n\
    \    return max_word;\n}\nunittest\n{\n    alias candidate = find_max;\n\n   \
    \ assert(candidate([\"name\", \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\"\
    , \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"])\
    \ == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\"\
    , \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"\
    a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4jx4p9xh.d(20): Error: no property `count` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4jx4p9xh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    int\
    \ max = 0;\n    string max_word = \"\";\n    foreach(string word; words) \n  \
    \  {\n        int count = 0;\n        foreach(char c; word) \n        {\n    \
    \        if(word.count(c) == 1) \n            {\n                count++;\n  \
    \          }\n        }\n        if(count > max) \n        {\n            max\
    \ = count;\n            max_word = word;\n        }\n        else if(count ==\
    \ max) \n        {\n            if(word < max_word) \n            {\n        \
    \        max_word = word;\n            }\n        }\n    }\n    return max_word;\n\
    }\nunittest\n{\n    alias candidate = find_max;\n\n    assert(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"\
    ]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n \
    \   assert(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"a\", \"prrk\"])\
    \ == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7sevlxwn.d(20): Error: no property `count` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7sevlxwn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_count = 0;\n    foreach(string word; words) \n\
    \    {\n        int count = 0;\n        foreach(char c; word) \n        {\n  \
    \          if(count == max_count) \n            {\n                if(word < max_word)\
    \ \n                {\n                    max_word = word;\n                }\n\
    \            }\n            else if(count > max_count) \n            {\n     \
    \           max_word = word;\n                max_count = count;\n           \
    \ }\n            count++;\n        }\n    }\n    return max_word;\n}\nunittest\n\
    {\n    alias candidate = find_max;\n\n    assert(candidate([\"name\", \"of\",\
    \ \"string\"]) == \"string\");\n    assert(candidate([\"name\", \"enam\", \"game\"\
    ]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    );\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n    assert(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\");\n    assert(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"])\
    \ == \"b\");\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\"\
    );\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp8b7hwbzg.d(48): unittest failure

    ----------------

    ??:? _d_unittestp [0x4291b5]

    ??:? void tmp8b7hwbzg.__unittest_L37_C1() [0x428221]

    ??:? void tmp8b7hwbzg.__modtest() [0x42841c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42dae3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x428f0e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42a991]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42aa20]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42a91d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428ee5]

    ??:? runModuleUnitTests [0x42d8b9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429658]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164137
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_unique = 0;\n    foreach(word; words)\n    {\n\
    \        int unique = 0;\n        foreach(c; word)\n        {\n            if(count(word,\
    \ c) == 1)\n                unique++;\n        }\n        if(unique > max_unique)\n\
    \        {\n            max_unique = unique;\n            max_word = word;\n \
    \       }\n        else if(unique == max_unique)\n        {\n            if(word\
    \ < max_word)\n                max_word = word;\n        }\n    }\n    return\
    \ max_word;\n}\nunittest\n{\n    alias candidate = find_max;\n\n    assert(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"name\",\
    \ \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\"\
    );\n    assert(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"a\", \"prrk\"])\
    \ == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphqo5mihq.d(20): Error: undefined identifier `count`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphqo5mihq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    auto\
    \ max_word = words[0];\n    int max_count = 0;\n    foreach(word; words)\n   \
    \ {\n        auto count = 0;\n        foreach(ch; word)\n        {\n         \
    \   if(count == 0)\n            {\n                count = 1;\n            }\n\
    \            else\n            {\n                if(ch != word[count-1])\n  \
    \              {\n                    count++;\n                }\n          \
    \  }\n        }\n        if(count > max_count)\n        {\n            max_count\
    \ = count;\n            max_word = word;\n        }\n    }\n    return max_word;\n\
    }\nunittest\n{\n    alias candidate = find_max;\n\n    assert(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"\
    ]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n \
    \   assert(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"a\", \"prrk\"])\
    \ == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpzni5685m.d(45): unittest failure

    ----------------

    ??:? _d_unittestp [0x42911d]

    ??:? void tmpzni5685m.__unittest_L40_C1() [0x427d7e]

    ??:? void tmpzni5685m.__modtest() [0x428388]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42da6b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x428e76]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42a919]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42a9a8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42a8a5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428e4d]

    ??:? runModuleUnitTests [0x42d841]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4295e0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164137
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_count = 0;\n    foreach(word; words) \n    {\n\
    \        int count = 0;\n        foreach(char c; word) \n        {\n         \
    \   if(!max_word.canFind(c)) \n            {\n                count++;\n     \
    \       }\n        }\n        if(count > max_count) \n        {\n            max_count\
    \ = count;\n            max_word = word;\n        }\n    }\n    return max_word;\n\
    }\nunittest\n{\n    alias candidate = find_max;\n\n    assert(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"\
    ]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n \
    \   assert(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"a\", \"prrk\"])\
    \ == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzny58vy1.d(20): Error: no property `canFind` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzny58vy1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_count = 0;\n    foreach(word; words) \n    {\n\
    \        int count = 0;\n        foreach(c; word) \n        {\n            if(!max_word.canFind(c))\
    \ \n            {\n                count++;\n            }\n        }\n      \
    \  if(count > max_count) \n        {\n            max_count = count;\n       \
    \     max_word = word;\n        }\n    }\n    return max_word;\n}\nunittest\n\
    {\n    alias candidate = find_max;\n\n    assert(candidate([\"name\", \"of\",\
    \ \"string\"]) == \"string\");\n    assert(candidate([\"name\", \"enam\", \"game\"\
    ]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    );\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n    assert(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\");\n    assert(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"])\
    \ == \"b\");\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\"\
    );\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpumwklsks.d(20): Error: no property `canFind` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpumwklsks.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word;\n    int max_unique = 0;\n    foreach(word; words) \n    {\n     \
    \   int unique = 0;\n        foreach(c; word) \n        {\n            if(c !in\
    \ word[0..c]) \n            {\n                unique++;\n            }\n    \
    \    }\n        if(unique > max_unique) \n        {\n            max_unique =\
    \ unique;\n            max_word = word;\n        }\n    }\n    return max_word;\n\
    }\nunittest\n{\n    alias candidate = find_max;\n\n    assert(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"\
    ]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n \
    \   assert(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"a\", \"prrk\"])\
    \ == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpz5pzpyzu.d(20): Error: incompatible types for `(c) in (word[0..cast(ulong)c])`:
    `immutable(char)` and `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz5pzpyzu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_count = 0;\n    foreach(word; words)\n    {\n\
    \        int count = 0;\n        foreach(char c; word)\n        {\n          \
    \  if(!c.isAlpha)\n                continue;\n            if(!max_word.canFind(c))\n\
    \                count++;\n        }\n        if(count > max_count)\n        {\n\
    \            max_count = count;\n            max_word = word;\n        }\n   \
    \ }\n    return max_word;\n}\nunittest\n{\n    alias candidate = find_max;\n\n\
    \    assert(candidate([\"name\", \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\"\
    , \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"])\
    \ == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\"\
    , \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"\
    a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpj97w6i54.d(20): Error: no property `isAlpha` for type `char`

    /tmp/tmpj97w6i54.d(22): Error: no property `canFind` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj97w6i54.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max = \"\";\n    int max_count = 0;\n    foreach(string word; words) \n    {\n\
    \        int count = 0;\n        foreach(char c; word) \n        {\n         \
    \   if(c !in word[0..$-1]) \n            {\n                count++;\n       \
    \     }\n        }\n        if(count > max_count) \n        {\n            max\
    \ = word;\n            max_count = count;\n        }\n    }\n    return max;\n\
    }\nunittest\n{\n    alias candidate = find_max;\n\n    assert(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"\
    ]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n \
    \   assert(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"a\", \"prrk\"])\
    \ == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpevcvzya5.d(20): Error: incompatible types for `(c) in (word[0..__dollar
    - 1LU])`: `char` and `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpevcvzya5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    int\
    \ max_count = 0;\n    string max_word = \"\";\n    foreach(string word; words)\
    \ \n    {\n        int count = 0;\n        foreach(char c; word) \n        {\n\
    \            if(!max_word.canFind(c)) \n            {\n                count++;\n\
    \            }\n        }\n        if(count > max_count) \n        {\n       \
    \     max_count = count;\n            max_word = word;\n        }\n    }\n   \
    \ return max_word;\n}\nunittest\n{\n    alias candidate = find_max;\n\n    assert(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"name\",\
    \ \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\"\
    );\n    assert(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"a\", \"prrk\"])\
    \ == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkfoqlemk.d(20): Error: no property `canFind` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkfoqlemk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164137
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_unique = 0;\n    foreach(string word; words) \n\
    \    {\n        int unique = 0;\n        foreach(char c; word) \n        {\n \
    \           if(!max_word.canFind(c)) \n            {\n                unique++;\n\
    \            }\n        }\n        if(unique > max_unique) \n        {\n     \
    \       max_unique = unique;\n            max_word = word;\n        }\n    }\n\
    \    return max_word;\n}\nunittest\n{\n    alias candidate = find_max;\n\n   \
    \ assert(candidate([\"name\", \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\"\
    , \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"])\
    \ == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\"\
    , \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"\
    a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnr2lv63e.d(20): Error: no property `canFind` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnr2lv63e.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    int\
    \ max_unique = 0;\n    string max_word = \"\";\n    foreach(word; words) \n  \
    \  {\n        int unique = 0;\n        foreach(c; word) \n        {\n        \
    \    if(word.count(c) == 1) \n            {\n                unique++;\n     \
    \       }\n        }\n        if(unique > max_unique) \n        {\n          \
    \  max_unique = unique;\n            max_word = word;\n        }\n        else\
    \ if(unique == max_unique) \n        {\n            if(word < max_word) \n   \
    \         {\n                max_word = word;\n            }\n        }\n    }\n\
    \    return max_word;\n}\nunittest\n{\n    alias candidate = find_max;\n\n   \
    \ assert(candidate([\"name\", \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\"\
    , \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"])\
    \ == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\"\
    , \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"\
    a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4jx4p9xh.d(20): Error: no property `count` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4jx4p9xh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    string\
    \ result = \"\";\n    int max = 0;\n    foreach(string word; words)\n    {\n \
    \       int count = 0;\n        foreach(char c; word)\n        {\n           \
    \ if(c !in result)\n            {\n                count++;\n                result\
    \ ~= c;\n            }\n        }\n        if(count > max)\n        {\n      \
    \      max = count;\n            result = word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = find_max;\n\n    assert(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"name\",\
    \ \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\"\
    );\n    assert(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"a\", \"prrk\"])\
    \ == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpr9u7k43m.d(20): Error: incompatible types for `(c) in (result)`:
    `char` and `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr9u7k43m.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    int\
    \ max_unique = 0;\n    string max_word = \"\";\n    foreach(word; words)\n   \
    \ {\n        int unique = 0;\n        foreach(c; word)\n        {\n          \
    \  if(word.count(c) == 1)\n            {\n                unique++;\n        \
    \    }\n        }\n        if(unique > max_unique)\n        {\n            max_unique\
    \ = unique;\n            max_word = word;\n        }\n        else if(unique ==\
    \ max_unique)\n        {\n            if(word < max_word)\n            {\n   \
    \             max_word = word;\n            }\n        }\n    }\n    return max_word;\n\
    }\nunittest\n{\n    alias candidate = find_max;\n\n    assert(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"\
    ]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n \
    \   assert(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"a\", \"prrk\"])\
    \ == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6v1xysz6.d(20): Error: no property `count` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6v1xysz6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_unique = 0;\n    foreach(word; words)\n    {\n\
    \        auto unique_chars = set(word);\n        if(unique_chars.length > max_unique)\n\
    \        {\n            max_unique = unique_chars.length;\n            max_word\
    \ = word;\n        }\n        else if(unique_chars.length == max_unique)\n   \
    \     {\n            if(word < max_word)\n            {\n                max_word\
    \ = word;\n            }\n        }\n    }\n    return max_word;\n}\nunittest\n\
    {\n    alias candidate = find_max;\n\n    assert(candidate([\"name\", \"of\",\
    \ \"string\"]) == \"string\");\n    assert(candidate([\"name\", \"enam\", \"game\"\
    ]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    );\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n    assert(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\");\n    assert(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"])\
    \ == \"b\");\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\"\
    );\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpt1coto8o.d(17): Error: undefined identifier `set`, did you mean
    template `get(K, V)(inout(V[K]) aa, K key, lazy inout(V) defaultValue)`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt1coto8o.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164137
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max;\n    int max_count = 0;\n    foreach(string word; words) \n    {\n    \
    \    int count = 0;\n        foreach(char c; word) \n        {\n            if(count\
    \ == max_count) \n            {\n                if(word < max) \n           \
    \     {\n                    max = word;\n                }\n            }\n \
    \           else if(count > max_count) \n            {\n                max =\
    \ word;\n                max_count = count;\n            }\n            count++;\n\
    \        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = find_max;\n\
    \n    assert(candidate([\"name\", \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\"\
    , \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"])\
    \ == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\"\
    , \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"\
    a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpq1m4bkqx.d(48): unittest failure

    ----------------

    ??:? _d_unittestp [0x4291b5]

    ??:? void tmpq1m4bkqx.__unittest_L37_C1() [0x428221]

    ??:? void tmpq1m4bkqx.__modtest() [0x42841c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42dae3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x428f0e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42a991]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42aa20]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42a91d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428ee5]

    ??:? runModuleUnitTests [0x42d8b9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429658]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164137
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    int\
    \ max = 0;\n    string result = \"\";\n    foreach(string word; words)\n    {\n\
    \        int count = 0;\n        foreach(char c; word)\n        {\n          \
    \  if(!result.canFind(c))\n            {\n                count++;\n         \
    \   }\n        }\n        if(count > max)\n        {\n            max = count;\n\
    \            result = word;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = find_max;\n\n    assert(candidate([\"name\", \"of\",\
    \ \"string\"]) == \"string\");\n    assert(candidate([\"name\", \"enam\", \"game\"\
    ]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    );\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n    assert(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\");\n    assert(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"])\
    \ == \"b\");\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\"\
    );\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpy9wrtbbs.d(20): Error: no property `canFind` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy9wrtbbs.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164137
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max = \"\";\n    int max_unique = 0;\n    foreach(word; words)\n    {\n    \
    \    int unique = 0;\n        foreach(ch; word)\n        {\n            if(!ch\
    \ in max)\n            {\n                unique++;\n            }\n        }\n\
    \        if(unique > max_unique)\n        {\n            max = word;\n       \
    \     max_unique = unique;\n        }\n    }\n    return max;\n}\nunittest\n{\n\
    \    alias candidate = find_max;\n\n    assert(candidate([\"name\", \"of\", \"\
    string\"]) == \"string\");\n    assert(candidate([\"name\", \"enam\", \"game\"\
    ]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    );\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n    assert(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\");\n    assert(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"])\
    \ == \"b\");\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\"\
    );\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgfwfnfbg.d(20): Error: incompatible types for `(!ch) in (max)`:
    `bool` and `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgfwfnfbg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164137
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    string\
    \ result = \"\";\n    int max = 0;\n    foreach(string word; words)\n    {\n \
    \       int count = 0;\n        foreach(char c; word)\n        {\n           \
    \ if(c !in result)\n            {\n                count++;\n                result\
    \ ~= c;\n            }\n        }\n        if(count > max)\n        {\n      \
    \      max = count;\n            result = word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = find_max;\n\n    assert(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"name\",\
    \ \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\"\
    );\n    assert(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"a\", \"prrk\"])\
    \ == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpr9u7k43m.d(20): Error: incompatible types for `(c) in (result)`:
    `char` and `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr9u7k43m.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max = \"\";\n    foreach(string word; words)\n    {\n        if(word.length\
    \ > max.length)\n        {\n            max = word;\n        }\n    }\n    return\
    \ max;\n}\nunittest\n{\n    alias candidate = find_max;\n\n    assert(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"name\",\
    \ \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\"\
    );\n    assert(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"a\", \"prrk\"])\
    \ == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpyo_22jij.d(28): unittest failure

    ----------------

    ??:? _d_unittestp [0x429065]

    ??:? void tmpyo_22jij.__unittest_L23_C1() [0x427cc2]

    ??:? void tmpyo_22jij.__modtest() [0x4282cc]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d93f]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x428dbe]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42a7ed]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42a87c]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42a779]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428d95]

    ??:? runModuleUnitTests [0x42d715]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4294b4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164137
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word;\n    int max_unique_chars = 0;\n    foreach(word; words) \n    {\n\
    \        int unique_chars = 0;\n        foreach(char c; word) \n        {\n  \
    \          if(word.count(c) == 1) \n            {\n                unique_chars++;\n\
    \            }\n        }\n        if(unique_chars > max_unique_chars) \n    \
    \    {\n            max_unique_chars = unique_chars;\n            max_word = word;\n\
    \        }\n    }\n    return max_word;\n}\nunittest\n{\n    alias candidate =\
    \ find_max;\n\n    assert(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    );\n    assert(candidate([\"name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"\
    cba\"]) == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"\
    is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\"\
    );\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\");\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp64al56q_.d(20): Error: no property `count` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp64al56q_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word;\n    int max_unique = 0;\n    foreach(word; words)\n    {\n      \
    \  int unique = 0;\n        foreach(c; word)\n        {\n            if(c !in\
    \ word[0..$-1])\n                unique++;\n        }\n        if(unique > max_unique)\n\
    \        {\n            max_unique = unique;\n            max_word = word;\n \
    \       }\n    }\n    return max_word;\n}\nunittest\n{\n    alias candidate =\
    \ find_max;\n\n    assert(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    );\n    assert(candidate([\"name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"\
    cba\"]) == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"\
    is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\"\
    );\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\");\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8lkwl0qd.d(20): Error: incompatible types for `(c) in (word[0..__dollar
    - 1LU])`: `immutable(char)` and `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8lkwl0qd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164137
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    int\
    \ max = 0;\n    string max_word = \"\";\n    foreach(word; words) \n    {\n  \
    \      int count = 0;\n        foreach(c; word) \n        {\n            if(word.count(c)\
    \ == 1) \n            {\n                count++;\n            }\n        }\n\
    \        if(count > max) \n        {\n            max = count;\n            max_word\
    \ = word;\n        }\n        else if(count == max) \n        {\n            if(word\
    \ < max_word) \n            {\n                max_word = word;\n            }\n\
    \        }\n    }\n    return max_word;\n}\nunittest\n{\n    alias candidate =\
    \ find_max;\n\n    assert(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    );\n    assert(candidate([\"name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"\
    cba\"]) == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"\
    is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\"\
    );\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\");\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbl1riy0b.d(20): Error: no property `count` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbl1riy0b.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164137
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_count = 0;\n    foreach(string word; words)\n\
    \    {\n        int count = 0;\n        foreach(char c; word)\n        {\n   \
    \         if(!max_word.canFind(c))\n            {\n                count++;\n\
    \            }\n        }\n        if(count > max_count)\n        {\n        \
    \    max_count = count;\n            max_word = word;\n        }\n    }\n    return\
    \ max_word;\n}\nunittest\n{\n    alias candidate = find_max;\n\n    assert(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"name\",\
    \ \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\"\
    );\n    assert(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"a\", \"prrk\"])\
    \ == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8_q60y__.d(20): Error: no property `canFind` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8_q60y__.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    int\
    \ max = 0;\n    string max_word = \"\";\n    foreach(word; words) \n    {\n  \
    \      int count = 0;\n        foreach(ch; word) \n        {\n            if(word.count(ch)\
    \ == 1) \n            {\n                count++;\n            }\n        }\n\
    \        if(count > max) \n        {\n            max = count;\n            max_word\
    \ = word;\n        }\n        else if(count == max) \n        {\n            max_word\
    \ = min(max_word, word);\n        }\n    }\n    return max_word;\n}\nunittest\n\
    {\n    alias candidate = find_max;\n\n    assert(candidate([\"name\", \"of\",\
    \ \"string\"]) == \"string\");\n    assert(candidate([\"name\", \"enam\", \"game\"\
    ]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    );\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n    assert(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\");\n    assert(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"])\
    \ == \"b\");\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\"\
    );\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp990qzm8a.d(20): Error: no property `count` for type `string`

    /tmp/tmp990qzm8a.d(32): Error: undefined identifier `min`, did you mean function
    `main`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp990qzm8a.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164137
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max = \"\";\n    int max_unique = 0;\n    foreach(word; words)\n    {\n    \
    \    int unique = 0;\n        foreach(c; word)\n        {\n            if(count(word,\
    \ c) == 1)\n                unique++;\n        }\n        if(unique > max_unique)\n\
    \        {\n            max = word;\n            max_unique = unique;\n      \
    \  }\n        else if(unique == max_unique)\n        {\n            if(word <\
    \ max)\n                max = word;\n        }\n    }\n    return max;\n}\nunittest\n\
    {\n    alias candidate = find_max;\n\n    assert(candidate([\"name\", \"of\",\
    \ \"string\"]) == \"string\");\n    assert(candidate([\"name\", \"enam\", \"game\"\
    ]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    );\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n    assert(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\");\n    assert(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"])\
    \ == \"b\");\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\"\
    );\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpuv_4hmqb.d(20): Error: undefined identifier `count`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuv_4hmqb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164137
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_count = 0;\n    foreach(string word; words)\n\
    \    {\n        int count = 0;\n        foreach(char c; word)\n        {\n   \
    \         if(count == 0)\n            {\n                count++;\n          \
    \  }\n            else\n            {\n                if(word[0..count].count(c)\
    \ == 0)\n                {\n                    count++;\n                }\n\
    \            }\n        }\n        if(count > max_count)\n        {\n        \
    \    max_count = count;\n            max_word = word;\n        }\n    }\n    return\
    \ max_word;\n}\nunittest\n{\n    alias candidate = find_max;\n\n    assert(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"name\",\
    \ \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\"\
    );\n    assert(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"a\", \"prrk\"])\
    \ == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxpk5rije.d(26): Error: no property `count` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxpk5rije.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_unique = 0;\n    foreach(word; words)\n    {\n\
    \        int unique = 0;\n        foreach(c; word)\n        {\n            if(!max_word.canFind(c))\n\
    \            {\n                unique++;\n            }\n        }\n        if(unique\
    \ > max_unique)\n        {\n            max_unique = unique;\n            max_word\
    \ = word;\n        }\n    }\n    return max_word;\n}\nunittest\n{\n    alias candidate\
    \ = find_max;\n\n    assert(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    );\n    assert(candidate([\"name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"\
    cba\"]) == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"\
    is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\"\
    );\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\");\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9rth_v6b.d(20): Error: no property `canFind` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9rth_v6b.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    int\
    \ max_unique = 0;\n    string max_word = \"\";\n    foreach(word; words)\n   \
    \ {\n        int unique = 0;\n        foreach(c; word)\n        {\n          \
    \  if(word.count(c) == 1)\n            {\n                unique++;\n        \
    \    }\n        }\n        if(unique > max_unique)\n        {\n            max_unique\
    \ = unique;\n            max_word = word;\n        }\n        else if(unique ==\
    \ max_unique)\n        {\n            if(word < max_word)\n            {\n   \
    \             max_word = word;\n            }\n        }\n    }\n    return max_word;\n\
    }\nunittest\n{\n    alias candidate = find_max;\n\n    assert(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"\
    ]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n \
    \   assert(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"a\", \"prrk\"])\
    \ == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6v1xysz6.d(20): Error: no property `count` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6v1xysz6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word;\n    int max_unique_chars = 0;\n    foreach(string word; words) \n\
    \    {\n        int unique_chars = 0;\n        foreach(char c; word) \n      \
    \  {\n            if(word.count(c) == 1) \n            {\n                unique_chars++;\n\
    \            }\n        }\n        if(unique_chars > max_unique_chars) \n    \
    \    {\n            max_unique_chars = unique_chars;\n            max_word = word;\n\
    \        }\n    }\n    return max_word;\n}\nunittest\n{\n    alias candidate =\
    \ find_max;\n\n    assert(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    );\n    assert(candidate([\"name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"\
    cba\"]) == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"\
    is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\"\
    );\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\");\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7x_4el2i.d(20): Error: no property `count` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7x_4el2i.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164137
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_unique = 0;\n    foreach(word; words)\n    {\n\
    \        int unique = 0;\n        foreach(c; word)\n        {\n            if(!c.canFind(word))\n\
    \                unique++;\n        }\n        if(unique > max_unique)\n     \
    \   {\n            max_unique = unique;\n            max_word = word;\n      \
    \  }\n    }\n    return max_word;\n}\nunittest\n{\n    alias candidate = find_max;\n\
    \n    assert(candidate([\"name\", \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\"\
    , \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"])\
    \ == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\"\
    , \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"\
    a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwtitkf_3.d(20): Error: no property `canFind` for type `immutable(char)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwtitkf_3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164137
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word;\n    int max_unique = 0;\n    foreach(string word; words) \n    {\n\
    \        int unique_chars = 0;\n        foreach(char c; word) \n        {\n  \
    \          if(c !in word[0 .. $ - 1]) \n            {\n                unique_chars++;\n\
    \            }\n        }\n        if(unique_chars > max_unique) \n        {\n\
    \            max_unique = unique_chars;\n            max_word = word;\n      \
    \  }\n    }\n    return max_word;\n}\nunittest\n{\n    alias candidate = find_max;\n\
    \n    assert(candidate([\"name\", \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\"\
    , \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"])\
    \ == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\"\
    , \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"\
    a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpee9f981p.d(20): Error: incompatible types for `(c) in (word[0..__dollar
    - 1LU])`: `char` and `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpee9f981p.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164137
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word;\n    int max_unique = 0;\n    foreach(word; words) \n    {\n     \
    \   int unique = 0;\n        foreach(c; word) \n        {\n            if(count(word,\
    \ c) == 1) \n            {\n                unique++;\n            }\n       \
    \ }\n        if(unique > max_unique) \n        {\n            max_unique = unique;\n\
    \            max_word = word;\n        }\n        else if(unique == max_unique)\
    \ \n        {\n            max_word = min(max_word, word);\n        }\n    }\n\
    \    return max_word;\n}\nunittest\n{\n    alias candidate = find_max;\n\n   \
    \ assert(candidate([\"name\", \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\"\
    , \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"])\
    \ == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\"\
    , \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"\
    a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_lms521z.d(20): Error: undefined identifier `count`

    /tmp/tmp_lms521z.d(32): Error: undefined identifier `min`, did you mean function
    `main`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_lms521z.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164137
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    int\
    \ max = 0;\n    string max_word = \"\";\n    foreach(string word; words) \n  \
    \  {\n        int count = 0;\n        foreach(char c; word) \n        {\n    \
    \        if(count == 0) \n            {\n                count++;\n          \
    \  }\n            else \n            {\n                bool found = false;\n\
    \                foreach(char c2; word[0..$-1]) \n                {\n        \
    \            if(c == c2) \n                    {\n                        found\
    \ = true;\n                        break;\n                    }\n           \
    \     }\n                if(!found) \n                {\n                    count++;\n\
    \                }\n            }\n        }\n        if(count > max) \n     \
    \   {\n            max = count;\n            max_word = word;\n        }\n   \
    \     else if(count == max) \n        {\n            if(word < max_word) \n  \
    \          {\n                max_word = word;\n            }\n        }\n   \
    \ }\n    return max_word;\n}\nunittest\n{\n    alias candidate = find_max;\n\n\
    \    assert(candidate([\"name\", \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\"\
    , \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"])\
    \ == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\"\
    , \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"\
    a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpflc_vgd5.d(60): unittest failure

    ----------------

    ??:? _d_unittestp [0x429255]

    ??:? void tmpflc_vgd5.__unittest_L56_C1() [0x427dd1]

    ??:? void tmpflc_vgd5.__modtest() [0x4284bc]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42dbf7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x428fae]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42aaa5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ab34]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42aa31]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428f85]

    ??:? runModuleUnitTests [0x42d9cd]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42976c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164137
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word;\n    int max_unique = 0;\n    foreach(word; words) \n    {\n     \
    \   int unique = 0;\n        foreach(c; word) \n        {\n            if(!c.canFindIn(word[0..$-1]))\
    \ \n            {\n                unique++;\n            }\n        }\n     \
    \   if(unique > max_unique) \n        {\n            max_unique = unique;\n  \
    \          max_word = word;\n        }\n    }\n    return max_word;\n}\nunittest\n\
    {\n    alias candidate = find_max;\n\n    assert(candidate([\"name\", \"of\",\
    \ \"string\"]) == \"string\");\n    assert(candidate([\"name\", \"enam\", \"game\"\
    ]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    );\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n    assert(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\");\n    assert(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"])\
    \ == \"b\");\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\"\
    );\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwoux0wvg.d(20): Error: no property `canFindIn` for type `immutable(char)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwoux0wvg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164137
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    auto\
    \ max = 0;\n    string max_word;\n    foreach(word; words)\n    {\n        auto\
    \ count = 0;\n        foreach(c; word)\n        {\n            if(count == 0)\n\
    \            {\n                count++;\n            }\n            else\n  \
    \          {\n                if(word[0..count].canFind(c))\n                {\n\
    \                    continue;\n                }\n                else\n    \
    \            {\n                    count++;\n                }\n            }\n\
    \        }\n        if(count > max)\n        {\n            max = count;\n   \
    \         max_word = word;\n        }\n    }\n    return max_word;\n}\nunittest\n\
    {\n    alias candidate = find_max;\n\n    assert(candidate([\"name\", \"of\",\
    \ \"string\"]) == \"string\");\n    assert(candidate([\"name\", \"enam\", \"game\"\
    ]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    );\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n    assert(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\");\n    assert(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"])\
    \ == \"b\");\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\"\
    );\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsy88d05i.d(26): Error: no property `canFind` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsy88d05i.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164137
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_unique = 0;\n    foreach(word; words)\n    {\n\
    \        int unique = 0;\n        foreach(c; word)\n        {\n            if(word.count(c)\
    \ == 1)\n            {\n                unique++;\n            }\n        }\n\
    \        if(unique > max_unique)\n        {\n            max_unique = unique;\n\
    \            max_word = word;\n        }\n        else if(unique == max_unique)\n\
    \        {\n            if(word < max_word)\n            {\n                max_word\
    \ = word;\n            }\n        }\n    }\n    return max_word;\n}\nunittest\n\
    {\n    alias candidate = find_max;\n\n    assert(candidate([\"name\", \"of\",\
    \ \"string\"]) == \"string\");\n    assert(candidate([\"name\", \"enam\", \"game\"\
    ]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    );\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n    assert(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\");\n    assert(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"])\
    \ == \"b\");\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\"\
    );\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpd2ej3odv.d(20): Error: no property `count` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd2ej3odv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word;\n    int max_unique = 0;\n    foreach(word; words)\n    {\n      \
    \  int unique = 0;\n        foreach(c; word)\n        {\n            if(c.count(word)\
    \ == 1)\n                unique++;\n        }\n        if(unique > max_unique)\n\
    \        {\n            max_unique = unique;\n            max_word = word;\n \
    \       }\n        else if(unique == max_unique)\n        {\n            if(word\
    \ < max_word)\n                max_word = word;\n        }\n    }\n    return\
    \ max_word;\n}\nunittest\n{\n    alias candidate = find_max;\n\n    assert(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"name\",\
    \ \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\"\
    );\n    assert(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"a\", \"prrk\"])\
    \ == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpz0od78rq.d(20): Error: no property `count` for type `immutable(char)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz0od78rq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164137
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word;\n    int max_count = 0;\n    foreach(string word; words)\n    {\n\
    \        int count = 0;\n        foreach(char c; word)\n        {\n          \
    \  if(c !in word[0..$-1])\n                count++;\n        }\n        if(count\
    \ > max_count)\n        {\n            max_count = count;\n            max_word\
    \ = word;\n        }\n    }\n    return max_word;\n}\nunittest\n{\n    alias candidate\
    \ = find_max;\n\n    assert(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    );\n    assert(candidate([\"name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"\
    cba\"]) == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"\
    is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\"\
    );\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\");\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfx0718hz.d(20): Error: incompatible types for `(c) in (word[0..__dollar
    - 1LU])`: `char` and `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfx0718hz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164137
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_count = 0;\n    foreach(word; words)\n    {\n\
    \        int count = 0;\n        foreach(c; word)\n        {\n            if(count\
    \ == max_count)\n            {\n                if(word < max_word)\n        \
    \        {\n                    max_word = word;\n                }\n        \
    \    }\n            else if(count > max_count)\n            {\n              \
    \  max_word = word;\n                max_count = count;\n            }\n     \
    \       count++;\n        }\n    }\n    return max_word;\n}\nunittest\n{\n   \
    \ alias candidate = find_max;\n\n    assert(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\");\n    assert(candidate([\"name\", \"enam\", \"game\"]) == \"\
    enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\");\n\
    \    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n    assert(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\");\n    assert(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"])\
    \ == \"b\");\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\"\
    );\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmph1hg0549.d(48): unittest failure

    ----------------

    ??:? _d_unittestp [0x4291b5]

    ??:? void tmph1hg0549.__unittest_L37_C1() [0x428221]

    ??:? void tmph1hg0549.__modtest() [0x42841c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42dae3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x428f0e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42a991]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42aa20]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42a91d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428ee5]

    ??:? runModuleUnitTests [0x42d8b9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429658]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164137
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_unique = 0;\n    foreach(word; words)\n    {\n\
    \        int unique = 0;\n        foreach(c; word)\n        {\n            if(word.count(c)\
    \ == 1)\n            {\n                unique++;\n            }\n        }\n\
    \        if(unique > max_unique)\n        {\n            max_unique = unique;\n\
    \            max_word = word;\n        }\n        else if(unique == max_unique)\n\
    \        {\n            if(word < max_word)\n            {\n                max_word\
    \ = word;\n            }\n        }\n    }\n    return max_word;\n}\nunittest\n\
    {\n    alias candidate = find_max;\n\n    assert(candidate([\"name\", \"of\",\
    \ \"string\"]) == \"string\");\n    assert(candidate([\"name\", \"enam\", \"game\"\
    ]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    );\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n    assert(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\");\n    assert(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"])\
    \ == \"b\");\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\"\
    );\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpd2ej3odv.d(20): Error: no property `count` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd2ej3odv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word;\n    int max_unique_chars = 0;\n    foreach(word; words)\n    {\n\
    \        int unique_chars = 0;\n        foreach(char c; word)\n        {\n   \
    \         if(word.count(c) == 1)\n            {\n                unique_chars++;\n\
    \            }\n        }\n        if(unique_chars > max_unique_chars)\n     \
    \   {\n            max_unique_chars = unique_chars;\n            max_word = word;\n\
    \        }\n        else if(unique_chars == max_unique_chars)\n        {\n   \
    \         if(word < max_word)\n            {\n                max_word = word;\n\
    \            }\n        }\n    }\n    return max_word;\n}\nunittest\n{\n    alias\
    \ candidate = find_max;\n\n    assert(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\");\n    assert(candidate([\"name\", \"enam\", \"game\"]) == \"\
    enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\");\n\
    \    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n    assert(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\");\n    assert(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"])\
    \ == \"b\");\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\"\
    );\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpcdg5xquy.d(20): Error: no property `count` for type `string`

    '
  stdout: ''
  timestamp: 1660164137
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_unique = 0;\n    foreach(string word; words)\n\
    \    {\n        int unique = 0;\n        foreach(char c; word)\n        {\n  \
    \          if(!max_word.canFind(c))\n            {\n                unique++;\n\
    \            }\n        }\n        if(unique > max_unique)\n        {\n      \
    \      max_unique = unique;\n            max_word = word;\n        }\n    }\n\
    \    return max_word;\n}\nunittest\n{\n    alias candidate = find_max;\n\n   \
    \ assert(candidate([\"name\", \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\"\
    , \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"])\
    \ == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\"\
    , \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"\
    a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7286wr3a.d(20): Error: no property `canFind` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7286wr3a.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    int\
    \ max = 0;\n    string result = \"\";\n    foreach(string word; words)\n    {\n\
    \        int count = 0;\n        foreach(char c; word)\n        {\n          \
    \  if(c in word[0..count])\n                continue;\n            count++;\n\
    \        }\n        if(count > max)\n        {\n            max = count;\n   \
    \         result = word;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = find_max;\n\n    assert(candidate([\"name\", \"of\",\
    \ \"string\"]) == \"string\");\n    assert(candidate([\"name\", \"enam\", \"game\"\
    ]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    );\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n    assert(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\");\n    assert(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"])\
    \ == \"b\");\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\"\
    );\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsrqcjtls.d(20): Error: incompatible types for `(c) in (word[0..cast(ulong)count])`:
    `char` and `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsrqcjtls.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164136
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word;\n    int max_count = 0;\n    foreach(word; words)\n    {\n       \
    \ int count = 0;\n        foreach(char c; word)\n        {\n            if(count\
    \ == 0)\n            {\n                count++;\n            }\n            else\n\
    \            {\n                if(c != word[count-1])\n                {\n  \
    \                  count++;\n                }\n            }\n        }\n   \
    \     if(count > max_count)\n        {\n            max_count = count;\n     \
    \       max_word = word;\n        }\n        else if(count == max_count)\n   \
    \     {\n            if(word < max_word)\n            {\n                max_word\
    \ = word;\n            }\n        }\n    }\n    return max_word;\n}\nunittest\n\
    {\n    alias candidate = find_max;\n\n    assert(candidate([\"name\", \"of\",\
    \ \"string\"]) == \"string\");\n    assert(candidate([\"name\", \"enam\", \"game\"\
    ]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    );\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n    assert(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\");\n    assert(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"])\
    \ == \"b\");\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\"\
    );\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164137
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    int\
    \ max = 0;\n    string max_word = \"\";\n    foreach(word; words)\n    {\n   \
    \     int count = 0;\n        foreach(c; word)\n        {\n            if(count\
    \ == 0)\n            {\n                count++;\n            }\n            else\n\
    \            {\n                if(word[0..count].count(c) == 0)\n           \
    \     {\n                    count++;\n                }\n            }\n    \
    \    }\n        if(count > max)\n        {\n            max = count;\n       \
    \     max_word = word;\n        }\n        else if(count == max)\n        {\n\
    \            if(word < max_word)\n            {\n                max_word = word;\n\
    \            }\n        }\n    }\n    return max_word;\n}\nunittest\n{\n    alias\
    \ candidate = find_max;\n\n    assert(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\");\n    assert(candidate([\"name\", \"enam\", \"game\"]) == \"\
    enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\");\n\
    \    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n    assert(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\");\n    assert(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"])\
    \ == \"b\");\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\"\
    );\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3izrzxwc.d(26): Error: no property `count` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3izrzxwc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    int\
    \ max = 0;\n    string max_word = \"\";\n    foreach(word; words)\n    {\n   \
    \     int count = 0;\n        foreach(c; word)\n        {\n            if(!max_word.canFind(c))\n\
    \            {\n                count++;\n            }\n        }\n        if(count\
    \ > max)\n        {\n            max = count;\n            max_word = word;\n\
    \        }\n    }\n    return max_word;\n}\nunittest\n{\n    alias candidate =\
    \ find_max;\n\n    assert(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    );\n    assert(candidate([\"name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"\
    cba\"]) == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"\
    is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\"\
    );\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\");\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpt1d7z7b0.d(20): Error: no property `canFind` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt1d7z7b0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164137
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_unique = 0;\n    foreach(string word; words)\n\
    \    {\n        int unique = 0;\n        foreach(char c; word)\n        {\n  \
    \          if(word.count(c) == 1)\n                unique++;\n        }\n    \
    \    if(unique > max_unique)\n        {\n            max_unique = unique;\n  \
    \          max_word = word;\n        }\n        else if(unique == max_unique)\n\
    \        {\n            if(word < max_word)\n                max_word = word;\n\
    \        }\n    }\n    return max_word;\n}\nunittest\n{\n    alias candidate =\
    \ find_max;\n\n    assert(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    );\n    assert(candidate([\"name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"\
    cba\"]) == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"\
    is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\"\
    );\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\");\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5yfnbgmw.d(20): Error: no property `count` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5yfnbgmw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164137
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_unique = 0;\n    foreach(string word; words) \n\
    \    {\n        int unique = 0;\n        foreach(char c; word) \n        {\n \
    \           if(c !in max_word) \n            {\n                max_word ~= c;\n\
    \                unique++;\n            }\n        }\n        if(unique > max_unique)\
    \ \n        {\n            max_unique = unique;\n            max_word = word;\n\
    \        }\n    }\n    return max_word;\n}\nunittest\n{\n    alias candidate =\
    \ find_max;\n\n    assert(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    );\n    assert(candidate([\"name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"\
    cba\"]) == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"\
    is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\"\
    );\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\");\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsib3tnn2.d(20): Error: incompatible types for `(c) in (max_word)`:
    `char` and `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsib3tnn2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164137
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_count = 0;\n    foreach(string word; words) \n\
    \    {\n        int count = 0;\n        foreach(char c; word) \n        {\n  \
    \          if(count == 0) \n            {\n                count = 1;\n      \
    \      }\n            else if(word[0..count].count(c) == 0) \n            {\n\
    \                count++;\n            }\n        }\n        if(count > max_count)\
    \ \n        {\n            max_count = count;\n            max_word = word;\n\
    \        }\n        else if(count == max_count) \n        {\n            if(word\
    \ < max_word) \n            {\n                max_word = word;\n            }\n\
    \        }\n    }\n    return max_word;\n}\nunittest\n{\n    alias candidate =\
    \ find_max;\n\n    assert(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    );\n    assert(candidate([\"name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"\
    cba\"]) == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"\
    is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\"\
    );\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\");\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpymfr15s1.d(24): Error: no property `count` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpymfr15s1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164137
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_unique = 0;\n    foreach(word; words) \n    {\n\
    \        int unique = 0;\n        foreach(char c; word) \n        {\n        \
    \    if(c !in max_word) \n            {\n                unique++;\n         \
    \       max_word ~= c;\n            }\n        }\n        if(unique > max_unique)\
    \ \n        {\n            max_unique = unique;\n            max_word = word;\n\
    \        }\n    }\n    return max_word;\n}\nunittest\n{\n    alias candidate =\
    \ find_max;\n\n    assert(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    );\n    assert(candidate([\"name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"\
    cba\"]) == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"\
    is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\"\
    );\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\");\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8w6slr0q.d(20): Error: incompatible types for `(c) in (max_word)`:
    `char` and `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8w6slr0q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164137
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word;\n    int max_unique = 0;\n    foreach(word; words)\n    {\n      \
    \  int unique = 0;\n        foreach(c; word)\n        {\n            if(c !in\
    \ word[0..$-1])\n                unique++;\n        }\n        if(unique > max_unique)\n\
    \        {\n            max_unique = unique;\n            max_word = word;\n \
    \       }\n    }\n    return max_word;\n}\nunittest\n{\n    alias candidate =\
    \ find_max;\n\n    assert(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    );\n    assert(candidate([\"name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"\
    cba\"]) == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"\
    is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\"\
    );\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\");\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8lkwl0qd.d(20): Error: incompatible types for `(c) in (word[0..__dollar
    - 1LU])`: `immutable(char)` and `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8lkwl0qd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164137
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    int\
    \ max = 0;\n    string max_word = \"\";\n    foreach(word; words)\n    {\n   \
    \     int num_unique = 0;\n        foreach(char c; word)\n        {\n        \
    \    if(c != ' ')\n            {\n                num_unique++;\n            }\n\
    \        }\n        if(num_unique > max)\n        {\n            max = num_unique;\n\
    \            max_word = word;\n        }\n    }\n    return max_word;\n}\nunittest\n\
    {\n    alias candidate = find_max;\n\n    assert(candidate([\"name\", \"of\",\
    \ \"string\"]) == \"string\");\n    assert(candidate([\"name\", \"enam\", \"game\"\
    ]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    );\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n    assert(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\");\n    assert(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"])\
    \ == \"b\");\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\"\
    );\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpmw7g790e.d(38): unittest failure

    ----------------

    ??:? _d_unittestp [0x4290cd]

    ??:? void tmpmw7g790e.__unittest_L33_C1() [0x427d2a]

    ??:? void tmpmw7g790e.__modtest() [0x428334]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d9a7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x428e26]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42a855]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42a8e4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42a7e1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428dfd]

    ??:? runModuleUnitTests [0x42d77d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42951c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164137
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_count = 0;\n    foreach(word; words)\n    {\n\
    \        int count = 0;\n        foreach(c; word)\n        {\n            if(!max_word.canFind(c))\n\
    \            {\n                count++;\n            }\n        }\n        if(count\
    \ > max_count)\n        {\n            max_count = count;\n            max_word\
    \ = word;\n        }\n    }\n    return max_word;\n}\nunittest\n{\n    alias candidate\
    \ = find_max;\n\n    assert(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    );\n    assert(candidate([\"name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"\
    cba\"]) == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"\
    is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\"\
    );\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\");\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpd3nqt8ft.d(20): Error: no property `canFind` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd3nqt8ft.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164137
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    int\
    \ max = 0;\n    string max_word = \"\";\n    foreach(word; words)\n    {\n   \
    \     int unique_chars = 0;\n        foreach(char c; word)\n        {\n      \
    \      if(count(word, c) == 1)\n                unique_chars++;\n        }\n \
    \       if(unique_chars > max)\n        {\n            max = unique_chars;\n \
    \           max_word = word;\n        }\n    }\n    return max_word;\n}\nunittest\n\
    {\n    alias candidate = find_max;\n\n    assert(candidate([\"name\", \"of\",\
    \ \"string\"]) == \"string\");\n    assert(candidate([\"name\", \"enam\", \"game\"\
    ]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    );\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n    assert(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\");\n    assert(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"])\
    \ == \"b\");\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\"\
    );\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa1xiwgk7.d(20): Error: undefined identifier `count`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa1xiwgk7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164137
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_unique = 0;\n    foreach(word; words) \n    {\n\
    \        int unique = 0;\n        foreach(c; word) \n        {\n            if(count(word,\
    \ c) == 1) \n            {\n                unique++;\n            }\n       \
    \ }\n        if(unique > max_unique) \n        {\n            max_unique = unique;\n\
    \            max_word = word;\n        }\n        else if(unique == max_unique)\
    \ \n        {\n            if(word < max_word) \n            {\n             \
    \   max_word = word;\n            }\n        }\n    }\n    return max_word;\n\
    }\nunittest\n{\n    alias candidate = find_max;\n\n    assert(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"\
    ]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n \
    \   assert(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"a\", \"prrk\"])\
    \ == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpskdkqhwp.d(20): Error: undefined identifier `count`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpskdkqhwp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164137
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    int\
    \ max = 0;\n    string result = \"\";\n    foreach(word; words)\n    {\n     \
    \   int count = 0;\n        foreach(c; word)\n        {\n            if(count\
    \ == 0)\n            {\n                count++;\n            }\n            else\n\
    \            {\n                if(word[0..count].canFind(c))\n              \
    \  {\n                    continue;\n                }\n                else\n\
    \                {\n                    count++;\n                }\n        \
    \    }\n        }\n        if(count > max)\n        {\n            max = count;\n\
    \            result = word;\n        }\n        else if(count == max)\n      \
    \  {\n            if(word < result)\n            {\n                result = word;\n\
    \            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = find_max;\n\n    assert(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\");\n    assert(candidate([\"name\", \"enam\", \"game\"]) == \"\
    enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\");\n\
    \    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n    assert(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\");\n    assert(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"])\
    \ == \"b\");\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\"\
    );\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpaxalk0en.d(26): Error: no property `canFind` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpaxalk0en.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164137
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max = \"\";\n    int max_unique = 0;\n    foreach(word; words) \n    {\n   \
    \     int unique = 0;\n        foreach(c; word) \n        {\n            if(!max.canFind(c))\
    \ \n            {\n                unique++;\n            }\n        }\n     \
    \   if(unique > max_unique) \n        {\n            max = word;\n           \
    \ max_unique = unique;\n        }\n    }\n    return max;\n}\nunittest\n{\n  \
    \  alias candidate = find_max;\n\n    assert(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\");\n    assert(candidate([\"name\", \"enam\", \"game\"]) == \"\
    enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\");\n\
    \    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n    assert(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\");\n    assert(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"])\
    \ == \"b\");\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\"\
    );\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0q4_wfc0.d(20): Error: no property `canFind` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0q4_wfc0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164137
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word;\n    int max_count = 0;\n    foreach(word; words)\n    {\n       \
    \ int count = 0;\n        foreach(c; word)\n        {\n            if(c.countUntil(word)\
    \ == 1)\n                count++;\n        }\n        if(count > max_count)\n\
    \        {\n            max_count = count;\n            max_word = word;\n   \
    \     }\n    }\n    return max_word;\n}\nunittest\n{\n    alias candidate = find_max;\n\
    \n    assert(candidate([\"name\", \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\"\
    , \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"])\
    \ == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\"\
    , \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"\
    a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp23_prfve.d(20): Error: no property `countUntil` for type `immutable(char)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp23_prfve.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164137
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_unique = 0;\n    foreach(word; words) \n    {\n\
    \        int unique = 0;\n        foreach(c; word) \n        {\n            if\
    \ (word.count(c) == 1) \n            {\n                unique++;\n          \
    \  }\n        }\n        if (unique > max_unique) \n        {\n            max_unique\
    \ = unique;\n            max_word = word;\n        }\n        else if (unique\
    \ == max_unique) \n        {\n            max_word = min(max_word, word);\n  \
    \      }\n    }\n    return max_word;\n}\nunittest\n{\n    alias candidate = find_max;\n\
    \n    assert(candidate([\"name\", \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\"\
    , \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"])\
    \ == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\"\
    , \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"\
    a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpd_ih_x40.d(20): Error: no property `count` for type `string`

    /tmp/tmpd_ih_x40.d(32): Error: undefined identifier `min`, did you mean function
    `main`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd_ih_x40.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164137
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_count = 0;\n    foreach(word; words) \n    {\n\
    \        int count = 0;\n        foreach(c; word) \n        {\n            if(!max_word.canFind(c))\
    \ \n            {\n                count++;\n            }\n        }\n      \
    \  if(count > max_count) \n        {\n            max_count = count;\n       \
    \     max_word = word;\n        }\n    }\n    return max_word;\n}\nunittest\n\
    {\n    alias candidate = find_max;\n\n    assert(candidate([\"name\", \"of\",\
    \ \"string\"]) == \"string\");\n    assert(candidate([\"name\", \"enam\", \"game\"\
    ]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    );\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n    assert(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\");\n    assert(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"])\
    \ == \"b\");\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\"\
    );\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpumwklsks.d(20): Error: no property `canFind` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpumwklsks.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_unique = 0;\n    foreach(string word; words)\n\
    \    {\n        int unique = 0;\n        foreach(char c; word)\n        {\n  \
    \          if(c != ' ')\n            {\n                unique++;\n          \
    \  }\n        }\n        if(unique > max_unique)\n        {\n            max_unique\
    \ = unique;\n            max_word = word;\n        }\n    }\n    return max_word;\n\
    }\nunittest\n{\n    alias candidate = find_max;\n\n    assert(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"\
    ]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n \
    \   assert(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"a\", \"prrk\"])\
    \ == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpoztzz0if.d(38): unittest failure

    ----------------

    ??:? _d_unittestp [0x4290d5]

    ??:? void tmpoztzz0if.__unittest_L33_C1() [0x427d32]

    ??:? void tmpoztzz0if.__modtest() [0x42833c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d9af]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x428e2e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42a85d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42a8ec]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42a7e9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428e05]

    ??:? runModuleUnitTests [0x42d785]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429524]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164137
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_unique = 0;\n    foreach(string word; words)\n\
    \    {\n        int unique = 0;\n        foreach(char c; word)\n        {\n  \
    \          if(word.count(c) == 1)\n                unique++;\n        }\n    \
    \    if(unique > max_unique)\n        {\n            max_unique = unique;\n  \
    \          max_word = word;\n        }\n        else if(unique == max_unique)\n\
    \        {\n            if(word < max_word)\n                max_word = word;\n\
    \        }\n    }\n    return max_word;\n}\nunittest\n{\n    alias candidate =\
    \ find_max;\n\n    assert(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    );\n    assert(candidate([\"name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"\
    cba\"]) == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"\
    is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\"\
    );\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\");\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5yfnbgmw.d(20): Error: no property `count` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5yfnbgmw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164137
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    int\
    \ max_count = 0;\n    string max_word = \"\";\n    foreach(word; words)\n    {\n\
    \        int count = 0;\n        foreach(c; word)\n        {\n            if(count\
    \ == 0)\n            {\n                count = 1;\n            }\n          \
    \  else\n            {\n                if(word[0..count].canFind(c))\n      \
    \          {\n                    continue;\n                }\n             \
    \   else\n                {\n                    count++;\n                }\n\
    \            }\n        }\n        if(count > max_count)\n        {\n        \
    \    max_count = count;\n            max_word = word;\n        }\n        else\
    \ if(count == max_count)\n        {\n            if(word < max_word)\n       \
    \     {\n                max_word = word;\n            }\n        }\n    }\n \
    \   return max_word;\n}\nunittest\n{\n    alias candidate = find_max;\n\n    assert(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"name\",\
    \ \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\"\
    );\n    assert(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"a\", \"prrk\"])\
    \ == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfmncdsgw.d(26): Error: no property `canFind` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfmncdsgw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164137
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    int\
    \ max = 0;\n    string result = \"\";\n    foreach(word; words)\n    {\n     \
    \   int count = 0;\n        foreach(ch; word)\n        {\n            if(count\
    \ == max)\n            {\n                if(word < result)\n                {\n\
    \                    result = word;\n                }\n            }\n      \
    \      else if(count > max)\n            {\n                max = count;\n   \
    \             result = word;\n            }\n            count++;\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = find_max;\n\n\
    \    assert(candidate([\"name\", \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\"\
    , \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"])\
    \ == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\"\
    , \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"\
    a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpkiggq7db.d(48): unittest failure

    ----------------

    ??:? _d_unittestp [0x4291a5]

    ??:? void tmpkiggq7db.__unittest_L37_C1() [0x428211]

    ??:? void tmpkiggq7db.__modtest() [0x42840c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42dad3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x428efe]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42a981]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42aa10]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42a90d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428ed5]

    ??:? runModuleUnitTests [0x42d8a9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429648]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164137
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    int\
    \ max = 0;\n    string max_word = \"\";\n    foreach(string word; words)\n   \
    \ {\n        int count = 0;\n        foreach(char c; word)\n        {\n      \
    \      if(c != ' ')\n            {\n                count++;\n            }\n\
    \        }\n        if(count > max)\n        {\n            max = count;\n   \
    \         max_word = word;\n        }\n    }\n    return max_word;\n}\nunittest\n\
    {\n    alias candidate = find_max;\n\n    assert(candidate([\"name\", \"of\",\
    \ \"string\"]) == \"string\");\n    assert(candidate([\"name\", \"enam\", \"game\"\
    ]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    );\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n    assert(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\");\n    assert(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"])\
    \ == \"b\");\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\"\
    );\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpmknv5zsq.d(38): unittest failure

    ----------------

    ??:? _d_unittestp [0x4290cd]

    ??:? void tmpmknv5zsq.__unittest_L33_C1() [0x427d2a]

    ??:? void tmpmknv5zsq.__modtest() [0x428334]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d9a7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x428e26]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42a855]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42a8e4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42a7e1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428dfd]

    ??:? runModuleUnitTests [0x42d77d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42951c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164137
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    auto\
    \ max = 0;\n    string result = \"\";\n    foreach(word; words)\n    {\n     \
    \   auto set = new Set!char;\n        foreach(ch; word)\n        {\n         \
    \   set.insert(ch);\n        }\n        if(set.length > max)\n        {\n    \
    \        max = set.length;\n            result = word;\n        }\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = find_max;\n\n    assert(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"name\",\
    \ \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\"\
    );\n    assert(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"a\", \"prrk\"])\
    \ == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpe1ln3wa6.d(17): Error: template instance `Set!char` template `Set`
    is not defined, did you mean get(K, V)(inout(V[K]) aa, K key, lazy inout(V) defaultValue)?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe1ln3wa6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164137
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word;\n    int max_unique = 0;\n    foreach(word; words)\n    {\n      \
    \  int unique = 0;\n        foreach(ch; word)\n        {\n            if(!ch.canFind(word))\n\
    \                unique++;\n        }\n        if(unique > max_unique)\n     \
    \   {\n            max_unique = unique;\n            max_word = word;\n      \
    \  }\n    }\n    return max_word;\n}\nunittest\n{\n    alias candidate = find_max;\n\
    \n    assert(candidate([\"name\", \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\"\
    , \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"])\
    \ == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\"\
    , \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"\
    a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpw2ya4h0s.d(20): Error: no property `canFind` for type `immutable(char)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw2ya4h0s.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164137
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_unique = 0;\n    foreach(word; words)\n    {\n\
    \        int unique = 0;\n        foreach(c; word)\n        {\n            if(word.count(c)\
    \ == 1)\n                unique++;\n        }\n        if(unique > max_unique)\n\
    \        {\n            max_unique = unique;\n            max_word = word;\n \
    \       }\n        else if(unique == max_unique)\n        {\n            if(word\
    \ < max_word)\n                max_word = word;\n        }\n    }\n    return\
    \ max_word;\n}\nunittest\n{\n    alias candidate = find_max;\n\n    assert(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"name\",\
    \ \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\"\
    );\n    assert(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"a\", \"prrk\"])\
    \ == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpygktm5v5.d(20): Error: no property `count` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpygktm5v5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    int\
    \ max = 0;\n    string max_word = \"\";\n    foreach(word; words)\n    {\n   \
    \     if(word.length > max)\n        {\n            max = word.length;\n     \
    \       max_word = word;\n        }\n    }\n    return max_word;\n}\nunittest\n\
    {\n    alias candidate = find_max;\n\n    assert(candidate([\"name\", \"of\",\
    \ \"string\"]) == \"string\");\n    assert(candidate([\"name\", \"enam\", \"game\"\
    ]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    );\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n    assert(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\");\n    assert(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"])\
    \ == \"b\");\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\"\
    );\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpj05fqdum.d(19): Error: cannot implicitly convert expression `word.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj05fqdum.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164137
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    int\
    \ max = 0;\n    string result = \"\";\n    foreach(word; words)\n    {\n     \
    \   int count = 0;\n        foreach(char c; word)\n        {\n            if(c\
    \ !in result)\n            {\n                count++;\n                result\
    \ ~= c;\n            }\n        }\n        if(count > max)\n        {\n      \
    \      max = count;\n            result = word;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = find_max;\n\n    assert(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"name\",\
    \ \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\"\
    );\n    assert(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"a\", \"prrk\"])\
    \ == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_eg5x8mk.d(20): Error: incompatible types for `(c) in (result)`:
    `char` and `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_eg5x8mk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164137
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_unique = 0;\n    foreach(word; words) \n    {\n\
    \        int unique = 0;\n        foreach(c; word) \n        {\n            if(count(word,\
    \ c) == 1) \n            {\n                unique++;\n            }\n       \
    \ }\n        if(unique > max_unique) \n        {\n            max_unique = unique;\n\
    \            max_word = word;\n        }\n        else if(unique == max_unique)\
    \ \n        {\n            max_word = min(max_word, word);\n        }\n    }\n\
    \    return max_word;\n}\nunittest\n{\n    alias candidate = find_max;\n\n   \
    \ assert(candidate([\"name\", \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\"\
    , \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"])\
    \ == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\"\
    , \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"\
    a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphi1h1gde.d(20): Error: undefined identifier `count`

    /tmp/tmphi1h1gde.d(32): Error: undefined identifier `min`, did you mean function
    `main`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphi1h1gde.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164137
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    string\
    \ result = \"\";\n    int max = 0;\n    foreach(word; words) \n    {\n       \
    \ int count = 0;\n        foreach(c; word) \n        {\n            if(count ==\
    \ 0) \n            {\n                count++;\n            }\n            else\
    \ \n            {\n                if(c != word[count - 1]) \n               \
    \ {\n                    count++;\n                }\n            }\n        }\n\
    \        if(count > max) \n        {\n            max = count;\n            result\
    \ = word;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = find_max;\n\n    assert(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    );\n    assert(candidate([\"name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"\
    cba\"]) == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"\
    is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\"\
    );\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\");\n}\nvoid\
    \ main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpot6hmmtu.d(45): unittest failure

    ----------------

    ??:? _d_unittestp [0x429105]

    ??:? void tmpot6hmmtu.__unittest_L40_C1() [0x427d66]

    ??:? void tmpot6hmmtu.__modtest() [0x428370]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42da53]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x428e5e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42a901]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42a990]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42a88d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428e35]

    ??:? runModuleUnitTests [0x42d829]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4295c8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164137
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    auto\
    \ max_word = words[0];\n    auto max_unique = words[0].length;\n    foreach(word;\
    \ words)\n    {\n        auto unique = 0;\n        foreach(c; word)\n        {\n\
    \            if(word.count(c) == 1)\n            {\n                unique++;\n\
    \            }\n        }\n        if(unique > max_unique)\n        {\n      \
    \      max_unique = unique;\n            max_word = word;\n        }\n    }\n\
    \    return max_word;\n}\nunittest\n{\n    alias candidate = find_max;\n\n   \
    \ assert(candidate([\"name\", \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\"\
    , \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"])\
    \ == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\"\
    , \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"\
    a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9uxjhfaw.d(20): Error: no property `count` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9uxjhfaw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164137
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word;\n    int max_count = 0;\n    foreach(word; words) \n    {\n      \
    \  int count = 0;\n        foreach(c; word) \n        {\n            if(c !in\
    \ word[0..$-1]) \n            {\n                count++;\n            }\n   \
    \     }\n        if(count > max_count) \n        {\n            max_count = count;\n\
    \            max_word = word;\n        }\n    }\n    return max_word;\n}\nunittest\n\
    {\n    alias candidate = find_max;\n\n    assert(candidate([\"name\", \"of\",\
    \ \"string\"]) == \"string\");\n    assert(candidate([\"name\", \"enam\", \"game\"\
    ]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    );\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n    assert(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\");\n    assert(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"])\
    \ == \"b\");\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\"\
    );\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0eezfod7.d(20): Error: incompatible types for `(c) in (word[0..__dollar
    - 1LU])`: `immutable(char)` and `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0eezfod7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164137
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max = \"\";\n    int max_count = 0;\n    foreach(string word; words)\n    {\n\
    \        int count = 0;\n        foreach(char c; word)\n        {\n          \
    \  if(c !in max)\n            {\n                count++;\n                max\
    \ ~= c;\n            }\n        }\n        if(count > max_count)\n        {\n\
    \            max_count = count;\n            max = word;\n        }\n    }\n \
    \   return max;\n}\nunittest\n{\n    alias candidate = find_max;\n\n    assert(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"name\",\
    \ \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\"\
    );\n    assert(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"a\", \"prrk\"])\
    \ == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpd3qpe5mk.d(20): Error: incompatible types for `(c) in (max)`: `char`
    and `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd3qpe5mk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164137
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word;\n    int max_unique_chars = 0;\n    foreach(string word; words) \n\
    \    {\n        int unique_chars = 0;\n        foreach(char c; word) \n      \
    \  {\n            if(word.count(c) == 1) \n            {\n                unique_chars++;\n\
    \            }\n        }\n        if(unique_chars > max_unique_chars) \n    \
    \    {\n            max_unique_chars = unique_chars;\n            max_word = word;\n\
    \        }\n    }\n    return max_word;\n}\nunittest\n{\n    alias candidate =\
    \ find_max;\n\n    assert(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    );\n    assert(candidate([\"name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"\
    cba\"]) == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"\
    is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\"\
    );\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\");\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7x_4el2i.d(20): Error: no property `count` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7x_4el2i.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164137
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_unique = 0;\n    foreach(string word; words)\n\
    \    {\n        int unique = 0;\n        foreach(char c; word)\n        {\n  \
    \          if(word.count(c) == 1)\n                unique++;\n        }\n    \
    \    if(unique > max_unique)\n        {\n            max_unique = unique;\n  \
    \          max_word = word;\n        }\n        else if(unique == max_unique)\n\
    \        {\n            if(word < max_word)\n                max_word = word;\n\
    \        }\n    }\n    return max_word;\n}\nunittest\n{\n    alias candidate =\
    \ find_max;\n\n    assert(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    );\n    assert(candidate([\"name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"\
    cba\"]) == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"\
    is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\"\
    );\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\");\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5yfnbgmw.d(20): Error: no property `count` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5yfnbgmw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164137
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_unique = 0;\n    foreach(word; words)\n    {\n\
    \        int unique = 0;\n        foreach(char c; word)\n        {\n         \
    \   if(c !in max_word)\n            {\n                max_word ~= c;\n      \
    \          unique++;\n            }\n        }\n        if(unique > max_unique)\n\
    \        {\n            max_unique = unique;\n            max_word = word;\n \
    \       }\n    }\n    return max_word;\n}\nunittest\n{\n    alias candidate =\
    \ find_max;\n\n    assert(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    );\n    assert(candidate([\"name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"\
    cba\"]) == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"\
    is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\"\
    );\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\");\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjui_eyah.d(20): Error: incompatible types for `(c) in (max_word)`:
    `char` and `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjui_eyah.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164137
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max = \"\";\n    int max_count = 0;\n    foreach(string word; words)\n    {\n\
    \        int count = 0;\n        foreach(char c; word)\n        {\n          \
    \  if(c in max)\n                continue;\n            else\n               \
    \ count++;\n        }\n        if(count > max_count)\n        {\n            max\
    \ = word;\n            max_count = count;\n        }\n    }\n    return max;\n\
    }\nunittest\n{\n    alias candidate = find_max;\n\n    assert(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"\
    ]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n \
    \   assert(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"a\", \"prrk\"])\
    \ == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6ilxvtz1.d(20): Error: incompatible types for `(c) in (max)`: `char`
    and `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6ilxvtz1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164137
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    auto\
    \ max_word = \"\";\n    auto max_unique_chars = 0;\n    foreach(word; words)\n\
    \    {\n        auto unique_chars = 0;\n        foreach(ch; word)\n        {\n\
    \            if(!ch.in(max_word))\n            {\n                unique_chars++;\n\
    \            }\n        }\n        if(unique_chars > max_unique_chars)\n     \
    \   {\n            max_unique_chars = unique_chars;\n            max_word = word;\n\
    \        }\n    }\n    return max_word;\n}\nunittest\n{\n    alias candidate =\
    \ find_max;\n\n    assert(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    );\n    assert(candidate([\"name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"\
    cba\"]) == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"\
    is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\"\
    );\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\");\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppsjxibww.d(20): Error: identifier expected following `.`, not `in`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppsjxibww.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164137
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word;\n    int max_unique = 0;\n    foreach(word; words) \n    {\n     \
    \   int unique = 0;\n        foreach(ch; word) \n        {\n            if(!ch\
    \ in max_word) \n            {\n                unique++;\n                max_word\
    \ ~= ch;\n            }\n        }\n        if(unique > max_unique) \n       \
    \ {\n            max_unique = unique;\n            max_word = word;\n        }\n\
    \    }\n    return max_word;\n}\nunittest\n{\n    alias candidate = find_max;\n\
    \n    assert(candidate([\"name\", \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\"\
    , \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"])\
    \ == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\"\
    , \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"\
    a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjvcdhxvv.d(20): Error: incompatible types for `(!ch) in (max_word)`:
    `bool` and `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjvcdhxvv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    int\
    \ max_unique = 0;\n    string max_word = \"\";\n    foreach(word; words)\n   \
    \ {\n        int unique = 0;\n        foreach(c; word)\n        {\n          \
    \  if(count(word, c) == 1)\n            {\n                unique++;\n       \
    \     }\n        }\n        if(unique > max_unique)\n        {\n            max_unique\
    \ = unique;\n            max_word = word;\n        }\n        else if(unique ==\
    \ max_unique)\n        {\n            if(word < max_word)\n            {\n   \
    \             max_word = word;\n            }\n        }\n    }\n    return max_word;\n\
    }\nunittest\n{\n    alias candidate = find_max;\n\n    assert(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"\
    ]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n \
    \   assert(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"a\", \"prrk\"])\
    \ == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_8fgudcq.d(20): Error: undefined identifier `count`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_8fgudcq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164137
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    int\
    \ max_len = 0;\n    string max_word = \"\";\n    foreach(word; words)\n    {\n\
    \        int len = word.length;\n        if(len > max_len)\n        {\n      \
    \      max_len = len;\n            max_word = word;\n        }\n    }\n    return\
    \ max_word;\n}\nunittest\n{\n    alias candidate = find_max;\n\n    assert(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"name\",\
    \ \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\"\
    );\n    assert(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"a\", \"prrk\"])\
    \ == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpyeqxaar4.d(17): Error: cannot implicitly convert expression `word.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyeqxaar4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164137
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word;\n    int max_count = 0;\n    foreach(word; words)\n    {\n       \
    \ int count = 0;\n        foreach(c; word)\n        {\n            if(c !in word[0..count])\n\
    \            {\n                count++;\n            }\n        }\n        if(count\
    \ > max_count)\n        {\n            max_count = count;\n            max_word\
    \ = word;\n        }\n    }\n    return max_word;\n}\nunittest\n{\n    alias candidate\
    \ = find_max;\n\n    assert(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    );\n    assert(candidate([\"name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"\
    cba\"]) == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"\
    is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\"\
    );\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\");\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzexl4ol9.d(20): Error: incompatible types for `(c) in (word[0..cast(ulong)count])`:
    `immutable(char)` and `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzexl4ol9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164137
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word;\n    int max_unique = 0;\n    foreach(word; words)\n    {\n      \
    \  int unique = 0;\n        foreach(c; word)\n        {\n            if(c !in\
    \ word[0..c])\n                unique++;\n        }\n        if(unique > max_unique)\n\
    \        {\n            max_unique = unique;\n            max_word = word;\n \
    \       }\n        else if(unique == max_unique)\n        {\n            if(word\
    \ < max_word)\n                max_word = word;\n        }\n    }\n    return\
    \ max_word;\n}\nunittest\n{\n    alias candidate = find_max;\n\n    assert(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"name\",\
    \ \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\"\
    );\n    assert(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"a\", \"prrk\"])\
    \ == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpt23m697g.d(20): Error: incompatible types for `(c) in (word[0..cast(ulong)c])`:
    `immutable(char)` and `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt23m697g.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164137
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    string\
    \ result = \"\";\n    int max = 0;\n    foreach(string word; words)\n    {\n \
    \       int count = 0;\n        foreach(char c; word)\n        {\n           \
    \ if(!result.canFind(c))\n            {\n                count++;\n          \
    \  }\n        }\n        if(count > max)\n        {\n            max = count;\n\
    \            result = word;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = find_max;\n\n    assert(candidate([\"name\", \"of\",\
    \ \"string\"]) == \"string\");\n    assert(candidate([\"name\", \"enam\", \"game\"\
    ]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    );\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n    assert(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\");\n    assert(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"])\
    \ == \"b\");\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\"\
    );\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmph3fbv359.d(20): Error: no property `canFind` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph3fbv359.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164137
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    int\
    \ max_unique = 0;\n    string max_word = \"\";\n    foreach(word; words)\n   \
    \ {\n        int unique = 0;\n        foreach(c; word)\n        {\n          \
    \  if(!max_word.canFind(c))\n            {\n                unique++;\n      \
    \      }\n        }\n        if(unique > max_unique)\n        {\n            max_unique\
    \ = unique;\n            max_word = word;\n        }\n    }\n    return max_word;\n\
    }\nunittest\n{\n    alias candidate = find_max;\n\n    assert(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"\
    ]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n \
    \   assert(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"a\", \"prrk\"])\
    \ == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_25ul0d5.d(20): Error: no property `canFind` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_25ul0d5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164137
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    //\
    \ Write your code here\n    string max_word = \"\";\n    int max_count = 0;\n\
    \    foreach(string word; words)\n    {\n        int count = 0;\n        foreach(char\
    \ c; word)\n        {\n            if(!max_word.canFind(c))\n            {\n \
    \               count++;\n            }\n        }\n        if(count > max_count)\n\
    \        {\n            max_count = count;\n            max_word = word;\n   \
    \     }\n    }\n    return max_word;\n}\nunittest\n{\n    alias candidate = find_max;\n\
    \n    assert(candidate([\"name\", \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\"\
    , \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"])\
    \ == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\"\
    , \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"\
    a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphzyxjlu5.d(21): Error: no property `canFind` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphzyxjlu5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164137
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max = \"\";\n    int max_count = 0;\n    foreach(string word; words)\n    {\n\
    \        int count = 0;\n        foreach(char c; word)\n        {\n          \
    \  if(!max.canFind(c))\n            {\n                count++;\n            }\n\
    \        }\n        if(count > max_count)\n        {\n            max = word;\n\
    \            max_count = count;\n        }\n    }\n    return max;\n}\nunittest\n\
    {\n    alias candidate = find_max;\n\n    assert(candidate([\"name\", \"of\",\
    \ \"string\"]) == \"string\");\n    assert(candidate([\"name\", \"enam\", \"game\"\
    ]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    );\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n    assert(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\");\n    assert(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"])\
    \ == \"b\");\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\"\
    );\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpursl16fo.d(20): Error: no property `canFind` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpursl16fo.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164137
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word;\n    int max_unique = 0;\n    foreach(word; words)\n    {\n      \
    \  int unique_chars = 0;\n        foreach(char c; word)\n        {\n         \
    \   if(word.count(c) == 1)\n            {\n                unique_chars++;\n \
    \           }\n        }\n        if(unique_chars > max_unique)\n        {\n \
    \           max_unique = unique_chars;\n            max_word = word;\n       \
    \ }\n    }\n    return max_word;\n}\nunittest\n{\n    alias candidate = find_max;\n\
    \n    assert(candidate([\"name\", \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\"\
    , \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"])\
    \ == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\"\
    , \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"\
    a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgocu_cuo.d(20): Error: no property `count` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgocu_cuo.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164137
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    auto\
    \ max = words[0];\n    foreach(word; words)\n    {\n        if(word.length > max.length)\n\
    \        {\n            max = word;\n        }\n    }\n    return max;\n}\nunittest\n\
    {\n    alias candidate = find_max;\n\n    assert(candidate([\"name\", \"of\",\
    \ \"string\"]) == \"string\");\n    assert(candidate([\"name\", \"enam\", \"game\"\
    ]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    );\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n    assert(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\");\n    assert(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"])\
    \ == \"b\");\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\"\
    );\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpwju2v772.d(28): unittest failure

    ----------------

    ??:? _d_unittestp [0x429075]

    ??:? void tmpwju2v772.__unittest_L23_C1() [0x427cd6]

    ??:? void tmpwju2v772.__modtest() [0x4282e0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d9c3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x428dce]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42a871]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42a900]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42a7fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428da5]

    ??:? runModuleUnitTests [0x42d799]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429538]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164138
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max = \"\";\n    int max_count = 0;\n    foreach(word; words)\n    {\n     \
    \   int count = 0;\n        foreach(c; word)\n        {\n            if(!max.canFind(c))\n\
    \            {\n                count++;\n            }\n        }\n        if(count\
    \ > max_count)\n        {\n            max = word;\n            max_count = count;\n\
    \        }\n    }\n    return max;\n}\nunittest\n{\n    alias candidate = find_max;\n\
    \n    assert(candidate([\"name\", \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\"\
    , \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"])\
    \ == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\"\
    , \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"\
    a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp15tdzyx_.d(20): Error: no property `canFind` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp15tdzyx_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164137
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    int\
    \ max = 0;\n    string result = \"\";\n    foreach(string word; words) \n    {\n\
    \        int count = 0;\n        foreach(char c; word) \n        {\n         \
    \   if(count == 0) \n            {\n                count = 1;\n            }\n\
    \            else if(word.count(c) == 1) \n            {\n                count++;\n\
    \            }\n        }\n        if(count > max) \n        {\n            max\
    \ = count;\n            result = word;\n        }\n        else if(count == max)\
    \ \n        {\n            if(word < result) \n            {\n               \
    \ result = word;\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = find_max;\n\n    assert(candidate([\"name\", \"of\",\
    \ \"string\"]) == \"string\");\n    assert(candidate([\"name\", \"enam\", \"game\"\
    ]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    );\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n    assert(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\");\n    assert(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"])\
    \ == \"b\");\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\"\
    );\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpt4ignya3.d(24): Error: no property `count` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt4ignya3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164137
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_unique = 0;\n    foreach(word; words)\n    {\n\
    \        int unique = 0;\n        foreach(c; word)\n        {\n            if(count(word,\
    \ c) == 1)\n                unique++;\n        }\n        if(unique > max_unique)\n\
    \        {\n            max_unique = unique;\n            max_word = word;\n \
    \       }\n        else if(unique == max_unique)\n        {\n            if(word\
    \ < max_word)\n                max_word = word;\n        }\n    }\n    return\
    \ max_word;\n}\nunittest\n{\n    alias candidate = find_max;\n\n    assert(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"name\",\
    \ \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\"\
    );\n    assert(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"a\", \"prrk\"])\
    \ == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphqo5mihq.d(20): Error: undefined identifier `count`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphqo5mihq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    int\
    \ max_count = 0;\n    string max_word = \"\";\n    foreach(word; words)\n    {\n\
    \        int count = 0;\n        foreach(c; word)\n        {\n            if(c\
    \ in word[0..count])\n                continue;\n            else\n          \
    \      count++;\n        }\n        if(count > max_count)\n        {\n       \
    \     max_count = count;\n            max_word = word;\n        }\n        else\
    \ if(count == max_count)\n        {\n            if(word < max_word)\n       \
    \         max_word = word;\n        }\n    }\n    return max_word;\n}\nunittest\n\
    {\n    alias candidate = find_max;\n\n    assert(candidate([\"name\", \"of\",\
    \ \"string\"]) == \"string\");\n    assert(candidate([\"name\", \"enam\", \"game\"\
    ]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    );\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n    assert(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\");\n    assert(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"])\
    \ == \"b\");\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\"\
    );\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1hz3g22n.d(20): Error: incompatible types for `(c) in (word[0..cast(ulong)count])`:
    `immutable(char)` and `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1hz3g22n.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164137
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word;\n    int max_unique = 0;\n    foreach(word; words) \n    {\n     \
    \   int unique = 0;\n        foreach(c; word) \n        {\n            if(word.count(c)\
    \ == 1) \n            {\n                unique++;\n            }\n        }\n\
    \        if(unique > max_unique) \n        {\n            max_unique = unique;\n\
    \            max_word = word;\n        }\n        else if(unique == max_unique)\
    \ \n        {\n            if(word < max_word) \n            {\n             \
    \   max_word = word;\n            }\n        }\n    }\n    return max_word;\n\
    }\nunittest\n{\n    alias candidate = find_max;\n\n    assert(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"\
    ]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n \
    \   assert(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"a\", \"prrk\"])\
    \ == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphlfvh19d.d(20): Error: no property `count` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphlfvh19d.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164137
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    string\
    \ result;\n    int max_unique = 0;\n    foreach(word; words) \n    {\n       \
    \ int unique = 0;\n        foreach(c; word) \n        {\n            if(word.count(c)\
    \ == 1) \n            {\n                unique++;\n            }\n        }\n\
    \        if(unique > max_unique) \n        {\n            max_unique = unique;\n\
    \            result = word;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = find_max;\n\n    assert(candidate([\"name\", \"of\",\
    \ \"string\"]) == \"string\");\n    assert(candidate([\"name\", \"enam\", \"game\"\
    ]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    );\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n    assert(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\");\n    assert(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"])\
    \ == \"b\");\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\"\
    );\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmph4w5rg_v.d(20): Error: no property `count` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph4w5rg_v.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164137
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word;\n    int max_unique = 0;\n    foreach(word; words)\n    {\n      \
    \  int unique_chars = 0;\n        foreach(char c; word)\n        {\n         \
    \   if(!max_word.canFind(c))\n            {\n                unique_chars++;\n\
    \            }\n        }\n        if(unique_chars > max_unique)\n        {\n\
    \            max_unique = unique_chars;\n            max_word = word;\n      \
    \  }\n    }\n    return max_word;\n}\nunittest\n{\n    alias candidate = find_max;\n\
    \n    assert(candidate([\"name\", \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\"\
    , \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"])\
    \ == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\"\
    , \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"\
    a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkjeb_v68.d(20): Error: no property `canFind` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkjeb_v68.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164137
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    int\
    \ max_unique = 0;\n    string max_word = \"\";\n    foreach(word; words) \n  \
    \  {\n        int unique = 0;\n        foreach(c; word) \n        {\n        \
    \    if(word.count(c) == 1) \n            {\n                unique++;\n     \
    \       }\n        }\n        if(unique > max_unique) \n        {\n          \
    \  max_unique = unique;\n            max_word = word;\n        } \n        else\
    \ if(unique == max_unique) \n        {\n            if(word < max_word) \n   \
    \         {\n                max_word = word;\n            }\n        }\n    }\n\
    \    return max_word;\n}\nunittest\n{\n    alias candidate = find_max;\n\n   \
    \ assert(candidate([\"name\", \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\"\
    , \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"])\
    \ == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\"\
    , \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"\
    a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3euq1b1j.d(20): Error: no property `count` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3euq1b1j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164137
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word;\n    int max_unique = 0;\n    foreach(word; words) \n    {\n     \
    \   int unique = 0;\n        foreach(ch; word) \n        {\n            if(word.count(ch)\
    \ == 1) \n            {\n                unique++;\n            }\n        }\n\
    \        if(unique > max_unique) \n        {\n            max_unique = unique;\n\
    \            max_word = word;\n        }\n        else if(unique == max_unique)\
    \ \n        {\n            max_word = min(max_word, word);\n        }\n    }\n\
    \    return max_word;\n}\nunittest\n{\n    alias candidate = find_max;\n\n   \
    \ assert(candidate([\"name\", \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\"\
    , \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"])\
    \ == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\"\
    , \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"\
    a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0i_j9lae.d(20): Error: no property `count` for type `string`

    /tmp/tmp0i_j9lae.d(32): Error: undefined identifier `min`, did you mean function
    `main`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0i_j9lae.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164137
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    int\
    \ max_count = 0;\n    string max_word = \"\";\n    foreach(word; words)\n    {\n\
    \        int count = 0;\n        foreach(c; word)\n        {\n            if(count\
    \ == 0)\n            {\n                count = 1;\n            }\n          \
    \  else\n            {\n                if(c != word[count - 1])\n           \
    \     {\n                    count++;\n                }\n            }\n    \
    \    }\n        if(count > max_count)\n        {\n            max_count = count;\n\
    \            max_word = word;\n        }\n        else if(count == max_count)\n\
    \        {\n            if(word < max_word)\n            {\n                max_word\
    \ = word;\n            }\n        }\n    }\n    return max_word;\n}\nunittest\n\
    {\n    alias candidate = find_max;\n\n    assert(candidate([\"name\", \"of\",\
    \ \"string\"]) == \"string\");\n    assert(candidate([\"name\", \"enam\", \"game\"\
    ]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    );\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n    assert(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\");\n    assert(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"])\
    \ == \"b\");\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\"\
    );\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164138
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word;\n    int max_count = 0;\n    foreach(word; words)\n    {\n       \
    \ int count = 0;\n        foreach(c; word)\n        {\n            if(count ==\
    \ 0)\n            {\n                count = 1;\n            }\n            else\n\
    \            {\n                if(c != word[count-1])\n                {\n  \
    \                  count++;\n                }\n            }\n        }\n   \
    \     if(count > max_count)\n        {\n            max_count = count;\n     \
    \       max_word = word;\n        }\n    }\n    return max_word;\n}\nunittest\n\
    {\n    alias candidate = find_max;\n\n    assert(candidate([\"name\", \"of\",\
    \ \"string\"]) == \"string\");\n    assert(candidate([\"name\", \"enam\", \"game\"\
    ]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    );\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n    assert(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\");\n    assert(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"])\
    \ == \"b\");\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\"\
    );\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp87i8vwyf.d(45): unittest failure

    ----------------

    ??:? _d_unittestp [0x429105]

    ??:? void tmp87i8vwyf.__unittest_L40_C1() [0x427d66]

    ??:? void tmp87i8vwyf.__modtest() [0x428370]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42da53]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x428e5e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42a901]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42a990]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42a88d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428e35]

    ??:? runModuleUnitTests [0x42d829]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4295c8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164138
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word;\n    int max_count = 0;\n    foreach(word; words) \n    {\n      \
    \  int count = 0;\n        foreach(c; word) \n        {\n            if(c !in\
    \ word[0..$-1]) \n            {\n                count++;\n            }\n   \
    \     }\n        if(count > max_count) \n        {\n            max_count = count;\n\
    \            max_word = word;\n        }\n    }\n    return max_word;\n}\nunittest\n\
    {\n    alias candidate = find_max;\n\n    assert(candidate([\"name\", \"of\",\
    \ \"string\"]) == \"string\");\n    assert(candidate([\"name\", \"enam\", \"game\"\
    ]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    );\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n    assert(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\");\n    assert(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"])\
    \ == \"b\");\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\"\
    );\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0eezfod7.d(20): Error: incompatible types for `(c) in (word[0..__dollar
    - 1LU])`: `immutable(char)` and `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0eezfod7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164137
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    int\
    \ max_count = 0;\n    string max_word = \"\";\n    foreach(string word; words)\
    \ \n    {\n        int count = 0;\n        foreach(char c; word) \n        {\n\
    \            if(count == 0) \n            {\n                count = 1;\n    \
    \        }\n            else \n            {\n                if(word[0..count].count(c)\
    \ == 0) \n                {\n                    count++;\n                }\n\
    \            }\n        }\n        if(count > max_count) \n        {\n       \
    \     max_count = count;\n            max_word = word;\n        }\n        else\
    \ if(count == max_count) \n        {\n            if(word < max_word) \n     \
    \       {\n                max_word = word;\n            }\n        }\n    }\n\
    \    return max_word;\n}\nunittest\n{\n    alias candidate = find_max;\n\n   \
    \ assert(candidate([\"name\", \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\"\
    , \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"])\
    \ == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\"\
    , \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"\
    a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprsc2ndkj.d(26): Error: no property `count` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprsc2ndkj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164137
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_count = 0;\n    foreach(word; words)\n    {\n\
    \        int count = 0;\n        foreach(c; word)\n        {\n            if(count\
    \ == 0)\n            {\n                count++;\n            }\n            else\n\
    \            {\n                if(word[0..count].canFind(c))\n              \
    \  {\n                    continue;\n                }\n                else\n\
    \                {\n                    count++;\n                }\n        \
    \    }\n        }\n        if(count > max_count)\n        {\n            max_count\
    \ = count;\n            max_word = word;\n        }\n        else if(count ==\
    \ max_count)\n        {\n            if(word < max_word)\n            {\n    \
    \            max_word = word;\n            }\n        }\n    }\n    return max_word;\n\
    }\nunittest\n{\n    alias candidate = find_max;\n\n    assert(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"\
    ]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n \
    \   assert(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"a\", \"prrk\"])\
    \ == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppta2k8cl.d(26): Error: no property `canFind` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppta2k8cl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164137
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    int\
    \ max = 0;\n    string max_word = \"\";\n    foreach(string word; words)\n   \
    \ {\n        int count = 0;\n        foreach(char c; word)\n        {\n      \
    \      if(c != ' ')\n            {\n                count++;\n            }\n\
    \        }\n        if(count > max)\n        {\n            max = count;\n   \
    \         max_word = word;\n        }\n    }\n    return max_word;\n}\nunittest\n\
    {\n    alias candidate = find_max;\n\n    assert(candidate([\"name\", \"of\",\
    \ \"string\"]) == \"string\");\n    assert(candidate([\"name\", \"enam\", \"game\"\
    ]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    );\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n    assert(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\");\n    assert(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"])\
    \ == \"b\");\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\"\
    );\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpmknv5zsq.d(38): unittest failure

    ----------------

    ??:? _d_unittestp [0x4290cd]

    ??:? void tmpmknv5zsq.__unittest_L33_C1() [0x427d2a]

    ??:? void tmpmknv5zsq.__modtest() [0x428334]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d9a7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x428e26]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42a855]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42a8e4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42a7e1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428dfd]

    ??:? runModuleUnitTests [0x42d77d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42951c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164137
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_count = 0;\n    foreach(word; words)\n    {\n\
    \        int count = 0;\n        foreach(ch; word)\n        {\n            if(!max_word.canFind(ch))\n\
    \            {\n                count++;\n            }\n        }\n        if(count\
    \ > max_count)\n        {\n            max_count = count;\n            max_word\
    \ = word;\n        }\n    }\n    return max_word;\n}\nunittest\n{\n    alias candidate\
    \ = find_max;\n\n    assert(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    );\n    assert(candidate([\"name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"\
    cba\"]) == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"\
    is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\"\
    );\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\");\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpejir0bq2.d(20): Error: no property `canFind` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpejir0bq2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164137
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    if\
    \ (words.length == 0)\n        return \"\";\n    string max = words[0];\n    int\
    \ max_unique = unique_chars(max);\n    foreach (string word; words)\n    {\n \
    \       int unique = unique_chars(word);\n        if (unique > max_unique)\n \
    \       {\n            max = word;\n            max_unique = unique;\n       \
    \ }\n        else if (unique == max_unique)\n        {\n            if (word <\
    \ max)\n                max = word;\n        }\n    }\n    return max;\n}\nunittest\n\
    {\n    alias candidate = find_max;\n\n    assert(candidate([\"name\", \"of\",\
    \ \"string\"]) == \"string\");\n    assert(candidate([\"name\", \"enam\", \"game\"\
    ]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    );\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n    assert(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\");\n    assert(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"])\
    \ == \"b\");\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\"\
    );\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_xnqf277.d(16): Error: undefined identifier `unique_chars`

    /tmp/tmp_xnqf277.d(19): Error: undefined identifier `unique_chars`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_xnqf277.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164138
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_unique = 0;\n    foreach(word; words)\n    {\n\
    \        int unique = 0;\n        foreach(c; word)\n        {\n            if(word.count(c)\
    \ == 1)\n            {\n                unique++;\n            }\n        }\n\
    \        if(unique > max_unique)\n        {\n            max_unique = unique;\n\
    \            max_word = word;\n        }\n        else if(unique == max_unique)\n\
    \        {\n            if(word < max_word)\n            {\n                max_word\
    \ = word;\n            }\n        }\n    }\n    return max_word;\n}\nunittest\n\
    {\n    alias candidate = find_max;\n\n    assert(candidate([\"name\", \"of\",\
    \ \"string\"]) == \"string\");\n    assert(candidate([\"name\", \"enam\", \"game\"\
    ]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    );\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n    assert(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\");\n    assert(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"])\
    \ == \"b\");\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\"\
    );\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpd2ej3odv.d(20): Error: no property `count` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd2ej3odv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_unique = 0;\n    foreach(word; words)\n    {\n\
    \        int unique = 0;\n        foreach(c; word)\n        {\n            if(word.count(c)\
    \ == 1)\n                unique++;\n        }\n        if(unique > max_unique)\n\
    \        {\n            max_unique = unique;\n            max_word = word;\n \
    \       }\n        else if(unique == max_unique)\n        {\n            if(word\
    \ < max_word)\n                max_word = word;\n        }\n    }\n    return\
    \ max_word;\n}\nunittest\n{\n    alias candidate = find_max;\n\n    assert(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"name\",\
    \ \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\"\
    );\n    assert(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"a\", \"prrk\"])\
    \ == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpygktm5v5.d(20): Error: no property `count` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpygktm5v5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_unique = 0;\n    foreach(word; words)\n    {\n\
    \        int unique = 0;\n        foreach(ch; word)\n        {\n            if(!max_word.canFind(ch))\n\
    \            {\n                unique++;\n            }\n        }\n        if(unique\
    \ > max_unique)\n        {\n            max_unique = unique;\n            max_word\
    \ = word;\n        }\n    }\n    return max_word;\n}\nunittest\n{\n    alias candidate\
    \ = find_max;\n\n    assert(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    );\n    assert(candidate([\"name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"\
    cba\"]) == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"\
    is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\"\
    );\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\");\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpchgynvok.d(20): Error: no property `canFind` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpchgynvok.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164138
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_unique = 0;\n    foreach(word; words)\n    {\n\
    \        int unique = 0;\n        foreach(c; word)\n        {\n            if(c\
    \ !in max_word)\n            {\n                unique++;\n                max_word\
    \ ~= c;\n            }\n        }\n        if(unique > max_unique)\n        {\n\
    \            max_unique = unique;\n            max_word = word;\n        }\n \
    \   }\n    return max_word;\n}\nunittest\n{\n    alias candidate = find_max;\n\
    \n    assert(candidate([\"name\", \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\"\
    , \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"])\
    \ == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\"\
    , \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"\
    a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqsq2x4si.d(20): Error: incompatible types for `(c) in (max_word)`:
    `immutable(char)` and `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqsq2x4si.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    string\
    \ result = \"\";\n    int max_unique = 0;\n    foreach(string word; words) \n\
    \    {\n        int unique = 0;\n        foreach(char c; word) \n        {\n \
    \           if(!result.canFind(c)) \n            {\n                unique++;\n\
    \            }\n        }\n        if(unique > max_unique) \n        {\n     \
    \       max_unique = unique;\n            result = word;\n        }\n    }\n \
    \   return result;\n}\nunittest\n{\n    alias candidate = find_max;\n\n    assert(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"name\",\
    \ \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\"\
    );\n    assert(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"a\", \"prrk\"])\
    \ == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbywf72m8.d(20): Error: no property `canFind` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbywf72m8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164138
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word;\n    int max_unique = 0;\n    foreach(word; words)\n    {\n      \
    \  int unique = 0;\n        foreach(ch; word)\n        {\n            if(word.count(ch)\
    \ == 1)\n                unique++;\n        }\n        if(unique > max_unique)\n\
    \        {\n            max_unique = unique;\n            max_word = word;\n \
    \       }\n        else if(unique == max_unique)\n        {\n            if(word\
    \ < max_word)\n                max_word = word;\n        }\n    }\n    return\
    \ max_word;\n}\nunittest\n{\n    alias candidate = find_max;\n\n    assert(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"name\",\
    \ \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\"\
    );\n    assert(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"a\", \"prrk\"])\
    \ == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpoxl06wgk.d(20): Error: no property `count` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoxl06wgk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164137
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    int\
    \ max = 0;\n    string max_word = \"\";\n    foreach(string word; words)\n   \
    \ {\n        int unique_chars = 0;\n        foreach(char c; word)\n        {\n\
    \            if(word.count(c) == 1)\n            {\n                unique_chars++;\n\
    \            }\n        }\n        if(unique_chars > max)\n        {\n       \
    \     max = unique_chars;\n            max_word = word;\n        }\n    }\n  \
    \  return max_word;\n}\nunittest\n{\n    alias candidate = find_max;\n\n    assert(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"name\",\
    \ \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\"\
    );\n    assert(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"a\", \"prrk\"])\
    \ == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgsvh4rkg.d(20): Error: no property `count` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgsvh4rkg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164137
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    int\
    \ max = 0;\n    string max_word = \"\";\n    foreach(word; words)\n    {\n   \
    \     int count = 0;\n        foreach(c; word)\n        {\n            if(!max_word.canFind(c))\n\
    \            {\n                count++;\n            }\n        }\n        if(count\
    \ > max)\n        {\n            max = count;\n            max_word = word;\n\
    \        }\n    }\n    return max_word;\n}\nunittest\n{\n    alias candidate =\
    \ find_max;\n\n    assert(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    );\n    assert(candidate([\"name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"\
    cba\"]) == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"\
    is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\"\
    );\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\");\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpt1d7z7b0.d(20): Error: no property `canFind` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt1d7z7b0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164137
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_unique = 0;\n    foreach(word; words)\n    {\n\
    \        int unique = 0;\n        foreach(c; word)\n        {\n            if(word.count(c)\
    \ == 1)\n            {\n                unique++;\n            }\n        }\n\
    \        if(unique > max_unique)\n        {\n            max_unique = unique;\n\
    \            max_word = word;\n        }\n        else if(unique == max_unique)\n\
    \        {\n            if(word < max_word)\n            {\n                max_word\
    \ = word;\n            }\n        }\n    }\n    return max_word;\n}\nunittest\n\
    {\n    alias candidate = find_max;\n\n    assert(candidate([\"name\", \"of\",\
    \ \"string\"]) == \"string\");\n    assert(candidate([\"name\", \"enam\", \"game\"\
    ]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    );\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n    assert(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\");\n    assert(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"])\
    \ == \"b\");\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\"\
    );\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpd2ej3odv.d(20): Error: no property `count` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd2ej3odv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word;\n    int max_unique = 0;\n    foreach(word; words)\n    {\n      \
    \  int unique = 0;\n        foreach(c; word)\n        {\n            if(word.count(c)\
    \ == 1)\n                unique++;\n        }\n        if(unique > max_unique)\n\
    \        {\n            max_unique = unique;\n            max_word = word;\n \
    \       }\n        else if(unique == max_unique)\n        {\n            if(word\
    \ < max_word)\n                max_word = word;\n        }\n    }\n    return\
    \ max_word;\n}\nunittest\n{\n    alias candidate = find_max;\n\n    assert(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"name\",\
    \ \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\"\
    );\n    assert(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"a\", \"prrk\"])\
    \ == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0yo7l9ti.d(20): Error: no property `count` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0yo7l9ti.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164138
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_count = 0;\n    foreach(word; words) \n    {\n\
    \        int count = 0;\n        foreach(c; word) \n        {\n            if(count\
    \ == max_count) \n            {\n                if(word < max_word) \n      \
    \          {\n                    max_word = word;\n                }\n      \
    \      }\n            else if(count > max_count) \n            {\n           \
    \     max_word = word;\n                max_count = count;\n            }\n  \
    \          count++;\n        }\n    }\n    return max_word;\n}\nunittest\n{\n\
    \    alias candidate = find_max;\n\n    assert(candidate([\"name\", \"of\", \"\
    string\"]) == \"string\");\n    assert(candidate([\"name\", \"enam\", \"game\"\
    ]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    );\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n    assert(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\");\n    assert(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"])\
    \ == \"b\");\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\"\
    );\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpoix1uyg3.d(48): unittest failure

    ----------------

    ??:? _d_unittestp [0x4291b5]

    ??:? void tmpoix1uyg3.__unittest_L37_C1() [0x428221]

    ??:? void tmpoix1uyg3.__modtest() [0x42841c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42dae3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x428f0e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42a991]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42aa20]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42a91d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428ee5]

    ??:? runModuleUnitTests [0x42d8b9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429658]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164138
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    auto\
    \ max = 0;\n    auto max_word = \"\";\n    foreach(word; words)\n    {\n     \
    \   auto unique_chars = new set!char;\n        foreach(c; word)\n        {\n \
    \           unique_chars.insert(c);\n        }\n        if(unique_chars.length\
    \ > max)\n        {\n            max = unique_chars.length;\n            max_word\
    \ = word;\n        }\n        else if(unique_chars.length == max)\n        {\n\
    \            if(word < max_word)\n            {\n                max_word = word;\n\
    \            }\n        }\n    }\n    return max_word;\n}\nunittest\n{\n    alias\
    \ candidate = find_max;\n\n    assert(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\");\n    assert(candidate([\"name\", \"enam\", \"game\"]) == \"\
    enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\");\n\
    \    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n    assert(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\");\n    assert(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"])\
    \ == \"b\");\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\"\
    );\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpz5qbsoss.d(17): Error: template instance `set!char` template `set`
    is not defined, did you mean get(K, V)(inout(V[K]) aa, K key, lazy inout(V) defaultValue)?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz5qbsoss.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164138
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_unique = 0;\n    foreach(string word; words)\n\
    \    {\n        int unique = 0;\n        foreach(char c; word)\n        {\n  \
    \          if(!max_word.canFind(c))\n            {\n                unique++;\n\
    \            }\n        }\n        if(unique > max_unique)\n        {\n      \
    \      max_unique = unique;\n            max_word = word;\n        }\n    }\n\
    \    return max_word;\n}\nunittest\n{\n    alias candidate = find_max;\n\n   \
    \ assert(candidate([\"name\", \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\"\
    , \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"])\
    \ == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\"\
    , \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"\
    a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7286wr3a.d(20): Error: no property `canFind` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7286wr3a.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    int\
    \ max_unique = 0;\n    string max_word = \"\";\n    foreach(word; words)\n   \
    \ {\n        int unique = 0;\n        foreach(c; word)\n        {\n          \
    \  if(count(word, c) == 1)\n            {\n                unique++;\n       \
    \     }\n        }\n        if(unique > max_unique)\n        {\n            max_unique\
    \ = unique;\n            max_word = word;\n        }\n        else if(unique ==\
    \ max_unique)\n        {\n            if(word < max_word)\n            {\n   \
    \             max_word = word;\n            }\n        }\n    }\n    return max_word;\n\
    }\nunittest\n{\n    alias candidate = find_max;\n\n    assert(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"\
    ]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n \
    \   assert(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"a\", \"prrk\"])\
    \ == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_8fgudcq.d(20): Error: undefined identifier `count`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_8fgudcq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164137
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_unique = 0;\n    foreach(word; words)\n    {\n\
    \        int unique = 0;\n        foreach(c; word)\n        {\n            if(word.count(c)\
    \ == 1)\n            {\n                unique++;\n            }\n        }\n\
    \        if(unique > max_unique)\n        {\n            max_unique = unique;\n\
    \            max_word = word;\n        }\n        else if(unique == max_unique)\n\
    \        {\n            if(word < max_word)\n            {\n                max_word\
    \ = word;\n            }\n        }\n    }\n    return max_word;\n}\nunittest\n\
    {\n    alias candidate = find_max;\n\n    assert(candidate([\"name\", \"of\",\
    \ \"string\"]) == \"string\");\n    assert(candidate([\"name\", \"enam\", \"game\"\
    ]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    );\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n    assert(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\");\n    assert(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"])\
    \ == \"b\");\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\"\
    );\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpd2ej3odv.d(20): Error: no property `count` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd2ej3odv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word;\n    int max_unique = 0;\n    foreach(word; words) \n    {\n     \
    \   int unique = 0;\n        foreach(ch; word) \n        {\n            if(!ch\
    \ in max_word) \n            {\n                max_word ~= ch;\n            \
    \    unique++;\n            }\n        }\n        if(unique > max_unique) \n \
    \       {\n            max_unique = unique;\n            max_word = word;\n  \
    \      }\n    }\n    return max_word;\n}\nunittest\n{\n    alias candidate = find_max;\n\
    \n    assert(candidate([\"name\", \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\"\
    , \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"])\
    \ == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\"\
    , \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"\
    a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpev_on29u.d(20): Error: incompatible types for `(!ch) in (max_word)`:
    `bool` and `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpev_on29u.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164138
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    string\
    \ result = \"\";\n    int max_unique = 0;\n    foreach(word; words)\n    {\n \
    \       int unique = 0;\n        foreach(c; word)\n        {\n            if(word.count(c)\
    \ == 1)\n            {\n                unique++;\n            }\n        }\n\
    \        if(unique > max_unique)\n        {\n            max_unique = unique;\n\
    \            result = word;\n        }\n        else if(unique == max_unique)\n\
    \        {\n            if(word < result)\n            {\n                result\
    \ = word;\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = find_max;\n\n    assert(candidate([\"name\", \"of\",\
    \ \"string\"]) == \"string\");\n    assert(candidate([\"name\", \"enam\", \"game\"\
    ]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    );\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n    assert(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\");\n    assert(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"])\
    \ == \"b\");\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\"\
    );\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgaem9vbm.d(20): Error: no property `count` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgaem9vbm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164138
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_count = 0;\n    foreach(string word; words)\n\
    \    {\n        int count = 0;\n        foreach(char c; word)\n        {\n   \
    \         if(!max_word.canFind(c))\n            {\n                count++;\n\
    \            }\n        }\n        if(count > max_count)\n        {\n        \
    \    max_count = count;\n            max_word = word;\n        }\n    }\n    return\
    \ max_word;\n}\nunittest\n{\n    alias candidate = find_max;\n\n    assert(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"name\",\
    \ \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\"\
    );\n    assert(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"a\", \"prrk\"])\
    \ == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8_q60y__.d(20): Error: no property `canFind` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8_q60y__.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_unique = 0;\n    foreach(string word; words)\n\
    \    {\n        int unique = 0;\n        foreach(char c; word)\n        {\n  \
    \          if(word.count(c) == 1)\n                unique++;\n        }\n    \
    \    if(unique > max_unique)\n        {\n            max_unique = unique;\n  \
    \          max_word = word;\n        }\n        else if(unique == max_unique)\n\
    \        {\n            if(word < max_word)\n                max_word = word;\n\
    \        }\n    }\n    return max_word;\n}\nunittest\n{\n    alias candidate =\
    \ find_max;\n\n    assert(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    );\n    assert(candidate([\"name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"\
    cba\"]) == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"\
    is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\"\
    );\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\");\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5yfnbgmw.d(20): Error: no property `count` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5yfnbgmw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164137
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_unique = 0;\n    foreach(word; words)\n    {\n\
    \        int unique = 0;\n        foreach(c; word)\n        {\n            if(word.count(c)\
    \ == 1)\n                unique++;\n        }\n        if(unique > max_unique)\n\
    \        {\n            max_unique = unique;\n            max_word = word;\n \
    \       }\n        else if(unique == max_unique)\n        {\n            if(word\
    \ < max_word)\n                max_word = word;\n        }\n    }\n    return\
    \ max_word;\n}\nunittest\n{\n    alias candidate = find_max;\n\n    assert(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"name\",\
    \ \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\"\
    );\n    assert(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"a\", \"prrk\"])\
    \ == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpygktm5v5.d(20): Error: no property `count` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpygktm5v5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_unique = 0;\n    foreach(string word; words)\n\
    \    {\n        int unique = 0;\n        foreach(char c; word)\n        {\n  \
    \          if(word.count(c) == 1)\n                unique++;\n        }\n    \
    \    if(unique > max_unique)\n        {\n            max_unique = unique;\n  \
    \          max_word = word;\n        }\n        else if(unique == max_unique)\n\
    \        {\n            if(word < max_word)\n                max_word = word;\n\
    \        }\n    }\n    return max_word;\n}\nunittest\n{\n    alias candidate =\
    \ find_max;\n\n    assert(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    );\n    assert(candidate([\"name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"\
    cba\"]) == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"\
    is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\"\
    );\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\");\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5yfnbgmw.d(20): Error: no property `count` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5yfnbgmw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164137
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word;\n    int max_count = 0;\n    foreach(word; words)\n    {\n       \
    \ int count = 0;\n        foreach(c; word)\n        {\n            if(!c.canFindIn(word[0..$-1]))\n\
    \                count++;\n        }\n        if(count > max_count)\n        {\n\
    \            max_count = count;\n            max_word = word;\n        }\n   \
    \ }\n    return max_word;\n}\nunittest\n{\n    alias candidate = find_max;\n\n\
    \    assert(candidate([\"name\", \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\"\
    , \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"])\
    \ == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\"\
    , \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"\
    a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpc6iob9qp.d(20): Error: no property `canFindIn` for type `immutable(char)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc6iob9qp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164138
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    int\
    \ max = 0;\n    string max_word = \"\";\n    foreach(word; words) \n    {\n  \
    \      int count = 0;\n        foreach(c; word) \n        {\n            if(!max_word.canFind(c))\
    \ \n            {\n                count++;\n            }\n        }\n      \
    \  if(count > max) \n        {\n            max = count;\n            max_word\
    \ = word;\n        }\n    }\n    return max_word;\n}\nunittest\n{\n    alias candidate\
    \ = find_max;\n\n    assert(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    );\n    assert(candidate([\"name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"\
    cba\"]) == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"\
    is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\"\
    );\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\");\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxth9t_6_.d(20): Error: no property `canFind` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxth9t_6_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164138
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_unique = 0;\n    foreach(string word; words) \n\
    \    {\n        int unique = 0;\n        foreach(char c; word) \n        {\n \
    \           if(word.count(c) == 1) \n            {\n                unique++;\n\
    \            }\n        }\n        if(unique > max_unique) \n        {\n     \
    \       max_unique = unique;\n            max_word = word;\n        }\n      \
    \  else if(unique == max_unique) \n        {\n            max_word = min(max_word,\
    \ word);\n        }\n    }\n    return max_word;\n}\nunittest\n{\n    alias candidate\
    \ = find_max;\n\n    assert(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    );\n    assert(candidate([\"name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"\
    cba\"]) == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"\
    is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\"\
    );\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\");\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpc77q9vkf.d(20): Error: no property `count` for type `string`

    /tmp/tmpc77q9vkf.d(32): Error: undefined identifier `min`, did you mean function
    `main`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc77q9vkf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164138
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_unique = 0;\n    foreach(word; words) \n    {\n\
    \        int unique = 0;\n        foreach(c; word) \n        {\n            if(word.count(c)\
    \ == 1) \n            {\n                unique++;\n            }\n        }\n\
    \        if(unique > max_unique) \n        {\n            max_unique = unique;\n\
    \            max_word = word;\n        }\n        else if(unique == max_unique)\
    \ \n        {\n            if(word < max_word) \n            {\n             \
    \   max_word = word;\n            }\n        }\n    }\n    return max_word;\n\
    }\nunittest\n{\n    alias candidate = find_max;\n\n    assert(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"\
    ]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n \
    \   assert(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"a\", \"prrk\"])\
    \ == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9gth7dwa.d(20): Error: no property `count` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9gth7dwa.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max = words[0];\n    foreach(string word; words)\n    {\n        if(word.length\
    \ > max.length)\n        {\n            max = word;\n        }\n    }\n    return\
    \ max;\n}\nunittest\n{\n    alias candidate = find_max;\n\n    assert(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"name\",\
    \ \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\"\
    );\n    assert(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"a\", \"prrk\"])\
    \ == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpr8raubjt.d(28): unittest failure

    ----------------

    ??:? _d_unittestp [0x429075]

    ??:? void tmpr8raubjt.__unittest_L23_C1() [0x427cd6]

    ??:? void tmpr8raubjt.__modtest() [0x4282e0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d9c3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x428dce]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42a871]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42a900]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42a7fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428da5]

    ??:? runModuleUnitTests [0x42d799]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429538]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164138
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_unique = 0;\n    foreach(string word; words) \n\
    \    {\n        int unique = 0;\n        foreach(char c; word) \n        {\n \
    \           if(!max_word.canFind(c)) \n            {\n                unique++;\n\
    \            }\n        }\n        if(unique > max_unique) \n        {\n     \
    \       max_unique = unique;\n            max_word = word;\n        }\n    }\n\
    \    return max_word;\n}\nunittest\n{\n    alias candidate = find_max;\n\n   \
    \ assert(candidate([\"name\", \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\"\
    , \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"])\
    \ == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\"\
    , \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"\
    a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnr2lv63e.d(20): Error: no property `canFind` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnr2lv63e.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    int\
    \ max = 0;\n    string max_word = \"\";\n    foreach(word; words)\n    {\n   \
    \     int unique = 0;\n        foreach(char c; word)\n        {\n            if(word.count(c)\
    \ == 1)\n                unique++;\n        }\n        if(unique > max)\n    \
    \    {\n            max = unique;\n            max_word = word;\n        }\n \
    \   }\n    return max_word;\n}\nunittest\n{\n    alias candidate = find_max;\n\
    \n    assert(candidate([\"name\", \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"\
    name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\"\
    , \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"])\
    \ == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\", \"\
    footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\"\
    , \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"\
    mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"\
    a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfjotjays.d(20): Error: no property `count` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfjotjays.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164138
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max = \"\";\n    int max_unique = 0;\n    foreach(word; words)\n    {\n    \
    \    int unique = 0;\n        foreach(ch; word)\n        {\n            if(count(word,\
    \ ch) == 1)\n                unique++;\n        }\n        if(unique > max_unique)\n\
    \        {\n            max = word;\n            max_unique = unique;\n      \
    \  }\n        else if(unique == max_unique)\n        {\n            if(word <\
    \ max)\n                max = word;\n        }\n    }\n    return max;\n}\nunittest\n\
    {\n    alias candidate = find_max;\n\n    assert(candidate([\"name\", \"of\",\
    \ \"string\"]) == \"string\");\n    assert(candidate([\"name\", \"enam\", \"game\"\
    ]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    );\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n    assert(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\");\n    assert(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"])\
    \ == \"b\");\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\"\
    );\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpaah02gnd.d(20): Error: undefined identifier `count`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpaah02gnd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164138
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_unique = 0;\n    foreach(word; words)\n    {\n\
    \        int unique = 0;\n        foreach(c; word)\n        {\n            if(word.count(c)\
    \ == 1)\n            {\n                unique++;\n            }\n        }\n\
    \        if(unique > max_unique)\n        {\n            max_unique = unique;\n\
    \            max_word = word;\n        }\n        else if(unique == max_unique)\n\
    \        {\n            if(word < max_word)\n            {\n                max_word\
    \ = word;\n            }\n        }\n    }\n    return max_word;\n}\nunittest\n\
    {\n    alias candidate = find_max;\n\n    assert(candidate([\"name\", \"of\",\
    \ \"string\"]) == \"string\");\n    assert(candidate([\"name\", \"enam\", \"game\"\
    ]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    );\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n    assert(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\");\n    assert(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"])\
    \ == \"b\");\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\"\
    );\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpd2ej3odv.d(20): Error: no property `count` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd2ej3odv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_count = 0;\n    foreach(word; words) \n    {\n\
    \        int count = 0;\n        foreach(c; word) \n        {\n            if(!max_word.canFind(c))\
    \ \n            {\n                count++;\n            }\n        }\n      \
    \  if(count > max_count) \n        {\n            max_count = count;\n       \
    \     max_word = word;\n        }\n    }\n    return max_word;\n}\nunittest\n\
    {\n    alias candidate = find_max;\n\n    assert(candidate([\"name\", \"of\",\
    \ \"string\"]) == \"string\");\n    assert(candidate([\"name\", \"enam\", \"game\"\
    ]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    );\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n    assert(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\");\n    assert(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"])\
    \ == \"b\");\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\"\
    );\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpumwklsks.d(20): Error: no property `canFind` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpumwklsks.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    int\
    \ max = 0;\n    string result = \"\";\n    foreach(word; words)\n    {\n     \
    \   int count = 0;\n        foreach(c; word)\n        {\n            if(count\
    \ == 0)\n            {\n                count++;\n            }\n            else\n\
    \            {\n                if(word[0..count].canFind(c))\n              \
    \  {\n                    continue;\n                }\n                else\n\
    \                {\n                    count++;\n                }\n        \
    \    }\n        }\n        if(count > max)\n        {\n            max = count;\n\
    \            result = word;\n        }\n        else if(count == max)\n      \
    \  {\n            if(word < result)\n            {\n                result = word;\n\
    \            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = find_max;\n\n    assert(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\");\n    assert(candidate([\"name\", \"enam\", \"game\"]) == \"\
    enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\");\n\
    \    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n    assert(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\");\n    assert(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"])\
    \ == \"b\");\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\"\
    );\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpaxalk0en.d(26): Error: no property `canFind` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpaxalk0en.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164137
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    int\
    \ max = 0;\n    string result = \"\";\n    foreach(word; words)\n    {\n     \
    \   int count = 0;\n        foreach(char c; word)\n        {\n            if(c\
    \ in word[0..count])\n                continue;\n            count++;\n      \
    \  }\n        if(count > max)\n        {\n            max = count;\n         \
    \   result = word;\n        }\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = find_max;\n\n    assert(candidate([\"name\", \"of\", \"string\"\
    ]) == \"string\");\n    assert(candidate([\"name\", \"enam\", \"game\"]) == \"\
    enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\");\n\
    \    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n    assert(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\");\n    assert(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"])\
    \ == \"b\");\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\"\
    );\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprtlgivcf.d(20): Error: incompatible types for `(c) in (word[0..cast(ulong)count])`:
    `char` and `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprtlgivcf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164138
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    int\
    \ max_unique = 0;\n    string result = \"\";\n    foreach(word; words)\n    {\n\
    \        int unique = 0;\n        foreach(c; word)\n        {\n            if(count(word,\
    \ c) == 1)\n                unique++;\n        }\n        if(unique > max_unique)\n\
    \        {\n            max_unique = unique;\n            result = word;\n   \
    \     }\n        else if(unique == max_unique)\n        {\n            if(word\
    \ < result)\n                result = word;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = find_max;\n\n    assert(candidate([\"name\"\
    , \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"name\", \"enam\"\
    , \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"\
    ]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n \
    \   assert(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"]) ==\
    \ \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\", \"rock\"])\
    \ == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"a\", \"prrk\"])\
    \ == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpuet7nsi1.d(20): Error: undefined identifier `count`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuet7nsi1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164138
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_unique = 0;\n    foreach(word; words) \n    {\n\
    \        int unique = 0;\n        foreach(char c; word) \n        {\n        \
    \    if(c !in max_word) \n            {\n                max_word ~= c;\n    \
    \            unique++;\n            }\n        }\n        if(unique > max_unique)\
    \ \n        {\n            max_unique = unique;\n            max_word = word;\n\
    \        }\n    }\n    return max_word;\n}\nunittest\n{\n    alias candidate =\
    \ find_max;\n\n    assert(candidate([\"name\", \"of\", \"string\"]) == \"string\"\
    );\n    assert(candidate([\"name\", \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"\
    aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"\
    cba\"]) == \"abc\");\n    assert(candidate([\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"]) == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"\
    gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"\
    a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"this\", \"\
    is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) == \"b\"\
    );\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\");\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpx3mdaucc.d(20): Error: incompatible types for `(c) in (max_word)`:
    `char` and `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx3mdaucc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164138
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max_word = \"\";\n    int max_count = 0;\n    foreach(string word; words) \n\
    \    {\n        int count = 0;\n        foreach(char c; word) \n        {\n  \
    \          if(count == max_count) \n            {\n                if(word < max_word)\
    \ \n                {\n                    max_word = word;\n                }\n\
    \            }\n            else if(count > max_count) \n            {\n     \
    \           max_word = word;\n                max_count = count;\n           \
    \ }\n            count++;\n        }\n    }\n    return max_word;\n}\nunittest\n\
    {\n    alias candidate = find_max;\n\n    assert(candidate([\"name\", \"of\",\
    \ \"string\"]) == \"string\");\n    assert(candidate([\"name\", \"enam\", \"game\"\
    ]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\
    );\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n    assert(candidate([\"\
    play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\");\n    assert(candidate([\"\
    we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"\
    this\", \"is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"])\
    \ == \"b\");\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\"\
    );\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp8b7hwbzg.d(48): unittest failure

    ----------------

    ??:? _d_unittestp [0x4291b5]

    ??:? void tmp8b7hwbzg.__unittest_L37_C1() [0x428221]

    ??:? void tmp8b7hwbzg.__modtest() [0x42841c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42dae3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x428f0e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42a991]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42aa20]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42a91d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428ee5]

    ??:? runModuleUnitTests [0x42d8b9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429658]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164137
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings.\n    The list contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.\n\n                \n*/\nstring find_max(string[] words) \n{\n    string\
    \ max = words[0];\n    foreach(string word; words)\n    {\n        if(word.length\
    \ > max.length)\n        {\n            max = word;\n        }\n    }\n    return\
    \ max;\n}\nunittest\n{\n    alias candidate = find_max;\n\n    assert(candidate([\"\
    name\", \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"name\",\
    \ \"enam\", \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\"\
    , \"cc\"]) == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\"\
    );\n    assert(candidate([\"play\", \"this\", \"game\", \"of\", \"footbott\"])\
    \ == \"footbott\");\n    assert(candidate([\"we\", \"are\", \"gonna\", \"rock\"\
    ]) == \"gonna\");\n    assert(candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"\
    ]) == \"nation\");\n    assert(candidate([\"this\", \"is\", \"a\", \"prrk\"])\
    \ == \"this\");\n    assert(candidate([\"b\"]) == \"b\");\n    assert(candidate([\"\
    play\", \"play\", \"play\"]) == \"play\");\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpr8raubjt.d(28): unittest failure

    ----------------

    ??:? _d_unittestp [0x429075]

    ??:? void tmpr8raubjt.__unittest_L23_C1() [0x427cd6]

    ??:? void tmpr8raubjt.__modtest() [0x4282e0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d9c3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x428dce]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42a871]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42a900]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42a7fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428da5]

    ??:? runModuleUnitTests [0x42d799]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429538]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164138
