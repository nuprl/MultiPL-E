language: d
name: HumanEval_61_correct_bracketing
results:
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '(')\n            count++;\n        else if (c == ')')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '(')\n            count++;\n        else if (c == ')')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int open = 0;\n    foreach(c;brackets)\n    {\n        if(c == '(')\n\
    \            open++;\n        else if(c == ')')\n            open--;\n       \
    \ if(open < 0)\n            return false;\n    }\n    return open == 0;\n}\nunittest\n\
    {\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") ==\
    \ true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int n = brackets.length;\n    int count = 0;\n    foreach(i; 0..n)\n\
    \    {\n        if(brackets[i] == '(')\n            count++;\n        else if(brackets[i]\
    \ == ')')\n            count--;\n        if(count < 0)\n            return false;\n\
    \    }\n    return count == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") ==\
    \ true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"\
    ()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") ==\
    \ false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"\
    (\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\"\
    )\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"\
    ()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpup7hu6ok.d(11): Error: cannot implicitly convert expression `brackets.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpup7hu6ok.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163120
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '(')\n            count++;\n        else if (c == ')')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '(')\n            count++;\n        else if (c == ')')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int open = 0;\n    foreach(c; brackets)\n    {\n        if (c == '(')\n\
    \            open++;\n        else if (c == ')')\n            open--;\n      \
    \  if (open < 0)\n            return false;\n    }\n    return open == 0;\n}\n\
    unittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int open_brackets = 0;\n    foreach(char c; brackets)\n    {\n    \
    \    if (c == '(')\n            open_brackets++;\n        else if (c == ')')\n\
    \            open_brackets--;\n        if (open_brackets < 0)\n            return\
    \ false;\n    }\n    return open_brackets == 0;\n}\nunittest\n{\n    alias candidate\
    \ = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"\
    (()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"\
    ()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") ==\
    \ false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"\
    (\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\"\
    )\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"\
    ()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") ==\
    \ false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '(')\n            count++;\n        else if (c == ')')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int open_count = 0;\n    int close_count = 0;\n    foreach(char c;\
    \ brackets)\n    {\n        if(c == '(')\n            open_count++;\n        else\
    \ if(c == ')')\n            close_count++;\n    }\n    return open_count == close_count;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpu665zilr.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x427efd]

    ??:? void tmpu665zilr.__unittest_L22_C1() [0x427b77]

    ??:? void tmpu665zilr.__modtest() [0x427c80]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc23]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aab6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc49]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4300f8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fbd5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa8d]

    ??:? runModuleUnitTests [0x42b9f9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42834c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int open_brackets = 0;\n    foreach(char c; brackets)\n    {\n    \
    \    if (c == '(')\n            open_brackets++;\n        else if (c == ')')\n\
    \            open_brackets--;\n        if (open_brackets < 0)\n            return\
    \ false;\n    }\n    return open_brackets == 0;\n}\nunittest\n{\n    alias candidate\
    \ = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"\
    (()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"\
    ()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") ==\
    \ false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"\
    (\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\"\
    )\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"\
    ()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") ==\
    \ false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int n = brackets.length;\n    int i = 0;\n    int count = 0;\n    while\
    \ (i < n)\n    {\n        if (brackets[i] == '(')\n        {\n            count++;\n\
    \        }\n        else\n        {\n            count--;\n        }\n       \
    \ if (count < 0)\n        {\n            return false;\n        }\n        i++;\n\
    \    }\n    return count == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") ==\
    \ true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"\
    ()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") ==\
    \ false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"\
    (\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\"\
    )\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"\
    ()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpulnqqtj4.d(11): Error: cannot implicitly convert expression `brackets.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpulnqqtj4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163120
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '(')\n            count++;\n        else if (c == ')')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '(')\n            count++;\n        else if (c == ')')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets) {\n        if (c == '(')\n\
    \            count++;\n        else if (c == ')')\n            count--;\n    \
    \    if (count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n\tint count = 0;\n\tforeach(c;brackets)\n\t{\n\t\tif(c == '(')\n\t\t\t\
    count++;\n\t\telse if(c == ')')\n\t\t\tcount--;\n\t\tif(count < 0)\n\t\t\treturn\
    \ false;\n\t}\n\treturn count == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") ==\
    \ true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"\
    ()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") ==\
    \ false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"\
    (\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\"\
    )\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"\
    ()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") ==\
    \ false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(c; brackets)\n    {\n        if (c == '(')\n\
    \            count++;\n        else if (c == ')')\n            count--;\n    \
    \    if (count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int open_count = 0;\n    foreach(char c; brackets) {\n        if (c\
    \ == '(') {\n            open_count++;\n        } else if (c == ')') {\n     \
    \       open_count--;\n        }\n        if (open_count < 0) {\n            return\
    \ false;\n        }\n    }\n    return open_count == 0;\n}\nunittest\n{\n    alias\
    \ candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n\
    \    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\"\
    ) == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n\
    \    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\"\
    ) == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int open_count = 0;\n    foreach(char c; brackets)\n    {\n       \
    \ if (c == '(')\n            open_count++;\n        else if (c == ')')\n     \
    \       open_count--;\n        if (open_count < 0)\n            return false;\n\
    \    }\n    return open_count == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") ==\
    \ true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"\
    ()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") ==\
    \ false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"\
    (\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\"\
    )\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"\
    ()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") ==\
    \ false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int open = 0;\n    foreach(c; brackets)\n    {\n        if (c == '(')\n\
    \            open++;\n        else if (c == ')')\n            open--;\n      \
    \  if (open < 0)\n            return false;\n    }\n    return open == 0;\n}\n\
    unittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '(')\n            count++;\n        else if (c == ')')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '(')\n            count++;\n        else if (c == ')')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '(')\n            count++;\n        else if (c == ')')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '(')\n            count++;\n        else if (c == ')')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '(')\n            count++;\n        else if (c == ')')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '(')\n            count++;\n        else if (c == ')')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int open_count = 0;\n    int close_count = 0;\n    foreach(char c;\
    \ brackets)\n    {\n        if(c == '(')\n            open_count++;\n        else\
    \ if(c == ')')\n            close_count++;\n    }\n    return open_count == close_count;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpu665zilr.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x427efd]

    ??:? void tmpu665zilr.__unittest_L22_C1() [0x427b77]

    ??:? void tmpu665zilr.__modtest() [0x427c80]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc23]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aab6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc49]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4300f8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fbd5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa8d]

    ??:? runModuleUnitTests [0x42b9f9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42834c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '(')\n            count++;\n        else if (c == ')')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int open_brackets = 0;\n    foreach(char c; brackets)\n    {\n    \
    \    if (c == '(')\n            open_brackets++;\n        else if (c == ')')\n\
    \            open_brackets--;\n        if (open_brackets < 0)\n            return\
    \ false;\n    }\n    return open_brackets == 0;\n}\nunittest\n{\n    alias candidate\
    \ = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"\
    (()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"\
    ()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") ==\
    \ false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"\
    (\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\"\
    )\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"\
    ()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") ==\
    \ false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '(')\n            count++;\n        else if (c == ')')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '(')\n            count++;\n        else if (c == ')')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '(')\n            count++;\n        else if (c == ')')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '(')\n            count++;\n        else if (c == ')')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int n = brackets.length;\n    int count = 0;\n    for (int i = 0; i\
    \ < n; i++) \n    {\n        if (brackets[i] == '(')\n            count++;\n \
    \       else if (brackets[i] == ')')\n            count--;\n        if (count\
    \ < 0)\n            return false;\n    }\n    return count == 0;\n}\nunittest\n\
    {\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") ==\
    \ true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_atwbpmv.d(11): Error: cannot implicitly convert expression `brackets.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_atwbpmv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163120
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    //int n = brackets.length;\n    int n = brackets.length;\n    int count\
    \ = 0;\n    for (int i = 0; i < n; i++)\n    {\n        if (brackets[i] == '(')\n\
    \        {\n            count++;\n        }\n        else if (brackets[i] == ')')\n\
    \        {\n            count--;\n        }\n        if (count < 0)\n        {\n\
    \            return false;\n        }\n    }\n    return count == 0;\n}\nunittest\n\
    {\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") ==\
    \ true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphpgb__20.d(12): Error: cannot implicitly convert expression `brackets.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphpgb__20.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163120
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int n = brackets.length;\n    int count = 0;\n    for (int i = 0; i\
    \ < n; i++)\n    {\n        if (brackets[i] == '(')\n            count++;\n  \
    \      else if (brackets[i] == ')')\n            count--;\n        if (count <\
    \ 0)\n            return false;\n    }\n    return count == 0;\n}\nunittest\n\
    {\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") ==\
    \ true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1f1pcd5w.d(11): Error: cannot implicitly convert expression `brackets.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1f1pcd5w.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163120
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(c; brackets)\n    {\n        if (c == '(')\n\
    \            count++;\n        else if (c == ')')\n            count--;\n    \
    \    if (count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n\tint open = 0;\n\tint close = 0;\n\tforeach(char c; brackets)\n\t{\n\t\
    \tif(c == '(')\n\t\t\topen++;\n\t\telse if(c == ')')\n\t\t\tclose++;\n\t\tif(close\
    \ > open)\n\t\t\treturn false;\n\t}\n\treturn open == close;\n}\nunittest\n{\n\
    \    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") ==\
    \ true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(c; brackets)\n    {\n        if (c == '(')\n\
    \            count++;\n        else if (c == ')')\n            count--;\n    \
    \    if (count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(c; brackets)\n    {\n        if (c == '(')\n\
    \            count++;\n        else if (c == ')')\n            count--;\n    \
    \    if (count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '(')\n            count++;\n        else if (c == ')')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '(')\n            count++;\n        else if (c == ')')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '(')\n            count++;\n        else if (c == ')')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int open_count = 0;\n    foreach(char c; brackets)\n    {\n       \
    \ if (c == '(')\n            open_count++;\n        else if (c == ')')\n     \
    \       open_count--;\n        if (open_count < 0)\n            return false;\n\
    \    }\n    return open_count == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") ==\
    \ true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"\
    ()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") ==\
    \ false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"\
    (\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\"\
    )\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"\
    ()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") ==\
    \ false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(c; brackets)\n    {\n        if (c == '(')\n\
    \            count++;\n        else if (c == ')')\n            count--;\n    \
    \    if (count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(c; brackets)\n    {\n        if (c == '(')\n\
    \            count++;\n        else if (c == ')')\n            count--;\n    \
    \    if (count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '(')\n            count++;\n        else if (c == ')')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int open_count = 0;\n    foreach(char c; brackets)\n    {\n       \
    \ if (c == '(')\n            open_count++;\n        else if (c == ')')\n     \
    \       open_count--;\n        if (open_count < 0)\n            return false;\n\
    \    }\n    return open_count == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") ==\
    \ true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"\
    ()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") ==\
    \ false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"\
    (\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\"\
    )\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"\
    ()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") ==\
    \ false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(c; brackets)\n    {\n        if (c == '(')\n\
    \            count++;\n        else if (c == ')')\n            count--;\n    \
    \    if (count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '(')\n            count++;\n        else if (c == ')')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int counter = 0;\n    foreach(char c; brackets)\n    {\n        if\
    \ (c == '(')\n            counter++;\n        else if (c == ')')\n           \
    \ counter--;\n        if (counter < 0)\n            return false;\n    }\n   \
    \ return counter == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") ==\
    \ true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"\
    ()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") ==\
    \ false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"\
    (\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\"\
    )\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"\
    ()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") ==\
    \ false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '(')\n            count++;\n        else if (c == ')')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int open_brackets = 0;\n    foreach(char c; brackets)\n    {\n    \
    \    if (c == '(')\n            open_brackets++;\n        else if (c == ')')\n\
    \            open_brackets--;\n        if (open_brackets < 0)\n            return\
    \ false;\n    }\n    return open_brackets == 0;\n}\nunittest\n{\n    alias candidate\
    \ = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"\
    (()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"\
    ()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") ==\
    \ false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"\
    (\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\"\
    )\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"\
    ()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") ==\
    \ false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '(')\n            count++;\n        else if (c == ')')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '(')\n            count++;\n        else if (c == ')')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '(')\n            count++;\n        else if (c == ')')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(ch;brackets)\n    {\n        if(ch == '(')\n\
    \            count++;\n        else if(ch == ')')\n            count--;\n    \
    \    if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '(')\n            count++;\n        else if (c == ')')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int open = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '(')\n            open++;\n        else if (c == ')')\n            open--;\n\
    \        if (open < 0)\n            return false;\n    }\n    return open == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '(')\n            count++;\n        else if (c == ')')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '(')\n            count++;\n        else if (c == ')')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '(')\n            count++;\n        else if (c == ')')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '(')\n            count++;\n        else if (c == ')')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '(')\n            count++;\n        else if (c == ')')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '(')\n            count++;\n        else if (c == ')')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    //int i = 0;\n    //int j = 0;\n    //int k = 0;\n    //int l = 0;\n\
    \    //int m = 0;\n    //int n = 0;\n    //int o = 0;\n    //int p = 0;\n    //int\
    \ q = 0;\n    //int r = 0;\n    //int s = 0;\n    //int t = 0;\n    //int u =\
    \ 0;\n    //int v = 0;\n    //int w = 0;\n    //int x = 0;\n    //int y = 0;\n\
    \    //int z = 0;\n    //int a = 0;\n    //int b = 0;\n    //int c = 0;\n    //int\
    \ d = 0;\n    //int e = 0;\n    //int f = 0;\n    //int g = 0;\n    //int h =\
    \ 0;\n    //int ii = 0;\n    //int jj = 0;\n    //int kk = 0;\n    //int ll =\
    \ 0;\n    //int mm = 0;\n    //int nn = 0;\n    //int oo = 0;\n    //int pp =\
    \ 0;\n    //int qq = 0;\n    //int rr = 0;\n    //int ss = 0;\n    //int tt =\
    \ 0;\n    //int uu = 0;\n    //int vv = 0;\n    //int ww = 0;\n    //int xx =\
    \ 0;\n    //int yy = 0;\n    //int zz = 0;\n    //int aa = 0;\n    //int bb =\
    \ 0;\n    //int cc = 0;\n    //int dd = 0;\n    //int ee = 0;\n    //int ff =\
    \ 0;\n    //int gg = 0;\n    //int hh = 0;\n    //int iii = 0;\n    //int jjj\
    \ = 0;\n    //int kkk = 0;\n    //int lll = 0;\n    //int mmm = 0;\n    //int\
    \ nnn = 0;\n    //int ooo = 0;\n    //int ppp = 0;\n    //int qqq\nunittest\n\
    {\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") ==\
    \ true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfndeq0_b.d(72): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfndeq0_b.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163120
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '(')\n            count++;\n        else if (c == ')')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '(')\n            count++;\n        else if (c == ')')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int n = brackets.length;\n    int balance = 0;\n    for (int i = 0;\
    \ i < n; i++)\n    {\n        if (brackets[i] == '(')\n            balance++;\n\
    \        else if (brackets[i] == ')')\n            balance--;\n        if (balance\
    \ < 0)\n            return false;\n    }\n    return balance == 0;\n}\nunittest\n\
    {\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") ==\
    \ true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphu2_ja_h.d(11): Error: cannot implicitly convert expression `brackets.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphu2_ja_h.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163120
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '(')\n            count++;\n        else if (c == ')')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '(')\n            count++;\n        else if (c == ')')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(c; brackets) \n    {\n        if (c ==\
    \ '(') \n        {\n            count++;\n        }\n        else if (c == ')')\
    \ \n        {\n            count--;\n        }\n        if (count < 0) \n    \
    \    {\n            return false;\n        }\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int open_brackets = 0;\n    foreach(char c; brackets)\n    {\n    \
    \    if (c == '(')\n            open_brackets++;\n        else if (c == ')')\n\
    \            open_brackets--;\n        if (open_brackets < 0)\n            return\
    \ false;\n    }\n    return open_brackets == 0;\n}\nunittest\n{\n    alias candidate\
    \ = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"\
    (()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"\
    ()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") ==\
    \ false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"\
    (\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\"\
    )\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"\
    ()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") ==\
    \ false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int open = 0;\n    foreach(c; brackets) {\n        if (c == '(') {\n\
    \            open++;\n        } else if (c == ')') {\n            open--;\n  \
    \      }\n        if (open < 0) {\n            return false;\n        }\n    }\n\
    \    return open == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") ==\
    \ true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"\
    ()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") ==\
    \ false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"\
    (\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\"\
    )\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"\
    ()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") ==\
    \ false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int open_brackets = 0;\n    foreach(c; brackets)\n    {\n        if\
    \ (c == '(')\n            open_brackets++;\n        else if (c == ')')\n     \
    \       open_brackets--;\n        if (open_brackets < 0)\n            return false;\n\
    \    }\n    return open_brackets == 0;\n}\nunittest\n{\n    alias candidate =\
    \ correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"\
    (()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"\
    ()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") ==\
    \ false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"\
    (\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\"\
    )\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"\
    ()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") ==\
    \ false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int open = 0;\n    foreach(c; brackets) {\n        if (c == '(') open++;\n\
    \        else if (c == ')') open--;\n        if (open < 0) return false;\n   \
    \ }\n    return open == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") ==\
    \ true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"\
    ()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") ==\
    \ false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"\
    (\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\"\
    )\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"\
    ()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") ==\
    \ false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int n = brackets.length;\n    int count = 0;\n    for (int i = 0; i\
    \ < n; i++)\n    {\n        if (brackets[i] == '(')\n            count++;\n  \
    \      else if (brackets[i] == ')')\n            count--;\n        if (count <\
    \ 0)\n            return false;\n    }\n    return count == 0;\n}\nunittest\n\
    {\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") ==\
    \ true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1f1pcd5w.d(11): Error: cannot implicitly convert expression `brackets.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1f1pcd5w.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163120
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int open = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '(')\n            open++;\n        else if (c == ')')\n            open--;\n\
    \        if (open < 0)\n            return false;\n    }\n    return open == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int open_brackets = 0;\n    foreach(char c; brackets)\n    {\n    \
    \    if (c == '(')\n            open_brackets++;\n        else\n            open_brackets--;\n\
    \        if (open_brackets < 0)\n            return false;\n    }\n    return\
    \ open_brackets == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") ==\
    \ true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"\
    ()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") ==\
    \ false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"\
    (\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\"\
    )\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"\
    ()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") ==\
    \ false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int open_count = 0;\n    foreach(char c; brackets)\n    {\n       \
    \ if (c == '(')\n            open_count++;\n        else if (c == ')')\n     \
    \       open_count--;\n        if (open_count < 0)\n            return false;\n\
    \    }\n    return open_count == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") ==\
    \ true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"\
    ()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") ==\
    \ false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"\
    (\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\"\
    )\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"\
    ()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") ==\
    \ false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '(')\n            count++;\n        else if (c == ')')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int open_count = 0;\n    foreach(char c; brackets)\n    {\n       \
    \ if (c == '(')\n            open_count++;\n        else if (c == ')')\n     \
    \       open_count--;\n        if (open_count < 0)\n            return false;\n\
    \    }\n    return open_count == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") ==\
    \ true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"\
    ()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") ==\
    \ false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"\
    (\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\"\
    )\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"\
    ()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") ==\
    \ false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int open_brackets = 0;\n    foreach(bracket; brackets)\n    {\n   \
    \     if(bracket == '(')\n            open_brackets++;\n        else if(bracket\
    \ == ')')\n            open_brackets--;\n        if(open_brackets < 0)\n     \
    \       return false;\n    }\n    return open_brackets == 0;\n}\nunittest\n{\n\
    \    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") ==\
    \ true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '(')\n            count++;\n        else if (c == ')')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '(')\n            count++;\n        else if (c == ')')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '(')\n            count++;\n        else if (c == ')')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '(')\n            count++;\n        else if (c == ')')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int open_brackets = 0;\n    foreach(c; brackets)\n    {\n        if\
    \ (c == '(')\n            open_brackets++;\n        else if (c == ')')\n     \
    \       open_brackets--;\n        if (open_brackets < 0)\n            return false;\n\
    \    }\n    return open_brackets == 0;\n}\nunittest\n{\n    alias candidate =\
    \ correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"\
    (()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"\
    ()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") ==\
    \ false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"\
    (\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\"\
    )\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"\
    ()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") ==\
    \ false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets) {\n        if (c == '(')\
    \ {\n            count++;\n        } else if (c == ')') {\n            count--;\n\
    \        }\n        if (count < 0) {\n            return false;\n        }\n \
    \   }\n    return count == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") ==\
    \ true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"\
    ()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") ==\
    \ false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"\
    (\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\"\
    )\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"\
    ()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") ==\
    \ false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int open_brackets = 0;\n    foreach(char c; brackets)\n    {\n    \
    \    if (c == '(')\n            open_brackets++;\n        else if (c == ')')\n\
    \            open_brackets--;\n        if (open_brackets < 0)\n            return\
    \ false;\n    }\n    return open_brackets == 0;\n}\nunittest\n{\n    alias candidate\
    \ = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"\
    (()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"\
    ()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") ==\
    \ false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"\
    (\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\"\
    )\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"\
    ()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") ==\
    \ false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(c;brackets)\n    {\n        if(c == '(')\n\
    \            count++;\n        else if(c == ')')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(c;brackets)\n    {\n        if(c == '(')\n\
    \            count++;\n        else if(c == ')')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int open = 0;\n    foreach(c; brackets)\n    {\n        if (c == '(')\n\
    \            open++;\n        else if (c == ')')\n            open--;\n      \
    \  if (open < 0)\n            return false;\n    }\n    return open == 0;\n}\n\
    unittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(c;brackets)\n    {\n        if(c == '(')\n\
    \            count++;\n        else if(c == ')')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int n = brackets.length;\n    int count = 0;\n    for (int i = 0; i\
    \ < n; i++)\n    {\n        if (brackets[i] == '(')\n            count++;\n  \
    \      else if (brackets[i] == ')')\n            count--;\n        if (count <\
    \ 0)\n            return false;\n    }\n    return count == 0;\n}\nunittest\n\
    {\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") ==\
    \ true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1f1pcd5w.d(11): Error: cannot implicitly convert expression `brackets.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1f1pcd5w.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163120
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int open_brackets = 0;\n    foreach(char c; brackets)\n    {\n    \
    \    if (c == '(')\n            open_brackets++;\n        else if (c == ')')\n\
    \            open_brackets--;\n        if (open_brackets < 0)\n            return\
    \ false;\n    }\n    return open_brackets == 0;\n}\nunittest\n{\n    alias candidate\
    \ = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"\
    (()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"\
    ()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") ==\
    \ false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"\
    (\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\"\
    )\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"\
    ()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") ==\
    \ false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(c; brackets) \n    {\n        if (c ==\
    \ '(') \n        {\n            count++;\n        } \n        else if (c == ')')\
    \ \n        {\n            count--;\n        }\n        if (count < 0) \n    \
    \    {\n            return false;\n        }\n    }\n    return count == 0;\n\
    }\n/*\n    return True if every opening bracket has a corresponding closing bracket.\n\
    */\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(c; brackets)\n    {\n        if (c == '(')\n\
    \            count++;\n        else if (c == ')')\n            count--;\n    \
    \    if (count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int open_brackets = 0;\n    foreach(char c; brackets)\n    {\n    \
    \    if (c == '(')\n            open_brackets++;\n        else if (c == ')')\n\
    \            open_brackets--;\n        if (open_brackets < 0)\n            return\
    \ false;\n    }\n    return open_brackets == 0;\n}\nunittest\n{\n    alias candidate\
    \ = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"\
    (()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"\
    ()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") ==\
    \ false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"\
    (\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\"\
    )\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"\
    ()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") ==\
    \ false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '(')\n            count++;\n        else if (c == ')')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '(')\n            count++;\n        else if (c == ')')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '(')\n            count++;\n        else if (c == ')')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '(')\n            count++;\n        else if (c == ')')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '(')\n            count++;\n        else if (c == ')')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int n = brackets.length;\n    int i = 0;\n    int count = 0;\n    while\
    \ (i < n)\n    {\n        if (brackets[i] == '(')\n        {\n            count++;\n\
    \        }\n        else if (brackets[i] == ')')\n        {\n            count--;\n\
    \        }\n        if (count < 0)\n        {\n            return false;\n   \
    \     }\n        i++;\n    }\n    return count == 0;\n}\nunittest\n{\n    alias\
    \ candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n\
    \    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\"\
    ) == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n\
    \    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\"\
    ) == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqfoxbi96.d(11): Error: cannot implicitly convert expression `brackets.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqfoxbi96.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(ch; brackets)\n    {\n        if(ch ==\
    \ '(')\n            count++;\n        else if(ch == ')')\n            count--;\n\
    \        if(count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '(')\n            count++;\n        else if (c == ')')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int open_brackets = 0;\n    foreach(bracket; brackets)\n    {\n   \
    \     if(bracket == '(')\n            open_brackets++;\n        else if(bracket\
    \ == ')')\n            open_brackets--;\n        if(open_brackets < 0)\n     \
    \       return false;\n    }\n    return open_brackets == 0;\n}\nunittest\n{\n\
    \    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") ==\
    \ true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '(')\n            count++;\n        else if (c == ')')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '(')\n            count++;\n        else if (c == ')')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int counter = 0;\n    foreach(char c; brackets)\n    {\n        if\
    \ (c == '(')\n            counter++;\n        else if (c == ')')\n           \
    \ counter--;\n        if (counter < 0)\n            return false;\n    }\n   \
    \ return counter == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") ==\
    \ true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"\
    ()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") ==\
    \ false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"\
    (\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\"\
    )\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"\
    ()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") ==\
    \ false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '(')\n            count++;\n        else if (c == ')')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int open = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '(')\n            open++;\n        else if (c == ')')\n            open--;\n\
    \        if (open < 0)\n            return false;\n    }\n    return open == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int counter = 0;\n    foreach(char c; brackets)\n    {\n        if\
    \ (c == '(')\n            counter++;\n        else if (c == ')')\n           \
    \ counter--;\n        if (counter < 0)\n            return false;\n    }\n   \
    \ return counter == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") ==\
    \ true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"\
    ()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") ==\
    \ false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"\
    (\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\"\
    )\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"\
    ()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") ==\
    \ false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int open_count = 0;\n    int close_count = 0;\n    foreach(char c;\
    \ brackets)\n    {\n        if(c == '(')\n            open_count++;\n        else\
    \ if(c == ')')\n            close_count++;\n    }\n    return open_count == close_count;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpu665zilr.d(31): unittest failure

    ----------------

    ??:? _d_unittestp [0x427efd]

    ??:? void tmpu665zilr.__unittest_L22_C1() [0x427b77]

    ??:? void tmpu665zilr.__modtest() [0x427c80]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc23]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aab6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc49]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4300f8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fbd5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa8d]

    ??:? runModuleUnitTests [0x42b9f9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42834c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '(')\n            count++;\n        else if (c == ')')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int open_brackets = 0;\n    foreach(char c; brackets)\n    {\n    \
    \    if (c == '(')\n            open_brackets++;\n        else if (c == ')')\n\
    \            open_brackets--;\n        if (open_brackets < 0)\n            return\
    \ false;\n    }\n    return open_brackets == 0;\n}\nunittest\n{\n    alias candidate\
    \ = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"\
    (()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"\
    ()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") ==\
    \ false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"\
    (\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\"\
    )\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"\
    ()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") ==\
    \ false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets) {\n        if (c == '(')\
    \ {\n            count++;\n        } else if (c == ')') {\n            count--;\n\
    \        }\n        if (count < 0) {\n            return false;\n        }\n \
    \   }\n    return count == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") ==\
    \ true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"\
    ()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") ==\
    \ false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"\
    (\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\"\
    )\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"\
    ()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") ==\
    \ false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '(')\n            count++;\n        else if (c == ')')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int n = brackets.length;\n    int count = 0;\n    for (int i = 0; i\
    \ < n; i++) \n    {\n        if (brackets[i] == '(') \n        {\n           \
    \ count += 1;\n        } \n        else \n        {\n            count -= 1;\n\
    \        }\n        if (count < 0) \n        {\n            return false;\n  \
    \      }\n    }\n    return count == 0;\n}\nunittest\n{\n    alias candidate =\
    \ correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"\
    (()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"\
    ()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") ==\
    \ false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"\
    (\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\"\
    )\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"\
    ()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") ==\
    \ false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp819gm87n.d(11): Error: cannot implicitly convert expression `brackets.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp819gm87n.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '(')\n            count++;\n        else if (c == ')')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    auto stack = new Stack!(char)();\n    foreach (bracket; brackets) {\n\
    \        if (bracket == '(') {\n            stack.push(bracket);\n        } else\
    \ {\n            if (stack.empty) {\n                return false;\n         \
    \   }\n            stack.pop();\n        }\n    }\n    return stack.empty;\n}\n\
    unittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp272nhdwq.d(11): Error: template instance `Stack!char` template
    `Stack` is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp272nhdwq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(c;brackets)\n    {\n        if(c == '(')\n\
    \            count++;\n        else if(c == ')')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int n = 0;\n    foreach(c;brackets)\n    {\n        if(c == '(')\n\
    \            n++;\n        else if(c == ')')\n            n--;\n        if(n <\
    \ 0)\n            return false;\n    }\n    return n == 0;\n}\nunittest\n{\n \
    \   alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n\
    \    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\"\
    ) == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n\
    \    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\"\
    ) == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '(')\n            count++;\n        else if (c == ')')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '(')\n            count++;\n        else if (c == ')')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(c; brackets)\n    {\n        if (c == '(')\n\
    \            count++;\n        else if (c == ')')\n            count--;\n    \
    \    if (count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '(')\n            count++;\n        else if (c == ')')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(c; brackets)\n    {\n        if (c == '(')\n\
    \            count++;\n        else if (c == ')')\n            count--;\n    \
    \    if (count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int open = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '(')\n            open++;\n        else if (c == ')')\n            open--;\n\
    \        if (open < 0)\n            return false;\n    }\n    return open == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int open_count = 0;\n    foreach(c; brackets)\n    {\n        if (c\
    \ == '(')\n            open_count++;\n        else if (c == ')')\n           \
    \ open_count--;\n        if (open_count < 0)\n            return false;\n    }\n\
    \    return open_count == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") ==\
    \ true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"\
    ()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") ==\
    \ false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"\
    (\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\"\
    )\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"\
    ()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") ==\
    \ false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '(')\n            count++;\n        else if (c == ')')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int open = 0;\n    foreach(c; brackets)\n    {\n        if (c == '(')\n\
    \            open++;\n        else if (c == ')')\n            open--;\n      \
    \  if (open < 0)\n            return false;\n    }\n    return open == 0;\n}\n\
    unittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int open_count = 0;\n    foreach(char c; brackets)\n    {\n       \
    \ if (c == '(')\n            open_count++;\n        else if (c == ')')\n     \
    \       open_count--;\n        if (open_count < 0)\n            return false;\n\
    \    }\n    return open_count == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") ==\
    \ true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"\
    ()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") ==\
    \ false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"\
    (\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\"\
    )\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"\
    ()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") ==\
    \ false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '(')\n            count++;\n        else if (c == ')')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(c;brackets)\n    {\n        if(c == '(')\n\
    \            count++;\n        else if(c == ')')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int n = brackets.length;\n    int count = 0;\n    for (int i = 0; i\
    \ < n; i++)\n    {\n        if (brackets[i] == '(')\n            count++;\n  \
    \      else if (brackets[i] == ')')\n            count--;\n        if (count <\
    \ 0)\n            return false;\n    }\n    return count == 0;\n}\nunittest\n\
    {\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") ==\
    \ true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1f1pcd5w.d(11): Error: cannot implicitly convert expression `brackets.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1f1pcd5w.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163120
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    //return brackets.count('(') == brackets.count(')');\n    int count\
    \ = 0;\n    foreach(c; brackets)\n    {\n        if(c == '(')\n            count++;\n\
    \        else if(c == ')')\n            count--;\n        if(count < 0)\n    \
    \        return false;\n    }\n    return count == 0;\n}\nunittest\n{\n    alias\
    \ candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n\
    \    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\"\
    ) == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n\
    \    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\"\
    ) == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '(')\n            count++;\n        else if (c == ')')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int n = brackets.length;\n    int count = 0;\n    for (int i = 0; i\
    \ < n; i++)\n    {\n        if (brackets[i] == '(')\n            count++;\n  \
    \      else if (brackets[i] == ')')\n            count--;\n        if (count <\
    \ 0)\n            return false;\n    }\n    return count == 0;\n}\nunittest\n\
    {\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") ==\
    \ true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1f1pcd5w.d(11): Error: cannot implicitly convert expression `brackets.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1f1pcd5w.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163120
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    //int open_brackets = 0;\n    int close_brackets = 0;\n    foreach(char\
    \ c; brackets)\n    {\n        if(c == '(')\n        {\n            //open_brackets++;\n\
    \        }\n        else if(c == ')')\n        {\n            close_brackets++;\n\
    \        }\n        else\n        {\n            return false;\n        }\n  \
    \  }\n    //return open_brackets == close_brackets;\n    return close_brackets\
    \ == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpe26miqat.d(35): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f05]

    ??:? void tmpe26miqat.__unittest_L31_C1() [0x427ab2]

    ??:? void tmpe26miqat.__modtest() [0x427c88]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc2b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aabe]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc51]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430100]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fbdd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa95]

    ??:? runModuleUnitTests [0x42ba01]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428354]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '(')\n            count++;\n        else if (c == ')')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int n = brackets.length;\n    int count = 0;\n    for (int i = 0; i\
    \ < n; i++) \n    {\n        if (brackets[i] == '(') \n        {\n           \
    \ count++;\n        } \n        else if (brackets[i] == ')') \n        {\n   \
    \         count--;\n        }\n        if (count < 0) \n        {\n          \
    \  return false;\n        }\n    }\n    return count == 0;\n}\nunittest\n{\n \
    \   alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n\
    \    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"()()(()())()\"\
    ) == true);\n    assert(candidate(\"()()((()()())())(()()(()))\") == true);\n\
    \    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\")(()\"\
    ) == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqv_84v4a.d(11): Error: cannot implicitly convert expression `brackets.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqv_84v4a.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int open_brackets = 0;\n    foreach(c; brackets)\n    {\n        if\
    \ (c == '(')\n            open_brackets++;\n        else if (c == ')')\n     \
    \       open_brackets--;\n        if (open_brackets < 0)\n            return false;\n\
    \    }\n    return open_brackets == 0;\n}\nunittest\n{\n    alias candidate =\
    \ correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"\
    (()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"\
    ()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") ==\
    \ false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"\
    (\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\"\
    )\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"\
    ()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") ==\
    \ false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int open_brackets = 0;\n    foreach(char c; brackets)\n    {\n    \
    \    if (c == '(')\n            open_brackets++;\n        else if (c == ')')\n\
    \            open_brackets--;\n        if (open_brackets < 0)\n            return\
    \ false;\n    }\n    return open_brackets == 0;\n}\nunittest\n{\n    alias candidate\
    \ = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"\
    (()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"\
    ()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") ==\
    \ false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"\
    (\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\"\
    )\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"\
    ()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") ==\
    \ false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int open_brackets = 0;\n    foreach(c; brackets)\n    {\n        if\
    \ (c == '(')\n            open_brackets++;\n        else if (c == ')')\n     \
    \       open_brackets--;\n        if (open_brackets < 0)\n            return false;\n\
    \    }\n    return open_brackets == 0;\n}\nunittest\n{\n    alias candidate =\
    \ correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"\
    (()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"\
    ()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") ==\
    \ false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"\
    (\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\"\
    )\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"\
    ()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") ==\
    \ false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    // your code here\n    int open = 0;\n    foreach(c;brackets)\n   \
    \ {\n        if(c == '(')\n            open++;\n        else if(c == ')')\n  \
    \          open--;\n        if(open < 0)\n            return false;\n    }\n \
    \   return open == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") ==\
    \ true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"\
    ()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") ==\
    \ false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"\
    (\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\"\
    )\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"\
    ()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") ==\
    \ false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '(')\n            count++;\n        else if (c == ')')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '(')\n            count++;\n        else if (c == ')')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int open_brackets = 0;\n    foreach(ch;brackets)\n    {\n        if(ch\
    \ == '(')\n            open_brackets++;\n        else if(ch == ')')\n        \
    \    open_brackets--;\n        if(open_brackets < 0)\n            return false;\n\
    \    }\n    return open_brackets == 0;\n}\nunittest\n{\n    alias candidate =\
    \ correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"\
    (()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"\
    ()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") ==\
    \ false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"\
    (\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\"\
    )\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"\
    ()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") ==\
    \ false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(c; brackets)\n    {\n        if (c == '(')\n\
    \            count++;\n        else if (c == ')')\n            count--;\n    \
    \    if (count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int open_count = 0;\n    foreach(char c; brackets)\n    {\n       \
    \ if (c == '(')\n            open_count++;\n        else if (c == ')')\n     \
    \       open_count--;\n        if (open_count < 0)\n            return false;\n\
    \    }\n    return open_count == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") ==\
    \ true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"\
    ()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") ==\
    \ false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"\
    (\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\"\
    )\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"\
    ()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") ==\
    \ false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '(')\n            count++;\n        else if (c == ')')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '(')\n            count++;\n        else if (c == ')')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int open = 0;\n    foreach(c; brackets)\n    {\n        if (c == '(')\n\
    \            open++;\n        else if (c == ')')\n            open--;\n      \
    \  if (open < 0)\n            return false;\n    }\n    return open == 0;\n}\n\
    unittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int open = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '(')\n            open++;\n        else if (c == ')')\n            open--;\n\
    \        if (open < 0)\n            return false;\n    }\n    return open == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(c; brackets)\n    {\n        if (c == '(')\n\
    \            count++;\n        else if (c == ')')\n            count--;\n    \
    \    if (count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '(')\n            count++;\n        else if (c == ')')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int open = 0;\n    foreach(c; brackets)\n    {\n        if (c == '(')\n\
    \            open++;\n        else if (c == ')')\n            open--;\n      \
    \  if (open < 0)\n            return false;\n    }\n    return open == 0;\n}\n\
    unittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int open_count = 0;\n    foreach(char c; brackets)\n    {\n       \
    \ if (c == '(')\n            open_count++;\n        else if (c == ')')\n     \
    \       open_count--;\n        if (open_count < 0)\n            return false;\n\
    \    }\n    return open_count == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") ==\
    \ true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"\
    ()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") ==\
    \ false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"\
    (\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\"\
    )\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"\
    ()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") ==\
    \ false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets) {\n        if (c == '(')\
    \ {\n            count++;\n        } else if (c == ')') {\n            count--;\n\
    \        }\n        if (count < 0) {\n            return false;\n        }\n \
    \   }\n    return count == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") ==\
    \ true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"\
    ()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") ==\
    \ false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"\
    (\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\"\
    )\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"\
    ()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") ==\
    \ false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '(')\n            count++;\n        else if (c == ')')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '(')\n            count++;\n        else if (c == ')')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '(')\n            count++;\n        else if (c == ')')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int open_count = 0;\n    foreach(char c; brackets)\n    {\n       \
    \ if (c == '(')\n            open_count++;\n        else if (c == ')')\n     \
    \       open_count--;\n        if (open_count < 0)\n            return false;\n\
    \    }\n    return open_count == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") ==\
    \ true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"\
    ()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") ==\
    \ false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"\
    (\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\"\
    )\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"\
    ()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") ==\
    \ false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets) {\n        if (c == '(')\
    \ {\n            count++;\n        } else if (c == ')') {\n            count--;\n\
    \        }\n        if (count < 0) {\n            return false;\n        }\n \
    \   }\n    return count == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") ==\
    \ true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"\
    ()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") ==\
    \ false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"\
    (\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\"\
    )\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"\
    ()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") ==\
    \ false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(c; brackets)\n    {\n        if (c == '(')\n\
    \            count++;\n        else if (c == ')')\n            count--;\n    \
    \    if (count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(c; brackets)\n    {\n        if (c == '(')\n\
    \            count++;\n        else if (c == ')')\n            count--;\n    \
    \    if (count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int open = 0;\n    foreach(c; brackets) {\n        if (c == '(') {\n\
    \            open++;\n        } else if (c == ')') {\n            open--;\n  \
    \      }\n        if (open < 0) {\n            return false;\n        }\n    }\n\
    \    return open == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") ==\
    \ true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"\
    ()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") ==\
    \ false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"\
    (\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\"\
    )\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"\
    ()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") ==\
    \ false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '(')\n            count++;\n        else if (c == ')')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '(')\n            count++;\n        else if (c == ')')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '(')\n            count++;\n        else if (c == ')')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '(')\n            count++;\n        else if (c == ')')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '(')\n            count++;\n        else if (c == ')')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(c; brackets)\n    {\n        if (c == '(')\n\
    \            count++;\n        else if (c == ')')\n            count--;\n    \
    \    if (count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '(')\n            count++;\n        else if (c == ')')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int open = 0;\n    foreach(bracket; brackets)\n    {\n        if(bracket\
    \ == '(')\n            open++;\n        else\n            open--;\n        if(open\
    \ < 0)\n            return false;\n    }\n    return open == 0;\n}\nunittest\n\
    {\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") ==\
    \ true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(c; brackets)\n    {\n        if (c == '(')\n\
    \            count++;\n        else if (c == ')')\n            count--;\n    \
    \    if (count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '(')\n            count++;\n        else if (c == ')')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '(')\n            count++;\n        else if (c == ')')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    auto stack = new Stack!(char)();\n    foreach (ch; brackets)\n    {\n\
    \        if (ch == '(')\n            stack.push(ch);\n        else if (ch == ')')\n\
    \        {\n            if (stack.empty)\n                return false;\n    \
    \        stack.pop();\n        }\n    }\n    return stack.empty;\n}\nunittest\n\
    {\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") ==\
    \ true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp69wohpzu.d(11): Error: template instance `Stack!char` template
    `Stack` is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp69wohpzu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '(')\n            count++;\n        else if (c == ')')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    // Your code here\n    int count = 0;\n    foreach(char c; brackets)\n\
    \    {\n        if(c == '(')\n            count++;\n        else if(c == ')')\n\
    \            count--;\n        if(count < 0)\n            return false;\n    }\n\
    \    return count == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") ==\
    \ true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"\
    ()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") ==\
    \ false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"\
    (\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\"\
    )\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"\
    ()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") ==\
    \ false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '(')\n            count++;\n        else if (c == ')')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int counter = 0;\n    foreach(char c; brackets)\n    {\n        if\
    \ (c == '(')\n            counter++;\n        else if (c == ')')\n           \
    \ counter--;\n        if (counter < 0)\n            return false;\n    }\n   \
    \ return counter == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") ==\
    \ true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"\
    ()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") ==\
    \ false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"\
    (\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\"\
    )\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"\
    ()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") ==\
    \ false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int open_brackets = 0;\n    foreach(char c; brackets) {\n        if\
    \ (c == '(') {\n            open_brackets++;\n        }\n        else if (c ==\
    \ ')') {\n            open_brackets--;\n        }\n        if (open_brackets <\
    \ 0) {\n            return false;\n        }\n    }\n    return open_brackets\
    \ == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int open_brackets = 0;\n    foreach(c; brackets)\n    {\n        if\
    \ (c == '(')\n            open_brackets++;\n        else if (c == ')')\n     \
    \       open_brackets--;\n        if (open_brackets < 0)\n            return false;\n\
    \    }\n    return open_brackets == 0;\n}\nunittest\n{\n    alias candidate =\
    \ correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"\
    (()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"\
    ()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") ==\
    \ false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"\
    (\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\"\
    )\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"\
    ()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") ==\
    \ false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '(')\n            count++;\n        else if (c == ')')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int n = brackets.length;\n    int count = 0;\n    for (int i = 0; i\
    \ < n; i++) \n    {\n        if (brackets[i] == '(') \n        {\n           \
    \ count += 1;\n        }\n        else if (brackets[i] == ')') \n        {\n \
    \           count -= 1;\n        }\n        if (count < 0) \n        {\n     \
    \       return false;\n        }\n    }\n    return count == 0;\n}\nunittest\n\
    {\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"()\") ==\
    \ true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpobci8i8n.d(11): Error: cannot implicitly convert expression `brackets.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpobci8i8n.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '(')\n            count++;\n        else if (c == ')')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(c;brackets)\n    {\n        if(c == '(')\n\
    \            count++;\n        else if(c == ')')\n            count--;\n     \
    \   if(count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int open_brackets = 0;\n    foreach(char c; brackets)\n    {\n    \
    \    if (c == '(')\n            open_brackets++;\n        else if (c == ')')\n\
    \            open_brackets--;\n        if (open_brackets < 0)\n            return\
    \ false;\n    }\n    return open_brackets == 0;\n}\nunittest\n{\n    alias candidate\
    \ = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"\
    (()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"\
    ()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") ==\
    \ false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"\
    (\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\"\
    )\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"\
    ()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") ==\
    \ false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '(')\n            count++;\n        else if (c == ')')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '(')\n            count++;\n        else if (c == ')')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '(')\n            count++;\n        else if (c == ')')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int open_count = 0;\n    int close_count = 0;\n    foreach(c;brackets)\n\
    \    {\n        if(c == '(')\n            open_count++;\n        else if(c ==\
    \ ')')\n            close_count++;\n        else\n            return false;\n\
    \    }\n    return open_count == close_count;\n}\nunittest\n{\n    alias candidate\
    \ = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"\
    (()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"\
    ()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") ==\
    \ false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"\
    (\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\"\
    )\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"\
    ()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") ==\
    \ false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmphf49089v.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x427f0d]

    ??:? void tmphf49089v.__unittest_L24_C1() [0x427b83]

    ??:? void tmphf49089v.__modtest() [0x427c8c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc33]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aac6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc59]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430108]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fbe5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa9d]

    ??:? runModuleUnitTests [0x42ba09]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42835c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(c; brackets)\n    {\n        if (c == '(')\n\
    \            count++;\n        else if (c == ')')\n            count--;\n    \
    \    if (count < 0)\n            return false;\n    }\n    return count == 0;\n\
    }\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets) {\n        if (c == '(')\
    \ {\n            count++;\n        } else if (c == ')') {\n            count--;\n\
    \        }\n        if (count < 0) {\n            return false;\n        }\n \
    \   }\n    return count == 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\
    \n    assert(candidate(\"()\") == true);\n    assert(candidate(\"(()())\") ==\
    \ true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"\
    ()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") ==\
    \ false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"\
    (\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\"\
    )\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"\
    ()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") ==\
    \ false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets)\n    {\n        if (c\
    \ == '(')\n            count++;\n        else if (c == ')')\n            count--;\n\
    \        if (count < 0)\n            return false;\n    }\n    return count ==\
    \ 0;\n}\nunittest\n{\n    alias candidate = correct_bracketing;\n\n    assert(candidate(\"\
    ()\") == true);\n    assert(candidate(\"(()())\") == true);\n    assert(candidate(\"\
    ()()(()())()\") == true);\n    assert(candidate(\"()()((()()())())(()()(()))\"\
    ) == true);\n    assert(candidate(\"((()())))\") == false);\n    assert(candidate(\"\
    )(()\") == false);\n    assert(candidate(\"(\") == false);\n    assert(candidate(\"\
    ((((\") == false);\n    assert(candidate(\")\") == false);\n    assert(candidate(\"\
    (()\") == false);\n    assert(candidate(\"()()(()())())(()\") == false);\n   \
    \ assert(candidate(\"()()(()())()))()\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n brackets is a string of \"\
    (\" and \")\".\n    return True if every opening bracket has a corresponding closing\
    \ bracket.\n\n                    \n*/\nbool correct_bracketing(string brackets)\
    \ \n{\n    int count = 0;\n    foreach(char c; brackets) {\n        if (c == '(')\
    \ {\n            count++;\n        }\n        else if (c == ')') {\n         \
    \   count--;\n        }\n        if (count < 0) {\n            return false;\n\
    \        }\n    }\n    return count == 0;\n}\nunittest\n{\n    alias candidate\
    \ = correct_bracketing;\n\n    assert(candidate(\"()\") == true);\n    assert(candidate(\"\
    (()())\") == true);\n    assert(candidate(\"()()(()())()\") == true);\n    assert(candidate(\"\
    ()()((()()())())(()()(()))\") == true);\n    assert(candidate(\"((()())))\") ==\
    \ false);\n    assert(candidate(\")(()\") == false);\n    assert(candidate(\"\
    (\") == false);\n    assert(candidate(\"((((\") == false);\n    assert(candidate(\"\
    )\") == false);\n    assert(candidate(\"(()\") == false);\n    assert(candidate(\"\
    ()()(()())())(()\") == false);\n    assert(candidate(\"()()(()())()))()\") ==\
    \ false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163121
