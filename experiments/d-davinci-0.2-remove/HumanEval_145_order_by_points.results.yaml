language: d
name: HumanEval_145_order_by_points
results:
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    long[] result\
    \ = new long[nums.length];\n    long[] sums = new long[nums.length];\n    long[]\
    \ indices = new long[nums.length];\n    for (int i = 0; i < nums.length; i++)\n\
    \    {\n        indices[i] = i;\n        long sum = 0;\n        while (nums[i]\
    \ > 0)\n        {\n            sum += nums[i] % 10;\n            nums[i] /= 10;\n\
    \        }\n        sums[i] = sum;\n    }\n    sort(sums, indices);\n    for (int\
    \ i = 0; i < nums.length; i++)\n    {\n        result[i] = nums[(int)indices[i]];\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = order_by_points;\n\
    \n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0i11exk3.d(32): Error: C style cast illegal, use `cast(int)indices[i]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0i11exk3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163133
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    long[] result\
    \ = new long[nums.length];\n    int[] sums = new int[nums.length];\n    for (int\
    \ i = 0; i < nums.length; i++)\n    {\n        int sum = 0;\n        for (int\
    \ j = 0; j < nums[i].to!string.length; j++)\n        {\n            sum += nums[i].to!string[j]\
    \ - '0';\n        }\n        sums[i] = sum;\n    }\n    int[] sorted = sums.dup;\n\
    \    sorted.sort;\n    for (int i = 0; i < nums.length; i++)\n    {\n        for\
    \ (int j = 0; j < nums.length; j++)\n        {\n            if (sums[j] == sorted[i])\n\
    \            {\n                result[i] = nums[j];\n                sums[j]\
    \ = -1;\n                break;\n            }\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = order_by_points;\n\n    assert(candidate([1L,\
    \ 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L,\
    \ 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) ==\
    \ [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpv2jqes8u.d(20): Error: no property `to` for type `long`

    /tmp/tmpv2jqes8u.d(22): Error: no property `to` for type `long`

    /tmp/tmpv2jqes8u.d(27): Error: no property `sort` for type `int[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv2jqes8u.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163133
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    auto sums = nums.map!(a\
    \ => a.to!string().sum!(a => a.to!int() - '0'.to!int()));\n    auto result = new\
    \ long[](nums.length);\n    foreach(i, ref n; nums)\n    {\n        auto min =\
    \ sums.min;\n        auto index = sums.indexOf(min);\n        result[i] = nums[index];\n\
    \        sums[index] = sums.max;\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L,\
    \ -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L,\
    \ 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L,\
    \ 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp15e9utcw.d(15): Error: no property `map` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp15e9utcw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163133
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    long[] result\
    \ = new long[nums.length];\n    long[] sum = new long[nums.length];\n    long[]\
    \ index = new long[nums.length];\n    for (int i = 0; i < nums.length; i++)\n\
    \    {\n        sum[i] = 0;\n        index[i] = i;\n        while (nums[i] > 0)\n\
    \        {\n            sum[i] += nums[i] % 10;\n            nums[i] /= 10;\n\
    \        }\n    }\n    for (int i = 0; i < nums.length; i++)\n    {\n        for\
    \ (int j = i + 1; j < nums.length; j++)\n        {\n            if (sum[i] > sum[j])\n\
    \            {\n                long temp = sum[i];\n                sum[i] =\
    \ sum[j];\n                sum[j] = temp;\n                temp = nums[i];\n \
    \               nums[i] = nums[j];\n                nums[j] = temp;\n        \
    \        temp = index[i];\n                index[i] = index[j];\n            \
    \    index[j] = temp;\n            }\n            else if (sum[i] == sum[j])\n\
    \            {\n                if (index[i] > index[j])\n                {\n\
    \                    long temp = sum[i];\n                    sum[i] = sum[j];\n\
    \                    sum[j] = temp;\n                    temp = nums[i];\n   \
    \                 nums[i] = nums[j];\n                    nums[j] = temp;\n  \
    \                  temp = index[i];\n                    index[i] = index[j];\n\
    \                    index[j] = temp;\n                }\n            }\n    \
    \    }\n    }\n    for (int i = 0; i < nums.length; i++)\n    {\n        result[i]\
    \ = nums[i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate =\
    \ order_by_points;\n\n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L,\
    \ -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L,\
    \ 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L,\
    \ 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -11L, -32L, 43L, 54L, -98L, 2L, -3L]) ==\
    \ [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L,\
    \ 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L,\
    \ -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp636tsx61.d(71): unittest failure

    ----------------

    ??:? _d_unittestp [0x428e0d]

    ??:? void tmp636tsx61.__unittest_L67_C1() [0x428605]

    ??:? void tmp636tsx61.__modtest() [0x428b90]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ceeb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42bd7e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x431009]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4314b8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430f95]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bd55]

    ??:? runModuleUnitTests [0x42ccc1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4292d0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163134
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    auto result =\
    \ nums.dup;\n    result.sort!((a, b) => sumDigits(a) < sumDigits(b));\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = order_by_points;\n\n    assert(candidate([1L,\
    \ 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L,\
    \ 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) ==\
    \ [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphqag3_0s.d(16): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphqag3_0s.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163133
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    long[] result\
    \ = new long[nums.length];\n    long[] sum = new long[nums.length];\n    for (int\
    \ i = 0; i < nums.length; i++)\n    {\n        long temp = nums[i];\n        while\
    \ (temp > 0)\n        {\n            sum[i] += temp % 10;\n            temp /=\
    \ 10;\n        }\n    }\n    long[] temp = sum.dup;\n    temp.sort;\n    for (int\
    \ i = 0; i < nums.length; i++)\n    {\n        for (int j = 0; j < nums.length;\
    \ j++)\n        {\n            if (temp[i] == sum[j])\n            {\n       \
    \         result[i] = nums[j];\n                sum[j] = -1;\n               \
    \ break;\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L,\
    \ -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L,\
    \ 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L,\
    \ 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpth811jgj.d(27): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpth811jgj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163133
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    long[] result\
    \ = new long[nums.length];\n    long[] sum = new long[nums.length];\n    long[]\
    \ index = new long[nums.length];\n    for (int i = 0; i < nums.length; i++)\n\
    \    {\n        index[i] = i;\n        sum[i] = sumDigits(nums[i]);\n    }\n \
    \   sort(sum, index);\n    for (int i = 0; i < nums.length; i++)\n    {\n    \
    \    result[i] = nums[index[i]];\n    }\n    return result;\n}\nlong sumDigits(long\
    \ n)\n{\n    long sum = 0;\n    while (n > 0)\n    {\n        sum += n % 10;\n\
    \        n /= 10;\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = order_by_points;\n\n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L,\
    \ -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L,\
    \ 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L,\
    \ 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -11L, -32L, 43L, 54L, -98L, 2L, -3L]) ==\
    \ [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L,\
    \ 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L,\
    \ -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkq8y0fg9.d(23): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkq8y0fg9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163133
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    long[] result\
    \ = new long[nums.length];\n    long[] sum = new long[nums.length];\n    foreach(i,\
    \ v; nums)\n    {\n        sum[i] = 0;\n        while(v != 0)\n        {\n   \
    \         sum[i] += v % 10;\n            v /= 10;\n        }\n    }\n    foreach(i,\
    \ v; nums)\n    {\n        long min = sum[i];\n        long min_index = i;\n \
    \       foreach(j, u; sum[i..$])\n        {\n            if(u < min)\n       \
    \     {\n                min = u;\n                min_index = j;\n          \
    \  }\n        }\n        result[i] = nums[min_index];\n        sum[min_index]\
    \ = max(sum);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = order_by_points;\n\n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L,\
    \ -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L,\
    \ 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L,\
    \ 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -11L, -32L, 43L, 54L, -98L, 2L, -3L]) ==\
    \ [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L,\
    \ 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L,\
    \ -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjxnq8xzb.d(39): Error: undefined identifier `max`, did you mean
    function `fmax`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjxnq8xzb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163133
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    auto nums_with_points\
    \ = nums.map!(n => tuple(n, n.to!string.map!(c => c.to!long - '0'.to!long).sum));\n\
    \    nums_with_points.sort!((a, b) => a[1] < b[1] || (a[1] == b[1] && a[0] < b[0]));\n\
    \    return nums_with_points.map!(t => t[0]).array;\n}\nunittest\n{\n    alias\
    \ candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L, -11L, -12L])\
    \ == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L, 463L, 145L,\
    \ 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L,\
    \ 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -11L, -32L, 43L, 54L, -98L, 2L, -3L]) ==\
    \ [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L,\
    \ 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L,\
    \ -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpopol4z2i.d(15): Error: no property `map` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpopol4z2i.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163133
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    long[] result\
    \ = new long[nums.length];\n    long[] sums = new long[nums.length];\n    for\
    \ (int i = 0; i < nums.length; i++)\n    {\n        long sum = 0;\n        long\
    \ num = nums[i];\n        while (num > 0)\n        {\n            sum += num %\
    \ 10;\n            num /= 10;\n        }\n        sums[i] = sum;\n    }\n    auto\
    \ sorted = sort(zip(sums, nums));\n    foreach (i, item; sorted)\n    {\n    \
    \    result[i] = item[1];\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L, -11L, -12L])\
    \ == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L, 463L, 145L,\
    \ 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L,\
    \ 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -11L, -32L, 43L, 54L, -98L, 2L, -3L]) ==\
    \ [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L,\
    \ 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L,\
    \ -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmph6uqy7fm.d(28): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph6uqy7fm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163133
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    long[] result\
    \ = new long[nums.length];\n    long[] sums = new long[nums.length];\n    long[]\
    \ indices = new long[nums.length];\n    foreach(i, n; nums)\n    {\n        indices[i]\
    \ = i;\n        long sum = 0;\n        while(n > 0)\n        {\n            sum\
    \ += n % 10;\n            n /= 10;\n        }\n        sums[i] = sum;\n    }\n\
    \    sort(sums, indices);\n    foreach(i, n; indices)\n    {\n        result[i]\
    \ = nums[n];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate =\
    \ order_by_points;\n\n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L,\
    \ -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L,\
    \ 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L,\
    \ 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -11L, -32L, 43L, 54L, -98L, 2L, -3L]) ==\
    \ [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L,\
    \ 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L,\
    \ -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpacmkd1ph.d(29): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpacmkd1ph.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163133
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    long[] result\
    \ = new long[nums.length];\n    long[] sum = new long[nums.length];\n    long[]\
    \ index = new long[nums.length];\n    for (int i = 0; i < nums.length; i++)\n\
    \    {\n        index[i] = i;\n        sum[i] = 0;\n        long temp = nums[i];\n\
    \        while (temp > 0)\n        {\n            sum[i] += temp % 10;\n     \
    \       temp /= 10;\n        }\n    }\n    sort(sum, index);\n    for (int i =\
    \ 0; i < nums.length; i++)\n    {\n        result[i] = nums[index[i]];\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = order_by_points;\n\n\
    \    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpaul1o_5q.d(29): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpaul1o_5q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163133
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    long[] result\
    \ = new long[nums.length];\n    long[] sums = new long[nums.length];\n    for\
    \ (int i = 0; i < nums.length; i++)\n    {\n        sums[i] = sum_digits(nums[i]);\n\
    \    }\n    auto tup = tuple(nums, sums);\n    tup = tup.sort!((a, b) => a[1]\
    \ < b[1]);\n    for (int i = 0; i < nums.length; i++)\n    {\n        result[i]\
    \ = tup[i][0];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = order_by_points;\n\n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L,\
    \ -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L,\
    \ 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L,\
    \ 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -11L, -32L, 43L, 54L, -98L, 2L, -3L]) ==\
    \ [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L,\
    \ 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L,\
    \ -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpi7p7ugll.d(19): Error: undefined identifier `sum_digits`

    /tmp/tmpi7p7ugll.d(22): Error: no property `sort` for type `Tuple!(long[], long[])`

    /tmp/tmpi7p7ugll.d(25): Error: variable `i` cannot be read at compile time

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi7p7ugll.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163133
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    long[] result\
    \ = new long[nums.length];\n    long[] sums = new long[nums.length];\n    for\
    \ (int i = 0; i < nums.length; i++)\n    {\n        sums[i] = nums[i];\n     \
    \   while (sums[i] > 9)\n        {\n            sums[i] = sums[i] % 10 + sums[i]\
    \ / 10;\n        }\n    }\n    long[] sorted = sums.dup;\n    sort(sorted);\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        for (int j = 0; j <\
    \ nums.length; j++)\n        {\n            if (sorted[i] == sums[j])\n      \
    \      {\n                result[i] = nums[j];\n                sums[j] = -1;\n\
    \                break;\n            }\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = order_by_points;\n\n    assert(candidate([1L,\
    \ 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L,\
    \ 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) ==\
    \ [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3fiyrz0p.d(26): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3fiyrz0p.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163133
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    long[] result\
    \ = new long[nums.length];\n    long[] sum = new long[nums.length];\n    long[]\
    \ index = new long[nums.length];\n    for (int i = 0; i < nums.length; i++)\n\
    \    {\n        index[i] = i;\n        sum[i] = 0;\n        long temp = nums[i];\n\
    \        while (temp > 0)\n        {\n            sum[i] += temp % 10;\n     \
    \       temp /= 10;\n        }\n    }\n    for (int i = 0; i < nums.length; i++)\n\
    \    {\n        for (int j = i + 1; j < nums.length; j++)\n        {\n       \
    \     if (sum[i] > sum[j])\n            {\n                long temp = sum[i];\n\
    \                sum[i] = sum[j];\n                sum[j] = temp;\n          \
    \      temp = nums[i];\n                nums[i] = nums[j];\n                nums[j]\
    \ = temp;\n                temp = index[i];\n                index[i] = index[j];\n\
    \                index[j] = temp;\n            }\n            else if (sum[i]\
    \ == sum[j])\n            {\n                if (index[i] > index[j])\n      \
    \          {\n                    long temp = sum[i];\n                    sum[i]\
    \ = sum[j];\n                    sum[j] = temp;\n                    temp = nums[i];\n\
    \                    nums[i] = nums[j];\n                    nums[j] = temp;\n\
    \                    temp = index[i];\n                    index[i] = index[j];\n\
    \                    index[j] = temp;\n                }\n            }\n    \
    \    }\n    }\n    for (int i = 0; i < nums.length; i++)\n    {\n        result[i]\
    \ = nums[i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate =\
    \ order_by_points;\n\n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L,\
    \ -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L,\
    \ 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L,\
    \ 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -11L, -32L, 43L, 54L, -98L, 2L, -3L]) ==\
    \ [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L,\
    \ 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L,\
    \ -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpd5dv0vay.d(72): unittest failure

    ----------------

    ??:? _d_unittestp [0x428dad]

    ??:? void tmpd5dv0vay.__unittest_L68_C1() [0x4285a1]

    ??:? void tmpd5dv0vay.__modtest() [0x428b2c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ce8b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42bd1e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430fa9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x431458]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430f35]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bcf5]

    ??:? runModuleUnitTests [0x42cc61]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429270]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163134
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    auto nums_with_points\
    \ = zip(nums, map!(sum_digits)(nums));\n    sort!((a, b) => a[1] < b[1] || (a[1]\
    \ == b[1] && a[0] < b[0]))(nums_with_points);\n    return map!(a => a[0])(nums_with_points);\n\
    }\nunittest\n{\n    alias candidate = order_by_points;\n\n    assert(candidate([1L,\
    \ 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L,\
    \ 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) ==\
    \ [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6lsfsq6u.d(15): Error: undefined identifier `zip`

    /tmp/tmp6lsfsq6u.d(16): Error: template instance `sort!((a, b) => a[1] < b[1]
    || a[1] == b[1] && (a[0] < b[0]))` template `sort` is not defined, did you mean
    sqrt?

    /tmp/tmp6lsfsq6u.d(17): Error: template instance `map!((a) => a[0])` template
    `map` is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6lsfsq6u.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163133
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    long[] result\
    \ = new long[nums.length];\n    long[] sum = new long[nums.length];\n    long[]\
    \ index = new long[nums.length];\n    for (int i = 0; i < nums.length; i++)\n\
    \    {\n        index[i] = i;\n        sum[i] = 0;\n        long temp = nums[i];\n\
    \        while (temp > 0)\n        {\n            sum[i] += temp % 10;\n     \
    \       temp /= 10;\n        }\n    }\n    for (int i = 0; i < nums.length; i++)\n\
    \    {\n        for (int j = i + 1; j < nums.length; j++)\n        {\n       \
    \     if (sum[i] > sum[j])\n            {\n                long temp = sum[i];\n\
    \                sum[i] = sum[j];\n                sum[j] = temp;\n          \
    \      temp = nums[i];\n                nums[i] = nums[j];\n                nums[j]\
    \ = temp;\n                temp = index[i];\n                index[i] = index[j];\n\
    \                index[j] = temp;\n            }\n            else if (sum[i]\
    \ == sum[j])\n            {\n                if (index[i] > index[j])\n      \
    \          {\n                    long temp = sum[i];\n                    sum[i]\
    \ = sum[j];\n                    sum[j] = temp;\n                    temp = nums[i];\n\
    \                    nums[i] = nums[j];\n                    nums[j] = temp;\n\
    \                    temp = index[i];\n                    index[i] = index[j];\n\
    \                    index[j] = temp;\n                }\n            }\n    \
    \    }\n    }\n    for (int i = 0; i < nums.length; i++)\n    {\n        result[i]\
    \ = nums[i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate =\
    \ order_by_points;\n\n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L,\
    \ -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L,\
    \ 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L,\
    \ 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -11L, -32L, 43L, 54L, -98L, 2L, -3L]) ==\
    \ [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L,\
    \ 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L,\
    \ -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpd5dv0vay.d(72): unittest failure

    ----------------

    ??:? _d_unittestp [0x428dad]

    ??:? void tmpd5dv0vay.__unittest_L68_C1() [0x4285a1]

    ??:? void tmpd5dv0vay.__modtest() [0x428b2c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ce8b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42bd1e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430fa9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x431458]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430f35]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bcf5]

    ??:? runModuleUnitTests [0x42cc61]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429270]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163134
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    long[] points\
    \ = new long[nums.length];\n    for (int i = 0; i < nums.length; i++)\n    {\n\
    \        points[i] = nums[i];\n        while (points[i] > 0)\n        {\n    \
    \        points[i] = points[i] % 10 + points[i] / 10;\n        }\n    }\n    return\
    \ nums.sort!((a, b) => points[a] < points[b] || (points[a] == points[b] && a <\
    \ b));\n}\nunittest\n{\n    alias candidate = order_by_points;\n\n    assert(candidate([1L,\
    \ 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L,\
    \ 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) ==\
    \ [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpi1md89q7.d(24): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi1md89q7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163133
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    long[] result\
    \ = new long[nums.length];\n    long[] sum = new long[nums.length];\n    for (int\
    \ i = 0; i < nums.length; i++)\n    {\n        long temp = nums[i];\n        while\
    \ (temp > 0)\n        {\n            sum[i] += temp % 10;\n            temp /=\
    \ 10;\n        }\n    }\n    long[] sorted = sum.dup;\n    sorted.sort();\n  \
    \  for (int i = 0; i < nums.length; i++)\n    {\n        for (int j = 0; j < nums.length;\
    \ j++)\n        {\n            if (sorted[i] == sum[j])\n            {\n     \
    \           result[i] = nums[j];\n                sum[j] = -1;\n             \
    \   break;\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L,\
    \ -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L,\
    \ 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L,\
    \ 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpyy9ptxl9.d(27): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyy9ptxl9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163133
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    auto sumDigits\
    \ = (long n) => n.to!string.map!(a => a.to!long).sum;\n    return nums.sort!((a,\
    \ b) => sumDigits(a) > sumDigits(b) || (sumDigits(a) == sumDigits(b) && a > b));\n\
    }\nunittest\n{\n    alias candidate = order_by_points;\n\n    assert(candidate([1L,\
    \ 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L,\
    \ 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) ==\
    \ [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvnyqqni8.d(15): Error: no property `to` for type `long`

    /tmp/tmpvnyqqni8.d(16): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvnyqqni8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163133
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    auto result =\
    \ nums.dup;\n    auto sums = nums.map!(a => a.to!string.sum!(a => a.to!int - '0'));\n\
    \    auto indices = iota(nums.length);\n    sort(result, indices, (a, b) => sums[a]\
    \ < sums[b] || (sums[a] == sums[b] && a < b));\n    return result;\n}\nunittest\n\
    {\n    alias candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L,\
    \ -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L,\
    \ 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L,\
    \ 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiconavxh.d(16): Error: no property `map` for type `long[]`

    /tmp/tmpiconavxh.d(17): Error: undefined identifier `iota`

    /tmp/tmpiconavxh.d(18): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiconavxh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163133
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    return nums.sort!((a,\
    \ b) => sumDigits(a) < sumDigits(b));\n}\nunittest\n{\n    alias candidate = order_by_points;\n\
    \n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp97b7ngqn.d(15): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp97b7ngqn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163133
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    long[] result\
    \ = new long[nums.length];\n    long[] sums = new long[nums.length];\n    long[]\
    \ indexes = new long[nums.length];\n    for (int i = 0; i < nums.length; i++)\n\
    \    {\n        sums[i] = sum_of_digits(nums[i]);\n        indexes[i] = i;\n \
    \   }\n    sort(sums, indexes);\n    for (int i = 0; i < nums.length; i++)\n \
    \   {\n        result[i] = nums[indexes[i]];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L,\
    \ -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L,\
    \ 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L,\
    \ 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp365hr5m7.d(20): Error: undefined identifier `sum_of_digits`

    /tmp/tmp365hr5m7.d(23): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp365hr5m7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163133
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    auto result =\
    \ nums.dup;\n    result.sort!((a, b) => sumDigits(a) < sumDigits(b));\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = order_by_points;\n\n    assert(candidate([1L,\
    \ 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L,\
    \ 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) ==\
    \ [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphqag3_0s.d(16): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphqag3_0s.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163133
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    auto result =\
    \ nums.dup;\n    result.sort!((a, b) => sumDigits(a) < sumDigits(b) || (sumDigits(a)\
    \ == sumDigits(b) && a < b));\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = order_by_points;\n\n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L,\
    \ -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L,\
    \ 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L,\
    \ 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -11L, -32L, 43L, 54L, -98L, 2L, -3L]) ==\
    \ [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L,\
    \ 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L,\
    \ -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfj6jvx9s.d(16): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfj6jvx9s.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163133
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    return nums.sort!((a,\
    \ b) => sumDigits(a) < sumDigits(b) || (sumDigits(a) == sumDigits(b) && a < b));\n\
    }\nunittest\n{\n    alias candidate = order_by_points;\n\n    assert(candidate([1L,\
    \ 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L,\
    \ 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) ==\
    \ [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfuems9_0.d(15): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfuems9_0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163133
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    long[] result\
    \ = new long[nums.length];\n    int[] sum = new int[nums.length];\n    for (int\
    \ i = 0; i < nums.length; i++)\n    {\n        int s = 0;\n        while (nums[i]\
    \ > 0)\n        {\n            s += nums[i] % 10;\n            nums[i] /= 10;\n\
    \        }\n        sum[i] = s;\n    }\n    for (int i = 0; i < nums.length; i++)\n\
    \    {\n        int min = sum[i];\n        int min_index = i;\n        for (int\
    \ j = i; j < nums.length; j++)\n        {\n            if (sum[j] < min)\n   \
    \         {\n                min = sum[j];\n                min_index = j;\n \
    \           }\n        }\n        result[i] = nums[min_index];\n        sum[min_index]\
    \ = sum[i];\n        sum[i] = min;\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L,\
    \ -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L,\
    \ 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L,\
    \ 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpp5y1lth8.d(49): unittest failure

    ----------------

    ??:? _d_unittestp [0x428c55]

    ??:? void tmpp5y1lth8.__unittest_L45_C1() [0x42844d]

    ??:? void tmpp5y1lth8.__modtest() [0x4289d8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42cf17]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42bdaa]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x431035]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4314e4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430fc1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bd81]

    ??:? runModuleUnitTests [0x42cced]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429118]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163134
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    auto list = new\
    \ long[nums.length];\n    auto sum = new long[nums.length];\n    for (int i =\
    \ 0; i < nums.length; i++)\n    {\n        list[i] = nums[i];\n        sum[i]\
    \ = 0;\n        while (nums[i] > 0)\n        {\n            sum[i] += nums[i]\
    \ % 10;\n            nums[i] /= 10;\n        }\n    }\n    for (int i = 0; i <\
    \ nums.length; i++)\n    {\n        for (int j = i + 1; j < nums.length; j++)\n\
    \        {\n            if (sum[i] > sum[j])\n            {\n                auto\
    \ temp = sum[i];\n                sum[i] = sum[j];\n                sum[j] = temp;\n\
    \                temp = list[i];\n                list[i] = list[j];\n       \
    \         list[j] = temp;\n            }\n        }\n    }\n    return list;\n\
    }\nunittest\n{\n    alias candidate = order_by_points;\n\n    assert(candidate([1L,\
    \ 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L,\
    \ 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) ==\
    \ [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpcyovm9js.d(48): unittest failure

    ----------------

    ??:? _d_unittestp [0x428a95]

    ??:? void tmpcyovm9js.__unittest_L44_C1() [0x42828d]

    ??:? void tmpcyovm9js.__modtest() [0x428818]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42cb73]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42ba06]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430c91]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x431140]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430c1d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b9dd]

    ??:? runModuleUnitTests [0x42c949]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428f58]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163134
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    return nums.sort!((a,\
    \ b) => sumDigits(a) < sumDigits(b));\n}\nunittest\n{\n    alias candidate = order_by_points;\n\
    \n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp97b7ngqn.d(15): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp97b7ngqn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163133
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    auto arr = nums.dup;\n\
    \    auto sum = new long[arr.length];\n    foreach(i, ref e; arr)\n    {\n   \
    \     while(e > 0)\n        {\n            sum[i] += e % 10;\n            e /=\
    \ 10;\n        }\n    }\n    auto result = new long[arr.length];\n    foreach(i,\
    \ ref e; arr)\n    {\n        auto min = sum[0];\n        auto index = 0;\n  \
    \      foreach(j, ref e1; sum)\n        {\n            if(e1 < min)\n        \
    \    {\n                min = e1;\n                index = j;\n            }\n\
    \        }\n        result[i] = arr[index];\n        sum[index] = max(sum);\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = order_by_points;\n\
    \n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp68g8nm1l.d(35): Error: cannot implicitly convert expression `j`
    of type `ulong` to `int`

    /tmp/tmp68g8nm1l.d(39): Error: undefined identifier `max`, did you mean function
    `fmax`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp68g8nm1l.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163133
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    auto result =\
    \ nums.dup;\n    result.sort!((a, b) => sumDigits(a) < sumDigits(b));\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = order_by_points;\n\n    assert(candidate([1L,\
    \ 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L,\
    \ 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) ==\
    \ [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphqag3_0s.d(16): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphqag3_0s.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163133
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    long[] result\
    \ = new long[nums.length];\n    long[] sums = new long[nums.length];\n    foreach(i,\
    \ v; nums)\n    {\n        sums[i] = sumDigits(v);\n    }\n    foreach(i, v; nums)\n\
    \    {\n        long min = sums[i];\n        long index = i;\n        foreach(j,\
    \ v2; sums[i..$])\n        {\n            if(v2 < min)\n            {\n      \
    \          min = v2;\n                index = j;\n            }\n        }\n \
    \       result[i] = nums[index];\n        sums[index] = long.max;\n    }\n   \
    \ return result;\n}\nlong sumDigits(long n)\n{\n    long sum = 0;\n    while(n\
    \ > 0)\n    {\n        sum += n % 10;\n        n /= 10;\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = order_by_points;\n\n    assert(candidate([1L,\
    \ 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L,\
    \ 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) ==\
    \ [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpcdfw_n77.d(52): unittest failure

    ----------------

    ??:? _d_unittestp [0x4289fd]

    ??:? void tmpcdfw_n77.__unittest_L48_C1() [0x4281f5]

    ??:? void tmpcdfw_n77.__modtest() [0x428780]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42cadb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b96e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430bf9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4310a8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430b85]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b945]

    ??:? runModuleUnitTests [0x42c8b1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428ec0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163134
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    auto sum = (long\
    \ n) => n.to!string.map!(a => a.to!long).sum;\n    return nums.sort!((a, b) =>\
    \ sum(a) < sum(b) || (sum(a) == sum(b) && a < b));\n}\nunittest\n{\n    alias\
    \ candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L, -11L, -12L])\
    \ == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L, 463L, 145L,\
    \ 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L,\
    \ 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -11L, -32L, 43L, 54L, -98L, 2L, -3L]) ==\
    \ [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L,\
    \ 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L,\
    \ -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpoy49km1f.d(15): Error: no property `to` for type `long`

    /tmp/tmpoy49km1f.d(16): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoy49km1f.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163133
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    long[] result\
    \ = new long[nums.length];\n    long[] sums = new long[nums.length];\n    for\
    \ (int i = 0; i < nums.length; i++)\n    {\n        long sum = 0;\n        long\
    \ n = nums[i];\n        while (n > 0)\n        {\n            sum += n % 10;\n\
    \            n /= 10;\n        }\n        sums[i] = sum;\n    }\n    auto p =\
    \ zip(nums, sums);\n    p.sort!((a, b) => a[1] < b[1]);\n    foreach (i, v; p)\n\
    \    {\n        result[i] = v[0];\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L,\
    \ -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L,\
    \ 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L,\
    \ 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_oh5ee95.d(28): Error: undefined identifier `zip`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_oh5ee95.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163133
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    long[] result\
    \ = new long[nums.length];\n    long[] sums = new long[nums.length];\n    for\
    \ (int i = 0; i < nums.length; i++)\n    {\n        long sum = 0;\n        long\
    \ num = nums[i];\n        while (num > 0)\n        {\n            sum += num %\
    \ 10;\n            num /= 10;\n        }\n        sums[i] = sum;\n    }\n    //\
    \ sort sums\n    for (int i = 0; i < sums.length; i++)\n    {\n        for (int\
    \ j = i + 1; j < sums.length; j++)\n        {\n            if (sums[i] > sums[j])\n\
    \            {\n                long temp = sums[i];\n                sums[i]\
    \ = sums[j];\n                sums[j] = temp;\n                temp = nums[i];\n\
    \                nums[i] = nums[j];\n                nums[j] = temp;\n       \
    \     }\n        }\n    }\n    return nums;\n}\nunittest\n{\n    alias candidate\
    \ = order_by_points;\n\n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L,\
    \ -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L,\
    \ 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L,\
    \ 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -11L, -32L, 43L, 54L, -98L, 2L, -3L]) ==\
    \ [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L,\
    \ 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L,\
    \ -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpuehubwcw.d(50): unittest failure

    ----------------

    ??:? _d_unittestp [0x4289c5]

    ??:? void tmpuehubwcw.__unittest_L46_C1() [0x4281bd]

    ??:? void tmpuehubwcw.__modtest() [0x428748]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42caa3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b936]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430bc1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x431070]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430b4d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b90d]

    ??:? runModuleUnitTests [0x42c879]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428e88]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163134
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    long[] points\
    \ = nums.map!(x => x.to!string.map!(y => y.to!long).sum).array;\n    long[] result\
    \ = new long[nums.length];\n    foreach(i, n; nums)\n    {\n        result[points[i]]\
    \ = n;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = order_by_points;\n\
    \n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpoew6mcyv.d(15): Error: no property `map` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoew6mcyv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163133
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    // your code here\n\
    \    long[] result = new long[nums.length];\n    long[] sums = new long[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        long sum = 0;\n   \
    \     long temp = nums[i];\n        while (temp != 0)\n        {\n           \
    \ sum += temp % 10;\n            temp /= 10;\n        }\n        sums[i] = sum;\n\
    \    }\n    long[] sortedSums = sums.dup;\n    sortedSums.sort;\n    for (int\
    \ i = 0; i < nums.length; i++)\n    {\n        for (int j = 0; j < nums.length;\
    \ j++)\n        {\n            if (sortedSums[i] == sums[j])\n            {\n\
    \                result[i] = nums[j];\n                sums[j] = -1;\n       \
    \         break;\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L,\
    \ -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L,\
    \ 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L,\
    \ 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6ntwus9z.d(30): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6ntwus9z.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163133
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    long[] result\
    \ = new long[nums.length];\n    long[] sums = new long[nums.length];\n    for\
    \ (int i = 0; i < nums.length; i++)\n    {\n        long sum = 0;\n        long\
    \ num = nums[i];\n        while (num > 0)\n        {\n            sum += num %\
    \ 10;\n            num /= 10;\n        }\n        sums[i] = sum;\n    }\n    auto\
    \ p = zip(nums, sums);\n    p.sort!((a, b) => a[1] < b[1]);\n    foreach (i, e;\
    \ p)\n    {\n        result[i] = e[0];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L,\
    \ -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L,\
    \ 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L,\
    \ 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjf5ewywa.d(28): Error: undefined identifier `zip`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjf5ewywa.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163133
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    long[] result\
    \ = new long[nums.length];\n    long[] sums = new long[nums.length];\n    foreach(i,\
    \ n; nums)\n    {\n        sums[i] = n.sumDigits;\n    }\n    auto sorted = sort(sums);\n\
    \    foreach(i, n; sorted)\n    {\n        result[i] = nums[n.indexOf];\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = order_by_points;\n\n\
    \    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpx132_h68.d(19): Error: no property `sumDigits` for type `long`

    /tmp/tmpx132_h68.d(21): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx132_h68.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163133
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    long[] sums =\
    \ new long[nums.length];\n    foreach(i, n; nums)\n    {\n        sums[i] = n.sumDigits;\n\
    \    }\n    return nums.sort(sums);\n}\nunittest\n{\n    alias candidate = order_by_points;\n\
    \n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpuelg0ap9.d(18): Error: no property `sumDigits` for type `long`

    /tmp/tmpuelg0ap9.d(20): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuelg0ap9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163133
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    long[] result\
    \ = new long[nums.length];\n    long[] sum = new long[nums.length];\n    long[]\
    \ index = new long[nums.length];\n    for (int i = 0; i < nums.length; i++)\n\
    \    {\n        index[i] = i;\n        sum[i] = 0;\n        long n = nums[i];\n\
    \        while (n != 0)\n        {\n            sum[i] += n % 10;\n          \
    \  n /= 10;\n        }\n    }\n    sort(sum, index);\n    for (int i = 0; i <\
    \ nums.length; i++)\n    {\n        result[i] = nums[index[i]];\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = order_by_points;\n\n    assert(candidate([1L,\
    \ 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L,\
    \ 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) ==\
    \ [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptdf44mpm.d(29): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptdf44mpm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163133
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    auto points =\
    \ nums.map!(n => n.to!string.map!(c => c.to!long).sum).array;\n    return nums.sort!((a,\
    \ b) => points[a] < points[b] || (points[a] == points[b] && a < b));\n}\nunittest\n\
    {\n    alias candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L,\
    \ -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L,\
    \ 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L,\
    \ 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphdz1ygag.d(15): Error: no property `map` for type `long[]`

    /tmp/tmphdz1ygag.d(16): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphdz1ygag.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163133
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    long[] result\
    \ = new long[nums.length];\n    long[] sums = new long[nums.length];\n    for\
    \ (int i = 0; i < nums.length; i++)\n    {\n        long sum = 0;\n        long\
    \ num = nums[i];\n        while (num > 0)\n        {\n            sum += num %\
    \ 10;\n            num /= 10;\n        }\n        sums[i] = sum;\n    }\n    int[]\
    \ indices = new int[nums.length];\n    for (int i = 0; i < indices.length; i++)\n\
    \        indices[i] = i;\n    sort(sums, indices);\n    for (int i = 0; i < indices.length;\
    \ i++)\n        result[i] = nums[indices[i]];\n    return result;\n}\nunittest\n\
    {\n    alias candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L,\
    \ -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L,\
    \ 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L,\
    \ 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpn291hu9h.d(31): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn291hu9h.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163133
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    auto result =\
    \ nums.dup;\n    result.sort!((a, b) => sumDigits(a) < sumDigits(b) || (sumDigits(a)\
    \ == sumDigits(b) && a < b));\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = order_by_points;\n\n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L,\
    \ -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L,\
    \ 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L,\
    \ 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -11L, -32L, 43L, 54L, -98L, 2L, -3L]) ==\
    \ [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L,\
    \ 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L,\
    \ -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfj6jvx9s.d(16): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfj6jvx9s.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163133
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    auto points =\
    \ nums.map!(n => n.to!string().sum!q{a => a.to!long()});\n    return nums.zip(points).sort!q{a,\
    \ b => a[1] < b[1] || (a[1] == b[1] && a[0] < b[0])}.map!(a => a[0]).array;\n\
    }\nunittest\n{\n    alias candidate = order_by_points;\n\n    assert(candidate([1L,\
    \ 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L,\
    \ 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) ==\
    \ [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4gjvpqhr.d(15): Error: no property `map` for type `long[]`

    /tmp/tmp4gjvpqhr.d(16): Error: no property `zip` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4gjvpqhr.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163133
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    auto s = nums.map!(a\
    \ => tuple(a, a.sumOfDigits())).sort!((a, b) => a[1] < b[1] || (a[1] == b[1] &&\
    \ a[0] < b[0]));\n    return s.map!(a => a[0]).array;\n}\nunittest\n{\n    alias\
    \ candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L, -11L, -12L])\
    \ == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L, 463L, 145L,\
    \ 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L,\
    \ 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -11L, -32L, 43L, 54L, -98L, 2L, -3L]) ==\
    \ [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L,\
    \ 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L,\
    \ -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5pr00ng1.d(15): Error: no property `map` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5pr00ng1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163133
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    long[] result\
    \ = new long[nums.length];\n    long[] sums = new long[nums.length];\n    for\
    \ (int i = 0; i < nums.length; i++)\n    {\n        long sum = 0;\n        long\
    \ num = nums[i];\n        while (num > 0)\n        {\n            sum += num %\
    \ 10;\n            num /= 10;\n        }\n        sums[i] = sum;\n    }\n    long[]\
    \ sortedSums = sums.dup;\n    sortedSums.sort;\n    for (int i = 0; i < nums.length;\
    \ i++)\n    {\n        for (int j = 0; j < nums.length; j++)\n        {\n    \
    \        if (sums[j] == sortedSums[i])\n            {\n                result[i]\
    \ = nums[j];\n                sums[j] = -1;\n                break;\n        \
    \    }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = order_by_points;\n\n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L,\
    \ -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L,\
    \ 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L,\
    \ 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -11L, -32L, 43L, 54L, -98L, 2L, -3L]) ==\
    \ [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L,\
    \ 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L,\
    \ -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8nf9jd77.d(29): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8nf9jd77.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163133
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    return nums.sort!((a,\
    \ b) => sumDigits(a) < sumDigits(b));\n}\nunittest\n{\n    alias candidate = order_by_points;\n\
    \n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp97b7ngqn.d(15): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp97b7ngqn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163133
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    long[] result\
    \ = new long[nums.length];\n    long[] sums = new long[nums.length];\n    for\
    \ (int i = 0; i < nums.length; i++)\n    {\n        long num = nums[i];\n    \
    \    long sum = 0;\n        while (num > 0)\n        {\n            sum += num\
    \ % 10;\n            num /= 10;\n        }\n        sums[i] = sum;\n    }\n  \
    \  auto t = tuple(nums, sums);\n    t.sort!((a, b) => a[1] < b[1]);\n    for (int\
    \ i = 0; i < nums.length; i++)\n    {\n        result[i] = t[i][0];\n    }\n \
    \   return result;\n}\nunittest\n{\n    alias candidate = order_by_points;\n\n\
    \    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpor4zuc8_.d(29): Error: no property `sort` for type `Tuple!(long[],
    long[])`

    /tmp/tmpor4zuc8_.d(32): Error: variable `i` cannot be read at compile time

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpor4zuc8_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163133
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    long[] result\
    \ = new long[nums.length];\n    long[] sum = new long[nums.length];\n    long[]\
    \ index = new long[nums.length];\n    for (int i = 0; i < nums.length; i++)\n\
    \    {\n        sum[i] = nums[i] % 10 + nums[i] / 10;\n        index[i] = i;\n\
    \    }\n    sort(sum, index);\n    for (int i = 0; i < nums.length; i++)\n   \
    \ {\n        result[i] = nums[index[i]];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L,\
    \ -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L,\
    \ 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L,\
    \ 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpm7xmg_gi.d(23): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpm7xmg_gi.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163133
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    long[] result\
    \ = new long[nums.length];\n    long[] points = new long[nums.length];\n    long[]\
    \ indexes = new long[nums.length];\n    for (int i = 0; i < nums.length; i++)\n\
    \    {\n        indexes[i] = i;\n        long sum = 0;\n        while (nums[i]\
    \ > 0)\n        {\n            sum += nums[i] % 10;\n            nums[i] /= 10;\n\
    \        }\n        points[i] = sum;\n    }\n    sort(points);\n    sort(indexes);\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        result[i] = nums[indexes[i]];\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = order_by_points;\n\
    \n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpidquw2la.d(29): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    /tmp/tmpidquw2la.d(30): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpidquw2la.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163133
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    long[] result\
    \ = new long[nums.length];\n    long[] sums = new long[nums.length];\n    for\
    \ (int i = 0; i < nums.length; i++)\n    {\n        sums[i] = sumDigits(nums[i]);\n\
    \    }\n    sort(sums);\n    for (int i = 0; i < nums.length; i++)\n    {\n  \
    \      for (int j = 0; j < nums.length; j++)\n        {\n            if (sums[i]\
    \ == sumDigits(nums[j]))\n            {\n                result[i] = nums[j];\n\
    \                nums[j] = -1;\n                break;\n            }\n      \
    \  }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = order_by_points;\n\
    \n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpplv10xtl.d(19): Error: undefined identifier `sumDigits`

    /tmp/tmpplv10xtl.d(21): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    /tmp/tmpplv10xtl.d(26): Error: undefined identifier `sumDigits`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpplv10xtl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163134
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    // your code here\n\
    \    long[] result = new long[nums.length];\n    long[] sums = new long[nums.length];\n\
    \    foreach(i, v; nums)\n    {\n        sums[i] = v.sumDigits();\n    }\n   \
    \ auto t = tuple(sums, nums);\n    t.sort!(\"a[0] < b[0] || (a[0] == b[0] && a[1]\
    \ < b[1])\");\n    foreach(i, v; t)\n    {\n        result[i] = v[1];\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = order_by_points;\n\n\
    \    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxmnjfbc2.d(20): Error: no property `sumDigits` for type `long`

    /tmp/tmpxmnjfbc2.d(23): Error: no property `sort` for type `Tuple!(long[], long[])`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxmnjfbc2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163134
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    long[] result\
    \ = new long[nums.length];\n    long[] sum = new long[nums.length];\n    long[]\
    \ index = new long[nums.length];\n    for (int i = 0; i < nums.length; i++)\n\
    \    {\n        sum[i] = 0;\n        index[i] = i;\n        while (nums[i] > 0)\n\
    \        {\n            sum[i] += nums[i] % 10;\n            nums[i] /= 10;\n\
    \        }\n    }\n    sort(sum, index);\n    for (int i = 0; i < nums.length;\
    \ i++)\n    {\n        result[i] = nums[index[i]];\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = order_by_points;\n\n    assert(candidate([1L,\
    \ 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L,\
    \ 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) ==\
    \ [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmfvxlf9d.d(28): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmfvxlf9d.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163134
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    auto sum = (long\
    \ n) => n.to!string.map!(a => a.to!long).sum;\n    auto arr = nums.map!(a => tuple(a,\
    \ sum(a))).sort!((a, b) => a[1] < b[1] || (a[1] == b[1] && a[0] < b[0]));\n  \
    \  return arr.map!(a => a[0]).array;\n}\nunittest\n{\n    alias candidate = order_by_points;\n\
    \n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpaqle2zu0.d(15): Error: no property `to` for type `long`

    /tmp/tmpaqle2zu0.d(16): Error: no property `map` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpaqle2zu0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163134
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    auto result =\
    \ nums.dup;\n    result.sort!((a, b) => sumDigits(a) < sumDigits(b));\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = order_by_points;\n\n    assert(candidate([1L,\
    \ 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L,\
    \ 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) ==\
    \ [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphqag3_0s.d(16): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphqag3_0s.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163133
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    auto result =\
    \ nums.dup;\n    result.sort!((a, b) => sumDigits(a) < sumDigits(b));\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = order_by_points;\n\n    assert(candidate([1L,\
    \ 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L,\
    \ 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) ==\
    \ [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphqag3_0s.d(16): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphqag3_0s.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163133
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    return nums.sort!((a,\
    \ b) => sumDigits(a) < sumDigits(b));\n}\nunittest\n{\n    alias candidate = order_by_points;\n\
    \n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp97b7ngqn.d(15): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp97b7ngqn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163133
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    auto sum = (long\
    \ x) => x.to!string.map!(a => a.to!long).sum;\n    return nums.enumerate.sort!((a,\
    \ b) => sum(a[1]) < sum(b[1]) || (sum(a[1]) == sum(b[1]) && a[0] < b[0])).map!(a\
    \ => a[1]).array;\n}\nunittest\n{\n    alias candidate = order_by_points;\n\n\
    \    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpyf0bi9r9.d(15): Error: no property `to` for type `long`

    /tmp/tmpyf0bi9r9.d(16): Error: no property `enumerate` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyf0bi9r9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163134
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    auto result =\
    \ nums.dup;\n    result.sort!((a, b) => sumDigits(a) < sumDigits(b));\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = order_by_points;\n\n    assert(candidate([1L,\
    \ 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L,\
    \ 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) ==\
    \ [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphqag3_0s.d(16): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphqag3_0s.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163133
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    auto result =\
    \ nums.dup;\n    result.sort!((a, b) => sumDigits(a) < sumDigits(b) || (sumDigits(a)\
    \ == sumDigits(b) && a < b));\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = order_by_points;\n\n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L,\
    \ -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L,\
    \ 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L,\
    \ 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -11L, -32L, 43L, 54L, -98L, 2L, -3L]) ==\
    \ [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L,\
    \ 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L,\
    \ -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfj6jvx9s.d(16): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfj6jvx9s.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163133
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    long[] result;\n\
    \    long[] sum;\n    long[] index;\n    long[] temp;\n    long[] temp2;\n   \
    \ long[] temp3;\n    long[] temp4;\n    long[] temp5;\n    long[] temp6;\n   \
    \ long[] temp7;\n    long[] temp8;\n    long[] temp9;\n    long[] temp10;\n  \
    \  long[] temp11;\n    long[] temp12;\n    long[] temp13;\n    long[] temp14;\n\
    \    long[] temp15;\n    long[] temp16;\n    long[] temp17;\n    long[] temp18;\n\
    \    long[] temp19;\n    long[] temp20;\n    long[] temp21;\n    long[] temp22;\n\
    \    long[] temp23;\n    long[] temp24;\n    long[] temp25;\n    long[] temp26;\n\
    \    long[] temp27;\n    long[] temp28;\n    long[] temp29;\n    long[] temp30;\n\
    \    long[] temp31;\n    long[] temp32;\n    long[] temp33;\n    long[] temp34;\n\
    \    long[] temp35;\n    long[] temp36;\n    long[] temp37;\n    long[] temp38;\n\
    \    long[] temp39;\n    long[] temp40;\n    long[] temp41;\n    long[] temp42;\n\
    \    long[] temp43;\n    long[] temp44;\n    long[] temp45;\n    long[] temp46;\n\
    \    long[] temp47;\n    long[] temp48;\n    long[] temp49;\n    long[] temp50;\n\
    \    long[] temp51;\n    long[] temp52;\n    long[] temp53;\n    long[] temp54;\n\
    \    long[] temp55;\n    long[] temp56;\n    long[] temp57;\n    long[] temp58;\n\
    \    long[] temp59;\n    long[] temp60;\n    long[] temp61;\n    long[] temp62;\n\
    \    long[] temp63;\n    long[] temp64;\n    long[] temp65;\n    long[] temp66;\n\
    \    long[] temp67;\n    long[] temp68;\n    long[] temp69;\n    long[] temp70;\n\
    \    long\nunittest\n{\n    alias candidate = order_by_points;\n\n    assert(candidate([1L,\
    \ 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L,\
    \ 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) ==\
    \ [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_azyy1nx.d(89): Error: no identifier for declarator `long`

    /tmp/tmp_azyy1nx.d(89): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_azyy1nx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163133
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    auto result =\
    \ nums.dup;\n    result.sort!((a, b) => sumDigits(a) > sumDigits(b));\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = order_by_points;\n\n    assert(candidate([1L,\
    \ 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L,\
    \ 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) ==\
    \ [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmps5tkyebp.d(16): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmps5tkyebp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163134
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    long[] result\
    \ = new long[nums.length];\n    long[] sums = new long[nums.length];\n    for\
    \ (int i = 0; i < nums.length; i++)\n    {\n        long sum = 0;\n        foreach\
    \ (c; nums[i].to!string)\n        {\n            if (c.isDigit)\n            {\n\
    \                sum += c.to!long - '0'.to!long;\n            }\n        }\n \
    \       sums[i] = sum;\n    }\n    auto sorted = sort(sums);\n    for (int i =\
    \ 0; i < nums.length; i++)\n    {\n        for (int j = 0; j < nums.length; j++)\n\
    \        {\n            if (sums[j] == sorted[i])\n            {\n           \
    \     result[i] = nums[j];\n                sums[j] = -1;\n                break;\n\
    \            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L, -11L, -12L])\
    \ == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L, 463L, 145L,\
    \ 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L,\
    \ 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -11L, -32L, 43L, 54L, -98L, 2L, -3L]) ==\
    \ [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L,\
    \ 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L,\
    \ -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7sy7edml.d(20): Error: no property `to` for type `long`

    /tmp/tmp7sy7edml.d(29): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7sy7edml.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163134
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    long[] result\
    \ = new long[nums.length];\n    long[] sum = new long[nums.length];\n    for (int\
    \ i = 0; i < nums.length; i++)\n    {\n        sum[i] = nums[i];\n        while\
    \ (sum[i] > 0)\n        {\n            sum[i] = sum[i] / 10;\n            sum[i]\
    \ += nums[i] % 10;\n            nums[i] = nums[i] / 10;\n        }\n    }\n  \
    \  int[] order = new int[nums.length];\n    for (int i = 0; i < nums.length; i++)\n\
    \    {\n        order[i] = i;\n    }\n    for (int i = 0; i < nums.length; i++)\n\
    \    {\n        for (int j = i + 1; j < nums.length; j++)\n        {\n       \
    \     if (sum[i] > sum[j])\n            {\n                long temp = sum[i];\n\
    \                sum[i] = sum[j];\n                sum[j] = temp;\n          \
    \      int temp2 = order[i];\n                order[i] = order[j];\n         \
    \       order[j] = temp2;\n            }\n        }\n    }\n    for (int i = 0;\
    \ i < nums.length; i++)\n    {\n        result[i] = nums[order[i]];\n    }\n \
    \   return result;\n}\nunittest\n{\n    alias candidate = order_by_points;\n\n\
    \    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpgj58xsh6.d(57): unittest failure

    ----------------

    ??:? _d_unittestp [0x428e55]

    ??:? void tmpgj58xsh6.__unittest_L53_C1() [0x42864d]

    ??:? void tmpgj58xsh6.__modtest() [0x428bd8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42d117]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42bfaa]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x431235]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4316e4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4311c1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bf81]

    ??:? runModuleUnitTests [0x42ceed]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429318]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163134
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    return nums.sort!((a,\
    \ b) => \n    {\n        long sumA = 0;\n        long sumB = 0;\n        foreach(digit;\
    \ a.to!string)\n        {\n            sumA += digit.to!long;\n        }\n   \
    \     foreach(digit; b.to!string)\n        {\n            sumB += digit.to!long;\n\
    \        }\n        return sumA < sumB;\n    });\n}\nunittest\n{\n    alias candidate\
    \ = order_by_points;\n\n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L,\
    \ -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L,\
    \ 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L,\
    \ 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -11L, -32L, 43L, 54L, -98L, 2L, -3L]) ==\
    \ [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L,\
    \ 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L,\
    \ -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpi_4bpaxy.d(15): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi_4bpaxy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163134
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    long[] result\
    \ = new long[nums.length];\n    long[] sums = new long[nums.length];\n    for\
    \ (int i = 0; i < nums.length; i++)\n    {\n        sums[i] = nums[i];\n     \
    \   while (sums[i] > 0)\n        {\n            sums[i] = sums[i] / 10;\n    \
    \        sums[i] += nums[i] % 10;\n            nums[i] = nums[i] / 10;\n     \
    \   }\n    }\n    long[] sorted = sums.dup;\n    sort(sorted);\n    for (int i\
    \ = 0; i < nums.length; i++)\n    {\n        for (int j = 0; j < nums.length;\
    \ j++)\n        {\n            if (sorted[i] == sums[j])\n            {\n    \
    \            result[i] = nums[j];\n                sums[j] = -1;\n           \
    \     break;\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L,\
    \ -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L,\
    \ 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L,\
    \ 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpw9hnm940.d(28): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw9hnm940.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163134
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    long[] result\
    \ = new long[nums.length];\n    long[] sum = new long[nums.length];\n    long[]\
    \ index = new long[nums.length];\n    for (int i = 0; i < nums.length; i++)\n\
    \    {\n        sum[i] = 0;\n        index[i] = i;\n        while (nums[i] > 0)\n\
    \        {\n            sum[i] += nums[i] % 10;\n            nums[i] /= 10;\n\
    \        }\n    }\n    for (int i = 0; i < nums.length; i++)\n    {\n        for\
    \ (int j = i + 1; j < nums.length; j++)\n        {\n            if (sum[i] > sum[j])\n\
    \            {\n                long temp = sum[i];\n                sum[i] =\
    \ sum[j];\n                sum[j] = temp;\n                temp = nums[i];\n \
    \               nums[i] = nums[j];\n                nums[j] = temp;\n        \
    \        temp = index[i];\n                index[i] = index[j];\n            \
    \    index[j] = temp;\n            }\n            else if (sum[i] == sum[j])\n\
    \            {\n                if (index[i] > index[j])\n                {\n\
    \                    long temp = sum[i];\n                    sum[i] = sum[j];\n\
    \                    sum[j] = temp;\n                    temp = nums[i];\n   \
    \                 nums[i] = nums[j];\n                    nums[j] = temp;\n  \
    \                  temp = index[i];\n                    index[i] = index[j];\n\
    \                    index[j] = temp;\n                }\n            }\n    \
    \    }\n    }\n    for (int i = 0; i < nums.length; i++)\n    {\n        result[i]\
    \ = nums[i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate =\
    \ order_by_points;\n\n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L,\
    \ -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L,\
    \ 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L,\
    \ 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -11L, -32L, 43L, 54L, -98L, 2L, -3L]) ==\
    \ [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L,\
    \ 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L,\
    \ -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp636tsx61.d(71): unittest failure

    ----------------

    ??:? _d_unittestp [0x428e0d]

    ??:? void tmp636tsx61.__unittest_L67_C1() [0x428605]

    ??:? void tmp636tsx61.__modtest() [0x428b90]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ceeb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42bd7e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x431009]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4314b8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430f95]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bd55]

    ??:? runModuleUnitTests [0x42ccc1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4292d0]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163134
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    auto sum = (long\
    \ n) => n.to!string.map!(a => a.to!long).sum;\n    auto res = nums.dup;\n    res.sort!((a,\
    \ b) => sum(a) < sum(b) || (sum(a) == sum(b) && a < b));\n    return res;\n}\n\
    unittest\n{\n    alias candidate = order_by_points;\n\n    assert(candidate([1L,\
    \ 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L,\
    \ 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) ==\
    \ [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpyu0puj57.d(15): Error: no property `to` for type `long`

    /tmp/tmpyu0puj57.d(17): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyu0puj57.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163134
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    long[] result\
    \ = new long[nums.length];\n    long[] sums = new long[nums.length];\n    for\
    \ (int i = 0; i < nums.length; i++)\n    {\n        long sum = 0;\n        long\
    \ n = nums[i];\n        while (n > 0)\n        {\n            sum += n % 10;\n\
    \            n /= 10;\n        }\n        sums[i] = sum;\n    }\n    auto sorted\
    \ = sort(zip(nums, sums));\n    foreach (i, e; sorted)\n    {\n        result[i]\
    \ = e[0];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = order_by_points;\n\
    \n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_4d1062j.d(28): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_4d1062j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163134
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    auto points =\
    \ new long[nums.length];\n    foreach(i, n; nums)\n    {\n        points[i] =\
    \ n.sumDigits;\n    }\n    return nums.sort(points);\n}\nunittest\n{\n    alias\
    \ candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L, -11L, -12L])\
    \ == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L, 463L, 145L,\
    \ 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L,\
    \ 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -11L, -32L, 43L, 54L, -98L, 2L, -3L]) ==\
    \ [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L,\
    \ 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L,\
    \ -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgdvhzk3u.d(18): Error: no property `sumDigits` for type `long`

    /tmp/tmpgdvhzk3u.d(20): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgdvhzk3u.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163134
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    long[] result\
    \ = new long[nums.length];\n    long[] sums = new long[nums.length];\n    long[]\
    \ indexes = new long[nums.length];\n    for (int i = 0; i < nums.length; i++)\n\
    \    {\n        sums[i] = sum_digits(nums[i]);\n        indexes[i] = i;\n    }\n\
    \    sort(sums, indexes);\n    for (int i = 0; i < nums.length; i++)\n    {\n\
    \        result[i] = nums[indexes[i]];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L,\
    \ -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L,\
    \ 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L,\
    \ 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpalguzjbc.d(20): Error: undefined identifier `sum_digits`

    /tmp/tmpalguzjbc.d(23): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpalguzjbc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163134
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    return nums.sort!((a,\
    \ b) => sumDigits(a) < sumDigits(b) || (sumDigits(a) == sumDigits(b) && a < b));\n\
    }\nunittest\n{\n    alias candidate = order_by_points;\n\n    assert(candidate([1L,\
    \ 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L,\
    \ 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) ==\
    \ [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfuems9_0.d(15): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfuems9_0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163133
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    long[] result\
    \ = new long[nums.length];\n    long[] sum = new long[nums.length];\n    long[]\
    \ index = new long[nums.length];\n    for (int i = 0; i < nums.length; i++)\n\
    \    {\n        sum[i] = 0;\n        index[i] = i;\n        while (nums[i] > 0)\n\
    \        {\n            sum[i] += nums[i] % 10;\n            nums[i] /= 10;\n\
    \        }\n    }\n    sort(index, sum);\n    for (int i = 0; i < nums.length;\
    \ i++)\n    {\n        result[i] = nums[index[i]];\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = order_by_points;\n\n    assert(candidate([1L,\
    \ 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L,\
    \ 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) ==\
    \ [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2wmhyts9.d(28): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2wmhyts9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163134
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    long[] result\
    \ = new long[nums.length];\n    long[] sum = new long[nums.length];\n    long[]\
    \ index = new long[nums.length];\n    for (int i = 0; i < nums.length; i++)\n\
    \    {\n        index[i] = i;\n        long temp = nums[i];\n        while (temp\
    \ > 0)\n        {\n            sum[i] += temp % 10;\n            temp /= 10;\n\
    \        }\n    }\n    sort(sum, index);\n    for (int i = 0; i < nums.length;\
    \ i++)\n    {\n        result[i] = nums[index[i]];\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = order_by_points;\n\n    assert(candidate([1L,\
    \ 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L,\
    \ 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) ==\
    \ [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpm_4yrrl7.d(28): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpm_4yrrl7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163134
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    // your code here\n\
    \    long[] result = new long[nums.length];\n    long[] sum = new long[nums.length];\n\
    \    long[] index = new long[nums.length];\n    for(int i = 0; i < nums.length;\
    \ i++)\n    {\n        index[i] = i;\n        sum[i] = 0;\n        long num =\
    \ nums[i];\n        while(num > 0)\n        {\n            sum[i] += num % 10;\n\
    \            num /= 10;\n        }\n    }\n    for(int i = 0; i < nums.length;\
    \ i++)\n    {\n        for(int j = i + 1; j < nums.length; j++)\n        {\n \
    \           if(sum[i] > sum[j])\n            {\n                long temp = sum[i];\n\
    \                sum[i] = sum[j];\n                sum[j] = temp;\n          \
    \      temp = nums[i];\n                nums[i] = nums[j];\n                nums[j]\
    \ = temp;\n                temp = index[i];\n                index[i] = index[j];\n\
    \                index[j] = temp;\n            }\n            else if(sum[i] ==\
    \ sum[j])\n            {\n                if(index[i] > index[j])\n          \
    \      {\n                    long temp = sum[i];\n                    sum[i]\
    \ = sum[j];\n                    sum[j] = temp;\n                    temp = nums[i];\n\
    \                    nums[i] = nums[j];\n                    nums[j] = temp;\n\
    \                    temp = index[i];\n                    index[i] = index[j];\n\
    \                    index[j] = temp;\n                }\n            }\n    \
    \    }\n    }\n    for(int i = 0; i < nums.length; i++)\n    {\n        result[i]\
    \ = nums[i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate =\
    \ order_by_points;\n\n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L,\
    \ -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L,\
    \ 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L,\
    \ 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -11L, -32L, 43L, 54L, -98L, 2L, -3L]) ==\
    \ [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L,\
    \ 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L,\
    \ -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmprqaohino.d(73): unittest failure

    ----------------

    ??:? _d_unittestp [0x428dad]

    ??:? void tmprqaohino.__unittest_L69_C1() [0x4285a1]

    ??:? void tmprqaohino.__modtest() [0x428b2c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ce8b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42bd1e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430fa9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x431458]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430f35]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bcf5]

    ??:? runModuleUnitTests [0x42cc61]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429270]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163134
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    auto result =\
    \ nums.dup;\n    result.sort!((a, b) => sumDigits(a) < sumDigits(b));\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = order_by_points;\n\n    assert(candidate([1L,\
    \ 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L,\
    \ 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) ==\
    \ [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphqag3_0s.d(16): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphqag3_0s.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163133
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    auto result =\
    \ nums.dup;\n    auto sums = nums.map!((x) => x.sumDigits());\n    result.sort!((a,\
    \ b) => sums[a] < sums[b] || (sums[a] == sums[b] && a < b));\n    return result;\n\
    }\nunittest\n{\n    alias candidate = order_by_points;\n\n    assert(candidate([1L,\
    \ 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L,\
    \ 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) ==\
    \ [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpswgvnknp.d(16): Error: no property `map` for type `long[]`

    /tmp/tmpswgvnknp.d(17): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpswgvnknp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163134
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    auto result =\
    \ nums.dup;\n    auto sum = new long[result.length];\n    foreach(i, e; result)\n\
    \    {\n        while(e > 0)\n        {\n            sum[i] += e % 10;\n     \
    \       e /= 10;\n        }\n    }\n    sort!((a, b) => sum[a] < sum[b] || (sum[a]\
    \ == sum[b] && a < b))(result);\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L, -11L, -12L])\
    \ == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L, 463L, 145L,\
    \ 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L,\
    \ 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -11L, -32L, 43L, 54L, -98L, 2L, -3L]) ==\
    \ [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L,\
    \ 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L,\
    \ -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsx0aw5vi.d(25): Error: template instance `sort!((a, b) => sum[a]
    < sum[b] || sum[a] == sum[b] && (a < b))` template `sort` is not defined, did
    you mean sqrt?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsx0aw5vi.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163134
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    return nums.sort!((a,\
    \ b) => sumDigits(a) < sumDigits(b));\n}\nunittest\n{\n    alias candidate = order_by_points;\n\
    \n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp97b7ngqn.d(15): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp97b7ngqn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163133
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    long[] result\
    \ = new long[nums.length];\n    long[] sum = new long[nums.length];\n    long[]\
    \ index = new long[nums.length];\n    for (int i = 0; i < nums.length; i++)\n\
    \    {\n        index[i] = i;\n        sum[i] = 0;\n        long num = nums[i];\n\
    \        while (num > 0)\n        {\n            sum[i] += num % 10;\n       \
    \     num /= 10;\n        }\n    }\n    sort(sum, index);\n    for (int i = 0;\
    \ i < nums.length; i++)\n    {\n        result[i] = nums[index[i]];\n    }\n \
    \   return result;\n}\nunittest\n{\n    alias candidate = order_by_points;\n\n\
    \    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpw4ddmzgr.d(29): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw4ddmzgr.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163134
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    long[] result\
    \ = new long[nums.length];\n    long[] sums = new long[nums.length];\n    long[]\
    \ indexes = new long[nums.length];\n    for (int i = 0; i < nums.length; i++)\n\
    \    {\n        sums[i] = sumDigits(nums[i]);\n        indexes[i] = i;\n    }\n\
    \    sort!((a, b) => a < b)(sums, indexes);\n    for (int i = 0; i < nums.length;\
    \ i++)\n    {\n        result[i] = nums[indexes[i]];\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = order_by_points;\n\n    assert(candidate([1L,\
    \ 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L,\
    \ 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) ==\
    \ [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8d73ursw.d(20): Error: undefined identifier `sumDigits`

    /tmp/tmp8d73ursw.d(23): Error: template instance `sort!((a, b) => a < b)` template
    `sort` is not defined, did you mean sqrt?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8d73ursw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163134
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    // your code here\n\
    \    long[] result = new long[nums.length];\n    long[] sums = new long[nums.length];\n\
    \    long[] indices = new long[nums.length];\n    for (int i = 0; i < nums.length;\
    \ i++) {\n        indices[i] = i;\n        sums[i] = 0;\n        long n = nums[i];\n\
    \        while (n > 0) {\n            sums[i] += n % 10;\n            n /= 10;\n\
    \        }\n    }\n    sort(sums, indices);\n    for (int i = 0; i < nums.length;\
    \ i++) {\n        result[i] = nums[indices[i]];\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = order_by_points;\n\n    assert(candidate([1L,\
    \ 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L,\
    \ 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) ==\
    \ [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpy5xxgtvm.d(28): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy5xxgtvm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163134
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    long[] result\
    \ = new long[nums.length];\n    long[] sums = new long[nums.length];\n    long[]\
    \ indices = new long[nums.length];\n    for (int i = 0; i < nums.length; i++)\n\
    \    {\n        indices[i] = i;\n        sums[i] = nums[i] == 0 ? 0 : nums[i]\
    \ % 10 + order_by_points(nums[i] / 10);\n    }\n    sort(sums, indices);\n   \
    \ for (int i = 0; i < nums.length; i++)\n    {\n        result[i] = nums[indices[i]];\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = order_by_points;\n\
    \n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpb_h_kudt.d(21): Error: function `tmpb_h_kudt.order_by_points(long[]
    nums)` is not callable using argument types `(long)`

    /tmp/tmpb_h_kudt.d(21):        cannot pass argument `nums[cast(ulong)i] / 10L`
    of type `long` to parameter `long[] nums`

    /tmp/tmpb_h_kudt.d(23): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb_h_kudt.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163134
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    long[] result\
    \ = new long[nums.length];\n    long[] sums = new long[nums.length];\n    for\
    \ (int i = 0; i < nums.length; i++)\n    {\n        long sum = 0;\n        long\
    \ n = nums[i];\n        while (n > 0)\n        {\n            sum += n % 10;\n\
    \            n /= 10;\n        }\n        sums[i] = sum;\n    }\n    Tuple!(long,\
    \ long)[] tuples = new Tuple!(long, long)[nums.length];\n    for (int i = 0; i\
    \ < nums.length; i++)\n    {\n        tuples[i] = tuple(sums[i], nums[i]);\n \
    \   }\n    tuples.sort!((a, b) => a[0] < b[0] || (a[0] == b[0] && a[1] < b[1]));\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        result[i] = tuples[i][1];\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = order_by_points;\n\
    \n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpy7o_k_6e.d(33): Error: no property `sort` for type `Tuple!(long,
    long)[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy7o_k_6e.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163134
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    auto s = nums.map!(a\
    \ => tuple(a, a.sumOfDigits())).sort!((a, b) => a[1] < b[1] || (a[1] == b[1] &&\
    \ a[0] < b[0]));\n    return s.map!(a => a[0]).array;\n}\nunittest\n{\n    alias\
    \ candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L, -11L, -12L])\
    \ == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L, 463L, 145L,\
    \ 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L,\
    \ 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -11L, -32L, 43L, 54L, -98L, 2L, -3L]) ==\
    \ [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L,\
    \ 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L,\
    \ -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5pr00ng1.d(15): Error: no property `map` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5pr00ng1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163133
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    long[] result\
    \ = new long[nums.length];\n    long[] sums = new long[nums.length];\n    for\
    \ (int i = 0; i < nums.length; i++)\n    {\n        sums[i] = nums[i];\n     \
    \   while (sums[i] > 0)\n        {\n            sums[i] = sums[i] - sums[i] %\
    \ 10;\n            sums[i] = sums[i] / 10;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = order_by_points;\n\n    assert(candidate([1L,\
    \ 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L,\
    \ 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) ==\
    \ [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp7iecf8mu.d(32): unittest failure

    ----------------

    ??:? _d_unittestp [0x4288bd]

    ??:? void tmp7iecf8mu.__unittest_L28_C1() [0x4280b1]

    ??:? void tmp7iecf8mu.__modtest() [0x42863c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c99b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b82e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430ab9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430f68]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430a45]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b805]

    ??:? runModuleUnitTests [0x42c771]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428d80]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163134
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    // your code here\n\
    \    long[] sums = new long[nums.length];\n    foreach(i, n; nums)\n    {\n  \
    \      long sum = 0;\n        foreach(c; to!string(n))\n        {\n          \
    \  sum += c.to!long - '0'.to!long;\n        }\n        sums[i] = sum;\n    }\n\
    \    auto sorted = sort(zip(sums, nums));\n    return sorted.map!(a => a[1]).array;\n\
    }\nunittest\n{\n    alias candidate = order_by_points;\n\n    assert(candidate([1L,\
    \ 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L,\
    \ 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) ==\
    \ [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphr71wqf6.d(20): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    /tmp/tmphr71wqf6.d(26): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphr71wqf6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163134
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    /*\n        1.\
    \ Create a tuple of the number and the sum of its digits\n        2. Sort the\
    \ tuple by the sum of the digits\n        3. Return the original number from the\
    \ tuple\n    */\n    return nums.map!(n => tuple(n, n.sumDigits()))\n        \
    \        .sort!((a, b) => a[1] < b[1])\n                .map!(t => t[0]);\n}\n\
    unittest\n{\n    alias candidate = order_by_points;\n\n    assert(candidate([1L,\
    \ 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L,\
    \ 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) ==\
    \ [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpg3jxsgpt.d(20): Error: no property `map` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg3jxsgpt.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163134
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    long[] result\
    \ = new long[nums.length];\n    long[] sums = new long[nums.length];\n    foreach(i,\
    \ v; nums)\n    {\n        sums[i] = v.sumDigits();\n    }\n    auto sorted =\
    \ sort(sums);\n    foreach(i, v; sorted)\n    {\n        result[i] = nums[v.index];\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = order_by_points;\n\
    \n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpk99jp52e.d(19): Error: no property `sumDigits` for type `long`

    /tmp/tmpk99jp52e.d(21): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk99jp52e.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163134
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    return nums.sort!((a,\
    \ b) => sumDigits(a) < sumDigits(b));\n}\nunittest\n{\n    alias candidate = order_by_points;\n\
    \n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp97b7ngqn.d(15): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp97b7ngqn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163133
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    auto result =\
    \ nums.dup;\n    result.sort!((a, b) => sumDigits(a) < sumDigits(b) || (sumDigits(a)\
    \ == sumDigits(b) && a < b));\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = order_by_points;\n\n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L,\
    \ -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L,\
    \ 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L,\
    \ 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -11L, -32L, 43L, 54L, -98L, 2L, -3L]) ==\
    \ [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L,\
    \ 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L,\
    \ -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfj6jvx9s.d(16): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfj6jvx9s.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163133
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    auto result =\
    \ nums.dup;\n    result.sort!((a, b) => sumDigits(a) < sumDigits(b));\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = order_by_points;\n\n    assert(candidate([1L,\
    \ 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L,\
    \ 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) ==\
    \ [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphqag3_0s.d(16): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphqag3_0s.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163133
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    long[] result\
    \ = new long[nums.length];\n    long[] sums = new long[nums.length];\n    for\
    \ (int i = 0; i < nums.length; i++)\n    {\n        sums[i] = nums[i];\n     \
    \   while (sums[i] > 0)\n        {\n            sums[i] = sums[i] - sums[i] %\
    \ 10;\n            sums[i] = sums[i] / 10;\n        }\n    }\n    for (int i =\
    \ 0; i < nums.length; i++)\n    {\n        for (int j = 0; j < nums.length; j++)\n\
    \        {\n            if (sums[i] < sums[j])\n            {\n              \
    \  long temp = sums[i];\n                sums[i] = sums[j];\n                sums[j]\
    \ = temp;\n                temp = nums[i];\n                nums[i] = nums[j];\n\
    \                nums[j] = temp;\n            }\n        }\n    }\n    return\
    \ nums;\n}\nunittest\n{\n    alias candidate = order_by_points;\n\n    assert(candidate([1L,\
    \ 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L,\
    \ 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) ==\
    \ [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpw_pdtq82.d(47): unittest failure

    ----------------

    ??:? _d_unittestp [0x428a8d]

    ??:? void tmpw_pdtq82.__unittest_L43_C1() [0x428281]

    ??:? void tmpw_pdtq82.__modtest() [0x42880c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42cb6b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b9fe]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430c89]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x431138]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430c15]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b9d5]

    ??:? runModuleUnitTests [0x42c941]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428f50]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163134
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    // Type alias\
    \ for a tuple of long and int\n    alias Tuple = Tuple!(long, int);\n    // Create\
    \ a tuple array to hold the numbers and their indices\n    Tuple[] tuples = new\
    \ Tuple[nums.length];\n    // Fill the tuple array with the numbers and their\
    \ indices\n    foreach(i, num; nums)\n    {\n        tuples[i] = tuple(num, i);\n\
    \    }\n    // Sort the tuple array based on the sum of the digits of the numbers\n\
    \    // and their indices\n    sort!((a, b) => a[0].sumDigits() < b[0].sumDigits()\
    \ ||\n                 (a[0].sumDigits() == b[0].sumDigits() && a[1] < b[1]))(tuples);\n\
    \    // Create a long array to hold the sorted numbers\n    long[] sorted = new\
    \ long[nums.length];\n    // Fill the sorted array with the sorted numbers\n \
    \   foreach(i, t; tuples)\n    {\n        sorted[i] = t[0];\n    }\n    // Return\
    \ the sorted array\n    return sorted;\n}\n/*\n    This solution is based on the\
    \ following:\n    1. Create a tuple array to hold the numbers and their indices.\n\
    \    2. Fill the tuple array with the numbers and their indices.\n    3. Sort\
    \ the tuple array based on the sum of the digits of the numbers\n       and their\
    \ indices.\n    4. Create a long array to hold the sorted numbers.\n    5. Fill\
    \ the sorted array with the sorted numbers.\n    6. Return the sorted array.\n\
    */\nunittest\n{\n    alias candidate = order_by_points;\n\n    assert(candidate([1L,\
    \ 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L,\
    \ 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) ==\
    \ [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplvgxssnh.d(16): Error: alias `Tuple` recursive alias declaration

    /tmp/tmplvgxssnh.d(26): Error: template instance `sort!((a, b) => a[0].sumDigits()
    < b[0].sumDigits() || a[0].sumDigits() == b[0].sumDigits() && (a[1] < b[1]))`
    template `sort` is not defined, did you mean sqrt?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplvgxssnh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163134
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    auto nums_with_points\
    \ = zip(nums, map!(sum_digits)(nums));\n    nums_with_points.sort!((a, b) => a[1]\
    \ < b[1] || (a[1] == b[1] && a[0] < b[0]));\n    return map!(a => a[0])(nums_with_points);\n\
    }\nunittest\n{\n    alias candidate = order_by_points;\n\n    assert(candidate([1L,\
    \ 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L,\
    \ 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) ==\
    \ [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprhvyrp34.d(15): Error: undefined identifier `zip`

    /tmp/tmprhvyrp34.d(17): Error: template instance `map!((a) => a[0])` template
    `map` is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprhvyrp34.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163134
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    long[] result\
    \ = new long[nums.length];\n    long[] sums = new long[nums.length];\n    long[]\
    \ indexes = new long[nums.length];\n    foreach(i, n; nums)\n    {\n        indexes[i]\
    \ = i;\n        sums[i] = sumDigits(n);\n    }\n    sort!((a, b) => a > b)(sums,\
    \ indexes);\n    foreach(i, n; indexes)\n    {\n        result[i] = nums[n];\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = order_by_points;\n\
    \n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprzgpm3ez.d(21): Error: undefined identifier `sumDigits`

    /tmp/tmprzgpm3ez.d(23): Error: template instance `sort!((a, b) => a > b)` template
    `sort` is not defined, did you mean sqrt?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprzgpm3ez.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163134
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    return nums.sort!((a,\
    \ b) => sumDigits(a) < sumDigits(b));\n}\nunittest\n{\n    alias candidate = order_by_points;\n\
    \n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp97b7ngqn.d(15): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp97b7ngqn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163133
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    long[] result\
    \ = new long[nums.length];\n    long[] sums = new long[nums.length];\n    long[]\
    \ indexes = new long[nums.length];\n    for (int i = 0; i < nums.length; i++)\n\
    \    {\n        sums[i] = sumDigits(nums[i]);\n        indexes[i] = i;\n    }\n\
    \    sort(sums, indexes);\n    for (int i = 0; i < nums.length; i++)\n    {\n\
    \        result[i] = nums[indexes[i]];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L,\
    \ -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L,\
    \ 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L,\
    \ 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzd0q75zn.d(20): Error: undefined identifier `sumDigits`

    /tmp/tmpzd0q75zn.d(23): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzd0q75zn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163134
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    long[] result\
    \ = new long[nums.length];\n    long[] sums = new long[nums.length];\n    long[]\
    \ indices = new long[nums.length];\n    foreach(i, n; nums)\n    {\n        indices[i]\
    \ = i;\n        sums[i] = sumDigits(n);\n    }\n    sort!(\"a < b\", indices,\
    \ sums);\n    foreach(i, n; indices)\n    {\n        result[i] = nums[n];\n  \
    \  }\n    return result;\n}\nunittest\n{\n    alias candidate = order_by_points;\n\
    \n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5ebd0bz4.d(21): Error: undefined identifier `sumDigits`

    /tmp/tmp5ebd0bz4.d(23): Error: template instance `sort!("a < b", indices, sums)`
    template `sort` is not defined, did you mean sqrt?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5ebd0bz4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163134
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    auto result =\
    \ nums.dup;\n    auto sums = new long[nums.length];\n    foreach (i, n; nums)\n\
    \    {\n        auto sum = 0L;\n        foreach (c; to!string(n))\n        {\n\
    \            sum += c.to!long - '0'.to!long;\n        }\n        sums[i] = sum;\n\
    \    }\n    sort!((a, b) => a < b)(sums, result);\n    return result;\n}\nunittest\n\
    {\n    alias candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L,\
    \ -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L,\
    \ 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L,\
    \ 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplrpinebu.d(20): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    /tmp/tmplrpinebu.d(26): Error: template instance `sort!((a, b) => a < b)` template
    `sort` is not defined, did you mean sqrt?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplrpinebu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163134
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    auto result =\
    \ nums.dup;\n    result.sort!((a, b) => sumDigits(a) < sumDigits(b));\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = order_by_points;\n\n    assert(candidate([1L,\
    \ 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L,\
    \ 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) ==\
    \ [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphqag3_0s.d(16): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphqag3_0s.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163133
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    auto sum = (long\
    \ n) => \n    {\n        long sum = 0;\n        while (n != 0) \n        {\n \
    \           sum += n % 10;\n            n /= 10;\n        }\n        return sum;\n\
    \    };\n    return nums.sort!((a, b) => sum(a) < sum(b) || (sum(a) == sum(b)\
    \ && a < b));\n}\nunittest\n{\n    alias candidate = order_by_points;\n\n    assert(candidate([1L,\
    \ 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L,\
    \ 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) ==\
    \ [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2kvpyy64.d(25): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2kvpyy64.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163134
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    long[] result\
    \ = new long[nums.length];\n    long[] sums = new long[nums.length];\n    long[]\
    \ index = new long[nums.length];\n    for (int i = 0; i < nums.length; i++)\n\
    \    {\n        sums[i] = sum_of_digits(nums[i]);\n        index[i] = i;\n   \
    \ }\n    sort(sums, index);\n    for (int i = 0; i < nums.length; i++)\n    {\n\
    \        result[i] = nums[index[i]];\n    }\n    return result;\n}\nlong sum_of_digits(long\
    \ n)\n{\n    long sum = 0;\n    while (n > 0)\n    {\n        sum += n % 10;\n\
    \        n /= 10;\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = order_by_points;\n\n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L,\
    \ -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L,\
    \ 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L,\
    \ 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -11L, -32L, 43L, 54L, -98L, 2L, -3L]) ==\
    \ [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L,\
    \ 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L,\
    \ -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9_1q77l6.d(23): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9_1q77l6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163134
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    return nums.sort!((a,\
    \ b) => sumDigits(a) < sumDigits(b));\n}\nunittest\n{\n    alias candidate = order_by_points;\n\
    \n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp97b7ngqn.d(15): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp97b7ngqn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163133
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    long[] result\
    \ = new long[nums.length];\n    int[] sums = new int[nums.length];\n    for (int\
    \ i = 0; i < nums.length; i++)\n    {\n        sums[i] = sumDigits(nums[i]);\n\
    \    }\n    int[] sortedSums = sums.dup;\n    sort(sortedSums);\n    for (int\
    \ i = 0; i < nums.length; i++)\n    {\n        int index = sums.indexOf(sortedSums[i]);\n\
    \        result[i] = nums[index];\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L,\
    \ -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L,\
    \ 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L,\
    \ 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpz3zhaoc1.d(19): Error: undefined identifier `sumDigits`

    /tmp/tmpz3zhaoc1.d(22): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    /tmp/tmpz3zhaoc1.d(25): Error: no property `indexOf` for type `int[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz3zhaoc1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163134
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    return nums.sort!((a,\
    \ b) => sumDigits(a) < sumDigits(b));\n}\nunittest\n{\n    alias candidate = order_by_points;\n\
    \n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp97b7ngqn.d(15): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp97b7ngqn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163133
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    return nums.sort!((a,\
    \ b) => sumDigits(a) < sumDigits(b));\n}\nunittest\n{\n    alias candidate = order_by_points;\n\
    \n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp97b7ngqn.d(15): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp97b7ngqn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163133
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    return nums.sort!((a,\
    \ b) => sumDigits(a) < sumDigits(b) || (sumDigits(a) == sumDigits(b) && a < b));\n\
    }\nunittest\n{\n    alias candidate = order_by_points;\n\n    assert(candidate([1L,\
    \ 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L,\
    \ 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) ==\
    \ [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfuems9_0.d(15): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfuems9_0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163133
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    long[] result\
    \ = nums.dup;\n    sort!((a, b) => sumDigits(a) < sumDigits(b))(result);\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = order_by_points;\n\n \
    \   assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpg3b03c2n.d(16): Error: template instance `sort!((a, b) => sumDigits(a)
    < sumDigits(b))` template `sort` is not defined, did you mean sqrt?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg3b03c2n.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163134
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    long[] result\
    \ = new long[nums.length];\n    long[] sums = new long[nums.length];\n    long[]\
    \ indices = new long[nums.length];\n    for (long i = 0; i < nums.length; i++)\n\
    \    {\n        indices[i] = i;\n        sums[i] = 0;\n        long n = nums[i];\n\
    \        while (n > 0)\n        {\n            sums[i] += n % 10;\n          \
    \  n /= 10;\n        }\n    }\n    sort(sums, indices);\n    for (long i = 0;\
    \ i < nums.length; i++)\n    {\n        result[i] = nums[indices[i]];\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = order_by_points;\n\n\
    \    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_muymeq3.d(29): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_muymeq3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163134
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    long[] result\
    \ = new long[nums.length];\n    long[] sum = new long[nums.length];\n    long[]\
    \ index = new long[nums.length];\n    foreach(i, item; nums)\n    {\n        index[i]\
    \ = i;\n        sum[i] = 0;\n        while(item > 0)\n        {\n            sum[i]\
    \ += item % 10;\n            item /= 10;\n        }\n    }\n    sort(sum, index);\n\
    \    foreach(i, item; index)\n    {\n        result[i] = nums[item];\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = order_by_points;\n\n\
    \    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpcp7zi7m8.d(28): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcp7zi7m8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163134
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    /*\n        1.\
    \ Create a struct to hold the index and the sum of the digits\n        2. Create\
    \ a new array of the structs\n        3. Sort the array\n        4. Create a new\
    \ array of the sorted indices\n        5. Return the new array\n    */\n    struct\
    \ IndexSum\n    {\n        long index;\n        long sum;\n    }\n    IndexSum[]\
    \ indexSums;\n    foreach(i, num; nums)\n    {\n        indexSums ~= IndexSum(i,\
    \ sumDigits(num));\n    }\n    indexSums.sort!((a, b) => a.sum < b.sum);\n   \
    \ long[] sortedIndices;\n    foreach(indexSum; indexSums)\n    {\n        sortedIndices\
    \ ~= indexSum.index;\n    }\n    return sortedIndices;\n}\nunittest\n{\n    alias\
    \ candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L, -11L, -12L])\
    \ == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L, 463L, 145L,\
    \ 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L,\
    \ 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -11L, -32L, 43L, 54L, -98L, 2L, -3L]) ==\
    \ [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L,\
    \ 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L,\
    \ -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4z432ogq.d(30): Error: undefined identifier `sumDigits`

    /tmp/tmp4z432ogq.d(32): Error: no property `sort` for type `IndexSum[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4z432ogq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163134
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    long[] result\
    \ = new long[nums.length];\n    long[] sums = new long[nums.length];\n    for\
    \ (int i = 0; i < nums.length; i++)\n    {\n        long sum = 0;\n        long\
    \ num = nums[i];\n        while (num > 0)\n        {\n            sum += num %\
    \ 10;\n            num /= 10;\n        }\n        sums[i] = sum;\n    }\n    auto\
    \ sorted = zip(sums, nums).sort!((a, b) => a[0] < b[0]);\n    foreach (i, item;\
    \ sorted)\n    {\n        result[i] = item[1];\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = order_by_points;\n\n    assert(candidate([1L,\
    \ 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L,\
    \ 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) ==\
    \ [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppltuel6k.d(28): Error: undefined identifier `zip`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppltuel6k.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163134
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    auto points =\
    \ nums.map!((x) => x.to!string.map!((y) => y.to!long).sum).array;\n    return\
    \ nums.zip(points).sort!((a, b) => a[1] > b[1] || (a[1] == b[1] && a[0] > b[0])).map!((x)\
    \ => x[0]).array;\n}\nunittest\n{\n    alias candidate = order_by_points;\n\n\
    \    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfnlv7i_3.d(15): Error: no property `map` for type `long[]`

    /tmp/tmpfnlv7i_3.d(16): Error: no property `zip` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfnlv7i_3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163134
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    auto sum = (long\
    \ n) => n.to!string.map!(a => a.to!long).sum;\n    return nums.sort!((a, b) =>\
    \ sum(a) < sum(b) || (sum(a) == sum(b) && a < b));\n}\nunittest\n{\n    alias\
    \ candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L, -11L, -12L])\
    \ == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L, 463L, 145L,\
    \ 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L,\
    \ 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -11L, -32L, 43L, 54L, -98L, 2L, -3L]) ==\
    \ [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L,\
    \ 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L,\
    \ -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpoy49km1f.d(15): Error: no property `to` for type `long`

    /tmp/tmpoy49km1f.d(16): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoy49km1f.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163133
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    return nums.sort!((a,\
    \ b) => sumDigits(a) < sumDigits(b) || (sumDigits(a) == sumDigits(b) && a < b));\n\
    }\nunittest\n{\n    alias candidate = order_by_points;\n\n    assert(candidate([1L,\
    \ 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L,\
    \ 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) ==\
    \ [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfuems9_0.d(15): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfuems9_0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163133
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    auto sum = (long\
    \ x) => x.to!string.map!(a => a.to!long).sum;\n    auto res = nums.dup;\n    res.sort!((a,\
    \ b) => (sum(a) == sum(b)) ? (a < b) : (sum(a) < sum(b)));\n    return res;\n\
    }\nunittest\n{\n    alias candidate = order_by_points;\n\n    assert(candidate([1L,\
    \ 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L,\
    \ 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) ==\
    \ [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiqho84w0.d(15): Error: no property `to` for type `long`

    /tmp/tmpiqho84w0.d(17): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiqho84w0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163134
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    long[] result\
    \ = new long[nums.length];\n    long[] sum = new long[nums.length];\n    for (int\
    \ i = 0; i < nums.length; i++)\n    {\n        long temp = nums[i];\n        while\
    \ (temp > 0)\n        {\n            sum[i] += temp % 10;\n            temp /=\
    \ 10;\n        }\n    }\n    long[] temp = sum.dup;\n    temp.sort;\n    for (int\
    \ i = 0; i < nums.length; i++)\n    {\n        for (int j = 0; j < nums.length;\
    \ j++)\n        {\n            if (temp[i] == sum[j])\n            {\n       \
    \         result[i] = nums[j];\n                sum[j] = -1;\n               \
    \ break;\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L,\
    \ -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L,\
    \ 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L,\
    \ 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpth811jgj.d(27): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpth811jgj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163133
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    auto s = nums.map!(a\
    \ => tuple(a, a.sumDigits())).sort!((a, b) => a[1] < b[1] || a[1] == b[1] && a[0]\
    \ < b[0]);\n    return s.map!(a => a[0]).array;\n}\nunittest\n{\n    alias candidate\
    \ = order_by_points;\n\n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L,\
    \ -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L,\
    \ 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L,\
    \ 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -11L, -32L, 43L, 54L, -98L, 2L, -3L]) ==\
    \ [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L,\
    \ 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L,\
    \ -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpoxv1u9r3.d(15): Error: no property `map` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoxv1u9r3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163134
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    return nums.sort!((a,\
    \ b) => (sumDigits(a) == sumDigits(b)) ? a < b : sumDigits(a) < sumDigits(b));\n\
    }\nunittest\n{\n    alias candidate = order_by_points;\n\n    assert(candidate([1L,\
    \ 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L,\
    \ 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) ==\
    \ [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzi59h2x9.d(15): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzi59h2x9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163134
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    long[] result\
    \ = new long[nums.length];\n    long[] sums = new long[nums.length];\n    long[]\
    \ indexes = new long[nums.length];\n    for (int i = 0; i < nums.length; i++)\n\
    \    {\n        sums[i] = nums[i] % 10 + nums[i] / 10;\n        indexes[i] = i;\n\
    \    }\n    sort(sums, indexes);\n    for (int i = 0; i < nums.length; i++)\n\
    \    {\n        result[i] = nums[indexes[i]];\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = order_by_points;\n\n    assert(candidate([1L,\
    \ 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L,\
    \ 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) ==\
    \ [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkgo1w9zj.d(23): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkgo1w9zj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163134
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    auto result =\
    \ nums.dup;\n    result.sort!((a, b) => sumDigits(a) < sumDigits(b));\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = order_by_points;\n\n    assert(candidate([1L,\
    \ 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L,\
    \ 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) ==\
    \ [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphqag3_0s.d(16): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphqag3_0s.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163133
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    long[] result\
    \ = new long[nums.length];\n    long[] sum = new long[nums.length];\n    for (int\
    \ i = 0; i < nums.length; i++)\n    {\n        long temp = nums[i];\n        while\
    \ (temp > 0)\n        {\n            sum[i] += temp % 10;\n            temp /=\
    \ 10;\n        }\n    }\n    long[] temp = sum.dup;\n    temp.sort;\n    for (int\
    \ i = 0; i < nums.length; i++)\n    {\n        for (int j = 0; j < nums.length;\
    \ j++)\n        {\n            if (temp[i] == sum[j])\n            {\n       \
    \         result[i] = nums[j];\n                sum[j] = -1;\n               \
    \ break;\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L,\
    \ -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L,\
    \ 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L,\
    \ 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpth811jgj.d(27): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpth811jgj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163133
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    auto result =\
    \ nums.dup;\n    auto sums = new long[result.length];\n    foreach (i, n; result)\n\
    \    {\n        sums[i] = sumDigits(n);\n    }\n    sort!((a, b) => a < b)(result,\
    \ sums);\n    return result;\n}\nunittest\n{\n    alias candidate = order_by_points;\n\
    \n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6eia6l_0.d(19): Error: undefined identifier `sumDigits`

    /tmp/tmp6eia6l_0.d(21): Error: template instance `sort!((a, b) => a < b)` template
    `sort` is not defined, did you mean sqrt?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6eia6l_0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163134
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    long[] result\
    \ = new long[nums.length];\n    long[] sums = new long[nums.length];\n    long[]\
    \ indices = new long[nums.length];\n    foreach(i, n; nums)\n    {\n        indices[i]\
    \ = i;\n        sums[i] = n.sumDigits();\n    }\n    sort!((a, b) => a > b)(sums,\
    \ indices);\n    foreach(i, n; indices)\n    {\n        result[i] = nums[n];\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = order_by_points;\n\
    \n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpuxhwkkvz.d(21): Error: no property `sumDigits` for type `long`

    /tmp/tmpuxhwkkvz.d(23): Error: template instance `sort!((a, b) => a > b)` template
    `sort` is not defined, did you mean sqrt?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuxhwkkvz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163134
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    long[] result\
    \ = new long[nums.length];\n    int[] sum = new int[nums.length];\n    for (int\
    \ i = 0; i < nums.length; i++)\n    {\n        int temp = nums[i];\n        while\
    \ (temp != 0)\n        {\n            sum[i] += temp % 10;\n            temp /=\
    \ 10;\n        }\n    }\n    int[] sorted = sum.dup;\n    sort(sorted);\n    for\
    \ (int i = 0; i < nums.length; i++)\n    {\n        for (int j = 0; j < nums.length;\
    \ j++)\n        {\n            if (sum[j] == sorted[i])\n            {\n     \
    \           result[i] = nums[j];\n                sum[j] = -1;\n             \
    \   break;\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L,\
    \ -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L,\
    \ 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L,\
    \ 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmps0y4om12.d(19): Error: cannot implicitly convert expression `nums[cast(ulong)i]`
    of type `long` to `int`

    /tmp/tmps0y4om12.d(27): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmps0y4om12.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163134
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    auto result =\
    \ nums.dup;\n    auto sums = nums.map!(a => a.to!string.map!(a => a.to!long).sum).array;\n\
    \    sort!((a, b) => sums[a] < sums[b] || (sums[a] == sums[b] && a < b))(result);\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = order_by_points;\n\n\
    \    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjqw3en2m.d(16): Error: no property `map` for type `long[]`

    /tmp/tmpjqw3en2m.d(17): Error: template instance `sort!((a, b) => sums[a] < sums[b]
    || sums[a] == sums[b] && (a < b))` template `sort` is not defined, did you mean
    sqrt?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjqw3en2m.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163134
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    auto result =\
    \ nums.dup;\n    std.algorithm.sort!((a, b) => sumDigits(a) < sumDigits(b))(result);\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = order_by_points;\n\n\
    \    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpymwymqta.d(16): Error: undefined identifier `algorithm` in package
    `std`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpymwymqta.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163134
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    // your code here\n\
    \    long[] result = new long[nums.length];\n    long[] sums = new long[nums.length];\n\
    \    for (int i = 0; i < nums.length; i++)\n    {\n        long sum = 0;\n   \
    \     foreach (c; nums[i].to!string)\n        {\n            sum += c.to!long\
    \ - '0'.to!long;\n        }\n        sums[i] = sum;\n    }\n    auto sorted =\
    \ sort!((a, b) => a > b)(sums);\n    for (int i = 0; i < nums.length; i++)\n \
    \   {\n        foreach (j; 0 .. nums.length)\n        {\n            if (sums[j]\
    \ == sorted[i])\n            {\n                result[i] = nums[j];\n       \
    \         sums[j] = -1;\n                break;\n            }\n        }\n  \
    \  }\n    return result;\n}\nunittest\n{\n    alias candidate = order_by_points;\n\
    \n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpy_84epqh.d(21): Error: no property `to` for type `long`

    /tmp/tmpy_84epqh.d(27): Error: template instance `sort!((a, b) => a > b)` template
    `sort` is not defined, did you mean sqrt?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy_84epqh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163134
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    return nums.sort!((a,\
    \ b) => sumDigits(a) < sumDigits(b));\n}\nunittest\n{\n    alias candidate = order_by_points;\n\
    \n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp97b7ngqn.d(15): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp97b7ngqn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163133
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    long[] result\
    \ = new long[nums.length];\n    long[] sums = new long[nums.length];\n    long[]\
    \ indexes = new long[nums.length];\n    for (int i = 0; i < nums.length; i++)\n\
    \    {\n        sums[i] = sumDigits(nums[i]);\n        indexes[i] = i;\n    }\n\
    \    sort!(\"a < b\")(sums, indexes);\n    for (int i = 0; i < nums.length; i++)\n\
    \    {\n        result[i] = nums[indexes[i]];\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = order_by_points;\n\n    assert(candidate([1L,\
    \ 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L,\
    \ 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) ==\
    \ [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp00mc8wsq.d(20): Error: undefined identifier `sumDigits`

    /tmp/tmp00mc8wsq.d(23): Error: template instance `sort!"a < b"` template `sort`
    is not defined, did you mean sqrt?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp00mc8wsq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163134
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    long[] result\
    \ = new long[nums.length];\n    long[] nums_copy = nums.dup;\n    long[] sums\
    \ = new long[nums.length];\n    long[] indices = new long[nums.length];\n    long[]\
    \ indices_copy = new long[nums.length];\n    int i = 0;\n    foreach(n; nums)\n\
    \    {\n        indices[i] = i;\n        indices_copy[i] = i;\n        i++;\n\
    \    }\n    i = 0;\n    foreach(n; nums)\n    {\n        long sum = 0;\n     \
    \   foreach(d; n.to!string)\n        {\n            sum += d.to!long - 48;\n \
    \       }\n        sums[i] = sum;\n        i++;\n    }\n    sort!(\"a < b\", \"\
    a\", \"b\")(sums, indices);\n    i = 0;\n    foreach(n; nums)\n    {\n       \
    \ result[indices[i]] = nums_copy[indices_copy[i]];\n        i++;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = order_by_points;\n\n    assert(candidate([1L,\
    \ 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L,\
    \ 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) ==\
    \ [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_y5jgxbz.d(31): Error: no property `to` for type `long`

    /tmp/tmp_y5jgxbz.d(38): Error: template instance `sort!("a < b", "a", "b")` template
    `sort` is not defined, did you mean sqrt?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_y5jgxbz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163134
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    auto result =\
    \ nums.dup;\n    result.sort!((a, b) => sumDigits(a) < sumDigits(b) || (sumDigits(a)\
    \ == sumDigits(b) && a < b));\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = order_by_points;\n\n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L,\
    \ -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L,\
    \ 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L,\
    \ 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -11L, -32L, 43L, 54L, -98L, 2L, -3L]) ==\
    \ [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L,\
    \ 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L,\
    \ -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfj6jvx9s.d(16): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfj6jvx9s.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163133
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    long[] result\
    \ = new long[nums.length];\n    long[] sums = new long[nums.length];\n    long[]\
    \ indexes = new long[nums.length];\n    for (int i = 0; i < nums.length; i++)\n\
    \    {\n        sums[i] = sumDigits(nums[i]);\n        indexes[i] = i;\n    }\n\
    \    sort(sums, indexes);\n    for (int i = 0; i < nums.length; i++)\n    {\n\
    \        result[i] = nums[indexes[i]];\n    }\n    return result;\n}\nlong sumDigits(long\
    \ n)\n{\n    long result = 0;\n    while (n > 0)\n    {\n        result += n %\
    \ 10;\n        n /= 10;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L, -11L, -12L])\
    \ == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L, 463L, 145L,\
    \ 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L,\
    \ 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -11L, -32L, 43L, 54L, -98L, 2L, -3L]) ==\
    \ [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L,\
    \ 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L,\
    \ -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpk7djkmwz.d(23): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk7djkmwz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163134
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    long[] result\
    \ = new long[nums.length];\n    long[] sums = new long[nums.length];\n    for\
    \ (int i = 0; i < nums.length; i++)\n    {\n        long sum = 0;\n        long\
    \ num = nums[i];\n        while (num > 0)\n        {\n            sum += num %\
    \ 10;\n            num /= 10;\n        }\n        sums[i] = sum;\n    }\n    for\
    \ (int i = 0; i < nums.length; i++)\n    {\n        long min = sums[i];\n    \
    \    int minIndex = i;\n        for (int j = i + 1; j < nums.length; j++)\n  \
    \      {\n            if (sums[j] < min)\n            {\n                min =\
    \ sums[j];\n                minIndex = j;\n            }\n        }\n        sums[minIndex]\
    \ = sums[i];\n        sums[i] = min;\n        result[i] = nums[minIndex];\n  \
    \  }\n    return result;\n}\nunittest\n{\n    alias candidate = order_by_points;\n\
    \n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp30dlte7u.d(50): unittest failure

    ----------------

    ??:? _d_unittestp [0x428995]

    ??:? void tmp30dlte7u.__unittest_L46_C1() [0x42818d]

    ??:? void tmp30dlte7u.__modtest() [0x428718]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ca73]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b906]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430b91]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x431040]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430b1d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b8dd]

    ??:? runModuleUnitTests [0x42c849]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428e58]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163134
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    long[] result\
    \ = new long[nums.length];\n    long[] sums = new long[nums.length];\n    long[]\
    \ indexes = new long[nums.length];\n    for (int i = 0; i < nums.length; i++)\n\
    \    {\n        sums[i] = sumDigits(nums[i]);\n        indexes[i] = i;\n    }\n\
    \    sort(sums, indexes);\n    for (int i = 0; i < nums.length; i++)\n    {\n\
    \        result[i] = nums[indexes[i]];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L,\
    \ -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L,\
    \ 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L,\
    \ 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzd0q75zn.d(20): Error: undefined identifier `sumDigits`

    /tmp/tmpzd0q75zn.d(23): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzd0q75zn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163134
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    long[] ret = new\
    \ long[nums.length];\n    int[] sums = new int[nums.length];\n    for (int i =\
    \ 0; i < nums.length; i++)\n    {\n        sums[i] = sumDigits(nums[i]);\n   \
    \ }\n    int[] sorted = sort(sums);\n    for (int i = 0; i < nums.length; i++)\n\
    \    {\n        ret[i] = nums[sorted[i]];\n    }\n    return ret;\n}\nunittest\n\
    {\n    alias candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L,\
    \ -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L,\
    \ 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L,\
    \ 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpse9h_33q.d(19): Error: undefined identifier `sumDigits`

    /tmp/tmpse9h_33q.d(21): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpse9h_33q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163134
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    auto result =\
    \ nums.dup;\n    result.sort!((a, b) => sumDigits(a) < sumDigits(b));\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = order_by_points;\n\n    assert(candidate([1L,\
    \ 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L,\
    \ 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) ==\
    \ [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphqag3_0s.d(16): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphqag3_0s.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163133
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    long[] result\
    \ = new long[nums.length];\n    long[] sums = new long[nums.length];\n    foreach(i,\
    \ v; nums)\n    {\n        sums[i] = sumDigits(v);\n    }\n    sort(sums);\n \
    \   foreach(i, v; sums)\n    {\n        result[i] = nums[v];\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = order_by_points;\n\n    assert(candidate([1L,\
    \ 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L,\
    \ 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) ==\
    \ [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp885onaik.d(19): Error: undefined identifier `sumDigits`

    /tmp/tmp885onaik.d(21): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp885onaik.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163134
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    auto nums_with_points\
    \ = nums.map!(a => tuple(a, a.to!string.map!(a => a.to!long).sum));\n    nums_with_points.sort!((a,\
    \ b) => a[1] < b[1] || (a[1] == b[1] && a[0] < b[0]));\n    return nums_with_points.map!(a\
    \ => a[0]).array;\n}\nunittest\n{\n    alias candidate = order_by_points;\n\n\
    \    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp11x70im3.d(15): Error: no property `map` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp11x70im3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163134
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    auto nums_with_points\
    \ = zip(nums, map!(n => n.sumOfDigits())(nums));\n    return nums_with_points.sort!((a,\
    \ b) => a[1] < b[1] || (a[1] == b[1] && a[0] < b[0])).map!(a => a[0]).array;\n\
    }\nunittest\n{\n    alias candidate = order_by_points;\n\n    assert(candidate([1L,\
    \ 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L,\
    \ 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) ==\
    \ [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprgxza3v7.d(15): Error: undefined identifier `zip`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprgxza3v7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163134
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    auto result =\
    \ nums.dup;\n    result.sort!((a, b) => sumDigits(a) < sumDigits(b));\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = order_by_points;\n\n    assert(candidate([1L,\
    \ 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L,\
    \ 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) ==\
    \ [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphqag3_0s.d(16): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphqag3_0s.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163133
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    long[] result\
    \ = new long[nums.length];\n    long[] sum = new long[nums.length];\n    long[]\
    \ index = new long[nums.length];\n    for (int i = 0; i < nums.length; i++)\n\
    \    {\n        index[i] = i;\n        sum[i] = 0;\n        long n = nums[i];\n\
    \        while (n != 0)\n        {\n            sum[i] += n % 10;\n          \
    \  n /= 10;\n        }\n    }\n    sort(sum, index);\n    for (int i = 0; i <\
    \ nums.length; i++)\n    {\n        result[i] = nums[index[i]];\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = order_by_points;\n\n    assert(candidate([1L,\
    \ 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L,\
    \ 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) ==\
    \ [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptdf44mpm.d(29): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptdf44mpm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163133
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    auto result =\
    \ nums.dup;\n    result.sort!((a, b) => sumDigits(a) < sumDigits(b));\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = order_by_points;\n\n    assert(candidate([1L,\
    \ 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L,\
    \ 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) ==\
    \ [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphqag3_0s.d(16): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphqag3_0s.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163133
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    auto result =\
    \ nums.dup;\n    result.sort!((a, b) => sumDigits(a) < sumDigits(b));\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = order_by_points;\n\n    assert(candidate([1L,\
    \ 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L,\
    \ 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) ==\
    \ [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphqag3_0s.d(16): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphqag3_0s.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163133
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    long[] result\
    \ = new long[nums.length];\n    long[] sum = new long[nums.length];\n    long[]\
    \ index = new long[nums.length];\n    for (int i = 0; i < nums.length; i++)\n\
    \    {\n        index[i] = i;\n        sum[i] = 0;\n        long num = nums[i];\n\
    \        while (num > 0)\n        {\n            sum[i] += num % 10;\n       \
    \     num /= 10;\n        }\n    }\n    sort(sum, index);\n    for (int i = 0;\
    \ i < nums.length; i++)\n    {\n        result[i] = nums[index[i]];\n    }\n \
    \   return result;\n}\nunittest\n{\n    alias candidate = order_by_points;\n\n\
    \    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpw4ddmzgr.d(29): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw4ddmzgr.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163134
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    return nums.sort!((a,\
    \ b) => sumDigits(a) < sumDigits(b) || (sumDigits(a) == sumDigits(b) && a < b));\n\
    }\nunittest\n{\n    alias candidate = order_by_points;\n\n    assert(candidate([1L,\
    \ 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L,\
    \ 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) ==\
    \ [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfuems9_0.d(15): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfuems9_0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163133
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    return nums.sort!((a,\
    \ b) => sumDigits(a) < sumDigits(b));\n}\nunittest\n{\n    alias candidate = order_by_points;\n\
    \n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp97b7ngqn.d(15): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp97b7ngqn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163133
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    long[] result\
    \ = new long[nums.length];\n    long[] sums = new long[nums.length];\n    for\
    \ (int i = 0; i < nums.length; i++)\n    {\n        long sum = 0;\n        long\
    \ num = nums[i];\n        while (num > 0)\n        {\n            sum += num %\
    \ 10;\n            num /= 10;\n        }\n        sums[i] = sum;\n    }\n    int[]\
    \ indexes = new int[nums.length];\n    for (int i = 0; i < nums.length; i++)\n\
    \    {\n        indexes[i] = i;\n    }\n    indexes.sort!((a, b) => sums[a] <\
    \ sums[b] || (sums[a] == sums[b] && a < b));\n    for (int i = 0; i < nums.length;\
    \ i++)\n    {\n        result[i] = nums[indexes[i]];\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = order_by_points;\n\n    assert(candidate([1L,\
    \ 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L,\
    \ 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) ==\
    \ [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpz_fjjr3c.d(33): Error: no property `sort` for type `int[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz_fjjr3c.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163134
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    auto result =\
    \ nums.dup;\n    result.sort!((a, b) => sumDigits(a) < sumDigits(b));\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = order_by_points;\n\n    assert(candidate([1L,\
    \ 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L,\
    \ 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) ==\
    \ [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphqag3_0s.d(16): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphqag3_0s.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163133
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    long[] result\
    \ = new long[nums.length];\n    long[] sums = new long[nums.length];\n    long[]\
    \ indexes = new long[nums.length];\n    foreach(i, v; nums)\n    {\n        long\
    \ sum = 0;\n        foreach(c; v.to!string)\n        {\n            sum += c.to!long\
    \ - '0'.to!long;\n        }\n        sums[i] = sum;\n        indexes[i] = i;\n\
    \    }\n    sort!(\"a < b\", sums, indexes);\n    foreach(i, v; indexes)\n   \
    \ {\n        result[i] = nums[v];\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L,\
    \ -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L,\
    \ 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L,\
    \ 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_c2gf26d.d(21): Error: no property `to` for type `long`

    /tmp/tmp_c2gf26d.d(28): Error: template instance `sort!("a < b", sums, indexes)`
    template `sort` is not defined, did you mean sqrt?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_c2gf26d.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163134
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    auto result =\
    \ nums.dup;\n    result.sort!((a, b) => sumDigits(a) < sumDigits(b));\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = order_by_points;\n\n    assert(candidate([1L,\
    \ 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L,\
    \ 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) ==\
    \ [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphqag3_0s.d(16): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphqag3_0s.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163133
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    long[] result;\n\
    \    foreach(i; 0 .. nums.length)\n    {\n        long sum = 0;\n        foreach(j;\
    \ 0 .. nums[i].to!string.length)\n        {\n            sum += nums[i].to!string[j].to!long;\n\
    \        }\n        result ~= sum;\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L,\
    \ -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L,\
    \ 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L,\
    \ 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5sf1syyj.d(19): Error: no property `to` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5sf1syyj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163134
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    auto sum = (long\
    \ n) => n.digits.sum;\n    auto cmp = (long a, long b) => sum(a) < sum(b) ? -1\
    \ : sum(a) > sum(b) ? 1 : a < b ? -1 : a > b ? 1 : 0;\n    return nums.sort!cmp;\n\
    }\nunittest\n{\n    alias candidate = order_by_points;\n\n    assert(candidate([1L,\
    \ 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L,\
    \ 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) ==\
    \ [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzg_9ownf.d(15): Error: no property `digits` for type `long`

    /tmp/tmpzg_9ownf.d(17): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzg_9ownf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163134
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    return nums.sort!((a,\
    \ b) => sumDigits(a) < sumDigits(b));\n}\nunittest\n{\n    alias candidate = order_by_points;\n\
    \n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp97b7ngqn.d(15): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp97b7ngqn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163133
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    return nums.sort!((a,\
    \ b) => sumDigits(a) < sumDigits(b));\n}\nunittest\n{\n    alias candidate = order_by_points;\n\
    \n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp97b7ngqn.d(15): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp97b7ngqn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163133
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    long[] res = new\
    \ long[nums.length];\n    int[] sum = new int[nums.length];\n    for (int i =\
    \ 0; i < nums.length; i++)\n    {\n        int temp = nums[i];\n        while\
    \ (temp != 0)\n        {\n            sum[i] += temp % 10;\n            temp /=\
    \ 10;\n        }\n    }\n    int[] index = new int[nums.length];\n    for (int\
    \ i = 0; i < nums.length; i++)\n    {\n        index[i] = i;\n    }\n    sort(sum,\
    \ index);\n    for (int i = 0; i < nums.length; i++)\n    {\n        res[i] =\
    \ nums[index[i]];\n    }\n    return res;\n}\nunittest\n{\n    alias candidate\
    \ = order_by_points;\n\n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L,\
    \ -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L,\
    \ 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L,\
    \ 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -11L, -32L, 43L, 54L, -98L, 2L, -3L]) ==\
    \ [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L,\
    \ 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L,\
    \ -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7zwptpou.d(19): Error: cannot implicitly convert expression `nums[cast(ulong)i]`
    of type `long` to `int`

    /tmp/tmp7zwptpou.d(31): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7zwptpou.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163134
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    long[] result\
    \ = new long[nums.length];\n    long[] sums = new long[nums.length];\n    long[]\
    \ indexes = new long[nums.length];\n    for (int i = 0; i < nums.length; i++)\n\
    \    {\n        sums[i] = sum_digits(nums[i]);\n        indexes[i] = i;\n    }\n\
    \    sort(sums, indexes);\n    for (int i = 0; i < nums.length; i++)\n    {\n\
    \        result[i] = nums[indexes[i]];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L,\
    \ -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L,\
    \ 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L,\
    \ 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpalguzjbc.d(20): Error: undefined identifier `sum_digits`

    /tmp/tmpalguzjbc.d(23): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpalguzjbc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163134
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    long[] result\
    \ = new long[nums.length];\n    long[] sums = new long[nums.length];\n    for\
    \ (int i = 0; i < nums.length; i++)\n    {\n        long sum = 0;\n        long\
    \ n = nums[i];\n        while (n > 0)\n        {\n            sum += n % 10;\n\
    \            n /= 10;\n        }\n        sums[i] = sum;\n    }\n    auto p =\
    \ zip(nums, sums);\n    p.sort!((a, b) => a[1] < b[1]);\n    foreach (i, e; p)\n\
    \    {\n        result[i] = e[0];\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L,\
    \ -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L,\
    \ 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L,\
    \ 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0abuxyfl.d(28): Error: undefined identifier `zip`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0abuxyfl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163134
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    long[] result\
    \ = new long[nums.length];\n    long[] sums = new long[nums.length];\n    foreach(i,\
    \ e; nums)\n    {\n        long sum = 0;\n        foreach(c; to!string(e))\n \
    \       {\n            sum += c.to!long - '0'.to!long;\n        }\n        sums[i]\
    \ = sum;\n    }\n    auto sorted = sort(sums);\n    foreach(i, e; sorted)\n  \
    \  {\n        auto index = sums.indexOf(e);\n        result[i] = nums[index];\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = order_by_points;\n\
    \n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpd8kfoq9r.d(20): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    /tmp/tmpd8kfoq9r.d(26): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd8kfoq9r.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163134
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    long[] result\
    \ = new long[nums.length];\n    long[] sum = new long[nums.length];\n    for (int\
    \ i = 0; i < nums.length; i++)\n    {\n        long temp = nums[i];\n        while\
    \ (temp != 0)\n        {\n            sum[i] += temp % 10;\n            temp /=\
    \ 10;\n        }\n    }\n    long[] sorted = sum.dup;\n    sort(sorted);\n   \
    \ for (int i = 0; i < nums.length; i++)\n    {\n        for (int j = 0; j < nums.length;\
    \ j++)\n        {\n            if (sorted[i] == sum[j])\n            {\n     \
    \           result[i] = nums[j];\n                sum[j] = -1;\n             \
    \   break;\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L,\
    \ -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L,\
    \ 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L,\
    \ 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8ix5pj86.d(27): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8ix5pj86.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163134
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    auto nums_with_points\
    \ = zip(nums, map!((x) => sum(map!(to!int)(to!string(x))))(nums));\n    auto sorted_nums_with_points\
    \ = sort!((a, b) => a[1] < b[1] || (a[1] == b[1] && a[0] < b[0]))(nums_with_points);\n\
    \    return map!((x) => x[0])(sorted_nums_with_points);\n}\nunittest\n{\n    alias\
    \ candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L, -11L, -12L])\
    \ == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L, 463L, 145L,\
    \ 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L,\
    \ 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -11L, -32L, 43L, 54L, -98L, 2L, -3L]) ==\
    \ [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L,\
    \ 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L,\
    \ -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsvtqa4og.d(15): Error: undefined identifier `zip`

    /tmp/tmpsvtqa4og.d(16): Error: template instance `sort!((a, b) => a[1] < b[1]
    || a[1] == b[1] && (a[0] < b[0]))` template `sort` is not defined, did you mean
    sqrt?

    /tmp/tmpsvtqa4og.d(17): Error: template instance `map!((x) => x[0])` template
    `map` is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsvtqa4og.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163134
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    auto result =\
    \ nums.dup;\n    result.sort!((a, b) => sumDigits(a) < sumDigits(b));\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = order_by_points;\n\n    assert(candidate([1L,\
    \ 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L,\
    \ 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) ==\
    \ [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphqag3_0s.d(16): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphqag3_0s.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163133
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    long[] result\
    \ = new long[nums.length];\n    long[] sums = new long[nums.length];\n    long[]\
    \ indexes = new long[nums.length];\n    for (int i = 0; i < nums.length; i++)\n\
    \    {\n        sums[i] = nums[i] % 10 + nums[i] / 10;\n        indexes[i] = i;\n\
    \    }\n    sort(sums, indexes);\n    for (int i = 0; i < nums.length; i++)\n\
    \    {\n        result[i] = nums[indexes[i]];\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = order_by_points;\n\n    assert(candidate([1L,\
    \ 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L,\
    \ 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) ==\
    \ [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkgo1w9zj.d(23): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkgo1w9zj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163134
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    auto a = nums.map!(a\
    \ => tuple(a, a.digits.sum)).sort!((a, b) => a[1] < b[1]);\n    return a.map!(a\
    \ => a[0]).array;\n}\nunittest\n{\n    alias candidate = order_by_points;\n\n\
    \    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpugy35i91.d(15): Error: no property `map` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpugy35i91.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163134
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    long[] result\
    \ = new long[nums.length];\n    long[] sums = new long[nums.length];\n    long[]\
    \ indices = new long[nums.length];\n    for (int i = 0; i < nums.length; i++)\n\
    \    {\n        indices[i] = i;\n        sums[i] = 0;\n        long n = nums[i];\n\
    \        while (n > 0)\n        {\n            sums[i] += n % 10;\n          \
    \  n /= 10;\n        }\n    }\n    sort(sums, indices);\n    for (int i = 0; i\
    \ < nums.length; i++)\n    {\n        result[i] = nums[indices[i]];\n    }\n \
    \   return result;\n}\nunittest\n{\n    alias candidate = order_by_points;\n\n\
    \    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpq1x5x3h4.d(29): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpq1x5x3h4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163134
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    long[] result\
    \ = new long[nums.length];\n    long[] sums = new long[nums.length];\n    foreach(i,\
    \ v; nums)\n    {\n        sums[i] = sumDigits(v);\n    }\n    foreach(i, v; nums)\n\
    \    {\n        long min = sums[i];\n        long minIndex = i;\n        foreach(j,\
    \ v2; sums[i..$])\n        {\n            if(v2 < min)\n            {\n      \
    \          min = v2;\n                minIndex = j + i;\n            }\n     \
    \   }\n        result[i] = nums[minIndex];\n        sums[minIndex] = sums[i];\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = order_by_points;\n\
    \n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppw1leetp.d(19): Error: undefined identifier `sumDigits`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppw1leetp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163134
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    return nums.sort!((a,\
    \ b) => sumDigits(a) < sumDigits(b));\n}\nunittest\n{\n    alias candidate = order_by_points;\n\
    \n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp97b7ngqn.d(15): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp97b7ngqn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163133
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    long[] result;\n\
    \    long[] temp;\n    long sum = 0;\n    long[] sums;\n    int i = 0;\n    int\
    \ j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n   \
    \ int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n\
    \    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n\
    \    int y = 0;\n    int z = 0;\n    int a = 0;\n    int b = 0;\n    int c = 0;\n\
    \    int d = 0;\n    int e = 0;\n    int f = 0;\n    int g = 0;\n    int h = 0;\n\
    \    int ii = 0;\n    int jj = 0;\n    int kk = 0;\n    int ll = 0;\n    int mm\
    \ = 0;\n    int nn = 0;\n    int oo = 0;\n    int pp = 0;\n    int qq = 0;\n \
    \   int rr = 0;\n    int ss = 0;\n    int tt = 0;\n    int uu = 0;\n    int vv\
    \ = 0;\n    int ww = 0;\n    int xx = 0;\n    int yy = 0;\n    int zz = 0;\n \
    \   int aa = 0;\n    int bb = 0;\n    int cc = 0;\n    int dd = 0;\n    int ee\
    \ = 0;\n    int ff = 0;\n    int gg = 0;\n    int hh = 0;\n    int iii = 0;\n\
    \    int jjj = 0;\n    int kkk = 0;\n    int lll = 0;\n    int mmm = 0;\n    int\
    \ nnn = 0;\n    int ooo = 0;\n    int ppp = 0;\n    int qqq = 0;\n    int rrr\
    \ = 0;\n    int sss = 0;\n    int ttt = 0;\n    int uuu = 0;\n\nunittest\n{\n\
    \    alias candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L,\
    \ -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L,\
    \ 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L,\
    \ 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8gt1up8b.d(85): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8gt1up8b.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163134
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    auto result =\
    \ nums.dup;\n    result.sort!((a, b) => a.sumDigits() < b.sumDigits());\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = order_by_points;\n\n    assert(candidate([1L,\
    \ 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L,\
    \ 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) ==\
    \ [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbh50lf5l.d(16): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbh50lf5l.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163134
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    return nums.sort!((a,\
    \ b) => (a.sumDigits() < b.sumDigits()));\n}\nunittest\n{\n    alias candidate\
    \ = order_by_points;\n\n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L,\
    \ -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L,\
    \ 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L,\
    \ 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -11L, -32L, 43L, 54L, -98L, 2L, -3L]) ==\
    \ [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L,\
    \ 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L,\
    \ -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwxoludrv.d(15): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwxoludrv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163134
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    int[] sums = new\
    \ int[nums.length];\n    foreach(i,n; nums)\n    {\n        int sum = 0;\n   \
    \     while(n != 0)\n        {\n            sum += n % 10;\n            n /= 10;\n\
    \        }\n        sums[i] = sum;\n    }\n    return nums.sort(sums);\n}\nunittest\n\
    {\n    alias candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L,\
    \ -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L,\
    \ 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L,\
    \ 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqnrywkx5.d(26): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqnrywkx5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163134
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    int[] sums = new\
    \ int[nums.length];\n    for (int i = 0; i < nums.length; i++)\n    {\n      \
    \  int sum = 0;\n        foreach (c; nums[i].to!string)\n        {\n         \
    \   sum += c.to!int - '0';\n        }\n        sums[i] = sum;\n    }\n    return\
    \ nums.dup.sort!((a, b) => sums[a] < sums[b] || (sums[a] == sums[b] && a < b));\n\
    }\nunittest\n{\n    alias candidate = order_by_points;\n\n    assert(candidate([1L,\
    \ 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L,\
    \ 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) ==\
    \ [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpb306ion2.d(19): Error: no property `to` for type `long`

    /tmp/tmpb306ion2.d(25): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb306ion2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163134
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    auto result =\
    \ nums.dup;\n    result.sort!((a, b) => sumDigits(a) < sumDigits(b));\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = order_by_points;\n\n    assert(candidate([1L,\
    \ 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L,\
    \ 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) ==\
    \ [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphqag3_0s.d(16): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphqag3_0s.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163133
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    auto result =\
    \ nums.dup;\n    result.sort!((a, b) => sumDigits(a) < sumDigits(b) || (sumDigits(a)\
    \ == sumDigits(b) && a < b));\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = order_by_points;\n\n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L,\
    \ -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L,\
    \ 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L,\
    \ 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -11L, -32L, 43L, 54L, -98L, 2L, -3L]) ==\
    \ [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L,\
    \ 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L,\
    \ -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfj6jvx9s.d(16): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfj6jvx9s.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163133
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    long[] result\
    \ = new long[nums.length];\n    long[] sums = new long[nums.length];\n    for\
    \ (int i = 0; i < nums.length; i++)\n    {\n        long sum = 0;\n        long\
    \ num = nums[i];\n        while (num > 0)\n        {\n            sum += num %\
    \ 10;\n            num /= 10;\n        }\n        sums[i] = sum;\n    }\n    int[]\
    \ indices = new int[nums.length];\n    for (int i = 0; i < nums.length; i++)\n\
    \    {\n        indices[i] = i;\n    }\n    sort(sums, indices);\n    for (int\
    \ i = 0; i < nums.length; i++)\n    {\n        result[i] = nums[indices[i]];\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = order_by_points;\n\
    \n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphcp5cth3.d(33): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphcp5cth3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163134
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    long[] result\
    \ = new long[nums.length];\n    long[] sums = new long[nums.length];\n    for\
    \ (int i = 0; i < nums.length; i++)\n    {\n        long sum = 0;\n        long\
    \ num = nums[i];\n        while (num > 0)\n        {\n            sum += num %\
    \ 10;\n            num /= 10;\n        }\n        sums[i] = sum;\n    }\n    auto\
    \ p = zip(nums, sums);\n    p.sort!((a, b) => a[1] < b[1]);\n    foreach (i, e;\
    \ p)\n    {\n        result[i] = e[0];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L,\
    \ -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L,\
    \ 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L,\
    \ 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjf5ewywa.d(28): Error: undefined identifier `zip`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjf5ewywa.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163133
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    auto nums_with_points\
    \ = zip(nums, map!(sum_digits)(nums));\n    nums_with_points.sort!((a, b) => a[1]\
    \ < b[1] || (a[1] == b[1] && a[0] < b[0]));\n    return map!(a => a[0])(nums_with_points);\n\
    }\nunittest\n{\n    alias candidate = order_by_points;\n\n    assert(candidate([1L,\
    \ 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L,\
    \ 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) ==\
    \ [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprhvyrp34.d(15): Error: undefined identifier `zip`

    /tmp/tmprhvyrp34.d(17): Error: template instance `map!((a) => a[0])` template
    `map` is not defined

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprhvyrp34.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163134
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    long[] result\
    \ = new long[nums.length];\n    long[] sums = new long[nums.length];\n    long[]\
    \ indices = new long[nums.length];\n    for (int i = 0; i < nums.length; i++)\n\
    \    {\n        indices[i] = i;\n        sums[i] = 0;\n        long num = nums[i];\n\
    \        while (num > 0)\n        {\n            sums[i] += num % 10;\n      \
    \      num /= 10;\n        }\n    }\n    mergeSort(sums, indices);\n    for (int\
    \ i = 0; i < nums.length; i++)\n    {\n        result[i] = nums[indices[i]];\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = order_by_points;\n\
    \n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpo4dotzg3.d(29): Error: undefined identifier `mergeSort`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo4dotzg3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163134
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    long[] result\
    \ = new long[nums.length];\n    long[] sums = new long[nums.length];\n    foreach(i,\
    \ n; nums)\n    {\n        sums[i] = n.sumDigits();\n    }\n    auto sorted =\
    \ sort(sums);\n    foreach(i, s; sorted)\n    {\n        foreach(j, n; nums)\n\
    \        {\n            if(n.sumDigits() == s)\n            {\n              \
    \  result[i] = n;\n                break;\n            }\n        }\n    }\n \
    \   return result;\n}\nunittest\n{\n    alias candidate = order_by_points;\n\n\
    \    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpcy30onf9.d(19): Error: no property `sumDigits` for type `long`

    /tmp/tmpcy30onf9.d(21): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcy30onf9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163134
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    auto result =\
    \ nums.dup;\n    sort!((a, b) => sumDigits(a) < sumDigits(b) || (sumDigits(a)\
    \ == sumDigits(b) && a < b))(result);\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L, -11L,\
    \ -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L, 463L,\
    \ 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L,\
    \ 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -11L, -32L, 43L, 54L, -98L, 2L, -3L]) ==\
    \ [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L,\
    \ 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L,\
    \ -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp91v3gh_x.d(16): Error: template instance `sort!((a, b) => sumDigits(a)
    < sumDigits(b) || sumDigits(a) == sumDigits(b) && (a < b))` template `sort` is
    not defined, did you mean sqrt?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp91v3gh_x.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163134
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    long[] result\
    \ = new long[nums.length];\n    long[] sums = new long[nums.length];\n    long[]\
    \ indexes = new long[nums.length];\n    for (int i = 0; i < nums.length; i++)\n\
    \    {\n        indexes[i] = i;\n        sums[i] = sumDigits(nums[i]);\n    }\n\
    \    indexes = sort(indexes, (a, b) => sums[a] < sums[b]);\n    for (int i = 0;\
    \ i < nums.length; i++)\n    {\n        result[i] = nums[indexes[i]];\n    }\n\
    \    return result;\n}\nlong sumDigits(long n)\n{\n    long sum = 0;\n    while\
    \ (n > 0)\n    {\n        sum += n % 10;\n        n /= 10;\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = order_by_points;\n\n    assert(candidate([1L,\
    \ 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L,\
    \ 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) ==\
    \ [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmbnbuwlg.d(23): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmbnbuwlg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163134
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    long[] result\
    \ = new long[nums.length];\n    long[] sums = new long[nums.length];\n    for\
    \ (int i = 0; i < nums.length; i++)\n    {\n        sums[i] = sumDigits(nums[i]);\n\
    \    }\n    long[] sortedSums = sums.dup;\n    sort(sortedSums);\n    for (int\
    \ i = 0; i < nums.length; i++)\n    {\n        for (int j = 0; j < nums.length;\
    \ j++)\n        {\n            if (sortedSums[i] == sums[j])\n            {\n\
    \                result[i] = nums[j];\n                sums[j] = -1;\n       \
    \         break;\n            }\n        }\n    }\n    return result;\n}\nlong\
    \ sumDigits(long n)\n{\n    long sum = 0;\n    while (n > 0)\n    {\n        sum\
    \ += n % 10;\n        n /= 10;\n    }\n    return sum;\n}\nunittest\n{\n    alias\
    \ candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L, -11L, -12L])\
    \ == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L, 463L, 145L,\
    \ 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L,\
    \ 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -11L, -32L, 43L, 54L, -98L, 2L, -3L]) ==\
    \ [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L,\
    \ 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L,\
    \ -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp87qzal9k.d(22): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp87qzal9k.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163134
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    auto arr = nums.dup;\n\
    \    auto sum = 0;\n    auto sum_arr = new long[arr.length];\n    foreach(i, num;\
    \ arr)\n    {\n        sum = 0;\n        while(num != 0)\n        {\n        \
    \    sum += num % 10;\n            num /= 10;\n        }\n        sum_arr[i] =\
    \ sum;\n    }\n    auto index = new long[arr.length];\n    foreach(i, num; arr)\n\
    \    {\n        index[i] = i;\n    }\n    auto temp = 0;\n    for(int i = 0; i\
    \ < arr.length; i++)\n    {\n        for(int j = i + 1; j < arr.length; j++)\n\
    \        {\n            if(sum_arr[i] > sum_arr[j])\n            {\n         \
    \       temp = sum_arr[i];\n                sum_arr[i] = sum_arr[j];\n       \
    \         sum_arr[j] = temp;\n                temp = arr[i];\n               \
    \ arr[i] = arr[j];\n                arr[j] = temp;\n                temp = index[i];\n\
    \                index[i] = index[j];\n                index[j] = temp;\n    \
    \        }\n            else if(sum_arr[i] == sum_arr[j])\n            {\n   \
    \             if(index[i] > index[j])\n                {\n                   \
    \ temp = sum_arr[i];\n                    sum_arr[i] = sum_arr[j];\n         \
    \           sum_arr[j] = temp;\n                    temp = arr[i];\n         \
    \           arr[i] = arr[j];\n                    arr[j] = temp;\n           \
    \         temp = index[i];\n                    index[i] = index[j];\n       \
    \             index[j] = temp;\n                }\n            }\n        }\n\
    \    }\n    return arr;\n}\nunittest\n{\n    alias candidate = order_by_points;\n\
    \n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7jc1hq0b.d(40): Error: cannot implicitly convert expression `sum_arr[cast(ulong)i]`
    of type `long` to `int`

    /tmp/tmp7jc1hq0b.d(43): Error: cannot implicitly convert expression `arr[cast(ulong)i]`
    of type `long` to `int`

    /tmp/tmp7jc1hq0b.d(46): Error: cannot implicitly convert expression `index[cast(ulong)i]`
    of type `long` to `int`

    /tmp/tmp7jc1hq0b.d(54): Error: cannot implicitly convert expression `sum_arr[cast(ulong)i]`
    of type `long` to `int`

    /tmp/tmp7jc1hq0b.d(57): Error: cannot implicitly convert expression `arr[cast(ulong)i]`
    of type `long` to `int`

    /tmp/tmp7jc1hq0b.d(60): Error: cannot implicitly convert expression `index[cast(ulong)i]`
    of type `long` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7jc1hq0b.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163135
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    auto result =\
    \ nums.dup;\n    result.sort!((a, b) => sumDigits(a) < sumDigits(b));\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = order_by_points;\n\n    assert(candidate([1L,\
    \ 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L,\
    \ 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) ==\
    \ [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphqag3_0s.d(16): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphqag3_0s.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163133
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    long[] result\
    \ = new long[nums.length];\n    int[] sums = new int[nums.length];\n    for (int\
    \ i = 0; i < nums.length; i++)\n    {\n        int sum = 0;\n        long num\
    \ = nums[i];\n        while (num > 0)\n        {\n            sum += num % 10;\n\
    \            num /= 10;\n        }\n        sums[i] = sum;\n    }\n    int[] sorted\
    \ = sort(sums);\n    for (int i = 0; i < nums.length; i++)\n    {\n        int\
    \ index = indexOf(sums, sorted[i]);\n        result[i] = nums[index];\n    }\n\
    \    return result;\n}\n/*\n    Example:\n    order_by_points([51, 32, 43]) ==\
    \ [32, 43, 51]\n    order_by_points([17, 13, 27, 49]) == [17, 13, 27, 49]\n  \
    \  order_by_points([]) == []\n*/\nunittest\n{\n    alias candidate = order_by_points;\n\
    \n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfpdsk8k5.d(28): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    /tmp/tmpfpdsk8k5.d(31): Error: undefined identifier `indexOf`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfpdsk8k5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163134
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    auto result =\
    \ nums.dup;\n    result.sort!((a, b) =>\n    {\n        auto aSum = a.to!string.map!(c\
    \ => c.to!long).sum;\n        auto bSum = b.to!string.map!(c => c.to!long).sum;\n\
    \        return aSum == bSum ? a.idup.compare(b.idup) : aSum.compare(bSum);\n\
    \    });\n    return result;\n}\nunittest\n{\n    alias candidate = order_by_points;\n\
    \n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7bpzvsxt.d(16): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7bpzvsxt.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163135
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    return nums.sort!((a,\
    \ b) => sumDigits(a) < sumDigits(b) || (sumDigits(a) == sumDigits(b) && a < b));\n\
    }\nunittest\n{\n    alias candidate = order_by_points;\n\n    assert(candidate([1L,\
    \ 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L,\
    \ 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) ==\
    \ [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfuems9_0.d(15): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfuems9_0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163133
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    long[] result\
    \ = new long[nums.length];\n    long[] sums = new long[nums.length];\n    for\
    \ (int i = 0; i < nums.length; i++)\n    {\n        sums[i] = sumDigits(nums[i]);\n\
    \    }\n    sort(sums);\n    for (int i = 0; i < nums.length; i++)\n    {\n  \
    \      for (int j = 0; j < nums.length; j++)\n        {\n            if (sums[i]\
    \ == sumDigits(nums[j]))\n            {\n                result[i] = nums[j];\n\
    \                nums[j] = -1;\n                break;\n            }\n      \
    \  }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = order_by_points;\n\
    \n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpplv10xtl.d(19): Error: undefined identifier `sumDigits`

    /tmp/tmpplv10xtl.d(21): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    /tmp/tmpplv10xtl.d(26): Error: undefined identifier `sumDigits`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpplv10xtl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163134
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    long[] result\
    \ = new long[nums.length];\n    int[] sums = new int[nums.length];\n    for (int\
    \ i = 0; i < nums.length; i++)\n    {\n        sums[i] = sumDigits(nums[i]);\n\
    \    }\n    int[] sorted = sort(sums);\n    for (int i = 0; i < nums.length; i++)\n\
    \    {\n        result[i] = nums[sorted[i]];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L,\
    \ -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L,\
    \ 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L,\
    \ 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp92fqqza9.d(19): Error: undefined identifier `sumDigits`

    /tmp/tmp92fqqza9.d(21): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp92fqqza9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163135
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    auto points =\
    \ nums.map!(a => a.sumDigits).array;\n    return nums.sort!((a, b) => points[a]\
    \ < points[b]).array;\n}\nunittest\n{\n    alias candidate = order_by_points;\n\
    \n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnfunph3r.d(15): Error: no property `map` for type `long[]`

    /tmp/tmpnfunph3r.d(16): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnfunph3r.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163135
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    long[] result\
    \ = new long[nums.length];\n    long[] sums = new long[nums.length];\n    for\
    \ (int i = 0; i < nums.length; i++)\n    {\n        long sum = 0;\n        long\
    \ n = nums[i];\n        while (n > 0)\n        {\n            sum += n % 10;\n\
    \            n /= 10;\n        }\n        sums[i] = sum;\n    }\n    auto p =\
    \ zip(nums, sums);\n    p.sort!((a, b) => a[1] < b[1]);\n    foreach (i, e; p)\n\
    \    {\n        result[i] = e[0];\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L,\
    \ -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L,\
    \ 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L,\
    \ 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0abuxyfl.d(28): Error: undefined identifier `zip`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0abuxyfl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163134
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    long[] result\
    \ = new long[nums.length];\n    long[] sums = new long[nums.length];\n    for\
    \ (int i = 0; i < nums.length; i++)\n    {\n        long sum = 0;\n        long\
    \ num = nums[i];\n        while (num > 0)\n        {\n            sum += num %\
    \ 10;\n            num /= 10;\n        }\n        sums[i] = sum;\n    }\n    long[]\
    \ sortedSums = sums.dup;\n    sortedSums.sort;\n    for (int i = 0; i < nums.length;\
    \ i++)\n    {\n        long sum = sortedSums[i];\n        for (int j = 0; j <\
    \ nums.length; j++)\n        {\n            if (sums[j] == sum)\n            {\n\
    \                result[i] = nums[j];\n                sums[j] = -1;\n       \
    \         break;\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = order_by_points;\n\n    assert(candidate([1L, 11L, -1L,\
    \ -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L,\
    \ 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L,\
    \ 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1xx_o53b.d(29): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1xx_o53b.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163134
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    long[] result\
    \ = new long[nums.length];\n    long[] sum = new long[nums.length];\n    long[]\
    \ index = new long[nums.length];\n    for (int i = 0; i < nums.length; i++)\n\
    \    {\n        index[i] = i;\n        sum[i] = nums[i];\n        while (sum[i]\
    \ > 9)\n        {\n            sum[i] = sum[i] % 10 + sum[i] / 10;\n        }\n\
    \    }\n    for (int i = 0; i < nums.length; i++)\n    {\n        for (int j =\
    \ i + 1; j < nums.length; j++)\n        {\n            if (sum[i] > sum[j])\n\
    \            {\n                long temp = sum[i];\n                sum[i] =\
    \ sum[j];\n                sum[j] = temp;\n                temp = nums[i];\n \
    \               nums[i] = nums[j];\n                nums[j] = temp;\n        \
    \        temp = index[i];\n                index[i] = index[j];\n            \
    \    index[j] = temp;\n            }\n            else if (sum[i] == sum[j])\n\
    \            {\n                if (index[i] > index[j])\n                {\n\
    \                    long temp = sum[i];\n                    sum[i] = sum[j];\n\
    \                    sum[j] = temp;\n                    temp = nums[i];\n   \
    \                 nums[i] = nums[j];\n                    nums[j] = temp;\n  \
    \                  temp = index[i];\n                    index[i] = index[j];\n\
    \                    index[j] = temp;\n                }\n            }\n    \
    \    }\n    }\n    for (int i = 0; i < nums.length; i++)\n    {\n        result[i]\
    \ = nums[i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate =\
    \ order_by_points;\n\n    assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L,\
    \ -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L,\
    \ 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L,\
    \ 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -11L, -32L, 43L, 54L, -98L, 2L, -3L]) ==\
    \ [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L, 2L, 3L,\
    \ 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L,\
    \ 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L,\
    \ -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpihivkcpa.d(70): unittest failure

    ----------------

    ??:? _d_unittestp [0x428e25]

    ??:? void tmpihivkcpa.__unittest_L66_C1() [0x428619]

    ??:? void tmpihivkcpa.__modtest() [0x428ba4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42cf03]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42bd96]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x431021]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4314d0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430fad]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bd6d]

    ??:? runModuleUnitTests [0x42ccd9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4292e8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163135
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    auto result =\
    \ nums.dup;\n    sort!((a, b) => sumDigits(a) < sumDigits(b))(result);\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = order_by_points;\n\n    assert(candidate([1L,\
    \ 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L,\
    \ 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) ==\
    \ [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpq1twnd20.d(16): Error: template instance `sort!((a, b) => sumDigits(a)
    < sumDigits(b))` template `sort` is not defined, did you mean sqrt?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpq1twnd20.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163134
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    auto result =\
    \ nums.dup;\n    result.sort!((a, b) => sumDigits(a) < sumDigits(b));\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = order_by_points;\n\n    assert(candidate([1L,\
    \ 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L,\
    \ 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) ==\
    \ [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphqag3_0s.d(16): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphqag3_0s.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163133
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    long[] result\
    \ = new long[nums.length];\n    long[] sums = new long[nums.length];\n    foreach(i,\
    \ v; nums)\n    {\n        long sum = 0;\n        foreach(c; to!string(v))\n \
    \       {\n            sum += c.to!long - '0'.to!long;\n        }\n        sums[i]\
    \ = sum;\n    }\n    long[] sorted = sums.dup;\n    sort(sorted);\n    foreach(i,\
    \ v; sorted)\n    {\n        foreach(j, w; sums)\n        {\n            if(v\
    \ == w)\n            {\n                result[i] = nums[j];\n               \
    \ sums[j] = -1;\n                break;\n            }\n        }\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = order_by_points;\n\n \
    \   assert(candidate([1L, 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n\
    \    assert(candidate([1234L, 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L,\
    \ 3457L, 3L, 56L, 0L, 46L]) == [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L,\
    \ 145L, 37L, 46L, 56L, 463L, 3457L]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -11L, -32L, 43L, 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L,\
    \ 54L]);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L])\
    \ == [1L, 10L, 2L, 11L, 3L, 4L, 5L, 6L, 7L, 8L, 9L]);\n    assert(candidate([0L,\
    \ 6L, 6L, -76L, -21L, 23L, 4L]) == [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkru7w6sm.d(20): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    /tmp/tmpkru7w6sm.d(27): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkru7w6sm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163135
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    auto result =\
    \ nums.dup;\n    auto sums = nums.map!(a => a.sumDigits);\n    result.sort!((a,\
    \ b) => sums[a] < sums[b] || (sums[a] == sums[b] && a < b));\n    return result;\n\
    }\nunittest\n{\n    alias candidate = order_by_points;\n\n    assert(candidate([1L,\
    \ 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L,\
    \ 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) ==\
    \ [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkl6ownv7.d(16): Error: no property `map` for type `long[]`

    /tmp/tmpkl6ownv7.d(17): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkl6ownv7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163135
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function which\
    \ sorts the given list of integers\n    in ascending order according to the sum\
    \ of their digits.\n    Note: if there are several items with similar sum of their\
    \ digits,\n    order them based on their index in original list.\n\n    For example:\n\
    \            \n*/\nlong[] order_by_points(long[] nums) \n{\n    auto result =\
    \ nums.dup;\n    result.sort!((a, b) => sumDigits(a) < sumDigits(b));\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = order_by_points;\n\n    assert(candidate([1L,\
    \ 11L, -1L, -11L, -12L]) == [-1L, -11L, 1L, -12L, 11L]);\n    assert(candidate([1234L,\
    \ 423L, 463L, 145L, 2L, 423L, 423L, 53L, 6L, 37L, 3457L, 3L, 56L, 0L, 46L]) ==\
    \ [0L, 2L, 3L, 6L, 53L, 423L, 423L, 423L, 1234L, 145L, 37L, 46L, 56L, 463L, 3457L]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -11L, -32L, 43L,\
    \ 54L, -98L, 2L, -3L]) == [-3L, -32L, -98L, -11L, 1L, 2L, 43L, 54L]);\n    assert(candidate([1L,\
    \ 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L]) == [1L, 10L, 2L, 11L, 3L, 4L, 5L,\
    \ 6L, 7L, 8L, 9L]);\n    assert(candidate([0L, 6L, 6L, -76L, -21L, 23L, 4L]) ==\
    \ [-76L, -21L, 0L, 4L, 23L, 6L, 6L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphqag3_0s.d(16): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphqag3_0s.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163133
