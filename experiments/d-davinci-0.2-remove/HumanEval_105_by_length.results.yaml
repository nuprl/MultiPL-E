language: d
name: HumanEval_105_by_length
results:
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result = new string[arr.length];\n\
    \    foreach(i, e; arr)\n    {\n        if(e > 0 && e < 10)\n        {\n     \
    \       result[i] = e.to!string;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbs0_krsn.d(23): Error: no property `to` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbs0_krsn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164395
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    return arr.map!(a => a.to!string).sort!((a,\
    \ b) => a.length < b.length).map!(a => a.to!long);\n}\nunittest\n{\n    alias\
    \ candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L,\
    \ 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L,\
    \ 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgek9yfae.d(18): Error: no property `map` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgek9yfae.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164395
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) \n  \
    \      return new string[0];\n    string[] result = new string[arr.length];\n\
    \    int j = 0;\n    foreach (i; arr) \n    {\n        if (i >= 1 && i <= 9) \n\
    \        {\n            result[j] = i.to!string;\n            j++;\n        }\n\
    \    }\n    result = result[0..j];\n    sort(result);\n    reverse(result);\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvklyxlzn.d(26): Error: no property `to` for type `long`

    /tmp/tmpvklyxlzn.d(31): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    /tmp/tmpvklyxlzn.d(32): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(string[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvklyxlzn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164395
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    return arr.map!(a => a.to!string).sort!((a,\
    \ b) => a.length < b.length).map!(a => a.to!long);\n}\nunittest\n{\n    alias\
    \ candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L,\
    \ 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L,\
    \ 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgek9yfae.d(18): Error: no property `map` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgek9yfae.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164395
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result = new string[arr.length];\n\
    \    foreach(i, v; arr)\n    {\n        if(v > 0 && v < 10)\n        {\n     \
    \       switch(v)\n            {\n                case 1:\n                  \
    \  result[i] = \"One\";\n                    break;\n                case 2:\n\
    \                    result[i] = \"Two\";\n                    break;\n      \
    \          case 3:\n                    result[i] = \"Three\";\n             \
    \       break;\n                case 4:\n                    result[i] = \"Four\"\
    ;\n                    break;\n                case 5:\n                    result[i]\
    \ = \"Five\";\n                    break;\n                case 6:\n         \
    \           result[i] = \"Six\";\n                    break;\n               \
    \ case 7:\n                    result[i] = \"Seven\";\n                    break;\n\
    \                case 8:\n                    result[i] = \"Eight\";\n       \
    \             break;\n                case 9:\n                    result[i] =\
    \ \"Nine\";\n                    break;\n            }\n        }\n    }\n   \
    \ return result.sort().reverse();\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpksm2xl60.d(23): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    /tmp/tmpksm2xl60.d(55): Error: no property `sort` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpksm2xl60.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164395
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result = new string[arr.length];\n\
    \    foreach(i, e; arr)\n    {\n        if(e > 0 && e < 10)\n        {\n     \
    \       switch(e)\n            {\n                case 1:\n                  \
    \  result[i] = \"One\";\n                    break;\n                case 2:\n\
    \                    result[i] = \"Two\";\n                    break;\n      \
    \          case 3:\n                    result[i] = \"Three\";\n             \
    \       break;\n                case 4:\n                    result[i] = \"Four\"\
    ;\n                    break;\n                case 5:\n                    result[i]\
    \ = \"Five\";\n                    break;\n                case 6:\n         \
    \           result[i] = \"Six\";\n                    break;\n               \
    \ case 7:\n                    result[i] = \"Seven\";\n                    break;\n\
    \                case 8:\n                    result[i] = \"Eight\";\n       \
    \             break;\n                case 9:\n                    result[i] =\
    \ \"Nine\";\n                    break;\n            }\n        }\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9oefmqwp.d(23): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9oefmqwp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164395
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result = new string[arr.length];\n\
    \    foreach(i, e; arr)\n    {\n        if(e <= 9 && e >= 1)\n        {\n    \
    \        switch(e)\n            {\n                case 1:\n                 \
    \   result[i] = \"One\";\n                    break;\n                case 2:\n\
    \                    result[i] = \"Two\";\n                    break;\n      \
    \          case 3:\n                    result[i] = \"Three\";\n             \
    \       break;\n                case 4:\n                    result[i] = \"Four\"\
    ;\n                    break;\n                case 5:\n                    result[i]\
    \ = \"Five\";\n                    break;\n                case 6:\n         \
    \           result[i] = \"Six\";\n                    break;\n               \
    \ case 7:\n                    result[i] = \"Seven\";\n                    break;\n\
    \                case 8:\n                    result[i] = \"Eight\";\n       \
    \             break;\n                case 9:\n                    result[i] =\
    \ \"Nine\";\n                    break;\n            }\n        }\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5xte1p29.d(23): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5xte1p29.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164395
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result = new string[arr.length];\n\
    \    foreach(i, e; arr)\n    {\n        if(e > 0 && e < 10)\n        {\n     \
    \       result[i] = e.to!string;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbs0_krsn.d(23): Error: no property `to` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbs0_krsn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164395
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    auto result = arr.filter!(x\
    \ => x > 0 && x < 10).sort.reverse;\n    return result.map!(x => [\"One\", \"\
    Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    ][x - 1]).array;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpo1cd6_nu.d(18): Error: no property `filter` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo1cd6_nu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164395
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    string[] res = new string[arr.length];\n\
    \    foreach(i, e; arr)\n    {\n        if(e > 0 && e < 10)\n        {\n     \
    \       switch(e)\n            {\n                case 1:\n                  \
    \  res[i] = \"One\";\n                    break;\n                case 2:\n  \
    \                  res[i] = \"Two\";\n                    break;\n           \
    \     case 3:\n                    res[i] = \"Three\";\n                    break;\n\
    \                case 4:\n                    res[i] = \"Four\";\n           \
    \         break;\n                case 5:\n                    res[i] = \"Five\"\
    ;\n                    break;\n                case 6:\n                    res[i]\
    \ = \"Six\";\n                    break;\n                case 7:\n          \
    \          res[i] = \"Seven\";\n                    break;\n                case\
    \ 8:\n                    res[i] = \"Eight\";\n                    break;\n  \
    \              case 9:\n                    res[i] = \"Nine\";\n             \
    \       break;\n            }\n        }\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpx54d2yuk.d(23): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx54d2yuk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164395
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result = new string[arr.length];\n\
    \    foreach(i, e; arr)\n    {\n        if(e < 1 || e > 9)\n            continue;\n\
    \        switch(e)\n        {\n            case 1:\n                result[i]\
    \ = \"One\";\n                break;\n            case 2:\n                result[i]\
    \ = \"Two\";\n                break;\n            case 3:\n                result[i]\
    \ = \"Three\";\n                break;\n            case 4:\n                result[i]\
    \ = \"Four\";\n                break;\n            case 5:\n                result[i]\
    \ = \"Five\";\n                break;\n            case 6:\n                result[i]\
    \ = \"Six\";\n                break;\n            case 7:\n                result[i]\
    \ = \"Seven\";\n                break;\n            case 8:\n                result[i]\
    \ = \"Eight\";\n                break;\n            case 9:\n                result[i]\
    \ = \"Nine\";\n                break;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpob5vgzmr.d(23): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpob5vgzmr.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164395
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result = new string[arr.length];\n\
    \    foreach(i, e; arr)\n    {\n        if(e > 0 && e < 10)\n        {\n     \
    \       result[i] = to!string(e);\n        }\n    }\n    sort(result);\n    reverse(result);\n\
    \    foreach(i, e; result)\n    {\n        switch(e)\n        {\n            case\
    \ \"1\":\n                result[i] = \"One\";\n                break;\n     \
    \       case \"2\":\n                result[i] = \"Two\";\n                break;\n\
    \            case \"3\":\n                result[i] = \"Three\";\n           \
    \     break;\n            case \"4\":\n                result[i] = \"Four\";\n\
    \                break;\n            case \"5\":\n                result[i] =\
    \ \"Five\";\n                break;\n            case \"6\":\n               \
    \ result[i] = \"Six\";\n                break;\n            case \"7\":\n    \
    \            result[i] = \"Seven\";\n                break;\n            case\
    \ \"8\":\n                result[i] = \"Eight\";\n                break;\n   \
    \         case \"9\":\n                result[i] = \"Nine\";\n               \
    \ break;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"\
    One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"\
    ]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiasyvsui.d(23): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    /tmp/tmpiasyvsui.d(26): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    /tmp/tmpiasyvsui.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(string[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    /tmp/tmpiasyvsui.d(30): Error: `switch` statement without a `default`; use `final
    switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiasyvsui.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164395
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    // TODO\n    return null;\n\
    }\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpimty0lml.d(25): unittest failure

    ----------------

    ??:? _d_unittestp [0x429195]

    ??:? void tmpimty0lml.__unittest_L21_C1() [0x427fe3]

    ??:? void tmpimty0lml.__modtest() [0x4283fc]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42dc9b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x428eee]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42a941]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42a9d0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42a8cd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428ec5]

    ??:? runModuleUnitTests [0x42da71]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4295e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result = new string[arr.length];\n\
    \    foreach(i, v; arr)\n    {\n        if(v > 0 && v < 10)\n        {\n     \
    \       result[i] = to!string(v);\n        }\n    }\n    sort(result);\n    reverse(result);\n\
    \    foreach(i, v; result)\n    {\n        switch(v)\n        {\n            case\
    \ \"1\":\n                result[i] = \"One\";\n                break;\n     \
    \       case \"2\":\n                result[i] = \"Two\";\n                break;\n\
    \            case \"3\":\n                result[i] = \"Three\";\n           \
    \     break;\n            case \"4\":\n                result[i] = \"Four\";\n\
    \                break;\n            case \"5\":\n                result[i] =\
    \ \"Five\";\n                break;\n            case \"6\":\n               \
    \ result[i] = \"Six\";\n                break;\n            case \"7\":\n    \
    \            result[i] = \"Seven\";\n                break;\n            case\
    \ \"8\":\n                result[i] = \"Eight\";\n                break;\n   \
    \         case \"9\":\n                result[i] = \"Nine\";\n               \
    \ break;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"\
    One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"\
    ]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpl74k82m7.d(23): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    /tmp/tmpl74k82m7.d(26): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    /tmp/tmpl74k82m7.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(string[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    /tmp/tmpl74k82m7.d(30): Error: `switch` statement without a `default`; use `final
    switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl74k82m7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164395
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result = new string[arr.length];\n\
    \    foreach(i, e; arr)\n    {\n        if(e > 0 && e < 10)\n        {\n     \
    \       result[i] = to!string(e);\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfbp71q8_.d(23): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfbp71q8_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164395
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result = new string[arr.length];\n\
    \    foreach(i, e; arr)\n    {\n        if(e > 0 && e < 10)\n        {\n     \
    \       result[i] = to!string(e);\n        }\n    }\n    sort(result);\n    reverse(result);\n\
    \    foreach(i, e; result)\n    {\n        switch(e)\n        {\n            case\
    \ \"1\":\n                result[i] = \"One\";\n                break;\n     \
    \       case \"2\":\n                result[i] = \"Two\";\n                break;\n\
    \            case \"3\":\n                result[i] = \"Three\";\n           \
    \     break;\n            case \"4\":\n                result[i] = \"Four\";\n\
    \                break;\n            case \"5\":\n                result[i] =\
    \ \"Five\";\n                break;\n            case \"6\":\n               \
    \ result[i] = \"Six\";\n                break;\n            case \"7\":\n    \
    \            result[i] = \"Seven\";\n                break;\n            case\
    \ \"8\":\n                result[i] = \"Eight\";\n                break;\n   \
    \         case \"9\":\n                result[i] = \"Nine\";\n               \
    \ break;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"\
    One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"\
    ]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiasyvsui.d(23): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    /tmp/tmpiasyvsui.d(26): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    /tmp/tmpiasyvsui.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(string[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    /tmp/tmpiasyvsui.d(30): Error: `switch` statement without a `default`; use `final
    switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiasyvsui.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164395
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result = new string[arr.length];\n\
    \    foreach(i, item; arr)\n    {\n        if(item > 0 && item < 10)\n       \
    \ {\n            switch(item)\n            {\n                case 1:\n      \
    \              result[i] = \"One\";\n                    break;\n            \
    \    case 2:\n                    result[i] = \"Two\";\n                    break;\n\
    \                case 3:\n                    result[i] = \"Three\";\n       \
    \             break;\n                case 4:\n                    result[i] =\
    \ \"Four\";\n                    break;\n                case 5:\n           \
    \         result[i] = \"Five\";\n                    break;\n                case\
    \ 6:\n                    result[i] = \"Six\";\n                    break;\n \
    \               case 7:\n                    result[i] = \"Seven\";\n        \
    \            break;\n                case 8:\n                    result[i] =\
    \ \"Eight\";\n                    break;\n                case 9:\n          \
    \          result[i] = \"Nine\";\n                    break;\n            }\n\
    \        }\n    }\n    return result.filter!(a => a != \"\");\n}\nunittest\n{\n\
    \    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4b5hfzfa.d(23): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    /tmp/tmp4b5hfzfa.d(55): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4b5hfzfa.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164395
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result = new string[arr.length];\n\
    \    foreach(i, e; arr)\n    {\n        switch(e)\n        {\n            case\
    \ 1:\n                result[i] = \"One\";\n                break;\n         \
    \   case 2:\n                result[i] = \"Two\";\n                break;\n  \
    \          case 3:\n                result[i] = \"Three\";\n                break;\n\
    \            case 4:\n                result[i] = \"Four\";\n                break;\n\
    \            case 5:\n                result[i] = \"Five\";\n                break;\n\
    \            case 6:\n                result[i] = \"Six\";\n                break;\n\
    \            case 7:\n                result[i] = \"Seven\";\n               \
    \ break;\n            case 8:\n                result[i] = \"Eight\";\n      \
    \          break;\n            case 9:\n                result[i] = \"Nine\";\n\
    \                break;\n            default:\n                break;\n      \
    \  }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpazapx7u_.d(60): unittest failure

    ----------------

    ??:? _d_unittestp [0x42946d]

    ??:? void tmpazapx7u_.__unittest_L56_C1() [0x4282bb]

    ??:? void tmpazapx7u_.__modtest() [0x4286d4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42e043]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x4291c6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ace9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ad78]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42ac75]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42919d]

    ??:? runModuleUnitTests [0x42de19]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429930]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result = new string[arr.length];\n\
    \    foreach(i, e; arr)\n    {\n        if (e < 1 || e > 9)\n            continue;\n\
    \        string s = to!string(e);\n        result[i] = s;\n    }\n    sort(result);\n\
    \    reverse(result);\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"\
    One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"\
    ]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqbs87wy0.d(23): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    /tmp/tmpqbs87wy0.d(26): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    /tmp/tmpqbs87wy0.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(string[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqbs87wy0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164395
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result = new string[arr.length];\n\
    \    foreach(i, e; arr)\n    {\n        if(e > 0 && e < 10)\n        {\n     \
    \       result[i] = e.to!string;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbs0_krsn.d(23): Error: no property `to` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbs0_krsn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164395
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    return arr.map!(a => a.to!string).sort!((a,\
    \ b) => a.length > b.length).array;\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_24hx3za.d(18): Error: no property `map` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_24hx3za.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164395
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result = new string[arr.length];\n\
    \    foreach(i, e; arr)\n    {\n        switch(e)\n        {\n            case\
    \ 1:\n                result[i] = \"One\";\n                break;\n         \
    \   case 2:\n                result[i] = \"Two\";\n                break;\n  \
    \          case 3:\n                result[i] = \"Three\";\n                break;\n\
    \            case 4:\n                result[i] = \"Four\";\n                break;\n\
    \            case 5:\n                result[i] = \"Five\";\n                break;\n\
    \            case 6:\n                result[i] = \"Six\";\n                break;\n\
    \            case 7:\n                result[i] = \"Seven\";\n               \
    \ break;\n            case 8:\n                result[i] = \"Eight\";\n      \
    \          break;\n            case 9:\n                result[i] = \"Nine\";\n\
    \                break;\n            default:\n                break;\n      \
    \  }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpazapx7u_.d(60): unittest failure

    ----------------

    ??:? _d_unittestp [0x42946d]

    ??:? void tmpazapx7u_.__unittest_L56_C1() [0x4282bb]

    ??:? void tmpazapx7u_.__modtest() [0x4286d4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42e043]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x4291c6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ace9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ad78]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42ac75]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42919d]

    ??:? runModuleUnitTests [0x42de19]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429930]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    auto result = arr.filter!(a\
    \ => a > 0 && a < 10).sort.reverse;\n    return result.map!(a => [\"One\", \"\
    Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    ][a - 1]).array;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1gopow49.d(18): Error: no property `filter` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1gopow49.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164395
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0)\n   \
    \     return new string[0];\n    auto result = arr.filter!(x => x >= 1 && x <=\
    \ 9).sort!((a, b) => a < b).map!(x => to!string(x)).map!(x => x.length).map!(x\
    \ => to!string(x));\n    return result;\n}\n/*\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpj3iovrnk.d(23): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj3iovrnk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164395
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result = new string[arr.length];\n\
    \    foreach(i, e; arr)\n    {\n        if(e > 0 && e < 10)\n        {\n     \
    \       result[i] = to!string(e);\n        }\n    }\n    sort(result);\n    reverse(result);\n\
    \    foreach(i, e; result)\n    {\n        switch(e)\n        {\n            case\
    \ \"1\":\n                result[i] = \"One\";\n                break;\n     \
    \       case \"2\":\n                result[i] = \"Two\";\n                break;\n\
    \            case \"3\":\n                result[i] = \"Three\";\n           \
    \     break;\n            case \"4\":\n                result[i] = \"Four\";\n\
    \                break;\n            case \"5\":\n                result[i] =\
    \ \"Five\";\n                break;\n            case \"6\":\n               \
    \ result[i] = \"Six\";\n                break;\n            case \"7\":\n    \
    \            result[i] = \"Seven\";\n                break;\n            case\
    \ \"8\":\n                result[i] = \"Eight\";\n                break;\n   \
    \         case \"9\":\n                result[i] = \"Nine\";\n               \
    \ break;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"\
    One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"\
    ]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiasyvsui.d(23): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    /tmp/tmpiasyvsui.d(26): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    /tmp/tmpiasyvsui.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(string[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    /tmp/tmpiasyvsui.d(30): Error: `switch` statement without a `default`; use `final
    switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiasyvsui.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164395
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result = new string[arr.length];\n\
    \    foreach(i, e; arr)\n    {\n        if(e > 0 && e < 10)\n        {\n     \
    \       switch(e)\n            {\n                case 1:\n                  \
    \  result[i] = \"One\";\n                    break;\n                case 2:\n\
    \                    result[i] = \"Two\";\n                    break;\n      \
    \          case 3:\n                    result[i] = \"Three\";\n             \
    \       break;\n                case 4:\n                    result[i] = \"Four\"\
    ;\n                    break;\n                case 5:\n                    result[i]\
    \ = \"Five\";\n                    break;\n                case 6:\n         \
    \           result[i] = \"Six\";\n                    break;\n               \
    \ case 7:\n                    result[i] = \"Seven\";\n                    break;\n\
    \                case 8:\n                    result[i] = \"Eight\";\n       \
    \             break;\n                case 9:\n                    result[i] =\
    \ \"Nine\";\n                    break;\n            }\n        }\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9oefmqwp.d(23): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9oefmqwp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164395
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result = new string[arr.length];\n\
    \    foreach(i, e; arr)\n    {\n        if(e > 0 && e < 10)\n        {\n     \
    \       result[i] = to!string(e);\n        }\n    }\n    sort(result);\n    reverse(result);\n\
    \    foreach(i, e; result)\n    {\n        switch(e)\n        {\n            case\
    \ \"1\":\n                result[i] = \"One\";\n                break;\n     \
    \       case \"2\":\n                result[i] = \"Two\";\n                break;\n\
    \            case \"3\":\n                result[i] = \"Three\";\n           \
    \     break;\n            case \"4\":\n                result[i] = \"Four\";\n\
    \                break;\n            case \"5\":\n                result[i] =\
    \ \"Five\";\n                break;\n            case \"6\":\n               \
    \ result[i] = \"Six\";\n                break;\n            case \"7\":\n    \
    \            result[i] = \"Seven\";\n                break;\n            case\
    \ \"8\":\n                result[i] = \"Eight\";\n                break;\n   \
    \         case \"9\":\n                result[i] = \"Nine\";\n               \
    \ break;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"\
    One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"\
    ]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiasyvsui.d(23): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    /tmp/tmpiasyvsui.d(26): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    /tmp/tmpiasyvsui.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(string[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    /tmp/tmpiasyvsui.d(30): Error: `switch` statement without a `default`; use `final
    switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiasyvsui.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164395
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result = new string[arr.length];\n\
    \    foreach(i, e; arr)\n    {\n        if (e > 0 && e < 10)\n        {\n    \
    \        result[i] = to!string(e);\n        }\n    }\n    sort(result);\n    reverse(result);\n\
    \    foreach(i, e; result)\n    {\n        switch(e)\n        {\n            case\
    \ \"1\":\n                result[i] = \"One\";\n                break;\n     \
    \       case \"2\":\n                result[i] = \"Two\";\n                break;\n\
    \            case \"3\":\n                result[i] = \"Three\";\n           \
    \     break;\n            case \"4\":\n                result[i] = \"Four\";\n\
    \                break;\n            case \"5\":\n                result[i] =\
    \ \"Five\";\n                break;\n            case \"6\":\n               \
    \ result[i] = \"Six\";\n                break;\n            case \"7\":\n    \
    \            result[i] = \"Seven\";\n                break;\n            case\
    \ \"8\":\n                result[i] = \"Eight\";\n                break;\n   \
    \         case \"9\":\n                result[i] = \"Nine\";\n               \
    \ break;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"\
    One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"\
    ]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxtn9aui6.d(23): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    /tmp/tmpxtn9aui6.d(26): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    /tmp/tmpxtn9aui6.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(string[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    /tmp/tmpxtn9aui6.d(30): Error: `switch` statement without a `default`; use `final
    switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxtn9aui6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164395
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    auto result = arr.filter!(a\
    \ => a > 0 && a < 10).sort.map!(a => a.to!string).reverse;\n    return result.map!(a\
    \ => a.replace(\"1\", \"One\").replace(\"2\", \"Two\").replace(\"3\", \"Three\"\
    ).replace(\"4\", \"Four\").replace(\"5\", \"Five\").replace(\"6\", \"Six\").replace(\"\
    7\", \"Seven\").replace(\"8\", \"Eight\").replace(\"9\", \"Nine\"));\n}\nunittest\n\
    {\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4ircjb8p.d(18): Error: no property `filter` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4ircjb8p.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164395
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result = new string[arr.length];\n\
    \    foreach(i, e; arr)\n    {\n        if(e > 0 && e < 10)\n        {\n     \
    \       result[i] = to!string(e);\n        }\n    }\n    sort(result);\n    reverse(result);\n\
    \    foreach(i, e; result)\n    {\n        switch(e)\n        {\n            case\
    \ \"1\":\n                result[i] = \"One\";\n                break;\n     \
    \       case \"2\":\n                result[i] = \"Two\";\n                break;\n\
    \            case \"3\":\n                result[i] = \"Three\";\n           \
    \     break;\n            case \"4\":\n                result[i] = \"Four\";\n\
    \                break;\n            case \"5\":\n                result[i] =\
    \ \"Five\";\n                break;\n            case \"6\":\n               \
    \ result[i] = \"Six\";\n                break;\n            case \"7\":\n    \
    \            result[i] = \"Seven\";\n                break;\n            case\
    \ \"8\":\n                result[i] = \"Eight\";\n                break;\n   \
    \         case \"9\":\n                result[i] = \"Nine\";\n               \
    \ break;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"\
    One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"\
    ]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiasyvsui.d(23): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    /tmp/tmpiasyvsui.d(26): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    /tmp/tmpiasyvsui.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(string[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    /tmp/tmpiasyvsui.d(30): Error: `switch` statement without a `default`; use `final
    switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiasyvsui.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164395
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    return arr.map!(a => a.to!string).sort!((a,\
    \ b) => a.length < b.length).map!(a => a.to!long);\n}\n/*\n    Given an array\
    \ of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse\
    \ the resulting array, and then replace each digit by its corresponding name from\n\
    \    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\"\
    , \"Nine\".\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpskm3y2ez.d(20): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpskm3y2ez.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164395
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result = new string[arr.length];\n\
    \    foreach(i, e; arr)\n    {\n        if(e > 0 && e < 10)\n        {\n     \
    \       result[i] = to!string(e);\n        }\n    }\n    sort(result);\n    reverse(result);\n\
    \    foreach(i, e; result)\n    {\n        switch(e)\n        {\n            case\
    \ \"1\":\n                result[i] = \"One\";\n                break;\n     \
    \       case \"2\":\n                result[i] = \"Two\";\n                break;\n\
    \            case \"3\":\n                result[i] = \"Three\";\n           \
    \     break;\n            case \"4\":\n                result[i] = \"Four\";\n\
    \                break;\n            case \"5\":\n                result[i] =\
    \ \"Five\";\n                break;\n            case \"6\":\n               \
    \ result[i] = \"Six\";\n                break;\n            case \"7\":\n    \
    \            result[i] = \"Seven\";\n                break;\n            case\
    \ \"8\":\n                result[i] = \"Eight\";\n                break;\n   \
    \         case \"9\":\n                result[i] = \"Nine\";\n               \
    \ break;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"\
    One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"\
    ]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiasyvsui.d(23): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    /tmp/tmpiasyvsui.d(26): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    /tmp/tmpiasyvsui.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(string[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    /tmp/tmpiasyvsui.d(30): Error: `switch` statement without a `default`; use `final
    switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiasyvsui.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164395
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result = new string[arr.length];\n\
    \    foreach(i, e; arr)\n    {\n        if(e < 1 || e > 9)\n            continue;\n\
    \        result[i] = to!string(e);\n    }\n    sort(result);\n    reverse(result);\n\
    \    foreach(i, e; result)\n    {\n        switch(e)\n        {\n            case\
    \ \"1\":\n                result[i] = \"One\";\n                break;\n     \
    \       case \"2\":\n                result[i] = \"Two\";\n                break;\n\
    \            case \"3\":\n                result[i] = \"Three\";\n           \
    \     break;\n            case \"4\":\n                result[i] = \"Four\";\n\
    \                break;\n            case \"5\":\n                result[i] =\
    \ \"Five\";\n                break;\n            case \"6\":\n               \
    \ result[i] = \"Six\";\n                break;\n            case \"7\":\n    \
    \            result[i] = \"Seven\";\n                break;\n            case\
    \ \"8\":\n                result[i] = \"Eight\";\n                break;\n   \
    \         case \"9\":\n                result[i] = \"Nine\";\n               \
    \ break;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"\
    One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"\
    ]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpswm4_mu4.d(23): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    /tmp/tmpswm4_mu4.d(25): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    /tmp/tmpswm4_mu4.d(26): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(string[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    /tmp/tmpswm4_mu4.d(29): Error: `switch` statement without a `default`; use `final
    switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpswm4_mu4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164395
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result = new string[arr.length];\n\
    \    foreach(i,e;arr)\n    {\n        if(e > 0 && e < 10)\n        {\n       \
    \     result[i] = to!string(e);\n        }\n    }\n    result = result.sort();\n\
    \    result = result.reverse();\n    foreach(i,e;result)\n    {\n        switch(e)\n\
    \        {\n            case \"1\":\n                result[i] = \"One\";\n  \
    \              break;\n            case \"2\":\n                result[i] = \"\
    Two\";\n                break;\n            case \"3\":\n                result[i]\
    \ = \"Three\";\n                break;\n            case \"4\":\n            \
    \    result[i] = \"Four\";\n                break;\n            case \"5\":\n\
    \                result[i] = \"Five\";\n                break;\n            case\
    \ \"6\":\n                result[i] = \"Six\";\n                break;\n     \
    \       case \"7\":\n                result[i] = \"Seven\";\n                break;\n\
    \            case \"8\":\n                result[i] = \"Eight\";\n           \
    \     break;\n            case \"9\":\n                result[i] = \"Nine\";\n\
    \                break;\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpq0jjkqbz.d(23): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    /tmp/tmpq0jjkqbz.d(26): Error: no property `sort` for type `string[]`

    /tmp/tmpq0jjkqbz.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(string[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    /tmp/tmpq0jjkqbz.d(30): Error: `switch` statement without a `default`; use `final
    switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpq0jjkqbz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result = new string[arr.length];\n\
    \    foreach(i, e; arr)\n    {\n        if(e >= 1 && e <= 9)\n        {\n    \
    \        switch(e)\n            {\n                case 1:\n                 \
    \   result[i] = \"One\";\n                    break;\n                case 2:\n\
    \                    result[i] = \"Two\";\n                    break;\n      \
    \          case 3:\n                    result[i] = \"Three\";\n             \
    \       break;\n                case 4:\n                    result[i] = \"Four\"\
    ;\n                    break;\n                case 5:\n                    result[i]\
    \ = \"Five\";\n                    break;\n                case 6:\n         \
    \           result[i] = \"Six\";\n                    break;\n               \
    \ case 7:\n                    result[i] = \"Seven\";\n                    break;\n\
    \                case 8:\n                    result[i] = \"Eight\";\n       \
    \             break;\n                case 9:\n                    result[i] =\
    \ \"Nine\";\n                    break;\n            }\n        }\n    }\n   \
    \ return result.sort().reverse();\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprhn8galt.d(23): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    /tmp/tmprhn8galt.d(55): Error: no property `sort` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprhn8galt.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    // Sort the array\n    arr.sort();\n\
    \    // Reverse the array\n    arr.reverse();\n    // Replace each digit by its\
    \ corresponding name\n    string[] result = new string[arr.length];\n    foreach(i,\
    \ v; arr)\n    {\n        switch(v)\n        {\n            case 1:\n        \
    \        result[i] = \"One\";\n                break;\n            case 2:\n \
    \               result[i] = \"Two\";\n                break;\n            case\
    \ 3:\n                result[i] = \"Three\";\n                break;\n       \
    \     case 4:\n                result[i] = \"Four\";\n                break;\n\
    \            case 5:\n                result[i] = \"Five\";\n                break;\n\
    \            case 6:\n                result[i] = \"Six\";\n                break;\n\
    \            case 7:\n                result[i] = \"Seven\";\n               \
    \ break;\n            case 8:\n                result[i] = \"Eight\";\n      \
    \          break;\n            case 9:\n                result[i] = \"Nine\";\n\
    \                break;\n            default:\n                break;\n      \
    \  }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqf9gld6h.d(19): Error: no property `sort` for type `long[]`

    /tmp/tmpqf9gld6h.d(21): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(long[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqf9gld6h.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result = new string[arr.length];\n\
    \    foreach(i, e; arr)\n    {\n        if(e > 0 && e < 10)\n        {\n     \
    \       switch(e)\n            {\n                case 1:\n                  \
    \  result[i] = \"One\";\n                    break;\n                case 2:\n\
    \                    result[i] = \"Two\";\n                    break;\n      \
    \          case 3:\n                    result[i] = \"Three\";\n             \
    \       break;\n                case 4:\n                    result[i] = \"Four\"\
    ;\n                    break;\n                case 5:\n                    result[i]\
    \ = \"Five\";\n                    break;\n                case 6:\n         \
    \           result[i] = \"Six\";\n                    break;\n               \
    \ case 7:\n                    result[i] = \"Seven\";\n                    break;\n\
    \                case 8:\n                    result[i] = \"Eight\";\n       \
    \             break;\n                case 9:\n                    result[i] =\
    \ \"Nine\";\n                    break;\n            }\n        }\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9oefmqwp.d(23): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9oefmqwp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164395
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result = new string[arr.length];\n\
    \    int i = 0;\n    foreach(elem; arr)\n    {\n        if(elem > 0 && elem <\
    \ 10)\n        {\n            result[i] = to!string(elem);\n            i++;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwktwhwa9.d(24): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwktwhwa9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164395
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result = new string[arr.length];\n\
    \    foreach(i, e; arr)\n    {\n        if(e > 0 && e < 10)\n        {\n     \
    \       result[i] = to!string(e);\n        }\n    }\n    sort(result);\n    reverse(result);\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprvj6i1x7.d(23): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    /tmp/tmprvj6i1x7.d(26): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    /tmp/tmprvj6i1x7.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(string[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprvj6i1x7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    auto sorted = arr.sort.retro;\n\
    \    string[] result;\n    foreach(e; sorted)\n    {\n        if(e > 0 && e <\
    \ 10)\n        {\n            switch(e)\n            {\n                case 1:\n\
    \                    result ~= \"One\";\n                    break;\n        \
    \        case 2:\n                    result ~= \"Two\";\n                   \
    \ break;\n                case 3:\n                    result ~= \"Three\";\n\
    \                    break;\n                case 4:\n                    result\
    \ ~= \"Four\";\n                    break;\n                case 5:\n        \
    \            result ~= \"Five\";\n                    break;\n               \
    \ case 6:\n                    result ~= \"Six\";\n                    break;\n\
    \                case 7:\n                    result ~= \"Seven\";\n         \
    \           break;\n                case 8:\n                    result ~= \"\
    Eight\";\n                    break;\n                case 9:\n              \
    \      result ~= \"Nine\";\n                    break;\n            }\n      \
    \  }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpv7ee58g3.d(18): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv7ee58g3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    return arr.map!(a => a.to!string).sort!((a,\
    \ b) => a.length < b.length).map!(a => a.to!long);\n}\nunittest\n{\n    alias\
    \ candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L,\
    \ 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L,\
    \ 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgek9yfae.d(18): Error: no property `map` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgek9yfae.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164395
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0)\n   \
    \     return new string[0];\n    auto res = arr.filter!(x => x > 0 && x < 10).sort.reverse.map!(x\
    \ => to!string(x)).array;\n    return res;\n}\nunittest\n{\n    alias candidate\
    \ = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"\
    One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"\
    ]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppt2ssqva.d(20): Error: no property `filter` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppt2ssqva.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    string[] res = new string[arr.length];\n\
    \    foreach(i, v; arr)\n    {\n        if(v > 0 && v < 10)\n        {\n     \
    \       res[i] = to!string(v);\n        }\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpisseckye.d(23): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpisseckye.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    return arr.map!(a => a.to!string).sort!((a,\
    \ b) => a.length < b.length);\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5zxyz8tm.d(18): Error: no property `map` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5zxyz8tm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result = new string[arr.length];\n\
    \    foreach(i, e; arr)\n    {\n        if(e > 0 && e < 10)\n        {\n     \
    \       switch(e)\n            {\n                case 1:\n                  \
    \  result[i] = \"One\";\n                    break;\n                case 2:\n\
    \                    result[i] = \"Two\";\n                    break;\n      \
    \          case 3:\n                    result[i] = \"Three\";\n             \
    \       break;\n                case 4:\n                    result[i] = \"Four\"\
    ;\n                    break;\n                case 5:\n                    result[i]\
    \ = \"Five\";\n                    break;\n                case 6:\n         \
    \           result[i] = \"Six\";\n                    break;\n               \
    \ case 7:\n                    result[i] = \"Seven\";\n                    break;\n\
    \                case 8:\n                    result[i] = \"Eight\";\n       \
    \             break;\n                case 9:\n                    result[i] =\
    \ \"Nine\";\n                    break;\n            }\n        }\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9oefmqwp.d(23): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9oefmqwp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164395
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    // Write your code here\n\
    \    return arr.map!(a => a.to!string).sort!((a, b) => a.length > b.length).map!(a\
    \ => a.to!long).array;\n}\nunittest\n{\n    alias candidate = by_length;\n\n \
    \   assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_whfih_s.d(19): Error: no property `map` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_whfih_s.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    long[] sorted = arr.dup.sort;\n\
    \    long[] result = [];\n    foreach(i; sorted)\n    {\n        if(i > 0 && i\
    \ < 10)\n        {\n            result ~= i;\n        }\n    }\n    result = result.reverse;\n\
    \    string[] result_string = [];\n    foreach(i; result)\n    {\n        switch(i)\n\
    \        {\n            case 1:\n                result_string ~= \"One\";\n \
    \               break;\n            case 2:\n                result_string ~=\
    \ \"Two\";\n                break;\n            case 3:\n                result_string\
    \ ~= \"Three\";\n                break;\n            case 4:\n               \
    \ result_string ~= \"Four\";\n                break;\n            case 5:\n  \
    \              result_string ~= \"Five\";\n                break;\n          \
    \  case 6:\n                result_string ~= \"Six\";\n                break;\n\
    \            case 7:\n                result_string ~= \"Seven\";\n          \
    \      break;\n            case 8:\n                result_string ~= \"Eight\"\
    ;\n                break;\n            case 9:\n                result_string\
    \ ~= \"Nine\";\n                break;\n        }\n    }\n    return result_string;\n\
    }\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2yb9q6zh.d(18): Error: no property `sort` for type `long[]`

    /tmp/tmp2yb9q6zh.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(long[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    /tmp/tmp2yb9q6zh.d(31): Error: `switch` statement without a `default`; use `final
    switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2yb9q6zh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    string[] res = new string[arr.length];\n\
    \    foreach(i, v; arr)\n    {\n        if(v > 0 && v < 10)\n        {\n     \
    \       res[i] = to!string(v);\n        }\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpisseckye.d(23): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpisseckye.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    int[] arr2 = arr.filter!(x\
    \ => x > 0 && x < 10).sort.reverse;\n    string[] result = new string[arr2.length];\n\
    \    foreach(i, x; arr2)\n    {\n        switch(x)\n        {\n            case\
    \ 1: result[i] = \"One\"; break;\n            case 2: result[i] = \"Two\"; break;\n\
    \            case 3: result[i] = \"Three\"; break;\n            case 4: result[i]\
    \ = \"Four\"; break;\n            case 5: result[i] = \"Five\"; break;\n     \
    \       case 6: result[i] = \"Six\"; break;\n            case 7: result[i] = \"\
    Seven\"; break;\n            case 8: result[i] = \"Eight\"; break;\n         \
    \   case 9: result[i] = \"Nine\"; break;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3ts3cu92.d(18): Error: no property `filter` for type `long[]`

    /tmp/tmp3ts3cu92.d(22): Error: `switch` statement without a `default`; use `final
    switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3ts3cu92.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    auto result = new string[];\n\
    \    foreach(i; arr)\n    {\n        if (i > 0 && i < 10)\n        {\n       \
    \     switch(i)\n            {\n                case 1:\n                    result\
    \ ~= \"One\";\n                    break;\n                case 2:\n         \
    \           result ~= \"Two\";\n                    break;\n                case\
    \ 3:\n                    result ~= \"Three\";\n                    break;\n \
    \               case 4:\n                    result ~= \"Four\";\n           \
    \         break;\n                case 5:\n                    result ~= \"Five\"\
    ;\n                    break;\n                case 6:\n                    result\
    \ ~= \"Six\";\n                    break;\n                case 7:\n         \
    \           result ~= \"Seven\";\n                    break;\n               \
    \ case 8:\n                    result ~= \"Eight\";\n                    break;\n\
    \                case 9:\n                    result ~= \"Nine\";\n          \
    \          break;\n            }\n        }\n    }\n    return result.sort().reverse();\n\
    }\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgdyiv34q.d(18): Error: new can only create structs, dynamic arrays
    or class objects, not `string[]`''s

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgdyiv34q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result = new string[arr.length];\n\
    \    foreach(i, e; arr)\n    {\n        if(e > 0 && e < 10)\n        {\n     \
    \       switch(e)\n            {\n                case 1:\n                  \
    \  result[i] = \"One\";\n                    break;\n                case 2:\n\
    \                    result[i] = \"Two\";\n                    break;\n      \
    \          case 3:\n                    result[i] = \"Three\";\n             \
    \       break;\n                case 4:\n                    result[i] = \"Four\"\
    ;\n                    break;\n                case 5:\n                    result[i]\
    \ = \"Five\";\n                    break;\n                case 6:\n         \
    \           result[i] = \"Six\";\n                    break;\n               \
    \ case 7:\n                    result[i] = \"Seven\";\n                    break;\n\
    \                case 8:\n                    result[i] = \"Eight\";\n       \
    \             break;\n                case 9:\n                    result[i] =\
    \ \"Nine\";\n                    break;\n            }\n        }\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9oefmqwp.d(23): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9oefmqwp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164395
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result = new string[arr.length];\n\
    \    foreach(i, e; arr)\n    {\n        if(e > 0 && e < 10)\n        {\n     \
    \       switch(e)\n            {\n                case 1:\n                  \
    \  result[i] = \"One\";\n                    break;\n                case 2:\n\
    \                    result[i] = \"Two\";\n                    break;\n      \
    \          case 3:\n                    result[i] = \"Three\";\n             \
    \       break;\n                case 4:\n                    result[i] = \"Four\"\
    ;\n                    break;\n                case 5:\n                    result[i]\
    \ = \"Five\";\n                    break;\n                case 6:\n         \
    \           result[i] = \"Six\";\n                    break;\n               \
    \ case 7:\n                    result[i] = \"Seven\";\n                    break;\n\
    \                case 8:\n                    result[i] = \"Eight\";\n       \
    \             break;\n                case 9:\n                    result[i] =\
    \ \"Nine\";\n                    break;\n            }\n        }\n    }\n   \
    \ return result;\n}\nstring[] by_length(long[] arr) \n{\n    string[] result =\
    \ new string[arr.length];\n    foreach(i, e; arr)\n    {\n        if(e > 0 &&\
    \ e < 10)\n        {\n            switch(e)\n            {\n                case\
    \ 1:\n                    result[i] = \"One\";\n                    break;\n \
    \               case 2:\n                    result[i] = \"Two\";\n          \
    \          break;\n                case 3:\n                    result[i] = \"\
    Three\";\n                    break;\n                case 4:\n              \
    \      result[i] = \"Four\";\n                    break;\n                case\
    \ 5:\n                    result[i] = \"Five\";\n                    break;\n\
    \                case 6:\n                    result[i] = \"Six\";\n         \
    \           break;\n                case 7:\n                    result[i] = \"\
    Seven\";\n                    break;\n                case 8:\n              \
    \      result[i] = \"Eight\";\n                    break;\n                case\
    \ 9:\n                    result[i] = \"Nine\";\n                    break;\n\
    \            }\n        }\n    }\n    return result;\n}\nstring[] by_length(long[]\
    \ arr) \n{\n    string[] result =\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpd7e2y9xi.d(101): Error: expression expected, not `unittest`

    /tmp/tmpd7e2y9xi.d(102): Error: semicolon expected, not `{`

    /tmp/tmpd7e2y9xi.d(111): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd7e2y9xi.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result = new string[arr.length];\n\
    \    foreach(i, e; arr) \n    {\n        if(e > 0 && e < 10) \n        {\n   \
    \         result[i] = to!string(e);\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L,\
    \ 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpegcxo87n.d(23): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpegcxo87n.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result = new string[arr.length];\n\
    \    foreach(i, v; arr)\n    {\n        if(v > 0 && v < 10)\n        {\n     \
    \       result[i] = to!string(v);\n        }\n    }\n    sort(result);\n    reverse(result);\n\
    \    foreach(i, v; result)\n    {\n        switch(v)\n        {\n            case\
    \ \"1\":\n                result[i] = \"One\";\n                break;\n     \
    \       case \"2\":\n                result[i] = \"Two\";\n                break;\n\
    \            case \"3\":\n                result[i] = \"Three\";\n           \
    \     break;\n            case \"4\":\n                result[i] = \"Four\";\n\
    \                break;\n            case \"5\":\n                result[i] =\
    \ \"Five\";\n                break;\n            case \"6\":\n               \
    \ result[i] = \"Six\";\n                break;\n            case \"7\":\n    \
    \            result[i] = \"Seven\";\n                break;\n            case\
    \ \"8\":\n                result[i] = \"Eight\";\n                break;\n   \
    \         case \"9\":\n                result[i] = \"Nine\";\n               \
    \ break;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"\
    One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"\
    ]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpl74k82m7.d(23): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    /tmp/tmpl74k82m7.d(26): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    /tmp/tmpl74k82m7.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(string[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    /tmp/tmpl74k82m7.d(30): Error: `switch` statement without a `default`; use `final
    switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl74k82m7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164395
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result = new string[arr.length];\n\
    \    foreach(i, v; arr)\n    {\n        if(v < 1 || v > 9)\n            continue;\n\
    \        result[i] = to!string(v);\n    }\n    sort(result);\n    reverse(result);\n\
    \    foreach(i, ref v; result)\n    {\n        switch(v)\n        {\n        \
    \    case \"1\": v = \"One\"; break;\n            case \"2\": v = \"Two\"; break;\n\
    \            case \"3\": v = \"Three\"; break;\n            case \"4\": v = \"\
    Four\"; break;\n            case \"5\": v = \"Five\"; break;\n            case\
    \ \"6\": v = \"Six\"; break;\n            case \"7\": v = \"Seven\"; break;\n\
    \            case \"8\": v = \"Eight\"; break;\n            case \"9\": v = \"\
    Nine\"; break;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L,\
    \ 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L,\
    \ 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp575xhywv.d(23): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    /tmp/tmp575xhywv.d(25): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    /tmp/tmp575xhywv.d(26): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(string[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    /tmp/tmp575xhywv.d(29): Error: `switch` statement without a `default`; use `final
    switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp575xhywv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    return arr.map!(a => a.to!string).sort!((a,\
    \ b) => a.length > b.length).map!(a => a.to!long);\n}\nunittest\n{\n    alias\
    \ candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L,\
    \ 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L,\
    \ 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpslns8g26.d(18): Error: no property `map` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpslns8g26.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result = new string[arr.length];\n\
    \    foreach(i, item; arr)\n    {\n        if(item > 0 && item < 10)\n       \
    \ {\n            switch(item)\n            {\n                case 1:\n      \
    \              result[i] = \"One\";\n                    break;\n            \
    \    case 2:\n                    result[i] = \"Two\";\n                    break;\n\
    \                case 3:\n                    result[i] = \"Three\";\n       \
    \             break;\n                case 4:\n                    result[i] =\
    \ \"Four\";\n                    break;\n                case 5:\n           \
    \         result[i] = \"Five\";\n                    break;\n                case\
    \ 6:\n                    result[i] = \"Six\";\n                    break;\n \
    \               case 7:\n                    result[i] = \"Seven\";\n        \
    \            break;\n                case 8:\n                    result[i] =\
    \ \"Eight\";\n                    break;\n                case 9:\n          \
    \          result[i] = \"Nine\";\n                    break;\n            }\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwsabt4uq.d(23): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwsabt4uq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) \n  \
    \  {\n        return new string[0];\n    }\n    auto res = new string[arr.length];\n\
    \    foreach (i, e; arr) \n    {\n        if (e < 1 || e > 9) \n        {\n  \
    \          res[i] = to!string(e);\n        }\n        else \n        {\n     \
    \       res[i] = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"\
    Seven\", \"Eight\", \"Nine\"][e - 1];\n        }\n    }\n    return res;\n}\n\
    unittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L,\
    \ 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvv65xsfm.d(27): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvv65xsfm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    auto arr1 = arr.filter!(x\
    \ => x > 0 && x < 10).sort.map!(to!string).reverse;\n    return arr1.map!(x =>\
    \ \n    {\n        switch(x) \n        {\n            case \"1\": return \"One\"\
    ;\n            case \"2\": return \"Two\";\n            case \"3\": return \"\
    Three\";\n            case \"4\": return \"Four\";\n            case \"5\": return\
    \ \"Five\";\n            case \"6\": return \"Six\";\n            case \"7\":\
    \ return \"Seven\";\n            case \"8\": return \"Eight\";\n            case\
    \ \"9\": return \"Nine\";\n        }\n    });\n}\nunittest\n{\n    alias candidate\
    \ = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"\
    One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"\
    ]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptyhcqjzy.d(18): Error: no property `filter` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptyhcqjzy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result = new string[arr.length];\n\
    \    foreach(i, item; arr)\n    {\n        if(item > 0 && item < 10)\n       \
    \ {\n            result[i] = item.to!string;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzxnzr782.d(23): Error: no property `to` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzxnzr782.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    auto result = arr.filter!(a\
    \ => a > 0 && a < 10).sort.reverse;\n    return result.map!(a => [\"One\", \"\
    Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    ][a - 1]).array;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1gopow49.d(18): Error: no property `filter` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1gopow49.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164395
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result = new string[arr.length];\n\
    \    foreach(i, elem; arr)\n    {\n        if(elem > 0 && elem < 10)\n       \
    \ {\n            switch(elem)\n            {\n                case 1:\n      \
    \              result[i] = \"One\";\n                    break;\n            \
    \    case 2:\n                    result[i] = \"Two\";\n                    break;\n\
    \                case 3:\n                    result[i] = \"Three\";\n       \
    \             break;\n                case 4:\n                    result[i] =\
    \ \"Four\";\n                    break;\n                case 5:\n           \
    \         result[i] = \"Five\";\n                    break;\n                case\
    \ 6:\n                    result[i] = \"Six\";\n                    break;\n \
    \               case 7:\n                    result[i] = \"Seven\";\n        \
    \            break;\n                case 8:\n                    result[i] =\
    \ \"Eight\";\n                    break;\n                case 9:\n          \
    \          result[i] = \"Nine\";\n                    break;\n            }\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_9t6cexb.d(23): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_9t6cexb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    return arr.map!(a => a.to!string).sort!((a,\
    \ b) => a.length < b.length).map!(a => a.to!long);\n}\nunittest\n{\n    alias\
    \ candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L,\
    \ 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L,\
    \ 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgek9yfae.d(18): Error: no property `map` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgek9yfae.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164395
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result = new string[arr.length];\n\
    \    foreach(i, e; arr)\n    {\n        if (e > 0 && e < 10)\n        {\n    \
    \        switch(e)\n            {\n                case 1:\n                 \
    \   result[i] = \"One\";\n                    break;\n                case 2:\n\
    \                    result[i] = \"Two\";\n                    break;\n      \
    \          case 3:\n                    result[i] = \"Three\";\n             \
    \       break;\n                case 4:\n                    result[i] = \"Four\"\
    ;\n                    break;\n                case 5:\n                    result[i]\
    \ = \"Five\";\n                    break;\n                case 6:\n         \
    \           result[i] = \"Six\";\n                    break;\n               \
    \ case 7:\n                    result[i] = \"Seven\";\n                    break;\n\
    \                case 8:\n                    result[i] = \"Eight\";\n       \
    \             break;\n                case 9:\n                    result[i] =\
    \ \"Nine\";\n                    break;\n            }\n        }\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpd8jryf1s.d(23): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd8jryf1s.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result = new string[arr.length];\n\
    \    foreach(i, e; arr)\n    {\n        if(e > 0 && e < 10)\n        {\n     \
    \       switch(e)\n            {\n                case 1:\n                  \
    \  result[i] = \"One\";\n                    break;\n                case 2:\n\
    \                    result[i] = \"Two\";\n                    break;\n      \
    \          case 3:\n                    result[i] = \"Three\";\n             \
    \       break;\n                case 4:\n                    result[i] = \"Four\"\
    ;\n                    break;\n                case 5:\n                    result[i]\
    \ = \"Five\";\n                    break;\n                case 6:\n         \
    \           result[i] = \"Six\";\n                    break;\n               \
    \ case 7:\n                    result[i] = \"Seven\";\n                    break;\n\
    \                case 8:\n                    result[i] = \"Eight\";\n       \
    \             break;\n                case 9:\n                    result[i] =\
    \ \"Nine\";\n                    break;\n            }\n        }\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9oefmqwp.d(23): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9oefmqwp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164395
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    return arr.map!(a => a.to!string).sort!((a,\
    \ b) => a.length < b.length).map!(a => a.to!long);\n}\nunittest\n{\n    alias\
    \ candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L,\
    \ 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L,\
    \ 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgek9yfae.d(18): Error: no property `map` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgek9yfae.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164395
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) return\
    \ [];\n    auto a = arr.filter!(x => x >= 1 && x <= 9).sort.reverse;\n    return\
    \ a.map!(x => [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"][x - 1]);\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2x5ua0yj.d(19): Error: no property `filter` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2x5ua0yj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result = new string[arr.length];\n\
    \    foreach(i, e; arr)\n    {\n        if (e > 0 && e < 10)\n        {\n    \
    \        switch(e)\n            {\n                case 1:\n                 \
    \   result[i] = \"One\";\n                    break;\n                case 2:\n\
    \                    result[i] = \"Two\";\n                    break;\n      \
    \          case 3:\n                    result[i] = \"Three\";\n             \
    \       break;\n                case 4:\n                    result[i] = \"Four\"\
    ;\n                    break;\n                case 5:\n                    result[i]\
    \ = \"Five\";\n                    break;\n                case 6:\n         \
    \           result[i] = \"Six\";\n                    break;\n               \
    \ case 7:\n                    result[i] = \"Seven\";\n                    break;\n\
    \                case 8:\n                    result[i] = \"Eight\";\n       \
    \             break;\n                case 9:\n                    result[i] =\
    \ \"Nine\";\n                    break;\n            }\n        }\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpd8jryf1s.d(23): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd8jryf1s.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result = new string[arr.length];\n\
    \    foreach(i,e; arr)\n    {\n        if(e < 1 || e > 9)\n            continue;\n\
    \        switch(e)\n        {\n            case 1:\n                result[i]\
    \ = \"One\";\n                break;\n            case 2:\n                result[i]\
    \ = \"Two\";\n                break;\n            case 3:\n                result[i]\
    \ = \"Three\";\n                break;\n            case 4:\n                result[i]\
    \ = \"Four\";\n                break;\n            case 5:\n                result[i]\
    \ = \"Five\";\n                break;\n            case 6:\n                result[i]\
    \ = \"Six\";\n                break;\n            case 7:\n                result[i]\
    \ = \"Seven\";\n                break;\n            case 8:\n                result[i]\
    \ = \"Eight\";\n                break;\n            case 9:\n                result[i]\
    \ = \"Nine\";\n                break;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0d1kkt9t.d(23): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0d1kkt9t.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result = new string[arr.length];\n\
    \    foreach(i, v; arr)\n    {\n        if(v > 0 && v < 10)\n        {\n     \
    \       switch(v)\n            {\n                case 1:\n                  \
    \  result[i] = \"One\";\n                    break;\n                case 2:\n\
    \                    result[i] = \"Two\";\n                    break;\n      \
    \          case 3:\n                    result[i] = \"Three\";\n             \
    \       break;\n                case 4:\n                    result[i] = \"Four\"\
    ;\n                    break;\n                case 5:\n                    result[i]\
    \ = \"Five\";\n                    break;\n                case 6:\n         \
    \           result[i] = \"Six\";\n                    break;\n               \
    \ case 7:\n                    result[i] = \"Seven\";\n                    break;\n\
    \                case 8:\n                    result[i] = \"Eight\";\n       \
    \             break;\n                case 9:\n                    result[i] =\
    \ \"Nine\";\n                    break;\n            }\n        }\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppwn6d4ot.d(23): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppwn6d4ot.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    string[] res = new string[arr.length];\n\
    \    foreach(i, v; arr)\n    {\n        if(v < 1 || v > 9)\n            res[i]\
    \ = \"\";\n        else\n            res[i] = v.to!string;\n    }\n    res.sort;\n\
    \    res.reverse;\n    return res;\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpakq2208f.d(24): Error: no property `to` for type `long`

    /tmp/tmpakq2208f.d(26): Error: no property `sort` for type `string[]`

    /tmp/tmpakq2208f.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(string[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpakq2208f.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result = new string[arr.length];\n\
    \    foreach(i, e; arr)\n    {\n        if(e > 0 && e < 10)\n        {\n     \
    \       result[i] = to!string(e);\n        }\n    }\n    sort(result);\n    reverse(result);\n\
    \    foreach(i, e; result)\n    {\n        switch(e)\n        {\n            case\
    \ \"1\":\n                result[i] = \"One\";\n                break;\n     \
    \       case \"2\":\n                result[i] = \"Two\";\n                break;\n\
    \            case \"3\":\n                result[i] = \"Three\";\n           \
    \     break;\n            case \"4\":\n                result[i] = \"Four\";\n\
    \                break;\n            case \"5\":\n                result[i] =\
    \ \"Five\";\n                break;\n            case \"6\":\n               \
    \ result[i] = \"Six\";\n                break;\n            case \"7\":\n    \
    \            result[i] = \"Seven\";\n                break;\n            case\
    \ \"8\":\n                result[i] = \"Eight\";\n                break;\n   \
    \         case \"9\":\n                result[i] = \"Nine\";\n               \
    \ break;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"\
    One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"\
    ]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiasyvsui.d(23): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    /tmp/tmpiasyvsui.d(26): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    /tmp/tmpiasyvsui.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(string[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    /tmp/tmpiasyvsui.d(30): Error: `switch` statement without a `default`; use `final
    switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiasyvsui.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164395
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result = new string[arr.length];\n\
    \    foreach(i, v; arr)\n    {\n        if(v > 0 && v < 10)\n        {\n     \
    \       result[i] = to!string(v);\n        }\n    }\n    sort(result);\n    reverse(result);\n\
    \    foreach(i, v; result)\n    {\n        switch(v)\n        {\n            case\
    \ \"1\":\n                result[i] = \"One\";\n                break;\n     \
    \       case \"2\":\n                result[i] = \"Two\";\n                break;\n\
    \            case \"3\":\n                result[i] = \"Three\";\n           \
    \     break;\n            case \"4\":\n                result[i] = \"Four\";\n\
    \                break;\n            case \"5\":\n                result[i] =\
    \ \"Five\";\n                break;\n            case \"6\":\n               \
    \ result[i] = \"Six\";\n                break;\n            case \"7\":\n    \
    \            result[i] = \"Seven\";\n                break;\n            case\
    \ \"8\":\n                result[i] = \"Eight\";\n                break;\n   \
    \         case \"9\":\n                result[i] = \"Nine\";\n               \
    \ break;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"\
    One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"\
    ]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpl74k82m7.d(23): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    /tmp/tmpl74k82m7.d(26): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    /tmp/tmpl74k82m7.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(string[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    /tmp/tmpl74k82m7.d(30): Error: `switch` statement without a `default`; use `final
    switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl74k82m7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164395
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result = new string[arr.length];\n\
    \    foreach(i, item; arr)\n    {\n        if(item >= 1 && item <= 9)\n      \
    \  {\n            switch(item)\n            {\n                case 1:\n     \
    \               result[i] = \"One\";\n                    break;\n           \
    \     case 2:\n                    result[i] = \"Two\";\n                    break;\n\
    \                case 3:\n                    result[i] = \"Three\";\n       \
    \             break;\n                case 4:\n                    result[i] =\
    \ \"Four\";\n                    break;\n                case 5:\n           \
    \         result[i] = \"Five\";\n                    break;\n                case\
    \ 6:\n                    result[i] = \"Six\";\n                    break;\n \
    \               case 7:\n                    result[i] = \"Seven\";\n        \
    \            break;\n                case 8:\n                    result[i] =\
    \ \"Eight\";\n                    break;\n                case 9:\n          \
    \          result[i] = \"Nine\";\n                    break;\n            }\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmi6slrsq.d(23): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmi6slrsq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    return arr.map!(a => a.to!string).sort!((a,\
    \ b) => a.length > b.length).array;\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_24hx3za.d(18): Error: no property `map` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_24hx3za.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164395
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result = new string[arr.length];\n\
    \    foreach(i, e; arr)\n    {\n        if(e > 0 && e < 10)\n        {\n     \
    \       result[i] = to!string(e);\n        }\n    }\n    sort(result);\n    reverse(result);\n\
    \    foreach(i, e; result)\n    {\n        switch(e)\n        {\n            case\
    \ \"1\":\n                result[i] = \"One\";\n                break;\n     \
    \       case \"2\":\n                result[i] = \"Two\";\n                break;\n\
    \            case \"3\":\n                result[i] = \"Three\";\n           \
    \     break;\n            case \"4\":\n                result[i] = \"Four\";\n\
    \                break;\n            case \"5\":\n                result[i] =\
    \ \"Five\";\n                break;\n            case \"6\":\n               \
    \ result[i] = \"Six\";\n                break;\n            case \"7\":\n    \
    \            result[i] = \"Seven\";\n                break;\n            case\
    \ \"8\":\n                result[i] = \"Eight\";\n                break;\n   \
    \         case \"9\":\n                result[i] = \"Nine\";\n               \
    \ break;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"\
    One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"\
    ]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiasyvsui.d(23): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    /tmp/tmpiasyvsui.d(26): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    /tmp/tmpiasyvsui.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(string[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    /tmp/tmpiasyvsui.d(30): Error: `switch` statement without a `default`; use `final
    switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiasyvsui.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164395
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    auto arr_ = arr.map!(a =>\
    \ a.to!string).filter!(a => a.length <= 1).map!(a => a.to!long).sort;\n    arr_.reverse;\n\
    \    return arr_.map!(a => a == 1 ? \"One\" : a == 2 ? \"Two\" : a == 3 ? \"Three\"\
    \ : a == 4 ? \"Four\" : a == 5 ? \"Five\" : a == 6 ? \"Six\" : a == 7 ? \"Seven\"\
    \ : a == 8 ? \"Eight\" : a == 9 ? \"Nine\" : \"\").array;\n}\nunittest\n{\n  \
    \  alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L,\
    \ 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"\
    One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxmo8tfy2.d(18): Error: no property `map` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxmo8tfy2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    string[] res;\n    foreach(elem;\
    \ arr)\n    {\n        if(elem < 1 || elem > 9)\n            continue;\n     \
    \   res ~= to!string(elem);\n    }\n    res.sort!((a, b) => a.length < b.length);\n\
    \    return res;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5dpb85sx.d(23): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    /tmp/tmp5dpb85sx.d(25): Error: no property `sort` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5dpb85sx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result = new string[arr.length];\n\
    \    foreach(i, e; arr)\n    {\n        if (e > 0 && e < 10)\n        {\n    \
    \        switch(e)\n            {\n                case 1:\n                 \
    \   result[i] = \"One\";\n                    break;\n                case 2:\n\
    \                    result[i] = \"Two\";\n                    break;\n      \
    \          case 3:\n                    result[i] = \"Three\";\n             \
    \       break;\n                case 4:\n                    result[i] = \"Four\"\
    ;\n                    break;\n                case 5:\n                    result[i]\
    \ = \"Five\";\n                    break;\n                case 6:\n         \
    \           result[i] = \"Six\";\n                    break;\n               \
    \ case 7:\n                    result[i] = \"Seven\";\n                    break;\n\
    \                case 8:\n                    result[i] = \"Eight\";\n       \
    \             break;\n                case 9:\n                    result[i] =\
    \ \"Nine\";\n                    break;\n            }\n        }\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpd8jryf1s.d(23): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd8jryf1s.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result = new string[arr.length];\n\
    \    foreach(i, e; arr)\n    {\n        if (e > 0 && e < 10)\n        {\n    \
    \        result[i] = to!string(e);\n        }\n    }\n    sort(result);\n    reverse(result);\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvfgavwpm.d(23): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    /tmp/tmpvfgavwpm.d(26): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    /tmp/tmpvfgavwpm.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(string[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvfgavwpm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    auto result = arr.filter!(x\
    \ => x > 0 && x < 10).sort.reverse;\n    return result.map!(x => [\"One\", \"\
    Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    ][x - 1]).array;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpo1cd6_nu.d(18): Error: no property `filter` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo1cd6_nu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164395
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result = new string[arr.length];\n\
    \    foreach(i, e; arr)\n    {\n        if (e > 0 && e < 10)\n        {\n    \
    \        switch(e)\n            {\n                case 1:\n                 \
    \   result[i] = \"One\";\n                    break;\n                case 2:\n\
    \                    result[i] = \"Two\";\n                    break;\n      \
    \          case 3:\n                    result[i] = \"Three\";\n             \
    \       break;\n                case 4:\n                    result[i] = \"Four\"\
    ;\n                    break;\n                case 5:\n                    result[i]\
    \ = \"Five\";\n                    break;\n                case 6:\n         \
    \           result[i] = \"Six\";\n                    break;\n               \
    \ case 7:\n                    result[i] = \"Seven\";\n                    break;\n\
    \                case 8:\n                    result[i] = \"Eight\";\n       \
    \             break;\n                case 9:\n                    result[i] =\
    \ \"Nine\";\n                    break;\n            }\n        }\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpd8jryf1s.d(23): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd8jryf1s.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    return arr.map!(a => a.to!string).sort!((a,\
    \ b) => a.length < b.length).map!(a => a.to!long);\n}\nunittest\n{\n    alias\
    \ candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L,\
    \ 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L,\
    \ 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgek9yfae.d(18): Error: no property `map` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgek9yfae.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164395
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) \n  \
    \  {\n        return new string[0];\n    }\n    else \n    {\n        auto result\
    \ = new string[arr.length];\n        foreach (i, e; arr) \n        {\n       \
    \     if (e > 0 && e < 10) \n            {\n                result[i] = to!string(e);\n\
    \            }\n        }\n        sort(result);\n        reverse(result);\n \
    \       foreach (i, e; result) \n        {\n            if (e == \"1\") \n   \
    \         {\n                result[i] = \"One\";\n            }\n           \
    \ else if (e == \"2\") \n            {\n                result[i] = \"Two\";\n\
    \            }\n            else if (e == \"3\") \n            {\n           \
    \     result[i] = \"Three\";\n            }\n            else if (e == \"4\")\
    \ \n            {\n                result[i] = \"Four\";\n            }\n    \
    \        else if (e == \"5\") \n            {\n                result[i] = \"\
    Five\";\n            }\n            else if (e == \"6\") \n            {\n   \
    \             result[i] = \"Six\";\n            }\n            else if (e == \"\
    7\") \n            {\n                result[i] = \"Seven\";\n            }\n\
    \            else if (e == \"8\") \n            {\n                result[i] =\
    \ \"Eight\";\n            }\n            else if (e == \"9\") \n            {\n\
    \                result[i] = \"Nine\";\n            }\n        }\n        return\
    \ result;\n    }\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphoxt16a8.d(29): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    /tmp/tmphoxt16a8.d(32): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    /tmp/tmphoxt16a8.d(33): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(string[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphoxt16a8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0)\n   \
    \     return new string[0];\n    else\n    {\n        long[] temp = new long[arr.length];\n\
    \        int count = 0;\n        foreach (long i; arr)\n        {\n          \
    \  if (i >= 1 && i <= 9)\n            {\n                temp[count] = i;\n  \
    \              count++;\n            }\n        }\n        temp = temp[0..count];\n\
    \        temp.sort;\n        temp.reverse;\n        string[] result = new string[temp.length];\n\
    \        foreach (int i; temp)\n        {\n            switch (i)\n          \
    \  {\n                case 1:\n                    result[i] = \"One\";\n    \
    \                break;\n                case 2:\n                    result[i]\
    \ = \"Two\";\n                    break;\n                case 3:\n          \
    \          result[i] = \"Three\";\n                    break;\n              \
    \  case 4:\n                    result[i] = \"Four\";\n                    break;\n\
    \                case 5:\n                    result[i] = \"Five\";\n        \
    \            break;\n                case 6:\n                    result[i] =\
    \ \"Six\";\n                    break;\n                case 7:\n            \
    \        result[i] = \"Seven\";\n                    break;\n                case\
    \ 8:\n                    result[i] = \"Eight\";\n                    break;\n\
    \                case 9:\n                    result[i] = \"Nine\";\n        \
    \            break;\n            }\n        }\n        return result;\n    }\n\
    }\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpb4k0vzl3.d(33): Error: no property `sort` for type `long[]`

    /tmp/tmpb4k0vzl3.d(34): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(long[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    /tmp/tmpb4k0vzl3.d(36): Error: cannot implicitly convert expression `__r75[__key76]`
    of type `long` to `int`

    /tmp/tmpb4k0vzl3.d(38): Error: `switch` statement without a `default`; use `final
    switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb4k0vzl3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result = new string[arr.length];\n\
    \    foreach(i, e; arr)\n    {\n        switch(e)\n        {\n            case\
    \ 1:\n                result[i] = \"One\";\n                break;\n         \
    \   case 2:\n                result[i] = \"Two\";\n                break;\n  \
    \          case 3:\n                result[i] = \"Three\";\n                break;\n\
    \            case 4:\n                result[i] = \"Four\";\n                break;\n\
    \            case 5:\n                result[i] = \"Five\";\n                break;\n\
    \            case 6:\n                result[i] = \"Six\";\n                break;\n\
    \            case 7:\n                result[i] = \"Seven\";\n               \
    \ break;\n            case 8:\n                result[i] = \"Eight\";\n      \
    \          break;\n            case 9:\n                result[i] = \"Nine\";\n\
    \                break;\n            default:\n                break;\n      \
    \  }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpazapx7u_.d(60): unittest failure

    ----------------

    ??:? _d_unittestp [0x42946d]

    ??:? void tmpazapx7u_.__unittest_L56_C1() [0x4282bb]

    ??:? void tmpazapx7u_.__modtest() [0x4286d4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42e043]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x4291c6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ace9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ad78]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42ac75]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42919d]

    ??:? runModuleUnitTests [0x42de19]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429930]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result = new string[arr.length];\n\
    \    foreach(i, v; arr) \n    {\n        if (v >= 1 && v <= 9) \n        {\n \
    \           result[i] = to!string(v);\n        }\n    }\n    sort(result);\n \
    \   reverse(result);\n    foreach(i, v; result) \n    {\n        switch(v) \n\
    \        {\n            case \"1\":\n                result[i] = \"One\";\n  \
    \              break;\n            case \"2\":\n                result[i] = \"\
    Two\";\n                break;\n            case \"3\":\n                result[i]\
    \ = \"Three\";\n                break;\n            case \"4\":\n            \
    \    result[i] = \"Four\";\n                break;\n            case \"5\":\n\
    \                result[i] = \"Five\";\n                break;\n            case\
    \ \"6\":\n                result[i] = \"Six\";\n                break;\n     \
    \       case \"7\":\n                result[i] = \"Seven\";\n                break;\n\
    \            case \"8\":\n                result[i] = \"Eight\";\n           \
    \     break;\n            case \"9\":\n                result[i] = \"Nine\";\n\
    \                break;\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkjxslmgy.d(23): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    /tmp/tmpkjxslmgy.d(26): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    /tmp/tmpkjxslmgy.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(string[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    /tmp/tmpkjxslmgy.d(30): Error: `switch` statement without a `default`; use `final
    switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkjxslmgy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result = new string[arr.length];\n\
    \    foreach(i, e; arr)\n    {\n        if(e < 1 || e > 9)\n            result[i]\
    \ = \"\";\n        else\n            result[i] = to!string(e);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9voe9qne.d(24): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9voe9qne.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result = new string[arr.length];\n\
    \    foreach(i,e; arr)\n    {\n        if(e > 0 && e < 10)\n        {\n      \
    \      switch(e)\n            {\n                case 1:\n                   \
    \ result[i] = \"One\";\n                    break;\n                case 2:\n\
    \                    result[i] = \"Two\";\n                    break;\n      \
    \          case 3:\n                    result[i] = \"Three\";\n             \
    \       break;\n                case 4:\n                    result[i] = \"Four\"\
    ;\n                    break;\n                case 5:\n                    result[i]\
    \ = \"Five\";\n                    break;\n                case 6:\n         \
    \           result[i] = \"Six\";\n                    break;\n               \
    \ case 7:\n                    result[i] = \"Seven\";\n                    break;\n\
    \                case 8:\n                    result[i] = \"Eight\";\n       \
    \             break;\n                case 9:\n                    result[i] =\
    \ \"Nine\";\n                    break;\n            }\n        }\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfdwpf1ip.d(23): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfdwpf1ip.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result = new string[arr.length];\n\
    \    foreach(i, e; arr)\n    {\n        if(e > 0 && e < 10)\n        {\n     \
    \       switch(e)\n            {\n                case 1:\n                  \
    \  result[i] = \"One\";\n                    break;\n                case 2:\n\
    \                    result[i] = \"Two\";\n                    break;\n      \
    \          case 3:\n                    result[i] = \"Three\";\n             \
    \       break;\n                case 4:\n                    result[i] = \"Four\"\
    ;\n                    break;\n                case 5:\n                    result[i]\
    \ = \"Five\";\n                    break;\n                case 6:\n         \
    \           result[i] = \"Six\";\n                    break;\n               \
    \ case 7:\n                    result[i] = \"Seven\";\n                    break;\n\
    \                case 8:\n                    result[i] = \"Eight\";\n       \
    \             break;\n                case 9:\n                    result[i] =\
    \ \"Nine\";\n                    break;\n            }\n        }\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9oefmqwp.d(23): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9oefmqwp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164395
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) return\
    \ [];\n    auto arr2 = arr.filter!(a => a > 0 && a < 10).sort.map!(a => a.to!string).reverse;\n\
    \    return arr2.map!(a => a.to!string).map!(a => a == \"1\" ? \"One\" : a ==\
    \ \"2\" ? \"Two\" : a == \"3\" ? \"Three\" : a == \"4\" ? \"Four\" : a == \"5\"\
    \ ? \"Five\" : a == \"6\" ? \"Six\" : a == \"7\" ? \"Seven\" : a == \"8\" ? \"\
    Eight\" : a == \"9\" ? \"Nine\" : \"\").array;\n}\nunittest\n{\n    alias candidate\
    \ = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"\
    One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"\
    ]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp22sz_a29.d(19): Error: no property `filter` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp22sz_a29.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    return arr.map!(a => a.to!string).sort!((a,\
    \ b) => a.length < b.length);\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5zxyz8tm.d(18): Error: no property `map` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5zxyz8tm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    int[] numbers = arr.filter!(a\
    \ => a >= 1 && a <= 9).sort!((a, b) => a > b).map!(a => cast(int)a);\n    string[]\
    \ result = new string[numbers.length];\n    foreach(i, n; numbers)\n    {\n  \
    \      switch(n)\n        {\n            case 1: result[i] = \"One\"; break;\n\
    \            case 2: result[i] = \"Two\"; break;\n            case 3: result[i]\
    \ = \"Three\"; break;\n            case 4: result[i] = \"Four\"; break;\n    \
    \        case 5: result[i] = \"Five\"; break;\n            case 6: result[i] =\
    \ \"Six\"; break;\n            case 7: result[i] = \"Seven\"; break;\n       \
    \     case 8: result[i] = \"Eight\"; break;\n            case 9: result[i] = \"\
    Nine\"; break;\n        }\n    }\n    return result.reverse;\n}\nunittest\n{\n\
    \    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8fhknkwl.d(18): Error: no property `filter` for type `long[]`

    /tmp/tmp8fhknkwl.d(22): Error: `switch` statement without a `default`; use `final
    switch` or add `default: assert(0);` or add `default: break;`

    /tmp/tmp8fhknkwl.d(35): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(string[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8fhknkwl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    string[] res = new string[arr.length];\n\
    \    foreach(i, v; arr)\n    {\n        if(v > 0 && v < 10)\n        {\n     \
    \       res[i] = to!string(v);\n        }\n    }\n    return res.sort().reverse();\n\
    }\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4h5bhxww.d(23): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    /tmp/tmp4h5bhxww.d(26): Error: no property `sort` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4h5bhxww.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    return arr.map!(a => a.to!string).filter!(a\
    \ => a.length == 1).map!(a => a.to!int).sort.reverse.map!(a => a.to!string).map!(a\
    \ => a.to!int).map!(a => a.to!string).map!(a => a.to!int).map!(a => a.to!string).map!(a\
    \ => a.to!int).map!(a => a.to!string).map!(a => a.to!int).map!(a => a.to!string).map!(a\
    \ => a.to!int).map!(a => a.to!string).map!(a => a.to!int).map!(a => a.to!string).map!(a\
    \ => a.to!int).map!(a => a.to!string).map!(a => a.to!int).map!(a => a.to!string).map!(a\
    \ => a.to!int).map!(a => a.to!string).map!(a => a.to!int).map!(a => a.to!string).map!(a\
    \ => a.to!int).map!(a => a.to!string).map!(a => a.to!int).map!(a => a.to!string).map!(a\
    \ => a.to!int).map!(a => a.to!string).map!(a => a.to!int).map!(a => a.to!string).map!(a\
    \ => a.to!int).map!(a => a.to!string).map!(a => a.to!int).map!(a => a.to!string).map!(a\
    \ => a.to!int).map!(a => a.to!string).map!(a => a.to!int).map!(a => a.to!string).map!(a\
    \ => a.to!int).map!(a => a.to!string).map!(a => a.to!int).map!(a => a.to!string).map!(a\
    \ => a.to!int).map!(a => a\nunittest\n{\n    alias candidate = by_length;\n\n\
    \    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpcgd62pmy.d(19): Error: found `unittest` when expecting `)` following
    template argument list

    /tmp/tmpcgd62pmy.d(20): Error: found `{` when expecting `;` following `return`
    statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcgd62pmy.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result = new string[arr.length];\n\
    \    foreach(i, e; arr)\n    {\n        if (e > 0 && e < 10)\n        {\n    \
    \        result[i] = to!string(e);\n        }\n    }\n    sort(result);\n    reverse(result);\n\
    \    foreach(i, e; result)\n    {\n        switch(e)\n        {\n            case\
    \ \"1\":\n                result[i] = \"One\";\n                break;\n     \
    \       case \"2\":\n                result[i] = \"Two\";\n                break;\n\
    \            case \"3\":\n                result[i] = \"Three\";\n           \
    \     break;\n            case \"4\":\n                result[i] = \"Four\";\n\
    \                break;\n            case \"5\":\n                result[i] =\
    \ \"Five\";\n                break;\n            case \"6\":\n               \
    \ result[i] = \"Six\";\n                break;\n            case \"7\":\n    \
    \            result[i] = \"Seven\";\n                break;\n            case\
    \ \"8\":\n                result[i] = \"Eight\";\n                break;\n   \
    \         case \"9\":\n                result[i] = \"Nine\";\n               \
    \ break;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"\
    One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"\
    ]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxtn9aui6.d(23): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    /tmp/tmpxtn9aui6.d(26): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    /tmp/tmpxtn9aui6.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(string[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    /tmp/tmpxtn9aui6.d(30): Error: `switch` statement without a `default`; use `final
    switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxtn9aui6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164395
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result = new string[arr.length];\n\
    \    foreach(i, e; arr)\n    {\n        if(e > 0 && e < 10)\n        {\n     \
    \       result[i] = to!string(e);\n        }\n    }\n    sort(result);\n    reverse(result);\n\
    \    foreach(i, e; result)\n    {\n        switch(e)\n        {\n            case\
    \ \"1\":\n                result[i] = \"One\";\n                break;\n     \
    \       case \"2\":\n                result[i] = \"Two\";\n                break;\n\
    \            case \"3\":\n                result[i] = \"Three\";\n           \
    \     break;\n            case \"4\":\n                result[i] = \"Four\";\n\
    \                break;\n            case \"5\":\n                result[i] =\
    \ \"Five\";\n                break;\n            case \"6\":\n               \
    \ result[i] = \"Six\";\n                break;\n            case \"7\":\n    \
    \            result[i] = \"Seven\";\n                break;\n            case\
    \ \"8\":\n                result[i] = \"Eight\";\n                break;\n   \
    \         case \"9\":\n                result[i] = \"Nine\";\n               \
    \ break;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"\
    One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"\
    ]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiasyvsui.d(23): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    /tmp/tmpiasyvsui.d(26): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    /tmp/tmpiasyvsui.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(string[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    /tmp/tmpiasyvsui.d(30): Error: `switch` statement without a `default`; use `final
    switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiasyvsui.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164395
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    return arr.map!(a => a.to!string).filter!(a\
    \ => a.length == 3).map!(a => a.toUpper).array;\n}\nunittest\n{\n    alias candidate\
    \ = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"\
    One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"\
    ]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpivg37v9a.d(18): Error: no property `map` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpivg37v9a.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    return arr.map!(a => a.to!string).sort!((a,\
    \ b) => a.length < b.length).array;\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp55eha4uc.d(18): Error: no property `map` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp55eha4uc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result = new string[arr.length];\n\
    \    foreach(i, v; arr)\n    {\n        if (v > 0 && v < 10)\n        {\n    \
    \        result[i] = to!string(v);\n        }\n    }\n    sort(result);\n    reverse(result);\n\
    \    foreach(i, v; result)\n    {\n        switch(to!long(v))\n        {\n   \
    \         case 1:\n                result[i] = \"One\";\n                break;\n\
    \            case 2:\n                result[i] = \"Two\";\n                break;\n\
    \            case 3:\n                result[i] = \"Three\";\n               \
    \ break;\n            case 4:\n                result[i] = \"Four\";\n       \
    \         break;\n            case 5:\n                result[i] = \"Five\";\n\
    \                break;\n            case 6:\n                result[i] = \"Six\"\
    ;\n                break;\n            case 7:\n                result[i] = \"\
    Seven\";\n                break;\n            case 8:\n                result[i]\
    \ = \"Eight\";\n                break;\n            case 9:\n                result[i]\
    \ = \"Nine\";\n                break;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptygmkftp.d(23): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    /tmp/tmptygmkftp.d(26): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    /tmp/tmptygmkftp.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(string[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    /tmp/tmptygmkftp.d(30): Error: template instance `to!long` template `to` is not
    defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptygmkftp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    return arr.map!(a => a.to!string).sort!((a,\
    \ b) => a.length < b.length);\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5zxyz8tm.d(18): Error: no property `map` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5zxyz8tm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result = new string[arr.length];\n\
    \    foreach(i, e; arr)\n    {\n        if(e < 1 || e > 9)\n            continue;\n\
    \        switch(e)\n        {\n            case 1:\n                result[i]\
    \ = \"One\";\n                break;\n            case 2:\n                result[i]\
    \ = \"Two\";\n                break;\n            case 3:\n                result[i]\
    \ = \"Three\";\n                break;\n            case 4:\n                result[i]\
    \ = \"Four\";\n                break;\n            case 5:\n                result[i]\
    \ = \"Five\";\n                break;\n            case 6:\n                result[i]\
    \ = \"Six\";\n                break;\n            case 7:\n                result[i]\
    \ = \"Seven\";\n                break;\n            case 8:\n                result[i]\
    \ = \"Eight\";\n                break;\n            case 9:\n                result[i]\
    \ = \"Nine\";\n                break;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpob5vgzmr.d(23): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpob5vgzmr.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164395
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result = new string[arr.length];\n\
    \    foreach(i, e; arr)\n    {\n        if(e > 0 && e < 10)\n        {\n     \
    \       result[i] = to!string(e);\n        }\n    }\n    sort(result);\n    reverse(result);\n\
    \    foreach(i, e; result)\n    {\n        switch(e)\n        {\n            case\
    \ \"1\":\n                result[i] = \"One\";\n                break;\n     \
    \       case \"2\":\n                result[i] = \"Two\";\n                break;\n\
    \            case \"3\":\n                result[i] = \"Three\";\n           \
    \     break;\n            case \"4\":\n                result[i] = \"Four\";\n\
    \                break;\n            case \"5\":\n                result[i] =\
    \ \"Five\";\n                break;\n            case \"6\":\n               \
    \ result[i] = \"Six\";\n                break;\n            case \"7\":\n    \
    \            result[i] = \"Seven\";\n                break;\n            case\
    \ \"8\":\n                result[i] = \"Eight\";\n                break;\n   \
    \         case \"9\":\n                result[i] = \"Nine\";\n               \
    \ break;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"\
    One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"\
    ]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiasyvsui.d(23): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    /tmp/tmpiasyvsui.d(26): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    /tmp/tmpiasyvsui.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(string[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    /tmp/tmpiasyvsui.d(30): Error: `switch` statement without a `default`; use `final
    switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiasyvsui.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164395
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    auto result = arr.filter!(a\
    \ => a > 0 && a < 10).sort.reverse;\n    return result.map!(a => [\"One\", \"\
    Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    ][a - 1]).array;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1gopow49.d(18): Error: no property `filter` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1gopow49.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164395
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result = new string[arr.length];\n\
    \    foreach(i, v; arr)\n    {\n        if (v > 0 && v < 10)\n        {\n    \
    \        result[i] = to!string(v);\n        }\n    }\n    sort(result);\n    reverse(result);\n\
    \    foreach(i, v; result)\n    {\n        switch(v)\n        {\n            case\
    \ \"1\":\n                result[i] = \"One\";\n                break;\n     \
    \       case \"2\":\n                result[i] = \"Two\";\n                break;\n\
    \            case \"3\":\n                result[i] = \"Three\";\n           \
    \     break;\n            case \"4\":\n                result[i] = \"Four\";\n\
    \                break;\n            case \"5\":\n                result[i] =\
    \ \"Five\";\n                break;\n            case \"6\":\n               \
    \ result[i] = \"Six\";\n                break;\n            case \"7\":\n    \
    \            result[i] = \"Seven\";\n                break;\n            case\
    \ \"8\":\n                result[i] = \"Eight\";\n                break;\n   \
    \         case \"9\":\n                result[i] = \"Nine\";\n               \
    \ break;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"\
    One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"\
    ]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpw1kmmb2w.d(23): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    /tmp/tmpw1kmmb2w.d(26): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    /tmp/tmpw1kmmb2w.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(string[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    /tmp/tmpw1kmmb2w.d(30): Error: `switch` statement without a `default`; use `final
    switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw1kmmb2w.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    auto arr2 = arr.filter!(x\
    \ => x >= 1 && x <= 9).sort.reverse;\n    return arr2.map!(x => [\"One\", \"Two\"\
    , \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"][x -\
    \ 1]);\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp44354d0w.d(18): Error: no property `filter` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp44354d0w.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result = new string[arr.length];\n\
    \    foreach(i, e; arr)\n    {\n        if(e > 0 && e < 10)\n        {\n     \
    \       switch(e)\n            {\n                case 1:\n                  \
    \  result[i] = \"One\";\n                    break;\n                case 2:\n\
    \                    result[i] = \"Two\";\n                    break;\n      \
    \          case 3:\n                    result[i] = \"Three\";\n             \
    \       break;\n                case 4:\n                    result[i] = \"Four\"\
    ;\n                    break;\n                case 5:\n                    result[i]\
    \ = \"Five\";\n                    break;\n                case 6:\n         \
    \           result[i] = \"Six\";\n                    break;\n               \
    \ case 7:\n                    result[i] = \"Seven\";\n                    break;\n\
    \                case 8:\n                    result[i] = \"Eight\";\n       \
    \             break;\n                case 9:\n                    result[i] =\
    \ \"Nine\";\n                    break;\n            }\n        }\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9oefmqwp.d(23): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9oefmqwp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164395
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result = new string[arr.length];\n\
    \    foreach(i, v; arr)\n    {\n        if (v < 1 || v > 9)\n            continue;\n\
    \        result[i] = to!string(v);\n    }\n    sort(result);\n    reverse(result);\n\
    \    foreach(i, v; result)\n    {\n        switch(v)\n        {\n            case\
    \ \"1\":\n                result[i] = \"One\";\n                break;\n     \
    \       case \"2\":\n                result[i] = \"Two\";\n                break;\n\
    \            case \"3\":\n                result[i] = \"Three\";\n           \
    \     break;\n            case \"4\":\n                result[i] = \"Four\";\n\
    \                break;\n            case \"5\":\n                result[i] =\
    \ \"Five\";\n                break;\n            case \"6\":\n               \
    \ result[i] = \"Six\";\n                break;\n            case \"7\":\n    \
    \            result[i] = \"Seven\";\n                break;\n            case\
    \ \"8\":\n                result[i] = \"Eight\";\n                break;\n   \
    \         case \"9\":\n                result[i] = \"Nine\";\n               \
    \ break;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"\
    One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"\
    ]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmph7v50m17.d(23): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    /tmp/tmph7v50m17.d(25): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    /tmp/tmph7v50m17.d(26): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(string[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    /tmp/tmph7v50m17.d(29): Error: `switch` statement without a `default`; use `final
    switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph7v50m17.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result = new string[arr.length];\n\
    \    foreach(i, e; arr)\n    {\n        if (e > 0 && e < 10)\n        {\n    \
    \        switch(e)\n            {\n                case 1:\n                 \
    \   result[i] = \"One\";\n                    break;\n                case 2:\n\
    \                    result[i] = \"Two\";\n                    break;\n      \
    \          case 3:\n                    result[i] = \"Three\";\n             \
    \       break;\n                case 4:\n                    result[i] = \"Four\"\
    ;\n                    break;\n                case 5:\n                    result[i]\
    \ = \"Five\";\n                    break;\n                case 6:\n         \
    \           result[i] = \"Six\";\n                    break;\n               \
    \ case 7:\n                    result[i] = \"Seven\";\n                    break;\n\
    \                case 8:\n                    result[i] = \"Eight\";\n       \
    \             break;\n                case 9:\n                    result[i] =\
    \ \"Nine\";\n                    break;\n            }\n        }\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpd8jryf1s.d(23): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd8jryf1s.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    string[] res = new string[arr.length];\n\
    \    int j = 0;\n    for (int i = 0; i < arr.length; i++)\n    {\n        if (arr[i]\
    \ >= 1 && arr[i] <= 9)\n        {\n            res[j] = to!string(arr[i]);\n \
    \           j++;\n        }\n    }\n    res = res[0..j];\n    res.sort!((a, b)\
    \ => a.length < b.length);\n    res.reverse;\n    return res;\n}\nunittest\n{\n\
    \    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpl_y5pthd.d(24): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    /tmp/tmpl_y5pthd.d(29): Error: no property `sort` for type `string[]`

    /tmp/tmpl_y5pthd.d(30): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(string[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl_y5pthd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    string[] res = new string[arr.length];\n\
    \    foreach(i, e; arr)\n    {\n        if (e > 0 && e < 10)\n        {\n    \
    \        res[i] = to!string(e);\n        }\n    }\n    res = res.sort();\n   \
    \ res = res.reverse();\n    foreach(i, e; res)\n    {\n        switch(to!long(e))\n\
    \        {\n            case 1:\n                res[i] = \"One\";\n         \
    \       break;\n            case 2:\n                res[i] = \"Two\";\n     \
    \           break;\n            case 3:\n                res[i] = \"Three\";\n\
    \                break;\n            case 4:\n                res[i] = \"Four\"\
    ;\n                break;\n            case 5:\n                res[i] = \"Five\"\
    ;\n                break;\n            case 6:\n                res[i] = \"Six\"\
    ;\n                break;\n            case 7:\n                res[i] = \"Seven\"\
    ;\n                break;\n            case 8:\n                res[i] = \"Eight\"\
    ;\n                break;\n            case 9:\n                res[i] = \"Nine\"\
    ;\n                break;\n        }\n    }\n    return res;\n}\nunittest\n{\n\
    \    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfqivfpwh.d(23): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    /tmp/tmpfqivfpwh.d(26): Error: no property `sort` for type `string[]`

    /tmp/tmpfqivfpwh.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(string[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    /tmp/tmpfqivfpwh.d(30): Error: template instance `to!long` template `to` is not
    defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfqivfpwh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result = new string[arr.length];\n\
    \    foreach(i, item; arr)\n    {\n        if(item > 0 && item < 10)\n       \
    \ {\n            switch(item)\n            {\n                case 1:\n      \
    \              result[i] = \"One\";\n                    break;\n            \
    \    case 2:\n                    result[i] = \"Two\";\n                    break;\n\
    \                case 3:\n                    result[i] = \"Three\";\n       \
    \             break;\n                case 4:\n                    result[i] =\
    \ \"Four\";\n                    break;\n                case 5:\n           \
    \         result[i] = \"Five\";\n                    break;\n                case\
    \ 6:\n                    result[i] = \"Six\";\n                    break;\n \
    \               case 7:\n                    result[i] = \"Seven\";\n        \
    \            break;\n                case 8:\n                    result[i] =\
    \ \"Eight\";\n                    break;\n                case 9:\n          \
    \          result[i] = \"Nine\";\n                    break;\n            }\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwsabt4uq.d(23): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwsabt4uq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result = new string[arr.length];\n\
    \    foreach(i, v; arr)\n    {\n        if (v < 1 || v > 9)\n            continue;\n\
    \        result[i] = to!string(v);\n    }\n    sort(result);\n    reverse(result);\n\
    \    foreach(i, v; result)\n    {\n        switch(v)\n        {\n            case\
    \ \"1\":\n                result[i] = \"One\";\n                break;\n     \
    \       case \"2\":\n                result[i] = \"Two\";\n                break;\n\
    \            case \"3\":\n                result[i] = \"Three\";\n           \
    \     break;\n            case \"4\":\n                result[i] = \"Four\";\n\
    \                break;\n            case \"5\":\n                result[i] =\
    \ \"Five\";\n                break;\n            case \"6\":\n               \
    \ result[i] = \"Six\";\n                break;\n            case \"7\":\n    \
    \            result[i] = \"Seven\";\n                break;\n            case\
    \ \"8\":\n                result[i] = \"Eight\";\n                break;\n   \
    \         case \"9\":\n                result[i] = \"Nine\";\n               \
    \ break;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"\
    One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"\
    ]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmph7v50m17.d(23): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    /tmp/tmph7v50m17.d(25): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    /tmp/tmph7v50m17.d(26): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(string[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    /tmp/tmph7v50m17.d(29): Error: `switch` statement without a `default`; use `final
    switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph7v50m17.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result = new string[arr.length];\n\
    \    foreach(i, v; arr)\n    {\n        if(v < 1 || v > 9)\n            continue;\n\
    \        result[i] = to!string(v);\n    }\n    sort(result);\n    reverse(result);\n\
    \    foreach(i, ref v; result)\n    {\n        switch(v)\n        {\n        \
    \    case \"1\": v = \"One\"; break;\n            case \"2\": v = \"Two\"; break;\n\
    \            case \"3\": v = \"Three\"; break;\n            case \"4\": v = \"\
    Four\"; break;\n            case \"5\": v = \"Five\"; break;\n            case\
    \ \"6\": v = \"Six\"; break;\n            case \"7\": v = \"Seven\"; break;\n\
    \            case \"8\": v = \"Eight\"; break;\n            case \"9\": v = \"\
    Nine\"; break;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L,\
    \ 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L,\
    \ 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp575xhywv.d(23): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    /tmp/tmp575xhywv.d(25): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    /tmp/tmp575xhywv.d(26): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(string[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    /tmp/tmp575xhywv.d(29): Error: `switch` statement without a `default`; use `final
    switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp575xhywv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    string[] res = new string[arr.length];\n\
    \    foreach(i, e; arr)\n    {\n        if(e > 0 && e < 10)\n        {\n     \
    \       res[i] = to!string(e);\n        }\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa7jfynaz.d(23): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa7jfynaz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result = new string[arr.length];\n\
    \    foreach(i, e; arr)\n    {\n        if(e >= 1 && e <= 9)\n        {\n    \
    \        result[i] = e.to!string;\n        }\n    }\n    result = result.sort.reverse;\n\
    \    foreach(i, e; result)\n    {\n        switch(e)\n        {\n            case\
    \ \"1\":\n                result[i] = \"One\";\n                break;\n     \
    \       case \"2\":\n                result[i] = \"Two\";\n                break;\n\
    \            case \"3\":\n                result[i] = \"Three\";\n           \
    \     break;\n            case \"4\":\n                result[i] = \"Four\";\n\
    \                break;\n            case \"5\":\n                result[i] =\
    \ \"Five\";\n                break;\n            case \"6\":\n               \
    \ result[i] = \"Six\";\n                break;\n            case \"7\":\n    \
    \            result[i] = \"Seven\";\n                break;\n            case\
    \ \"8\":\n                result[i] = \"Eight\";\n                break;\n   \
    \         case \"9\":\n                result[i] = \"Nine\";\n               \
    \ break;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"\
    One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"\
    ]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvkvic_63.d(23): Error: no property `to` for type `long`

    /tmp/tmpvkvic_63.d(26): Error: no property `sort` for type `string[]`

    /tmp/tmpvkvic_63.d(29): Error: `switch` statement without a `default`; use `final
    switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvkvic_63.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    auto result = arr.filter!(x\
    \ => x > 0 && x < 10).sort.reverse.map!(x => to!string(x));\n    return result;\n\
    }\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp20fsows4.d(18): Error: no property `filter` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp20fsows4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result = new string[arr.length];\n\
    \    foreach(i, e; arr)\n    {\n        if(e > 0 && e < 10)\n        {\n     \
    \       result[i] = to!string(e);\n        }\n    }\n    sort(result);\n    reverse(result);\n\
    \    foreach(i, e; result)\n    {\n        switch(e)\n        {\n            case\
    \ \"1\":\n                result[i] = \"One\";\n                break;\n     \
    \       case \"2\":\n                result[i] = \"Two\";\n                break;\n\
    \            case \"3\":\n                result[i] = \"Three\";\n           \
    \     break;\n            case \"4\":\n                result[i] = \"Four\";\n\
    \                break;\n            case \"5\":\n                result[i] =\
    \ \"Five\";\n                break;\n            case \"6\":\n               \
    \ result[i] = \"Six\";\n                break;\n            case \"7\":\n    \
    \            result[i] = \"Seven\";\n                break;\n            case\
    \ \"8\":\n                result[i] = \"Eight\";\n                break;\n   \
    \         case \"9\":\n                result[i] = \"Nine\";\n               \
    \ break;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"\
    One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"\
    ]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiasyvsui.d(23): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    /tmp/tmpiasyvsui.d(26): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    /tmp/tmpiasyvsui.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(string[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    /tmp/tmpiasyvsui.d(30): Error: `switch` statement without a `default`; use `final
    switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiasyvsui.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164395
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result = new string[arr.length];\n\
    \    foreach(i, e; arr)\n    {\n        if (e >= 1 && e <= 9)\n        {\n   \
    \         switch(e)\n            {\n                case 1:\n                \
    \    result[i] = \"One\";\n                    break;\n                case 2:\n\
    \                    result[i] = \"Two\";\n                    break;\n      \
    \          case 3:\n                    result[i] = \"Three\";\n             \
    \       break;\n                case 4:\n                    result[i] = \"Four\"\
    ;\n                    break;\n                case 5:\n                    result[i]\
    \ = \"Five\";\n                    break;\n                case 6:\n         \
    \           result[i] = \"Six\";\n                    break;\n               \
    \ case 7:\n                    result[i] = \"Seven\";\n                    break;\n\
    \                case 8:\n                    result[i] = \"Eight\";\n       \
    \             break;\n                case 9:\n                    result[i] =\
    \ \"Nine\";\n                    break;\n            }\n        }\n    }\n   \
    \ return result.sort().reverse();\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkbr82yos.d(23): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    /tmp/tmpkbr82yos.d(55): Error: no property `sort` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkbr82yos.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    auto arr_ = arr.dup;\n   \
    \ arr_.sort;\n    arr_.reverse;\n    foreach(i, e; arr_)\n    {\n        if(e\
    \ > 9)\n        {\n            arr_.remove(i);\n        }\n    }\n    foreach(i,\
    \ e; arr_)\n    {\n        switch(e)\n        {\n            case 1:\n       \
    \         arr_[i] = \"One\";\n                break;\n            case 2:\n  \
    \              arr_[i] = \"Two\";\n                break;\n            case 3:\n\
    \                arr_[i] = \"Three\";\n                break;\n            case\
    \ 4:\n                arr_[i] = \"Four\";\n                break;\n          \
    \  case 5:\n                arr_[i] = \"Five\";\n                break;\n    \
    \        case 6:\n                arr_[i] = \"Six\";\n                break;\n\
    \            case 7:\n                arr_[i] = \"Seven\";\n                break;\n\
    \            case 8:\n                arr_[i] = \"Eight\";\n                break;\n\
    \            case 9:\n                arr_[i] = \"Nine\";\n                break;\n\
    \        }\n    }\n    return arr_;\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpww4ybmbb.d(19): Error: no property `sort` for type `long[]`

    /tmp/tmpww4ybmbb.d(20): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(long[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    /tmp/tmpww4ybmbb.d(25): Error: no property `remove` for type `long[]`

    /tmp/tmpww4ybmbb.d(33): Error: cannot implicitly convert expression `"One"` of
    type `string` to `long`

    /tmp/tmpww4ybmbb.d(36): Error: cannot implicitly convert expression `"Two"` of
    type `string` to `long`

    /tmp/tmpww4ybmbb.d(39): Error: cannot implicitly convert expression `"Three"`
    of type `string` to `long`

    /tmp/tmpww4ybmbb.d(42): Error: cannot implicitly convert expression `"Four"` of
    type `string` to `long`

    /tmp/tmpww4ybmbb.d(45): Error: cannot implicitly convert expression `"Five"` of
    type `string` to `long`

    /tmp/tmpww4ybm'
  stdout: ''
  timestamp: 1660164396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result = new string[arr.length];\n\
    \    foreach(i, e; arr)\n    {\n        if (e > 0 && e < 10)\n        {\n    \
    \        result[i] = to!string(e);\n        }\n    }\n    sort(result);\n    reverse(result);\n\
    \    foreach(i, e; result)\n    {\n        switch(e)\n        {\n            case\
    \ \"1\":\n                result[i] = \"One\";\n                break;\n     \
    \       case \"2\":\n                result[i] = \"Two\";\n                break;\n\
    \            case \"3\":\n                result[i] = \"Three\";\n           \
    \     break;\n            case \"4\":\n                result[i] = \"Four\";\n\
    \                break;\n            case \"5\":\n                result[i] =\
    \ \"Five\";\n                break;\n            case \"6\":\n               \
    \ result[i] = \"Six\";\n                break;\n            case \"7\":\n    \
    \            result[i] = \"Seven\";\n                break;\n            case\
    \ \"8\":\n                result[i] = \"Eight\";\n                break;\n   \
    \         case \"9\":\n                result[i] = \"Nine\";\n               \
    \ break;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"\
    One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"\
    ]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxtn9aui6.d(23): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    /tmp/tmpxtn9aui6.d(26): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    /tmp/tmpxtn9aui6.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(string[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    /tmp/tmpxtn9aui6.d(30): Error: `switch` statement without a `default`; use `final
    switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxtn9aui6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164395
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result = new string[arr.length];\n\
    \    foreach(i, item; arr)\n    {\n        switch(item)\n        {\n         \
    \   case 1:\n                result[i] = \"One\";\n                break;\n  \
    \          case 2:\n                result[i] = \"Two\";\n                break;\n\
    \            case 3:\n                result[i] = \"Three\";\n               \
    \ break;\n            case 4:\n                result[i] = \"Four\";\n       \
    \         break;\n            case 5:\n                result[i] = \"Five\";\n\
    \                break;\n            case 6:\n                result[i] = \"Six\"\
    ;\n                break;\n            case 7:\n                result[i] = \"\
    Seven\";\n                break;\n            case 8:\n                result[i]\
    \ = \"Eight\";\n                break;\n            case 9:\n                result[i]\
    \ = \"Nine\";\n                break;\n            default:\n                break;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpegkhiav4.d(60): unittest failure

    ----------------

    ??:? _d_unittestp [0x42946d]

    ??:? void tmpegkhiav4.__unittest_L56_C1() [0x4282bb]

    ??:? void tmpegkhiav4.__modtest() [0x4286d4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42e043]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x4291c6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ace9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ad78]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42ac75]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42919d]

    ??:? runModuleUnitTests [0x42de19]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429930]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result = new string[arr.length];\n\
    \    foreach(i, e; arr)\n    {\n        if(e > 0 && e < 10)\n        {\n     \
    \       switch(e)\n            {\n                case 1:\n                  \
    \  result[i] = \"One\";\n                    break;\n                case 2:\n\
    \                    result[i] = \"Two\";\n                    break;\n      \
    \          case 3:\n                    result[i] = \"Three\";\n             \
    \       break;\n                case 4:\n                    result[i] = \"Four\"\
    ;\n                    break;\n                case 5:\n                    result[i]\
    \ = \"Five\";\n                    break;\n                case 6:\n         \
    \           result[i] = \"Six\";\n                    break;\n               \
    \ case 7:\n                    result[i] = \"Seven\";\n                    break;\n\
    \                case 8:\n                    result[i] = \"Eight\";\n       \
    \             break;\n                case 9:\n                    result[i] =\
    \ \"Nine\";\n                    break;\n            }\n        }\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9oefmqwp.d(23): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9oefmqwp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164395
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result = new string[arr.length];\n\
    \    foreach(i, e; arr)\n    {\n        if (e > 0 && e < 10)\n        {\n    \
    \        result[i] = to!string(e);\n        }\n    }\n    sort(result);\n    reverse(result);\n\
    \    foreach(i, e; result)\n    {\n        switch(e)\n        {\n            case\
    \ \"1\":\n                result[i] = \"One\";\n                break;\n     \
    \       case \"2\":\n                result[i] = \"Two\";\n                break;\n\
    \            case \"3\":\n                result[i] = \"Three\";\n           \
    \     break;\n            case \"4\":\n                result[i] = \"Four\";\n\
    \                break;\n            case \"5\":\n                result[i] =\
    \ \"Five\";\n                break;\n            case \"6\":\n               \
    \ result[i] = \"Six\";\n                break;\n            case \"7\":\n    \
    \            result[i] = \"Seven\";\n                break;\n            case\
    \ \"8\":\n                result[i] = \"Eight\";\n                break;\n   \
    \         case \"9\":\n                result[i] = \"Nine\";\n               \
    \ break;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"\
    One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"\
    ]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxtn9aui6.d(23): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    /tmp/tmpxtn9aui6.d(26): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    /tmp/tmpxtn9aui6.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(string[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    /tmp/tmpxtn9aui6.d(30): Error: `switch` statement without a `default`; use `final
    switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxtn9aui6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164395
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    auto result = arr.filter!(a\
    \ => a > 0 && a < 10).sort.reverse;\n    return result.map!(a => [\"One\", \"\
    Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    ][a - 1]).array;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1gopow49.d(18): Error: no property `filter` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1gopow49.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164395
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result = new string[arr.length];\n\
    \    foreach(i, e; arr)\n    {\n        if (e > 0 && e < 10)\n        {\n    \
    \        switch(e)\n            {\n                case 1:\n                 \
    \   result[i] = \"One\";\n                    break;\n                case 2:\n\
    \                    result[i] = \"Two\";\n                    break;\n      \
    \          case 3:\n                    result[i] = \"Three\";\n             \
    \       break;\n                case 4:\n                    result[i] = \"Four\"\
    ;\n                    break;\n                case 5:\n                    result[i]\
    \ = \"Five\";\n                    break;\n                case 6:\n         \
    \           result[i] = \"Six\";\n                    break;\n               \
    \ case 7:\n                    result[i] = \"Seven\";\n                    break;\n\
    \                case 8:\n                    result[i] = \"Eight\";\n       \
    \             break;\n                case 9:\n                    result[i] =\
    \ \"Nine\";\n                    break;\n            }\n        }\n    }\n   \
    \ return result.filter!(a => a != \"\");\n}\nunittest\n{\n    alias candidate\
    \ = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"\
    One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"\
    ]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3axg25oe.d(23): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    /tmp/tmp3axg25oe.d(55): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3axg25oe.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    auto result = arr.filter!(a\
    \ => a > 0 && a < 10).sort.map!(a => a.to!string).reverse;\n    string[] names\
    \ = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\"\
    , \"Nine\"];\n    return result.map!(a => names[a.to!long - 1]);\n}\nunittest\n\
    {\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpv5sk5xb7.d(18): Error: no property `filter` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv5sk5xb7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    auto result = new string[];\n\
    \    foreach(i; arr)\n    {\n        if (i > 0 && i < 10)\n        {\n       \
    \     switch(i)\n            {\n                case 1:\n                    result\
    \ ~= \"One\";\n                    break;\n                case 2:\n         \
    \           result ~= \"Two\";\n                    break;\n                case\
    \ 3:\n                    result ~= \"Three\";\n                    break;\n \
    \               case 4:\n                    result ~= \"Four\";\n           \
    \         break;\n                case 5:\n                    result ~= \"Five\"\
    ;\n                    break;\n                case 6:\n                    result\
    \ ~= \"Six\";\n                    break;\n                case 7:\n         \
    \           result ~= \"Seven\";\n                    break;\n               \
    \ case 8:\n                    result ~= \"Eight\";\n                    break;\n\
    \                case 9:\n                    result ~= \"Nine\";\n          \
    \          break;\n            }\n        }\n    }\n    return result.sort().reverse();\n\
    }\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgdyiv34q.d(18): Error: new can only create structs, dynamic arrays
    or class objects, not `string[]`''s

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgdyiv34q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result = new string[arr.length];\n\
    \    foreach(i, e; arr)\n    {\n        if(e > 0 && e < 10)\n        {\n     \
    \       switch(e)\n            {\n                case 1:\n                  \
    \  result[i] = \"One\";\n                    break;\n                case 2:\n\
    \                    result[i] = \"Two\";\n                    break;\n      \
    \          case 3:\n                    result[i] = \"Three\";\n             \
    \       break;\n                case 4:\n                    result[i] = \"Four\"\
    ;\n                    break;\n                case 5:\n                    result[i]\
    \ = \"Five\";\n                    break;\n                case 6:\n         \
    \           result[i] = \"Six\";\n                    break;\n               \
    \ case 7:\n                    result[i] = \"Seven\";\n                    break;\n\
    \                case 8:\n                    result[i] = \"Eight\";\n       \
    \             break;\n                case 9:\n                    result[i] =\
    \ \"Nine\";\n                    break;\n            }\n        }\n    }\n   \
    \ return result.retro;\n}\nunittest\n{\n    alias candidate = by_length;\n\n \
    \   assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpuhnmi77b.d(23): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    /tmp/tmpuhnmi77b.d(55): Error: no property `retro` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuhnmi77b.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    string[] res = new string[arr.length];\n\
    \    foreach(i, e; arr)\n    {\n        if (e > 0 && e < 10)\n        {\n    \
    \        res[i] = to!string(e);\n        }\n    }\n    res = res.sort();\n   \
    \ res = res.reverse();\n    foreach(i, e; res)\n    {\n        switch(e)\n   \
    \     {\n            case \"1\":\n                res[i] = \"One\";\n        \
    \        break;\n            case \"2\":\n                res[i] = \"Two\";\n\
    \                break;\n            case \"3\":\n                res[i] = \"\
    Three\";\n                break;\n            case \"4\":\n                res[i]\
    \ = \"Four\";\n                break;\n            case \"5\":\n             \
    \   res[i] = \"Five\";\n                break;\n            case \"6\":\n    \
    \            res[i] = \"Six\";\n                break;\n            case \"7\"\
    :\n                res[i] = \"Seven\";\n                break;\n            case\
    \ \"8\":\n                res[i] = \"Eight\";\n                break;\n      \
    \      case \"9\":\n                res[i] = \"Nine\";\n                break;\n\
    \        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpo8x9yo08.d(23): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    /tmp/tmpo8x9yo08.d(26): Error: no property `sort` for type `string[]`

    /tmp/tmpo8x9yo08.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(string[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    /tmp/tmpo8x9yo08.d(30): Error: `switch` statement without a `default`; use `final
    switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo8x9yo08.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    import std.algorithm;\n  \
    \  import std.range;\n    import std.conv;\n    import std.string;\n    import\
    \ std.array;\n    import std.typecons;\n    import std.math;\n    string[] result\
    \ = arr.filter!(a => a > 0 && a < 10).sort.reverse.map!(a => to!string(a)).map!(a\
    \ => a.replace(\"1\", \"One\").replace(\"2\", \"Two\").replace(\"3\", \"Three\"\
    ).replace(\"4\", \"Four\").replace(\"5\", \"Five\").replace(\"6\", \"Six\").replace(\"\
    7\", \"Seven\").replace(\"8\", \"Eight\").replace(\"9\", \"Nine\"));\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpziyp368x.d(25): Error: template `std.algorithm.sorting.sort` cannot
    deduce function from argument types `!()(FilterResult!(__lambda2, long[]))`, candidates
    are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/algorithm/sorting.d(1847):        `std.algorithm.sorting.sort(alias
    less = "a < b", SwapStrategy ss = SwapStrategy.unstable, Range)(Range r) if ((ss
    == SwapStrategy.unstable && (hasSwappableElements!Range || hasAssignableElements!Range)
    || ss != SwapStrategy.unstable && hasAssignableElements!Range) && isRandomAccessRange!Range
    && hasSlicing!Range && hasLength!Range)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpziyp368x.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164397
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result = new string[arr.length];\n\
    \    foreach(i, e; arr) \n    {\n        if(e > 0 && e < 10) \n        {\n   \
    \         switch(e) \n            {\n                case 1:\n               \
    \     result[i] = \"One\";\n                    break;\n                case 2:\n\
    \                    result[i] = \"Two\";\n                    break;\n      \
    \          case 3:\n                    result[i] = \"Three\";\n             \
    \       break;\n                case 4:\n                    result[i] = \"Four\"\
    ;\n                    break;\n                case 5:\n                    result[i]\
    \ = \"Five\";\n                    break;\n                case 6:\n         \
    \           result[i] = \"Six\";\n                    break;\n               \
    \ case 7:\n                    result[i] = \"Seven\";\n                    break;\n\
    \                case 8:\n                    result[i] = \"Eight\";\n       \
    \             break;\n                case 9:\n                    result[i] =\
    \ \"Nine\";\n                    break;\n            }\n        }\n    }\n   \
    \ return result.filter!(a => a != \"\");\n}\nunittest\n{\n    alias candidate\
    \ = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"\
    One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"\
    ]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnyto_7hf.d(23): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    /tmp/tmpnyto_7hf.d(55): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnyto_7hf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    return arr.map!(a => a.to!string).sort!((a,\
    \ b) => a.length > b.length).array;\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_24hx3za.d(18): Error: no property `map` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_24hx3za.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164395
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result = new string[arr.length];\n\
    \    foreach(i, e; arr)\n    {\n        if(e > 0 && e < 10)\n        {\n     \
    \       switch(e)\n            {\n                case 1:\n                  \
    \  result[i] = \"One\";\n                    break;\n                case 2:\n\
    \                    result[i] = \"Two\";\n                    break;\n      \
    \          case 3:\n                    result[i] = \"Three\";\n             \
    \       break;\n                case 4:\n                    result[i] = \"Four\"\
    ;\n                    break;\n                case 5:\n                    result[i]\
    \ = \"Five\";\n                    break;\n                case 6:\n         \
    \           result[i] = \"Six\";\n                    break;\n               \
    \ case 7:\n                    result[i] = \"Seven\";\n                    break;\n\
    \                case 8:\n                    result[i] = \"Eight\";\n       \
    \             break;\n                case 9:\n                    result[i] =\
    \ \"Nine\";\n                    break;\n            }\n        }\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9oefmqwp.d(23): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9oefmqwp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164395
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0)\n   \
    \ {\n        return new string[0];\n    }\n    else\n    {\n        long[] temp\
    \ = arr.filter!(a => a >= 1 && a <= 9).sort!((a, b) => a > b).map!(a => a * -1);\n\
    \        return temp.map!(a => a * -1).map!(a => [\"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"][a - 1]);\n    }\n\
    }\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgsw281ul.d(24): Error: no property `filter` for type `long[]`

    /tmp/tmpgsw281ul.d(25): Error: no property `map` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgsw281ul.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result = new string[arr.length];\n\
    \    foreach(i, v; arr)\n    {\n        if(v > 0 && v < 10)\n        {\n     \
    \       result[i] = to!string(v);\n        }\n    }\n    sort(result);\n    reverse(result);\n\
    \    foreach(i, v; result)\n    {\n        switch(v)\n        {\n            case\
    \ \"1\":\n                result[i] = \"One\";\n                break;\n     \
    \       case \"2\":\n                result[i] = \"Two\";\n                break;\n\
    \            case \"3\":\n                result[i] = \"Three\";\n           \
    \     break;\n            case \"4\":\n                result[i] = \"Four\";\n\
    \                break;\n            case \"5\":\n                result[i] =\
    \ \"Five\";\n                break;\n            case \"6\":\n               \
    \ result[i] = \"Six\";\n                break;\n            case \"7\":\n    \
    \            result[i] = \"Seven\";\n                break;\n            case\
    \ \"8\":\n                result[i] = \"Eight\";\n                break;\n   \
    \         case \"9\":\n                result[i] = \"Nine\";\n               \
    \ break;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"\
    One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"\
    ]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpl74k82m7.d(23): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    /tmp/tmpl74k82m7.d(26): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    /tmp/tmpl74k82m7.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(string[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    /tmp/tmpl74k82m7.d(30): Error: `switch` statement without a `default`; use `final
    switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl74k82m7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164395
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result = new string[arr.length];\n\
    \    foreach(i, e; arr)\n    {\n        if (e > 0 && e < 10)\n        {\n    \
    \        result[i] = to!string(e);\n        }\n    }\n    sort(result);\n    reverse(result);\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvfgavwpm.d(23): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    /tmp/tmpvfgavwpm.d(26): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    /tmp/tmpvfgavwpm.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(string[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvfgavwpm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result = new string[arr.length];\n\
    \    foreach(i, e; arr)\n    {\n        if(e > 0 && e < 10)\n        {\n     \
    \       result[i] = to!string(e);\n        }\n    }\n    sort(result);\n    reverse(result);\n\
    \    foreach(i, e; result)\n    {\n        switch(e)\n        {\n            case\
    \ \"1\":\n                result[i] = \"One\";\n                break;\n     \
    \       case \"2\":\n                result[i] = \"Two\";\n                break;\n\
    \            case \"3\":\n                result[i] = \"Three\";\n           \
    \     break;\n            case \"4\":\n                result[i] = \"Four\";\n\
    \                break;\n            case \"5\":\n                result[i] =\
    \ \"Five\";\n                break;\n            case \"6\":\n               \
    \ result[i] = \"Six\";\n                break;\n            case \"7\":\n    \
    \            result[i] = \"Seven\";\n                break;\n            case\
    \ \"8\":\n                result[i] = \"Eight\";\n                break;\n   \
    \         case \"9\":\n                result[i] = \"Nine\";\n               \
    \ break;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"\
    One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"\
    ]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiasyvsui.d(23): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    /tmp/tmpiasyvsui.d(26): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    /tmp/tmpiasyvsui.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(string[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    /tmp/tmpiasyvsui.d(30): Error: `switch` statement without a `default`; use `final
    switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiasyvsui.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164395
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result = new string[arr.length];\n\
    \    foreach(i, e; arr)\n    {\n        if (e < 1 || e > 9)\n            continue;\n\
    \        switch(e)\n        {\n            case 1:\n                result[i]\
    \ = \"One\";\n                break;\n            case 2:\n                result[i]\
    \ = \"Two\";\n                break;\n            case 3:\n                result[i]\
    \ = \"Three\";\n                break;\n            case 4:\n                result[i]\
    \ = \"Four\";\n                break;\n            case 5:\n                result[i]\
    \ = \"Five\";\n                break;\n            case 6:\n                result[i]\
    \ = \"Six\";\n                break;\n            case 7:\n                result[i]\
    \ = \"Seven\";\n                break;\n            case 8:\n                result[i]\
    \ = \"Eight\";\n                break;\n            case 9:\n                result[i]\
    \ = \"Nine\";\n                break;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpk14hwtvo.d(23): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk14hwtvo.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    auto result = arr.filter!(a\
    \ => a > 0 && a < 10).sort.reverse;\n    return result.map!(a => [\"One\", \"\
    Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    ][a - 1]).array;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1gopow49.d(18): Error: no property `filter` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1gopow49.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164395
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result = new string[arr.length];\n\
    \    foreach(i, e; arr)\n    {\n        if(e > 0 && e < 10)\n        {\n     \
    \       result[i] = to!string(e);\n        }\n    }\n    sort(result);\n    reverse(result);\n\
    \    foreach(i, e; result)\n    {\n        switch(e)\n        {\n            case\
    \ \"1\":\n                result[i] = \"One\";\n                break;\n     \
    \       case \"2\":\n                result[i] = \"Two\";\n                break;\n\
    \            case \"3\":\n                result[i] = \"Three\";\n           \
    \     break;\n            case \"4\":\n                result[i] = \"Four\";\n\
    \                break;\n            case \"5\":\n                result[i] =\
    \ \"Five\";\n                break;\n            case \"6\":\n               \
    \ result[i] = \"Six\";\n                break;\n            case \"7\":\n    \
    \            result[i] = \"Seven\";\n                break;\n            case\
    \ \"8\":\n                result[i] = \"Eight\";\n                break;\n   \
    \         case \"9\":\n                result[i] = \"Nine\";\n               \
    \ break;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"\
    One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"\
    ]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiasyvsui.d(23): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    /tmp/tmpiasyvsui.d(26): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    /tmp/tmpiasyvsui.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(string[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    /tmp/tmpiasyvsui.d(30): Error: `switch` statement without a `default`; use `final
    switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiasyvsui.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164395
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    auto result = arr.filter!(n\
    \ => n > 0 && n < 10).sort.reverse;\n    return result.map!(n => [\"One\", \"\
    Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    ][n-1]);\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3ja7vmb2.d(18): Error: no property `filter` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3ja7vmb2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    string[] res = new string[arr.length];\n\
    \    foreach(i, v; arr)\n    {\n        if (v > 0 && v < 10)\n        {\n    \
    \        res[i] = to!string(v);\n        }\n    }\n    res = res.sort();\n   \
    \ res = res.reverse();\n    foreach(i, v; res)\n    {\n        switch(v)\n   \
    \     {\n            case \"1\":\n                res[i] = \"One\";\n        \
    \        break;\n            case \"2\":\n                res[i] = \"Two\";\n\
    \                break;\n            case \"3\":\n                res[i] = \"\
    Three\";\n                break;\n            case \"4\":\n                res[i]\
    \ = \"Four\";\n                break;\n            case \"5\":\n             \
    \   res[i] = \"Five\";\n                break;\n            case \"6\":\n    \
    \            res[i] = \"Six\";\n                break;\n            case \"7\"\
    :\n                res[i] = \"Seven\";\n                break;\n            case\
    \ \"8\":\n                res[i] = \"Eight\";\n                break;\n      \
    \      case \"9\":\n                res[i] = \"Nine\";\n                break;\n\
    \        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvqtt7t1q.d(23): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    /tmp/tmpvqtt7t1q.d(26): Error: no property `sort` for type `string[]`

    /tmp/tmpvqtt7t1q.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(string[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    /tmp/tmpvqtt7t1q.d(30): Error: `switch` statement without a `default`; use `final
    switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvqtt7t1q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result = new string[arr.length];\n\
    \    foreach(i, e; arr)\n    {\n        if (e > 0 && e < 10)\n        {\n    \
    \        result[i] = to!string(e);\n        }\n    }\n    sort(result);\n    reverse(result);\n\
    \    foreach(i, e; result)\n    {\n        switch(e)\n        {\n            case\
    \ \"1\":\n                result[i] = \"One\";\n                break;\n     \
    \       case \"2\":\n                result[i] = \"Two\";\n                break;\n\
    \            case \"3\":\n                result[i] = \"Three\";\n           \
    \     break;\n            case \"4\":\n                result[i] = \"Four\";\n\
    \                break;\n            case \"5\":\n                result[i] =\
    \ \"Five\";\n                break;\n            case \"6\":\n               \
    \ result[i] = \"Six\";\n                break;\n            case \"7\":\n    \
    \            result[i] = \"Seven\";\n                break;\n            case\
    \ \"8\":\n                result[i] = \"Eight\";\n                break;\n   \
    \         case \"9\":\n                result[i] = \"Nine\";\n               \
    \ break;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"\
    One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"\
    ]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxtn9aui6.d(23): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    /tmp/tmpxtn9aui6.d(26): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    /tmp/tmpxtn9aui6.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(string[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    /tmp/tmpxtn9aui6.d(30): Error: `switch` statement without a `default`; use `final
    switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxtn9aui6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164395
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result = new string[arr.length];\n\
    \    foreach(i, v; arr)\n    {\n        if(v > 0 && v < 10)\n        {\n     \
    \       switch(v)\n            {\n                case 1:\n                  \
    \  result[i] = \"One\";\n                    break;\n                case 2:\n\
    \                    result[i] = \"Two\";\n                    break;\n      \
    \          case 3:\n                    result[i] = \"Three\";\n             \
    \       break;\n                case 4:\n                    result[i] = \"Four\"\
    ;\n                    break;\n                case 5:\n                    result[i]\
    \ = \"Five\";\n                    break;\n                case 6:\n         \
    \           result[i] = \"Six\";\n                    break;\n               \
    \ case 7:\n                    result[i] = \"Seven\";\n                    break;\n\
    \                case 8:\n                    result[i] = \"Eight\";\n       \
    \             break;\n                case 9:\n                    result[i] =\
    \ \"Nine\";\n                    break;\n            }\n        }\n    }\n   \
    \ return result.filter!(a => a != \"\");\n}\nunittest\n{\n    alias candidate\
    \ = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"\
    One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"\
    ]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3psh6t4f.d(23): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    /tmp/tmp3psh6t4f.d(55): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3psh6t4f.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result = new string[0];\n\
    \    foreach(i; arr)\n    {\n        if(i > 0 && i < 10)\n        {\n        \
    \    result ~= to!string(i);\n        }\n    }\n    sort(result);\n    reverse(result);\n\
    \    foreach(i; 0 .. result.length)\n    {\n        result[i] = to!string(to!long(result[i]));\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpcgra92vu.d(23): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    /tmp/tmpcgra92vu.d(26): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    /tmp/tmpcgra92vu.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(string[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    /tmp/tmpcgra92vu.d(30): Error: template instance `to!string` template `to` is
    not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcgra92vu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    // your code here\n    return\
    \ null;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpj8iei6ss.d(25): unittest failure

    ----------------

    ??:? _d_unittestp [0x429195]

    ??:? void tmpj8iei6ss.__unittest_L21_C1() [0x427fe3]

    ??:? void tmpj8iei6ss.__modtest() [0x4283fc]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42dc9b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x428eee]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42a941]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42a9d0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42a8cd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x428ec5]

    ??:? runModuleUnitTests [0x42da71]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4295e4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164397
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    // Sort the array\n    arr.sort();\n\
    \    // Reverse the array\n    arr.reverse();\n    // Replace each digit by its\
    \ corresponding name from \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"\
    Six\", \"Seven\", \"Eight\", \"Nine\"\n    string[] result = new string[arr.length];\n\
    \    foreach(i, e; arr)\n    {\n        switch(e)\n        {\n            case\
    \ 1:\n                result[i] = \"One\";\n                break;\n         \
    \   case 2:\n                result[i] = \"Two\";\n                break;\n  \
    \          case 3:\n                result[i] = \"Three\";\n                break;\n\
    \            case 4:\n                result[i] = \"Four\";\n                break;\n\
    \            case 5:\n                result[i] = \"Five\";\n                break;\n\
    \            case 6:\n                result[i] = \"Six\";\n                break;\n\
    \            case 7:\n                result[i] = \"Seven\";\n               \
    \ break;\n            case 8:\n                result[i] = \"Eight\";\n      \
    \          break;\n            case 9:\n                result[i] = \"Nine\";\n\
    \                break;\n            default:\n                break;\n      \
    \  }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpny5_18fh.d(19): Error: no property `sort` for type `long[]`

    /tmp/tmpny5_18fh.d(21): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(long[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpny5_18fh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    auto result = new string[arr.length];\n\
    \    foreach(i, e; arr)\n    {\n        if (e > 0 && e < 10)\n        {\n    \
    \        switch(e)\n            {\n                case 1:\n                 \
    \   result[i] = \"One\";\n                    break;\n                case 2:\n\
    \                    result[i] = \"Two\";\n                    break;\n      \
    \          case 3:\n                    result[i] = \"Three\";\n             \
    \       break;\n                case 4:\n                    result[i] = \"Four\"\
    ;\n                    break;\n                case 5:\n                    result[i]\
    \ = \"Five\";\n                    break;\n                case 6:\n         \
    \           result[i] = \"Six\";\n                    break;\n               \
    \ case 7:\n                    result[i] = \"Seven\";\n                    break;\n\
    \                case 8:\n                    result[i] = \"Eight\";\n       \
    \             break;\n                case 9:\n                    result[i] =\
    \ \"Nine\";\n                    break;\n            }\n        }\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2mj4tt49.d(23): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2mj4tt49.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    return arr.map!(a => a.to!string).sort!((a,\
    \ b) => a.length > b.length).array;\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_24hx3za.d(18): Error: no property `map` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_24hx3za.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164395
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result = new string[arr.length];\n\
    \    foreach(i, v; arr)\n    {\n        if(v > 0 && v < 10)\n        {\n     \
    \       switch(v)\n            {\n                case 1:\n                  \
    \  result[i] = \"One\";\n                    break;\n                case 2:\n\
    \                    result[i] = \"Two\";\n                    break;\n      \
    \          case 3:\n                    result[i] = \"Three\";\n             \
    \       break;\n                case 4:\n                    result[i] = \"Four\"\
    ;\n                    break;\n                case 5:\n                    result[i]\
    \ = \"Five\";\n                    break;\n                case 6:\n         \
    \           result[i] = \"Six\";\n                    break;\n               \
    \ case 7:\n                    result[i] = \"Seven\";\n                    break;\n\
    \                case 8:\n                    result[i] = \"Eight\";\n       \
    \             break;\n                case 9:\n                    result[i] =\
    \ \"Nine\";\n                    break;\n            }\n        }\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppwn6d4ot.d(23): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppwn6d4ot.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    string[] res = new string[arr.length];\n\
    \    foreach(i, v; arr)\n    {\n        if(v > 0 && v < 10)\n        {\n     \
    \       res[i] = to!string(v);\n        }\n    }\n    res = res.filter!(a => a\
    \ != \"\");\n    res.sort!((a, b) => a.length > b.length);\n    res.reverse;\n\
    \    foreach(i, v; res)\n    {\n        switch(v)\n        {\n            case\
    \ \"1\":\n                res[i] = \"One\";\n                break;\n        \
    \    case \"2\":\n                res[i] = \"Two\";\n                break;\n\
    \            case \"3\":\n                res[i] = \"Three\";\n              \
    \  break;\n            case \"4\":\n                res[i] = \"Four\";\n     \
    \           break;\n            case \"5\":\n                res[i] = \"Five\"\
    ;\n                break;\n            case \"6\":\n                res[i] = \"\
    Six\";\n                break;\n            case \"7\":\n                res[i]\
    \ = \"Seven\";\n                break;\n            case \"8\":\n            \
    \    res[i] = \"Eight\";\n                break;\n            case \"9\":\n  \
    \              res[i] = \"Nine\";\n                break;\n        }\n    }\n\
    \    return res;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp95qf7o62.d(23): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    /tmp/tmp95qf7o62.d(26): Error: no property `filter` for type `string[]`

    /tmp/tmp95qf7o62.d(27): Error: no property `sort` for type `string[]`

    /tmp/tmp95qf7o62.d(28): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(string[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    /tmp/tmp95qf7o62.d(31): Error: `switch` statement without a `default`; use `final
    switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp95qf7o62.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result = new string[arr.length];\n\
    \    foreach(i, v; arr)\n    {\n        if(v > 0 && v < 10)\n        {\n     \
    \       result[i] = to!string(v);\n        }\n    }\n    sort(result);\n    reverse(result);\n\
    \    foreach(i, v; result)\n    {\n        switch(v)\n        {\n            case\
    \ \"1\":\n                result[i] = \"One\";\n                break;\n     \
    \       case \"2\":\n                result[i] = \"Two\";\n                break;\n\
    \            case \"3\":\n                result[i] = \"Three\";\n           \
    \     break;\n            case \"4\":\n                result[i] = \"Four\";\n\
    \                break;\n            case \"5\":\n                result[i] =\
    \ \"Five\";\n                break;\n            case \"6\":\n               \
    \ result[i] = \"Six\";\n                break;\n            case \"7\":\n    \
    \            result[i] = \"Seven\";\n                break;\n            case\
    \ \"8\":\n                result[i] = \"Eight\";\n                break;\n   \
    \         case \"9\":\n                result[i] = \"Nine\";\n               \
    \ break;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"\
    One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"\
    ]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpl74k82m7.d(23): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    /tmp/tmpl74k82m7.d(26): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    /tmp/tmpl74k82m7.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(string[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    /tmp/tmpl74k82m7.d(30): Error: `switch` statement without a `default`; use `final
    switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl74k82m7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164395
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    auto arr2 = arr.filter!(a\
    \ => a >= 1 && a <= 9).sort.map!(a => a.to!string).reverse;\n    return arr2.map!(a\
    \ => a == \"1\" ? \"One\" : a == \"2\" ? \"Two\" : a == \"3\" ? \"Three\" : a\
    \ == \"4\" ? \"Four\" : a == \"5\" ? \"Five\" : a == \"6\" ? \"Six\" : a == \"\
    7\" ? \"Seven\" : a == \"8\" ? \"Eight\" : a == \"9\" ? \"Nine\" : a);\n}\nunittest\n\
    {\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplutg45l6.d(18): Error: no property `filter` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplutg45l6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result = new string[arr.length];\n\
    \    foreach(i, e; arr)\n    {\n        if(e > 0 && e < 10)\n        {\n     \
    \       switch(e)\n            {\n                case 1:\n                  \
    \  result[i] = \"One\";\n                    break;\n                case 2:\n\
    \                    result[i] = \"Two\";\n                    break;\n      \
    \          case 3:\n                    result[i] = \"Three\";\n             \
    \       break;\n                case 4:\n                    result[i] = \"Four\"\
    ;\n                    break;\n                case 5:\n                    result[i]\
    \ = \"Five\";\n                    break;\n                case 6:\n         \
    \           result[i] = \"Six\";\n                    break;\n               \
    \ case 7:\n                    result[i] = \"Seven\";\n                    break;\n\
    \                case 8:\n                    result[i] = \"Eight\";\n       \
    \             break;\n                case 9:\n                    result[i] =\
    \ \"Nine\";\n                    break;\n            }\n        }\n    }\n   \
    \ return result.sort().reverse();\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmproo8a22w.d(23): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    /tmp/tmproo8a22w.d(55): Error: no property `sort` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmproo8a22w.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result = new string[arr.length];\n\
    \    foreach(i, e; arr)\n    {\n        if(e > 0 && e < 10)\n        {\n     \
    \       switch(e)\n            {\n                case 1:\n                  \
    \  result[i] = \"One\";\n                    break;\n                case 2:\n\
    \                    result[i] = \"Two\";\n                    break;\n      \
    \          case 3:\n                    result[i] = \"Three\";\n             \
    \       break;\n                case 4:\n                    result[i] = \"Four\"\
    ;\n                    break;\n                case 5:\n                    result[i]\
    \ = \"Five\";\n                    break;\n                case 6:\n         \
    \           result[i] = \"Six\";\n                    break;\n               \
    \ case 7:\n                    result[i] = \"Seven\";\n                    break;\n\
    \                case 8:\n                    result[i] = \"Eight\";\n       \
    \             break;\n                case 9:\n                    result[i] =\
    \ \"Nine\";\n                    break;\n            }\n        }\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9oefmqwp.d(23): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9oefmqwp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164395
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) return\
    \ new string[0];\n    auto res = new string[arr.length];\n    foreach (i, v; arr)\n\
    \    {\n        if (v > 9 || v < 1) continue;\n        res[i] = to!string(v);\n\
    \    }\n    res = res.sort!((a, b) => a.length < b.length);\n    res = res.reverse;\n\
    \    foreach (i, v; res)\n    {\n        switch (v)\n        {\n            case\
    \ \"1\": res[i] = \"One\"; break;\n            case \"2\": res[i] = \"Two\"; break;\n\
    \            case \"3\": res[i] = \"Three\"; break;\n            case \"4\": res[i]\
    \ = \"Four\"; break;\n            case \"5\": res[i] = \"Five\"; break;\n    \
    \        case \"6\": res[i] = \"Six\"; break;\n            case \"7\": res[i]\
    \ = \"Seven\"; break;\n            case \"8\": res[i] = \"Eight\"; break;\n  \
    \          case \"9\": res[i] = \"Nine\"; break;\n        }\n    }\n    return\
    \ res;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjcbvhg5f.d(23): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    /tmp/tmpjcbvhg5f.d(25): Error: no property `sort` for type `string[]`

    /tmp/tmpjcbvhg5f.d(26): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(string[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    /tmp/tmpjcbvhg5f.d(29): Error: `switch` statement without a `default`; use `final
    switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjcbvhg5f.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result = new string[arr.length];\n\
    \    foreach(i, e; arr)\n    {\n        if (e > 0 && e < 10)\n        {\n    \
    \        switch(e)\n            {\n                case 1:\n                 \
    \   result[i] = \"One\";\n                    break;\n                case 2:\n\
    \                    result[i] = \"Two\";\n                    break;\n      \
    \          case 3:\n                    result[i] = \"Three\";\n             \
    \       break;\n                case 4:\n                    result[i] = \"Four\"\
    ;\n                    break;\n                case 5:\n                    result[i]\
    \ = \"Five\";\n                    break;\n                case 6:\n         \
    \           result[i] = \"Six\";\n                    break;\n               \
    \ case 7:\n                    result[i] = \"Seven\";\n                    break;\n\
    \                case 8:\n                    result[i] = \"Eight\";\n       \
    \             break;\n                case 9:\n                    result[i] =\
    \ \"Nine\";\n                    break;\n            }\n        }\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpd8jryf1s.d(23): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd8jryf1s.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    return arr.map!(a => a.to!string).filter!(a\
    \ => a.length == 1).map!(a => a.to!int).sort.map!(a => a.to!string).map!(a =>\
    \ a.to!int).map!(a => a.to!string).map!(a => a.to!int).map!(a => a.to!string).map!(a\
    \ => a.to!int).map!(a => a.to!string).map!(a => a.to!int).map!(a => a.to!string).map!(a\
    \ => a.to!int).map!(a => a.to!string).map!(a => a.to!int).map!(a => a.to!string).map!(a\
    \ => a.to!int).map!(a => a.to!string).map!(a => a.to!int).map!(a => a.to!string).map!(a\
    \ => a.to!int).map!(a => a.to!string).map!(a => a.to!int).map!(a => a.to!string).map!(a\
    \ => a.to!int).map!(a => a.to!string).map!(a => a.to!int).map!(a => a.to!string).map!(a\
    \ => a.to!int).map!(a => a.to!string).map!(a => a.to!int).map!(a => a.to!string).map!(a\
    \ => a.to!int).map!(a => a.to!string).map!(a => a.to!int).map!(a => a.to!string).map!(a\
    \ => a.to!int).map!(a => a.to!string).map!(a => a.to!int).map!(a => a.to!string).map!(a\
    \ => a.to!int).map!(a => a.to!string).map!(a => a.to!int).map!(a => a.to!string).map!(a\
    \ => a.to!int).map!(a => a.to\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpeze6p8pi.d(19): Error: found `unittest` when expecting `)` following
    template argument list

    /tmp/tmpeze6p8pi.d(20): Error: found `{` when expecting `;` following `return`
    statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpeze6p8pi.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    return arr.map!(a => a.to!string).sort!((a,\
    \ b) => a.length < b.length).map!(a => a.to!long);\n}\nunittest\n{\n    alias\
    \ candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L,\
    \ 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L,\
    \ 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgek9yfae.d(18): Error: no property `map` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgek9yfae.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164395
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    auto result = arr.filter!(x\
    \ => x >= 1 && x <= 9).sort.reverse;\n    return result.map!(x => [\"One\", \"\
    Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    ][x - 1]);\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7pdyklb0.d(18): Error: no property `filter` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7pdyklb0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result = new string[arr.length];\n\
    \    foreach(i,e; arr)\n    {\n        if(e > 0 && e < 10)\n        {\n      \
    \      result[i] = e.to!string;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzcaow5ej.d(23): Error: no property `to` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzcaow5ej.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result = new string[0];\n\
    \    foreach(long i; arr)\n    {\n        if(i >= 1 && i <= 9)\n        {\n  \
    \          result ~= to!string(i);\n        }\n    }\n    sort(result);\n    reverse(result);\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpyyunequ6.d(23): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    /tmp/tmpyyunequ6.d(26): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    /tmp/tmpyyunequ6.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(string[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyyunequ6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    return arr.map!(a => a.to!string).sort!((a,\
    \ b) => a.length > b.length).map!(a => a.to!long);\n}\nunittest\n{\n    alias\
    \ candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L,\
    \ 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L,\
    \ 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpslns8g26.d(18): Error: no property `map` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpslns8g26.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result = new string[arr.length];\n\
    \    foreach(i, elem; arr)\n    {\n        if(elem > 0 && elem < 10)\n       \
    \ {\n            switch(elem)\n            {\n                case 1:\n      \
    \              result[i] = \"One\";\n                    break;\n            \
    \    case 2:\n                    result[i] = \"Two\";\n                    break;\n\
    \                case 3:\n                    result[i] = \"Three\";\n       \
    \             break;\n                case 4:\n                    result[i] =\
    \ \"Four\";\n                    break;\n                case 5:\n           \
    \         result[i] = \"Five\";\n                    break;\n                case\
    \ 6:\n                    result[i] = \"Six\";\n                    break;\n \
    \               case 7:\n                    result[i] = \"Seven\";\n        \
    \            break;\n                case 8:\n                    result[i] =\
    \ \"Eight\";\n                    break;\n                case 9:\n          \
    \          result[i] = \"Nine\";\n                    break;\n            }\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_9t6cexb.d(23): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_9t6cexb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result = new string[arr.length];\n\
    \    foreach(i, e; arr)\n    {\n        if(e < 1 || e > 9)\n            continue;\n\
    \        result[i] = to!string(e);\n    }\n    sort(result);\n    reverse(result);\n\
    \    foreach(i, e; result)\n    {\n        switch(e)\n        {\n            case\
    \ \"1\":\n                result[i] = \"One\";\n                break;\n     \
    \       case \"2\":\n                result[i] = \"Two\";\n                break;\n\
    \            case \"3\":\n                result[i] = \"Three\";\n           \
    \     break;\n            case \"4\":\n                result[i] = \"Four\";\n\
    \                break;\n            case \"5\":\n                result[i] =\
    \ \"Five\";\n                break;\n            case \"6\":\n               \
    \ result[i] = \"Six\";\n                break;\n            case \"7\":\n    \
    \            result[i] = \"Seven\";\n                break;\n            case\
    \ \"8\":\n                result[i] = \"Eight\";\n                break;\n   \
    \         case \"9\":\n                result[i] = \"Nine\";\n               \
    \ break;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"\
    One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"\
    ]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpswm4_mu4.d(23): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    /tmp/tmpswm4_mu4.d(25): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    /tmp/tmpswm4_mu4.d(26): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(string[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    /tmp/tmpswm4_mu4.d(29): Error: `switch` statement without a `default`; use `final
    switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpswm4_mu4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164395
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result = new string[arr.length];\n\
    \    foreach(i, v; arr)\n    {\n        if(v > 0 && v < 10)\n        {\n     \
    \       result[i] = to!string(v);\n        }\n    }\n    sort(result);\n    reverse(result);\n\
    \    foreach(i, v; result)\n    {\n        switch(v)\n        {\n            case\
    \ \"1\":\n                result[i] = \"One\";\n                break;\n     \
    \       case \"2\":\n                result[i] = \"Two\";\n                break;\n\
    \            case \"3\":\n                result[i] = \"Three\";\n           \
    \     break;\n            case \"4\":\n                result[i] = \"Four\";\n\
    \                break;\n            case \"5\":\n                result[i] =\
    \ \"Five\";\n                break;\n            case \"6\":\n               \
    \ result[i] = \"Six\";\n                break;\n            case \"7\":\n    \
    \            result[i] = \"Seven\";\n                break;\n            case\
    \ \"8\":\n                result[i] = \"Eight\";\n                break;\n   \
    \         case \"9\":\n                result[i] = \"Nine\";\n               \
    \ break;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"\
    One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"\
    ]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpl74k82m7.d(23): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    /tmp/tmpl74k82m7.d(26): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    /tmp/tmpl74k82m7.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(string[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    /tmp/tmpl74k82m7.d(30): Error: `switch` statement without a `default`; use `final
    switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl74k82m7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164395
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result = new string[arr.length];\n\
    \    foreach(i, v; arr)\n    {\n        if(v > 0 && v < 10)\n        {\n     \
    \       result[i] = v.to!string;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwbrqa0ch.d(23): Error: no property `to` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwbrqa0ch.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result = new string[arr.length];\n\
    \    foreach(i, item; arr)\n    {\n        if(item > 0 && item < 10)\n       \
    \ {\n            result[i] = item.to!string;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzxnzr782.d(23): Error: no property `to` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzxnzr782.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result = new string[arr.length];\n\
    \    foreach(i, e; arr)\n    {\n        if(e > 0 && e < 10)\n        {\n     \
    \       result[i] = to!string(e);\n        }\n    }\n    sort(result);\n    reverse(result);\n\
    \    foreach(i, e; result)\n    {\n        switch(e)\n        {\n            case\
    \ \"1\":\n                result[i] = \"One\";\n                break;\n     \
    \       case \"2\":\n                result[i] = \"Two\";\n                break;\n\
    \            case \"3\":\n                result[i] = \"Three\";\n           \
    \     break;\n            case \"4\":\n                result[i] = \"Four\";\n\
    \                break;\n            case \"5\":\n                result[i] =\
    \ \"Five\";\n                break;\n            case \"6\":\n               \
    \ result[i] = \"Six\";\n                break;\n            case \"7\":\n    \
    \            result[i] = \"Seven\";\n                break;\n            case\
    \ \"8\":\n                result[i] = \"Eight\";\n                break;\n   \
    \         case \"9\":\n                result[i] = \"Nine\";\n               \
    \ break;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"\
    One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"\
    ]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiasyvsui.d(23): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    /tmp/tmpiasyvsui.d(26): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    /tmp/tmpiasyvsui.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(string[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    /tmp/tmpiasyvsui.d(30): Error: `switch` statement without a `default`; use `final
    switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiasyvsui.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164395
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result = new string[arr.length];\n\
    \    foreach(i, e; arr)\n    {\n        if(e > 0 && e < 10)\n        {\n     \
    \       switch(e)\n            {\n                case 1:\n                  \
    \  result[i] = \"One\";\n                    break;\n                case 2:\n\
    \                    result[i] = \"Two\";\n                    break;\n      \
    \          case 3:\n                    result[i] = \"Three\";\n             \
    \       break;\n                case 4:\n                    result[i] = \"Four\"\
    ;\n                    break;\n                case 5:\n                    result[i]\
    \ = \"Five\";\n                    break;\n                case 6:\n         \
    \           result[i] = \"Six\";\n                    break;\n               \
    \ case 7:\n                    result[i] = \"Seven\";\n                    break;\n\
    \                case 8:\n                    result[i] = \"Eight\";\n       \
    \             break;\n                case 9:\n                    result[i] =\
    \ \"Nine\";\n                    break;\n            }\n        }\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9oefmqwp.d(23): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9oefmqwp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164395
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    return arr.map!(a => a.to!string).sort!((a,\
    \ b) => a.length > b.length).array;\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_24hx3za.d(18): Error: no property `map` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_24hx3za.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164395
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result = new string[arr.length];\n\
    \    foreach(i, e; arr)\n    {\n        if(e > 0 && e < 10)\n        {\n     \
    \       switch(e)\n            {\n                case 1:\n                  \
    \  result[i] = \"One\";\n                    break;\n                case 2:\n\
    \                    result[i] = \"Two\";\n                    break;\n      \
    \          case 3:\n                    result[i] = \"Three\";\n             \
    \       break;\n                case 4:\n                    result[i] = \"Four\"\
    ;\n                    break;\n                case 5:\n                    result[i]\
    \ = \"Five\";\n                    break;\n                case 6:\n         \
    \           result[i] = \"Six\";\n                    break;\n               \
    \ case 7:\n                    result[i] = \"Seven\";\n                    break;\n\
    \                case 8:\n                    result[i] = \"Eight\";\n       \
    \             break;\n                case 9:\n                    result[i] =\
    \ \"Nine\";\n                    break;\n            }\n        }\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9oefmqwp.d(23): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9oefmqwp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164395
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result = new string[arr.length];\n\
    \    foreach(i, e; arr)\n    {\n        if (e > 0 && e < 10)\n        {\n    \
    \        switch(e)\n            {\n                case 1:\n                 \
    \   result[i] = \"One\";\n                    break;\n                case 2:\n\
    \                    result[i] = \"Two\";\n                    break;\n      \
    \          case 3:\n                    result[i] = \"Three\";\n             \
    \       break;\n                case 4:\n                    result[i] = \"Four\"\
    ;\n                    break;\n                case 5:\n                    result[i]\
    \ = \"Five\";\n                    break;\n                case 6:\n         \
    \           result[i] = \"Six\";\n                    break;\n               \
    \ case 7:\n                    result[i] = \"Seven\";\n                    break;\n\
    \                case 8:\n                    result[i] = \"Eight\";\n       \
    \             break;\n                case 9:\n                    result[i] =\
    \ \"Nine\";\n                    break;\n            }\n        }\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpd8jryf1s.d(23): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd8jryf1s.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0) \n  \
    \  {\n        return new string[0];\n    }\n    else \n    {\n        auto result\
    \ = new string[arr.length];\n        foreach (i, e; arr) \n        {\n       \
    \     if (e > 0 && e < 10) \n            {\n                result[i] = e.to!string;\n\
    \            }\n        }\n        result = result.sort.retro;\n        foreach\
    \ (i, e; result) \n        {\n            switch (e) \n            {\n       \
    \         case \"1\":\n                    result[i] = \"One\";\n            \
    \        break;\n                case \"2\":\n                    result[i] =\
    \ \"Two\";\n                    break;\n                case \"3\":\n        \
    \            result[i] = \"Three\";\n                    break;\n            \
    \    case \"4\":\n                    result[i] = \"Four\";\n                \
    \    break;\n                case \"5\":\n                    result[i] = \"Five\"\
    ;\n                    break;\n                case \"6\":\n                 \
    \   result[i] = \"Six\";\n                    break;\n                case \"\
    7\":\n                    result[i] = \"Seven\";\n                    break;\n\
    \                case \"8\":\n                    result[i] = \"Eight\";\n   \
    \                 break;\n                case \"9\":\n                    result[i]\
    \ = \"Nine\";\n                    break;\n            }\n        }\n        return\
    \ result;\n    }\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmps__2yt1v.d(29): Error: no property `to` for type `long`

    /tmp/tmps__2yt1v.d(32): Error: no property `sort` for type `string[]`

    /tmp/tmps__2yt1v.d(35): Error: `switch` statement without a `default`; use `final
    switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmps__2yt1v.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result = new string[arr.length];\n\
    \    foreach(i, v; arr)\n    {\n        if (v > 0 && v < 10)\n        {\n    \
    \        result[i] = to!string(v);\n        }\n    }\n    sort(result);\n    reverse(result);\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsaaajfy3.d(23): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    /tmp/tmpsaaajfy3.d(26): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    /tmp/tmpsaaajfy3.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(string[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsaaajfy3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    string[] res = new string[arr.length];\n\
    \    foreach(i, e; arr)\n    {\n        if(e > 0 && e < 10)\n        {\n     \
    \       res[i] = to!string(e);\n        }\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa7jfynaz.d(23): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa7jfynaz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0)\n   \
    \     return new string[0];\n    string[] res = new string[arr.length];\n    foreach\
    \ (i, e; arr)\n    {\n        if (e > 0 && e < 10)\n        {\n            switch\
    \ (e)\n            {\n                case 1:\n                    res[i] = \"\
    One\";\n                    break;\n                case 2:\n                \
    \    res[i] = \"Two\";\n                    break;\n                case 3:\n\
    \                    res[i] = \"Three\";\n                    break;\n       \
    \         case 4:\n                    res[i] = \"Four\";\n                  \
    \  break;\n                case 5:\n                    res[i] = \"Five\";\n \
    \                   break;\n                case 6:\n                    res[i]\
    \ = \"Six\";\n                    break;\n                case 7:\n          \
    \          res[i] = \"Seven\";\n                    break;\n                case\
    \ 8:\n                    res[i] = \"Eight\";\n                    break;\n  \
    \              case 9:\n                    res[i] = \"Nine\";\n             \
    \       break;\n            }\n        }\n    }\n    return res.retro;\n}\nunittest\n\
    {\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpod_6e3ln.d(25): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    /tmp/tmpod_6e3ln.d(57): Error: no property `retro` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpod_6e3ln.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result = new string[arr.length];\n\
    \    foreach(i, e; arr)\n    {\n        if(e >= 1 && e <= 9)\n        {\n    \
    \        result[i] = e.to!string;\n        }\n    }\n    result = result.filter!(a\
    \ => a.length > 0);\n    result.sort!((a, b) => a.length < b.length);\n    result.reverse;\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkaw71kod.d(23): Error: no property `to` for type `long`

    /tmp/tmpkaw71kod.d(26): Error: no property `filter` for type `string[]`

    /tmp/tmpkaw71kod.d(27): Error: no property `sort` for type `string[]`

    /tmp/tmpkaw71kod.d(28): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(string[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkaw71kod.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    string[] res = new string[arr.length];\n\
    \    for (int i = 0; i < arr.length; i++)\n    {\n        res[i] = to!string(arr[i]);\n\
    \    }\n    return res;\n}\nunittest\n{\n    alias candidate = by_length;\n\n\
    \    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjazs6y5d.d(21): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjazs6y5d.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    return arr.map!(a => a.to!string).sort!((a,\
    \ b) => a.length < b.length).map!(a => a.to!long);\n}\nunittest\n{\n    alias\
    \ candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L,\
    \ 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L,\
    \ 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgek9yfae.d(18): Error: no property `map` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgek9yfae.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164395
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result = new string[arr.length];\n\
    \    foreach(i, item; arr)\n    {\n        if(item > 0 && item < 10)\n       \
    \ {\n            switch(item)\n            {\n                case 1:\n      \
    \              result[i] = \"One\";\n                    break;\n            \
    \    case 2:\n                    result[i] = \"Two\";\n                    break;\n\
    \                case 3:\n                    result[i] = \"Three\";\n       \
    \             break;\n                case 4:\n                    result[i] =\
    \ \"Four\";\n                    break;\n                case 5:\n           \
    \         result[i] = \"Five\";\n                    break;\n                case\
    \ 6:\n                    result[i] = \"Six\";\n                    break;\n \
    \               case 7:\n                    result[i] = \"Seven\";\n        \
    \            break;\n                case 8:\n                    result[i] =\
    \ \"Eight\";\n                    break;\n                case 9:\n          \
    \          result[i] = \"Nine\";\n                    break;\n            }\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwsabt4uq.d(23): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwsabt4uq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result = new string[arr.length];\n\
    \    foreach(i,e; arr)\n    {\n        if(e > 0 && e < 10)\n        {\n      \
    \      result[i] = to!string(e);\n        }\n    }\n    sort(result);\n    reverse(result);\n\
    \    foreach(i,e; result)\n    {\n        switch(e)\n        {\n            case\
    \ \"1\":\n                result[i] = \"One\";\n                break;\n     \
    \       case \"2\":\n                result[i] = \"Two\";\n                break;\n\
    \            case \"3\":\n                result[i] = \"Three\";\n           \
    \     break;\n            case \"4\":\n                result[i] = \"Four\";\n\
    \                break;\n            case \"5\":\n                result[i] =\
    \ \"Five\";\n                break;\n            case \"6\":\n               \
    \ result[i] = \"Six\";\n                break;\n            case \"7\":\n    \
    \            result[i] = \"Seven\";\n                break;\n            case\
    \ \"8\":\n                result[i] = \"Eight\";\n                break;\n   \
    \         case \"9\":\n                result[i] = \"Nine\";\n               \
    \ break;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"\
    One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"\
    ]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpi7tzooe7.d(23): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    /tmp/tmpi7tzooe7.d(26): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    /tmp/tmpi7tzooe7.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(string[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    /tmp/tmpi7tzooe7.d(30): Error: `switch` statement without a `default`; use `final
    switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi7tzooe7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result = new string[arr.length];\n\
    \    foreach(i, e; arr) \n    {\n        if(e >= 1 && e <= 9) \n        {\n  \
    \          switch(e) \n            {\n                case 1:\n              \
    \      result[i] = \"One\";\n                    break;\n                case\
    \ 2:\n                    result[i] = \"Two\";\n                    break;\n \
    \               case 3:\n                    result[i] = \"Three\";\n        \
    \            break;\n                case 4:\n                    result[i] =\
    \ \"Four\";\n                    break;\n                case 5:\n           \
    \         result[i] = \"Five\";\n                    break;\n                case\
    \ 6:\n                    result[i] = \"Six\";\n                    break;\n \
    \               case 7:\n                    result[i] = \"Seven\";\n        \
    \            break;\n                case 8:\n                    result[i] =\
    \ \"Eight\";\n                    break;\n                case 9:\n          \
    \          result[i] = \"Nine\";\n                    break;\n            }\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmps2x01h05.d(23): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmps2x01h05.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result = new string[arr.length];\n\
    \    foreach(i, e; arr)\n    {\n        if(e < 1 || e > 9)\n            continue;\n\
    \        result[i] = to!string(e);\n    }\n    sort(result);\n    reverse(result);\n\
    \    foreach(i, e; result)\n    {\n        switch(e)\n        {\n            case\
    \ \"1\":\n                result[i] = \"One\";\n                break;\n     \
    \       case \"2\":\n                result[i] = \"Two\";\n                break;\n\
    \            case \"3\":\n                result[i] = \"Three\";\n           \
    \     break;\n            case \"4\":\n                result[i] = \"Four\";\n\
    \                break;\n            case \"5\":\n                result[i] =\
    \ \"Five\";\n                break;\n            case \"6\":\n               \
    \ result[i] = \"Six\";\n                break;\n            case \"7\":\n    \
    \            result[i] = \"Seven\";\n                break;\n            case\
    \ \"8\":\n                result[i] = \"Eight\";\n                break;\n   \
    \         case \"9\":\n                result[i] = \"Nine\";\n               \
    \ break;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"\
    One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"\
    ]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpswm4_mu4.d(23): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    /tmp/tmpswm4_mu4.d(25): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    /tmp/tmpswm4_mu4.d(26): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(string[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    /tmp/tmpswm4_mu4.d(29): Error: `switch` statement without a `default`; use `final
    switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpswm4_mu4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164395
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result = new string[arr.length];\n\
    \    foreach(i, item; arr)\n    {\n        if (item > 0 && item < 10)\n      \
    \  {\n            switch(item)\n            {\n                case 1:\n     \
    \               result[i] = \"One\";\n                    break;\n           \
    \     case 2:\n                    result[i] = \"Two\";\n                    break;\n\
    \                case 3:\n                    result[i] = \"Three\";\n       \
    \             break;\n                case 4:\n                    result[i] =\
    \ \"Four\";\n                    break;\n                case 5:\n           \
    \         result[i] = \"Five\";\n                    break;\n                case\
    \ 6:\n                    result[i] = \"Six\";\n                    break;\n \
    \               case 7:\n                    result[i] = \"Seven\";\n        \
    \            break;\n                case 8:\n                    result[i] =\
    \ \"Eight\";\n                    break;\n                case 9:\n          \
    \          result[i] = \"Nine\";\n                    break;\n            }\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7qcuw73m.d(23): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7qcuw73m.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result = new string[arr.length];\n\
    \    foreach(i, e; arr)\n    {\n        if(e > 0 && e < 10)\n        {\n     \
    \       switch(e)\n            {\n                case 1:\n                  \
    \  result[i] = \"One\";\n                    break;\n                case 2:\n\
    \                    result[i] = \"Two\";\n                    break;\n      \
    \          case 3:\n                    result[i] = \"Three\";\n             \
    \       break;\n                case 4:\n                    result[i] = \"Four\"\
    ;\n                    break;\n                case 5:\n                    result[i]\
    \ = \"Five\";\n                    break;\n                case 6:\n         \
    \           result[i] = \"Six\";\n                    break;\n               \
    \ case 7:\n                    result[i] = \"Seven\";\n                    break;\n\
    \                case 8:\n                    result[i] = \"Eight\";\n       \
    \             break;\n                case 9:\n                    result[i] =\
    \ \"Nine\";\n                    break;\n            }\n        }\n    }\n   \
    \ return result.retro;\n}\nunittest\n{\n    alias candidate = by_length;\n\n \
    \   assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpuhnmi77b.d(23): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    /tmp/tmpuhnmi77b.d(55): Error: no property `retro` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuhnmi77b.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0)\n   \
    \     return [];\n    else\n    {\n        auto result = arr.filter!(a => a >=\
    \ 1 && a <= 9).sort.reverse;\n        return result.map!(a => [\"One\", \"Two\"\
    , \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"][a -\
    \ 1]).array;\n    }\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvaan11z6.d(22): Error: no property `filter` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvaan11z6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    return arr.map!(a => a.to!string).array.sort!((a,\
    \ b) => a.length > b.length).map!(a => a.to!long).array;\n}\nunittest\n{\n   \
    \ alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L,\
    \ 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"\
    One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpg9yz7tui.d(18): Error: no property `map` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg9yz7tui.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result = new string[arr.length];\n\
    \    foreach(i, e; arr)\n    {\n        if(e < 1 || e > 9)\n            continue;\n\
    \        result[i] = e.to!string;\n    }\n    result.sort!((a, b) => a.length\
    \ < b.length);\n    result.reverse;\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L,\
    \ 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L, -1L,\
    \ 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660164396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result = new string[arr.length];\n\
    \    foreach(i, e; arr)\n    {\n        if(e > 0 && e < 10)\n        {\n     \
    \       switch(e)\n            {\n                case 1:\n                  \
    \  result[i] = \"One\";\n                    break;\n                case 2:\n\
    \                    result[i] = \"Two\";\n                    break;\n      \
    \          case 3:\n                    result[i] = \"Three\";\n             \
    \       break;\n                case 4:\n                    result[i] = \"Four\"\
    ;\n                    break;\n                case 5:\n                    result[i]\
    \ = \"Five\";\n                    break;\n                case 6:\n         \
    \           result[i] = \"Six\";\n                    break;\n               \
    \ case 7:\n                    result[i] = \"Seven\";\n                    break;\n\
    \                case 8:\n                    result[i] = \"Eight\";\n       \
    \             break;\n                case 9:\n                    result[i] =\
    \ \"Nine\";\n                    break;\n            }\n        }\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9oefmqwp.d(23): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9oefmqwp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164395
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    auto result = arr.filter!(a\
    \ => a > 0 && a < 10).sort.reverse;\n    return result.map!(a => [\"One\", \"\
    Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    ][a - 1]);\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6ivsn2dk.d(18): Error: no property `filter` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6ivsn2dk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    if (arr.length == 0)\n   \
    \     return [];\n    auto arr_sorted = arr.sort;\n    auto arr_filtered = arr_sorted.filter!(a\
    \ => a > 0 && a < 10);\n    auto arr_reversed = arr_filtered.reverse;\n    auto\
    \ arr_mapped = arr_reversed.map!(a => a.to!string);\n    return arr_mapped;\n\
    }\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdgu7soa2.d(20): Error: no property `sort` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdgu7soa2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    return arr.map!(a => a.to!string).filter!(a\
    \ => a.length == 1).map!(a => a.to!int).sort.map!(a => a.to!string).map!(a =>\
    \ a.to!int).map!(a => a.to!string).map!(a => a.to!int).map!(a => a.to!string).map!(a\
    \ => a.to!int).map!(a => a.to!string).map!(a => a.to!int).map!(a => a.to!string).map!(a\
    \ => a.to!int).map!(a => a.to!string).map!(a => a.to!int).map!(a => a.to!string).map!(a\
    \ => a.to!int).map!(a => a.to!string).map!(a => a.to!int).map!(a => a.to!string).map!(a\
    \ => a.to!int).map!(a => a.to!string).map!(a => a.to!int).map!(a => a.to!string).map!(a\
    \ => a.to!int).map!(a => a.to!string).map!(a => a.to!int).map!(a => a.to!string).map!(a\
    \ => a.to!int).map!(a => a.to!string).map!(a => a.to!int).map!(a => a.to!string).map!(a\
    \ => a.to!int).map!(a => a.to!string).map!(a => a.to!int).map!(a => a.to!string).map!(a\
    \ => a.to!int).map!(a => a.to!string).map!(a => a.to!int).map!(a => a.to!string).map!(a\
    \ => a.to!int).map!(a => a.to!string).map!(a => a.to!int).map!(a => a.to!string).map!(a\
    \ => a.to!int).map!(a => a.to\nunittest\n{\n    alias candidate = by_length;\n\
    \n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpeze6p8pi.d(19): Error: found `unittest` when expecting `)` following
    template argument list

    /tmp/tmpeze6p8pi.d(20): Error: found `{` when expecting `;` following `return`
    statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpeze6p8pi.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result = new string[arr.length];\n\
    \    foreach(i, elem; arr)\n    {\n        if(elem > 0 && elem < 10)\n       \
    \ {\n            result[i] = to!string(elem);\n        }\n    }\n    sort(result);\n\
    \    reverse(result);\n    foreach(i, elem; result)\n    {\n        switch(to!long(elem))\n\
    \        {\n            case 1:\n                result[i] = \"One\";\n      \
    \          break;\n            case 2:\n                result[i] = \"Two\";\n\
    \                break;\n            case 3:\n                result[i] = \"Three\"\
    ;\n                break;\n            case 4:\n                result[i] = \"\
    Four\";\n                break;\n            case 5:\n                result[i]\
    \ = \"Five\";\n                break;\n            case 6:\n                result[i]\
    \ = \"Six\";\n                break;\n            case 7:\n                result[i]\
    \ = \"Seven\";\n                break;\n            case 8:\n                result[i]\
    \ = \"Eight\";\n                break;\n            case 9:\n                result[i]\
    \ = \"Nine\";\n                break;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjxnhko57.d(23): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    /tmp/tmpjxnhko57.d(26): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    /tmp/tmpjxnhko57.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(string[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    /tmp/tmpjxnhko57.d(30): Error: template instance `to!long` template `to` is not
    defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjxnhko57.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164397
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result = new string[arr.length];\n\
    \    foreach(i, e; arr)\n    {\n        if(e <= 9 && e >= 1)\n        {\n    \
    \        switch(e)\n            {\n                case 1:\n                 \
    \   result[i] = \"One\";\n                    break;\n                case 2:\n\
    \                    result[i] = \"Two\";\n                    break;\n      \
    \          case 3:\n                    result[i] = \"Three\";\n             \
    \       break;\n                case 4:\n                    result[i] = \"Four\"\
    ;\n                    break;\n                case 5:\n                    result[i]\
    \ = \"Five\";\n                    break;\n                case 6:\n         \
    \           result[i] = \"Six\";\n                    break;\n               \
    \ case 7:\n                    result[i] = \"Seven\";\n                    break;\n\
    \                case 8:\n                    result[i] = \"Eight\";\n       \
    \             break;\n                case 9:\n                    result[i] =\
    \ \"Nine\";\n                    break;\n            }\n        }\n    }\n   \
    \ return result.retro;\n}\nunittest\n{\n    alias candidate = by_length;\n\n \
    \   assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([])\
    \ == []);\n    assert(candidate([1L, -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L,\
    \ -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"]);\n    assert(candidate([9L,\
    \ 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpazzvsb2c.d(23): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    /tmp/tmpazzvsb2c.d(55): Error: no property `retro` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpazzvsb2c.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result = new string[arr.length];\n\
    \    foreach(i, e; arr)\n    {\n        if (e < 1 || e > 9)\n            continue;\n\
    \        switch(e)\n        {\n            case 1:\n                result[i]\
    \ = \"One\";\n                break;\n            case 2:\n                result[i]\
    \ = \"Two\";\n                break;\n            case 3:\n                result[i]\
    \ = \"Three\";\n                break;\n            case 4:\n                result[i]\
    \ = \"Four\";\n                break;\n            case 5:\n                result[i]\
    \ = \"Five\";\n                break;\n            case 6:\n                result[i]\
    \ = \"Six\";\n                break;\n            case 7:\n                result[i]\
    \ = \"Seven\";\n                break;\n            case 8:\n                result[i]\
    \ = \"Eight\";\n                break;\n            case 9:\n                result[i]\
    \ = \"Nine\";\n                break;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpk14hwtvo.d(23): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk14hwtvo.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result = new string[arr.length];\n\
    \    foreach(i, e; arr)\n    {\n        if(e >= 1 && e <= 9)\n        {\n    \
    \        switch(e)\n            {\n                case 1:\n                 \
    \   result[i] = \"One\";\n                    break;\n                case 2:\n\
    \                    result[i] = \"Two\";\n                    break;\n      \
    \          case 3:\n                    result[i] = \"Three\";\n             \
    \       break;\n                case 4:\n                    result[i] = \"Four\"\
    ;\n                    break;\n                case 5:\n                    result[i]\
    \ = \"Five\";\n                    break;\n                case 6:\n         \
    \           result[i] = \"Six\";\n                    break;\n               \
    \ case 7:\n                    result[i] = \"Seven\";\n                    break;\n\
    \                case 8:\n                    result[i] = \"Eight\";\n       \
    \             break;\n                case 9:\n                    result[i] =\
    \ \"Nine\";\n                    break;\n            }\n        }\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = by_length;\n\n    assert(candidate([2L,\
    \ 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpoyxlkr1t.d(23): Error: `switch` statement without a `default`;
    use `final switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoyxlkr1t.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164396
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result = new string[arr.length];\n\
    \    foreach(i, e; arr)\n    {\n        switch(e)\n        {\n            case\
    \ 1:\n                result[i] = \"One\";\n                break;\n         \
    \   case 2:\n                result[i] = \"Two\";\n                break;\n  \
    \          case 3:\n                result[i] = \"Three\";\n                break;\n\
    \            case 4:\n                result[i] = \"Four\";\n                break;\n\
    \            case 5:\n                result[i] = \"Five\";\n                break;\n\
    \            case 6:\n                result[i] = \"Six\";\n                break;\n\
    \            case 7:\n                result[i] = \"Seven\";\n               \
    \ break;\n            case 8:\n                result[i] = \"Eight\";\n      \
    \          break;\n            case 9:\n                result[i] = \"Nine\";\n\
    \                break;\n            default:\n                result[i] = \"\"\
    ;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L,\
    \ 8L, 2L, 3L]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"]);\n    assert(candidate([]) == []);\n    assert(candidate([1L,\
    \ -1L, 55L]) == [\"One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\"\
    , \"Two\", \"One\"]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\"\
    , \"Four\"]);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpn5xkuo1u.d(61): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294ad]

    ??:? void tmpn5xkuo1u.__unittest_L57_C1() [0x4282fb]

    ??:? void tmpn5xkuo1u.__modtest() [0x428714]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42e083]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429206]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ad29]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42adb8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42acb5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x4291dd]

    ??:? runModuleUnitTests [0x42de59]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429970]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164397
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n    \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n\n    For example:\n        \n      If the array is empty, return an empty\
    \ array:\n        \n      If the array has any strange number ignore it:\n   \
    \     \n*/\nstring[] by_length(long[] arr) \n{\n    string[] result = new string[arr.length];\n\
    \    foreach(i, e; arr)\n    {\n        if(e > 0 && e < 10)\n        {\n     \
    \       result[i] = to!string(e);\n        }\n    }\n    sort(result);\n    reverse(result);\n\
    \    foreach(i, e; result)\n    {\n        switch(e)\n        {\n            case\
    \ \"1\":\n                result[i] = \"One\";\n                break;\n     \
    \       case \"2\":\n                result[i] = \"Two\";\n                break;\n\
    \            case \"3\":\n                result[i] = \"Three\";\n           \
    \     break;\n            case \"4\":\n                result[i] = \"Four\";\n\
    \                break;\n            case \"5\":\n                result[i] =\
    \ \"Five\";\n                break;\n            case \"6\":\n               \
    \ result[i] = \"Six\";\n                break;\n            case \"7\":\n    \
    \            result[i] = \"Seven\";\n                break;\n            case\
    \ \"8\":\n                result[i] = \"Eight\";\n                break;\n   \
    \         case \"9\":\n                result[i] = \"Nine\";\n               \
    \ break;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = by_length;\n\n    assert(candidate([2L, 1L, 1L, 4L, 5L, 8L, 2L, 3L]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]);\n\
    \    assert(candidate([]) == []);\n    assert(candidate([1L, -1L, 55L]) == [\"\
    One\"]);\n    assert(candidate([1L, -1L, 3L, 2L]) == [\"Three\", \"Two\", \"One\"\
    ]);\n    assert(candidate([9L, 4L, 8L]) == [\"Nine\", \"Eight\", \"Four\"]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiasyvsui.d(23): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    /tmp/tmpiasyvsui.d(26): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    /tmp/tmpiasyvsui.d(27): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(string[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    /tmp/tmpiasyvsui.d(30): Error: `switch` statement without a `default`; use `final
    switch` or add `default: assert(0);` or add `default: break;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiasyvsui.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164395
