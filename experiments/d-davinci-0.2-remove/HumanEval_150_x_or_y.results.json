{
  "language": "d",
  "name": "HumanEval_150_x_or_y",
  "results": [
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n == 2)\n        return x;\n    else if (n == 3)\n        return x;\n    else if (n == 5)\n        return x;\n    else if (n == 7)\n        return x;\n    else if (n == 11)\n        return x;\n    else if (n == 13)\n        return x;\n    else if (n == 17)\n        return x;\n    else if (n == 19)\n        return x;\n    else if (n == 23)\n        return x;\n    else if (n == 29)\n        return x;\n    else if (n == 31)\n        return x;\n    else if (n == 37)\n        return x;\n    else if (n == 41)\n        return x;\n    else if (n == 43)\n        return x;\n    else if (n == 47)\n        return x;\n    else if (n == 53)\n        return x;\n    else if (n == 59)\n        return x;\n    else if (n == 61)\n        return x;\n    else if (n == 67)\n        return x;\n    else if (n == 71)\n        return x;\n    else if (n == 73)\n        return x;\n    else if (n == 79)\n        return x;\n    else if (n == 83)\n        return x;\n    else if (n == 89)\n        return x;\n    else if (n == 97)\n        return x;\n    else if (n == 101)\n        return x;\n    else if (n == 103)\n        return x;\n    else if (n == 107)\n        return x;\n    else if (n == 109)\n        return x;\n    else if (n == 113)\n        return x;\n    else if (n == 127)\n        return x;\n    else if (n == 131)\n        return x;\n    else if (n == 137)\n        return x;\n    else if (n == 139)\n        return x;\n    else if (n == 149)\n        return x;\n    else if (n == 151)\n        return x;\n    else if (n ==\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpw0ajtfq0.d(86): Error: expression expected, not `unittest`\n/tmp/tmpw0ajtfq0.d(87): Error: found `{` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw0ajtfq0.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660161306
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n == 1)\n        return y;\n    else if (n == 2)\n        return x;\n    else if (n % 2 == 0)\n        return y;\n    else\n    {\n        long i = 3;\n        while (i <= sqrt(n))\n        {\n            if (n % i == 0)\n                return y;\n            i += 2;\n        }\n        return x;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp8igt7mwt.d(22): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8igt7mwt.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660161306
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n <= 1) \n    {\n        return y;\n    }\n    else if (n == 2) \n    {\n        return x;\n    }\n    else if (n % 2 == 0) \n    {\n        return y;\n    }\n    else \n    {\n        long m = (long)sqrt(n);\n        for (long i = 3; i <= m; i += 2) \n        {\n            if (n % i == 0) \n            {\n                return y;\n            }\n        }\n        return x;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmppx8dlyll.d(27): Error: C style cast illegal, use `cast(long)sqrt(n)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppx8dlyll.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660161306
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n == 2) \n    {\n        return x;\n    }\n    else \n    {\n        return y;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmph72d6gx5.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x427e5d]\n??:? void tmph72d6gx5.__unittest_L22_C1() [0x427a36]\n??:? void tmph72d6gx5.__modtest() [0x427be0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb83]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa16]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fba9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430058]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb35]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ed]\n??:? runModuleUnitTests [0x42b959]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282ac]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660161307
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n < 2) \n    {\n        return y;\n    }\n    else \n    {\n        long i = 2;\n        while (i < n) \n        {\n            if (n % i == 0) \n            {\n                return y;\n            }\n            i = i + 1;\n        }\n        return x;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660161307
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n <= 1)\n    {\n        return y;\n    }\n    else if (n <= 3)\n    {\n        return x;\n    }\n    else if (n % 2 == 0 || n % 3 == 0)\n    {\n        return y;\n    }\n    long i = 5;\n    while (i * i <= n)\n    {\n        if (n % i == 0 || n % (i + 2) == 0)\n        {\n            return y;\n        }\n        i = i + 6;\n    }\n    return x;\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660161307
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n == 1) \n    {\n        return y;\n    }\n    else \n    {\n        foreach (i; 2 .. n) \n        {\n            if (n % i == 0) \n            {\n                return y;\n            }\n        }\n        return x;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660161307
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n < 2)\n        return y;\n    else if (n == 2)\n        return x;\n    else if (n % 2 == 0)\n        return y;\n    else\n    {\n        long i = 3;\n        while (i <= sqrt(n))\n        {\n            if (n % i == 0)\n                return y;\n            i += 2;\n        }\n        return x;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpng4to5ka.d(22): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpng4to5ka.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660161306
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n <= 1)\n        return y;\n    else if (n <= 3)\n        return x;\n    else if (n % 2 == 0 || n % 3 == 0)\n        return y;\n    long i = 5;\n    while (i * i <= n)\n    {\n        if (n % i == 0 || n % (i + 2) == 0)\n            return y;\n        i = i + 6;\n    }\n    return x;\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660161307
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n <= 1)\n        return y;\n    else if (n == 2)\n        return x;\n    else if (n % 2 == 0)\n        return y;\n    else\n    {\n        long m = cast(long)sqrt(n);\n        foreach (i; 2 .. m + 1)\n        {\n            if (n % i == 0)\n                return y;\n        }\n        return x;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpic2br3ej.d(21): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpic2br3ej.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660161306
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n == 1) return y;\n    if (n == 2) return x;\n    if (n % 2 == 0) return y;\n    for (long i = 3; i <= sqrt(n); i += 2) \n    {\n        if (n % i == 0) return y;\n    }\n    return x;\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp8_lfux7z.d(16): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8_lfux7z.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660161306
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n <= 1) \n    {\n        return y;\n    }\n    else \n    {\n        long i = 2;\n        while (i < n) \n        {\n            if (n % i == 0) \n            {\n                return y;\n            }\n            i = i + 1;\n        }\n        return x;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660161307
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n <= 1)\n        return y;\n    else if (n <= 3)\n        return x;\n    else if (n % 2 == 0 || n % 3 == 0)\n        return y;\n    else\n    {\n        long i = 5;\n        while (i * i <= n)\n        {\n            if (n % i == 0 || n % (i + 2) == 0)\n                return y;\n            i += 6;\n        }\n        return x;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660161307
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if(n == 1)\n        return y;\n    else if(n == 2)\n        return x;\n    else if(n % 2 == 0)\n        return y;\n    else\n    {\n        long i = 3;\n        while(i <= sqrt(n))\n        {\n            if(n % i == 0)\n                return y;\n            i += 2;\n        }\n        return x;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp4zp3j6yz.d(22): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4zp3j6yz.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660161306
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n <= 1)\n        return y;\n    else if (n <= 3)\n        return x;\n    else if (n % 2 == 0 || n % 3 == 0)\n        return y;\n    long i = 5;\n    while (i * i <= n)\n    {\n        if (n % i == 0 || n % (i + 2) == 0)\n            return y;\n        i = i + 6;\n    }\n    return x;\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660161307
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    long result;\n    if (n < 2) \n    {\n        result = y;\n    }\n    else \n    {\n        long i = 2;\n        long sqrt_n = sqrt(n);\n        while (i <= sqrt_n) \n        {\n            if (n % i == 0) \n            {\n                result = y;\n                return result;\n            }\n            i = i + 1;\n        }\n        result = x;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpn237nzpa.d(21): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpn237nzpa.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660161306
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n < 2) \n    {\n        return y;\n    }\n    if (n == 2) \n    {\n        return x;\n    }\n    if (n % 2 == 0) \n    {\n        return y;\n    }\n    long m = (long)sqrt(n);\n    for (long i = 3; i <= m; i += 2) \n    {\n        if (n % i == 0) \n        {\n            return y;\n        }\n    }\n    return x;\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp9j3vjge2.d(25): Error: C style cast illegal, use `cast(long)sqrt(n)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9j3vjge2.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660161306
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n <= 1) \n    {\n        return y;\n    }\n    else \n    {\n        long i = 2;\n        while (i < n) \n        {\n            if (n % i == 0) \n            {\n                return y;\n            }\n            i = i + 1;\n        }\n        return x;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660161307
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    long result;\n    if (n < 2) \n    {\n        result = y;\n    } \n    else \n    {\n        long i = 2;\n        while (i < n) \n        {\n            if (n % i == 0) \n            {\n                result = y;\n                return result;\n            }\n            i = i + 1;\n        }\n        result = x;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660161307
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n < 2)\n        return y;\n    else if (n == 2)\n        return x;\n    else if (n % 2 == 0)\n        return y;\n    else\n    {\n        long i = 3;\n        while (i <= sqrt(n))\n        {\n            if (n % i == 0)\n                return y;\n            i += 2;\n        }\n        return x;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpng4to5ka.d(22): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpng4to5ka.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660161306
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n < 2)\n        return y;\n    else\n    {\n        long i = 2;\n        while (i < n)\n        {\n            if (n % i == 0)\n                return y;\n            i = i + 1;\n        }\n        return x;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660161307
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n == 2)\n        return x;\n    else if (n == 3)\n        return x;\n    else if (n == 5)\n        return x;\n    else if (n == 7)\n        return x;\n    else if (n == 11)\n        return x;\n    else if (n == 13)\n        return x;\n    else if (n == 17)\n        return x;\n    else if (n == 19)\n        return x;\n    else if (n == 23)\n        return x;\n    else if (n == 29)\n        return x;\n    else if (n == 31)\n        return x;\n    else if (n == 37)\n        return x;\n    else if (n == 41)\n        return x;\n    else if (n == 43)\n        return x;\n    else if (n == 47)\n        return x;\n    else if (n == 53)\n        return x;\n    else if (n == 59)\n        return x;\n    else if (n == 61)\n        return x;\n    else if (n == 67)\n        return x;\n    else if (n == 71)\n        return x;\n    else if (n == 73)\n        return x;\n    else if (n == 79)\n        return x;\n    else if (n == 83)\n        return x;\n    else if (n == 89)\n        return x;\n    else if (n == 97)\n        return x;\n    else if (n == 101)\n        return x;\n    else if (n == 103)\n        return x;\n    else if (n == 107)\n        return x;\n    else if (n == 109)\n        return x;\n    else if (n == 113)\n        return x;\n    else if (n == 127)\n        return x;\n    else if (n == 131)\n        return x;\n    else if (n == 137)\n        return x;\n    else if (n == 139)\n        return x;\n    else if (n == 149)\n        return x;\n    else if (n == 151)\n        return x;\n    else if (n ==\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpw0ajtfq0.d(86): Error: expression expected, not `unittest`\n/tmp/tmpw0ajtfq0.d(87): Error: found `{` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw0ajtfq0.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660161306
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n <= 1) \n    {\n        return y;\n    }\n    else \n    {\n        bool prime = true;\n        for (long i = 2; i < n; i++) \n        {\n            if (n % i == 0) \n            {\n                prime = false;\n                break;\n            }\n        }\n        if (prime) \n        {\n            return x;\n        }\n        else \n        {\n            return y;\n        }\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660161307
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n < 2) \n    {\n        return y;\n    }\n    else \n    {\n        long i = 2;\n        while (i < n) \n        {\n            if (n % i == 0) \n            {\n                return y;\n            }\n            i = i + 1;\n        }\n        return x;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660161307
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n < 2) \n    {\n        return y;\n    }\n    else \n    {\n        foreach (i; 2 .. n) \n        {\n            if (n % i == 0) \n            {\n                return y;\n            }\n        }\n        return x;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660161307
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n < 2) \n    {\n        return y;\n    }\n    else \n    {\n        long i = 2;\n        while (i < n) \n        {\n            if (n % i == 0) \n            {\n                return y;\n            }\n            i = i + 1;\n        }\n        return x;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660161307
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n < 2) \n    {\n        return y;\n    }\n    else \n    {\n        long i = 2;\n        while (i < n) \n        {\n            if (n % i == 0) \n            {\n                return y;\n            }\n            i = i + 1;\n        }\n        return x;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660161307
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n <= 1)\n        return y;\n    else if (n <= 3)\n        return x;\n    else if (n % 2 == 0 || n % 3 == 0)\n        return y;\n    long i = 5;\n    while (i * i <= n)\n    {\n        if (n % i == 0 || n % (i + 2) == 0)\n            return y;\n        i = i + 6;\n    }\n    return x;\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660161307
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n <= 1) \n    {\n        return y;\n    }\n    else \n    {\n        long i = 2;\n        while (i < n) \n        {\n            if (n % i == 0) \n            {\n                return y;\n            }\n            i = i + 1;\n        }\n        return x;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660161307
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if(n < 2)\n        return y;\n    else\n    {\n        foreach(i; 2..n)\n        {\n            if(n % i == 0)\n                return y;\n        }\n        return x;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660161307
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n < 2) return y;\n    if (n == 2) return x;\n    if (n % 2 == 0) return y;\n    long m = (long)sqrt(n);\n    for (long i = 3; i <= m; i += 2)\n    {\n        if (n % i == 0) return y;\n    }\n    return x;\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpp9t7plh4.d(16): Error: C style cast illegal, use `cast(long)sqrt(n)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp9t7plh4.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660161306
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n < 2)\n        return y;\n    if (n == 2)\n        return x;\n    if (n % 2 == 0)\n        return y;\n    for (long i = 3; i * i <= n; i += 2)\n        if (n % i == 0)\n            return y;\n    return x;\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660161307
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if(n <= 1)\n        return y;\n    if(n <= 3)\n        return x;\n    if(n % 2 == 0 || n % 3 == 0)\n        return y;\n    long i = 5;\n    while(i * i <= n)\n    {\n        if(n % i == 0 || n % (i + 2) == 0)\n            return y;\n        i += 6;\n    }\n    return x;\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660161307
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n <= 1)\n        return y;\n    else if (n <= 3)\n        return x;\n    else if (n % 2 == 0 || n % 3 == 0)\n        return y;\n    long i = 5;\n    while (i * i <= n)\n    {\n        if (n % i == 0 || n % (i + 2) == 0)\n            return y;\n        i = i + 6;\n    }\n    return x;\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660161307
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n <= 1)\n        return y;\n    else if (n == 2)\n        return x;\n    else if (n % 2 == 0)\n        return y;\n    else\n    {\n        long i = 3;\n        while (i <= sqrt(n))\n        {\n            if (n % i == 0)\n                return y;\n            i += 2;\n        }\n        return x;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp2wibce4m.d(22): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2wibce4m.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660161306
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n == 1)\n        return y;\n    else if (n == 2)\n        return x;\n    else if (n % 2 == 0)\n        return y;\n    else\n    {\n        long i = 3;\n        while (i <= sqrt(n))\n        {\n            if (n % i == 0)\n                return y;\n            i += 2;\n        }\n        return x;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp8igt7mwt.d(22): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8igt7mwt.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660161306
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n < 2) \n    {\n        return y;\n    }\n    else \n    {\n        foreach (i; 2 .. n) \n        {\n            if (n % i == 0) \n            {\n                return y;\n            }\n        }\n        return x;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660161307
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n < 2) \n    {\n        return y;\n    }\n    else \n    {\n        long i = 2;\n        while (i < n) \n        {\n            if (n % i == 0) \n            {\n                return y;\n            }\n            i = i + 1;\n        }\n        return x;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660161307
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n < 2) \n    {\n        return y;\n    }\n    else \n    {\n        long i = 2;\n        while (i < n) \n        {\n            if (n % i == 0) \n            {\n                return y;\n            }\n            i = i + 1;\n        }\n        return x;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660161307
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n <= 1) \n    {\n        return y;\n    }\n    else \n    {\n        long i = 2;\n        while (i < n) \n        {\n            if (n % i == 0) \n            {\n                return y;\n            }\n            i = i + 1;\n        }\n        return x;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660161307
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n <= 1) \n    {\n        return y;\n    }\n    else if (n == 2) \n    {\n        return x;\n    }\n    else if (n % 2 == 0) \n    {\n        return y;\n    }\n    else \n    {\n        long m = cast(long) sqrt(n);\n        for (long i = 3; i <= m; i += 2) \n        {\n            if (n % i == 0) \n            {\n                return y;\n            }\n        }\n        return x;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpjeq9y2ko.d(27): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjeq9y2ko.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660161307
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n == 1)\n        return y;\n    else if (n == 2)\n        return x;\n    else if (n % 2 == 0)\n        return y;\n    else\n    {\n        long i = 3;\n        while (i <= sqrt(n))\n        {\n            if (n % i == 0)\n                return y;\n            i += 2;\n        }\n        return x;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp8igt7mwt.d(22): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8igt7mwt.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660161306
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (isPrime(n))\n        return x;\n    else\n        return y;\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpaxhofiz5.d(13): Error: undefined identifier `isPrime`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpaxhofiz5.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660161307
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    long i;\n    long result;\n    if (n == 1) \n    {\n        result = y;\n    }\n    else \n    {\n        i = 2;\n        while (i < n) \n        {\n            if (n % i == 0) \n            {\n                result = y;\n                break;\n            }\n            else \n            {\n                result = x;\n            }\n            i = i + 1;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpw2aj0e3t.d(51): unittest failure\n----------------\n??:? _d_unittestp [0x427ec5]\n??:? void tmpw2aj0e3t.__unittest_L38_C1() [0x427c30]\n??:? void tmpw2aj0e3t.__modtest() [0x427c44]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bbeb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa7e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc11]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300c0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb9d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa55]\n??:? runModuleUnitTests [0x42b9c1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428314]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660161307
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    long i = 2;\n    while (i < n) {\n        if (n % i == 0) {\n            return y;\n        }\n        i = i + 1;\n    }\n    return x;\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmprhnb19yt.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427e9d]\n??:? void tmprhnb19yt.__unittest_L22_C1() [0x427be2]\n??:? void tmprhnb19yt.__modtest() [0x427c1c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bbc3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa56]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbe9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430098]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb75]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa2d]\n??:? runModuleUnitTests [0x42b999]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282ec]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660161307
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if(n == 2)\n        return x;\n    else if(n % 2 == 0)\n        return y;\n    else\n    {\n        long i = 3;\n        while(i <= sqrt(n))\n        {\n            if(n % i == 0)\n                return y;\n            i += 2;\n        }\n        return x;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpphdqoplq.d(20): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpphdqoplq.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660161307
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n <= 1)\n        return y;\n    else if (n == 2)\n        return x;\n    else if (n % 2 == 0)\n        return y;\n    else\n    {\n        long i = 3;\n        while (i <= sqrt(n))\n        {\n            if (n % i == 0)\n                return y;\n            i += 2;\n        }\n        return x;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp2wibce4m.d(22): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2wibce4m.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660161306
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n == 0) \n    {\n        return y;\n    }\n    else if (n == 1) \n    {\n        return x;\n    }\n    else \n    {\n        long i = 2;\n        while (i < n) \n        {\n            if (n % i == 0) \n            {\n                return y;\n            }\n            i = i + 1;\n        }\n        return x;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp5q_wpa_s.d(47): unittest failure\n----------------\n??:? _d_unittestp [0x427eb5]\n??:? void tmp5q_wpa_s.__unittest_L35_C1() [0x427bfa]\n??:? void tmp5q_wpa_s.__modtest() [0x427c34]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bbdb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa6e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc01]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300b0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb8d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa45]\n??:? runModuleUnitTests [0x42b9b1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428304]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660161307
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n <= 1) \n    {\n        return y;\n    }\n    else \n    {\n        foreach (i; 2 .. cast(long)sqrt(n)) \n        {\n            if (n % i == 0) \n            {\n                return y;\n            }\n        }\n        return x;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpkibdf2wm.d(19): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkibdf2wm.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660161307
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n <= 1) \n    {\n        return y;\n    }\n    else \n    {\n        long i = 2;\n        while (i < n) \n        {\n            if (n % i == 0) \n            {\n                return y;\n            }\n            i = i + 1;\n        }\n        return x;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660161307
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n <= 1) \n    {\n        return y;\n    }\n    else \n    {\n        long i = 2;\n        while (i < n) \n        {\n            if (n % i == 0) \n            {\n                return y;\n            }\n            i = i + 1;\n        }\n        return x;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660161307
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n <= 1) \n    {\n        return y;\n    }\n    else if (n <= 3) \n    {\n        return x;\n    }\n    else if (n % 2 == 0 || n % 3 == 0) \n    {\n        return y;\n    }\n    long i = 5;\n    while (i * i <= n) \n    {\n        if (n % i == 0 || n % (i + 2) == 0) \n        {\n            return y;\n        }\n        i = i + 6;\n    }\n    return x;\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660161307
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n <= 1)\n        return y;\n    else if (n == 2)\n        return x;\n    else if (n % 2 == 0)\n        return y;\n    else\n    {\n        long m = cast(long)sqrt(n);\n        for (long i = 3; i <= m; i += 2)\n            if (n % i == 0)\n                return y;\n        return x;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp4a41jeq4.d(21): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4a41jeq4.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660161307
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n == 1)\n        return y;\n    else if (n == 2)\n        return x;\n    else if (n % 2 == 0)\n        return y;\n    else\n    {\n        long i = 3;\n        while (i <= sqrt(n))\n        {\n            if (n % i == 0)\n                return y;\n            i += 2;\n        }\n        return x;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp8igt7mwt.d(22): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8igt7mwt.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660161306
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n == 1)\n        return y;\n    else if (n == 2)\n        return x;\n    else if (n % 2 == 0)\n        return y;\n    else\n    {\n        long i = 3;\n        while (i <= sqrt(n))\n        {\n            if (n % i == 0)\n                return y;\n            i += 2;\n        }\n        return x;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp8igt7mwt.d(22): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8igt7mwt.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660161306
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n <= 1)\n        return y;\n    else if (n <= 3)\n        return x;\n    else if (n % 2 == 0 || n % 3 == 0)\n        return y;\n    long i = 5;\n    while (i * i <= n)\n    {\n        if (n % i == 0 || n % (i + 2) == 0)\n            return y;\n        i = i + 6;\n    }\n    return x;\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660161307
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n == 1) \n    {\n        return y;\n    }\n    else \n    {\n        long i = 2;\n        while (i < n) \n        {\n            if (n % i == 0) \n            {\n                return y;\n            }\n            i = i + 1;\n        }\n        return x;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660161307
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n <= 1) \n    {\n        return y;\n    }\n    else \n    {\n        foreach (i; 2 .. n) \n        {\n            if (n % i == 0) \n            {\n                return y;\n            }\n        }\n        return x;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660161307
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n == 2)\n        return x;\n    else if (n % 2 == 0)\n        return y;\n    else\n    {\n        long i = 3;\n        while (i < n)\n        {\n            if (n % i == 0)\n                return y;\n            i = i + 2;\n        }\n        return x;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpqq0oqab1.d(41): unittest failure\n----------------\n??:? _d_unittestp [0x427ec5]\n??:? void tmpqq0oqab1.__unittest_L29_C1() [0x427c0a]\n??:? void tmpqq0oqab1.__modtest() [0x427c44]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bbeb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa7e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc11]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300c0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb9d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa55]\n??:? runModuleUnitTests [0x42b9c1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428314]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660161307
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n < 2)\n    {\n        return y;\n    }\n    else\n    {\n        long i = 2;\n        while (i < n)\n        {\n            if (n % i == 0)\n            {\n                return y;\n            }\n            i = i + 1;\n        }\n        return x;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660161307
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n < 2) \n    {\n        return y;\n    }\n    else \n    {\n        foreach (i; 2 .. n) \n        {\n            if (n % i == 0) \n            {\n                return y;\n            }\n        }\n        return x;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660161307
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    long i;\n    if (n <= 1) \n    {\n        return y;\n    }\n    else \n    {\n        for (i = 2; i <= n / 2; i++) \n        {\n            if (n % i == 0) \n            {\n                return y;\n            }\n        }\n        return x;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660161307
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n <= 1) \n    {\n        return y;\n    }\n    else \n    {\n        long i = 2;\n        while (i < n) \n        {\n            if (n % i == 0) \n            {\n                return y;\n            }\n            i++;\n        }\n        return x;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660161308
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n == 1)\n    {\n        return y;\n    }\n    else\n    {\n        if (n == 2)\n        {\n            return x;\n        }\n        else\n        {\n            if (n % 2 == 0)\n            {\n                return y;\n            }\n            else\n            {\n                long i = 3;\n                while (i <= sqrt(n))\n                {\n                    if (n % i == 0)\n                    {\n                        return y;\n                    }\n                    i = i + 2;\n                }\n                return x;\n            }\n        }\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpgid5h6vw.d(32): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgid5h6vw.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660161307
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n < 2)\n        return y;\n    foreach (i; 2 .. n)\n        if (n % i == 0)\n            return y;\n    return x;\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660161308
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n < 2) \n    {\n        return y;\n    }\n    else \n    {\n        long i = 2;\n        while (i < n) \n        {\n            if (n % i == 0) \n            {\n                return y;\n            }\n            i = i + 1;\n        }\n        return x;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660161307
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n < 2) \n    {\n        return y;\n    }\n    else \n    {\n        foreach (i; 2 .. n) \n        {\n            if (n % i == 0) \n            {\n                return y;\n            }\n        }\n        return x;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660161307
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n <= 1) \n    {\n        return y;\n    }\n    else if (n == 2) \n    {\n        return x;\n    }\n    else if (n % 2 == 0) \n    {\n        return y;\n    }\n    else \n    {\n        long m = (long)sqrt(n);\n        for (long i = 3; i <= m; i += 2) \n        {\n            if (n % i == 0) \n            {\n                return y;\n            }\n        }\n        return x;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmppx8dlyll.d(27): Error: C style cast illegal, use `cast(long)sqrt(n)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppx8dlyll.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660161306
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n == 2)\n        return x;\n    else if (n % 2 == 0)\n        return y;\n    else\n    {\n        long i = 3;\n        while (i <= sqrt(n))\n        {\n            if (n % i == 0)\n                return y;\n            i += 2;\n        }\n        return x;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp3fp0j9g8.d(20): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3fp0j9g8.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660161307
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n == 1)\n        return y;\n    else if (n == 2)\n        return x;\n    else if (n % 2 == 0)\n        return y;\n    else\n    {\n        long i = 3;\n        while (i <= sqrt(n))\n        {\n            if (n % i == 0)\n                return y;\n            i += 2;\n        }\n        return x;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp8igt7mwt.d(22): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8igt7mwt.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660161306
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n == 1)\n        return y;\n    else if (n == 2)\n        return x;\n    else\n    {\n        long i = 2;\n        while (i < n)\n        {\n            if (n % i == 0)\n                return y;\n            i = i + 1;\n        }\n        return x;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660161308
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n == 1)\n        return y;\n    else if (n == 2)\n        return x;\n    else if (n % 2 == 0)\n        return y;\n    else\n    {\n        long i = 3;\n        while (i <= sqrt(n))\n        {\n            if (n % i == 0)\n                return y;\n            i += 2;\n        }\n        return x;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp8igt7mwt.d(22): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8igt7mwt.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660161306
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n <= 1) \n    {\n        return y;\n    }\n    else \n    {\n        long i = 2;\n        while (i < n) \n        {\n            if (n % i == 0) \n            {\n                return y;\n            }\n            i = i + 1;\n        }\n        return x;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660161307
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n < 2)\n        return y;\n    else if (n == 2)\n        return x;\n    else if (n % 2 == 0)\n        return y;\n    else\n    {\n        long m = cast(long)sqrt(n);\n        for (long i = 3; i <= m; i += 2)\n            if (n % i == 0)\n                return y;\n        return x;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp9op9t3j7.d(21): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9op9t3j7.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660161307
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n < 2)\n        return y;\n    else if (n == 2)\n        return x;\n    else if (n % 2 == 0)\n        return y;\n    else\n    {\n        long m = cast(long)sqrt(n);\n        for (long i = 3; i <= m; i += 2)\n            if (n % i == 0)\n                return y;\n        return x;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp9op9t3j7.d(21): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9op9t3j7.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660161307
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n == 2) \n    {\n        return x;\n    }\n    else if (n % 2 == 0) \n    {\n        return y;\n    }\n    else \n    {\n        long i = 3;\n        while (i <= sqrt(n)) \n        {\n            if (n % i == 0) \n            {\n                return y;\n            }\n            i += 2;\n        }\n        return x;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpsg_vvaqi.d(24): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsg_vvaqi.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660161307
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n < 2)\n        return y;\n    else\n    {\n        long i = 2;\n        while (i < n)\n        {\n            if (n % i == 0)\n                return y;\n            i = i + 1;\n        }\n        return x;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660161307
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n < 2) \n    {\n        return y;\n    }\n    else \n    {\n        long i = 2;\n        while (i < n) \n        {\n            if (n % i == 0) \n            {\n                return y;\n            }\n            i = i + 1;\n        }\n        return x;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660161307
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n < 2)\n        return y;\n    if (n == 2)\n        return x;\n    if (n % 2 == 0)\n        return y;\n    for (long i = 3; i * i <= n; i += 2)\n        if (n % i == 0)\n            return y;\n    return x;\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660161307
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n <= 1)\n        return y;\n    else if (n <= 3)\n        return x;\n    else if (n % 2 == 0 || n % 3 == 0)\n        return y;\n    long i = 5;\n    while (i * i <= n)\n    {\n        if (n % i == 0 || n % (i + 2) == 0)\n            return y;\n        i = i + 6;\n    }\n    return x;\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660161307
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n <= 1)\n        return y;\n    else if (n == 2)\n        return x;\n    else\n    {\n        long i = 2;\n        while (i < n)\n        {\n            if (n % i == 0)\n                return y;\n            i = i + 1;\n        }\n        return x;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660161308
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    long result;\n    if (n <= 1) \n    {\n        result = y;\n    }\n    else \n    {\n        long i = 2;\n        bool is_prime = true;\n        while (i < n) \n        {\n            if (n % i == 0) \n            {\n                is_prime = false;\n                break;\n            }\n            i = i + 1;\n        }\n        if (is_prime) \n        {\n            result = x;\n        }\n        else \n        {\n            result = y;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660161308
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n <= 1)\n        return y;\n    else if (n == 2)\n        return x;\n    else if (n % 2 == 0)\n        return y;\n    else\n    {\n        long i = 3;\n        while (i <= sqrt(n))\n        {\n            if (n % i == 0)\n                return y;\n            i += 2;\n        }\n        return x;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp2wibce4m.d(22): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2wibce4m.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660161306
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n < 2) \n    {\n        return y;\n    }\n    else \n    {\n        long i = 2;\n        while (i < n) \n        {\n            if (n % i == 0) \n            {\n                return y;\n            }\n            i = i + 1;\n        }\n        return x;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660161307
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    return (n % 2 == 0) ? y : x;\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmprfw3_98t.d(20): unittest failure\n----------------\n??:? _d_unittestp [0x427e6d]\n??:? void tmprfw3_98t.__unittest_L15_C1() [0x427a75]\n??:? void tmprfw3_98t.__modtest() [0x427bf0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb93]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa26]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbb9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430068]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb45]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9fd]\n??:? runModuleUnitTests [0x42b969]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282bc]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660161308
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n == 1) \n    {\n        return y;\n    }\n    else \n    {\n        long i = 2;\n        while (i < n) \n        {\n            if (n % i == 0) \n            {\n                return y;\n            }\n            i = i + 1;\n        }\n        return x;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660161307
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n == 2) \n    {\n        return x;\n    }\n    else \n    {\n        return y;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmph72d6gx5.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x427e5d]\n??:? void tmph72d6gx5.__unittest_L22_C1() [0x427a36]\n??:? void tmph72d6gx5.__modtest() [0x427be0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb83]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa16]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fba9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430058]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb35]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ed]\n??:? runModuleUnitTests [0x42b959]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282ac]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660161307
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    long i;\n    if (n <= 1) \n    {\n        return y;\n    }\n    else \n    {\n        i = 2;\n        while (i < n) \n        {\n            if (n % i == 0) \n            {\n                return y;\n            }\n            i = i + 1;\n        }\n        return x;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660161308
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n <= 1) \n    {\n        return y;\n    }\n    else \n    {\n        long i = 2;\n        while (i < n) \n        {\n            if (n % i == 0) \n            {\n                return y;\n            }\n            i = i + 1;\n        }\n        return x;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660161307
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (isPrime(n))\n        return x;\n    else\n        return y;\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpaxhofiz5.d(13): Error: undefined identifier `isPrime`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpaxhofiz5.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660161307
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n == 2) \n    {\n        return x;\n    }\n    else \n    {\n        long i = 2;\n        while (i < n) \n        {\n            if (n % i == 0) \n            {\n                return y;\n            }\n            i = i + 1;\n        }\n        return x;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7dfswyis.d(43): unittest failure\n----------------\n??:? _d_unittestp [0x427ea5]\n??:? void tmp7dfswyis.__unittest_L31_C1() [0x427bee]\n??:? void tmp7dfswyis.__modtest() [0x427c28]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bbcb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa5e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbf1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300a0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb7d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa35]\n??:? runModuleUnitTests [0x42b9a1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282f4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660161308
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n <= 1)\n        return y;\n    else if (n <= 3)\n        return x;\n    else if (n % 2 == 0 || n % 3 == 0)\n        return y;\n    else\n    {\n        long i = 5;\n        while (i * i <= n)\n        {\n            if (n % i == 0 || n % (i + 2) == 0)\n                return y;\n            i += 6;\n        }\n        return x;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660161307
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n < 2)\n        return y;\n    else if (n == 2)\n        return x;\n    else if (n % 2 == 0)\n        return y;\n    else\n    {\n        long m = cast(long)sqrt(n);\n        for (long k = 3; k <= m; k += 2)\n        {\n            if (n % k == 0)\n                return y;\n        }\n        return x;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpva8ns2m2.d(21): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpva8ns2m2.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660161307
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n <= 1) \n    {\n        return y;\n    }\n    else \n    {\n        long i = 2;\n        while (i <= n / 2) \n        {\n            if (n % i == 0) \n            {\n                return y;\n            }\n            i = i + 1;\n        }\n        return x;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660161308
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n <= 1) \n    {\n        return y;\n    }\n    else \n    {\n        long i = 2;\n        while (i < n) \n        {\n            if (n % i == 0) \n            {\n                return y;\n            }\n            i = i + 1;\n        }\n        return x;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660161307
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n < 2)\n        return y;\n    else if (n == 2)\n        return x;\n    else if (n % 2 == 0)\n        return y;\n    else\n    {\n        long i = 3;\n        while (i <= sqrt(n))\n        {\n            if (n % i == 0)\n                return y;\n            i += 2;\n        }\n        return x;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpng4to5ka.d(22): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpng4to5ka.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660161306
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n <= 1) \n    {\n        return y;\n    }\n    else \n    {\n        long i = 2;\n        while (i < n) \n        {\n            if (n % i == 0) \n            {\n                return y;\n            }\n            i = i + 1;\n        }\n        return x;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660161307
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n < 2)\n        return y;\n    if (n % 2 == 0)\n        return y;\n    for (long i = 3; i <= sqrt(n); i += 2)\n    {\n        if (n % i == 0)\n            return y;\n    }\n    return x;\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpf0x67zyg.d(17): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf0x67zyg.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660161307
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    long i = 2;\n    while (i <= n / 2) \n    {\n        if (n % i == 0) \n        {\n            return y;\n        }\n        i = i + 1;\n    }\n    return x;\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp9397t771.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x427ea5]\n??:? void tmp9397t771.__unittest_L24_C1() [0x427bee]\n??:? void tmp9397t771.__modtest() [0x427c28]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bbcb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa5e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbf1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300a0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb7d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa35]\n??:? runModuleUnitTests [0x42b9a1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282f4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660161308
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n <= 1)\n        return y;\n    else if (n == 2)\n        return x;\n    else if (n % 2 == 0)\n        return y;\n    else\n    {\n        long m = cast(long)sqrt(n);\n        for (long i = 3; i <= m; i += 2)\n            if (n % i == 0)\n                return y;\n        return x;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp4a41jeq4.d(21): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4a41jeq4.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660161307
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n < 2)\n    {\n        return y;\n    }\n    else\n    {\n        foreach (i; 2 .. n)\n        {\n            if (n % i == 0)\n            {\n                return y;\n            }\n        }\n        return x;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660161308
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n == 1)\n        return y;\n    else if (n == 2)\n        return x;\n    else if (n % 2 == 0)\n        return y;\n    else\n    {\n        long i = 3;\n        while (i <= sqrt(n))\n        {\n            if (n % i == 0)\n                return y;\n            i += 2;\n        }\n        return x;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp8igt7mwt.d(22): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8igt7mwt.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660161306
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n < 2) \n    {\n        return y;\n    }\n    else \n    {\n        long i = 2;\n        while (i < n) \n        {\n            if (n % i == 0) \n            {\n                return y;\n            }\n            i = i + 1;\n        }\n        return x;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660161307
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n <= 1)\n        return y;\n    else if (n <= 3)\n        return x;\n    else if (n % 2 == 0 || n % 3 == 0)\n        return y;\n    long i = 5;\n    while (i * i <= n)\n    {\n        if (n % i == 0 || n % (i + 2) == 0)\n            return y;\n        i = i + 6;\n    }\n    return x;\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660161307
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n <= 1)\n        return y;\n    if (n <= 3)\n        return x;\n    if (n % 2 == 0 || n % 3 == 0)\n        return y;\n    long i = 5;\n    while (i * i <= n)\n    {\n        if (n % i == 0 || n % (i + 2) == 0)\n            return y;\n        i = i + 6;\n    }\n    return x;\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660161308
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n < 2)\n        return y;\n    if (n == 2)\n        return x;\n    if (n % 2 == 0)\n        return y;\n    for (long i = 3; i * i <= n; i += 2)\n        if (n % i == 0)\n            return y;\n    return x;\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660161307
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n <= 1) \n    {\n        return y;\n    }\n    else \n    {\n        long i = 2;\n        while (i < n) \n        {\n            if (n % i == 0) \n            {\n                return y;\n            }\n            i = i + 1;\n        }\n        return x;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660161307
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n <= 1)\n        return y;\n    else if (n == 2)\n        return x;\n    else if (n % 2 == 0)\n        return y;\n    else\n    {\n        long m = cast(long)sqrt(n);\n        for (long i = 3; i <= m; i += 2)\n            if (n % i == 0)\n                return y;\n        return x;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp4a41jeq4.d(21): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4a41jeq4.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660161307
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n < 2) return y;\n    if (n == 2) return x;\n    if (n % 2 == 0) return y;\n    for (long i = 3; i * i <= n; i += 2) \n    {\n        if (n % i == 0) return y;\n    }\n    return x;\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660161308
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n <= 1) \n    {\n        return y;\n    }\n    else \n    {\n        long i = 2;\n        while (i < n) \n        {\n            if (n % i == 0) \n            {\n                return y;\n            }\n            i = i + 1;\n        }\n        return x;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660161307
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n == 2)\n        return x;\n    else if (n % 2 == 0)\n        return y;\n    else\n    {\n        long i = 3;\n        while (i <= sqrt(n))\n        {\n            if (n % i == 0)\n                return y;\n            i = i + 2;\n        }\n        return x;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp20892t1q.d(20): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp20892t1q.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660161307
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n < 2)\n    {\n        return y;\n    }\n    else\n    {\n        long i = 2;\n        while (i <= n / 2)\n        {\n            if (n % i == 0)\n            {\n                return y;\n            }\n            i = i + 1;\n        }\n        return x;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660161308
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n <= 1)\n        return y;\n    if (n == 2)\n        return x;\n    if (n % 2 == 0)\n        return y;\n    long m = (long)sqrt(n);\n    for (long i = 3; i <= m; i += 2)\n        if (n % i == 0)\n            return y;\n    return x;\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpkaq2vqef.d(19): Error: C style cast illegal, use `cast(long)sqrt(n)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkaq2vqef.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660161307
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n < 2) \n    {\n        return y;\n    }\n    if (n % 2 == 0) \n    {\n        return y;\n    }\n    for (long i = 3; i * i <= n; i += 2) \n    {\n        if (n % i == 0) \n        {\n            return y;\n        }\n    }\n    return x;\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpq5h8y9r_.d(43): unittest failure\n----------------\n??:? _d_unittestp [0x427ebd]\n??:? void tmpq5h8y9r_.__unittest_L30_C1() [0x427c2a]\n??:? void tmpq5h8y9r_.__modtest() [0x427c40]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bbe3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa76]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc09]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300b8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb95]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa4d]\n??:? runModuleUnitTests [0x42b9b9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42830c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660161308
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n <= 1) \n    {\n        return y;\n    }\n    else \n    {\n        long i = 2;\n        while (i < n) \n        {\n            if (n % i == 0) \n            {\n                return y;\n            }\n            i = i + 1;\n        }\n        return x;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660161307
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    long i;\n    long result;\n    if (n <= 1) \n    {\n        result = y;\n    }\n    else \n    {\n        i = 2;\n        while (i < n) \n        {\n            if (n % i == 0) \n            {\n                result = y;\n                break;\n            }\n            i = i + 1;\n        }\n        result = x;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpudr7ogoh.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x427ec5]\n??:? void tmpudr7ogoh.__unittest_L35_C1() [0x427ac9]\n??:? void tmpudr7ogoh.__modtest() [0x427c44]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bbeb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa7e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc11]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300c0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb9d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa55]\n??:? runModuleUnitTests [0x42b9c1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428314]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660161308
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n < 2)\n        return y;\n    else if (n == 2)\n        return x;\n    else if (n % 2 == 0)\n        return y;\n    else\n    {\n        long m = cast(long)sqrt(n);\n        for (long i = 3; i <= m; i += 2)\n            if (n % i == 0)\n                return y;\n        return x;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp9op9t3j7.d(21): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9op9t3j7.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660161307
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n <= 1) \n    {\n        return y;\n    }\n    else \n    {\n        long i = 2;\n        while (i < n) \n        {\n            if (n % i == 0) \n            {\n                return y;\n            }\n            i = i + 1;\n        }\n        return x;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660161307
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n < 2)\n        return y;\n    if (n == 2)\n        return x;\n    if (n % 2 == 0)\n        return y;\n    for (long i = 3; i <= sqrt(n); i += 2)\n        if (n % i == 0)\n            return y;\n    return x;\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmprxoq5psc.d(19): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprxoq5psc.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660161308
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n < 2) return y;\n    if (n == 2) return x;\n    if (n % 2 == 0) return y;\n    long m = (long)sqrt(n);\n    foreach (i; 2 .. m + 1) \n    {\n        if (n % i == 0) return y;\n    }\n    return x;\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpudo16xtt.d(16): Error: C style cast illegal, use `cast(long)sqrt(n)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpudo16xtt.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660161307
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    long i = 2;\n    while (i < n) \n    {\n        if (n % i == 0) \n        {\n            return y;\n        }\n        i = i + 1;\n    }\n    return x;\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpn20yf30b.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x427e9d]\n??:? void tmpn20yf30b.__unittest_L24_C1() [0x427be2]\n??:? void tmpn20yf30b.__modtest() [0x427c1c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bbc3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa56]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbe9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430098]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb75]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa2d]\n??:? runModuleUnitTests [0x42b999]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282ec]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660161308
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    return isPrime(n) ? x : y;\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpdm9ir7sa.d(13): Error: undefined identifier `isPrime`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdm9ir7sa.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660161308
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n <= 1)\n        return y;\n    else if (n == 2)\n        return x;\n    else if (n % 2 == 0)\n        return y;\n    else\n    {\n        long m = cast(long)sqrt(n);\n        for (long i = 3; i <= m; i += 2)\n            if (n % i == 0)\n                return y;\n        return x;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp4a41jeq4.d(21): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4a41jeq4.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660161307
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n <= 1) \n    {\n        return y;\n    }\n    else \n    {\n        long i = 2;\n        while (i < n) \n        {\n            if (n % i == 0) \n            {\n                return y;\n            }\n            i = i + 1;\n        }\n        return x;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660161307
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n == 2) \n    {\n        return x;\n    }\n    else if (n % 2 == 0) \n    {\n        return y;\n    }\n    else \n    {\n        long i = 3;\n        while (i <= sqrt(n)) \n        {\n            if (n % i == 0) \n            {\n                return y;\n            }\n            i = i + 2;\n        }\n        return x;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp7mlhnq1d.d(24): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7mlhnq1d.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660161308
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n == 1)\n        return y;\n    else if (n == 2)\n        return x;\n    else if (n % 2 == 0)\n        return y;\n    else\n    {\n        long i = 3;\n        while (i <= sqrt(n))\n        {\n            if (n % i == 0)\n                return y;\n            i += 2;\n        }\n        return x;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp8igt7mwt.d(22): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8igt7mwt.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660161306
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n <= 1) \n    {\n        return y;\n    }\n    else \n    {\n        foreach (i; 2 .. cast(long)sqrt(n) + 1) \n        {\n            if (n % i == 0) \n            {\n                return y;\n            }\n        }\n        return x;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpzyljo66m.d(19): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzyljo66m.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660161308
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n < 2)\n        return y;\n    else if (n == 2)\n        return x;\n    else if (n % 2 == 0)\n        return y;\n    else\n    {\n        long m = (long)sqrt(n);\n        for (long k = 3; k <= m; k += 2)\n        {\n            if (n % k == 0)\n                return y;\n        }\n        return x;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp4n9p5odb.d(21): Error: C style cast illegal, use `cast(long)sqrt(n)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4n9p5odb.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660161308
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n < 2) \n    {\n        return y;\n    }\n    else \n    {\n        long i = 2;\n        while (i < n) \n        {\n            if (n % i == 0) \n            {\n                return y;\n            }\n            i = i + 1;\n        }\n        return x;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660161307
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n < 2) \n    {\n        return y;\n    }\n    else \n    {\n        long i = 2;\n        while (i < n) \n        {\n            if (n % i == 0) \n            {\n                return y;\n            }\n            i = i + 1;\n        }\n        return x;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660161307
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n < 2)\n        return y;\n    else if (n == 2)\n        return x;\n    else if (n % 2 == 0)\n        return y;\n    else\n    {\n        long i = 3;\n        while (i <= sqrt(n))\n        {\n            if (n % i == 0)\n                return y;\n            i += 2;\n        }\n        return x;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpng4to5ka.d(22): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpng4to5ka.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660161306
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n < 2) return y;\n    if (n == 2) return x;\n    if (n % 2 == 0) return y;\n    long m = cast(long)sqrt(n);\n    for (long i = 3; i <= m; i += 2) \n    {\n        if (n % i == 0) return y;\n    }\n    return x;\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpyucggxk1.d(16): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyucggxk1.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660161308
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n <= 1) \n    {\n        return y;\n    }\n    else \n    {\n        long i = 2;\n        while (i < n) \n        {\n            if (n % i == 0) \n            {\n                return y;\n            }\n            i = i + 1;\n        }\n        return x;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660161307
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    return isPrime(n) ? x : y;\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpdm9ir7sa.d(13): Error: undefined identifier `isPrime`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdm9ir7sa.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660161308
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n <= 1)\n        return y;\n    else if (n == 2)\n        return x;\n    else if (n % 2 == 0)\n        return y;\n    else\n    {\n        long m = cast(long)sqrt(n);\n        for (long i = 3; i <= m; i += 2)\n            if (n % i == 0)\n                return y;\n        return x;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp4a41jeq4.d(21): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4a41jeq4.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660161307
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n <= 1)\n        return y;\n    else if (n <= 3)\n        return x;\n    else if (n % 2 == 0 || n % 3 == 0)\n        return y;\n    long i = 5;\n    while (i * i <= n)\n    {\n        if (n % i == 0 || n % (i + 2) == 0)\n            return y;\n        i = i + 6;\n    }\n    return x;\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660161307
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    return isPrime(n) ? x : y;\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpdm9ir7sa.d(13): Error: undefined identifier `isPrime`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdm9ir7sa.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660161308
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n < 2)\n        return y;\n    if (n == 2)\n        return x;\n    if (n % 2 == 0)\n        return y;\n    for (long i = 3; i * i <= n; i += 2)\n        if (n % i == 0)\n            return y;\n    return x;\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660161307
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n == 2)\n        return x;\n    else if (n % 2 == 0)\n        return y;\n    else\n    {\n        long i = 3;\n        while (i <= sqrt(n))\n        {\n            if (n % i == 0)\n                return y;\n            i += 2;\n        }\n        return x;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp3fp0j9g8.d(20): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3fp0j9g8.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660161307
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    return isPrime(n) ? x : y;\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpdm9ir7sa.d(13): Error: undefined identifier `isPrime`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdm9ir7sa.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660161308
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n < 2) \n    {\n        return y;\n    }\n    else \n    {\n        long i = 2;\n        while (i < n) \n        {\n            if (n % i == 0) \n            {\n                return y;\n            }\n            i = i + 1;\n        }\n        return x;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660161307
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n <= 1) \n    {\n        return y;\n    }\n    else \n    {\n        long i = 2;\n        while (i < n) \n        {\n            if (n % i == 0) \n            {\n                return y;\n            }\n            i = i + 1;\n        }\n        return x;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660161307
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (isPrime(n))\n        return x;\n    else\n        return y;\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpaxhofiz5.d(13): Error: undefined identifier `isPrime`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpaxhofiz5.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660161307
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n <= 1) \n    {\n        return y;\n    }\n    else \n    {\n        long i = 2;\n        while (i < n) \n        {\n            if (n % i == 0) \n            {\n                return y;\n            }\n            i = i + 1;\n        }\n        return x;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660161307
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n < 2) \n    {\n        return y;\n    }\n    else \n    {\n        long i = 2;\n        while (i < n) \n        {\n            if (n % i == 0) \n            {\n                return y;\n            }\n            i = i + 1;\n        }\n        return x;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660161307
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n == 2)\n        return x;\n    else if (n % 2 == 0)\n        return y;\n    else\n    {\n        long i = 3;\n        while (i <= sqrt(n))\n        {\n            if (n % i == 0)\n                return y;\n            i += 2;\n        }\n        return x;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp3fp0j9g8.d(20): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3fp0j9g8.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660161307
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n == 1)\n        return y;\n    else if (n == 2)\n        return x;\n    else if (n % 2 == 0)\n        return y;\n    else\n    {\n        long i = 3;\n        while (i <= sqrt(n))\n        {\n            if (n % i == 0)\n                return y;\n            i += 2;\n        }\n        return x;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp8igt7mwt.d(22): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8igt7mwt.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660161306
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n <= 1)\n        return y;\n    else\n    {\n        long i;\n        for (i = 2; i < n; i++)\n        {\n            if (n % i == 0)\n                return y;\n        }\n        return x;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660161308
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n == 2)\n        return x;\n    else if (n % 2 == 0)\n        return y;\n    else\n    {\n        long i = 3;\n        while (i < n)\n        {\n            if (n % i == 0)\n                return y;\n            i = i + 2;\n        }\n        return x;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpqq0oqab1.d(41): unittest failure\n----------------\n??:? _d_unittestp [0x427ec5]\n??:? void tmpqq0oqab1.__unittest_L29_C1() [0x427c0a]\n??:? void tmpqq0oqab1.__modtest() [0x427c44]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bbeb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa7e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc11]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300c0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb9d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa55]\n??:? runModuleUnitTests [0x42b9c1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428314]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660161307
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n <= 1)\n        return y;\n    else if (n == 2)\n        return x;\n    else if (n % 2 == 0)\n        return y;\n    else\n    {\n        long i = 3;\n        while (i <= sqrt(n))\n        {\n            if (n % i == 0)\n                return y;\n            i += 2;\n        }\n        return x;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp2wibce4m.d(22): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2wibce4m.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660161306
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n <= 1) \n    {\n        return y;\n    }\n    else \n    {\n        long i = 2;\n        while (i < n) \n        {\n            if (n % i == 0) \n            {\n                return y;\n            }\n            i = i + 1;\n        }\n        return x;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660161307
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n == 1)\n        return y;\n    else if (n == 2)\n        return x;\n    else\n    {\n        long i = 2;\n        while (i < n)\n        {\n            if (n % i == 0)\n                return y;\n            i = i + 1;\n        }\n        return x;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660161308
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n < 2) \n    {\n        return y;\n    }\n    else \n    {\n        for (long i = 2; i < n; i++) \n        {\n            if (n % i == 0) \n            {\n                return y;\n            }\n        }\n        return x;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660161308
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n == 2) \n    {\n        return x;\n    }\n    else \n    {\n        return y;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmph72d6gx5.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x427e5d]\n??:? void tmph72d6gx5.__unittest_L22_C1() [0x427a36]\n??:? void tmph72d6gx5.__modtest() [0x427be0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb83]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa16]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fba9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430058]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb35]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ed]\n??:? runModuleUnitTests [0x42b959]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282ac]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660161307
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n <= 1) \n    {\n        return y;\n    }\n    else \n    {\n        long i = 2;\n        while (i < n) \n        {\n            if (n % i == 0) \n            {\n                return y;\n            }\n            i = i + 1;\n        }\n        return x;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660161307
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n == 1)\n        return y;\n    else if (n == 2)\n        return x;\n    else if (n % 2 == 0)\n        return y;\n    else\n    {\n        long i = 3;\n        while (i <= sqrt(n))\n        {\n            if (n % i == 0)\n                return y;\n            i += 2;\n        }\n        return x;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp8igt7mwt.d(22): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8igt7mwt.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660161306
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n <= 1)\n        return y;\n    else if (n <= 3)\n        return x;\n    else if (n % 2 == 0 || n % 3 == 0)\n        return y;\n    long i = 5;\n    while (i * i <= n)\n    {\n        if (n % i == 0 || n % (i + 2) == 0)\n            return y;\n        i = i + 6;\n    }\n    return x;\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660161307
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n <= 1) \n    {\n        return y;\n    }\n    else \n    {\n        long i = 2;\n        while (i < n) \n        {\n            if (n % i == 0) \n            {\n                return y;\n            }\n            i = i + 1;\n        }\n        return x;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660161307
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n < 2) \n    {\n        return y;\n    }\n    else \n    {\n        foreach (i; 2 .. n) \n        {\n            if (n % i == 0) \n            {\n                return y;\n            }\n        }\n        return x;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660161307
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    long i;\n    long result;\n    if (n < 2) {\n        result = y;\n    }\n    else {\n        result = x;\n        i = 2;\n        while (i < n) {\n            if (n % i == 0) {\n                result = y;\n                break;\n            }\n            i = i + 1;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660161308
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    return (n % 2 == 0) ? y : x;\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmprfw3_98t.d(20): unittest failure\n----------------\n??:? _d_unittestp [0x427e6d]\n??:? void tmprfw3_98t.__unittest_L15_C1() [0x427a75]\n??:? void tmprfw3_98t.__modtest() [0x427bf0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb93]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa26]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbb9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430068]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb45]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9fd]\n??:? runModuleUnitTests [0x42b969]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282bc]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660161308
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n <= 1) \n    {\n        return y;\n    }\n    else \n    {\n        long i = 2;\n        while (i <= n / 2) \n        {\n            if (n % i == 0) \n            {\n                return y;\n            }\n            i = i + 1;\n        }\n        return x;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660161308
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n < 2)\n        return y;\n    if (n % 2 == 0)\n        return y;\n    for (long i = 3; i <= sqrt(n); i += 2)\n    {\n        if (n % i == 0)\n            return y;\n    }\n    return x;\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpf0x67zyg.d(17): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf0x67zyg.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660161307
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n < 2)\n        return y;\n    else if (n == 2)\n        return x;\n    else if (n % 2 == 0)\n        return y;\n    else\n    {\n        long i = 3;\n        while (i <= sqrt(n))\n        {\n            if (n % i == 0)\n                return y;\n            i += 2;\n        }\n        return x;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpng4to5ka.d(22): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpng4to5ka.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660161306
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n <= 1) \n    {\n        return y;\n    }\n    else \n    {\n        long i = 2;\n        while (i <= n / 2) \n        {\n            if (n % i == 0) \n            {\n                return y;\n            }\n            i = i + 1;\n        }\n        return x;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660161308
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n < 2)\n        return y;\n    if (n == 2)\n        return x;\n    if (n % 2 == 0)\n        return y;\n    long m = cast(long)sqrt(n);\n    for (long i = 3; i <= m; i += 2)\n        if (n % i == 0)\n            return y;\n    return x;\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp57_6oshg.d(19): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp57_6oshg.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660161308
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    long i;\n    long sqrt_n;\n    long result;\n    if (n <= 1) \n    {\n        result = y;\n    } \n    else \n    {\n        sqrt_n = cast(long) sqrt(cast(real) n);\n        i = 2;\n        while (i <= sqrt_n) \n        {\n            if (n % i == 0) \n            {\n                result = y;\n                return result;\n            }\n            i = i + 1;\n        }\n        result = x;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660161308
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    return isPrime(n) ? x : y;\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpdm9ir7sa.d(13): Error: undefined identifier `isPrime`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdm9ir7sa.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660161308
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n < 2)\n        return y;\n    for (long i = 2; i < n; i++)\n        if (n % i == 0)\n            return y;\n    return x;\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660161308
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n <= 1)\n        return y;\n    else if (n == 2)\n        return x;\n    else if (n % 2 == 0)\n        return y;\n    else\n    {\n        long i = 3;\n        while (i <= sqrt(n))\n        {\n            if (n % i == 0)\n                return y;\n            i += 2;\n        }\n        return x;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp2wibce4m.d(22): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2wibce4m.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660161306
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n == 1)\n        return y;\n    else if (n == 2)\n        return x;\n    else\n    {\n        long i = 2;\n        while (i < n)\n        {\n            if (n % i == 0)\n                return y;\n            i = i + 1;\n        }\n        return x;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660161308
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n <= 1) \n    {\n        return y;\n    }\n    else if (n <= 3) \n    {\n        return x;\n    }\n    else if (n % 2 == 0 || n % 3 == 0) \n    {\n        return y;\n    }\n    long i = 5;\n    while (i * i <= n) \n    {\n        if (n % i == 0 || n % (i + 2) == 0) \n        {\n            return y;\n        }\n        i = i + 6;\n    }\n    return x;\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660161307
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n <= 1) \n    {\n        return y;\n    }\n    else \n    {\n        long i = 2;\n        while (i < n) \n        {\n            if (n % i == 0) \n            {\n                return y;\n            }\n            i = i + 1;\n        }\n        return x;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660161307
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n < 2)\n        return y;\n    else if (n == 2)\n        return x;\n    else\n    {\n        long i = 2;\n        while (i <= sqrt(n))\n        {\n            if (n % i == 0)\n                return y;\n            i++;\n        }\n        return x;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmprndj9z26.d(20): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprndj9z26.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660161308
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n <= 1) \n    {\n        return y;\n    }\n    else \n    {\n        long i = 2;\n        while (i < n) \n        {\n            if (n % i == 0) \n            {\n                return y;\n            }\n            i = i + 1;\n        }\n        return x;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660161307
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n < 2) \n    {\n        return y;\n    }\n    foreach (i; 2 .. n) \n    {\n        if (n % i == 0) \n        {\n            return y;\n        }\n    }\n    return x;\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660161308
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n < 2)\n        return y;\n    else if (n == 2)\n        return x;\n    else if (n % 2 == 0)\n        return y;\n    else\n    {\n        long i = 3;\n        while (i <= sqrt(n))\n        {\n            if (n % i == 0)\n                return y;\n            i += 2;\n        }\n        return x;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpng4to5ka.d(22): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpng4to5ka.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660161306
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n <= 1)\n        return y;\n    else if (n <= 3)\n        return x;\n    else if (n % 2 == 0 || n % 3 == 0)\n        return y;\n    long i = 5;\n    while (i * i <= n)\n    {\n        if (n % i == 0 || n % (i + 2) == 0)\n            return y;\n        i = i + 6;\n    }\n    return x;\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660161307
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n <= 1) \n    {\n        return y;\n    }\n    else \n    {\n        long i = 2;\n        while (i < n) \n        {\n            if (n % i == 0) \n            {\n                return y;\n            }\n            i = i + 1;\n        }\n        return x;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660161307
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (isPrime(n)) \n    {\n        return x;\n    } \n    else \n    {\n        return y;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpdpulfhyb.d(13): Error: undefined identifier `isPrime`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdpulfhyb.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660161308
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n <= 1) \n    {\n        return y;\n    }\n    else \n    {\n        long i = 2;\n        while (i < n) \n        {\n            if (n % i == 0) \n            {\n                return y;\n            }\n            i = i + 1;\n        }\n        return x;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660161307
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n <= 1)\n        return y;\n    else if (n <= 3)\n        return x;\n    else if (n % 2 == 0 || n % 3 == 0)\n        return y;\n    else\n    {\n        long i = 5;\n        while (i * i <= n)\n        {\n            if (n % i == 0 || n % (i + 2) == 0)\n                return y;\n            i += 6;\n        }\n        return x;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660161307
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n <= 1)\n        return y;\n    else if (n == 2)\n        return x;\n    else if (n % 2 == 0)\n        return y;\n    else\n    {\n        long m = cast(long)sqrt(n);\n        for (long i = 3; i <= m; i += 2)\n            if (n % i == 0)\n                return y;\n        return x;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp4a41jeq4.d(21): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4a41jeq4.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660161307
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n <= 1)\n        return y;\n    else if (n == 2)\n        return x;\n    else if (n % 2 == 0)\n        return y;\n    else\n    {\n        long i = 3;\n        while (i <= sqrt(n))\n        {\n            if (n % i == 0)\n                return y;\n            i += 2;\n        }\n        return x;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp2wibce4m.d(22): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2wibce4m.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660161306
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n <= 1)\n        return y;\n    else if (n <= 3)\n        return x;\n    else if (n % 2 == 0 || n % 3 == 0)\n        return y;\n    long i = 5;\n    while (i * i <= n)\n    {\n        if (n % i == 0 || n % (i + 2) == 0)\n            return y;\n        i = i + 6;\n    }\n    return x;\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660161307
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n < 2) \n    {\n        return y;\n    }\n    else \n    {\n        long i = 2;\n        while (i <= sqrt(n)) \n        {\n            if (n % i == 0) \n            {\n                return y;\n            }\n            i = i + 1;\n        }\n        return x;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp7kc5uv84.d(20): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7kc5uv84.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660161308
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n == 2)\n        return x;\n    else if (n == 3)\n        return x;\n    else if (n == 5)\n        return x;\n    else if (n == 7)\n        return x;\n    else if (n == 11)\n        return x;\n    else if (n == 13)\n        return x;\n    else if (n == 17)\n        return x;\n    else if (n == 19)\n        return x;\n    else if (n == 23)\n        return x;\n    else if (n == 29)\n        return x;\n    else if (n == 31)\n        return x;\n    else if (n == 37)\n        return x;\n    else if (n == 41)\n        return x;\n    else if (n == 43)\n        return x;\n    else if (n == 47)\n        return x;\n    else if (n == 53)\n        return x;\n    else if (n == 59)\n        return x;\n    else if (n == 61)\n        return x;\n    else if (n == 67)\n        return x;\n    else if (n == 71)\n        return x;\n    else if (n == 73)\n        return x;\n    else if (n == 79)\n        return x;\n    else if (n == 83)\n        return x;\n    else if (n == 89)\n        return x;\n    else if (n == 97)\n        return x;\n    else if (n == 101)\n        return x;\n    else if (n == 103)\n        return x;\n    else if (n == 107)\n        return x;\n    else if (n == 109)\n        return x;\n    else if (n == 113)\n        return x;\n    else if (n == 127)\n        return x;\n    else if (n == 131)\n        return x;\n    else if (n == 137)\n        return x;\n    else if (n == 139)\n        return x;\n    else if (n == 149)\n        return x;\n    else if (n == 151)\n        return x;\n    else if (n ==\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpw0ajtfq0.d(86): Error: expression expected, not `unittest`\n/tmp/tmpw0ajtfq0.d(87): Error: found `{` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw0ajtfq0.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660161306
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    return isPrime(n) ? x : y;\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpdm9ir7sa.d(13): Error: undefined identifier `isPrime`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdm9ir7sa.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660161308
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n <= 1)\n        return y;\n    else if (n == 2)\n        return x;\n    else if (n % 2 == 0)\n        return y;\n    else\n    {\n        long i = 3;\n        while (i <= sqrt(n))\n        {\n            if (n % i == 0)\n                return y;\n            i += 2;\n        }\n        return x;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp2wibce4m.d(22): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2wibce4m.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660161306
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n <= 1)\n        return y;\n    else if (n <= 3)\n        return x;\n    else if (n % 2 == 0 || n % 3 == 0)\n        return y;\n    long i = 5;\n    while (i * i <= n)\n    {\n        if (n % i == 0 || n % (i + 2) == 0)\n            return y;\n        i = i + 6;\n    }\n    return x;\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660161307
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    return isPrime(n) ? x : y;\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpdm9ir7sa.d(13): Error: undefined identifier `isPrime`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdm9ir7sa.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660161308
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n < 2) \n    {\n        return y;\n    }\n    else \n    {\n        foreach (i; 2 .. n) \n        {\n            if (n % i == 0) \n            {\n                return y;\n            }\n        }\n        return x;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660161307
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    long i;\n    long result;\n    if (n < 2)\n    {\n        result = y;\n    }\n    else\n    {\n        result = x;\n        for (i = 2; i < n; i++)\n        {\n            if (n % i == 0)\n            {\n                result = y;\n                break;\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660161308
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n < 2)\n        return y;\n    else if (n == 2)\n        return x;\n    else if (n % 2 == 0)\n        return y;\n    else\n    {\n        long i = 3;\n        while (i <= sqrt(n))\n        {\n            if (n % i == 0)\n                return y;\n            i += 2;\n        }\n        return x;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpng4to5ka.d(22): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpng4to5ka.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660161306
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n < 2) \n    {\n        return y;\n    }\n    else \n    {\n        long i = 2;\n        while (i < n) \n        {\n            if (n % i == 0) \n            {\n                return y;\n            }\n            i = i + 1;\n        }\n        return x;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660161307
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    long result;\n    if (n == 2) \n    {\n        result = x;\n    } \n    else \n    {\n        result = y;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpydct15rs.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x427e75]\n??:? void tmpydct15rs.__unittest_L24_C1() [0x427a4a]\n??:? void tmpydct15rs.__modtest() [0x427bf4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb9b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa2e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbc1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430070]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb4d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa05]\n??:? runModuleUnitTests [0x42b971]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282c4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660161308
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n < 2)\n        return y;\n    if (n == 2)\n        return x;\n    if (n % 2 == 0)\n        return y;\n    for (long i = 3; i * i <= n; i += 2)\n        if (n % i == 0)\n            return y;\n    return x;\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660161307
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n <= 1)\n        return y;\n    else if (n <= 3)\n        return x;\n    else if (n % 2 == 0 || n % 3 == 0)\n        return y;\n    long i = 5;\n    while (i * i <= n)\n    {\n        if (n % i == 0 || n % (i + 2) == 0)\n            return y;\n        i = i + 6;\n    }\n    return x;\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660161307
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n <= 1)\n        return y;\n    else if (n <= 3)\n        return x;\n    else if (n % 2 == 0 || n % 3 == 0)\n        return y;\n    else\n    {\n        long i = 5;\n        while (i * i <= n)\n        {\n            if (n % i == 0 || n % (i + 2) == 0)\n                return y;\n            i += 6;\n        }\n        return x;\n    }\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660161307
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n            \n    \n*/\nlong x_or_y(long n, long x, long y) \n{\n    if (n <= 1) \n    {\n        return y;\n    }\n    else if (n <= 3) \n    {\n        return x;\n    }\n    else if (n % 2 == 0 || n % 3 == 0) \n    {\n        return y;\n    }\n    long i = 5;\n    while (i * i <= n) \n    {\n        if (n % i == 0 || n % (i + 2) == 0) \n        {\n            return y;\n        }\n        i = i + 6;\n    }\n    return x;\n}\nunittest\n{\n    alias candidate = x_or_y;\n\n    assert(candidate(7L, 34L, 12L) == 34L);\n    assert(candidate(15L, 8L, 5L) == 5L);\n    assert(candidate(3L, 33L, 5212L) == 33L);\n    assert(candidate(1259L, 3L, 52L) == 3L);\n    assert(candidate(7919L, -1L, 12L) == -1L);\n    assert(candidate(3609L, 1245L, 583L) == 583L);\n    assert(candidate(91L, 56L, 129L) == 129L);\n    assert(candidate(6L, 34L, 1234L) == 1234L);\n    assert(candidate(1L, 2L, 0L) == 0L);\n    assert(candidate(2L, 2L, 0L) == 2L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660161307
    }
  ]
}