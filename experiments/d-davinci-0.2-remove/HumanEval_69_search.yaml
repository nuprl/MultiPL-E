name: HumanEval_69_search
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\n\n    You are given a non-empty\
  \ list of positive integers. Return the greatest integer that is greater than \n\
  \    zero, and has a frequency greater than or equal to the value of the integer\
  \ itself. \n    The frequency of an integer is the number of times it appears in\
  \ the list.\n    If no such a value exist, return -1.\n    Examples:\n         \
  \       \n*/\nlong search(long[] lst) \n"
tests: "unittest\n{\n    alias candidate = search;\n\n    assert(candidate([5L, 5L,\
  \ 5L, 5L, 1L]) == 1L);\n    assert(candidate([4L, 1L, 4L, 1L, 4L, 4L]) == 4L);\n\
  \    assert(candidate([3L, 3L]) == -1L);\n    assert(candidate([8L, 8L, 8L, 8L,\
  \ 8L, 8L, 8L, 8L]) == 8L);\n    assert(candidate([2L, 3L, 3L, 2L, 2L]) == 2L);\n\
  \    assert(candidate([2L, 7L, 8L, 8L, 4L, 8L, 7L, 3L, 9L, 6L, 5L, 10L, 4L, 3L,\
  \ 6L, 7L, 1L, 7L, 4L, 10L, 8L, 1L]) == 1L);\n    assert(candidate([3L, 2L, 8L, 2L])\
  \ == 2L);\n    assert(candidate([6L, 7L, 1L, 8L, 8L, 10L, 5L, 8L, 5L, 3L, 10L])\
  \ == 1L);\n    assert(candidate([8L, 8L, 3L, 6L, 5L, 6L, 4L]) == -1L);\n    assert(candidate([6L,\
  \ 9L, 6L, 7L, 1L, 4L, 7L, 1L, 8L, 8L, 9L, 8L, 10L, 10L, 8L, 4L, 10L, 4L, 10L, 1L,\
  \ 2L, 9L, 5L, 7L, 9L]) == 1L);\n    assert(candidate([1L, 9L, 10L, 1L, 3L]) == 1L);\n\
  \    assert(candidate([6L, 9L, 7L, 5L, 8L, 7L, 5L, 3L, 7L, 5L, 10L, 10L, 3L, 6L,\
  \ 10L, 2L, 8L, 6L, 5L, 4L, 9L, 5L, 3L, 10L]) == 5L);\n    assert(candidate([1L])\
  \ == 1L);\n    assert(candidate([8L, 8L, 10L, 6L, 4L, 3L, 5L, 8L, 2L, 4L, 2L, 8L,\
  \ 4L, 6L, 10L, 4L, 2L, 1L, 10L, 2L, 1L, 1L, 5L]) == 4L);\n    assert(candidate([2L,\
  \ 10L, 4L, 8L, 2L, 10L, 5L, 1L, 2L, 9L, 5L, 5L, 6L, 3L, 8L, 6L, 4L, 10L]) == 2L);\n\
  \    assert(candidate([1L, 6L, 10L, 1L, 6L, 9L, 10L, 8L, 6L, 8L, 7L, 3L]) == 1L);\n\
  \    assert(candidate([9L, 2L, 4L, 1L, 5L, 1L, 5L, 2L, 5L, 7L, 7L, 7L, 3L, 10L,\
  \ 1L, 5L, 4L, 2L, 8L, 4L, 1L, 9L, 10L, 7L, 10L, 2L, 8L, 10L, 9L, 4L]) == 4L);\n\
  \    assert(candidate([2L, 6L, 4L, 2L, 8L, 7L, 5L, 6L, 4L, 10L, 4L, 6L, 3L, 7L,\
  \ 8L, 8L, 3L, 1L, 4L, 2L, 2L, 10L, 7L]) == 4L);\n    assert(candidate([9L, 8L, 6L,\
  \ 10L, 2L, 6L, 10L, 2L, 7L, 8L, 10L, 3L, 8L, 2L, 6L, 2L, 3L, 1L]) == 2L);\n    assert(candidate([5L,\
  \ 5L, 3L, 9L, 5L, 6L, 3L, 2L, 8L, 5L, 6L, 10L, 10L, 6L, 8L, 4L, 10L, 7L, 7L, 10L,\
  \ 8L]) == -1L);\n    assert(candidate([10L]) == -1L);\n    assert(candidate([9L,\
  \ 7L, 7L, 2L, 4L, 7L, 2L, 10L, 9L, 7L, 5L, 7L, 2L]) == 2L);\n    assert(candidate([5L,\
  \ 4L, 10L, 2L, 1L, 1L, 10L, 3L, 6L, 1L, 8L]) == 1L);\n    assert(candidate([7L,\
  \ 9L, 9L, 9L, 3L, 4L, 1L, 5L, 9L, 1L, 2L, 1L, 1L, 10L, 7L, 5L, 6L, 7L, 6L, 7L, 7L,\
  \ 6L]) == 1L);\n    assert(candidate([3L, 10L, 10L, 9L, 2L]) == -1L);\n}\nvoid main(){}"
completions: ["{\n    auto freq = lst.groupBy!(a => a);\n    long max = -1;\n    foreach(k,\
    \ v; freq)\n    {\n        if(k > v.length)\n            continue;\n        if(k\
    \ > max)\n            max = k;\n    }\n    return max;\n}", "{\n    long[] freq\
    \ = new long[lst.length];\n    foreach(i; 0 .. lst.length)\n    {\n        foreach(j;\
    \ 0 .. lst.length)\n        {\n            if(lst[i] == lst[j])\n            {\n\
    \                freq[i]++;\n            }\n        }\n    }\n    long max = 0;\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        if(lst[i] > max && freq[i] >=\
    \ lst[i])\n        {\n            max = lst[i];\n        }\n    }\n    if(max\
    \ == 0)\n    {\n        return -1;\n    }\n    return max;\n}", "{\n    long[]\
    \ arr = lst.dup;\n    arr.sort;\n    long[] arr2 = arr.dup;\n    long[] arr3 =\
    \ arr.dup;\n    long[] arr4 = arr.dup;\n    long[] arr5 = arr.dup;\n    long[]\
    \ arr6 = arr.dup;\n    long[] arr7 = arr.dup;\n    long[] arr8 = arr.dup;\n  \
    \  long[] arr9 = arr.dup;\n    long[] arr10 = arr.dup;\n    long[] arr11 = arr.dup;\n\
    \    long[] arr12 = arr.dup;\n    long[] arr13 = arr.dup;\n    long[] arr14 =\
    \ arr.dup;\n    long[] arr15 = arr.dup;\n    long[] arr16 = arr.dup;\n    long[]\
    \ arr17 = arr.dup;\n    long[] arr18 = arr.dup;\n    long[] arr19 = arr.dup;\n\
    \    long[] arr20 = arr.dup;\n    long[] arr21 = arr.dup;\n    long[] arr22 =\
    \ arr.dup;\n    long[] arr23 = arr.dup;\n    long[] arr24 = arr.dup;\n    long[]\
    \ arr25 = arr.dup;\n    long[] arr26 = arr.dup;\n    long[] arr27 = arr.dup;\n\
    \    long[] arr28 = arr.dup;\n    long[] arr29 = arr.dup;\n    long[] arr30 =\
    \ arr.dup;\n    long[] arr31 = arr.dup;\n    long[] arr32 = arr.dup;\n    long[]\
    \ arr33 = arr.dup;\n    long[] arr34 = arr.dup;\n    long[] arr35 = arr.dup;\n\
    \    long[] arr36 = arr.dup;\n    long[] arr37 = arr.dup;\n    long[] arr38 =\
    \ arr.dup;\n    long[] arr39 = arr.dup;\n    long[] arr40 = arr.dup;\n    long[]\
    \ arr41 = arr.dup;\n    long[] arr42 = arr.dup;", "{\n    long[] arr = new long[lst.length];\n\
    \    foreach(i; lst)\n    {\n        arr[i] = arr[i] + 1;\n    }\n    long max\
    \ = 0;\n    foreach(i; lst)\n    {\n        if(arr[i] >= i && i > max)\n     \
    \   {\n            max = i;\n        }\n    }\n    if(max == 0)\n    {\n     \
    \   return -1;\n    }\n    return max;\n}", "{\n    long[] freq = new long[lst.length];\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        freq[i] = 0;\n    }\n    foreach(i;\
    \ 0 .. lst.length)\n    {\n        foreach(j; 0 .. lst.length)\n        {\n  \
    \          if(lst[i] == lst[j])\n            {\n                freq[i]++;\n \
    \           }\n        }\n    }\n    foreach(i; 0 .. lst.length)\n    {\n    \
    \    if(freq[i] >= lst[i])\n        {\n            return lst[i];\n        }\n\
    \    }\n    return -1;\n}", "{\n    long[] frequency = new long[lst.length];\n\
    \    foreach(i; lst)\n    {\n        frequency[i]++;\n    }\n    foreach(i; lst)\n\
    \    {\n        if(frequency[i] >= i)\n        {\n            return i;\n    \
    \    }\n    }\n    return -1;\n}", "{\n    long max = -1;\n    foreach(long i;\
    \ lst)\n    {\n        if(i > max)\n        {\n            max = i;\n        }\n\
    \    }\n    long[] arr = new long[max+1];\n    foreach(long i; lst)\n    {\n \
    \       arr[i]++;\n    }\n    foreach(long i; lst)\n    {\n        if(arr[i] >=\
    \ i)\n        {\n            return i;\n        }\n    }\n    return -1;\n}",
  "{\n    long[] freq = new long[lst.length];\n    foreach(i; 0 .. lst.length)\n \
    \   {\n        foreach(j; 0 .. lst.length)\n        {\n            if(lst[i] ==\
    \ lst[j])\n            {\n                freq[i]++;\n            }\n        }\n\
    \    }\n    long max = -1;\n    foreach(i; 0 .. lst.length)\n    {\n        if(lst[i]\
    \ > max && lst[i] <= freq[i])\n        {\n            max = lst[i];\n        }\n\
    \    }\n    return max;\n}", "{\n    long[] freq = new long[lst.length];\n   \
    \ foreach(i; lst)\n    {\n        freq[i]++;\n    }\n    foreach(i; lst)\n   \
    \ {\n        if(freq[i] >= i)\n        {\n            return i;\n        }\n \
    \   }\n    return -1;\n}", "{\n    long[] freq = new long[lst.length];\n    foreach(i;\
    \ lst)\n    {\n        freq[i]++;\n    }\n    foreach(i; lst)\n    {\n       \
    \ if(freq[i] >= i)\n        {\n            return i;\n        }\n    }\n    return\
    \ -1;\n}", "{\n    long[] freq = new long[lst.length];\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        foreach(j; 0 .. lst.length)\n        {\n            if(lst[i]\
    \ == lst[j])\n            {\n                freq[i]++;\n            }\n     \
    \   }\n    }\n    long max = -1;\n    foreach(i; 0 .. lst.length)\n    {\n   \
    \     if(lst[i] > max && lst[i] <= freq[i])\n        {\n            max = lst[i];\n\
    \        }\n    }\n    return max;\n}", "{\n    long[] arr = new long[lst.length];\n\
    \    foreach(i; lst)\n    {\n        arr[i]++;\n    }\n    long max = -1;\n  \
    \  foreach(i; lst)\n    {\n        if(arr[i] >= i && i > max)\n        {\n   \
    \         max = i;\n        }\n    }\n    return max;\n}", "{\n    auto freq =\
    \ new int[lst.length];\n    foreach(i; lst)\n    {\n        freq[i]++;\n    }\n\
    \    foreach(i; lst)\n    {\n        if(freq[i] >= i)\n        {\n           \
    \ return i;\n        }\n    }\n    return -1;\n}", "{\n    long[] freq = new long[lst.length];\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        foreach(j; 0 .. lst.length)\n\
    \        {\n            if(lst[i] == lst[j])\n            {\n                freq[i]++;\n\
    \            }\n        }\n    }\n    long max = -1;\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        if(freq[i] >= lst[i] && lst[i] > max)\n        {\n           \
    \ max = lst[i];\n        }\n    }\n    return max;\n}", "{\n    long[] freq =\
    \ new long[lst.length];\n    foreach(i; lst)\n    {\n        freq[i]++;\n    }\n\
    \    foreach(i; lst)\n    {\n        if(freq[i] >= i)\n        {\n           \
    \ return i;\n        }\n    }\n    return -1;\n}", "{\n    long[] freq = new long[lst.length];\n\
    \    foreach(i; lst)\n    {\n        freq[i]++;\n    }\n    long max = -1;\n \
    \   foreach(i; lst)\n    {\n        if(freq[i] >= i && i > max)\n        {\n \
    \           max = i;\n        }\n    }\n    return max;\n}", "{\n    long[] freq\
    \ = new long[lst.length];\n    foreach(i; 0 .. lst.length)\n    {\n        freq[i]\
    \ = 0;\n    }\n    foreach(i; 0 .. lst.length)\n    {\n        foreach(j; 0 ..\
    \ lst.length)\n        {\n            if(lst[i] == lst[j])\n            {\n  \
    \              freq[i]++;\n            }\n        }\n    }\n    long max = 0;\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        if(freq[i] >= lst[i] && lst[i]\
    \ > max)\n        {\n            max = lst[i];\n        }\n    }\n    if(max ==\
    \ 0)\n    {\n        return -1;\n    }\n    return max;\n}", "{\n    long[] freq\
    \ = new long[lst.length];\n    foreach(i; lst)\n    {\n        freq[i]++;\n  \
    \  }\n    foreach(i; lst)\n    {\n        if(freq[i] >= i)\n        {\n      \
    \      return i;\n        }\n    }\n    return -1;\n}", "{\n    long[] freq =\
    \ new long[lst.length];\n    foreach(i; lst)\n    {\n        freq[i]++;\n    }\n\
    \    foreach(i; lst)\n    {\n        if(freq[i] >= i)\n        {\n           \
    \ return i;\n        }\n    }\n    return -1;\n}", "{\n    long[] freq = new long[lst.length];\n\
    \    foreach(i; lst)\n    {\n        freq[i]++;\n    }\n    foreach(i; lst)\n\
    \    {\n        if(freq[i] >= i)\n        {\n            return i;\n        }\n\
    \    }\n    return -1;\n}", "{\n    long[] arr = new long[lst.length];\n    foreach(i;\
    \ lst)\n    {\n        arr[i]++;\n    }\n    long max = 0;\n    foreach(i; arr)\n\
    \    {\n        if(i >= arr[i] && i > max)\n        {\n            max = i;\n\
    \        }\n    }\n    return max == 0 ? -1 : max;\n}", "{\n    long[] freq =\
    \ new long[lst.length];\n    foreach(i; 0 .. lst.length)\n    {\n        freq[i]\
    \ = 0;\n    }\n    foreach(i; 0 .. lst.length)\n    {\n        foreach(j; 0 ..\
    \ lst.length)\n        {\n            if(lst[i] == lst[j])\n            {\n  \
    \              freq[i]++;\n            }\n        }\n    }\n    foreach(i; 0 ..\
    \ lst.length)\n    {\n        if(freq[i] >= lst[i])\n        {\n            return\
    \ lst[i];\n        }\n    }\n    return -1;\n}", "{\n    auto freq = new int[lst.length];\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        freq[i] = 0;\n    }\n    foreach(i;\
    \ 0 .. lst.length)\n    {\n        freq[lst[i]]++;\n    }\n    foreach(i; 0 ..\
    \ lst.length)\n    {\n        if(freq[i] >= i)\n        {\n            return\
    \ i;\n        }\n    }\n    return -1;\n}", "{\n    long[] freq = new long[lst.length];\n\
    \    foreach(i; lst)\n    {\n        freq[i]++;\n    }\n    foreach(i; lst)\n\
    \    {\n        if(freq[i] >= i)\n        {\n            return i;\n        }\n\
    \    }\n    return -1;\n}", "{\n    long[] freq = new long[lst.length];\n    foreach(i;\
    \ lst)\n    {\n        freq[i]++;\n    }\n    foreach(i; lst)\n    {\n       \
    \ if(freq[i] >= i)\n        {\n            return i;\n        }\n    }\n    return\
    \ -1;\n}", "{\n    long max = -1;\n    foreach(long i; lst)\n    {\n        if(i\
    \ > max)\n        {\n            max = i;\n        }\n    }\n    long[] arr =\
    \ new long[max+1];\n    foreach(long i; lst)\n    {\n        arr[i]++;\n    }\n\
    \    foreach(long i; lst)\n    {\n        if(arr[i] >= i)\n        {\n       \
    \     return i;\n        }\n    }\n    return -1;\n}", "{\n    int[] freq = new\
    \ int[lst.length];\n    int[] sorted = new int[lst.length];\n    int i = 0;\n\
    \    foreach(int element; lst)\n    {\n        sorted[i] = element;\n        i++;\n\
    \    }\n    sort(sorted);\n    int j = 0;\n    foreach(int element; sorted)\n\
    \    {\n        freq[j] = element;\n        j++;\n    }\n    int k = 0;\n    foreach(int\
    \ element; freq)\n    {\n        if(freq[k] == freq[k+1])\n        {\n       \
    \     freq[k] = freq[k] + 1;\n        }\n        k++;\n    }\n    int l = 0;\n\
    \    foreach(int element; freq)\n    {\n        if(freq[l] >= sorted[l])\n   \
    \     {\n            return sorted[l];\n        }\n        l++;\n    }\n    return\
    \ -1;\n}", "{\n    long[] freq = new long[lst.length];\n    foreach(i; lst)\n\
    \    {\n        if(i > 0 && i <= lst.length)\n        {\n            freq[i-1]++;\n\
    \        }\n    }\n    foreach(i; freq)\n    {\n        if(i >= i+1)\n       \
    \ {\n            return i+1;\n        }\n    }\n    return -1;\n}", "{\n    long[]\
    \ freq = new long[lst.length];\n    foreach(i; lst)\n    {\n        freq[i]++;\n\
    \    }\n    long max = -1;\n    foreach(i; 0..lst.length)\n    {\n        if(freq[i]\
    \ >= i && i > max)\n        {\n            max = i;\n        }\n    }\n    return\
    \ max;\n}", "{\n    long[] sorted = lst.dup.sort;\n    long[] counts = new long[sorted.length];\n\
    \    long[] uniques = new long[sorted.length];\n    long[] counts2 = new long[sorted.length];\n\
    \    long[] uniques2 = new long[sorted.length];\n    long[] counts3 = new long[sorted.length];\n\
    \    long[] uniques3 = new long[sorted.length];\n    long[] counts4 = new long[sorted.length];\n\
    \    long[] uniques4 = new long[sorted.length];\n    long[] counts5 = new long[sorted.length];\n\
    \    long[] uniques5 = new long[sorted.length];\n    long[] counts6 = new long[sorted.length];\n\
    \    long[] uniques6 = new long[sorted.length];\n    long[] counts7 = new long[sorted.length];\n\
    \    long[] uniques7 = new long[sorted.length];\n    long[] counts8 = new long[sorted.length];\n\
    \    long[] uniques8 = new long[sorted.length];\n    long[] counts9 = new long[sorted.length];\n\
    \    long[] uniques9 = new long[sorted.length];\n    long[] counts10 = new long[sorted.length];\n\
    \    long[] uniques10 = new long[sorted.length];\n    long[] counts11 = new long[sorted.length];\n\
    \    long[] uniques11 = new long[sorted.length];\n    long[] counts12 = new long[sorted.length];\n\
    \    long[] uniques12 = new long[sorted.length];\n    long[] counts13 = new long[sorted.length];\n\
    \    long[] uniques13 = new long[sorted.length];\n    long[] counts14 = new long[sorted.length];\n\
    \    long[] uniques14 = new long[sorted.length];\n    long[] counts15 = new long[sorted.length];\n\
    \    long[] uniques15 = new long[sorted.length];\n    long[] counts16 = new long[sorted.length];\n\
    \    long[] uniques16 = new long[sorted.length];\n   ", "{\n    long[] freq =\
    \ new long[lst.length];\n    foreach(i; lst)\n    {\n        freq[i]++;\n    }\n\
    \    foreach(i; lst)\n    {\n        if(freq[i] >= i)\n        {\n           \
    \ return i;\n        }\n    }\n    return -1;\n}", "{\n    long[] count = new\
    \ long[lst.length];\n    foreach(i; lst)\n    {\n        count[i]++;\n    }\n\
    \    foreach(i; lst)\n    {\n        if(count[i] >= i)\n        {\n          \
    \  return i;\n        }\n    }\n    return -1;\n}", "{\n    long[] freq = new\
    \ long[lst.length];\n    foreach(i; lst)\n    {\n        freq[i]++;\n    }\n \
    \   foreach(i; lst)\n    {\n        if(freq[i] >= i)\n        {\n            return\
    \ i;\n        }\n    }\n    return -1;\n}", "{\n    long[] freq = new long[lst.length];\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        freq[i] = 0;\n    }\n    foreach(i;\
    \ 0 .. lst.length)\n    {\n        freq[lst[i]]++;\n    }\n    foreach(i; 0 ..\
    \ lst.length)\n    {\n        if(freq[i] >= i)\n        {\n            return\
    \ i;\n        }\n    }\n    return -1;\n}", "{\n    long[] freq = new long[lst.length];\n\
    \    foreach(i;0..lst.length)\n    {\n        foreach(j;0..lst.length)\n     \
    \   {\n            if(lst[i] == lst[j])\n            {\n                freq[i]++;\n\
    \            }\n        }\n    }\n    long max = -1;\n    foreach(i;0..lst.length)\n\
    \    {\n        if(freq[i] >= lst[i] && lst[i] > max)\n        {\n           \
    \ max = lst[i];\n        }\n    }\n    return max;\n}", "{\n    long[] freq =\
    \ new long[lst.length];\n    foreach(i; lst)\n    {\n        freq[i]++;\n    }\n\
    \    foreach(i; lst)\n    {\n        if(freq[i] >= i)\n        {\n           \
    \ return i;\n        }\n    }\n    return -1;\n}", "{\n    long[] freq = new long[lst.length];\n\
    \    foreach(i; lst)\n    {\n        freq[i]++;\n    }\n    foreach(i; lst)\n\
    \    {\n        if(freq[i] >= i)\n        {\n            return i;\n        }\n\
    \    }\n    return -1;\n}", "{\n    long[] freq = new long[lst.length];\n    foreach(i;\
    \ lst)\n    {\n        freq[i]++;\n    }\n    long max = -1;\n    foreach(i; 0..lst.length)\n\
    \    {\n        if(freq[i] >= i && i > max)\n        {\n            max = i;\n\
    \        }\n    }\n    return max;\n}", "{\n    long[] freq = new long[lst.length];\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        freq[i] = 0;\n    }\n    foreach(i;\
    \ 0 .. lst.length)\n    {\n        foreach(j; 0 .. lst.length)\n        {\n  \
    \          if(lst[i] == lst[j])\n            {\n                freq[i]++;\n \
    \           }\n        }\n    }\n    long max = 0;\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        if(freq[i] >= lst[i] && lst[i] > max)\n        {\n           \
    \ max = lst[i];\n        }\n    }\n    if(max == 0)\n    {\n        return -1;\n\
    \    }\n    return max;\n}", "{\n    long[] freq = new long[lst.length];\n   \
    \ foreach(i; 0 .. lst.length)\n    {\n        foreach(j; 0 .. lst.length)\n  \
    \      {\n            if(lst[i] == lst[j])\n            {\n                freq[i]++;\n\
    \            }\n        }\n    }\n    long max = -1;\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        if(freq[i] >= lst[i] && lst[i] > max)\n        {\n           \
    \ max = lst[i];\n        }\n    }\n    return max;\n}", "{\n    auto freq = new\
    \ int[lst.length];\n    foreach(i; lst)\n    {\n        freq[i]++;\n    }\n  \
    \  foreach(i; lst)\n    {\n        if(freq[i] >= i)\n        {\n            return\
    \ i;\n        }\n    }\n    return -1;\n}", "{\n    long[] freq = new long[lst.length];\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        freq[i] = 0;\n    }\n    foreach(i;\
    \ 0 .. lst.length)\n    {\n        foreach(j; 0 .. lst.length)\n        {\n  \
    \          if(lst[i] == lst[j])\n            {\n                freq[i]++;\n \
    \           }\n        }\n    }\n    long max = 0;\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        if(freq[i] >= lst[i] && lst[i] > max)\n        {\n           \
    \ max = lst[i];\n        }\n    }\n    if(max == 0)\n    {\n        return -1;\n\
    \    }\n    return max;\n}", "{\n    long[] freq = new long[lst.length];\n   \
    \ foreach(i; 0 .. lst.length)\n    {\n        foreach(j; 0 .. lst.length)\n  \
    \      {\n            if(lst[i] == lst[j])\n            {\n                freq[i]++;\n\
    \            }\n        }\n    }\n    long max = 0;\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        if(lst[i] > max && freq[i] >= lst[i])\n        {\n           \
    \ max = lst[i];\n        }\n    }\n    if(max == 0)\n    {\n        return -1;\n\
    \    }\n    return max;\n}", "{\n    long[] freq = new long[lst.length];\n   \
    \ foreach(i; lst)\n    {\n        freq[i]++;\n    }\n    long max = -1;\n    foreach(i;\
    \ 0..freq.length)\n    {\n        if(freq[i] >= i && i > max)\n        {\n   \
    \         max = i;\n        }\n    }\n    return max;\n}", "{\n    long[] freq\
    \ = new long[lst.length];\n    long max = 0;\n    foreach(i; lst)\n    {\n   \
    \     if(i > max)\n            max = i;\n        freq[i]++;\n    }\n    for(long\
    \ i = max; i > 0; i--)\n    {\n        if(freq[i] >= i)\n            return i;\n\
    \    }\n    return -1;\n}", "{\n    long[] freq = new long[lst.length];\n    foreach(i;\
    \ lst)\n    {\n        freq[i]++;\n    }\n    long max = -1;\n    foreach(i; 0..lst.length)\n\
    \    {\n        if(freq[i] >= i)\n        {\n            max = max(max, i);\n\
    \        }\n    }\n    return max;\n}", "{\n    long[] sorted = lst.dup.sort;\n\
    \    long[] freq = new long[sorted.length];\n    long[] unique = new long[sorted.length];\n\
    \    long[] result = new long[sorted.length];\n    long[] result2 = new long[sorted.length];\n\
    \    long[] result3 = new long[sorted.length];\n    long[] result4 = new long[sorted.length];\n\
    \    long[] result5 = new long[sorted.length];\n    long[] result6 = new long[sorted.length];\n\
    \    long[] result7 = new long[sorted.length];\n    long[] result8 = new long[sorted.length];\n\
    \    long[] result9 = new long[sorted.length];\n    long[] result10 = new long[sorted.length];\n\
    \    long[] result11 = new long[sorted.length];\n    long[] result12 = new long[sorted.length];\n\
    \    long[] result13 = new long[sorted.length];\n    long[] result14 = new long[sorted.length];\n\
    \    long[] result15 = new long[sorted.length];\n    long[] result16 = new long[sorted.length];\n\
    \    long[] result17 = new long[sorted.length];\n    long[] result18 = new long[sorted.length];\n\
    \    long[] result19 = new long[sorted.length];\n    long[] result20 = new long[sorted.length];\n\
    \    long[] result21 = new long[sorted.length];\n    long[] result22 = new long[sorted.length];\n\
    \    long[] result23 = new long[sorted.length];\n    long[] result24 = new long[sorted.length];\n\
    \    long[] result25 = new long[sorted.length];\n    long[] result26 = new long[sorted.length];\n\
    \    long[] result27 = new long[sorted.length];\n    long[] result28 = new long[sorted.length];\n\
    \    long[] result29 = new long[sorted.length];\n    long[] result30 = new long[sorted.length];\n\
    \    long[] result31 = new long[sorted.length];\n    long", "{\n    long[] freq\
    \ = new long[lst.length];\n    foreach(i; 0 .. lst.length)\n    {\n        foreach(j;\
    \ 0 .. lst.length)\n        {\n            if(lst[i] == lst[j])\n            {\n\
    \                freq[i]++;\n            }\n        }\n    }\n    long max = -1;\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        if(freq[i] >= lst[i] && lst[i]\
    \ > max)\n        {\n            max = lst[i];\n        }\n    }\n    return max;\n\
    }", "{\n    long[] freq = new long[lst.length];\n    foreach(i; lst)\n    {\n\
    \        freq[i]++;\n    }\n    foreach(i; lst)\n    {\n        if(freq[i] >=\
    \ i)\n        {\n            return i;\n        }\n    }\n    return -1;\n}",
  "{\n    int[] freq = new int[lst.length];\n    foreach(int i; 0..lst.length)\n \
    \   {\n        foreach(int j; 0..lst.length)\n        {\n            if(lst[i]\
    \ == lst[j])\n            {\n                freq[i]++;\n            }\n     \
    \   }\n    }\n    foreach(int i; 0..lst.length)\n    {\n        if(lst[i] <= freq[i])\n\
    \        {\n            return lst[i];\n        }\n    }\n    return -1;\n}",
  "{\n    long[] freq = new long[lst.length];\n    foreach(i; lst)\n    {\n      \
    \  freq[i]++;\n    }\n    long max = 0;\n    foreach(i; lst)\n    {\n        if(freq[i]\
    \ >= i && i > max)\n        {\n            max = i;\n        }\n    }\n    return\
    \ max;\n}", "{\n    long[] freq = new long[lst.length];\n    foreach(long i; lst)\n\
    \    {\n        freq[i]++;\n    }\n    foreach(long i; lst)\n    {\n        if(freq[i]\
    \ >= i)\n        {\n            return i;\n        }\n    }\n    return -1;\n}",
  "{\n    long[] freq = new long[lst.length];\n    foreach(i; lst)\n    {\n      \
    \  freq[i]++;\n    }\n    long max = -1;\n    foreach(i; 0..freq.length)\n   \
    \ {\n        if(freq[i] >= i && i > max)\n        {\n            max = i;\n  \
    \      }\n    }\n    return max;\n}", "{\n    long[] arr = new long[lst.length];\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        arr[i] = lst[i];\n    }\n   \
    \ arr.sort();\n    long max = -1;\n    long count = 0;\n    long prev = arr[0];\n\
    \    foreach(i; 1 .. arr.length)\n    {\n        if(arr[i] == prev)\n        {\n\
    \            count++;\n        }\n        else\n        {\n            if(prev\
    \ >= count)\n            {\n                max = max(max, prev);\n          \
    \  }\n            count = 1;\n            prev = arr[i];\n        }\n    }\n \
    \   if(prev >= count)\n    {\n        max = max(max, prev);\n    }\n    return\
    \ max;\n}", "{\n    long[] freq = new long[lst.length];\n    foreach(i; lst)\n\
    \    {\n        freq[i]++;\n    }\n    long max = -1;\n    foreach(i; lst)\n \
    \   {\n        if(freq[i] >= i && i > max)\n        {\n            max = i;\n\
    \        }\n    }\n    return max;\n}", "{\n    long[] freq = new long[lst.length];\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        long count = 0;\n        foreach(j;\
    \ 0 .. lst.length)\n        {\n            if(lst[i] == lst[j])\n            {\n\
    \                count++;\n            }\n        }\n        freq[i] = count;\n\
    \    }\n    long max = 0;\n    foreach(i; 0 .. lst.length)\n    {\n        if(freq[i]\
    \ >= lst[i] && lst[i] > max)\n        {\n            max = lst[i];\n        }\n\
    \    }\n    if(max == 0)\n    {\n        return -1;\n    }\n    return max;\n}",
  "{\n    long[] freq = new long[lst.length];\n    foreach(i; 0 .. lst.length)\n \
    \   {\n        long count = 0;\n        foreach(j; 0 .. lst.length)\n        {\n\
    \            if(lst[i] == lst[j])\n            {\n                count++;\n \
    \           }\n        }\n        freq[i] = count;\n    }\n    long max = 0;\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        if(lst[i] > max && freq[i] >=\
    \ lst[i])\n        {\n            max = lst[i];\n        }\n    }\n    if(max\
    \ == 0)\n    {\n        return -1;\n    }\n    return max;\n}", "{\n    long[]\
    \ freq = new long[lst.length];\n    foreach(i; lst)\n    {\n        if(i > 0 &&\
    \ i <= lst.length)\n        {\n            freq[i-1]++;\n        }\n    }\n  \
    \  foreach(i; 0..freq.length)\n    {\n        if(freq[i] >= i+1)\n        {\n\
    \            return i+1;\n        }\n    }\n    return -1;\n}", "{\n    long result\
    \ = -1;\n    long[] freq = new long[lst.length];\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        foreach(j; 0 .. lst.length)\n        {\n            if(lst[i]\
    \ == lst[j])\n            {\n                freq[i]++;\n            }\n     \
    \   }\n    }\n    foreach(i; 0 .. lst.length)\n    {\n        if(freq[i] >= lst[i]\
    \ && lst[i] > result)\n        {\n            result = lst[i];\n        }\n  \
    \  }\n    return result;\n}", "{\n    long[] freq = new long[lst.length];\n  \
    \  foreach(i; lst)\n    {\n        freq[i]++;\n    }\n    foreach(i; lst)\n  \
    \  {\n        if(freq[i] >= i)\n        {\n            return i;\n        }\n\
    \    }\n    return -1;\n}", "{\n    long[] freq = new long[lst.length];\n    foreach(i;\
    \ 0 .. lst.length)\n    {\n        long count = 0;\n        foreach(j; 0 .. lst.length)\n\
    \        {\n            if(lst[i] == lst[j])\n            {\n                count++;\n\
    \            }\n        }\n        freq[i] = count;\n    }\n    long max = 0;\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        if(freq[i] >= lst[i] && lst[i]\
    \ > max)\n        {\n            max = lst[i];\n        }\n    }\n    if(max ==\
    \ 0)\n    {\n        return -1;\n    }\n    return max;\n}", "{\n    auto lst_sorted\
    \ = lst.dup.sort;\n    auto lst_grouped = lst_sorted.group;\n    auto lst_grouped_sorted\
    \ = lst_grouped.sort;\n    auto lst_grouped_sorted_reversed = lst_grouped_sorted.reverse;\n\
    \    foreach(i; lst_grouped_sorted_reversed)\n    {\n        if(i[0] >= i[1].length)\n\
    \        {\n            return i[0];\n        }\n    }\n    return -1;\n}", "{\n\
    \    long[] freq = new long[lst.length];\n    foreach(i; lst)\n    {\n       \
    \ freq[i]++;\n    }\n    foreach(i; lst)\n    {\n        if(freq[i] >= i)\n  \
    \      {\n            return i;\n        }\n    }\n    return -1;\n}", "{\n  \
    \  auto freq = new int[lst.length];\n    foreach(i; lst)\n    {\n        freq[i]++;\n\
    \    }\n    foreach(i; lst)\n    {\n        if(freq[i] >= i)\n        {\n    \
    \        return i;\n        }\n    }\n    return -1;\n}", "{\n    long[] freq\
    \ = new long[lst.length];\n    foreach(i; 0 .. lst.length)\n    {\n        foreach(j;\
    \ 0 .. lst.length)\n        {\n            if(lst[i] == lst[j])\n            {\n\
    \                freq[i]++;\n            }\n        }\n    }\n    long max = -1;\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        if(freq[i] >= lst[i] && lst[i]\
    \ > max)\n        {\n            max = lst[i];\n        }\n    }\n    return max;\n\
    }", "{\n    long[] cnt = new long[lst.length];\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        cnt[i] = 0;\n    }\n    foreach(i; 0 .. lst.length)\n    {\n \
    \       cnt[lst[i]]++;\n    }\n    foreach(i; 0 .. lst.length)\n    {\n      \
    \  if(cnt[i] >= i)\n        {\n            return i;\n        }\n    }\n    return\
    \ -1;\n}", "{\n    long[] freq = new long[lst.length];\n    foreach(i; lst)\n\
    \    {\n        freq[i]++;\n    }\n    long max = -1;\n    foreach(i; 0..lst.length)\n\
    \    {\n        if(freq[i] >= i)\n        {\n            max = max(max, i);\n\
    \        }\n    }\n    return max;\n}", "{\n    long[] freq = new long[lst.length];\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        foreach(j; 0 .. lst.length)\n\
    \        {\n            if(lst[i] == lst[j])\n            {\n                freq[i]++;\n\
    \            }\n        }\n    }\n    long max = -1;\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        if(freq[i] >= lst[i] && lst[i] > max)\n        {\n           \
    \ max = lst[i];\n        }\n    }\n    return max;\n}", "{\n    long max = 0;\n\
    \    foreach(i; lst)\n    {\n        if(i > max)\n            max = i;\n    }\n\
    \    long[] arr = new long[max+1];\n    foreach(i; lst)\n    {\n        arr[i]++;\n\
    \    }\n    foreach(i; arr)\n    {\n        if(i >= arr.length)\n            return\
    \ arr.length;\n    }\n    return -1;\n}", "{\n    long[] freq = new long[lst.length];\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        freq[i] = 0;\n    }\n    foreach(i;\
    \ 0 .. lst.length)\n    {\n        freq[lst[i]]++;\n    }\n    foreach(i; 0 ..\
    \ lst.length)\n    {\n        if(freq[i] >= i)\n        {\n            return\
    \ i;\n        }\n    }\n    return -1;\n}", "{\n    long[] freq = new long[lst.length];\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        freq[i] = 0;\n    }\n    foreach(i;\
    \ 0 .. lst.length)\n    {\n        foreach(j; 0 .. lst.length)\n        {\n  \
    \          if(lst[i] == lst[j])\n            {\n                freq[i]++;\n \
    \           }\n        }\n    }\n    foreach(i; 0 .. lst.length)\n    {\n    \
    \    if(freq[i] >= lst[i])\n        {\n            return lst[i];\n        }\n\
    \    }\n    return -1;\n}", "{\n    long[] a = lst.dup;\n    a.sort;\n    long[]\
    \ b = a.dup;\n    b.unique;\n    foreach(long i; b)\n    {\n        if(a.count(i)\
    \ >= i)\n            return i;\n    }\n    return -1;\n}", "{\n    long[] arr\
    \ = new long[lst.length];\n    foreach(i; 0 .. lst.length)\n    {\n        arr[i]\
    \ = lst[i];\n    }\n    arr.sort();\n    long[] arr2 = new long[arr.length];\n\
    \    foreach(i; 0 .. arr.length)\n    {\n        arr2[i] = arr[i];\n    }\n  \
    \  long[] arr3 = new long[arr.length];\n    foreach(i; 0 .. arr.length)\n    {\n\
    \        arr3[i] = arr[i];\n    }\n    long[] arr4 = new long[arr.length];\n \
    \   foreach(i; 0 .. arr.length)\n    {\n        arr4[i] = arr[i];\n    }\n   \
    \ long[] arr5 = new long[arr.length];\n    foreach(i; 0 .. arr.length)\n    {\n\
    \        arr5[i] = arr[i];\n    }\n    long[] arr6 = new long[arr.length];\n \
    \   foreach(i; 0 .. arr.length)\n    {\n        arr6[i] = arr[i];\n    }\n   \
    \ long[] arr7 = new long[arr.length];\n    foreach(i; 0 .. arr.length)\n    {\n\
    \        arr7[i] = arr[i];\n    }\n    long[] arr8 = new long[arr.length];\n \
    \   foreach(i; 0 .. arr.length)\n    {\n        arr8[i] = arr[i];\n    }\n   \
    \ long[] arr9 = new long[arr.length];\n    foreach(i; 0 .. arr.length)\n    {\n\
    \        arr9[i] = arr[i];\n    }\n    long[] arr10 = new long[arr.length];\n\
    \    foreach(i; 0 .. arr.length)\n    {\n        arr10[i] = arr[i];\n    }\n \
    \   long[] arr11 = new long[arr.length];\n    foreach(i; 0 .. arr.length)\n  \
    \  {\n        arr11[i] = arr[i];\n    }\n    long[] arr12 = new", "{\n    int[]\
    \ freq = new int[lst.length];\n    foreach(i; lst)\n    {\n        freq[i]++;\n\
    \    }\n    foreach(i; lst)\n    {\n        if(freq[i] >= i)\n        {\n    \
    \        return i;\n        }\n    }\n    return -1;\n}", "{\n    long max = -1;\n\
    \    long[] freq = new long[lst.length];\n    foreach(i; lst)\n    {\n       \
    \ freq[i]++;\n        if(freq[i] >= i && i > max)\n            max = i;\n    }\n\
    \    return max;\n}", "{\n    auto a = lst.groupBy!(a => a).array;\n    a.sort!((a,\
    \ b) => a[0] < b[0]);\n    foreach(e; a)\n    {\n        if(e[0] <= e[1].length)\n\
    \            return e[0];\n    }\n    return -1;\n}", "{\n    // Sort the list\n\
    \    lst.sort();\n    // Create a dictionary to store the frequency of each element\n\
    \    auto dict = new int[lst.length];\n    // Loop through the list\n    foreach(i;\
    \ 0 .. lst.length)\n    {\n        // If the element is not in the dictionary,\
    \ add it\n        if(dict[lst[i]] is null)\n        {\n            dict[lst[i]]\
    \ = 1;\n        }\n        // If the element is in the dictionary, increment its\
    \ value\n        else\n        {\n            dict[lst[i]]++;\n        }\n   \
    \ }\n    // Loop through the dictionary\n    foreach(i; 0 .. dict.length)\n  \
    \  {\n        // If the element is not null and the value is greater than or equal\
    \ to the key\n        if(dict[i] !is null && dict[i] >= i)\n        {\n      \
    \      // Return the key\n            return i;\n        }\n    }\n    // Return\
    \ -1 if no such value exists\n    return -1;\n}", "{\n    long[] arr = new long[lst.length];\n\
    \    foreach(i; lst)\n    {\n        arr[i]++;\n    }\n    foreach(i; lst)\n \
    \   {\n        if(arr[i] >= i)\n        {\n            return i;\n        }\n\
    \    }\n    return -1;\n}", "{\n    long[] freq = new long[lst.length];\n    foreach(i;\
    \ lst)\n    {\n        if(i < lst.length)\n            freq[i]++;\n    }\n   \
    \ foreach(i; lst)\n    {\n        if(freq[i] >= i)\n            return i;\n  \
    \  }\n    return -1;\n}", "{\n    long[] freq = new long[lst.length];\n    foreach(i;\
    \ lst)\n    {\n        freq[i]++;\n    }\n    foreach(i; lst)\n    {\n       \
    \ if(freq[i] >= i)\n        {\n            return i;\n        }\n    }\n    return\
    \ -1;\n}", "{\n    long[] frequency = new long[lst.length];\n    foreach(i; 0\
    \ .. lst.length)\n    {\n        frequency[i] = 0;\n    }\n    foreach(i; 0 ..\
    \ lst.length)\n    {\n        frequency[lst[i]]++;\n    }\n    foreach(i; 0 ..\
    \ lst.length)\n    {\n        if(frequency[i] >= i)\n        {\n            return\
    \ i;\n        }\n    }\n    return -1;\n}", "{\n    long[] arr = new long[lst.length];\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        arr[i] = lst[i];\n    }\n   \
    \ arr.sort();\n    long[] freq = new long[arr.length];\n    foreach(i; 0 .. arr.length)\n\
    \    {\n        foreach(j; 0 .. arr.length)\n        {\n            if(arr[i]\
    \ == arr[j])\n            {\n                freq[i]++;\n            }\n     \
    \   }\n    }\n    long max = -1;\n    foreach(i; 0 .. arr.length)\n    {\n   \
    \     if(arr[i] >= freq[i] && arr[i] > max)\n        {\n            max = arr[i];\n\
    \        }\n    }\n    return max;\n}", "{\n    auto d = new int[lst.length];\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        d[i] = 0;\n    }\n    foreach(i;\
    \ 0 .. lst.length)\n    {\n        d[lst[i]]++;\n    }\n    long max = -1;\n \
    \   foreach(i; 0 .. lst.length)\n    {\n        if(d[i] >= i && i > max)\n   \
    \     {\n            max = i;\n        }\n    }\n    return max;\n}", "{\n   \
    \ long[] freq = new long[lst.length];\n    foreach(i; lst)\n    {\n        freq[i]++;\n\
    \    }\n    foreach(i; lst)\n    {\n        if(freq[i] >= i)\n        {\n    \
    \        return i;\n        }\n    }\n    return -1;\n}", "{\n    long[] freq\
    \ = new long[lst.length];\n    foreach(i; lst)\n    {\n        freq[i]++;\n  \
    \  }\n    long max = -1;\n    foreach(i; 0..freq.length)\n    {\n        if(freq[i]\
    \ >= i && i > max)\n        {\n            max = i;\n        }\n    }\n    return\
    \ max;\n}", "{\n    long[] freq = new long[lst.length];\n    foreach(i; lst)\n\
    \    {\n        freq[i]++;\n    }\n    long max = -1;\n    foreach(i; 0..freq.length)\n\
    \    {\n        if(freq[i] >= i && i > max)\n        {\n            max = i;\n\
    \        }\n    }\n    return max;\n}", "{\n    long[] cnt = new long[lst.length];\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        cnt[i] = 0;\n    }\n    foreach(i;\
    \ 0 .. lst.length)\n    {\n        cnt[lst[i]]++;\n    }\n    foreach(i; 0 ..\
    \ lst.length)\n    {\n        if(cnt[i] >= i)\n        {\n            return i;\n\
    \        }\n    }\n    return -1;\n}", "{\n    long[] freq = new long[lst.length];\n\
    \    foreach(i; lst)\n    {\n        freq[i]++;\n    }\n    foreach(i; lst)\n\
    \    {\n        if(freq[i] >= i)\n        {\n            return i;\n        }\n\
    \    }\n    return -1;\n}", "{\n    long[] freq = new long[lst.length];\n    foreach(i;\
    \ lst)\n    {\n        freq[i]++;\n    }\n    foreach(i; lst)\n    {\n       \
    \ if(freq[i] >= i)\n        {\n            return i;\n        }\n    }\n    return\
    \ -1;\n}", "{\n    long[] freq = new long[lst.length];\n    foreach(i; lst)\n\
    \    {\n        freq[i]++;\n    }\n    foreach(i; lst)\n    {\n        if(i <=\
    \ freq[i])\n        {\n            return i;\n        }\n    }\n    return -1;\n\
    }", "{\n    long[] freq = new long[lst.length];\n    foreach(i; lst)\n    {\n\
    \        freq[i]++;\n    }\n    long max = -1;\n    foreach(i; 0..lst.length)\n\
    \    {\n        if(freq[i] >= i && i > max)\n        {\n            max = i;\n\
    \        }\n    }\n    return max;\n}", "{\n    long[] freq = new long[lst.length];\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        long count = 0;\n        foreach(j;\
    \ 0 .. lst.length)\n        {\n            if(lst[i] == lst[j])\n            {\n\
    \                count++;\n            }\n        }\n        freq[i] = count;\n\
    \    }\n    long max = 0;\n    foreach(i; 0 .. lst.length)\n    {\n        if(lst[i]\
    \ > max && freq[i] >= lst[i])\n        {\n            max = lst[i];\n        }\n\
    \    }\n    if(max == 0)\n    {\n        return -1;\n    }\n    return max;\n}",
  "{\n    long[] freq = new long[lst.length];\n    foreach(i; 0 .. lst.length)\n \
    \   {\n        freq[i] = 0;\n    }\n    foreach(i; 0 .. lst.length)\n    {\n \
    \       foreach(j; 0 .. lst.length)\n        {\n            if(lst[i] == lst[j])\n\
    \            {\n                freq[i]++;\n            }\n        }\n    }\n\
    \    long max = 0;\n    foreach(i; 0 .. lst.length)\n    {\n        if(freq[i]\
    \ >= lst[i] && lst[i] > max)\n        {\n            max = lst[i];\n        }\n\
    \    }\n    if(max == 0)\n    {\n        return -1;\n    }\n    return max;\n}",
  "{\n    long[] freq = new long[lst.length];\n    foreach(i; lst)\n    {\n      \
    \  if(i > 0 && i <= lst.length)\n        {\n            freq[i-1]++;\n       \
    \ }\n    }\n    long max = -1;\n    foreach(i; 0..freq.length)\n    {\n      \
    \  if(freq[i] >= i+1)\n        {\n            max = max(max, i+1);\n        }\n\
    \    }\n    return max;\n}", "{\n    int[] counts = new int[lst.length];\n   \
    \ foreach(i; lst)\n    {\n        counts[i]++;\n    }\n    foreach(i; lst)\n \
    \   {\n        if(counts[i] >= i)\n        {\n            return i;\n        }\n\
    \    }\n    return -1;\n}", "{\n    long max = -1;\n    long[] freq = new long[lst.length];\n\
    \    foreach(i; lst)\n    {\n        freq[i]++;\n        if(freq[i] >= i && i\
    \ > max)\n            max = i;\n    }\n    return max;\n}", "{\n    long[] freq\
    \ = new long[lst.length];\n    foreach(i; lst)\n    {\n        freq[i]++;\n  \
    \  }\n    foreach(i; lst)\n    {\n        if(freq[i] >= i)\n        {\n      \
    \      return i;\n        }\n    }\n    return -1;\n}", "{\n    long[] freq =\
    \ new long[lst.length];\n    foreach(long i; lst)\n    {\n        freq[i]++;\n\
    \    }\n    foreach(long i; lst)\n    {\n        if(freq[i] >= i)\n        {\n\
    \            return i;\n        }\n    }\n    return -1;\n}", "{\n    long[] freq\
    \ = new long[lst.length];\n    foreach(i; 0 .. lst.length)\n    {\n        foreach(j;\
    \ 0 .. lst.length)\n        {\n            if(lst[i] == lst[j])\n            {\n\
    \                freq[i]++;\n            }\n        }\n    }\n    long max = -1;\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        if(freq[i] >= lst[i] && lst[i]\
    \ > max)\n        {\n            max = lst[i];\n        }\n    }\n    return max;\n\
    }", "{\n    long[] freq = new long[lst.length];\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        freq[i] = 0;\n    }\n    foreach(i; 0 .. lst.length)\n    {\n\
    \        foreach(j; 0 .. lst.length)\n        {\n            if(lst[i] == lst[j])\n\
    \            {\n                freq[i]++;\n            }\n        }\n    }\n\
    \    long max = -1;\n    foreach(i; 0 .. lst.length)\n    {\n        if(freq[i]\
    \ >= lst[i] && lst[i] > max)\n        {\n            max = lst[i];\n        }\n\
    \    }\n    return max;\n}", "{\n    long[] freq = new long[lst.length];\n   \
    \ foreach(i; lst)\n    {\n        freq[i]++;\n    }\n    long max = -1;\n    foreach(i;\
    \ 0..lst.length)\n    {\n        if(freq[i] >= i && i > max)\n        {\n    \
    \        max = i;\n        }\n    }\n    return max;\n}", "{\n    long[] freq\
    \ = new long[lst.length];\n    foreach(i; lst)\n    {\n        freq[i]++;\n  \
    \  }\n    foreach(i; lst)\n    {\n        if(freq[i] >= i)\n        {\n      \
    \      return i;\n        }\n    }\n    return -1;\n}", "{\n    long[] freq =\
    \ new long[lst.length];\n    foreach(i; lst)\n    {\n        freq[i]++;\n    }\n\
    \    long max = -1;\n    foreach(i; 0..lst.length)\n    {\n        if(freq[i]\
    \ >= i && i > max)\n        {\n            max = i;\n        }\n    }\n    return\
    \ max;\n}", "{\n    long[] freq = new long[lst.length];\n    foreach(i; lst)\n\
    \    {\n        freq[i]++;\n    }\n    long max = -1;\n    foreach(i; 0..lst.length)\n\
    \    {\n        if(freq[i] >= i && i > max)\n        {\n            max = i;\n\
    \        }\n    }\n    return max;\n}", "{\n    long[] freq = new long[lst.length];\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        if(lst[i] <= lst.length)\n  \
    \      {\n            freq[lst[i]]++;\n        }\n    }\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        if(freq[i] >= i)\n        {\n            return i;\n        }\n\
    \    }\n    return -1;\n}", "{\n    long[] tmp = lst.dup;\n    tmp.sort();\n \
    \   long[] tmp2 = tmp.dup;\n    tmp2.unique;\n    foreach(i; tmp2)\n    {\n  \
    \      if(i <= tmp.count(i))\n            return i;\n    }\n    return -1;\n}",
  "{\n    long[] frequency = new long[lst.length];\n    foreach(i; lst)\n    {\n \
    \       frequency[i]++;\n    }\n    foreach(i; lst)\n    {\n        if(frequency[i]\
    \ >= i)\n        {\n            return i;\n        }\n    }\n    return -1;\n}",
  "{\n    long[] freq = new long[lst.length];\n    foreach(i; lst)\n    {\n      \
    \  freq[i]++;\n    }\n    long max = -1;\n    foreach(i; 0..lst.length)\n    {\n\
    \        if(freq[i] >= i)\n        {\n            max = max(max, i);\n       \
    \ }\n    }\n    return max;\n}", "{\n    long[] freq = new long[lst.length];\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        foreach(j; 0 .. lst.length)\n\
    \        {\n            if(lst[i] == lst[j])\n            {\n                freq[i]++;\n\
    \            }\n        }\n    }\n    foreach(i; 0 .. lst.length)\n    {\n   \
    \     if(freq[i] >= lst[i])\n        {\n            return lst[i];\n        }\n\
    \    }\n    return -1;\n}", "{\n    long[] freq = new long[lst.length];\n    foreach(i;\
    \ lst)\n    {\n        freq[i]++;\n    }\n    long max = -1;\n    foreach(i; 0..freq.length)\n\
    \    {\n        if(freq[i] >= i && i > max)\n        {\n            max = i;\n\
    \        }\n    }\n    return max;\n}", "{\n    int[] arr = new int[lst.length];\n\
    \    foreach(i; lst)\n    {\n        arr[i]++;\n    }\n    long max = -1;\n  \
    \  foreach(i; arr)\n    {\n        if(i >= arr[i] && i > max)\n        {\n   \
    \         max = i;\n        }\n    }\n    return max;\n}", "{\n    int[] count\
    \ = new int[lst.length];\n    for (int i = 0; i < lst.length; i++)\n    {\n  \
    \      count[lst[i]]++;\n    }\n    for (int i = count.length - 1; i > 0; i--)\n\
    \    {\n        if (count[i] >= i)\n        {\n            return i;\n       \
    \ }\n    }\n    return -1;\n}", "{\n    long[] freq = new long[lst.length];\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        freq[i] = 0;\n    }\n    foreach(i;\
    \ 0 .. lst.length)\n    {\n        foreach(j; 0 .. lst.length)\n        {\n  \
    \          if(lst[i] == lst[j])\n            {\n                freq[i]++;\n \
    \           }\n        }\n    }\n    long max = -1;\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        if(freq[i] >= lst[i] && lst[i] > max)\n        {\n           \
    \ max = lst[i];\n        }\n    }\n    return max;\n}", "{\n    long[] freq =\
    \ new long[lst.length];\n    foreach(i; lst)\n    {\n        freq[i]++;\n    }\n\
    \    foreach(i; lst)\n    {\n        if(freq[i] >= i)\n        {\n           \
    \ return i;\n        }\n    }\n    return -1;\n}", "{\n    long[] freq = new long[lst.length];\n\
    \    foreach(i; lst)\n    {\n        freq[i]++;\n    }\n    foreach(i; 0..lst.length)\n\
    \    {\n        if(freq[i] >= i)\n        {\n            return i;\n        }\n\
    \    }\n    return -1;\n}", "{\n    long[] temp = new long[lst.length];\n    long[]\
    \ temp2 = new long[lst.length];\n    long[] temp3 = new long[lst.length];\n  \
    \  long[] temp4 = new long[lst.length];\n    long[] temp5 = new long[lst.length];\n\
    \    long[] temp6 = new long[lst.length];\n    long[] temp7 = new long[lst.length];\n\
    \    long[] temp8 = new long[lst.length];\n    long[] temp9 = new long[lst.length];\n\
    \    long[] temp10 = new long[lst.length];\n    long[] temp11 = new long[lst.length];\n\
    \    long[] temp12 = new long[lst.length];\n    long[] temp13 = new long[lst.length];\n\
    \    long[] temp14 = new long[lst.length];\n    long[] temp15 = new long[lst.length];\n\
    \    long[] temp16 = new long[lst.length];\n    long[] temp17 = new long[lst.length];\n\
    \    long[] temp18 = new long[lst.length];\n    long[] temp19 = new long[lst.length];\n\
    \    long[] temp20 = new long[lst.length];\n    long[] temp21 = new long[lst.length];\n\
    \    long[] temp22 = new long[lst.length];\n    long[] temp23 = new long[lst.length];\n\
    \    long[] temp24 = new long[lst.length];\n    long[] temp25 = new long[lst.length];\n\
    \    long[] temp26 = new long[lst.length];\n    long[] temp27 = new long[lst.length];\n\
    \    long[] temp28 = new long[lst.length];\n    long[] temp29 = new long[lst.length];\n\
    \    long[] temp30 = new long[lst.length];\n    long[] temp31 = new long[lst.length];\n\
    \    long[] temp32 = new long[lst.length];\n    long[] temp33 = new long[lst.length];\n\
    \    long[] temp34 = new long[lst.length];\n", "{\n    long[] counts = new long[lst.length];\n\
    \    long[] sorted = lst.dup;\n    sorted.sort();\n    long max = -1;\n    foreach(i;\
    \ 0 .. sorted.length)\n    {\n        if(i == 0)\n        {\n            counts[i]\
    \ = 1;\n        }\n        else if(sorted[i] == sorted[i-1])\n        {\n    \
    \        counts[i] = counts[i-1] + 1;\n        }\n        else\n        {\n  \
    \          counts[i] = 1;\n        }\n        if(counts[i] >= sorted[i])\n   \
    \     {\n            max = sorted[i];\n        }\n    }\n    return max;\n}",
  "{\n    long[] freq = new long[lst.length];\n    foreach(i; 0 .. lst.length)\n \
    \   {\n        foreach(j; 0 .. lst.length)\n        {\n            if(lst[i] ==\
    \ lst[j])\n            {\n                freq[i]++;\n            }\n        }\n\
    \    }\n    long max = 0;\n    foreach(i; 0 .. lst.length)\n    {\n        if(lst[i]\
    \ > max && freq[i] >= lst[i])\n        {\n            max = lst[i];\n        }\n\
    \    }\n    if(max == 0)\n    {\n        return -1;\n    }\n    return max;\n}",
  "{\n    long[] frequency = new long[lst.length];\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        frequency[i] = 0;\n    }\n    foreach(i; 0 .. lst.length)\n  \
    \  {\n        frequency[lst[i]]++;\n    }\n    foreach(i; 0 .. lst.length)\n \
    \   {\n        if(frequency[i] >= i)\n        {\n            return i;\n     \
    \   }\n    }\n    return -1;\n}", "{\n    long[] freq = new long[lst.length];\n\
    \    foreach(i; lst)\n    {\n        freq[i]++;\n    }\n    foreach(i; lst)\n\
    \    {\n        if(freq[i] >= i)\n        {\n            return i;\n        }\n\
    \    }\n    return -1;\n}", "{\n    long max = -1;\n    long[] freq = new long[lst.length];\n\
    \    foreach(i; lst)\n    {\n        if(i > max)\n            max = i;\n     \
    \   freq[i]++;\n    }\n    foreach(i; 0..max)\n    {\n        if(freq[i] >= i)\n\
    \            return i;\n    }\n    return -1;\n}", "{\n    long[] arr = lst.dup;\n\
    \    arr.sort();\n    long[] freq = new long[arr.length];\n    long[] val = new\
    \ long[arr.length];\n    long[] res = new long[arr.length];\n    long count =\
    \ 0;\n    long index = 0;\n    foreach(i; 0 .. arr.length)\n    {\n        if(i\
    \ == 0)\n        {\n            freq[index] = 1;\n            val[index] = arr[i];\n\
    \            count++;\n        }\n        else\n        {\n            if(arr[i]\
    \ == arr[i-1])\n            {\n                freq[index]++;\n            }\n\
    \            else\n            {\n                index++;\n                freq[index]\
    \ = 1;\n                val[index] = arr[i];\n                count++;\n     \
    \       }\n        }\n    }\n    foreach(i; 0 .. count)\n    {\n        if(val[i]\
    \ <= freq[i])\n        {\n            res[i] = val[i];\n        }\n    }\n   \
    \ res.sort();\n    if(res.length == 0)\n    {\n        return -1;\n    }\n   \
    \ else\n    {\n        return res[res.length-1];\n    }\n}", "{\n    long[] freq\
    \ = new long[lst.length];\n    foreach(i; 0 .. lst.length)\n    {\n        foreach(j;\
    \ 0 .. lst.length)\n        {\n            if(lst[i] == lst[j])\n            {\n\
    \                freq[i]++;\n            }\n        }\n    }\n    long max = -1;\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        if(lst[i] > max && lst[i] <=\
    \ freq[i])\n        {\n            max = lst[i];\n        }\n    }\n    return\
    \ max;\n}\n/*\n    Example:\n    search([1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1,\
    \ 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3,\
    \ 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1,\
    \ 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3,\
    \ 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1,\
    \ 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3,\
    \ 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1,\
    \ 2, 3, 2", "{\n    long[] arr = new long[lst.length];\n    foreach(i; lst)\n\
    \    {\n        arr[i]++;\n    }\n    foreach(i; lst)\n    {\n        if(arr[i]\
    \ >= i)\n        {\n            return i;\n        }\n    }\n    return -1;\n}",
  "{\n    auto freq = new int[lst.length];\n    foreach(i; lst)\n    {\n        freq[i]++;\n\
    \    }\n    foreach(i; lst)\n    {\n        if(freq[i] >= i)\n        {\n    \
    \        return i;\n        }\n    }\n    return -1;\n}", "{\n    long[] frequency\
    \ = new long[lst.length];\n    foreach(i; lst)\n    {\n        frequency[i]++;\n\
    \    }\n    foreach(i; frequency)\n    {\n        if(i >= frequency[i])\n    \
    \    {\n            return i;\n        }\n    }\n    return -1;\n}", "{\n    long[]\
    \ count = new long[lst.length];\n    foreach(i; lst)\n    {\n        count[i]++;\n\
    \    }\n    foreach(i; 0..count.length)\n    {\n        if(count[i] >= i)\n  \
    \      {\n            return i;\n        }\n    }\n    return -1;\n}", "{\n  \
    \  long[] freq = new long[lst.length];\n    foreach(i; lst)\n    {\n        freq[i]++;\n\
    \    }\n    long max = 0;\n    foreach(i; lst)\n    {\n        if(freq[i] >= i\
    \ && i > max)\n        {\n            max = i;\n        }\n    }\n    return max;\n\
    }", "{\n    long[] freq = new long[lst.length];\n    long max = 0;\n    foreach(i;\
    \ lst)\n    {\n        if(i > max)\n            max = i;\n        freq[i]++;\n\
    \    }\n    foreach(i; 0 .. max)\n    {\n        if(freq[i] >= i)\n          \
    \  return i;\n    }\n    return -1;\n}", "{\n    auto freq = new int[lst.length];\n\
    \    foreach(i; lst)\n    {\n        freq[i]++;\n    }\n    foreach(i; lst)\n\
    \    {\n        if(freq[i] >= i)\n        {\n            return i;\n        }\n\
    \    }\n    return -1;\n}", "{\n    long[] arr = new long[lst.length];\n    foreach(i;\
    \ lst)\n    {\n        arr[i]++;\n    }\n    long max = -1;\n    foreach(i; 0\
    \ .. arr.length)\n    {\n        if(arr[i] >= i && i > max)\n        {\n     \
    \       max = i;\n        }\n    }\n    return max;\n}", "{\n    long[] freq =\
    \ new long[lst.length];\n    foreach(i; lst)\n    {\n        freq[i]++;\n    }\n\
    \    long max = -1;\n    foreach(i; 0..lst.length)\n    {\n        if(freq[i]\
    \ >= i)\n        {\n            max = max(max, i);\n        }\n    }\n    return\
    \ max;\n}", "{\n    long[] freq = new long[lst.length];\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        freq[i] = 0;\n    }\n    foreach(i; 0 .. lst.length)\n    {\n\
    \        foreach(j; 0 .. lst.length)\n        {\n            if(lst[i] == lst[j])\n\
    \            {\n                freq[i]++;\n            }\n        }\n    }\n\
    \    long max = -1;\n    foreach(i; 0 .. lst.length)\n    {\n        if(freq[i]\
    \ >= lst[i] && lst[i] > max)\n        {\n            max = lst[i];\n        }\n\
    \    }\n    return max;\n}", "{\n    long[] counts = new long[lst.length];\n \
    \   foreach(i; 0 .. lst.length)\n    {\n        counts[i] = count(lst, lst[i]);\n\
    \    }\n    long max = max(counts);\n    long index = 0;\n    foreach(i; 0 ..\
    \ lst.length)\n    {\n        if(counts[i] == max)\n        {\n            index\
    \ = i;\n            break;\n        }\n    }\n    return lst[index];\n}", "{\n\
    \    long[] sorted = lst.dup.sort();\n    long[] unique = sorted.uniq;\n    long[]\
    \ count = unique.map!(x => sorted.count(x));\n    long[] result = unique.filter!(x\
    \ => x <= count[unique.indexOf(x)]).sort;\n    return result.empty ? -1 : result.back;\n\
    }", "{\n    long[] arr = new long[lst.length];\n    long max = 0;\n    foreach(i;\
    \ lst)\n    {\n        arr[i]++;\n        max = max(max, i);\n    }\n    for(long\
    \ i = max; i > 0; i--)\n    {\n        if(arr[i] >= i)\n            return i;\n\
    \    }\n    return -1;\n}", "{\n    long[] freq = new long[lst.length];\n    foreach(i;\
    \ lst)\n    {\n        freq[i]++;\n    }\n    foreach(i; lst)\n    {\n       \
    \ if(freq[i] >= i)\n        {\n            return i;\n        }\n    }\n    return\
    \ -1;\n}", "{\n    long[] freq = new long[lst.length];\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        foreach(j; 0 .. lst.length)\n        {\n            if(lst[i]\
    \ == lst[j])\n            {\n                freq[i]++;\n            }\n     \
    \   }\n    }\n    long max = 0;\n    foreach(i; 0 .. lst.length)\n    {\n    \
    \    if(lst[i] > max && freq[i] >= lst[i])\n        {\n            max = lst[i];\n\
    \        }\n    }\n    if(max == 0)\n    {\n        return -1;\n    }\n    return\
    \ max;\n}", "{\n    long[] freq = new long[lst.length];\n    foreach(i; lst)\n\
    \    {\n        freq[i]++;\n    }\n    long max = -1;\n    foreach(i; 0..lst.length)\n\
    \    {\n        if(freq[i] >= i && i > max)\n        {\n            max = i;\n\
    \        }\n    }\n    return max;\n}", "{\n    long[] freq = new long[lst.length];\n\
    \    foreach(i; lst)\n    {\n        freq[i]++;\n    }\n    foreach(i; 0..freq.length)\n\
    \    {\n        if(freq[i] >= i)\n        {\n            return i;\n        }\n\
    \    }\n    return -1;\n}", "{\n    long[] arr = new long[lst.length];\n    foreach(i;\
    \ lst)\n    {\n        arr[i]++;\n    }\n    long max = -1;\n    foreach(i; arr)\n\
    \    {\n        if(i >= arr[i] && i > max)\n        {\n            max = i;\n\
    \        }\n    }\n    return max;\n}", "{\n    long[] freq = new long[lst.length];\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        foreach(j; 0 .. lst.length)\n\
    \        {\n            if(lst[i] == lst[j])\n            {\n                freq[i]++;\n\
    \            }\n        }\n    }\n    long max = 0;\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        if(freq[i] >= lst[i] && lst[i] > max)\n        {\n           \
    \ max = lst[i];\n        }\n    }\n    if(max == 0)\n    {\n        return -1;\n\
    \    }\n    return max;\n}", "{\n    long[] freq = new long[lst.length];\n   \
    \ foreach(i; lst)\n    {\n        freq[i]++;\n    }\n    long max = -1;\n    foreach(i;\
    \ 0..lst.length)\n    {\n        if(freq[i] >= i)\n        {\n            max\
    \ = max(max, i);\n        }\n    }\n    return max;\n}", "{\n    long[] freq =\
    \ new long[lst.length];\n    foreach(i; lst)\n    {\n        freq[i]++;\n    }\n\
    \    long max = -1;\n    foreach(i; 0..freq.length)\n    {\n        if(freq[i]\
    \ >= i && freq[i] > max)\n        {\n            max = i;\n        }\n    }\n\
    \    return max;\n}", "{\n    long[] arr = lst.dup;\n    arr.sort();\n    long[]\
    \ freq = new long[arr.length];\n    long[] unique = new long[arr.length];\n  \
    \  unique[0] = arr[0];\n    freq[0] = 1;\n    long j = 0;\n    for (long i = 1;\
    \ i < arr.length; i++)\n    {\n        if (arr[i] == arr[i - 1])\n        {\n\
    \            freq[j]++;\n        }\n        else\n        {\n            j++;\n\
    \            unique[j] = arr[i];\n            freq[j] = 1;\n        }\n    }\n\
    \    long[] freq2 = freq[0..j + 1];\n    long[] unique2 = unique[0..j + 1];\n\
    \    long[] freq3 = new long[unique2.length];\n    for (long i = 0; i < unique2.length;\
    \ i++)\n    {\n        freq3[i] = freq2[i] >= unique2[i] ? unique2[i] : -1;\n\
    \    }\n    return freq3.max;\n}", "{\n    long[] freq = new long[lst.length];\n\
    \    foreach(i; lst)\n    {\n        freq[i]++;\n    }\n    foreach(i; lst)\n\
    \    {\n        if(freq[i] >= i)\n        {\n            return i;\n        }\n\
    \    }\n    return -1;\n}", "{\n    long[] arr = lst.dup;\n    arr.sort();\n \
    \   long[] arr2 = arr.dup;\n    long[] arr3 = arr.dup;\n    long[] arr4 = arr.dup;\n\
    \    long[] arr5 = arr.dup;\n    long[] arr6 = arr.dup;\n    long[] arr7 = arr.dup;\n\
    \    long[] arr8 = arr.dup;\n    long[] arr9 = arr.dup;\n    long[] arr10 = arr.dup;\n\
    \    long[] arr11 = arr.dup;\n    long[] arr12 = arr.dup;\n    long[] arr13 =\
    \ arr.dup;\n    long[] arr14 = arr.dup;\n    long[] arr15 = arr.dup;\n    long[]\
    \ arr16 = arr.dup;\n    long[] arr17 = arr.dup;\n    long[] arr18 = arr.dup;\n\
    \    long[] arr19 = arr.dup;\n    long[] arr20 = arr.dup;\n    long[] arr21 =\
    \ arr.dup;\n    long[] arr22 = arr.dup;\n    long[] arr23 = arr.dup;\n    long[]\
    \ arr24 = arr.dup;\n    long[] arr25 = arr.dup;\n    long[] arr26 = arr.dup;\n\
    \    long[] arr27 = arr.dup;\n    long[] arr28 = arr.dup;\n    long[] arr29 =\
    \ arr.dup;\n    long[] arr30 = arr.dup;\n    long[] arr31 = arr.dup;\n    long[]\
    \ arr32 = arr.dup;\n    long[] arr33 = arr.dup;\n    long[] arr34 = arr.dup;\n\
    \    long[] arr35 = arr.dup;\n    long[] arr36 = arr.dup;\n    long[] arr37 =\
    \ arr.dup;\n    long[] arr38 = arr.dup;\n    long[] arr39 = arr.dup;\n    long[]\
    \ arr40 = arr.dup;\n    long[] arr41 = arr.dup;\n    long[] arr42 = arr.dup;",
  "{\n    int[] freq = new int[lst.length];\n    int[] nums = new int[lst.length];\n\
    \    int count = 0;\n    int max = 0;\n    for(int i = 0; i < lst.length; i++)\n\
    \    {\n        if(!nums.contains(lst[i]))\n        {\n            nums[count]\
    \ = lst[i];\n            count++;\n        }\n    }\n    for(int i = 0; i < count;\
    \ i++)\n    {\n        for(int j = 0; j < lst.length; j++)\n        {\n      \
    \      if(nums[i] == lst[j])\n            {\n                freq[i]++;\n    \
    \        }\n        }\n    }\n    for(int i = 0; i < count; i++)\n    {\n    \
    \    if(nums[i] <= freq[i])\n        {\n            max = max(max, nums[i]);\n\
    \        }\n    }\n    if(max == 0)\n    {\n        return -1;\n    }\n    return\
    \ max;\n}", "{\n    long[] freq = new long[lst.length];\n    foreach(i; lst)\n\
    \    {\n        freq[i]++;\n    }\n    foreach(i; lst)\n    {\n        if(freq[i]\
    \ >= i)\n        {\n            return i;\n        }\n    }\n    return -1;\n}",
  "{\n    long[] freq = new long[lst.length];\n    foreach(i; lst)\n    {\n      \
    \  freq[i]++;\n    }\n    foreach(i; lst)\n    {\n        if(freq[i] >= i)\n \
    \       {\n            return i;\n        }\n    }\n    return -1;\n}", "{\n \
    \   long[] freq = new long[lst.length];\n    foreach(i; lst)\n    {\n        if(i\
    \ > lst.length)\n            return -1;\n        freq[i]++;\n    }\n    foreach(i;\
    \ lst)\n    {\n        if(freq[i] >= i)\n            return i;\n    }\n    return\
    \ -1;\n}", "{\n    long[] freq = new long[lst.length];\n    foreach(i; lst)\n\
    \    {\n        freq[i]++;\n    }\n    foreach(i; lst)\n    {\n        if(freq[i]\
    \ >= i)\n        {\n            return i;\n        }\n    }\n    return -1;\n}",
  "{\n    long[] freq = new long[lst.length];\n    foreach(i; 0 .. lst.length)\n \
    \   {\n        freq[i] = 0;\n    }\n    foreach(i; 0 .. lst.length)\n    {\n \
    \       freq[lst[i]]++;\n    }\n    foreach(i; 0 .. lst.length)\n    {\n     \
    \   if(freq[i] >= i)\n        {\n            return i;\n        }\n    }\n   \
    \ return -1;\n}", "{\n    long[] freq = new long[lst.length];\n    foreach(i;\
    \ lst)\n    {\n        freq[i]++;\n    }\n    foreach(i; lst)\n    {\n       \
    \ if(freq[i] >= i)\n        {\n            return i;\n        }\n    }\n    return\
    \ -1;\n}", "{\n    long[] freq = new long[lst.length];\n    foreach(i; lst)\n\
    \    {\n        freq[i]++;\n    }\n    foreach(i; freq)\n    {\n        if(i >=\
    \ freq[i])\n        {\n            return i;\n        }\n    }\n    return -1;\n\
    }", "{\n    long[] freq = new long[lst.length];\n    foreach(i; lst)\n    {\n\
    \        freq[i]++;\n    }\n    foreach(i; lst)\n    {\n        if(freq[i] >=\
    \ i)\n        {\n            return i;\n        }\n    }\n    return -1;\n}",
  "{\n    long[] freq = new long[lst.length];\n    foreach(i; 0 .. lst.length)\n \
    \   {\n        foreach(j; 0 .. lst.length)\n        {\n            if(lst[i] ==\
    \ lst[j])\n            {\n                freq[i]++;\n            }\n        }\n\
    \    }\n    long max = -1;\n    foreach(i; 0 .. lst.length)\n    {\n        if(freq[i]\
    \ >= lst[i] && lst[i] > max)\n        {\n            max = lst[i];\n        }\n\
    \    }\n    return max;\n}", "{\n    long[] freq = new long[lst.length];\n   \
    \ foreach(i; 0 .. lst.length)\n    {\n        freq[i] = 0;\n    }\n    foreach(i;\
    \ 0 .. lst.length)\n    {\n        foreach(j; 0 .. lst.length)\n        {\n  \
    \          if(lst[i] == lst[j])\n            {\n                freq[i]++;\n \
    \           }\n        }\n    }\n    long max = -1;\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        if(freq[i] >= lst[i] && lst[i] > max)\n        {\n           \
    \ max = lst[i];\n        }\n    }\n    return max;\n}", "{\n    long[] freq =\
    \ new long[lst.length];\n    foreach(i; 0 .. lst.length)\n    {\n        freq[i]\
    \ = 0;\n    }\n    foreach(i; 0 .. lst.length)\n    {\n        freq[lst[i]]++;\n\
    \    }\n    foreach(i; 0 .. lst.length)\n    {\n        if(freq[i] >= i)\n   \
    \     {\n            return i;\n        }\n    }\n    return -1;\n}", "{\n   \
    \ long[] freq = new long[lst.length];\n    foreach(i; 0 .. lst.length)\n    {\n\
    \        freq[i] = 0;\n    }\n    foreach(i; 0 .. lst.length)\n    {\n       \
    \ foreach(j; 0 .. lst.length)\n        {\n            if(lst[i] == lst[j])\n \
    \           {\n                freq[i] += 1;\n            }\n        }\n    }\n\
    \    long max = 0;\n    foreach(i; 0 .. lst.length)\n    {\n        if(freq[i]\
    \ >= lst[i] && lst[i] > max)\n        {\n            max = lst[i];\n        }\n\
    \    }\n    if(max == 0)\n    {\n        return -1;\n    }\n    return max;\n\
    }\n/*\n    Examples:\n    search([1, 1, 2, 2, 3, 3, 4, 4, 5, 5]) == 4\n    search([1,\
    \ 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]) == -1\n    search([1,\
    \ 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13,\
    \ 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22,\
    \ 23, 23, 24, 24, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 30, 30, 31, 31, 32,\
    \ 32, 33, 33, 34, 34, 35, 35, 36, 36, 37, 37, 38, 38, 39, 39, 40, 40, 41, 41,\
    \ 42, 42, 43, 43, 44, 44, 45, 45, 46, 46, 47, 47, 48, 48, 49, 49, 50, 50, 51,\
    \ 51, 52, 52, 53, 53, 54, 54, 55,", "{\n    long[] freq = new long[lst.length];\n\
    \    foreach(i; lst)\n    {\n        freq[i]++;\n    }\n    foreach(i; 0..lst.length)\n\
    \    {\n        if(freq[i] >= i)\n        {\n            return i;\n        }\n\
    \    }\n    return -1;\n}", "{\n    long[] cnt = new long[lst.max() + 1];\n  \
    \  foreach(e; lst) cnt[e]++;\n    foreach(i; 0 .. cnt.length) if(cnt[i] >= i)\
    \ return i;\n    return -1;\n}\n/*\n    Examples:\n    search([1,2,2,3,3,3,4,4,4,4])\
    \ => 4\n    search([1,2,2,3,3,3,4,4,4,4,5,5,5,5,5]) => 5\n    search([1,2,2,3,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,6])\
    \ => 6\n    search([1,2,2,3,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,6,7,7,7,7,7,7,7])\
    \ => 7\n    search([1,2,2,3,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,6,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8])\
    \ => 8\n    search([1,2,2,3,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,6,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9])\
    \ => 9\n    search([1,2,2,3,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,6,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9",
  "{\n    long[] freq = new long[lst.length];\n    foreach(i; 0 .. lst.length)\n \
    \   {\n        foreach(j; 0 .. lst.length)\n        {\n            if(lst[i] ==\
    \ lst[j])\n            {\n                freq[i]++;\n            }\n        }\n\
    \    }\n    foreach(i; 0 .. lst.length)\n    {\n        if(freq[i] >= lst[i])\n\
    \        {\n            return lst[i];\n        }\n    }\n    return -1;\n}",
  "{\n    long[] freq = new long[lst.length];\n    foreach(i; lst)\n    {\n      \
    \  freq[i]++;\n    }\n    long max = -1;\n    foreach(i; lst)\n    {\n       \
    \ if(freq[i] >= i && i > max)\n        {\n            max = i;\n        }\n  \
    \  }\n    return max;\n}", "{\n    long[] freq = new long[lst.length];\n    foreach(i;\
    \ lst)\n    {\n        freq[i]++;\n    }\n    long max = -1;\n    foreach(i; 0..lst.length)\n\
    \    {\n        if(freq[i] >= i && i > max)\n        {\n            max = i;\n\
    \        }\n    }\n    return max;\n}", "{\n    long result = -1;\n    long max\
    \ = 0;\n    long[] freq = new long[lst.length];\n    foreach(i; lst)\n    {\n\
    \        if(i > max)\n            max = i;\n        freq[i]++;\n    }\n    foreach(i;\
    \ 0..max)\n    {\n        if(freq[i] >= i)\n            result = i;\n    }\n \
    \   return result;\n}", "{\n    long[] freq = new long[lst.length];\n    foreach(i;\
    \ lst)\n    {\n        freq[i]++;\n    }\n    foreach(i; lst)\n    {\n       \
    \ if(freq[i] >= i)\n        {\n            return i;\n        }\n    }\n    return\
    \ -1;\n}", "{\n    long[] freq = new long[lst.length];\n    foreach(i; lst)\n\
    \    {\n        freq[i]++;\n    }\n    foreach(i; lst)\n    {\n        if(freq[i]\
    \ >= i)\n        {\n            return i;\n        }\n    }\n    return -1;\n}",
  "{\n    long[] freq = new long[lst.length];\n    long[] sorted = lst.dup;\n    sorted.sort();\n\
    \    foreach(i; 0..lst.length)\n    {\n        long count = 0;\n        foreach(j;\
    \ 0..lst.length)\n        {\n            if(sorted[i] == sorted[j])\n        \
    \    {\n                count++;\n            }\n        }\n        freq[i] =\
    \ count;\n    }\n    foreach(i; 0..lst.length)\n    {\n        if(sorted[i] ==\
    \ freq[i])\n        {\n            return sorted[i];\n        }\n    }\n    return\
    \ -1;\n}", "{\n    long[] freq = new long[lst.length];\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        freq[i] = 0;\n    }\n    foreach(i; 0 .. lst.length)\n    {\n\
    \        freq[lst[i]]++;\n    }\n    foreach(i; 0 .. lst.length)\n    {\n    \
    \    if(freq[i] >= i)\n        {\n            return i;\n        }\n    }\n  \
    \  return -1;\n}", "{\n    long[] freq = new long[lst.length];\n    foreach(i;\
    \ 0 .. lst.length)\n    {\n        freq[i] = 0;\n    }\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        foreach(j; 0 .. lst.length)\n        {\n            if(lst[i]\
    \ == lst[j])\n            {\n                freq[i]++;\n            }\n     \
    \   }\n    }\n    long max = 0;\n    foreach(i; 0 .. lst.length)\n    {\n    \
    \    if(freq[i] >= lst[i] && lst[i] > max)\n        {\n            max = lst[i];\n\
    \        }\n    }\n    if(max == 0)\n    {\n        return -1;\n    }\n    return\
    \ max;\n}", "{\n    long[] freq = new long[lst.length];\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        foreach(j; 0 .. lst.length)\n        {\n            if(lst[i]\
    \ == lst[j])\n            {\n                freq[i]++;\n            }\n     \
    \   }\n    }\n    long max = 0;\n    foreach(i; 0 .. lst.length)\n    {\n    \
    \    if(freq[i] >= lst[i] && lst[i] > max)\n        {\n            max = lst[i];\n\
    \        }\n    }\n    if(max == 0)\n    {\n        return -1;\n    }\n    return\
    \ max;\n}", "{\n    long[] freq = new long[lst.length];\n    foreach(i; lst)\n\
    \    {\n        freq[i]++;\n    }\n    long max = -1;\n    foreach(i; 0..freq.length)\n\
    \    {\n        if(freq[i] >= i && i > max)\n        {\n            max = i;\n\
    \        }\n    }\n    return max;\n}", "{\n    long[] freq = new long[lst.length];\n\
    \    long[] sorted = lst.dup;\n    sorted.sort;\n    foreach(i; 0..lst.length)\n\
    \    {\n        long count = 0;\n        foreach(j; 0..lst.length)\n        {\n\
    \            if(sorted[i] == lst[j])\n            {\n                count++;\n\
    \            }\n        }\n        freq[i] = count;\n    }\n    long max = 0;\n\
    \    foreach(i; 0..lst.length)\n    {\n        if(freq[i] >= sorted[i] && sorted[i]\
    \ > max)\n        {\n            max = sorted[i];\n        }\n    }\n    if(max\
    \ == 0)\n    {\n        return -1;\n    }\n    return max;\n}", "{\n    long[]\
    \ arr = new long[lst.length];\n    foreach(i; lst)\n    {\n        arr[i]++;\n\
    \    }\n    foreach(i; arr)\n    {\n        if(i >= arr[i])\n        {\n     \
    \       return i;\n        }\n    }\n    return -1;\n}", "{\n    long[] freq =\
    \ new long[lst.length];\n    foreach(i; lst)\n    {\n        freq[i]++;\n    }\n\
    \    foreach(i; lst)\n    {\n        if(freq[i] >= i)\n        {\n           \
    \ return i;\n        }\n    }\n    return -1;\n}", "{\n    long[] freq = new long[lst.length];\n\
    \    foreach(i; lst)\n    {\n        freq[i]++;\n    }\n    foreach(i; lst)\n\
    \    {\n        if(freq[i] >= i)\n        {\n            return i;\n        }\n\
    \    }\n    return -1;\n}", "{\n    long[] freq = new long[lst.length];\n    foreach(i;\
    \ lst)\n    {\n        freq[i]++;\n    }\n    foreach(i; lst)\n    {\n       \
    \ if(freq[i] >= i)\n        {\n            return i;\n        }\n    }\n    return\
    \ -1;\n}", "{\n    long[] freq = new long[lst.length];\n    foreach(i; lst)\n\
    \    {\n        freq[i]++;\n    }\n    foreach(i; lst)\n    {\n        if(freq[i]\
    \ >= i)\n        {\n            return i;\n        }\n    }\n    return -1;\n}",
  "{\n    int[] freq = new int[lst.length];\n    foreach(i; lst)\n    {\n        freq[i]++;\n\
    \    }\n    foreach(i; lst)\n    {\n        if(freq[i] >= i)\n        {\n    \
    \        return i;\n        }\n    }\n    return -1;\n}", "{\n    long[] freq\
    \ = new long[lst.length];\n    foreach(i; 0 .. lst.length)\n    {\n        freq[i]\
    \ = 0;\n    }\n    foreach(i; 0 .. lst.length)\n    {\n        foreach(j; 0 ..\
    \ lst.length)\n        {\n            if(lst[i] == lst[j])\n            {\n  \
    \              freq[i]++;\n            }\n        }\n    }\n    long max = 0;\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        if(freq[i] >= lst[i] && lst[i]\
    \ > max)\n        {\n            max = lst[i];\n        }\n    }\n    if(max ==\
    \ 0)\n    {\n        return -1;\n    }\n    return max;\n}", "{\n    long[] freq\
    \ = new long[lst.length];\n    foreach(i; 0 .. lst.length)\n    {\n        freq[i]\
    \ = lst.count(lst[i]);\n    }\n    long[] max = new long[lst.length];\n    foreach(i;\
    \ 0 .. lst.length)\n    {\n        if(freq[i] >= lst[i])\n        {\n        \
    \    max[i] = lst[i];\n        }\n    }\n    return max.max();\n}", "{\n    long[]\
    \ freq = new long[lst.length];\n    foreach(i; lst)\n    {\n        freq[i]++;\n\
    \    }\n    long result = -1;\n    foreach(i; 0..lst.length)\n    {\n        if(freq[i]\
    \ >= i)\n        {\n            result = i;\n        }\n    }\n    return result;\n\
    }", "{\n    long[] freq = new long[lst.length];\n    foreach(i; lst)\n    {\n\
    \        freq[i]++;\n    }\n    foreach(i; lst)\n    {\n        if(freq[i] >=\
    \ i)\n        {\n            return i;\n        }\n    }\n    return -1;\n}",
  "{\n    long[] freq = new long[lst.length];\n    foreach(i; lst)\n    {\n      \
    \  freq[i]++;\n    }\n    foreach(i; lst)\n    {\n        if(freq[i] >= i)\n \
    \       {\n            return i;\n        }\n    }\n    return -1;\n}", "{\n \
    \   long[] freq = new long[lst.length];\n    foreach(i; 0 .. lst.length)\n   \
    \ {\n        foreach(j; 0 .. lst.length)\n        {\n            if(lst[i] ==\
    \ lst[j])\n            {\n                freq[i]++;\n            }\n        }\n\
    \    }\n    long max = 0;\n    foreach(i; 0 .. lst.length)\n    {\n        if(freq[i]\
    \ >= lst[i] && lst[i] > max)\n        {\n            max = lst[i];\n        }\n\
    \    }\n    if(max == 0)\n    {\n        return -1;\n    }\n    return max;\n\
    }\n/*\n    Examples:\n    search([1, 2, 3, 1, 2, 3, 1, 2, 3]) == 3\n    search([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9]) == -1\n    search([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 1\n\
    \    search([1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == -1\n  \
    \  search([1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9]) == 3\n    search([1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == 4\n    search([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 1, 2, 3, 4, 5, 6, 7, 8", "{\n    long[] freq = new long[lst.length];\n    foreach(i;\
    \ lst)\n    {\n        freq[i]++;\n    }\n    foreach(i; lst)\n    {\n       \
    \ if(freq[i] >= i)\n        {\n            return i;\n        }\n    }\n    return\
    \ -1;\n}", "{\n    long[] freq = new long[lst.length];\n    foreach(i; lst)\n\
    \    {\n        freq[i]++;\n    }\n    long max = -1;\n    foreach(i; 0..freq.length)\n\
    \    {\n        if(freq[i] >= i && i > max)\n        {\n            max = i;\n\
    \        }\n    }\n    return max;\n}", "{\n    long[] freq = new long[lst.length];\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        foreach(j; 0 .. lst.length)\n\
    \        {\n            if(lst[i] == lst[j])\n            {\n                freq[i]++;\n\
    \            }\n        }\n    }\n    long max = 0;\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        if(lst[i] > max && freq[i] >= lst[i])\n        {\n           \
    \ max = lst[i];\n        }\n    }\n    if(max == 0)\n    {\n        return -1;\n\
    \    }\n    return max;\n}", "{\n    long[] cnt = new long[lst.length];\n    foreach(i;\
    \ 0 .. lst.length)\n    {\n        cnt[i] = 0;\n    }\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        cnt[lst[i]] += 1;\n    }\n    foreach(i; 0 .. lst.length)\n  \
    \  {\n        if(cnt[i] >= i)\n        {\n            return i;\n        }\n \
    \   }\n    return -1;\n}", "{\n    long[] arr = new long[lst.length];\n    foreach(i;\
    \ lst)\n    {\n        arr[i]++;\n    }\n    long max = 0;\n    foreach(i; arr)\n\
    \    {\n        if(i >= arr[i] && i > max)\n        {\n            max = i;\n\
    \        }\n    }\n    return max;\n}", "{\n    long[] freq = new long[lst.length];\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        freq[i] = 0;\n    }\n    foreach(i;\
    \ 0 .. lst.length)\n    {\n        foreach(j; 0 .. lst.length)\n        {\n  \
    \          if(lst[i] == lst[j])\n            {\n                freq[i]++;\n \
    \           }\n        }\n    }\n    long max = 0;\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        if(freq[i] >= lst[i] && lst[i] > max)\n        {\n           \
    \ max = lst[i];\n        }\n    }\n    if(max == 0)\n    {\n        return -1;\n\
    \    }\n    return max;\n}", "{\n    long[] arr = lst.dup;\n    arr.sort;\n  \
    \  long[] arr2 = arr.dup;\n    arr2.removeDuplicates;\n    long[] arr3 = arr2.dup;\n\
    \    arr3.sort;\n    long[] arr4 = arr3.dup;\n    arr4.reverse;\n    foreach(i;\
    \ arr4)\n    {\n        if(arr.count(i) >= i)\n        {\n            return i;\n\
    \        }\n    }\n    return -1;\n}", "{\n    long[] lst2 = lst.dup;\n    lst2.sort;\n\
    \    long[] lst3 = lst2.dup;\n    lst3.removeDuplicates;\n    foreach(long i;\
    \ lst3)\n    {\n        long count = 0;\n        foreach(long j; lst2)\n     \
    \   {\n            if(i == j)\n            {\n                count++;\n     \
    \       }\n        }\n        if(count >= i)\n        {\n            return i;\n\
    \        }\n    }\n    return -1;\n}", "{\n    long[] freq = new long[lst.length];\n\
    \    foreach(i; lst)\n    {\n        freq[i]++;\n    }\n    long max = 0;\n  \
    \  foreach(i; 0..lst.length)\n    {\n        if(freq[i] >= i && i > max)\n   \
    \     {\n            max = i;\n        }\n    }\n    return max;\n}", "{\n   \
    \ long[] arr = new long[lst.length];\n    foreach(i;0..lst.length)\n    {\n  \
    \      arr[i] = lst[i];\n    }\n    arr.sort;\n    long[] arr2 = new long[lst.length];\n\
    \    foreach(i;0..lst.length)\n    {\n        arr2[i] = lst[i];\n    }\n    arr2.sort;\n\
    \    arr2.reverse;\n    long[] arr3 = new long[lst.length];\n    foreach(i;0..lst.length)\n\
    \    {\n        arr3[i] = lst[i];\n    }\n    arr3.sort;\n    arr3.reverse;\n\
    \    long[] arr4 = new long[lst.length];\n    foreach(i;0..lst.length)\n    {\n\
    \        arr4[i] = lst[i];\n    }\n    arr4.sort;\n    arr4.reverse;\n    long[]\
    \ arr5 = new long[lst.length];\n    foreach(i;0..lst.length)\n    {\n        arr5[i]\
    \ = lst[i];\n    }\n    arr5.sort;\n    arr5.reverse;\n    long[] arr6 = new long[lst.length];\n\
    \    foreach(i;0..lst.length)\n    {\n        arr6[i] = lst[i];\n    }\n    arr6.sort;\n\
    \    arr6.reverse;\n    long[] arr7 = new long[lst.length];\n    foreach(i;0..lst.length)\n\
    \    {\n        arr7[i] = lst[i];\n    }\n    arr7.sort;\n    arr7.reverse;\n\
    \    long[] arr8 = new long[lst.length];\n    foreach(i;0..lst.length)\n    {\n\
    \        arr8[i] = lst[i];\n    }\n    arr8.sort;\n    arr8.reverse;\n    long[]\
    \ arr9 = new long[lst.length];\n    foreach(i;0..", "{\n    auto d = new int[lst.length];\n\
    \    foreach(i; 0 .. lst.length)\n    {\n        d[i] = 0;\n    }\n    foreach(i;\
    \ 0 .. lst.length)\n    {\n        d[lst[i]]++;\n    }\n    foreach(i; 0 .. lst.length)\n\
    \    {\n        if(d[i] >= i)\n        {\n            return i;\n        }\n \
    \   }\n    return -1;\n}", "{\n    long[] arr = new long[lst.length];\n    foreach(i;\
    \ 0 .. lst.length)\n    {\n        if(arr[lst[i]] == 0)\n        {\n         \
    \   arr[lst[i]] = 1;\n        }\n        else\n        {\n            arr[lst[i]]++;\n\
    \        }\n    }\n    foreach(i; 0 .. arr.length)\n    {\n        if(arr[i] >=\
    \ i)\n        {\n            return i;\n        }\n    }\n    return -1;\n}",
  "{\n    long[] freq = new long[lst.length];\n    foreach(i; 0 .. lst.length)\n \
    \   {\n        foreach(j; 0 .. lst.length)\n        {\n            if(lst[i] ==\
    \ lst[j])\n            {\n                freq[i]++;\n            }\n        }\n\
    \    }\n    long max = -1;\n    foreach(i; 0 .. lst.length)\n    {\n        if(freq[i]\
    \ >= lst[i] && lst[i] > max)\n        {\n            max = lst[i];\n        }\n\
    \    }\n    return max;\n}", "{\n    int[] counts = new int[lst.length];\n   \
    \ foreach(i; lst)\n    {\n        counts[i]++;\n    }\n    foreach(i; lst)\n \
    \   {\n        if(counts[i] >= i)\n        {\n            return i;\n        }\n\
    \    }\n    return -1;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
