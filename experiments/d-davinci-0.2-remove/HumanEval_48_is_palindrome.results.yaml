language: d
name: HumanEval_48_is_palindrome
results:
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    return text == text.dup.mirror;\n}\nunittest\n{\n    alias candidate =\
    \ is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"\
    aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"\
    zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxq_962qj.d(10): Error: no property `mirror` for type `char[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxq_962qj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163115
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    return text == text.dup.reverse;\n}\nunittest\n{\n    alias candidate =\
    \ is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"\
    aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"\
    zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpo207s1qs.d(10): Error: template `std.typecons.reverse` cannot deduce
    function from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo207s1qs.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163115
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    text = text.toLower();\n    int len = text.length;\n    for (int i = 0;\
    \ i < len / 2; i++)\n    {\n        if (text[i] != text[len - i - 1])\n      \
    \  {\n            return false;\n        }\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n\
    \    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n\
    \    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") ==\
    \ true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"\
    xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpk273bugo.d(10): Error: no property `toLower` for type `string`

    /tmp/tmpk273bugo.d(11): Error: cannot implicitly convert expression `text.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk273bugo.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163115
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    return text == text.dup.reverse;\n}\nunittest\n{\n    alias candidate =\
    \ is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"\
    aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"\
    zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpo207s1qs.d(10): Error: template `std.typecons.reverse` cannot deduce
    function from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo207s1qs.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163115
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    auto len = text.length;\n    for (int i = 0; i < len / 2; i++)\n    {\n\
    \        if (text[i] != text[len - i - 1])\n            return false;\n    }\n\
    \    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n  \
    \  assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163115
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    auto len = text.length;\n    for (int i = 0; i < len / 2; i++) \n    {\n\
    \        if (text[i] != text[len - i - 1]) \n        {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\
    \n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163115
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    auto len = text.length;\n    for (size_t i = 0; i < len / 2; i++) \n  \
    \  {\n        if (text[i] != text[len - i - 1]) \n        {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"\
    aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"\
    zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163115
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    return text == text.dup.reverse;\n}\nunittest\n{\n    alias candidate =\
    \ is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"\
    aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"\
    zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpo207s1qs.d(10): Error: template `std.typecons.reverse` cannot deduce
    function from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo207s1qs.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163115
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    bool is_palindrome = true;\n    foreach(i, j; 0 .. text.length / 2)\n \
    \   {\n        if(text[i] != text[j])\n        {\n            is_palindrome =\
    \ false;\n            break;\n        }\n    }\n    return is_palindrome;\n}\n\
    unittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\"\
    ) == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"\
    aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"\
    xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"\
    xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdllmwxea.d(11): Error: found `..` when expecting `)`

    /tmp/tmpdllmwxea.d(11): Error: found `)` when expecting `;` following statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdllmwxea.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    auto len = text.length;\n    for (int i = 0; i < len / 2; i++)\n    {\n\
    \        if (text[i] != text[len - i - 1])\n            return false;\n    }\n\
    \    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n  \
    \  assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163115
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    auto len = text.length;\n    for (size_t i = 0; i < len / 2; i++) \n  \
    \  {\n        if (text[i] != text[len - i - 1]) \n        {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"\
    aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"\
    zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163115
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    auto len = text.length;\n    foreach(i; 0 .. len / 2)\n    {\n        if(text[i]\
    \ != text[len - i - 1])\n            return false;\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\
    \") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"\
    aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"\
    xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"\
    xywzx\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163115
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    auto len = text.length;\n    for (int i = 0; i < len / 2; i++) \n    {\n\
    \        if (text[i] != text[len - i - 1]) \n        {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\
    \n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163115
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    int len = text.length;\n    for (int i = 0; i < len / 2; i++) \n    {\n\
    \        if (text[i] != text[len - i - 1]) \n        {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\
    \n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpx8h0yvyw.d(10): Error: cannot implicitly convert expression `text.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx8h0yvyw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163115
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    int len = text.length;\n    for (int i = 0; i < len / 2; i++)\n    {\n\
    \        if (text[i] != text[len - i - 1])\n            return false;\n    }\n\
    \    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n  \
    \  assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmwvgxuhl.d(10): Error: cannot implicitly convert expression `text.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmwvgxuhl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163115
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    auto len = text.length;\n    for (size_t i = 0; i < len / 2; i++) \n  \
    \  {\n        if (text[i] != text[len - i - 1]) \n        {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"\
    aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"\
    zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163115
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    auto len = text.length;\n    for (int i = 0; i < len / 2; i++) \n    {\n\
    \        if (text[i] != text[len - i - 1]) \n        {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\
    \n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163115
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    return text == text.dup.reverse;\n}\nunittest\n{\n    alias candidate =\
    \ is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"\
    aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"\
    zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpo207s1qs.d(10): Error: template `std.typecons.reverse` cannot deduce
    function from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo207s1qs.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163115
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    return text == text.dup.reverse;\n}\nunittest\n{\n    alias candidate =\
    \ is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"\
    aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"\
    zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpo207s1qs.d(10): Error: template `std.typecons.reverse` cannot deduce
    function from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo207s1qs.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163115
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    auto len = text.length;\n    for (size_t i = 0; i < len / 2; i++) \n  \
    \  {\n        if (text[i] != text[len - i - 1])\n            return false;\n \
    \   }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\
    \n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163115
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    auto len = text.length;\n    for (int i = 0; i < len / 2; i++) \n    {\n\
    \        if (text[i] != text[len - i - 1]) \n        {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\
    \n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163115
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    int len = text.length;\n    for (int i = 0; i < len / 2; i++) \n    {\n\
    \        if (text[i] != text[len - i - 1]) \n        {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\
    \n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpx8h0yvyw.d(10): Error: cannot implicitly convert expression `text.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx8h0yvyw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163115
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    return text == text.dup.reverse;\n}\nunittest\n{\n    alias candidate =\
    \ is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"\
    aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"\
    zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpo207s1qs.d(10): Error: template `std.typecons.reverse` cannot deduce
    function from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo207s1qs.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163115
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    auto len = text.length;\n    for (size_t i = 0; i < len / 2; i++)\n   \
    \ {\n        if (text[i] != text[len - i - 1])\n            return false;\n  \
    \  }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\
    \n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163115
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    return text.equal(text.dup.reverse);\n}\nunittest\n{\n    alias candidate\
    \ = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"\
    aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"\
    zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmph94hrky5.d(10): Error: no property `equal` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph94hrky5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163115
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    string reversed = text.dup.reverse;\n    return text == reversed;\n}\n\
    unittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\"\
    ) == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"\
    aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"\
    xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"\
    xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptksojz98.d(10): Error: template `std.typecons.reverse` cannot deduce
    function from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptksojz98.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163115
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    auto len = text.length;\n    for (int i = 0; i < len / 2; i++) \n    {\n\
    \        if (text[i] != text[len - i - 1]) \n        {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\
    \n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163115
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    auto len = text.length;\n    for (int i = 0; i < len / 2; i++)\n    {\n\
    \        if (text[i] != text[len - i - 1])\n            return false;\n    }\n\
    \    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n  \
    \  assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163115
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    auto len = text.length;\n    for (size_t i = 0; i < len / 2; i++)\n   \
    \ {\n        if (text[i] != text[len - i - 1])\n            return false;\n  \
    \  }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\
    \n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163115
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    auto i = 0;\n    auto j = text.length - 1;\n    while (i < j) \n    {\n\
    \        if (text[i] != text[j])\n            return false;\n        i++;\n  \
    \      j--;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\
    \n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmphmlumgyb.d(14): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x427ef6]

    ??:? bool tmphmlumgyb.is_palindrome(immutable(char)[]) [0x427a46]

    ??:? void tmphmlumgyb.__unittest_L21_C1() [0x427aa4]

    ??:? void tmphmlumgyb.__modtest() [0x427bc4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbdf]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa72]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc05]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4300b4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb91]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa49]

    ??:? runModuleUnitTests [0x42b9b5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) in'
  stdout: ''
  timestamp: 1660163115
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    return text == text.dup.reverse;\n}\nunittest\n{\n    alias candidate =\
    \ is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"\
    aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"\
    zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpo207s1qs.d(10): Error: template `std.typecons.reverse` cannot deduce
    function from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo207s1qs.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163115
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    return text == text.dup.reverse;\n}\nunittest\n{\n    alias candidate =\
    \ is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"\
    aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"\
    zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpo207s1qs.d(10): Error: template `std.typecons.reverse` cannot deduce
    function from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo207s1qs.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163115
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    auto len = text.length;\n    for (int i = 0; i < len / 2; i++) \n    {\n\
    \        if (text[i] != text[len - i - 1]) \n        {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\
    \n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163115
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    return text == text.dup.reverse;\n}\nunittest\n{\n    alias candidate =\
    \ is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"\
    aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"\
    zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpo207s1qs.d(10): Error: template `std.typecons.reverse` cannot deduce
    function from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo207s1qs.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163115
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    auto len = text.length;\n    for (int i = 0; i < len / 2; i++) \n    {\n\
    \        if (text[i] != text[len - i - 1]) \n        {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\
    \n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163115
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    bool result = true;\n    for (int i = 0; i < text.length; i++)\n    {\n\
    \        if (text[i] != text[text.length - i - 1])\n        {\n            result\
    \ = false;\n            break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n\
    \    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n\
    \    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") ==\
    \ true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"\
    xywzx\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163115
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    auto len = text.length;\n    for (size_t i = 0; i < len / 2; i++)\n   \
    \ {\n        if (text[i] != text[len - i - 1])\n            return false;\n  \
    \  }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\
    \n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163115
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    return text == text.dup.reverse;\n}\nunittest\n{\n    alias candidate =\
    \ is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"\
    aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"\
    zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpo207s1qs.d(10): Error: template `std.typecons.reverse` cannot deduce
    function from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo207s1qs.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163115
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    auto len = text.length;\n    for (int i = 0; i < len / 2; i++) \n    {\n\
    \        if (text[i] != text[len - i - 1]) \n        {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\
    \n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163115
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    auto len = text.length;\n    for (int i = 0; i < len / 2; i++) \n    {\n\
    \        if (text[i] != text[len - i - 1]) \n        {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\
    \n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163115
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    auto len = text.length;\n    for (int i = 0; i < len / 2; i++) \n    {\n\
    \        if (text[i] != text[len - i - 1]) \n        {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\
    \n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163115
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    return text == text.dup.reverse;\n}\nunittest\n{\n    alias candidate =\
    \ is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"\
    aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"\
    zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpo207s1qs.d(10): Error: template `std.typecons.reverse` cannot deduce
    function from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo207s1qs.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163115
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    auto len = text.length;\n    for (int i = 0; i < len / 2; i++) \n    {\n\
    \        if (text[i] != text[len - i - 1]) \n        {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\
    \n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163115
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    auto len = text.length;\n    for (int i = 0; i < len / 2; i++)\n    {\n\
    \        if (text[i] != text[len - i - 1])\n            return false;\n    }\n\
    \    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n  \
    \  assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163115
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    return text == text.dup.reverse;\n}\nunittest\n{\n    alias candidate =\
    \ is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"\
    aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"\
    zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpo207s1qs.d(10): Error: template `std.typecons.reverse` cannot deduce
    function from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo207s1qs.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163115
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    return text == text.dup.reverse;\n}\nunittest\n{\n    alias candidate =\
    \ is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"\
    aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"\
    zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpo207s1qs.d(10): Error: template `std.typecons.reverse` cannot deduce
    function from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo207s1qs.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163115
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    return text == text.dup.reverse;\n}\nunittest\n{\n    alias candidate =\
    \ is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"\
    aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"\
    zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpo207s1qs.d(10): Error: template `std.typecons.reverse` cannot deduce
    function from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo207s1qs.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163115
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    // remove all non-alphanumeric characters\n    text = text.toLower().replace(\"\
    [^a-zA-Z0-9]\", \"\");\n    // check if string is a palindrome\n    return text\
    \ == text.dup.reverse;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\
    \n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpj3olr944.d(11): Error: no property `toLower` for type `string`

    /tmp/tmpj3olr944.d(13): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj3olr944.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163115
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    auto len = text.length;\n    for (int i = 0; i < len / 2; i++)\n    {\n\
    \        if (text[i] != text[len - i - 1])\n            return false;\n    }\n\
    \    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n  \
    \  assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163115
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    auto len = text.length;\n    for (int i = 0; i < len / 2; i++) \n    {\n\
    \        if (text[i] != text[len - i - 1]) \n        {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\
    \n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163115
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    int len = text.length;\n    for (int i = 0; i < len / 2; i++)\n    {\n\
    \        if (text[i] != text[len - i - 1])\n            return false;\n    }\n\
    \    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n  \
    \  assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmwvgxuhl.d(10): Error: cannot implicitly convert expression `text.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmwvgxuhl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163115
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    return text == text.dup.reverse;\n}\nunittest\n{\n    alias candidate =\
    \ is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"\
    aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"\
    zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpo207s1qs.d(10): Error: template `std.typecons.reverse` cannot deduce
    function from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo207s1qs.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163115
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    return text == text.dup.reverse;\n}\nunittest\n{\n    alias candidate =\
    \ is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"\
    aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"\
    zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpo207s1qs.d(10): Error: template `std.typecons.reverse` cannot deduce
    function from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo207s1qs.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163115
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    int len = text.length;\n    for (int i = 0; i < len / 2; i++) \n    {\n\
    \        if (text[i] != text[len - i - 1]) \n        {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n/*\nunittest\n{\n    alias candidate =\
    \ is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"\
    aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"\
    zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5kotqvv6.d(20): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5kotqvv6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    auto len = text.length;\n    for (int i = 0; i < len / 2; i++) \n    {\n\
    \        if (text[i] != text[len - i - 1]) \n        {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\
    \n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163115
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    int len = text.length;\n    for (int i = 0; i < len / 2; i++)\n    {\n\
    \        if (text[i] != text[len - i - 1])\n            return false;\n    }\n\
    \    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n  \
    \  assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmwvgxuhl.d(10): Error: cannot implicitly convert expression `text.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmwvgxuhl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163115
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    return text == text.dup.reverse;\n}\nunittest\n{\n    alias candidate =\
    \ is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"\
    aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"\
    zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpo207s1qs.d(10): Error: template `std.typecons.reverse` cannot deduce
    function from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo207s1qs.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163115
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    return text == text.dup.reverse;\n}\nunittest\n{\n    alias candidate =\
    \ is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"\
    aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"\
    zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpo207s1qs.d(10): Error: template `std.typecons.reverse` cannot deduce
    function from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo207s1qs.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163115
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    bool result = true;\n    foreach(i, j; 0 .. text.length / 2)\n    {\n \
    \       if(text[i] != text[text.length - j - 1])\n        {\n            result\
    \ = false;\n            break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n\
    \    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n\
    \    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") ==\
    \ true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"\
    xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6v95mpdn.d(11): Error: found `..` when expecting `)`

    /tmp/tmp6v95mpdn.d(11): Error: found `)` when expecting `;` following statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6v95mpdn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    int len = text.length;\n    for (int i = 0; i < len / 2; i++) \n    {\n\
    \        if (text[i] != text[len - i - 1]) \n        {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n/*\nunittest\n{\n    alias candidate =\
    \ is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"\
    aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"\
    zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5kotqvv6.d(20): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5kotqvv6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    return text == text.dup.reverse;\n}\nunittest\n{\n    alias candidate =\
    \ is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"\
    aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"\
    zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpo207s1qs.d(10): Error: template `std.typecons.reverse` cannot deduce
    function from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo207s1qs.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163115
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    int len = text.length;\n    for (int i = 0; i < len / 2; i++)\n    {\n\
    \        if (text[i] != text[len - i - 1])\n            return false;\n    }\n\
    \    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n  \
    \  assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmwvgxuhl.d(10): Error: cannot implicitly convert expression `text.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmwvgxuhl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163115
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    return text == text.dup.reverse;\n}\nunittest\n{\n    alias candidate =\
    \ is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"\
    aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"\
    zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpo207s1qs.d(10): Error: template `std.typecons.reverse` cannot deduce
    function from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo207s1qs.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163115
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    auto len = text.length;\n    for (int i = 0; i < len / 2; i++) \n    {\n\
    \        if (text[i] != text[len - i - 1]) \n        {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\
    \n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163115
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    auto len = text.length;\n    for (int i = 0; i < len / 2; i++) \n    {\n\
    \        if (text[i] != text[len - i - 1]) \n        {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\
    \n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163115
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    auto len = text.length;\n    for (int i = 0; i < len / 2; i++)\n    {\n\
    \        if (text[i] != text[len - i - 1])\n            return false;\n    }\n\
    \    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n  \
    \  assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163115
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    auto len = text.length;\n    for (int i = 0; i < len / 2; i++)\n    {\n\
    \        if (text[i] != text[len - i - 1])\n            return false;\n    }\n\
    \    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n  \
    \  assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163115
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    auto len = text.length;\n    for (int i = 0; i < len / 2; i++)\n    {\n\
    \        if (text[i] != text[len - i - 1])\n            return false;\n    }\n\
    \    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n  \
    \  assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163115
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    auto len = text.length;\n    for (int i = 0; i < len / 2; i++) \n    {\n\
    \        if (text[i] != text[len - i - 1])\n            return false;\n    }\n\
    \    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n  \
    \  assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163115
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    int len = text.length;\n    for (int i = 0; i < len / 2; i++) \n    {\n\
    \        if (text[i] != text[len - i - 1]) \n        {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\
    \n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpx8h0yvyw.d(10): Error: cannot implicitly convert expression `text.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx8h0yvyw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163115
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    return text == text.dup.reverse;\n}\nunittest\n{\n    alias candidate =\
    \ is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"\
    aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"\
    zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpo207s1qs.d(10): Error: template `std.typecons.reverse` cannot deduce
    function from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo207s1qs.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163115
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    return text == text.dup.reverse;\n}\nunittest\n{\n    alias candidate =\
    \ is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"\
    aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"\
    zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpo207s1qs.d(10): Error: template `std.typecons.reverse` cannot deduce
    function from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo207s1qs.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163115
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    int length = text.length;\n    for (int i = 0; i < length / 2; i++) \n\
    \    {\n        if (text[i] != text[length - i - 1]) \n        {\n           \
    \ return false;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"\
    aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"\
    zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpx831ezim.d(10): Error: cannot implicitly convert expression `text.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx831ezim.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163115
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    return text == text.dup.reverse;\n}\nunittest\n{\n    alias candidate =\
    \ is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"\
    aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"\
    zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpo207s1qs.d(10): Error: template `std.typecons.reverse` cannot deduce
    function from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo207s1qs.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163115
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    return text.equal(text.dup.reverse);\n}\nunittest\n{\n    alias candidate\
    \ = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"\
    aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"\
    zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmph94hrky5.d(10): Error: no property `equal` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph94hrky5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163115
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    auto len = text.length;\n    for (int i = 0; i < len / 2; i++) \n    {\n\
    \        if (text[i] != text[len - i - 1]) \n        {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\
    \n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163115
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    auto len = text.length;\n    for (int i = 0; i < len / 2; i++) \n    {\n\
    \        if (text[i] != text[len - i - 1])\n            return false;\n    }\n\
    \    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n  \
    \  assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163115
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    return text == text.dup.reverse;\n}\nunittest\n{\n    alias candidate =\
    \ is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"\
    aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"\
    zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpo207s1qs.d(10): Error: template `std.typecons.reverse` cannot deduce
    function from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo207s1qs.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163115
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    auto len = text.length;\n    for (int i = 0; i < len / 2; i++) \n    {\n\
    \        if (text[i] != text[len - i - 1]) \n        {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\
    \n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163115
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    auto len = text.length;\n    for (int i = 0; i < len / 2; i++)\n    {\n\
    \        if (text[i] != text[len - i - 1])\n            return false;\n    }\n\
    \    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n  \
    \  assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163115
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    return text == text.dup.reverse;\n}\nunittest\n{\n    alias candidate =\
    \ is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"\
    aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"\
    zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpo207s1qs.d(10): Error: template `std.typecons.reverse` cannot deduce
    function from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo207s1qs.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163115
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    int len = text.length;\n    for (int i = 0; i < len / 2; i++) \n    {\n\
    \        if (text[i] != text[len - i - 1]) \n        {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\
    \n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpx8h0yvyw.d(10): Error: cannot implicitly convert expression `text.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx8h0yvyw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163115
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    int length = text.length;\n    foreach(i; 0 .. length/2)\n    {\n     \
    \   if(text[i] != text[length-i-1])\n            return false;\n    }\n    return\
    \ true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\
    \") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"\
    aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"\
    xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"\
    xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnhywhw5m.d(10): Error: cannot implicitly convert expression `text.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnhywhw5m.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163115
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    auto len = text.length;\n    for (size_t i = 0; i < len / 2; i++) \n  \
    \  {\n        if (text[i] != text[len - i - 1]) \n        {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"\
    aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"\
    zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163115
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    int len = text.length;\n    for (int i = 0; i < len / 2; i++)\n    {\n\
    \        if (text[i] != text[len - i - 1])\n            return false;\n    }\n\
    \    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n  \
    \  assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmwvgxuhl.d(10): Error: cannot implicitly convert expression `text.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmwvgxuhl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163115
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    return text == text.dup.reverse;\n}\nunittest\n{\n    alias candidate =\
    \ is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"\
    aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"\
    zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpo207s1qs.d(10): Error: template `std.typecons.reverse` cannot deduce
    function from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo207s1qs.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163115
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    auto len = text.length;\n    for (int i = 0; i < len / 2; i++)\n    {\n\
    \        if (text[i] != text[len - i - 1])\n            return false;\n    }\n\
    \    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n  \
    \  assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163115
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    return text.equal(text.dup.reverse);\n}\nunittest\n{\n    alias candidate\
    \ = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"\
    aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"\
    zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmph94hrky5.d(10): Error: no property `equal` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph94hrky5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163115
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    auto len = text.length;\n    for (int i = 0; i < len / 2; i++) \n    {\n\
    \        if (text[i] != text[len - i - 1]) \n        {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\
    \n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163115
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    return text == text.dup.reverse;\n}\nunittest\n{\n    alias candidate =\
    \ is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"\
    aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"\
    zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpo207s1qs.d(10): Error: template `std.typecons.reverse` cannot deduce
    function from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo207s1qs.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163115
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    return text == text.dup.reverse;\n}\nunittest\n{\n    alias candidate =\
    \ is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"\
    aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"\
    zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpo207s1qs.d(10): Error: template `std.typecons.reverse` cannot deduce
    function from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo207s1qs.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163115
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    int len = text.length;\n    for (int i = 0; i < len / 2; i++) \n    {\n\
    \        if (text[i] != text[len - i - 1]) \n        {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\
    \n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpx8h0yvyw.d(10): Error: cannot implicitly convert expression `text.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx8h0yvyw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163115
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    auto len = text.length;\n    for (size_t i = 0; i < len / 2; i++) \n  \
    \  {\n        if (text[i] != text[len - i - 1]) \n        {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"\
    aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"\
    zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163115
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    int len = text.length;\n    int half = len / 2;\n    for (int i = 0; i\
    \ < half; i++) \n    {\n        if (text[i] != text[len - i - 1]) \n        {\n\
    \            return false;\n        }\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n\
    \    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n\
    \    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") ==\
    \ true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"\
    xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptwyp23b3.d(10): Error: cannot implicitly convert expression `text.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptwyp23b3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163115
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    text = text.toLower();\n    auto len = text.length;\n    for (int i = 0;\
    \ i < len / 2; i++) \n    {\n        if (text[i] != text[len - i - 1]) \n    \
    \    {\n            return false;\n        }\n    }\n    return true;\n}\nunittest\n\
    {\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n\
    \    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n\
    \    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") ==\
    \ true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"\
    xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_7vgp4s7.d(10): Error: no property `toLower` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_7vgp4s7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163115
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    return text == text.dup.reverse;\n}\nunittest\n{\n    alias candidate =\
    \ is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"\
    aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"\
    zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpo207s1qs.d(10): Error: template `std.typecons.reverse` cannot deduce
    function from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo207s1qs.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163115
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    return text == text.dup.reverse;\n}\nunittest\n{\n    alias candidate =\
    \ is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"\
    aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"\
    zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpo207s1qs.d(10): Error: template `std.typecons.reverse` cannot deduce
    function from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo207s1qs.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163115
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    auto len = text.length;\n    for (int i = 0; i < len / 2; i++)\n    {\n\
    \        if (text[i] != text[len - i - 1])\n            return false;\n    }\n\
    \    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n  \
    \  assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163115
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    auto len = text.length;\n    for (int i = 0; i < len / 2; i++)\n    {\n\
    \        if (text[i] != text[len - i - 1])\n            return false;\n    }\n\
    \    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n  \
    \  assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163115
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    return text == text.dup.reverse;\n}\nunittest\n{\n    alias candidate =\
    \ is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"\
    aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"\
    zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpo207s1qs.d(10): Error: template `std.typecons.reverse` cannot deduce
    function from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo207s1qs.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163115
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    string reversed = text.dup.reverse;\n    return text == reversed;\n}\n\
    unittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\"\
    ) == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"\
    aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"\
    xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"\
    xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptksojz98.d(10): Error: template `std.typecons.reverse` cannot deduce
    function from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptksojz98.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163115
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    int length = text.length;\n    for (int i = 0; i < length / 2; i++) \n\
    \    {\n        if (text[i] != text[length - i - 1]) \n        {\n           \
    \ return false;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"\
    aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"\
    zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpx831ezim.d(10): Error: cannot implicitly convert expression `text.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx831ezim.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163115
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    auto len = text.length;\n    for (int i = 0; i < len / 2; i++) \n    {\n\
    \        if (text[i] != text[len - i - 1]) \n        {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\
    \n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163115
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    return text == text.dup.reverse;\n}\nunittest\n{\n    alias candidate =\
    \ is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"\
    aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"\
    zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpo207s1qs.d(10): Error: template `std.typecons.reverse` cannot deduce
    function from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo207s1qs.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163115
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    auto len = text.length;\n    for (int i = 0; i < len / 2; i++) \n    {\n\
    \        if (text[i] != text[len - i - 1]) \n        {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\
    \n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163115
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    auto len = text.length;\n    for (int i = 0; i < len / 2; i++)\n    {\n\
    \        if (text[i] != text[len - i - 1])\n            return false;\n    }\n\
    \    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n  \
    \  assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163115
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    return text == text.dup.reverse;\n}\nunittest\n{\n    alias candidate =\
    \ is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"\
    aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"\
    zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpo207s1qs.d(10): Error: template `std.typecons.reverse` cannot deduce
    function from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo207s1qs.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163115
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    int len = text.length;\n    for (int i = 0; i < len / 2; i++) \n    {\n\
    \        if (text[i] != text[len - i - 1]) \n        {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n/*\nunittest\n{\n    alias candidate =\
    \ is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"\
    aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"\
    zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5kotqvv6.d(20): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5kotqvv6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    auto len = text.length;\n    for (size_t i = 0; i < len / 2; i++)\n   \
    \ {\n        if (text[i] != text[len - i - 1])\n            return false;\n  \
    \  }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\
    \n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163115
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    auto length = text.length;\n    for (int i = 0; i < length / 2; i++) \n\
    \    {\n        if (text[i] != text[length - i - 1]) \n        {\n           \
    \ return false;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"\
    aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"\
    zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163115
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    auto len = text.length;\n    for (size_t i = 0; i < len / 2; i++)\n   \
    \ {\n        if (text[i] != text[len - i - 1])\n            return false;\n  \
    \  }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\
    \n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163115
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    int len = text.length;\n    for (int i = 0; i < len / 2; i++)\n    {\n\
    \        if (text[i] != text[len - i - 1])\n            return false;\n    }\n\
    \    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n  \
    \  assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmwvgxuhl.d(10): Error: cannot implicitly convert expression `text.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmwvgxuhl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163115
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    auto len = text.length;\n    for (int i = 0; i < len / 2; i++) \n    {\n\
    \        if (text[i] != text[len - i - 1]) \n        {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\
    \n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163115
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    return text == text.dup.reverse;\n}\nunittest\n{\n    alias candidate =\
    \ is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"\
    aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"\
    zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpo207s1qs.d(10): Error: template `std.typecons.reverse` cannot deduce
    function from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo207s1qs.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163115
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    auto len = text.length;\n    for (size_t i = 0; i < len / 2; i++) \n  \
    \  {\n        if (text[i] != text[len - i - 1]) \n        {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"\
    aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"\
    zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163115
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    return text == text.dup.reverse;\n}\nunittest\n{\n    alias candidate =\
    \ is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"\
    aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"\
    zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpo207s1qs.d(10): Error: template `std.typecons.reverse` cannot deduce
    function from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo207s1qs.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163115
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    return text == text.dup.reverse;\n}\nunittest\n{\n    alias candidate =\
    \ is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"\
    aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"\
    zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpo207s1qs.d(10): Error: template `std.typecons.reverse` cannot deduce
    function from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo207s1qs.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163115
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    bool result = true;\n    foreach(i, j; 0 .. text.length / 2)\n    {\n \
    \       if(text[i] != text[j])\n        {\n            result = false;\n     \
    \       break;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"\
    aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"\
    zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdwqjbscu.d(11): Error: found `..` when expecting `)`

    /tmp/tmpdwqjbscu.d(11): Error: found `)` when expecting `;` following statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdwqjbscu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163115
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    bool result = true;\n    foreach(i, j; 0 .. text.length / 2)\n    {\n \
    \       if(text[i] != text[text.length - j - 1])\n        {\n            result\
    \ = false;\n            break;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n\
    \    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n\
    \    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") ==\
    \ true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"\
    xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6v95mpdn.d(11): Error: found `..` when expecting `)`

    /tmp/tmp6v95mpdn.d(11): Error: found `)` when expecting `;` following statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6v95mpdn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163114
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    int len = text.length;\n    for (int i = 0; i < len / 2; i++)\n    {\n\
    \        if (text[i] != text[len - i - 1])\n            return false;\n    }\n\
    \    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n  \
    \  assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmwvgxuhl.d(10): Error: cannot implicitly convert expression `text.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmwvgxuhl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163115
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    auto length = text.length;\n    for (int i = 0; i < length / 2; i++) \n\
    \    {\n        if (text[i] != text[length - i - 1]) \n        {\n           \
    \ return false;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"\
    aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"\
    zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163115
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    return text == text.dup.reverse;\n}\nunittest\n{\n    alias candidate =\
    \ is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"\
    aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"\
    zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpo207s1qs.d(10): Error: template `std.typecons.reverse` cannot deduce
    function from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo207s1qs.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163115
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    auto len = text.length;\n    foreach(i; 0 .. len / 2)\n    {\n        if(text[i]\
    \ != text[len - i - 1])\n            return false;\n    }\n    return true;\n\
    }\nunittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\
    \") == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"\
    aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"\
    xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"\
    xywzx\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163115
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    auto len = text.length;\n    for (size_t i = 0; i < len / 2; i++) \n  \
    \  {\n        if (text[i] != text[len - i - 1]) \n        {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"\
    aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"\
    zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163115
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    auto len = text.length;\n    for (int i = 0; i < len / 2; i++) \n    {\n\
    \        if (text[i] != text[len - i - 1]) \n        {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\
    \n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163115
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    return text == text.dup.reverse;\n}\nunittest\n{\n    alias candidate =\
    \ is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"\
    aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"\
    zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpo207s1qs.d(10): Error: template `std.typecons.reverse` cannot deduce
    function from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo207s1qs.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163115
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    return text == text.dup.reverse;\n}\nunittest\n{\n    alias candidate =\
    \ is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"\
    aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"\
    zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpo207s1qs.d(10): Error: template `std.typecons.reverse` cannot deduce
    function from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo207s1qs.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163115
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    int len = text.length;\n    for (int i = 0; i < len / 2; i++)\n    {\n\
    \        if (text[i] != text[len - i - 1])\n            return false;\n    }\n\
    \    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n  \
    \  assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmwvgxuhl.d(10): Error: cannot implicitly convert expression `text.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmwvgxuhl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163115
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    auto len = text.length;\n    for (size_t i = 0; i < len / 2; i++) \n  \
    \  {\n        if (text[i] != text[len - i - 1]) \n        {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"\
    aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"\
    zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163115
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    auto len = text.length;\n    for (int i = 0; i < len / 2; i++)\n    {\n\
    \        if (text[i] != text[len - i - 1])\n            return false;\n    }\n\
    \    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n  \
    \  assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163115
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    return text == text.dup.reverse;\n}\nunittest\n{\n    alias candidate =\
    \ is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"\
    aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"\
    zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpo207s1qs.d(10): Error: template `std.typecons.reverse` cannot deduce
    function from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo207s1qs.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163115
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    auto len = text.length;\n    for (int i = 0; i < len / 2; i++) \n    {\n\
    \        if (text[i] != text[len - i - 1]) \n        {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n/*\nunittest\n{\n    alias candidate =\
    \ is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"\
    aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"\
    zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpeilcso5q.d(20): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpeilcso5q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163115
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    auto len = text.length;\n    for (int i = 0; i < len / 2; i++) \n    {\n\
    \        if (text[i] != text[len - i - 1]) \n        {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\
    \n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163115
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    auto len = text.length;\n    for (int i = 0; i < len / 2; i++) \n    {\n\
    \        if (text[i] != text[len - i - 1]) \n        {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\
    \n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163115
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    auto len = text.length;\n    for (int i = 0; i < len / 2; i++)\n    {\n\
    \        if (text[i] != text[len - i - 1])\n            return false;\n    }\n\
    \    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n  \
    \  assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163115
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    return text == text.dup.reverse;\n}\nunittest\n{\n    alias candidate =\
    \ is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"\
    aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"\
    zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpo207s1qs.d(10): Error: template `std.typecons.reverse` cannot deduce
    function from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo207s1qs.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163115
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    auto len = text.length;\n    for (int i = 0; i < len / 2; i++) \n    {\n\
    \        if (text[i] != text[len - i - 1]) \n        {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\
    \n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163115
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    int len = text.length;\n    for (int i = 0; i < len / 2; i++) \n    {\n\
    \        if (text[i] != text[len - i - 1]) \n        {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\
    \n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpx8h0yvyw.d(10): Error: cannot implicitly convert expression `text.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx8h0yvyw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163115
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    string reversed = text.dup.reverse;\n    return text == reversed;\n}\n\
    unittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\"\
    ) == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"\
    aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"\
    xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"\
    xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptksojz98.d(10): Error: template `std.typecons.reverse` cannot deduce
    function from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptksojz98.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163115
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    auto len = text.length;\n    for (int i = 0; i < len / 2; i++)\n    {\n\
    \        if (text[i] != text[len - i - 1])\n            return false;\n    }\n\
    \    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n  \
    \  assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163115
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    auto len = text.length;\n    for (int i = 0; i < len / 2; i++)\n    {\n\
    \        if (text[i] != text[len - i - 1])\n            return false;\n    }\n\
    \    return true;\n}\n/*\nunittest\n{\n    alias candidate = is_palindrome;\n\n\
    \    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3m6y9xx_.d(18): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3m6y9xx_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163115
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    return text == text.dup.reverse;\n}\nunittest\n{\n    alias candidate =\
    \ is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"\
    aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"\
    zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpo207s1qs.d(10): Error: template `std.typecons.reverse` cannot deduce
    function from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo207s1qs.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163115
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    auto len = text.length;\n    for (int i = 0; i < len / 2; i++)\n    {\n\
    \        if (text[i] != text[len - i - 1])\n            return false;\n    }\n\
    \    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n  \
    \  assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163115
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    auto len = text.length;\n    for (int i = 0; i < len / 2; i++)\n    {\n\
    \        if (text[i] != text[len - i - 1])\n            return false;\n    }\n\
    \    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n  \
    \  assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163115
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    return text == text.dup.reverse;\n}\nunittest\n{\n    alias candidate =\
    \ is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"\
    aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"\
    zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpo207s1qs.d(10): Error: template `std.typecons.reverse` cannot deduce
    function from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo207s1qs.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163115
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    return text == text.dup.reverse;\n}\nunittest\n{\n    alias candidate =\
    \ is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"\
    aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"\
    zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpo207s1qs.d(10): Error: template `std.typecons.reverse` cannot deduce
    function from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo207s1qs.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163115
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    int len = text.length;\n    for (int i = 0; i < len / 2; i++)\n    {\n\
    \        if (text[i] != text[len - i - 1])\n            return false;\n    }\n\
    \    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n  \
    \  assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmwvgxuhl.d(10): Error: cannot implicitly convert expression `text.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmwvgxuhl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163115
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    int len = text.length;\n    for (int i = 0; i < len / 2; i++)\n    {\n\
    \        if (text[i] != text[len - i - 1])\n            return false;\n    }\n\
    \    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n  \
    \  assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmwvgxuhl.d(10): Error: cannot implicitly convert expression `text.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmwvgxuhl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163115
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    auto len = text.length;\n    for (size_t i = 0; i < len / 2; i++) \n  \
    \  {\n        if (text[i] != text[len - i - 1]) \n        {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"\
    aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"\
    zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163115
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    auto len = text.length;\n    for (size_t i = 0; i < len / 2; i++)\n   \
    \ {\n        if (text[i] != text[len - i - 1])\n            return false;\n  \
    \  }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\
    \n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163115
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    int len = text.length;\n    for (int i = 0; i < len / 2; i++) \n    {\n\
    \        if (text[i] != text[len - i - 1]) \n        {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\
    \n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpx8h0yvyw.d(10): Error: cannot implicitly convert expression `text.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx8h0yvyw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163115
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    auto len = text.length;\n    for (int i = 0; i < len / 2; i++) \n    {\n\
    \        if (text[i] != text[len - i - 1]) \n        {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\
    \n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163115
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    bool result = true;\n    foreach(i, j; 0 .. text.length / 2)\n    {\n \
    \       if(text[i] != text[j])\n        {\n            result = false;\n     \
    \       break;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"\
    aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"\
    zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdwqjbscu.d(11): Error: found `..` when expecting `)`

    /tmp/tmpdwqjbscu.d(11): Error: found `)` when expecting `;` following statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdwqjbscu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163115
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    return text == text.dup.reverse;\n}\nunittest\n{\n    alias candidate =\
    \ is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"\
    aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"\
    zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpo207s1qs.d(10): Error: template `std.typecons.reverse` cannot deduce
    function from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo207s1qs.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163115
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    auto len = text.length;\n    for (size_t i = 0; i < len / 2; i++) \n  \
    \  {\n        if (text[i] != text[len - i - 1]) \n        {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"\
    aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"\
    zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163115
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    return text == text.dup.reverse;\n}\nunittest\n{\n    alias candidate =\
    \ is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"\
    aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"\
    zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpo207s1qs.d(10): Error: template `std.typecons.reverse` cannot deduce
    function from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo207s1qs.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163115
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    auto len = text.length;\n    for (int i = 0; i < len / 2; i++) \n    {\n\
    \        if (text[i] != text[len - i - 1]) \n        {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\
    \n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163115
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    return text == text.dup.reverse;\n}\nunittest\n{\n    alias candidate =\
    \ is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"\
    aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"\
    zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpo207s1qs.d(10): Error: template `std.typecons.reverse` cannot deduce
    function from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo207s1qs.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163115
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    return text == text.dup.reverse;\n}\nunittest\n{\n    alias candidate =\
    \ is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"\
    aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"\
    zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpo207s1qs.d(10): Error: template `std.typecons.reverse` cannot deduce
    function from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo207s1qs.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163115
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    auto len = text.length;\n    for (int i = 0; i < len / 2; i++) \n    {\n\
    \        if (text[i] != text[len - i - 1]) \n        {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\
    \n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163115
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    return text == text.dup.reverse;\n}\nunittest\n{\n    alias candidate =\
    \ is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"\
    aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"\
    zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpo207s1qs.d(10): Error: template `std.typecons.reverse` cannot deduce
    function from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo207s1qs.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163115
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    auto len = text.length;\n    for (size_t i = 0; i < len / 2; i++) \n  \
    \  {\n        if (text[i] != text[len - i - 1]) \n        {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"\
    aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"\
    zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163115
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    return text == text.dup.reverse;\n}\nunittest\n{\n    alias candidate =\
    \ is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"\
    aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"\
    zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpo207s1qs.d(10): Error: template `std.typecons.reverse` cannot deduce
    function from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo207s1qs.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163115
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    return text == text.dup.reverse;\n}\nunittest\n{\n    alias candidate =\
    \ is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"\
    aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"\
    zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpo207s1qs.d(10): Error: template `std.typecons.reverse` cannot deduce
    function from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo207s1qs.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163115
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    auto len = text.length;\n    for (int i = 0; i < len / 2; i++) \n    {\n\
    \        if (text[i] != text[len - i - 1]) \n        {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\
    \n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163115
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    auto len = text.length;\n    for (size_t i = 0; i < len / 2; i++)\n   \
    \ {\n        if (text[i] != text[len - i - 1])\n            return false;\n  \
    \  }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\
    \n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163115
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    int len = text.length;\n    for (int i = 0; i < len / 2; i++)\n    {\n\
    \        if (text[i] != text[len - i - 1])\n            return false;\n    }\n\
    \    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n  \
    \  assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmwvgxuhl.d(10): Error: cannot implicitly convert expression `text.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmwvgxuhl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163115
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    int len = text.length;\n    for (int i = 0; i < len / 2; i++) \n    {\n\
    \        if (text[i] != text[len - i - 1]) \n        {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\
    \n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpx8h0yvyw.d(10): Error: cannot implicitly convert expression `text.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx8h0yvyw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163115
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    return text == text.dup.reverse;\n}\nunittest\n{\n    alias candidate =\
    \ is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"\
    aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"\
    zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpo207s1qs.d(10): Error: template `std.typecons.reverse` cannot deduce
    function from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo207s1qs.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163115
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    auto len = text.length;\n    for (int i = 0; i < len / 2; i++)\n    {\n\
    \        if (text[i] != text[len - i - 1])\n            return false;\n    }\n\
    \    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n  \
    \  assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163115
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    return text == text.dup.reverse;\n}\nunittest\n{\n    alias candidate =\
    \ is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"\
    aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"\
    zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpo207s1qs.d(10): Error: template `std.typecons.reverse` cannot deduce
    function from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo207s1qs.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163115
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    auto len = text.length;\n    for (size_t i = 0; i < len / 2; i++) \n  \
    \  {\n        if (text[i] != text[len - i - 1])\n            return false;\n \
    \   }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\
    \n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163115
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    auto len = text.length;\n    if (len < 2) return true;\n    for (size_t\
    \ i = 0; i < len / 2; i++)\n    {\n        if (text[i] != text[len - i - 1]) return\
    \ false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\
    \n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163115
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    return text == text.dup.reverse;\n}\nunittest\n{\n    alias candidate =\
    \ is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"\
    aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"\
    zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpo207s1qs.d(10): Error: template `std.typecons.reverse` cannot deduce
    function from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo207s1qs.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163115
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    text = text.toLower();\n    int length = text.length;\n    for (int i =\
    \ 0; i < length; i++) \n    {\n        if (text[i] != text[length - i - 1]) \n\
    \        {\n            return false;\n        }\n    }\n    return true;\n}\n\
    unittest\n{\n    alias candidate = is_palindrome;\n\n    assert(candidate(\"\"\
    ) == true);\n    assert(candidate(\"aba\") == true);\n    assert(candidate(\"\
    aaaaa\") == true);\n    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"\
    xywyx\") == true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"\
    xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxzkwz0ax.d(10): Error: no property `toLower` for type `string`

    /tmp/tmpxzkwz0ax.d(11): Error: cannot implicitly convert expression `text.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxzkwz0ax.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163115
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    return text == text.dup.reverse;\n}\nunittest\n{\n    alias candidate =\
    \ is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"\
    aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"\
    zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpo207s1qs.d(10): Error: template `std.typecons.reverse` cannot deduce
    function from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo207s1qs.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163115
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    auto len = text.length;\n    for (int i = 0; i < len / 2; i++)\n    {\n\
    \        if (text[i] != text[len - i - 1])\n            return false;\n    }\n\
    \    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n  \
    \  assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163115
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    auto len = text.length;\n    for (size_t i = 0; i < len / 2; i++) \n  \
    \  {\n        if (text[i] != text[len - i - 1]) \n        {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"\
    aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"\
    zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163115
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    auto len = text.length;\n    for (size_t i = 0; i < len / 2; i++) \n  \
    \  {\n        if (text[i] != text[len - i - 1]) \n        {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"\
    aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"\
    zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163115
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    int len = text.length;\n    for (int i = 0; i < len / 2; i++)\n    {\n\
    \        if (text[i] != text[len - i - 1])\n            return false;\n    }\n\
    \    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n  \
    \  assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmwvgxuhl.d(10): Error: cannot implicitly convert expression `text.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmwvgxuhl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163115
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    foreach(i, j; text[0 .. $ / 2])\n    {\n        if(text[i] != text[$ -\
    \ j - 1])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n\
    \    alias candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n\
    \    assert(candidate(\"aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n\
    \    assert(candidate(\"zbcd\") == false);\n    assert(candidate(\"xywyx\") ==\
    \ true);\n    assert(candidate(\"xywyz\") == false);\n    assert(candidate(\"\
    xywzx\") == false);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.RangeError@/tmp/tmp7pnmjsv0.d(12): Range violation

    ----------------

    ??:? _d_arrayboundsp [0x427f2e]

    ??:? bool tmp7pnmjsv0.is_palindrome(immutable(char)[]) [0x427aaa]

    ??:? void tmp7pnmjsv0.__unittest_L17_C1() [0x427b07]

    ??:? void tmp7pnmjsv0.__modtest() [0x427bfc]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bc17]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aaaa]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fc3d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4300ec]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fbc9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa81]

    ??:? runModuleUnitTests [0x42b9ed]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) in'
  stdout: ''
  timestamp: 1660163115
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    auto len = text.length;\n    for (int i = 0; i < len / 2; i++) \n    {\n\
    \        if (text[i] != text[len - i - 1])\n            return false;\n    }\n\
    \    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n  \
    \  assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163115
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    // remove all non-alphanumeric characters\n    text = text.toLower().replace(\"\
    [^a-zA-Z0-9]\", \"\");\n    // check if string is a palindrome\n    return text\
    \ == text.dup.reverse;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\
    \n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpj3olr944.d(11): Error: no property `toLower` for type `string`

    /tmp/tmpj3olr944.d(13): Error: template `std.typecons.reverse` cannot deduce function
    from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj3olr944.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163115
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    return text == text.dup.reverse;\n}\nunittest\n{\n    alias candidate =\
    \ is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"\
    aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"\
    zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpo207s1qs.d(10): Error: template `std.typecons.reverse` cannot deduce
    function from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo207s1qs.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163115
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    auto n = text.length;\n    for (int i = 0; i < n / 2; i++) \n    {\n  \
    \      if (text[i] != text[n - i - 1]) \n        {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\
    \n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163115
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    return text == text.dup.reverse;\n}\nunittest\n{\n    alias candidate =\
    \ is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"\
    aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"\
    zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpo207s1qs.d(10): Error: template `std.typecons.reverse` cannot deduce
    function from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo207s1qs.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163115
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    auto len = text.length;\n    for (int i = 0; i < len / 2; i++) \n    {\n\
    \        if (text[i] != text[len - i - 1]) \n        {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\
    \n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163115
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    return text == text.dup.reverse;\n}\nunittest\n{\n    alias candidate =\
    \ is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"\
    aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"\
    zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpo207s1qs.d(10): Error: template `std.typecons.reverse` cannot deduce
    function from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo207s1qs.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163115
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    auto len = text.length;\n    for (int i = 0; i < len / 2; i++) \n    {\n\
    \        if (text[i] != text[len - i - 1]) \n        {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\
    \n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163115
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    auto len = text.length;\n    for (int i = 0; i < len / 2; i++)\n    {\n\
    \        if (text[i] != text[len - i - 1])\n            return false;\n    }\n\
    \    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n  \
    \  assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163115
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    auto len = text.length;\n    for (int i = 0; i < len / 2; i++) \n    {\n\
    \        if (text[i] != text[len - i - 1]) \n        {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n/*\nunittest\n{\n    alias candidate =\
    \ is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"\
    aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"\
    zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpeilcso5q.d(20): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpeilcso5q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163115
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    auto len = text.length;\n    for (int i = 0; i < len / 2; i++) \n    {\n\
    \        if (text[i] != text[len - i - 1]) \n        {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\
    \n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163115
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    int len = text.length;\n    for (int i = 0; i < len / 2; i++)\n    {\n\
    \        if (text[i] != text[len - i - 1])\n            return false;\n    }\n\
    \    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\n  \
    \  assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmwvgxuhl.d(10): Error: cannot implicitly convert expression `text.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmwvgxuhl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163115
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    auto len = text.length;\n    for (size_t i = 0; i < len / 2; i++) \n  \
    \  {\n        if (text[i] != text[len - i - 1]) \n        {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate\
    \ = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"\
    aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"\
    zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163115
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    return text == text.dup.reverse;\n}\nunittest\n{\n    alias candidate =\
    \ is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"\
    aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"\
    zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpo207s1qs.d(10): Error: template `std.typecons.reverse` cannot deduce
    function from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo207s1qs.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163115
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    int len = text.length;\n    for (int i = 0; i < len / 2; i++) \n    {\n\
    \        if (text[i] != text[len - i - 1]) \n        {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\
    \n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpx8h0yvyw.d(10): Error: cannot implicitly convert expression `text.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx8h0yvyw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163115
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    auto len = text.length;\n    for (int i = 0; i < len / 2; i++) \n    {\n\
    \        if (text[i] != text[len - i - 1]) \n        {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_palindrome;\n\
    \n    assert(candidate(\"\") == true);\n    assert(candidate(\"aba\") == true);\n\
    \    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"zbcd\") ==\
    \ false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660163115
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    int length = text.length;\n    for (int i = 0; i < length / 2; i++) \n\
    \    {\n        if (text[i] != text[length - i - 1]) \n        {\n           \
    \ return false;\n        }\n    }\n    return true;\n}\nunittest\n{\n    alias\
    \ candidate = is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"\
    aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"\
    zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpx831ezim.d(10): Error: cannot implicitly convert expression `text.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx831ezim.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163115
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    return text == text.dup.mirror;\n}\nunittest\n{\n    alias candidate =\
    \ is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"\
    aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"\
    zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxq_962qj.d(10): Error: no property `mirror` for type `char[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxq_962qj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163115
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Checks if given string\
    \ is a palindrome\n                    \n*/\nbool is_palindrome(string text) \n\
    {\n    return text == text.dup.reverse;\n}\nunittest\n{\n    alias candidate =\
    \ is_palindrome;\n\n    assert(candidate(\"\") == true);\n    assert(candidate(\"\
    aba\") == true);\n    assert(candidate(\"aaaaa\") == true);\n    assert(candidate(\"\
    zbcd\") == false);\n    assert(candidate(\"xywyx\") == true);\n    assert(candidate(\"\
    xywyz\") == false);\n    assert(candidate(\"xywzx\") == false);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpo207s1qs.d(10): Error: template `std.typecons.reverse` cannot deduce
    function from argument types `!()(char[])`, candidates are:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/typecons.d(1486):        `std.typecons.reverse(T)(T
    t) if (isTuple!T)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo207s1qs.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163115
