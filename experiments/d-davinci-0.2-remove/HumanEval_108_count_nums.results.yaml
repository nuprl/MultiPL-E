language: d
name: HumanEval_108_count_nums
results:
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(i; arr)\n    {\n        long sum = 0;\n        foreach(j; i.digits)\n\
    \        {\n            sum += j;\n        }\n        if(sum > 0)\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n \
    \   alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L,\
    \ -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n\
    \    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L,\
    \ 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L,\
    \ -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L])\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmr8z4h1q.d(17): Error: no property `digits` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmr8z4h1q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(i; arr)\n    {\n        long sum = 0;\n        foreach(j; i.digits)\n\
    \        {\n            sum += j;\n        }\n        if(sum > 0)\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n \
    \   alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L,\
    \ -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n\
    \    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L,\
    \ 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L,\
    \ -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L])\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmr8z4h1q.d(17): Error: no property `digits` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmr8z4h1q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(i; arr)\n    {\n        if(i < 0)\n        {\n            i = -i;\n\
    \        }\n        long sum = 0;\n        while(i > 0)\n        {\n         \
    \   sum += i % 10;\n            i /= 10;\n        }\n        if(sum > 0)\n   \
    \     {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n   \
    \ assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L,\
    \ -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L])\
    \ == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L,\
    \ 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n\
    \    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp2b85e3cm.d(38): unittest failure

    ----------------

    ??:? _d_unittestp [0x42831d]

    ??:? void tmp2b85e3cm.__unittest_L33_C1() [0x427e3e]

    ??:? void tmp2b85e3cm.__modtest() [0x4280a0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c32b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1be]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430351]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430800]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302dd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b195]

    ??:? runModuleUnitTests [0x42c101]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42876c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(i; arr)\n    {\n        long sum = 0;\n        foreach(j; i.digits)\n\
    \        {\n            sum += j;\n        }\n        if(sum > 0)\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n \
    \   alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L,\
    \ -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n\
    \    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L,\
    \ 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L,\
    \ -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L])\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmr8z4h1q.d(17): Error: no property `digits` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmr8z4h1q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(e; arr)\n    {\n        long sum = 0;\n        long num = e;\n     \
    \   if(num < 0)\n        {\n            num = -num;\n        }\n        while(num\
    \ > 0)\n        {\n            sum += num % 10;\n            num /= 10;\n    \
    \    }\n        if(sum > 0)\n        {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nunittest\n{\n    alias candidate = count_nums;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L,\
    \ 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L,\
    \ 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n\
    \    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L,\
    \ 1L]) == 1L);\n    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp7r6vyixb.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x42831d]

    ??:? void tmp7r6vyixb.__unittest_L34_C1() [0x427e3a]

    ??:? void tmp7r6vyixb.__modtest() [0x42809c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c32b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1be]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430351]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430800]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302dd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b195]

    ??:? runModuleUnitTests [0x42c101]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42876c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(i; arr)\n    {\n        if(i < 0)\n        {\n            i = -i;\n\
    \        }\n        long sum = 0;\n        while(i > 0)\n        {\n         \
    \   sum += i % 10;\n            i /= 10;\n        }\n        if(sum > 0)\n   \
    \     {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n   \
    \ assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L,\
    \ -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L])\
    \ == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L,\
    \ 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n\
    \    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp2b85e3cm.d(38): unittest failure

    ----------------

    ??:? _d_unittestp [0x42831d]

    ??:? void tmp2b85e3cm.__unittest_L33_C1() [0x427e3e]

    ??:? void tmp2b85e3cm.__modtest() [0x4280a0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c32b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1be]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430351]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430800]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302dd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b195]

    ??:? runModuleUnitTests [0x42c101]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42876c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(i; arr)\n    {\n        long sum = 0;\n        foreach(j; i.digits)\n\
    \        {\n            sum += j;\n        }\n        if(sum > 0)\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n \
    \   alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L,\
    \ -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n\
    \    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L,\
    \ 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L,\
    \ -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L])\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmr8z4h1q.d(17): Error: no property `digits` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmr8z4h1q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(i; arr)\n    {\n        long sum = 0;\n        foreach(j; i.digits)\n\
    \        {\n            sum += j;\n        }\n        if(sum > 0)\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n \
    \   alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L,\
    \ -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n\
    \    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L,\
    \ 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L,\
    \ -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L])\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmr8z4h1q.d(17): Error: no property `digits` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmr8z4h1q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(i; arr)\n    {\n        long sum = 0;\n        foreach(j; i.digits)\n\
    \        {\n            sum += j;\n        }\n        if(sum > 0)\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n \
    \   alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L,\
    \ -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n\
    \    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L,\
    \ 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L,\
    \ -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L])\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmr8z4h1q.d(17): Error: no property `digits` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmr8z4h1q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(num; arr)\n    {\n        long sum = 0;\n        foreach(digit; num.digits)\n\
    \        {\n            sum += digit;\n        }\n        if(sum > 0)\n      \
    \  {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n   \
    \ assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L,\
    \ -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L])\
    \ == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L,\
    \ 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n\
    \    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7awdlgoh.d(17): Error: no property `digits` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7awdlgoh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(i; arr)\n    {\n        long sum = 0;\n        foreach(j; i.digits)\n\
    \        {\n            sum += j;\n        }\n        if(sum > 0)\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n \
    \   alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L,\
    \ -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n\
    \    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L,\
    \ 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L,\
    \ -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L])\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmr8z4h1q.d(17): Error: no property `digits` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmr8z4h1q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(i; arr)\n    {\n        long sum = 0;\n        long num = i;\n     \
    \   if(num < 0)\n        {\n            num = -num;\n        }\n        while(num\
    \ > 0)\n        {\n            sum += num % 10;\n            num /= 10;\n    \
    \    }\n        if(sum > 0)\n        {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nunittest\n{\n    alias candidate = count_nums;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L,\
    \ 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L,\
    \ 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n\
    \    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L,\
    \ 1L]) == 1L);\n    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpolmsrs79.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x42831d]

    ??:? void tmpolmsrs79.__unittest_L34_C1() [0x427e3a]

    ??:? void tmpolmsrs79.__modtest() [0x42809c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c32b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1be]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430351]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430800]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302dd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b195]

    ??:? runModuleUnitTests [0x42c101]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42876c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(i; arr)\n    {\n        long sum = 0;\n        long num = i;\n     \
    \   if(num < 0)\n        {\n            num = -num;\n        }\n        while(num\
    \ > 0)\n        {\n            sum += num % 10;\n            num /= 10;\n    \
    \    }\n        if(sum > 0)\n        {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nunittest\n{\n    alias candidate = count_nums;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L,\
    \ 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L,\
    \ 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n\
    \    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L,\
    \ 1L]) == 1L);\n    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpolmsrs79.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x42831d]

    ??:? void tmpolmsrs79.__unittest_L34_C1() [0x427e3a]

    ??:? void tmpolmsrs79.__modtest() [0x42809c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c32b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1be]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430351]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430800]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302dd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b195]

    ??:? runModuleUnitTests [0x42c101]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42876c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(i; arr)\n    {\n        long sum = 0;\n        long num = i;\n     \
    \   while(num != 0)\n        {\n            sum += abs(num % 10);\n          \
    \  num /= 10;\n        }\n        if(sum > 0)\n            count++;\n    }\n \
    \   return count;\n}\nunittest\n{\n    alias candidate = count_nums;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L,\
    \ 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L,\
    \ 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n\
    \    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L,\
    \ 1L]) == 1L);\n    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpetj9vgz9.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x428385]

    ??:? void tmpetj9vgz9.__unittest_L28_C1() [0x427e8a]

    ??:? void tmpetj9vgz9.__modtest() [0x428104]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c393]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b226]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4303b9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430868]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430345]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1fd]

    ??:? runModuleUnitTests [0x42c169]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287d4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(i; arr)\n    {\n        long sum = 0;\n        foreach(j; i.digits)\n\
    \        {\n            sum += j;\n        }\n        if(sum > 0)\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n \
    \   alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L,\
    \ -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n\
    \    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L,\
    \ 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L,\
    \ -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L])\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmr8z4h1q.d(17): Error: no property `digits` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmr8z4h1q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(i; arr)\n    {\n        long sum = 0;\n        foreach(j; i.digits)\n\
    \        {\n            sum += j;\n        }\n        if(sum > 0)\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n \
    \   alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L,\
    \ -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n\
    \    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L,\
    \ 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L,\
    \ -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L])\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmr8z4h1q.d(17): Error: no property `digits` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmr8z4h1q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(i; arr) \n    {\n        long sum = 0;\n        foreach(j; i.digits)\
    \ \n        {\n            sum += abs(j);\n        }\n        if(sum > 0) \n \
    \       {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n   \
    \ assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L,\
    \ -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L])\
    \ == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L,\
    \ 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n\
    \    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpucwksdsw.d(17): Error: no property `digits` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpucwksdsw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(i; arr)\n    {\n        if(i < 0)\n        {\n            i = -i;\n\
    \        }\n        long sum = 0;\n        while(i != 0)\n        {\n        \
    \    sum += i % 10;\n            i /= 10;\n        }\n        if(sum > 0)\n  \
    \      {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n   \
    \ assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L,\
    \ -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L])\
    \ == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L,\
    \ 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n\
    \    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpqlpb6i3w.d(38): unittest failure

    ----------------

    ??:? _d_unittestp [0x42831d]

    ??:? void tmpqlpb6i3w.__unittest_L33_C1() [0x427e3e]

    ??:? void tmpqlpb6i3w.__modtest() [0x4280a0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c32b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1be]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430351]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430800]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302dd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b195]

    ??:? runModuleUnitTests [0x42c101]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42876c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(i; arr)\n    {\n        long sum = 0;\n        long num = i;\n     \
    \   while(num != 0)\n        {\n            sum += num % 10;\n            num\
    \ /= 10;\n        }\n        if(sum > 0)\n            count++;\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = count_nums;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L,\
    \ 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L,\
    \ 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n\
    \    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L,\
    \ 1L]) == 1L);\n    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpbtlh1y7a.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x42830d]

    ??:? void tmpbtlh1y7a.__unittest_L28_C1() [0x427ff5]

    ??:? void tmpbtlh1y7a.__modtest() [0x428090]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c31b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1ae]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430341]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4307f0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302cd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b185]

    ??:? runModuleUnitTests [0x42c0f1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42875c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(i; arr)\n    {\n        long sum = 0;\n        long n = abs(i);\n  \
    \      while(n > 0)\n        {\n            sum += n % 10;\n            n /= 10;\n\
    \        }\n        if(sum > 0)\n            count++;\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = count_nums;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L,\
    \ 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L,\
    \ 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n\
    \    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L,\
    \ 1L]) == 1L);\n    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpg5mqgqws.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x42837d]

    ??:? void tmpg5mqgqws.__unittest_L28_C1() [0x427e86]

    ??:? void tmpg5mqgqws.__modtest() [0x428100]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c38b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b21e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4303b1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430860]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43033d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1f5]

    ??:? runModuleUnitTests [0x42c161]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287cc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(i; arr)\n    {\n        long sum = 0;\n        foreach(j; i.digits)\n\
    \        {\n            sum += j;\n        }\n        if(sum > 0)\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n \
    \   alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L,\
    \ -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n\
    \    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L,\
    \ 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L,\
    \ -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L])\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmr8z4h1q.d(17): Error: no property `digits` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmr8z4h1q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(i; arr)\n    {\n        if(i < 0)\n        {\n            i = -i;\n\
    \        }\n        long sum = 0;\n        while(i > 0)\n        {\n         \
    \   sum += i % 10;\n            i /= 10;\n        }\n        if(sum > 0)\n   \
    \     {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n   \
    \ assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L,\
    \ -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L])\
    \ == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L,\
    \ 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n\
    \    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp2b85e3cm.d(38): unittest failure

    ----------------

    ??:? _d_unittestp [0x42831d]

    ??:? void tmp2b85e3cm.__unittest_L33_C1() [0x427e3e]

    ??:? void tmp2b85e3cm.__modtest() [0x4280a0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c32b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1be]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430351]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430800]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302dd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b195]

    ??:? runModuleUnitTests [0x42c101]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42876c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(i; arr)\n    {\n        long sum = 0;\n        foreach(j; i.digits)\n\
    \        {\n            sum += j;\n        }\n        if(sum > 0)\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n \
    \   alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L,\
    \ -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n\
    \    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L,\
    \ 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L,\
    \ -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L])\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmr8z4h1q.d(17): Error: no property `digits` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmr8z4h1q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(i; arr)\n    {\n        if(i < 0)\n        {\n            i = -i;\n\
    \        }\n        long sum = 0;\n        while(i != 0)\n        {\n        \
    \    sum += i % 10;\n            i /= 10;\n        }\n        if(sum > 0)\n  \
    \      {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n   \
    \ assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L,\
    \ -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L])\
    \ == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L,\
    \ 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n\
    \    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpqlpb6i3w.d(38): unittest failure

    ----------------

    ??:? _d_unittestp [0x42831d]

    ??:? void tmpqlpb6i3w.__unittest_L33_C1() [0x427e3e]

    ??:? void tmpqlpb6i3w.__modtest() [0x4280a0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c32b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1be]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430351]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430800]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302dd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b195]

    ??:? runModuleUnitTests [0x42c101]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42876c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(i; arr)\n    {\n        int sum = 0;\n        foreach(j; i.digits)\n\
    \        {\n            sum += j;\n        }\n        if(sum > 0)\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n \
    \   alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L,\
    \ -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n\
    \    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L,\
    \ 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L,\
    \ -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L])\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpyhx6fgm3.d(17): Error: no property `digits` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyhx6fgm3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(i; arr)\n    {\n        if(i < 0)\n        {\n            i = -i;\n\
    \        }\n        long sum = 0;\n        while(i > 0)\n        {\n         \
    \   sum += i % 10;\n            i /= 10;\n        }\n        if(sum > 0)\n   \
    \     {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n   \
    \ assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L,\
    \ -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L])\
    \ == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L,\
    \ 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n\
    \    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp2b85e3cm.d(38): unittest failure

    ----------------

    ??:? _d_unittestp [0x42831d]

    ??:? void tmp2b85e3cm.__unittest_L33_C1() [0x427e3e]

    ??:? void tmp2b85e3cm.__modtest() [0x4280a0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c32b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1be]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430351]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430800]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302dd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b195]

    ??:? runModuleUnitTests [0x42c101]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42876c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(num; arr)\n    {\n        long sum = 0;\n        foreach(digit; num.digits)\n\
    \        {\n            sum += digit;\n        }\n        if(sum > 0)\n      \
    \  {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n   \
    \ assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L,\
    \ -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L])\
    \ == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L,\
    \ 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n\
    \    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7awdlgoh.d(17): Error: no property `digits` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7awdlgoh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(i; arr)\n    {\n        long sum = 0;\n        foreach(j; i.digits)\n\
    \        {\n            sum += j;\n        }\n        if(sum > 0)\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n \
    \   alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L,\
    \ -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n\
    \    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L,\
    \ 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L,\
    \ -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L])\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmr8z4h1q.d(17): Error: no property `digits` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmr8z4h1q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(e; arr)\n    {\n        if(e < 0)\n        {\n            e = -e;\n\
    \        }\n        long sum = 0;\n        while(e > 0)\n        {\n         \
    \   sum += e % 10;\n            e /= 10;\n        }\n        if(sum > 0)\n   \
    \     {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n   \
    \ assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L,\
    \ -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L])\
    \ == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L,\
    \ 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n\
    \    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmprpmd7b00.d(38): unittest failure

    ----------------

    ??:? _d_unittestp [0x42831d]

    ??:? void tmprpmd7b00.__unittest_L33_C1() [0x427e3e]

    ??:? void tmprpmd7b00.__modtest() [0x4280a0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c32b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1be]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430351]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430800]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302dd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b195]

    ??:? runModuleUnitTests [0x42c101]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42876c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(i; arr)\n    {\n        long sum = 0;\n        foreach(j; i.digits)\n\
    \        {\n            sum += j;\n        }\n        if(sum > 0)\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n \
    \   alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L,\
    \ -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n\
    \    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L,\
    \ 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L,\
    \ -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L])\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmr8z4h1q.d(17): Error: no property `digits` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmr8z4h1q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(i; arr)\n    {\n        long sum = 0;\n        foreach(d; i.digits)\n\
    \        {\n            sum += d;\n        }\n        if(sum > 0)\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n \
    \   alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L,\
    \ -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n\
    \    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L,\
    \ 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L,\
    \ -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L])\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmerm8xke.d(17): Error: no property `digits` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmerm8xke.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(i; arr)\n    {\n        long sum = 0;\n        foreach(j; i.digits)\n\
    \        {\n            sum += j;\n        }\n        if(sum > 0)\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n \
    \   alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L,\
    \ -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n\
    \    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L,\
    \ 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L,\
    \ -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L])\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmr8z4h1q.d(17): Error: no property `digits` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmr8z4h1q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(i; arr)\n    {\n        if(i < 0)\n        {\n            i = -i;\n\
    \        }\n        long sum = 0;\n        while(i > 0)\n        {\n         \
    \   sum += i % 10;\n            i /= 10;\n        }\n        if(sum > 0)\n   \
    \     {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n   \
    \ assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L,\
    \ -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L])\
    \ == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L,\
    \ 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n\
    \    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp2b85e3cm.d(38): unittest failure

    ----------------

    ??:? _d_unittestp [0x42831d]

    ??:? void tmp2b85e3cm.__unittest_L33_C1() [0x427e3e]

    ??:? void tmp2b85e3cm.__modtest() [0x4280a0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c32b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1be]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430351]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430800]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302dd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b195]

    ??:? runModuleUnitTests [0x42c101]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42876c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(i; arr)\n    {\n        long sum = 0;\n        long num = i;\n     \
    \   while(num != 0)\n        {\n            sum += num % 10;\n            num\
    \ /= 10;\n        }\n        if(sum > 0)\n            count++;\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = count_nums;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L,\
    \ 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L,\
    \ 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n\
    \    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L,\
    \ 1L]) == 1L);\n    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpbtlh1y7a.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x42830d]

    ??:? void tmpbtlh1y7a.__unittest_L28_C1() [0x427ff5]

    ??:? void tmpbtlh1y7a.__modtest() [0x428090]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c31b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1ae]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430341]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4307f0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302cd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b185]

    ??:? runModuleUnitTests [0x42c0f1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42875c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(e; arr)\n    {\n        long sum = 0;\n        foreach(d; e.digits)\n\
    \        {\n            sum += d;\n        }\n        if(sum > 0)\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n \
    \   alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L,\
    \ -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n\
    \    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L,\
    \ 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L,\
    \ -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L])\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8kmtkb1z.d(17): Error: no property `digits` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8kmtkb1z.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(i; arr)\n    {\n        long sum = 0;\n        foreach(j; i.digits)\n\
    \        {\n            sum += j;\n        }\n        if(sum > 0)\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n \
    \   alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L,\
    \ -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n\
    \    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L,\
    \ 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L,\
    \ -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L])\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmr8z4h1q.d(17): Error: no property `digits` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmr8z4h1q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(i; arr)\n    {\n        long sum = 0;\n        foreach(j; i.digits())\n\
    \        {\n            sum += j;\n        }\n        if(sum > 0)\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n \
    \   alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L,\
    \ -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n\
    \    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L,\
    \ 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L,\
    \ -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L])\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprxv7yidk.d(17): Error: no property `digits` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprxv7yidk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(i; arr)\n    {\n        long sum = 0;\n        foreach(j; i.digits)\n\
    \        {\n            sum += j;\n        }\n        if(sum > 0)\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n \
    \   alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L,\
    \ -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n\
    \    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L,\
    \ 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L,\
    \ -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L])\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmr8z4h1q.d(17): Error: no property `digits` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmr8z4h1q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(i; arr)\n    {\n        long sum = 0;\n        foreach(j; i.digits)\n\
    \        {\n            sum += j;\n        }\n        if(sum > 0)\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n \
    \   alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L,\
    \ -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n\
    \    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L,\
    \ 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L,\
    \ -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L])\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmr8z4h1q.d(17): Error: no property `digits` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmr8z4h1q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long result = 0;\n  \
    \  foreach(i; arr) \n    {\n        long sum = 0;\n        long num = i;\n   \
    \     while(num != 0) \n        {\n            sum += num % 10;\n            num\
    \ /= 10;\n        }\n        if(sum > 0) \n        {\n            result++;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_nums;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n\
    \    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L,\
    \ 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L,\
    \ 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) ==\
    \ 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L]) ==\
    \ 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp2ur_eh3g.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x42830d]

    ??:? void tmp2ur_eh3g.__unittest_L30_C1() [0x427ff5]

    ??:? void tmp2ur_eh3g.__modtest() [0x428090]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c31b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1ae]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430341]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4307f0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302cd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b185]

    ??:? runModuleUnitTests [0x42c0f1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42875c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(e; arr)\n    {\n        long sum = 0;\n        if(e < 0)\n        {\n\
    \            sum += abs(e % 10);\n            e /= 10;\n        }\n        while(e\
    \ != 0)\n        {\n            sum += e % 10;\n            e /= 10;\n       \
    \ }\n        if(sum > 0)\n            count++;\n    }\n    return count;\n}\n\
    unittest\n{\n    alias candidate = count_nums;\n\n    assert(candidate([]) ==\
    \ 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L,\
    \ 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L,\
    \ 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n\
    \    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L,\
    \ 1L]) == 1L);\n    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpnwc4e2d7.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x4283ad]

    ??:? void tmpnwc4e2d7.__unittest_L32_C1() [0x427eb2]

    ??:? void tmpnwc4e2d7.__modtest() [0x42812c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3bb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b24e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4303e1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430890]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43036d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b225]

    ??:? runModuleUnitTests [0x42c191]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287fc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(i; arr)\n    {\n        long sum = 0;\n        foreach(j; i.digits)\n\
    \        {\n            sum += j;\n        }\n        if(sum > 0)\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n \
    \   alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L,\
    \ -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n\
    \    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L,\
    \ 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L,\
    \ -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L])\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmr8z4h1q.d(17): Error: no property `digits` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmr8z4h1q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(i; arr)\n    {\n        long sum = 0;\n        foreach(j; i.digits)\n\
    \        {\n            sum += j;\n        }\n        if(sum > 0)\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n \
    \   alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L,\
    \ -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n\
    \    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L,\
    \ 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L,\
    \ -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L])\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmr8z4h1q.d(17): Error: no property `digits` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmr8z4h1q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(i; arr)\n    {\n        if(i < 0)\n        {\n            i = i * -1;\n\
    \        }\n        long sum = 0;\n        while(i > 0)\n        {\n         \
    \   sum += i % 10;\n            i /= 10;\n        }\n        if(sum > 0)\n   \
    \     {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n   \
    \ assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L,\
    \ -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L])\
    \ == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L,\
    \ 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n\
    \    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmphsu3jhc1.d(38): unittest failure

    ----------------

    ??:? _d_unittestp [0x42831d]

    ??:? void tmphsu3jhc1.__unittest_L33_C1() [0x427e3e]

    ??:? void tmphsu3jhc1.__modtest() [0x4280a0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c32b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1be]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430351]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430800]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302dd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b195]

    ??:? runModuleUnitTests [0x42c101]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42876c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(e; arr)\n    {\n        long sum = 0;\n        foreach(d; e.digits)\n\
    \        {\n            sum += d;\n        }\n        if(sum > 0)\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n \
    \   alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L,\
    \ -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n\
    \    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L,\
    \ 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L,\
    \ -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L])\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8kmtkb1z.d(17): Error: no property `digits` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8kmtkb1z.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(e; arr)\n    {\n        long sum = 0;\n        foreach(d; e.digits)\n\
    \        {\n            sum += d;\n        }\n        if(sum > 0)\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n \
    \   alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L,\
    \ -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n\
    \    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L,\
    \ 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L,\
    \ -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L])\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8kmtkb1z.d(17): Error: no property `digits` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8kmtkb1z.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(i; arr)\n    {\n        long sum = 0;\n        foreach(j; i.digits)\n\
    \        {\n            sum += j;\n        }\n        if(sum > 0)\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n \
    \   alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L,\
    \ -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n\
    \    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L,\
    \ 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L,\
    \ -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L])\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmr8z4h1q.d(17): Error: no property `digits` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmr8z4h1q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(e; arr)\n    {\n        long sum = 0;\n        long num = e;\n     \
    \   while(num != 0)\n        {\n            sum += abs(num % 10);\n          \
    \  num /= 10;\n        }\n        if(sum > 0)\n            count++;\n    }\n \
    \   return count;\n}\nunittest\n{\n    alias candidate = count_nums;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L,\
    \ 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L,\
    \ 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n\
    \    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L,\
    \ 1L]) == 1L);\n    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpb4auen9w.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x428385]

    ??:? void tmpb4auen9w.__unittest_L28_C1() [0x427e8a]

    ??:? void tmpb4auen9w.__modtest() [0x428104]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c393]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b226]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4303b9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430868]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430345]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1fd]

    ??:? runModuleUnitTests [0x42c169]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287d4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(e; arr)\n    {\n        long sum = 0;\n        long num = e;\n     \
    \   while(num != 0)\n        {\n            sum += abs(num % 10);\n          \
    \  num /= 10;\n        }\n        if(sum > 0)\n            count++;\n    }\n \
    \   return count;\n}\nunittest\n{\n    alias candidate = count_nums;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L,\
    \ 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L,\
    \ 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n\
    \    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L,\
    \ 1L]) == 1L);\n    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpb4auen9w.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x428385]

    ??:? void tmpb4auen9w.__unittest_L28_C1() [0x427e8a]

    ??:? void tmpb4auen9w.__modtest() [0x428104]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c393]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b226]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4303b9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430868]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430345]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1fd]

    ??:? runModuleUnitTests [0x42c169]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287d4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(i; arr)\n    {\n        long sum = 0;\n        foreach(j; i.digits)\n\
    \        {\n            sum += j;\n        }\n        if(sum > 0)\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n \
    \   alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L,\
    \ -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n\
    \    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L,\
    \ 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L,\
    \ -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L])\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmr8z4h1q.d(17): Error: no property `digits` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmr8z4h1q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(i; arr)\n    {\n        if(i < 0)\n        {\n            i = -i;\n\
    \        }\n        long sum = 0;\n        while(i > 0)\n        {\n         \
    \   sum += i % 10;\n            i /= 10;\n        }\n        if(sum > 0)\n   \
    \     {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n   \
    \ assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L,\
    \ -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L])\
    \ == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L,\
    \ 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n\
    \    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp2b85e3cm.d(38): unittest failure

    ----------------

    ??:? _d_unittestp [0x42831d]

    ??:? void tmp2b85e3cm.__unittest_L33_C1() [0x427e3e]

    ??:? void tmp2b85e3cm.__modtest() [0x4280a0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c32b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1be]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430351]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430800]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302dd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b195]

    ??:? runModuleUnitTests [0x42c101]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42876c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(e; arr)\n    {\n        if(e < 0)\n        {\n            e = -e;\n\
    \        }\n        long sum = 0;\n        while(e > 0)\n        {\n         \
    \   sum += e % 10;\n            e /= 10;\n        }\n        if(sum > 0)\n   \
    \     {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n   \
    \ assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L,\
    \ -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L])\
    \ == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L,\
    \ 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n\
    \    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmprpmd7b00.d(38): unittest failure

    ----------------

    ??:? _d_unittestp [0x42831d]

    ??:? void tmprpmd7b00.__unittest_L33_C1() [0x427e3e]

    ??:? void tmprpmd7b00.__modtest() [0x4280a0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c32b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1be]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430351]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430800]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302dd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b195]

    ??:? runModuleUnitTests [0x42c101]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42876c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(long num; arr) \n    {\n        long sum = 0;\n        foreach(long\
    \ digit; num.digits) \n        {\n            sum += abs(digit);\n        }\n\
    \        if(sum > 0) \n        {\n            count++;\n        }\n    }\n   \
    \ return count;\n}\nunittest\n{\n    alias candidate = count_nums;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L,\
    \ 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L,\
    \ 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n\
    \    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L,\
    \ 1L]) == 1L);\n    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7cxm70rt.d(17): Error: no property `digits` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7cxm70rt.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(i; arr)\n    {\n        long sum = 0;\n        foreach(j; i.to!string)\n\
    \        {\n            if(j.isDigit)\n            {\n                sum += j.to!long;\n\
    \            }\n        }\n        if(sum > 0)\n        {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_nums;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n\
    \    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L,\
    \ 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L,\
    \ 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) ==\
    \ 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L]) ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpoco256eu.d(17): Error: no property `to` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoco256eu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(e; arr)\n    {\n        long sum = 0;\n        foreach(d; e.digits)\n\
    \        {\n            sum += d;\n        }\n        if(sum > 0)\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n \
    \   alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L,\
    \ -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n\
    \    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L,\
    \ 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L,\
    \ -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L])\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8kmtkb1z.d(17): Error: no property `digits` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8kmtkb1z.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(i; arr)\n    {\n        if(i < 0)\n        {\n            if(i % 10\
    \ != 0)\n            {\n                count++;\n            }\n        }\n \
    \       else\n        {\n            if(i % 10 != 0)\n            {\n        \
    \        count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n   \
    \ assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L,\
    \ -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L])\
    \ == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L,\
    \ 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n\
    \    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpc8x5e2ds.d(38): unittest failure

    ----------------

    ??:? _d_unittestp [0x428305]

    ??:? void tmpc8x5e2ds.__unittest_L33_C1() [0x427e26]

    ??:? void tmpc8x5e2ds.__modtest() [0x428088]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c313]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1a6]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430339]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4307e8]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302c5]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b17d]

    ??:? runModuleUnitTests [0x42c0e9]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428754]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(e; arr)\n    {\n        long sum = 0;\n        foreach(d; e.digits)\n\
    \        {\n            sum += abs(d);\n        }\n        if(sum > 0)\n     \
    \   {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n   \
    \ assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L,\
    \ -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L])\
    \ == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L,\
    \ 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n\
    \    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpclvbda9w.d(17): Error: no property `digits` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpclvbda9w.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(i; arr)\n    {\n        long sum = 0;\n        foreach(j; i.digits)\n\
    \        {\n            sum += j;\n        }\n        if(sum > 0)\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n \
    \   alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L,\
    \ -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n\
    \    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L,\
    \ 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L,\
    \ -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L])\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmr8z4h1q.d(17): Error: no property `digits` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmr8z4h1q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(e; arr)\n    {\n        if(e < 0)\n        {\n            e = -e;\n\
    \        }\n        long sum = 0;\n        while(e > 0)\n        {\n         \
    \   sum += e % 10;\n            e /= 10;\n        }\n        if(sum > 0)\n   \
    \     {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n   \
    \ assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L,\
    \ -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L])\
    \ == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L,\
    \ 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n\
    \    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmprpmd7b00.d(38): unittest failure

    ----------------

    ??:? _d_unittestp [0x42831d]

    ??:? void tmprpmd7b00.__unittest_L33_C1() [0x427e3e]

    ??:? void tmprpmd7b00.__modtest() [0x4280a0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c32b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1be]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430351]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430800]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302dd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b195]

    ??:? runModuleUnitTests [0x42c101]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42876c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(e; arr)\n    {\n        long sum = 0;\n        long num = e;\n     \
    \   while(num != 0)\n        {\n            sum += abs(num % 10);\n          \
    \  num /= 10;\n        }\n        if(sum > 0)\n            count++;\n    }\n \
    \   return count;\n}\nunittest\n{\n    alias candidate = count_nums;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L,\
    \ 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L,\
    \ 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n\
    \    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L,\
    \ 1L]) == 1L);\n    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpb4auen9w.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x428385]

    ??:? void tmpb4auen9w.__unittest_L28_C1() [0x427e8a]

    ??:? void tmpb4auen9w.__modtest() [0x428104]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c393]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b226]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4303b9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430868]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430345]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1fd]

    ??:? runModuleUnitTests [0x42c169]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287d4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(i; arr)\n    {\n        if(abs(i) > 9)\n        {\n            long\
    \ sum = 0;\n            while(i != 0)\n            {\n                sum += abs(i\
    \ % 10);\n                i /= 10;\n            }\n            if(sum > 0)\n \
    \               count++;\n        }\n        else if(abs(i) > 0)\n           \
    \ count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_nums;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n\
    \    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L,\
    \ 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L,\
    \ 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) ==\
    \ 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L]) ==\
    \ 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpzggjjc4v.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x4283ad]

    ??:? void tmpzggjjc4v.__unittest_L32_C1() [0x427eb2]

    ??:? void tmpzggjjc4v.__modtest() [0x42812c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3bb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b24e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4303e1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430890]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43036d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b225]

    ??:? runModuleUnitTests [0x42c191]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287fc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(num; arr)\n    {\n        long sum = 0;\n        foreach(digit; num.digits)\n\
    \        {\n            sum += digit;\n        }\n        if(sum > 0)\n      \
    \  {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n   \
    \ assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L,\
    \ -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L])\
    \ == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L,\
    \ 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n\
    \    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7awdlgoh.d(17): Error: no property `digits` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7awdlgoh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(i; arr)\n    {\n        long sum = 0;\n        foreach(j; i.digits)\n\
    \        {\n            sum += j;\n        }\n        if(sum > 0)\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n \
    \   alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L,\
    \ -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n\
    \    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L,\
    \ 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L,\
    \ -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L])\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmr8z4h1q.d(17): Error: no property `digits` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmr8z4h1q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(e; arr)\n    {\n        long sum = 0;\n        long num = e;\n     \
    \   if(num < 0)\n        {\n            num = -num;\n        }\n        while(num\
    \ > 0)\n        {\n            sum += num % 10;\n            num /= 10;\n    \
    \    }\n        if(sum > 0)\n        {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nunittest\n{\n    alias candidate = count_nums;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L,\
    \ 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L,\
    \ 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n\
    \    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L,\
    \ 1L]) == 1L);\n    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp7r6vyixb.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x42831d]

    ??:? void tmp7r6vyixb.__unittest_L34_C1() [0x427e3a]

    ??:? void tmp7r6vyixb.__modtest() [0x42809c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c32b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1be]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430351]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430800]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302dd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b195]

    ??:? runModuleUnitTests [0x42c101]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42876c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(i; arr)\n    {\n        if(i < 0)\n        {\n            i = -i;\n\
    \        }\n        long sum = 0;\n        while(i > 0)\n        {\n         \
    \   sum += i % 10;\n            i /= 10;\n        }\n        if(sum > 0)\n   \
    \     {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n   \
    \ assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L,\
    \ -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L])\
    \ == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L,\
    \ 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n\
    \    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp2b85e3cm.d(38): unittest failure

    ----------------

    ??:? _d_unittestp [0x42831d]

    ??:? void tmp2b85e3cm.__unittest_L33_C1() [0x427e3e]

    ??:? void tmp2b85e3cm.__modtest() [0x4280a0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c32b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1be]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430351]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430800]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302dd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b195]

    ??:? runModuleUnitTests [0x42c101]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42876c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(num; arr)\n    {\n        long sum = 0;\n        foreach(digit; num.digits)\n\
    \        {\n            sum += digit;\n        }\n        if(sum > 0)\n      \
    \  {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n   \
    \ assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L,\
    \ -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L])\
    \ == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L,\
    \ 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n\
    \    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7awdlgoh.d(17): Error: no property `digits` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7awdlgoh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(e; arr)\n    {\n        long sum = 0;\n        long tmp = e;\n     \
    \   if(e < 0)\n        {\n            tmp = -e;\n        }\n        while(tmp\
    \ != 0)\n        {\n            sum += tmp % 10;\n            tmp /= 10;\n   \
    \     }\n        if(sum > 0)\n        {\n            count++;\n        }\n   \
    \ }\n    return count;\n}\nunittest\n{\n    alias candidate = count_nums;\n\n\
    \    assert(candidate([]) == 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n\
    \    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L,\
    \ 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L,\
    \ 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) ==\
    \ 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L]) ==\
    \ 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpe8sumnrj.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x42831d]

    ??:? void tmpe8sumnrj.__unittest_L34_C1() [0x427e3e]

    ??:? void tmpe8sumnrj.__modtest() [0x4280a0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c32b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1be]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430351]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430800]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302dd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b195]

    ??:? runModuleUnitTests [0x42c101]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42876c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(i; arr)\n    {\n        long sum = 0;\n        foreach(j; i.digits)\n\
    \        {\n            sum += j;\n        }\n        if(sum > 0)\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n \
    \   alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L,\
    \ -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n\
    \    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L,\
    \ 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L,\
    \ -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L])\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmr8z4h1q.d(17): Error: no property `digits` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmr8z4h1q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(i; arr)\n    {\n        long sum = 0;\n        foreach(j; i.digits)\n\
    \        {\n            sum += j;\n        }\n        if(sum > 0)\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n \
    \   alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L,\
    \ -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n\
    \    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L,\
    \ 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L,\
    \ -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L])\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmr8z4h1q.d(17): Error: no property `digits` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmr8z4h1q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(i; arr)\n    {\n        long sum = 0;\n        foreach(j; i.digits)\n\
    \        {\n            sum += j;\n        }\n        if(sum > 0)\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n \
    \   alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L,\
    \ -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n\
    \    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L,\
    \ 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L,\
    \ -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L])\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmr8z4h1q.d(17): Error: no property `digits` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmr8z4h1q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(e; arr)\n    {\n        long sum = 0;\n        long num = e;\n     \
    \   if(num < 0)\n        {\n            num = -num;\n        }\n        while(num\
    \ > 0)\n        {\n            sum += num % 10;\n            num /= 10;\n    \
    \    }\n        if(sum > 0)\n        {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nunittest\n{\n    alias candidate = count_nums;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L,\
    \ 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L,\
    \ 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n\
    \    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L,\
    \ 1L]) == 1L);\n    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp7r6vyixb.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x42831d]

    ??:? void tmp7r6vyixb.__unittest_L34_C1() [0x427e3a]

    ??:? void tmp7r6vyixb.__modtest() [0x42809c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c32b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1be]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430351]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430800]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302dd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b195]

    ??:? runModuleUnitTests [0x42c101]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42876c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(i; arr)\n    {\n        long sum = 0;\n        foreach(j; i.digits)\n\
    \        {\n            sum += j;\n        }\n        if(sum > 0)\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n \
    \   alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L,\
    \ -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n\
    \    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L,\
    \ 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L,\
    \ -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L])\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmr8z4h1q.d(17): Error: no property `digits` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmr8z4h1q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(e; arr)\n    {\n        long sum = 0;\n        long num = abs(e);\n\
    \        while(num > 0)\n        {\n            sum += num % 10;\n           \
    \ num /= 10;\n        }\n        if(sum > 0)\n            count++;\n    }\n  \
    \  return count;\n}\nunittest\n{\n    alias candidate = count_nums;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L,\
    \ 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L,\
    \ 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n\
    \    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L,\
    \ 1L]) == 1L);\n    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpu_tvwdyk.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x42837d]

    ??:? void tmpu_tvwdyk.__unittest_L28_C1() [0x427e86]

    ??:? void tmpu_tvwdyk.__modtest() [0x428100]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c38b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b21e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4303b1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430860]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43033d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1f5]

    ??:? runModuleUnitTests [0x42c161]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287cc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(e; arr)\n    {\n        long sum = 0;\n        foreach(d; e.digits)\n\
    \        {\n            sum += d;\n        }\n        if(sum > 0)\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n \
    \   alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L,\
    \ -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n\
    \    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L,\
    \ 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L,\
    \ -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L])\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8kmtkb1z.d(17): Error: no property `digits` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8kmtkb1z.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(e; arr)\n    {\n        long sum = 0;\n        foreach(d; e.digits)\n\
    \        {\n            sum += d;\n        }\n        if(sum > 0)\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n \
    \   alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L,\
    \ -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n\
    \    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L,\
    \ 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L,\
    \ -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L])\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8kmtkb1z.d(17): Error: no property `digits` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8kmtkb1z.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(e; arr)\n    {\n        long sum = 0;\n        foreach(d; e.digits)\n\
    \        {\n            sum += d;\n        }\n        if(sum > 0)\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n \
    \   alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L,\
    \ -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n\
    \    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L,\
    \ 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L,\
    \ -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L])\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8kmtkb1z.d(17): Error: no property `digits` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8kmtkb1z.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(i; arr)\n    {\n        long sum = 0;\n        foreach(j; i.digits)\n\
    \        {\n            sum += j;\n        }\n        if(sum > 0)\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n \
    \   alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L,\
    \ -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n\
    \    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L,\
    \ 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L,\
    \ -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L])\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmr8z4h1q.d(17): Error: no property `digits` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmr8z4h1q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(i; arr)\n    {\n        if(i < 0)\n        {\n            i = -i;\n\
    \        }\n        long sum = 0;\n        while(i > 0)\n        {\n         \
    \   sum += i % 10;\n            i /= 10;\n        }\n        if(sum > 0)\n   \
    \     {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n   \
    \ assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L,\
    \ -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L])\
    \ == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L,\
    \ 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n\
    \    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp2b85e3cm.d(38): unittest failure

    ----------------

    ??:? _d_unittestp [0x42831d]

    ??:? void tmp2b85e3cm.__unittest_L33_C1() [0x427e3e]

    ??:? void tmp2b85e3cm.__modtest() [0x4280a0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c32b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1be]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430351]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430800]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302dd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b195]

    ??:? runModuleUnitTests [0x42c101]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42876c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(e; arr)\n    {\n        long sum = 0;\n        long num = e;\n     \
    \   if(num < 0)\n        {\n            num = -num;\n        }\n        while(num\
    \ > 0)\n        {\n            sum += num % 10;\n            num /= 10;\n    \
    \    }\n        if(sum > 0)\n        {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nunittest\n{\n    alias candidate = count_nums;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L,\
    \ 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L,\
    \ 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n\
    \    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L,\
    \ 1L]) == 1L);\n    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp7r6vyixb.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x42831d]

    ??:? void tmp7r6vyixb.__unittest_L34_C1() [0x427e3a]

    ??:? void tmp7r6vyixb.__modtest() [0x42809c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c32b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1be]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430351]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430800]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302dd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b195]

    ??:? runModuleUnitTests [0x42c101]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42876c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(e; arr)\n    {\n        long sum = 0;\n        long num = e;\n     \
    \   if(num < 0)\n        {\n            num = -num;\n        }\n        while(num\
    \ > 0)\n        {\n            sum += num % 10;\n            num /= 10;\n    \
    \    }\n        if(sum > 0)\n        {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nunittest\n{\n    alias candidate = count_nums;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L,\
    \ 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L,\
    \ 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n\
    \    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L,\
    \ 1L]) == 1L);\n    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp7r6vyixb.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x42831d]

    ??:? void tmp7r6vyixb.__unittest_L34_C1() [0x427e3a]

    ??:? void tmp7r6vyixb.__modtest() [0x42809c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c32b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1be]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430351]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430800]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302dd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b195]

    ??:? runModuleUnitTests [0x42c101]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42876c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(i; arr)\n    {\n        if(i < 0)\n        {\n            i = -i;\n\
    \        }\n        long sum = 0;\n        while(i > 0)\n        {\n         \
    \   sum += i % 10;\n            i /= 10;\n        }\n        if(sum > 0)\n   \
    \     {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n   \
    \ assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L,\
    \ -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L])\
    \ == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L,\
    \ 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n\
    \    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp2b85e3cm.d(38): unittest failure

    ----------------

    ??:? _d_unittestp [0x42831d]

    ??:? void tmp2b85e3cm.__unittest_L33_C1() [0x427e3e]

    ??:? void tmp2b85e3cm.__modtest() [0x4280a0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c32b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1be]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430351]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430800]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302dd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b195]

    ??:? runModuleUnitTests [0x42c101]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42876c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(i; arr)\n    {\n        long sum = 0;\n        foreach(j; i.to!string)\n\
    \        {\n            if(j.isDigit)\n            {\n                sum += j.to!long;\n\
    \            }\n        }\n        if(sum > 0)\n        {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_nums;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n\
    \    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L,\
    \ 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L,\
    \ 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) ==\
    \ 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L]) ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpoco256eu.d(17): Error: no property `to` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoco256eu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(e; arr)\n    {\n        long sum = 0;\n        foreach(d; e.digits)\n\
    \        {\n            sum += d;\n        }\n        if(sum > 0)\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n \
    \   alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L,\
    \ -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n\
    \    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L,\
    \ 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L,\
    \ -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L])\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8kmtkb1z.d(17): Error: no property `digits` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8kmtkb1z.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(i; arr)\n    {\n        long sum = 0;\n        long num = i;\n     \
    \   if(num < 0)\n        {\n            num = -num;\n        }\n        while(num\
    \ > 0)\n        {\n            sum += num % 10;\n            num /= 10;\n    \
    \    }\n        if(sum > 0)\n        {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nunittest\n{\n    alias candidate = count_nums;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L,\
    \ 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L,\
    \ 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n\
    \    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L,\
    \ 1L]) == 1L);\n    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpolmsrs79.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x42831d]

    ??:? void tmpolmsrs79.__unittest_L34_C1() [0x427e3a]

    ??:? void tmpolmsrs79.__modtest() [0x42809c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c32b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1be]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430351]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430800]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302dd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b195]

    ??:? runModuleUnitTests [0x42c101]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42876c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(e; arr)\n    {\n        long sum = 0;\n        long num = e;\n     \
    \   while(num != 0)\n        {\n            sum += num % 10;\n            num\
    \ /= 10;\n        }\n        if(sum > 0)\n            count++;\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = count_nums;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L,\
    \ 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L,\
    \ 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n\
    \    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L,\
    \ 1L]) == 1L);\n    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpcbwyvsn4.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x42830d]

    ??:? void tmpcbwyvsn4.__unittest_L28_C1() [0x427ff5]

    ??:? void tmpcbwyvsn4.__modtest() [0x428090]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c31b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1ae]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430341]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4307f0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302cd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b185]

    ??:? runModuleUnitTests [0x42c0f1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42875c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(num; arr)\n    {\n        long sum = 0;\n        if(num < 0)\n     \
    \   {\n            num = -num;\n            sum += num % 10;\n            num\
    \ /= 10;\n        }\n        while(num > 0)\n        {\n            sum += num\
    \ % 10;\n            num /= 10;\n        }\n        if(sum > 0)\n            count++;\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_nums;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n\
    \    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L,\
    \ 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L,\
    \ 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) ==\
    \ 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L]) ==\
    \ 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpjse_laiw.d(38): unittest failure

    ----------------

    ??:? _d_unittestp [0x42833d]

    ??:? void tmpjse_laiw.__unittest_L33_C1() [0x427e5e]

    ??:? void tmpjse_laiw.__modtest() [0x4280c0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430820]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1b5]

    ??:? runModuleUnitTests [0x42c121]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42878c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(i; arr)\n    {\n        long sum = 0;\n        foreach(j; i.digits)\n\
    \        {\n            sum += j;\n        }\n        if(sum > 0)\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n \
    \   alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L,\
    \ -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n\
    \    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L,\
    \ 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L,\
    \ -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L])\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmr8z4h1q.d(17): Error: no property `digits` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmr8z4h1q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(i; arr)\n    {\n        long sum = 0;\n        foreach(j; i.to!string)\n\
    \        {\n            if(j.isDigit)\n            {\n                sum += j.to!long;\n\
    \            }\n        }\n        if(sum > 0)\n        {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_nums;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n\
    \    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L,\
    \ 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L,\
    \ 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) ==\
    \ 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L]) ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpoco256eu.d(17): Error: no property `to` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoco256eu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(i; arr)\n    {\n        long sum = 0;\n        foreach(j; i.to!string)\n\
    \        {\n            if(j.isDigit)\n            {\n                sum += j.to!long;\n\
    \            }\n        }\n        if(sum > 0)\n        {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_nums;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n\
    \    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L,\
    \ 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L,\
    \ 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) ==\
    \ 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L]) ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpoco256eu.d(17): Error: no property `to` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoco256eu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(i; arr)\n    {\n        long sum = 0;\n        foreach(j; i.digits)\n\
    \        {\n            sum += j;\n        }\n        if(sum > 0)\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n \
    \   alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L,\
    \ -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n\
    \    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L,\
    \ 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L,\
    \ -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L])\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmr8z4h1q.d(17): Error: no property `digits` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmr8z4h1q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(e; arr)\n    {\n        long sum = 0;\n        if(e < 0)\n        {\n\
    \            sum += abs(e % 10);\n            e = abs(e / 10);\n        }\n  \
    \      while(e > 0)\n        {\n            sum += e % 10;\n            e /= 10;\n\
    \        }\n        if(sum > 0)\n            count++;\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = count_nums;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L,\
    \ 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L,\
    \ 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n\
    \    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L,\
    \ 1L]) == 1L);\n    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpdfl6p96m.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x4283b5]

    ??:? void tmpdfl6p96m.__unittest_L32_C1() [0x427eba]

    ??:? void tmpdfl6p96m.__modtest() [0x428134]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3c3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b256]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4303e9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430898]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430375]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b22d]

    ??:? runModuleUnitTests [0x42c199]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x428804]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(i; arr)\n    {\n        long sum = 0;\n        foreach(j; i.digits)\n\
    \        {\n            sum += j;\n        }\n        if(sum > 0)\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n \
    \   alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L,\
    \ -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n\
    \    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L,\
    \ 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L,\
    \ -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L])\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmr8z4h1q.d(17): Error: no property `digits` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmr8z4h1q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(e; arr)\n    {\n        long sum = 0;\n        foreach(d; e.digits)\n\
    \        {\n            sum += d;\n        }\n        if(sum > 0)\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n \
    \   alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L,\
    \ -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n\
    \    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L,\
    \ 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L,\
    \ -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L])\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8kmtkb1z.d(17): Error: no property `digits` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8kmtkb1z.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(i; arr)\n    {\n        long sum = 0;\n        long num = i;\n     \
    \   while(num != 0)\n        {\n            sum += num % 10;\n            num\
    \ /= 10;\n        }\n        if(sum > 0)\n            count++;\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = count_nums;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L,\
    \ 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L,\
    \ 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n\
    \    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L,\
    \ 1L]) == 1L);\n    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpbtlh1y7a.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x42830d]

    ??:? void tmpbtlh1y7a.__unittest_L28_C1() [0x427ff5]

    ??:? void tmpbtlh1y7a.__modtest() [0x428090]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c31b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1ae]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430341]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4307f0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302cd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b185]

    ??:? runModuleUnitTests [0x42c0f1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42875c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(i; arr)\n    {\n        long sum = 0;\n        foreach(j; i.digits)\n\
    \        {\n            sum += j;\n        }\n        if(sum > 0)\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n \
    \   alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L,\
    \ -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n\
    \    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L,\
    \ 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L,\
    \ -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L])\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmr8z4h1q.d(17): Error: no property `digits` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmr8z4h1q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(i; arr)\n    {\n        if(i < 0)\n        {\n            i = -i;\n\
    \        }\n        long sum = 0;\n        while(i > 0)\n        {\n         \
    \   sum += i % 10;\n            i /= 10;\n        }\n        if(sum > 0)\n   \
    \     {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n   \
    \ assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L,\
    \ -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L])\
    \ == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L,\
    \ 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n\
    \    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp2b85e3cm.d(38): unittest failure

    ----------------

    ??:? _d_unittestp [0x42831d]

    ??:? void tmp2b85e3cm.__unittest_L33_C1() [0x427e3e]

    ??:? void tmp2b85e3cm.__modtest() [0x4280a0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c32b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1be]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430351]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430800]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302dd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b195]

    ??:? runModuleUnitTests [0x42c101]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42876c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(e; arr)\n    {\n        long sum = 0;\n        long num = abs(e);\n\
    \        while(num > 0)\n        {\n            sum += num % 10;\n           \
    \ num /= 10;\n        }\n        if(sum > 0)\n            count++;\n    }\n  \
    \  return count;\n}\nunittest\n{\n    alias candidate = count_nums;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L,\
    \ 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L,\
    \ 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n\
    \    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L,\
    \ 1L]) == 1L);\n    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpu_tvwdyk.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x42837d]

    ??:? void tmpu_tvwdyk.__unittest_L28_C1() [0x427e86]

    ??:? void tmpu_tvwdyk.__modtest() [0x428100]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c38b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b21e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4303b1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430860]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43033d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1f5]

    ??:? runModuleUnitTests [0x42c161]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287cc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(i; arr)\n    {\n        if(i < 0)\n        {\n            i = -i;\n\
    \        }\n        long sum = 0;\n        while(i > 0)\n        {\n         \
    \   sum += i % 10;\n            i /= 10;\n        }\n        if(sum > 0)\n   \
    \     {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n   \
    \ assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L,\
    \ -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L])\
    \ == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L,\
    \ 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n\
    \    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp2b85e3cm.d(38): unittest failure

    ----------------

    ??:? _d_unittestp [0x42831d]

    ??:? void tmp2b85e3cm.__unittest_L33_C1() [0x427e3e]

    ??:? void tmp2b85e3cm.__modtest() [0x4280a0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c32b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1be]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430351]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430800]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302dd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b195]

    ??:? runModuleUnitTests [0x42c101]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42876c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(num; arr)\n    {\n        long sum = 0;\n        foreach(digit; num.digits)\n\
    \        {\n            sum += digit;\n        }\n        if(sum > 0)\n      \
    \  {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n   \
    \ assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L,\
    \ -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L])\
    \ == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L,\
    \ 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n\
    \    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7awdlgoh.d(17): Error: no property `digits` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7awdlgoh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(i; arr)\n    {\n        long sum = 0;\n        foreach(j; i.digits)\n\
    \        {\n            sum += j;\n        }\n        if(sum > 0)\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n \
    \   alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L,\
    \ -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n\
    \    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L,\
    \ 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L,\
    \ -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L])\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmr8z4h1q.d(17): Error: no property `digits` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmr8z4h1q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(i;arr)\n    {\n        long sum = 0;\n        if(i < 0)\n        {\n\
    \            i = -i;\n            sum += i % 10;\n            i /= 10;\n     \
    \   }\n        while(i > 0)\n        {\n            sum += i % 10;\n         \
    \   i /= 10;\n        }\n        if(sum > 0)\n            count++;\n    }\n  \
    \  return count;\n}\nunittest\n{\n    alias candidate = count_nums;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L,\
    \ 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L,\
    \ 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n\
    \    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L,\
    \ 1L]) == 1L);\n    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpxigecqzx.d(38): unittest failure

    ----------------

    ??:? _d_unittestp [0x42833d]

    ??:? void tmpxigecqzx.__unittest_L33_C1() [0x427e5e]

    ??:? void tmpxigecqzx.__modtest() [0x4280c0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430820]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1b5]

    ??:? runModuleUnitTests [0x42c121]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42878c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(i; arr)\n    {\n        long sum = 0;\n        foreach(j; i.digits)\n\
    \        {\n            sum += j;\n        }\n        if(sum > 0)\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n \
    \   alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L,\
    \ -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n\
    \    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L,\
    \ 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L,\
    \ -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L])\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmr8z4h1q.d(17): Error: no property `digits` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmr8z4h1q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(i; arr)\n    {\n        long sum = 0;\n        foreach(j; i.digits)\n\
    \        {\n            sum += j;\n        }\n        if(sum > 0)\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n \
    \   alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L,\
    \ -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n\
    \    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L,\
    \ 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L,\
    \ -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L])\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmr8z4h1q.d(17): Error: no property `digits` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmr8z4h1q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(i; arr)\n    {\n        long sum = 0;\n        long num = i;\n     \
    \   while(num != 0)\n        {\n            sum += abs(num % 10);\n          \
    \  num /= 10;\n        }\n        if(sum > 0)\n            count++;\n    }\n \
    \   return count;\n}\nunittest\n{\n    alias candidate = count_nums;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L,\
    \ 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L,\
    \ 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n\
    \    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L,\
    \ 1L]) == 1L);\n    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpetj9vgz9.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x428385]

    ??:? void tmpetj9vgz9.__unittest_L28_C1() [0x427e8a]

    ??:? void tmpetj9vgz9.__modtest() [0x428104]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c393]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b226]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4303b9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430868]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430345]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1fd]

    ??:? runModuleUnitTests [0x42c169]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287d4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(i; arr) \n    {\n        long sum = 0;\n        foreach(j; i.digits)\
    \ \n        {\n            sum += j;\n        }\n        if(sum > 0) \n      \
    \  {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n   \
    \ assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L,\
    \ -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L])\
    \ == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L,\
    \ 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n\
    \    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpf33nod8o.d(17): Error: no property `digits` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf33nod8o.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(i; arr)\n    {\n        long sum = 0;\n        long num = i;\n     \
    \   while(num != 0)\n        {\n            sum += abs(num % 10);\n          \
    \  num /= 10;\n        }\n        if(sum > 0)\n            count++;\n    }\n \
    \   return count;\n}\nunittest\n{\n    alias candidate = count_nums;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L,\
    \ 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L,\
    \ 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n\
    \    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L,\
    \ 1L]) == 1L);\n    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpetj9vgz9.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x428385]

    ??:? void tmpetj9vgz9.__unittest_L28_C1() [0x427e8a]

    ??:? void tmpetj9vgz9.__modtest() [0x428104]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c393]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b226]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4303b9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430868]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430345]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1fd]

    ??:? runModuleUnitTests [0x42c169]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287d4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(e; arr)\n    {\n        long sum = 0;\n        long num = e;\n     \
    \   if(num < 0)\n        {\n            num = -num;\n        }\n        while(num\
    \ > 0)\n        {\n            sum += num % 10;\n            num /= 10;\n    \
    \    }\n        if(sum > 0)\n        {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nunittest\n{\n    alias candidate = count_nums;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L,\
    \ 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L,\
    \ 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n\
    \    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L,\
    \ 1L]) == 1L);\n    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp7r6vyixb.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x42831d]

    ??:? void tmp7r6vyixb.__unittest_L34_C1() [0x427e3a]

    ??:? void tmp7r6vyixb.__modtest() [0x42809c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c32b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1be]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430351]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430800]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302dd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b195]

    ??:? runModuleUnitTests [0x42c101]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42876c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(i; arr)\n    {\n        long sum = 0;\n        long num = i;\n     \
    \   while(num != 0)\n        {\n            sum += abs(num % 10);\n          \
    \  num /= 10;\n        }\n        if(sum > 0)\n            count++;\n    }\n \
    \   return count;\n}\nunittest\n{\n    alias candidate = count_nums;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L,\
    \ 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L,\
    \ 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n\
    \    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L,\
    \ 1L]) == 1L);\n    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpetj9vgz9.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x428385]

    ??:? void tmpetj9vgz9.__unittest_L28_C1() [0x427e8a]

    ??:? void tmpetj9vgz9.__modtest() [0x428104]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c393]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b226]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4303b9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430868]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430345]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1fd]

    ??:? runModuleUnitTests [0x42c169]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287d4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(e; arr)\n    {\n        if(e < 0)\n        {\n            e = -e;\n\
    \        }\n        long sum = 0;\n        while(e > 0)\n        {\n         \
    \   sum += e % 10;\n            e /= 10;\n        }\n        if(sum > 0)\n   \
    \     {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n   \
    \ assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L,\
    \ -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L])\
    \ == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L,\
    \ 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n\
    \    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmprpmd7b00.d(38): unittest failure

    ----------------

    ??:? _d_unittestp [0x42831d]

    ??:? void tmprpmd7b00.__unittest_L33_C1() [0x427e3e]

    ??:? void tmprpmd7b00.__modtest() [0x4280a0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c32b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1be]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430351]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430800]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302dd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b195]

    ??:? runModuleUnitTests [0x42c101]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42876c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(e; arr)\n    {\n        long sum = 0;\n        foreach(d; e.digits)\n\
    \        {\n            sum += d;\n        }\n        if(sum > 0)\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n \
    \   alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L,\
    \ -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n\
    \    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L,\
    \ 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L,\
    \ -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L])\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8kmtkb1z.d(17): Error: no property `digits` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8kmtkb1z.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(i; arr)\n    {\n        long sum = 0;\n        long num = i;\n     \
    \   if(num < 0)\n        {\n            num = -num;\n        }\n        while(num\
    \ > 0)\n        {\n            sum += num % 10;\n            num /= 10;\n    \
    \    }\n        if(sum > 0)\n        {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nunittest\n{\n    alias candidate = count_nums;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L,\
    \ 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L,\
    \ 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n\
    \    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L,\
    \ 1L]) == 1L);\n    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpolmsrs79.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x42831d]

    ??:? void tmpolmsrs79.__unittest_L34_C1() [0x427e3a]

    ??:? void tmpolmsrs79.__modtest() [0x42809c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c32b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1be]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430351]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430800]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302dd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b195]

    ??:? runModuleUnitTests [0x42c101]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42876c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(i; arr)\n    {\n        long sum = 0;\n        foreach(j; i.digits)\n\
    \        {\n            sum += j;\n        }\n        if(sum > 0)\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n \
    \   alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L,\
    \ -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n\
    \    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L,\
    \ 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L,\
    \ -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L])\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmr8z4h1q.d(17): Error: no property `digits` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmr8z4h1q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(i; arr)\n    {\n        long sum = 0;\n        foreach(j; i.digits)\n\
    \        {\n            sum += j;\n        }\n        if(sum > 0)\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n \
    \   alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L,\
    \ -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n\
    \    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L,\
    \ 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L,\
    \ -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L])\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmr8z4h1q.d(17): Error: no property `digits` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmr8z4h1q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(e; arr)\n    {\n        long sum = 0;\n        foreach(c; to!string(e))\n\
    \        {\n            if(c.isDigit)\n            {\n                sum += c.to!long\
    \ - '0'.to!long;\n            }\n        }\n        if(sum > 0)\n        {\n \
    \           count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n  \
    \  alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L,\
    \ -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n\
    \    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L,\
    \ 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L,\
    \ -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L])\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6v7p3ep1.d(17): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6v7p3ep1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(e; arr) \n    {\n        if(e < 0) \n        {\n            e = -e;\n\
    \        }\n        long sum = 0;\n        while(e > 0) \n        {\n        \
    \    sum += e % 10;\n            e /= 10;\n        }\n        if(sum > 0) \n \
    \       {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n   \
    \ assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L,\
    \ -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L])\
    \ == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L,\
    \ 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n\
    \    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp61wqc61u.d(38): unittest failure

    ----------------

    ??:? _d_unittestp [0x42831d]

    ??:? void tmp61wqc61u.__unittest_L33_C1() [0x427e3e]

    ??:? void tmp61wqc61u.__modtest() [0x4280a0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c32b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1be]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430351]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430800]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302dd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b195]

    ??:? runModuleUnitTests [0x42c101]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42876c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(e; arr)\n    {\n        if(e < 0)\n        {\n            e = -e;\n\
    \        }\n        long sum = 0;\n        while(e > 0)\n        {\n         \
    \   sum += e % 10;\n            e /= 10;\n        }\n        if(sum > 0)\n   \
    \     {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n   \
    \ assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L,\
    \ -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L])\
    \ == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L,\
    \ 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n\
    \    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmprpmd7b00.d(38): unittest failure

    ----------------

    ??:? _d_unittestp [0x42831d]

    ??:? void tmprpmd7b00.__unittest_L33_C1() [0x427e3e]

    ??:? void tmprpmd7b00.__modtest() [0x4280a0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c32b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1be]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430351]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430800]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302dd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b195]

    ??:? runModuleUnitTests [0x42c101]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42876c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(i; arr)\n    {\n        long sum = 0;\n        foreach(j; i.digits)\n\
    \        {\n            sum += j;\n        }\n        if(sum > 0)\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n \
    \   alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L,\
    \ -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n\
    \    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L,\
    \ 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L,\
    \ -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L])\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmr8z4h1q.d(17): Error: no property `digits` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmr8z4h1q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(i; arr)\n    {\n        long sum = 0;\n        foreach(j; i.digits)\n\
    \        {\n            sum += j;\n        }\n        if(sum > 0)\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n \
    \   alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L,\
    \ -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n\
    \    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L,\
    \ 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L,\
    \ -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L])\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmr8z4h1q.d(17): Error: no property `digits` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmr8z4h1q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(long i; arr)\n    {\n        long sum = 0;\n        foreach(long j;\
    \ i.digits)\n        {\n            sum += j;\n        }\n        if(sum > 0)\n\
    \        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n   \
    \ assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L,\
    \ -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L])\
    \ == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L,\
    \ 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n\
    \    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9fe6c074.d(17): Error: no property `digits` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9fe6c074.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(i; arr)\n    {\n        long sum = 0;\n        foreach(j; i.digits)\n\
    \        {\n            sum += j;\n        }\n        if(sum > 0)\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n \
    \   alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L,\
    \ -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n\
    \    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L,\
    \ 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L,\
    \ -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L])\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmr8z4h1q.d(17): Error: no property `digits` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmr8z4h1q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(i; arr)\n    {\n        long sum = 0;\n        foreach(j; i.digits)\n\
    \        {\n            sum += j;\n        }\n        if(sum > 0)\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n \
    \   alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L,\
    \ -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n\
    \    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L,\
    \ 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L,\
    \ -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L])\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmr8z4h1q.d(17): Error: no property `digits` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmr8z4h1q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(i; arr)\n    {\n        long sum = 0;\n        foreach(j; i.digits)\n\
    \        {\n            sum += j;\n        }\n        if(sum > 0)\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n \
    \   alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L,\
    \ -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n\
    \    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L,\
    \ 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L,\
    \ -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L])\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmr8z4h1q.d(17): Error: no property `digits` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmr8z4h1q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(e; arr)\n    {\n        long sum = 0;\n        long num = e;\n     \
    \   if(num < 0)\n        {\n            num = -num;\n        }\n        while(num\
    \ > 0)\n        {\n            sum += num % 10;\n            num /= 10;\n    \
    \    }\n        if(sum > 0)\n        {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nunittest\n{\n    alias candidate = count_nums;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L,\
    \ 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L,\
    \ 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n\
    \    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L,\
    \ 1L]) == 1L);\n    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp7r6vyixb.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x42831d]

    ??:? void tmp7r6vyixb.__unittest_L34_C1() [0x427e3a]

    ??:? void tmp7r6vyixb.__modtest() [0x42809c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c32b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1be]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430351]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430800]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302dd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b195]

    ??:? runModuleUnitTests [0x42c101]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42876c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(i; arr)\n    {\n        long sum = 0;\n        foreach(j; i.digits)\n\
    \        {\n            sum += j;\n        }\n        if(sum > 0)\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n \
    \   alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L,\
    \ -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n\
    \    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L,\
    \ 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L,\
    \ -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L])\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmr8z4h1q.d(17): Error: no property `digits` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmr8z4h1q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(i; arr)\n    {\n        long sum = 0;\n        foreach(j; i.digits)\n\
    \        {\n            sum += j;\n        }\n        if(sum > 0)\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n \
    \   alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L,\
    \ -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n\
    \    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L,\
    \ 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L,\
    \ -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L])\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmr8z4h1q.d(17): Error: no property `digits` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmr8z4h1q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(e; arr)\n    {\n        long sum = 0;\n        foreach(c; to!string(e))\n\
    \        {\n            if(c.isDigit)\n            {\n                sum += c.to!long;\n\
    \            }\n        }\n        if(sum > 0)\n        {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_nums;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n\
    \    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L,\
    \ 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L,\
    \ 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) ==\
    \ 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L]) ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmaa299pe.d(17): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmaa299pe.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(e; arr)\n    {\n        long sum = 0;\n        long num = e;\n     \
    \   if(num < 0)\n        {\n            num = -num;\n        }\n        while(num\
    \ > 0)\n        {\n            sum += num % 10;\n            num /= 10;\n    \
    \    }\n        if(sum > 0)\n        {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nunittest\n{\n    alias candidate = count_nums;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L,\
    \ 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L,\
    \ 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n\
    \    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L,\
    \ 1L]) == 1L);\n    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp7r6vyixb.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x42831d]

    ??:? void tmp7r6vyixb.__unittest_L34_C1() [0x427e3a]

    ??:? void tmp7r6vyixb.__modtest() [0x42809c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c32b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1be]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430351]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430800]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302dd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b195]

    ??:? runModuleUnitTests [0x42c101]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42876c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(i; arr)\n    {\n        if(i < 0)\n        {\n            i = -i;\n\
    \        }\n        long sum = 0;\n        while(i > 0)\n        {\n         \
    \   sum += i % 10;\n            i /= 10;\n        }\n        if(sum > 0)\n   \
    \     {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n   \
    \ assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L,\
    \ -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L])\
    \ == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L,\
    \ 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n\
    \    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp2b85e3cm.d(38): unittest failure

    ----------------

    ??:? _d_unittestp [0x42831d]

    ??:? void tmp2b85e3cm.__unittest_L33_C1() [0x427e3e]

    ??:? void tmp2b85e3cm.__modtest() [0x4280a0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c32b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1be]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430351]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430800]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302dd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b195]

    ??:? runModuleUnitTests [0x42c101]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42876c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(i; arr)\n    {\n        if(i < 0)\n        {\n            i = -i;\n\
    \        }\n        long sum = 0;\n        while(i > 0)\n        {\n         \
    \   sum += i % 10;\n            i /= 10;\n        }\n        if(sum > 0)\n   \
    \     {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n   \
    \ assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L,\
    \ -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L])\
    \ == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L,\
    \ 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n\
    \    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp2b85e3cm.d(38): unittest failure

    ----------------

    ??:? _d_unittestp [0x42831d]

    ??:? void tmp2b85e3cm.__unittest_L33_C1() [0x427e3e]

    ??:? void tmp2b85e3cm.__modtest() [0x4280a0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c32b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1be]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430351]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430800]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302dd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b195]

    ??:? runModuleUnitTests [0x42c101]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42876c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(i; arr)\n    {\n        if(i < 0)\n        {\n            i = -i;\n\
    \        }\n        long sum = 0;\n        while(i > 0)\n        {\n         \
    \   sum += i % 10;\n            i /= 10;\n        }\n        if(sum > 0)\n   \
    \     {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n   \
    \ assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L,\
    \ -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L])\
    \ == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L,\
    \ 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n\
    \    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp2b85e3cm.d(38): unittest failure

    ----------------

    ??:? _d_unittestp [0x42831d]

    ??:? void tmp2b85e3cm.__unittest_L33_C1() [0x427e3e]

    ??:? void tmp2b85e3cm.__modtest() [0x4280a0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c32b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1be]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430351]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430800]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302dd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b195]

    ??:? runModuleUnitTests [0x42c101]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42876c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(i; arr)\n    {\n        if(i < 0)\n        {\n            i = -i;\n\
    \        }\n        long sum = 0;\n        while(i > 0)\n        {\n         \
    \   sum += i % 10;\n            i /= 10;\n        }\n        if(sum > 0)\n   \
    \     {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n   \
    \ assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L,\
    \ -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L])\
    \ == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L,\
    \ 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n\
    \    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp2b85e3cm.d(38): unittest failure

    ----------------

    ??:? _d_unittestp [0x42831d]

    ??:? void tmp2b85e3cm.__unittest_L33_C1() [0x427e3e]

    ??:? void tmp2b85e3cm.__modtest() [0x4280a0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c32b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1be]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430351]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430800]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302dd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b195]

    ??:? runModuleUnitTests [0x42c101]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42876c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(i; arr)\n    {\n        long sum = 0;\n        foreach(j; i.digits)\n\
    \        {\n            sum += j;\n        }\n        if(sum > 0)\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n \
    \   alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L,\
    \ -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n\
    \    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L,\
    \ 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L,\
    \ -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L])\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmr8z4h1q.d(17): Error: no property `digits` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmr8z4h1q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(i; arr)\n    {\n        if(i < 0)\n        {\n            i = -i;\n\
    \        }\n        long sum = 0;\n        while(i > 0)\n        {\n         \
    \   sum += i % 10;\n            i /= 10;\n        }\n        if(sum > 0)\n   \
    \     {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n   \
    \ assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L,\
    \ -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L])\
    \ == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L,\
    \ 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n\
    \    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp2b85e3cm.d(38): unittest failure

    ----------------

    ??:? _d_unittestp [0x42831d]

    ??:? void tmp2b85e3cm.__unittest_L33_C1() [0x427e3e]

    ??:? void tmp2b85e3cm.__modtest() [0x4280a0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c32b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1be]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430351]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430800]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302dd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b195]

    ??:? runModuleUnitTests [0x42c101]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42876c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(i; arr)\n    {\n        long sum = 0;\n        foreach(j; i.digits)\n\
    \        {\n            sum += j;\n        }\n        if(sum > 0)\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n \
    \   alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L,\
    \ -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n\
    \    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L,\
    \ 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L,\
    \ -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L])\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmr8z4h1q.d(17): Error: no property `digits` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmr8z4h1q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(e; arr)\n    {\n        long sum = 0;\n        long num = e;\n     \
    \   while(num != 0)\n        {\n            sum += abs(num % 10);\n          \
    \  num /= 10;\n        }\n        if(sum > 0)\n            count++;\n    }\n \
    \   return count;\n}\nunittest\n{\n    alias candidate = count_nums;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L,\
    \ 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L,\
    \ 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n\
    \    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L,\
    \ 1L]) == 1L);\n    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpb4auen9w.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x428385]

    ??:? void tmpb4auen9w.__unittest_L28_C1() [0x427e8a]

    ??:? void tmpb4auen9w.__modtest() [0x428104]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c393]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b226]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4303b9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430868]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430345]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1fd]

    ??:? runModuleUnitTests [0x42c169]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287d4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(i; arr)\n    {\n        if(i < 0)\n        {\n            i = -i;\n\
    \        }\n        long sum = 0;\n        while(i > 0)\n        {\n         \
    \   sum += i % 10;\n            i /= 10;\n        }\n        if(sum > 0)\n   \
    \     {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n   \
    \ assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L,\
    \ -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L])\
    \ == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L,\
    \ 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n\
    \    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp2b85e3cm.d(38): unittest failure

    ----------------

    ??:? _d_unittestp [0x42831d]

    ??:? void tmp2b85e3cm.__unittest_L33_C1() [0x427e3e]

    ??:? void tmp2b85e3cm.__modtest() [0x4280a0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c32b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1be]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430351]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430800]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302dd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b195]

    ??:? runModuleUnitTests [0x42c101]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42876c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(i; arr)\n    {\n        long sum = 0;\n        foreach(j; i.digits)\n\
    \        {\n            sum += j;\n        }\n        if(sum > 0)\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n \
    \   alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L,\
    \ -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n\
    \    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L,\
    \ 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L,\
    \ -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L])\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmr8z4h1q.d(17): Error: no property `digits` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmr8z4h1q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(i; arr)\n    {\n        long sum = 0;\n        foreach(j; i.digits)\n\
    \        {\n            sum += j;\n        }\n        if(sum > 0)\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n \
    \   alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L,\
    \ -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n\
    \    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L,\
    \ 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L,\
    \ -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L])\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmr8z4h1q.d(17): Error: no property `digits` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmr8z4h1q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(i; arr)\n    {\n        long sum = 0;\n        foreach(j; i.digits)\n\
    \        {\n            sum += j;\n        }\n        if(sum > 0)\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n \
    \   alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L,\
    \ -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n\
    \    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L,\
    \ 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L,\
    \ -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L])\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmr8z4h1q.d(17): Error: no property `digits` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmr8z4h1q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(e; arr)\n    {\n        long sum = 0;\n        long num = e;\n     \
    \   while(num != 0)\n        {\n            sum += abs(num % 10);\n          \
    \  num /= 10;\n        }\n        if(sum > 0)\n            count++;\n    }\n \
    \   return count;\n}\nunittest\n{\n    alias candidate = count_nums;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L,\
    \ 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L,\
    \ 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n\
    \    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L,\
    \ 1L]) == 1L);\n    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpb4auen9w.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x428385]

    ??:? void tmpb4auen9w.__unittest_L28_C1() [0x427e8a]

    ??:? void tmpb4auen9w.__modtest() [0x428104]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c393]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b226]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4303b9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430868]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430345]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1fd]

    ??:? runModuleUnitTests [0x42c169]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287d4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(e; arr)\n    {\n        long sum = 0;\n        long num = e;\n     \
    \   if(num < 0)\n        {\n            num = -num;\n        }\n        while(num\
    \ > 0)\n        {\n            sum += num % 10;\n            num /= 10;\n    \
    \    }\n        if(sum > 0)\n        {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nunittest\n{\n    alias candidate = count_nums;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L,\
    \ 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L,\
    \ 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n\
    \    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L,\
    \ 1L]) == 1L);\n    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp7r6vyixb.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x42831d]

    ??:? void tmp7r6vyixb.__unittest_L34_C1() [0x427e3a]

    ??:? void tmp7r6vyixb.__modtest() [0x42809c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c32b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1be]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430351]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430800]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302dd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b195]

    ??:? runModuleUnitTests [0x42c101]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42876c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(i; arr)\n    {\n        if(i < 0)\n        {\n            i = -i;\n\
    \        }\n        long sum = 0;\n        while(i > 0)\n        {\n         \
    \   sum += i % 10;\n            i /= 10;\n        }\n        if(sum > 0)\n   \
    \     {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n   \
    \ assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L,\
    \ -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L])\
    \ == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L,\
    \ 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n\
    \    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp2b85e3cm.d(38): unittest failure

    ----------------

    ??:? _d_unittestp [0x42831d]

    ??:? void tmp2b85e3cm.__unittest_L33_C1() [0x427e3e]

    ??:? void tmp2b85e3cm.__modtest() [0x4280a0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c32b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1be]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430351]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430800]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302dd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b195]

    ??:? runModuleUnitTests [0x42c101]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42876c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(e; arr)\n    {\n        long sum = 0;\n        foreach(d; e.digits)\n\
    \        {\n            sum += d;\n        }\n        if(sum > 0)\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n \
    \   alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L,\
    \ -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n\
    \    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L,\
    \ 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L,\
    \ -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L])\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8kmtkb1z.d(17): Error: no property `digits` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8kmtkb1z.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(i; arr)\n    {\n        if(i < 0)\n        {\n            i = -i;\n\
    \        }\n        long sum = 0;\n        while(i > 0)\n        {\n         \
    \   sum += i % 10;\n            i /= 10;\n        }\n        if(sum > 0)\n   \
    \     {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n   \
    \ assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L,\
    \ -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L])\
    \ == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L,\
    \ 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n\
    \    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp2b85e3cm.d(38): unittest failure

    ----------------

    ??:? _d_unittestp [0x42831d]

    ??:? void tmp2b85e3cm.__unittest_L33_C1() [0x427e3e]

    ??:? void tmp2b85e3cm.__modtest() [0x4280a0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c32b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1be]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430351]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430800]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302dd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b195]

    ??:? runModuleUnitTests [0x42c101]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42876c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(e; arr)\n    {\n        long sum = 0;\n        foreach(d; e.digits)\n\
    \        {\n            sum += d;\n        }\n        if(sum > 0)\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n \
    \   alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L,\
    \ -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n\
    \    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L,\
    \ 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L,\
    \ -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L])\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8kmtkb1z.d(17): Error: no property `digits` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8kmtkb1z.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(e; arr)\n    {\n        long sum = 0;\n        foreach(d; e.digits)\n\
    \        {\n            sum += d;\n        }\n        if(sum > 0)\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n \
    \   alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L,\
    \ -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n\
    \    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L,\
    \ 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L,\
    \ -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L])\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8kmtkb1z.d(17): Error: no property `digits` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8kmtkb1z.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(i; arr)\n    {\n        if(i < 0)\n        {\n            i = -i;\n\
    \        }\n        long sum = 0;\n        while(i > 0)\n        {\n         \
    \   sum += i % 10;\n            i /= 10;\n        }\n        if(sum > 0)\n   \
    \     {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n   \
    \ assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L,\
    \ -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L])\
    \ == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L,\
    \ 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n\
    \    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp2b85e3cm.d(38): unittest failure

    ----------------

    ??:? _d_unittestp [0x42831d]

    ??:? void tmp2b85e3cm.__unittest_L33_C1() [0x427e3e]

    ??:? void tmp2b85e3cm.__modtest() [0x4280a0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c32b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1be]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430351]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430800]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302dd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b195]

    ??:? runModuleUnitTests [0x42c101]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42876c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(i; arr)\n    {\n        if(i < 0)\n        {\n            i = -i;\n\
    \        }\n        long sum = 0;\n        while(i > 0)\n        {\n         \
    \   sum += i % 10;\n            i /= 10;\n        }\n        if(sum > 0)\n   \
    \     {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n   \
    \ assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L,\
    \ -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L])\
    \ == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L,\
    \ 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n\
    \    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp2b85e3cm.d(38): unittest failure

    ----------------

    ??:? _d_unittestp [0x42831d]

    ??:? void tmp2b85e3cm.__unittest_L33_C1() [0x427e3e]

    ??:? void tmp2b85e3cm.__modtest() [0x4280a0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c32b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1be]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430351]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430800]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302dd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b195]

    ??:? runModuleUnitTests [0x42c101]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42876c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(e; arr)\n    {\n        long sum = 0;\n        long num = e;\n     \
    \   if(num < 0)\n        {\n            num = -num;\n        }\n        while(num\
    \ > 0)\n        {\n            sum += num % 10;\n            num /= 10;\n    \
    \    }\n        if(sum > 0)\n        {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nunittest\n{\n    alias candidate = count_nums;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L,\
    \ 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L,\
    \ 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n\
    \    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L,\
    \ 1L]) == 1L);\n    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp7r6vyixb.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x42831d]

    ??:? void tmp7r6vyixb.__unittest_L34_C1() [0x427e3a]

    ??:? void tmp7r6vyixb.__modtest() [0x42809c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c32b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1be]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430351]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430800]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302dd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b195]

    ??:? runModuleUnitTests [0x42c101]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42876c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(i; arr)\n    {\n        long sum = 0;\n        foreach(j; i.digits)\n\
    \        {\n            sum += j;\n        }\n        if(sum > 0)\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n \
    \   alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L,\
    \ -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n\
    \    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L,\
    \ 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L,\
    \ -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L])\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmr8z4h1q.d(17): Error: no property `digits` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmr8z4h1q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(i; arr)\n    {\n        long sum = 0;\n        foreach(j; i.to!string)\n\
    \        {\n            if(j.isDigit)\n            {\n                sum += j.to!long;\n\
    \            }\n        }\n        if(sum > 0)\n        {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_nums;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n\
    \    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L,\
    \ 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L,\
    \ 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) ==\
    \ 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L]) ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpoco256eu.d(17): Error: no property `to` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoco256eu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(e; arr)\n    {\n        long sum = 0;\n        foreach(i; e.digits)\n\
    \        {\n            sum += i;\n        }\n        if(sum > 0)\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n \
    \   alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L,\
    \ -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n\
    \    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L,\
    \ 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L,\
    \ -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L])\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprofmg3jf.d(17): Error: no property `digits` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprofmg3jf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(e; arr)\n    {\n        long sum = 0;\n        foreach(d; e.digits)\n\
    \        {\n            sum += abs(d);\n        }\n        if(sum > 0)\n     \
    \   {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n   \
    \ assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L,\
    \ -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L])\
    \ == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L,\
    \ 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n\
    \    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpclvbda9w.d(17): Error: no property `digits` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpclvbda9w.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(i; arr)\n    {\n        long sum = 0;\n        long num = i;\n     \
    \   while(num != 0)\n        {\n            sum += abs(num % 10);\n          \
    \  num /= 10;\n        }\n        if(sum > 0)\n            count++;\n    }\n \
    \   return count;\n}\nunittest\n{\n    alias candidate = count_nums;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L,\
    \ 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L,\
    \ 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n\
    \    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L,\
    \ 1L]) == 1L);\n    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpetj9vgz9.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x428385]

    ??:? void tmpetj9vgz9.__unittest_L28_C1() [0x427e8a]

    ??:? void tmpetj9vgz9.__modtest() [0x428104]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c393]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b226]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4303b9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430868]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430345]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1fd]

    ??:? runModuleUnitTests [0x42c169]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287d4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(i; arr)\n    {\n        if(i < 0)\n        {\n            i = -i;\n\
    \        }\n        long sum = 0;\n        while(i > 0)\n        {\n         \
    \   sum += i % 10;\n            i /= 10;\n        }\n        if(sum > 0)\n   \
    \     {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n   \
    \ assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L,\
    \ -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L])\
    \ == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L,\
    \ 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n\
    \    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp2b85e3cm.d(38): unittest failure

    ----------------

    ??:? _d_unittestp [0x42831d]

    ??:? void tmp2b85e3cm.__unittest_L33_C1() [0x427e3e]

    ??:? void tmp2b85e3cm.__modtest() [0x4280a0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c32b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1be]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430351]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430800]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302dd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b195]

    ??:? runModuleUnitTests [0x42c101]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42876c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(i; arr)\n    {\n        long sum = 0;\n        foreach(c; i.to!string)\n\
    \        {\n            if(c.isDigit)\n                sum += c.to!long;\n   \
    \     }\n        if(sum > 0)\n            count++;\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = count_nums;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L,\
    \ 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L,\
    \ 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n\
    \    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L,\
    \ 1L]) == 1L);\n    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpyx5js_wc.d(17): Error: no property `to` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyx5js_wc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(i; arr)\n    {\n        long sum = 0;\n        foreach(j; i.digits)\n\
    \        {\n            sum += j;\n        }\n        if(sum > 0)\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n \
    \   alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L,\
    \ -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n\
    \    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L,\
    \ 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L,\
    \ -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L])\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmr8z4h1q.d(17): Error: no property `digits` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmr8z4h1q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(i; arr)\n    {\n        long sum = 0;\n        long num = abs(i);\n\
    \        while(num > 0)\n        {\n            sum += num % 10;\n           \
    \ num /= 10;\n        }\n        if(sum > 0)\n            count++;\n    }\n  \
    \  return count;\n}\nunittest\n{\n    alias candidate = count_nums;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L,\
    \ 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L,\
    \ 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n\
    \    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L,\
    \ 1L]) == 1L);\n    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpy0i5pt2i.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x42837d]

    ??:? void tmpy0i5pt2i.__unittest_L28_C1() [0x427e86]

    ??:? void tmpy0i5pt2i.__modtest() [0x428100]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c38b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b21e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4303b1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430860]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43033d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1f5]

    ??:? runModuleUnitTests [0x42c161]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287cc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164210
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(i; arr)\n    {\n        long sum = 0;\n        foreach(j; i.digits)\n\
    \        {\n            sum += j;\n        }\n        if(sum > 0)\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n \
    \   alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L,\
    \ -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n\
    \    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L,\
    \ 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L,\
    \ -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L])\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmr8z4h1q.d(17): Error: no property `digits` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmr8z4h1q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(i; arr)\n    {\n        if(i < 0)\n        {\n            i = -i;\n\
    \        }\n        long sum = 0;\n        while(i > 0)\n        {\n         \
    \   sum += i % 10;\n            i /= 10;\n        }\n        if(sum > 0)\n   \
    \     {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n   \
    \ assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L,\
    \ -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L])\
    \ == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L,\
    \ 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n\
    \    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp2b85e3cm.d(38): unittest failure

    ----------------

    ??:? _d_unittestp [0x42831d]

    ??:? void tmp2b85e3cm.__unittest_L33_C1() [0x427e3e]

    ??:? void tmp2b85e3cm.__modtest() [0x4280a0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c32b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1be]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430351]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430800]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302dd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b195]

    ??:? runModuleUnitTests [0x42c101]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42876c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(e; arr)\n    {\n        if(e < 0)\n        {\n            e = -e;\n\
    \        }\n        long sum = 0;\n        while(e > 0)\n        {\n         \
    \   sum += e % 10;\n            e /= 10;\n        }\n        if(sum > 0)\n   \
    \     {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n   \
    \ assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L,\
    \ -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L])\
    \ == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L,\
    \ 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n\
    \    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmprpmd7b00.d(38): unittest failure

    ----------------

    ??:? _d_unittestp [0x42831d]

    ??:? void tmprpmd7b00.__unittest_L33_C1() [0x427e3e]

    ??:? void tmprpmd7b00.__modtest() [0x4280a0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c32b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1be]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430351]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430800]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302dd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b195]

    ??:? runModuleUnitTests [0x42c101]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42876c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(i; arr)\n    {\n        long sum = 0;\n        foreach(j; i.digits)\n\
    \        {\n            sum += j;\n        }\n        if(sum > 0)\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n \
    \   alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L,\
    \ -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n\
    \    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L,\
    \ 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L,\
    \ -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L])\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmr8z4h1q.d(17): Error: no property `digits` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmr8z4h1q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(num; arr)\n    {\n        long sum = 0;\n        foreach(digit; num.digits)\n\
    \        {\n            sum += digit;\n        }\n        if(sum > 0)\n      \
    \  {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n   \
    \ assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L,\
    \ -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L])\
    \ == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L,\
    \ 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n\
    \    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7awdlgoh.d(17): Error: no property `digits` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7awdlgoh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(num; arr)\n    {\n        if(num < 0)\n        {\n            num =\
    \ -num;\n        }\n        long sum = 0;\n        while(num > 0)\n        {\n\
    \            sum += num % 10;\n            num /= 10;\n        }\n        if(sum\
    \ > 0)\n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = count_nums;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L,\
    \ 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L,\
    \ 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n\
    \    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L,\
    \ 1L]) == 1L);\n    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpkvurfrgu.d(38): unittest failure

    ----------------

    ??:? _d_unittestp [0x42831d]

    ??:? void tmpkvurfrgu.__unittest_L33_C1() [0x427e3e]

    ??:? void tmpkvurfrgu.__modtest() [0x4280a0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c32b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1be]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430351]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430800]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302dd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b195]

    ??:? runModuleUnitTests [0x42c101]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42876c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164210
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(i; arr)\n    {\n        long sum = 0;\n        foreach(j; i.digits)\n\
    \        {\n            sum += j;\n        }\n        if(sum > 0)\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n \
    \   alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L,\
    \ -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n\
    \    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L,\
    \ 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L,\
    \ -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L])\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmr8z4h1q.d(17): Error: no property `digits` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmr8z4h1q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(i; arr)\n    {\n        if(i < 0)\n        {\n            i = -i;\n\
    \        }\n        long sum = 0;\n        while(i > 0)\n        {\n         \
    \   sum += i % 10;\n            i /= 10;\n        }\n        if(sum > 0)\n   \
    \     {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n   \
    \ assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L,\
    \ -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L])\
    \ == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L,\
    \ 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n\
    \    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp2b85e3cm.d(38): unittest failure

    ----------------

    ??:? _d_unittestp [0x42831d]

    ??:? void tmp2b85e3cm.__unittest_L33_C1() [0x427e3e]

    ??:? void tmp2b85e3cm.__modtest() [0x4280a0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c32b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1be]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430351]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430800]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302dd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b195]

    ??:? runModuleUnitTests [0x42c101]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42876c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long result = 0;\n  \
    \  foreach(elem; arr)\n    {\n        long sum = 0;\n        long num = elem;\n\
    \        while(num != 0)\n        {\n            sum += abs(num % 10);\n     \
    \       num /= 10;\n        }\n        if(sum > 0)\n            result++;\n  \
    \  }\n    return result;\n}\nunittest\n{\n    alias candidate = count_nums;\n\n\
    \    assert(candidate([]) == 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n\
    \    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L,\
    \ 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L,\
    \ 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) ==\
    \ 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L]) ==\
    \ 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpj2a0k8ul.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x428385]

    ??:? void tmpj2a0k8ul.__unittest_L28_C1() [0x427e8a]

    ??:? void tmpj2a0k8ul.__modtest() [0x428104]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c393]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b226]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4303b9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430868]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430345]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1fd]

    ??:? runModuleUnitTests [0x42c169]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287d4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164210
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(e; arr)\n    {\n        long sum = 0;\n        foreach(c; to!string(e))\n\
    \        {\n            sum += c.to!long - '0'.to!long;\n        }\n        if(sum\
    \ > 0)\n            count++;\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L,\
    \ -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n\
    \    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L,\
    \ 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L,\
    \ -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L])\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdzlvzgub.d(17): Error: template instance `to!string` template `to`
    is not defined, did you mean No?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdzlvzgub.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(i; arr)\n    {\n        long sum = 0;\n        foreach(j; i.digits)\n\
    \        {\n            sum += j;\n        }\n        if(sum > 0)\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n \
    \   alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L,\
    \ -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n\
    \    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L,\
    \ 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L,\
    \ -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L])\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmr8z4h1q.d(17): Error: no property `digits` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmr8z4h1q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(i; arr)\n    {\n        long sum = 0;\n        foreach(j; i.digits)\n\
    \        {\n            sum += j;\n        }\n        if(sum > 0)\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n \
    \   alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L,\
    \ -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n\
    \    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L,\
    \ 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L,\
    \ -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L])\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmr8z4h1q.d(17): Error: no property `digits` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmr8z4h1q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(i; arr)\n    {\n        long sum = 0;\n        if(i < 0)\n        {\n\
    \            i = -i;\n            sum += i % 10;\n            i /= 10;\n     \
    \   }\n        while(i > 0)\n        {\n            sum += i % 10;\n         \
    \   i /= 10;\n        }\n        if(sum > 0)\n            count++;\n    }\n  \
    \  return count;\n}\nunittest\n{\n    alias candidate = count_nums;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L,\
    \ 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L,\
    \ 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n\
    \    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L,\
    \ 1L]) == 1L);\n    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpb0atppp2.d(38): unittest failure

    ----------------

    ??:? _d_unittestp [0x42833d]

    ??:? void tmpb0atppp2.__unittest_L33_C1() [0x427e5e]

    ??:? void tmpb0atppp2.__modtest() [0x4280c0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430820]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1b5]

    ??:? runModuleUnitTests [0x42c121]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42878c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164210
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(i; arr)\n    {\n        long sum = 0;\n        long num = i;\n     \
    \   while(num != 0)\n        {\n            sum += abs(num % 10);\n          \
    \  num /= 10;\n        }\n        if(sum > 0)\n            count++;\n    }\n \
    \   return count;\n}\nunittest\n{\n    alias candidate = count_nums;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L,\
    \ 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L,\
    \ 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n\
    \    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L,\
    \ 1L]) == 1L);\n    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpetj9vgz9.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x428385]

    ??:? void tmpetj9vgz9.__unittest_L28_C1() [0x427e8a]

    ??:? void tmpetj9vgz9.__modtest() [0x428104]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c393]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b226]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4303b9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430868]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x430345]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1fd]

    ??:? runModuleUnitTests [0x42c169]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287d4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(i; arr)\n    {\n        long sum = 0;\n        foreach(j; i.digits)\n\
    \        {\n            sum += j;\n        }\n        if(sum > 0)\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n \
    \   alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L,\
    \ -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n\
    \    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L,\
    \ 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L,\
    \ -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L])\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmr8z4h1q.d(17): Error: no property `digits` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmr8z4h1q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(e; arr)\n    {\n        long sum = 0;\n        long num = e;\n     \
    \   if(num < 0)\n        {\n            num = -num;\n        }\n        while(num\
    \ != 0)\n        {\n            sum += num % 10;\n            num /= 10;\n   \
    \     }\n        if(sum > 0)\n        {\n            count++;\n        }\n   \
    \ }\n    return count;\n}\nunittest\n{\n    alias candidate = count_nums;\n\n\
    \    assert(candidate([]) == 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n\
    \    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L,\
    \ 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L,\
    \ 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) ==\
    \ 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L]) ==\
    \ 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp5kx4qs8w.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x42831d]

    ??:? void tmp5kx4qs8w.__unittest_L34_C1() [0x427e3a]

    ??:? void tmp5kx4qs8w.__modtest() [0x42809c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c32b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1be]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430351]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430800]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302dd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b195]

    ??:? runModuleUnitTests [0x42c101]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42876c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164210
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(i; arr)\n    {\n        long sum = 0;\n        foreach(j; i.digits)\n\
    \        {\n            sum += j;\n        }\n        if(sum > 0)\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n \
    \   alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L,\
    \ -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n\
    \    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L,\
    \ 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L,\
    \ -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L])\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmr8z4h1q.d(17): Error: no property `digits` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmr8z4h1q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(i; arr)\n    {\n        long sum = 0;\n        foreach(j; i.to!string)\n\
    \        {\n            if(j.isDigit)\n            {\n                sum += j.to!long;\n\
    \            }\n        }\n        if(sum > 0)\n        {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_nums;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n\
    \    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L,\
    \ 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L,\
    \ 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) ==\
    \ 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L]) ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpoco256eu.d(17): Error: no property `to` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoco256eu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(i; arr)\n    {\n        long sum = 0;\n        foreach(j; i.digits)\n\
    \        {\n            sum += j;\n        }\n        if(sum > 0)\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n \
    \   alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L,\
    \ -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n\
    \    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L,\
    \ 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L,\
    \ -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L])\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmr8z4h1q.d(17): Error: no property `digits` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmr8z4h1q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(i; arr)\n    {\n        long sum = 0;\n        foreach(j; i.digits)\n\
    \        {\n            sum += j;\n        }\n        if(sum > 0)\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n \
    \   alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L,\
    \ -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n\
    \    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L,\
    \ 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L,\
    \ -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L])\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmr8z4h1q.d(17): Error: no property `digits` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmr8z4h1q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(i; arr)\n    {\n        if(i < 0)\n        {\n            i = -i;\n\
    \        }\n        long sum = 0;\n        while(i > 0)\n        {\n         \
    \   sum += i % 10;\n            i /= 10;\n        }\n        if(sum > 0)\n   \
    \     {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n   \
    \ assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L,\
    \ -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L])\
    \ == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L,\
    \ 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n\
    \    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp2b85e3cm.d(38): unittest failure

    ----------------

    ??:? _d_unittestp [0x42831d]

    ??:? void tmp2b85e3cm.__unittest_L33_C1() [0x427e3e]

    ??:? void tmp2b85e3cm.__modtest() [0x4280a0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c32b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1be]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430351]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430800]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302dd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b195]

    ??:? runModuleUnitTests [0x42c101]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42876c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(num; arr)\n    {\n        long sum = 0;\n        foreach(digit; num.digits)\n\
    \        {\n            sum += digit;\n        }\n        if(sum > 0)\n      \
    \  {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n   \
    \ assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L,\
    \ -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L])\
    \ == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L,\
    \ 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n\
    \    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7awdlgoh.d(17): Error: no property `digits` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7awdlgoh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(i; arr)\n    {\n        long sum = 0;\n        long num = i;\n     \
    \   while(num != 0)\n        {\n            sum += num % 10;\n            num\
    \ /= 10;\n        }\n        if(sum > 0)\n            count++;\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = count_nums;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L,\
    \ 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L,\
    \ 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n\
    \    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L,\
    \ 1L]) == 1L);\n    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpbtlh1y7a.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x42830d]

    ??:? void tmpbtlh1y7a.__unittest_L28_C1() [0x427ff5]

    ??:? void tmpbtlh1y7a.__modtest() [0x428090]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c31b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1ae]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430341]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4307f0]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302cd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b185]

    ??:? runModuleUnitTests [0x42c0f1]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42875c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(i; arr)\n    {\n        long sum = 0;\n        foreach(j; i.digits)\n\
    \        {\n            sum += j;\n        }\n        if(sum > 0)\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n \
    \   alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L,\
    \ -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n\
    \    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L,\
    \ 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L,\
    \ -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L])\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmr8z4h1q.d(17): Error: no property `digits` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmr8z4h1q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(i; arr)\n    {\n        if(i < 0)\n        {\n            i = -i;\n\
    \        }\n        long sum = 0;\n        while(i > 0)\n        {\n         \
    \   sum += i % 10;\n            i /= 10;\n        }\n        if(sum > 0)\n   \
    \     {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n   \
    \ assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L,\
    \ -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L])\
    \ == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L,\
    \ 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n\
    \    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp2b85e3cm.d(38): unittest failure

    ----------------

    ??:? _d_unittestp [0x42831d]

    ??:? void tmp2b85e3cm.__unittest_L33_C1() [0x427e3e]

    ??:? void tmp2b85e3cm.__modtest() [0x4280a0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c32b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1be]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430351]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430800]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302dd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b195]

    ??:? runModuleUnitTests [0x42c101]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42876c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(i; arr)\n    {\n        if(i < 0)\n        {\n            i = -i;\n\
    \        }\n        long sum = 0;\n        while(i > 0)\n        {\n         \
    \   sum += i % 10;\n            i /= 10;\n        }\n        if(sum > 0)\n   \
    \     {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n   \
    \ assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L,\
    \ -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L])\
    \ == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L,\
    \ 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n\
    \    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp2b85e3cm.d(38): unittest failure

    ----------------

    ??:? _d_unittestp [0x42831d]

    ??:? void tmp2b85e3cm.__unittest_L33_C1() [0x427e3e]

    ??:? void tmp2b85e3cm.__modtest() [0x4280a0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c32b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1be]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430351]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430800]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302dd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b195]

    ??:? runModuleUnitTests [0x42c101]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42876c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(i; arr)\n    {\n        long sum = 0;\n        foreach(j; i.digits)\n\
    \        {\n            sum += j;\n        }\n        if(sum > 0)\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n \
    \   alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L,\
    \ -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n\
    \    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L,\
    \ 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L,\
    \ -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L])\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmr8z4h1q.d(17): Error: no property `digits` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmr8z4h1q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(e; arr)\n    {\n        long sum = 0;\n        long num = e;\n     \
    \   if(num < 0)\n        {\n            num = -num;\n        }\n        while(num\
    \ > 0)\n        {\n            sum += num % 10;\n            num /= 10;\n    \
    \    }\n        if(sum > 0)\n        {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nunittest\n{\n    alias candidate = count_nums;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L,\
    \ 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L,\
    \ 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n\
    \    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L,\
    \ 1L]) == 1L);\n    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp7r6vyixb.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x42831d]

    ??:? void tmp7r6vyixb.__unittest_L34_C1() [0x427e3a]

    ??:? void tmp7r6vyixb.__modtest() [0x42809c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c32b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1be]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430351]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430800]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302dd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b195]

    ??:? runModuleUnitTests [0x42c101]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42876c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(i; arr)\n    {\n        long sum = 0;\n        foreach(j; i.to!string)\n\
    \        {\n            sum += j.to!long;\n        }\n        if(sum > 0)\n  \
    \      {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n   \
    \ assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L,\
    \ -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L])\
    \ == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L,\
    \ 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n\
    \    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpafp79b33.d(17): Error: no property `to` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpafp79b33.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(i; arr)\n    {\n        long sum = 0;\n        foreach(j; i.digits)\n\
    \        {\n            sum += j;\n        }\n        if(sum > 0)\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n \
    \   alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L,\
    \ -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n\
    \    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L,\
    \ 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L,\
    \ -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L])\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmr8z4h1q.d(17): Error: no property `digits` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmr8z4h1q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(num; arr)\n    {\n        long sum = 0;\n        long temp = num;\n\
    \        if(num < 0)\n        {\n            temp = -num;\n        }\n       \
    \ while(temp > 0)\n        {\n            sum += temp % 10;\n            temp\
    \ /= 10;\n        }\n        if(sum > 0)\n        {\n            count++;\n  \
    \      }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_nums;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n\
    \    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L,\
    \ 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L,\
    \ 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) ==\
    \ 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L]) ==\
    \ 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp9p2ws3s9.d(39): unittest failure

    ----------------

    ??:? _d_unittestp [0x42831d]

    ??:? void tmp9p2ws3s9.__unittest_L34_C1() [0x427e3e]

    ??:? void tmp9p2ws3s9.__modtest() [0x4280a0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c32b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1be]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430351]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430800]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302dd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b195]

    ??:? runModuleUnitTests [0x42c101]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42876c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164210
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(i; arr)\n    {\n        long sum = 0;\n        foreach(j; i.digits)\n\
    \        {\n            sum += j;\n        }\n        if(sum > 0)\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n \
    \   alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L,\
    \ -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n\
    \    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L,\
    \ 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L,\
    \ -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L])\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmr8z4h1q.d(17): Error: no property `digits` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmr8z4h1q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(e; arr)\n    {\n        if(e < 0)\n        {\n            e = -e;\n\
    \        }\n        long sum = 0;\n        while(e > 0)\n        {\n         \
    \   sum += e % 10;\n            e /= 10;\n        }\n        if(sum > 0)\n   \
    \     {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n   \
    \ assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L,\
    \ -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L])\
    \ == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L,\
    \ 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n\
    \    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmprpmd7b00.d(38): unittest failure

    ----------------

    ??:? _d_unittestp [0x42831d]

    ??:? void tmprpmd7b00.__unittest_L33_C1() [0x427e3e]

    ??:? void tmprpmd7b00.__modtest() [0x4280a0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c32b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1be]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430351]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430800]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302dd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b195]

    ??:? runModuleUnitTests [0x42c101]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42876c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(num; arr)\n    {\n        if(sum(digits(num)) > 0)\n            count++;\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_nums;\n\
    \n    assert(candidate([]) == 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n\
    \    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L,\
    \ 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L,\
    \ 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) ==\
    \ 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L]) ==\
    \ 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpulkr5_rr.d(16): Error: undefined identifier `sum`, did you mean
    variable `num`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpulkr5_rr.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(i; arr)\n    {\n        long sum = 0;\n        if(i < 0)\n        {\n\
    \            i = -i;\n            sum += i % 10;\n            i /= 10;\n     \
    \   }\n        while(i > 0)\n        {\n            sum += i % 10;\n         \
    \   i /= 10;\n        }\n        if(sum > 0)\n            count++;\n    }\n  \
    \  return count;\n}\nunittest\n{\n    alias candidate = count_nums;\n\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L,\
    \ 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L,\
    \ 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n\
    \    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L,\
    \ 1L]) == 1L);\n    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpb0atppp2.d(38): unittest failure

    ----------------

    ??:? _d_unittestp [0x42833d]

    ??:? void tmpb0atppp2.__unittest_L33_C1() [0x427e5e]

    ??:? void tmpb0atppp2.__modtest() [0x4280c0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c34b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1de]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430371]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430820]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302fd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b1b5]

    ??:? runModuleUnitTests [0x42c121]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42878c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164210
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(i; arr)\n    {\n        long sum = 0;\n        foreach(j; i.digits)\n\
    \        {\n            sum += j;\n        }\n        if(sum > 0)\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n \
    \   alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L,\
    \ -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n\
    \    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L,\
    \ 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L,\
    \ -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L])\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmr8z4h1q.d(17): Error: no property `digits` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmr8z4h1q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(i; arr)\n    {\n        if(i < 0)\n        {\n            i = -i;\n\
    \        }\n        long sum = 0;\n        while(i > 0)\n        {\n         \
    \   sum += i % 10;\n            i /= 10;\n        }\n        if(sum > 0)\n   \
    \     {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n   \
    \ assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L,\
    \ -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L])\
    \ == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L,\
    \ 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n\
    \    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp2b85e3cm.d(38): unittest failure

    ----------------

    ??:? _d_unittestp [0x42831d]

    ??:? void tmp2b85e3cm.__unittest_L33_C1() [0x427e3e]

    ??:? void tmp2b85e3cm.__modtest() [0x4280a0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c32b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1be]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430351]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430800]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302dd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b195]

    ??:? runModuleUnitTests [0x42c101]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42876c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(i; arr)\n    {\n        long sum = 0;\n        if(i < 0)\n        {\n\
    \            sum += abs(i % 10);\n            i /= 10;\n        }\n        while(i\
    \ != 0)\n        {\n            sum += i % 10;\n            i /= 10;\n       \
    \ }\n        if(sum > 0)\n            count++;\n    }\n    return count;\n}\n\
    unittest\n{\n    alias candidate = count_nums;\n\n    assert(candidate([]) ==\
    \ 0L);\n    assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L,\
    \ 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L,\
    \ 1L, 5L]) == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n\
    \    assert(candidate([12L, 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L,\
    \ 1L]) == 1L);\n    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp3_f8ddqq.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x4283ad]

    ??:? void tmp3_f8ddqq.__unittest_L32_C1() [0x427eb2]

    ??:? void tmp3_f8ddqq.__modtest() [0x42812c]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c3bb]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b24e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x4303e1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430890]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x43036d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b225]

    ??:? runModuleUnitTests [0x42c191]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4287fc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164210
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(i; arr)\n    {\n        long sum = 0;\n        foreach(j; i.digits)\n\
    \        {\n            sum += j;\n        }\n        if(sum > 0)\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n \
    \   alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L,\
    \ -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n\
    \    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L,\
    \ 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L,\
    \ -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L])\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmr8z4h1q.d(17): Error: no property `digits` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmr8z4h1q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(i; arr)\n    {\n        long sum = 0;\n        foreach(j; i.digits)\n\
    \        {\n            sum += j;\n        }\n        if(sum > 0)\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n \
    \   alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n    assert(candidate([-1L,\
    \ -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L, -2L, 3L, 4L, 5L]) == 6L);\n\
    \    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L]) == 5L);\n    assert(candidate([1L,\
    \ 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L, 23L, 34L, -45L,\
    \ -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n    assert(candidate([1L])\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmr8z4h1q.d(17): Error: no property `digits` for type `long`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmr8z4h1q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(i; arr)\n    {\n        if(i < 0)\n        {\n            i = -i;\n\
    \        }\n        long sum = 0;\n        while(i > 0)\n        {\n         \
    \   sum += i % 10;\n            i /= 10;\n        }\n        if(sum > 0)\n   \
    \     {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n   \
    \ assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L,\
    \ -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L])\
    \ == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L,\
    \ 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n\
    \    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp2b85e3cm.d(38): unittest failure

    ----------------

    ??:? _d_unittestp [0x42831d]

    ??:? void tmp2b85e3cm.__unittest_L33_C1() [0x427e3e]

    ??:? void tmp2b85e3cm.__modtest() [0x4280a0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c32b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1be]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430351]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430800]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302dd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b195]

    ??:? runModuleUnitTests [0x42c101]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42876c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164209
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function count_nums\
    \ which takes an array of integers and returns\n    the number of elements which\
    \ has a sum of digits > 0.\n    If a number is negative, then its first signed\
    \ digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n   \
    \             \n*/\nlong count_nums(long[] arr) \n{\n    long count = 0;\n   \
    \ foreach(i; arr)\n    {\n        if(i < 0)\n        {\n            i = -i;\n\
    \        }\n        long sum = 0;\n        while(i > 0)\n        {\n         \
    \   sum += i % 10;\n            i /= 10;\n        }\n        if(sum > 0)\n   \
    \     {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = count_nums;\n\n    assert(candidate([]) == 0L);\n   \
    \ assert(candidate([-1L, -2L, 0L]) == 0L);\n    assert(candidate([1L, 1L, 2L,\
    \ -2L, 3L, 4L, 5L]) == 6L);\n    assert(candidate([1L, 6L, 9L, -6L, 0L, 1L, 5L])\
    \ == 5L);\n    assert(candidate([1L, 100L, 98L, -7L, 1L, -1L]) == 4L);\n    assert(candidate([12L,\
    \ 23L, 34L, -45L, -56L, 0L]) == 5L);\n    assert(candidate([0L, 1L]) == 1L);\n\
    \    assert(candidate([1L]) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp2b85e3cm.d(38): unittest failure

    ----------------

    ??:? _d_unittestp [0x42831d]

    ??:? void tmp2b85e3cm.__unittest_L33_C1() [0x427e3e]

    ??:? void tmp2b85e3cm.__modtest() [0x4280a0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42c32b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42b1be]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x430351]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430800]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x4302dd]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b195]

    ??:? runModuleUnitTests [0x42c101]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42876c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164209
