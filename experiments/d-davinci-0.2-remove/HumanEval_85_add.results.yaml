language: d
name: HumanEval_85_add
results:
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 1 && e % 2 == 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L,\
    \ 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) ==\
    \ 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 1 && e % 2 == 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L,\
    \ 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) ==\
    \ 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    return lst.filter!(a => a % 2 ==\
    \ 0).sum;\n}\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L,\
    \ 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n\
    \    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L,\
    \ 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsjvw758c.d(12): Error: no property `filter` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsjvw758c.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164308
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 1 && e % 2 == 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L,\
    \ 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) ==\
    \ 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i,e; lst)\n\
    \    {\n        if(i % 2 == 1 && e % 2 == 0)\n        {\n            sum += e;\n\
    \        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L,\
    \ 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n \
    \   assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 1 && e % 2 == 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L,\
    \ 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) ==\
    \ 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 1 && e % 2 == 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L,\
    \ 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) ==\
    \ 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 1 && e % 2 == 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L,\
    \ 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) ==\
    \ 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 1 && e % 2 == 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L,\
    \ 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) ==\
    \ 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i,e; lst)\n\
    \    {\n        if(i%2==1 && e%2==0)\n        {\n            sum += e;\n     \
    \   }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = add;\n\n\
    \    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L, 7L,\
    \ 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L,\
    \ 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i,e; lst)\n\
    \    {\n        if(e % 2 == 0 && i % 2 != 0)\n        {\n            sum += e;\n\
    \        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L,\
    \ 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n \
    \   assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0;\
    \ i < lst.length; i++)\n    {\n        if (i % 2 == 1 && lst[i] % 2 == 0)\n  \
    \      {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n  \
    \  assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i, v;\
    \ lst)\n    {\n        if(i % 2 == 1 && v % 2 == 0)\n        {\n            sum\
    \ += v;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L,\
    \ 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) ==\
    \ 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 1 && e % 2 == 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L,\
    \ 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) ==\
    \ 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i, v;\
    \ lst)\n    {\n        if(i % 2 == 1 && v % 2 == 0)\n        {\n            sum\
    \ += v;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L,\
    \ 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) ==\
    \ 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long res = 0;\n    foreach(i, v;\
    \ lst)\n    {\n        if(i % 2 == 1 && v % 2 == 0)\n            res += v;\n \
    \   }\n    return res;\n}\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L,\
    \ 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n\
    \    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L,\
    \ 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i,e; lst)\n\
    \    {\n        if(i%2!=0 && e%2==0)\n        {\n            sum += e;\n     \
    \   }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = add;\n\n\
    \    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L, 7L,\
    \ 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L,\
    \ 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i,e; lst)\n\
    \    {\n        if(i%2==1 && e%2==0)\n        {\n            sum += e;\n     \
    \   }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = add;\n\n\
    \    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L, 7L,\
    \ 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L,\
    \ 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i,e; lst)\n\
    \    {\n        if(i%2==1 && e%2==0)\n        {\n            sum += e;\n     \
    \   }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = add;\n\n\
    \    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L, 7L,\
    \ 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L,\
    \ 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 1 && e % 2 == 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L,\
    \ 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) ==\
    \ 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 1 && e % 2 == 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L,\
    \ 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) ==\
    \ 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i,e; lst)\n\
    \    {\n        if(i%2!=0 && e%2==0)\n        {\n            sum+=e;\n       \
    \ }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = add;\n\n  \
    \  assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L, 7L,\
    \ 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L,\
    \ 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 1 && e % 2 == 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L,\
    \ 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) ==\
    \ 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 1 && e % 2 == 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L,\
    \ 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) ==\
    \ 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 1 && e % 2 == 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L,\
    \ 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) ==\
    \ 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i,e; lst)\n\
    \    {\n        if(i%2 == 1 && e%2 == 0)\n        {\n            sum += e;\n \
    \       }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L,\
    \ 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n \
    \   assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i, v;\
    \ lst)\n    {\n        if(i % 2 == 1 && v % 2 == 0)\n        {\n            sum\
    \ += v;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L,\
    \ 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) ==\
    \ 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 1 && e % 2 == 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L,\
    \ 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) ==\
    \ 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 1 && e % 2 == 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L,\
    \ 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) ==\
    \ 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    return lst.filter!(a => a % 2 ==\
    \ 0).sum;\n}\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L,\
    \ 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n\
    \    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L,\
    \ 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsjvw758c.d(12): Error: no property `filter` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsjvw758c.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164308
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0;\
    \ i < lst.length; i++)\n    {\n        if (lst[i] % 2 == 0 && i % 2 != 0)\n  \
    \      {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n  \
    \  assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i, v;\
    \ lst)\n    {\n        if(i % 2 != 0 && v % 2 == 0)\n        {\n            sum\
    \ += v;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L,\
    \ 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) ==\
    \ 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i, v;\
    \ lst)\n    {\n        if(i % 2 == 1 && v % 2 == 0)\n        {\n            sum\
    \ += v;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L,\
    \ 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) ==\
    \ 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i,e; lst)\n\
    \    {\n        if(i % 2 != 0 && e % 2 == 0)\n        {\n            sum += e;\n\
    \        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L,\
    \ 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n \
    \   assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    return lst.filter!(a => a % 2 ==\
    \ 0).sum;\n}\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L,\
    \ 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n\
    \    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L,\
    \ 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsjvw758c.d(12): Error: no property `filter` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsjvw758c.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164308
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i,e; lst)\n\
    \    {\n        if(i % 2 == 1 && e % 2 == 0)\n        {\n            sum += e;\n\
    \        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L,\
    \ 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n \
    \   assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long result = 0;\n    foreach(i,\
    \ e; lst)\n    {\n        if(i % 2 == 1 && e % 2 == 0)\n        {\n          \
    \  result += e;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L,\
    \ 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) ==\
    \ 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 1 && e % 2 == 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L,\
    \ 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) ==\
    \ 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i,e; lst)\n\
    \    {\n        if(i % 2 == 1 && e % 2 == 0)\n        {\n            sum += e;\n\
    \        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L,\
    \ 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n \
    \   assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i, v;\
    \ lst)\n    {\n        if(i % 2 == 1 && v % 2 == 0)\n        {\n            sum\
    \ += v;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L,\
    \ 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) ==\
    \ 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 1 && e % 2 == 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L,\
    \ 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) ==\
    \ 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i,e; lst)\n\
    \    {\n        if(i % 2 == 1 && e % 2 == 0)\n        {\n            sum += e;\n\
    \        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L,\
    \ 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n \
    \   assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 != 0 && e % 2 == 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L,\
    \ 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) ==\
    \ 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0;\
    \ i < lst.length; i++)\n    {\n        if (i % 2 == 1 && lst[i] % 2 == 0)\n  \
    \      {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n  \
    \  assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i, v;\
    \ lst)\n    {\n        if(i % 2 == 1 && v % 2 == 0)\n        {\n            sum\
    \ += v;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L,\
    \ 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) ==\
    \ 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 1 && e % 2 == 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L,\
    \ 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) ==\
    \ 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 1 && e % 2 == 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L,\
    \ 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) ==\
    \ 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i,e; lst)\n\
    \    {\n        if(i%2 == 1 && e%2 == 0)\n        {\n            sum += e;\n \
    \       }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L,\
    \ 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n \
    \   assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i,v; lst)\n\
    \    {\n        if(i%2==1 && v%2==0)\n            sum += v;\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L,\
    \ 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n\
    \    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L,\
    \ 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i, v;\
    \ lst)\n    {\n        if(i % 2 == 1 && v % 2 == 0)\n        {\n            sum\
    \ += v;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L,\
    \ 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) ==\
    \ 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    return lst.retro.filter!(a => a %\
    \ 2 == 0).enumerate.filter!(a => a.index % 2 == 1).map!(a => a.value).sum;\n}\n\
    unittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L]) ==\
    \ 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1o67dk9x.d(12): Error: no property `retro` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1o67dk9x.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164308
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i,e; lst)\n\
    \    {\n        if(i%2 == 1 && e%2 == 0)\n        {\n            sum += e;\n \
    \       }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L,\
    \ 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n \
    \   assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i,v; lst)\n\
    \    {\n        if(i%2 == 1 && v%2 == 0)\n        {\n            sum += v;\n \
    \       }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L,\
    \ 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n \
    \   assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i,e; lst)\n\
    \    {\n        if(i % 2 == 1 && e % 2 == 0)\n        {\n            sum += e;\n\
    \        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L,\
    \ 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n \
    \   assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 1 && e % 2 == 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L,\
    \ 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) ==\
    \ 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    return lst.filter!(a => a % 2 ==\
    \ 0).sum;\n}\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L,\
    \ 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n\
    \    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L,\
    \ 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsjvw758c.d(12): Error: no property `filter` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsjvw758c.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164308
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i,e; lst)\n\
    \    {\n        if(i%2==1 && e%2==0)\n        {\n            sum += e;\n     \
    \   }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = add;\n\n\
    \    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L, 7L,\
    \ 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L,\
    \ 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i, v;\
    \ lst)\n    {\n        if(i % 2 == 1 && v % 2 == 0)\n        {\n            sum\
    \ += v;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L,\
    \ 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) ==\
    \ 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 1 && e % 2 == 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L,\
    \ 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) ==\
    \ 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 1 && e % 2 == 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L,\
    \ 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) ==\
    \ 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 1 && e % 2 == 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L,\
    \ 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) ==\
    \ 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i,e; lst)\n\
    \    {\n        if(i % 2 == 1 && e % 2 == 0)\n        {\n            sum += e;\n\
    \        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L,\
    \ 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n \
    \   assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i,e; lst)\n\
    \    {\n        if(i%2==1 && e%2==0)\n        {\n            sum += e;\n     \
    \   }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = add;\n\n\
    \    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L, 7L,\
    \ 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L,\
    \ 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i, v;\
    \ lst)\n    {\n        if(i % 2 == 1 && v % 2 == 0)\n        {\n            sum\
    \ += v;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L,\
    \ 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) ==\
    \ 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i,e; lst)\n\
    \    {\n        if(i%2==1 && e%2==0)\n        {\n            sum += e;\n     \
    \   }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = add;\n\n\
    \    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L, 7L,\
    \ 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L,\
    \ 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i, v;\
    \ lst)\n    {\n        if(i % 2 == 1 && v % 2 == 0)\n        {\n            sum\
    \ += v;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L,\
    \ 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) ==\
    \ 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i, v;\
    \ lst)\n    {\n        if(i % 2 == 1 && v % 2 == 0)\n        {\n            sum\
    \ += v;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L,\
    \ 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) ==\
    \ 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i,e; lst)\n\
    \    {\n        if(i % 2 == 1 && e % 2 == 0)\n        {\n            sum += e;\n\
    \        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L,\
    \ 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n \
    \   assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i,e; lst)\n\
    \    {\n        if(i % 2 == 1 && e % 2 == 0)\n        {\n            sum += e;\n\
    \        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L,\
    \ 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n \
    \   assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i,e; lst)\n\
    \    {\n        if(i % 2 == 1 && e % 2 == 0)\n        {\n            sum += e;\n\
    \        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L,\
    \ 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n \
    \   assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i, v;\
    \ lst)\n    {\n        if(i % 2 != 0 && v % 2 == 0)\n        {\n            sum\
    \ += v;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L,\
    \ 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) ==\
    \ 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i,e; lst)\n\
    \    {\n        if(i%2==1 && e%2==0)\n        {\n            sum += e;\n     \
    \   }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = add;\n\n\
    \    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L, 7L,\
    \ 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L,\
    \ 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long result = 0;\n    foreach(i,e;\
    \ lst)\n    {\n        if(i % 2 == 1 && e % 2 == 0)\n        {\n            result\
    \ += e;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L,\
    \ 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) ==\
    \ 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i, v;\
    \ lst)\n    {\n        if(i % 2 == 1 && v % 2 == 0)\n        {\n            sum\
    \ += v;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L,\
    \ 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) ==\
    \ 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i,e; lst)\n\
    \    {\n        if(i % 2 == 1 && e % 2 == 0)\n        {\n            sum += e;\n\
    \        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L,\
    \ 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n \
    \   assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    for (long i =\
    \ 0; i < lst.length; i++)\n    {\n        if (i % 2 == 1 && lst[i] % 2 == 0)\n\
    \        {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n\
    unittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L]) ==\
    \ 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    return lst.filter!(a => a % 2 ==\
    \ 0).sum;\n}\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L,\
    \ 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n\
    \    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L,\
    \ 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsjvw758c.d(12): Error: no property `filter` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsjvw758c.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164308
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    return lst.filter!(a => a % 2 ==\
    \ 0).sum;\n}\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L,\
    \ 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n\
    \    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L,\
    \ 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsjvw758c.d(12): Error: no property `filter` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsjvw758c.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164308
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i, v;\
    \ lst)\n    {\n        if(i % 2 == 1 && v % 2 == 0)\n        {\n            sum\
    \ += v;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L,\
    \ 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) ==\
    \ 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i,e; lst)\n\
    \    {\n        if(i % 2 == 1 && e % 2 == 0)\n        {\n            sum += e;\n\
    \        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L,\
    \ 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n \
    \   assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i,e; lst)\n\
    \    {\n        if(i % 2 == 1 && e % 2 == 0)\n        {\n            sum += e;\n\
    \        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L,\
    \ 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n \
    \   assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 1 && e % 2 == 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L,\
    \ 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) ==\
    \ 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 1 && e % 2 == 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L,\
    \ 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) ==\
    \ 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 1 && e % 2 == 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L,\
    \ 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) ==\
    \ 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 1 && e % 2 == 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L,\
    \ 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) ==\
    \ 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0;\
    \ i < lst.length; i++)\n    {\n        if (i % 2 == 1 && lst[i] % 2 == 0)\n  \
    \      {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n  \
    \  assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 1 && e % 2 == 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L,\
    \ 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) ==\
    \ 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 1 && e % 2 == 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L,\
    \ 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) ==\
    \ 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i,e; lst)\n\
    \    {\n        if(i%2==1 && e%2==0)\n        {\n            sum += e;\n     \
    \   }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = add;\n\n\
    \    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L, 7L,\
    \ 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L,\
    \ 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i, v;\
    \ lst)\n    {\n        if(i % 2 == 1 && v % 2 == 0)\n        {\n            sum\
    \ += v;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L,\
    \ 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) ==\
    \ 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i,e; lst)\n\
    \    {\n        if(i % 2 == 1 && e % 2 == 0)\n        {\n            sum += e;\n\
    \        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L,\
    \ 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n \
    \   assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 1 && e % 2 == 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L,\
    \ 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) ==\
    \ 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i,e; lst)\n\
    \    {\n        if(i % 2 == 1 && e % 2 == 0)\n        {\n            sum += e;\n\
    \        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L,\
    \ 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n \
    \   assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i, v;\
    \ lst)\n    {\n        if(i % 2 != 0 && v % 2 == 0)\n        {\n            sum\
    \ += v;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L,\
    \ 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) ==\
    \ 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 1 && e % 2 == 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L,\
    \ 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) ==\
    \ 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i,e; lst)\n\
    \    {\n        if(i % 2 == 1 && e % 2 == 0)\n        {\n            sum += e;\n\
    \        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L,\
    \ 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n \
    \   assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i,e; lst)\n\
    \    {\n        if(i%2==1 && e%2==0)\n        {\n            sum += e;\n     \
    \   }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = add;\n\n\
    \    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L, 7L,\
    \ 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L,\
    \ 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i, v;\
    \ lst)\n    {\n        if(i % 2 == 1 && v % 2 == 0)\n        {\n            sum\
    \ += v;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L,\
    \ 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) ==\
    \ 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i,e; lst)\n\
    \    {\n        if(i % 2 == 1 && e % 2 == 0)\n        {\n            sum += e;\n\
    \        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L,\
    \ 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n \
    \   assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 1 && e % 2 == 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L,\
    \ 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) ==\
    \ 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i, v;\
    \ lst)\n    {\n        if(i % 2 == 1 && v % 2 == 0)\n        {\n            sum\
    \ += v;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L,\
    \ 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) ==\
    \ 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 1 && e % 2 == 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L,\
    \ 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) ==\
    \ 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i,e; lst)\n\
    \    {\n        if(i % 2 == 1 && e % 2 == 0)\n        {\n            sum += e;\n\
    \        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L,\
    \ 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n \
    \   assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 1 && e % 2 == 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L,\
    \ 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) ==\
    \ 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i,e; lst)\n\
    \    {\n        if(i%2==1 && e%2==0)\n        {\n            sum += e;\n     \
    \   }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = add;\n\n\
    \    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L, 7L,\
    \ 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L,\
    \ 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i,e; lst)\n\
    \    {\n        if(i%2 == 1 && e%2 == 0)\n        {\n            sum += e;\n \
    \       }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L,\
    \ 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n \
    \   assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i,e; lst)\n\
    \    {\n        if(i % 2 == 1 && e % 2 == 0)\n        {\n            sum += e;\n\
    \        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L,\
    \ 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n \
    \   assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 1 && e % 2 == 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L,\
    \ 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) ==\
    \ 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i,e; lst)\n\
    \    {\n        if(i % 2 == 1 && e % 2 == 0)\n        {\n            sum += e;\n\
    \        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L,\
    \ 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n \
    \   assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 1 && e % 2 == 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L,\
    \ 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) ==\
    \ 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 1 && e % 2 == 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L,\
    \ 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) ==\
    \ 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 1 && e % 2 == 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L,\
    \ 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) ==\
    \ 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 1 && e % 2 == 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L,\
    \ 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) ==\
    \ 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 1 && e % 2 == 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L,\
    \ 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) ==\
    \ 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i,e; lst)\n\
    \    {\n        if(i%2==1 && e%2==0)\n        {\n            sum += e;\n     \
    \   }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = add;\n\n\
    \    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L, 7L,\
    \ 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L,\
    \ 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i,e; lst)\n\
    \    {\n        if(i % 2 == 1 && e % 2 == 0)\n        {\n            sum += e;\n\
    \        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L,\
    \ 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n \
    \   assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 1 && e % 2 == 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L,\
    \ 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) ==\
    \ 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i,e; lst)\n\
    \    {\n        if(i % 2 == 1 && e % 2 == 0)\n        {\n            sum += e;\n\
    \        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L,\
    \ 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n \
    \   assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i,e; lst)\n\
    \    {\n        if(i%2==1 && e%2==0)\n        {\n            sum += e;\n     \
    \   }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = add;\n\n\
    \    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L, 7L,\
    \ 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L,\
    \ 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long result = 0;\n    foreach(i,e;\
    \ lst)\n    {\n        if(i % 2 != 0 && e % 2 == 0)\n        {\n            result\
    \ += e;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L,\
    \ 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) ==\
    \ 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 1 && e % 2 == 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L,\
    \ 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) ==\
    \ 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 != 0 && e % 2 == 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L,\
    \ 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) ==\
    \ 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 1 && e % 2 == 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L,\
    \ 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) ==\
    \ 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i,v; lst)\n\
    \    {\n        if(i % 2 == 1 && v % 2 == 0)\n        {\n            sum += v;\n\
    \        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L,\
    \ 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n \
    \   assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 1 && e % 2 == 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L,\
    \ 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) ==\
    \ 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 1 && e % 2 == 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L,\
    \ 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) ==\
    \ 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i,e; lst)\n\
    \    {\n        if(i%2 != 0 && e%2 == 0)\n        {\n            sum += e;\n \
    \       }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L,\
    \ 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n \
    \   assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 1 && e % 2 == 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L,\
    \ 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) ==\
    \ 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 1 && e % 2 == 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L,\
    \ 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) ==\
    \ 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 1 && e % 2 == 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L,\
    \ 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) ==\
    \ 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i,e; lst)\n\
    \    {\n        if(i % 2 != 0 && e % 2 == 0)\n        {\n            sum += e;\n\
    \        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L,\
    \ 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n \
    \   assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i, v;\
    \ lst)\n    {\n        if(i % 2 == 1 && v % 2 == 0)\n        {\n            sum\
    \ += v;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L,\
    \ 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) ==\
    \ 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i,e; lst)\n\
    \    {\n        if(i % 2 == 1 && e % 2 == 0)\n        {\n            sum += e;\n\
    \        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L,\
    \ 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n \
    \   assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i, v;\
    \ lst)\n    {\n        if(i % 2 == 1 && v % 2 == 0)\n        {\n            sum\
    \ += v;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L,\
    \ 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) ==\
    \ 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i, v;\
    \ lst)\n    {\n        if(i % 2 == 1 && v % 2 == 0)\n        {\n            sum\
    \ += v;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L,\
    \ 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) ==\
    \ 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i, v;\
    \ lst)\n    {\n        if(i % 2 == 1 && v % 2 == 0)\n        {\n            sum\
    \ += v;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L,\
    \ 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) ==\
    \ 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 1 && e % 2 == 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L,\
    \ 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) ==\
    \ 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i,e; lst)\n\
    \    {\n        if(i % 2 == 1 && e % 2 == 0)\n        {\n            sum += e;\n\
    \        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L,\
    \ 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n \
    \   assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 1 && e % 2 == 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L,\
    \ 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) ==\
    \ 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i, v;\
    \ lst)\n    {\n        if(i % 2 == 1 && v % 2 == 0)\n        {\n            sum\
    \ += v;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L,\
    \ 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) ==\
    \ 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i,e; lst)\n\
    \    {\n        if(i % 2 == 1 && e % 2 == 0)\n        {\n            sum += e;\n\
    \        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L,\
    \ 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n \
    \   assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i, v;\
    \ lst)\n    {\n        if(i % 2 == 1 && v % 2 == 0)\n        {\n            sum\
    \ += v;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L,\
    \ 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) ==\
    \ 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 1 && e % 2 == 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L,\
    \ 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) ==\
    \ 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 1 && e % 2 == 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L,\
    \ 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) ==\
    \ 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i, elem;\
    \ lst)\n    {\n        if(i % 2 == 1 && elem % 2 == 0)\n        {\n          \
    \  sum += elem;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias\
    \ candidate = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L,\
    \ 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) ==\
    \ 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i, v;\
    \ lst)\n    {\n        if(i % 2 == 1 && v % 2 == 0)\n        {\n            sum\
    \ += v;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L,\
    \ 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) ==\
    \ 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i,v; lst)\n\
    \    {\n        if(i % 2 == 1 && v % 2 == 0)\n        {\n            sum += v;\n\
    \        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L,\
    \ 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n \
    \   assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i,e; lst)\n\
    \    {\n        if(i % 2 == 1 && e % 2 == 0)\n        {\n            sum += e;\n\
    \        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L,\
    \ 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n \
    \   assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 1 && e % 2 == 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L,\
    \ 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) ==\
    \ 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 1 && e % 2 == 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L,\
    \ 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) ==\
    \ 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i, v;\
    \ lst)\n    {\n        if(i % 2 == 1 && v % 2 == 0)\n        {\n            sum\
    \ += v;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L,\
    \ 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) ==\
    \ 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 1 && e % 2 == 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L,\
    \ 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) ==\
    \ 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 1 && e % 2 == 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L,\
    \ 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) ==\
    \ 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0;\
    \ i < lst.length; i++)\n    {\n        if (i % 2 == 1 && lst[i] % 2 == 0)\n  \
    \      {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n  \
    \  assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i,e; lst)\n\
    \    {\n        if(i%2==1 && e%2==0)\n        {\n            sum += e;\n     \
    \   }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = add;\n\n\
    \    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L, 7L,\
    \ 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L,\
    \ 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i,e; lst)\n\
    \    {\n        if(i%2 == 1 && e%2 == 0)\n        {\n            sum += e;\n \
    \       }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L,\
    \ 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n \
    \   assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 1 && e % 2 == 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L,\
    \ 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) ==\
    \ 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0;\
    \ i < lst.length; i++)\n    {\n        if (i % 2 == 1 && lst[i] % 2 == 0)\n  \
    \      {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n  \
    \  assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 1 && e % 2 == 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L,\
    \ 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) ==\
    \ 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 1 && e % 2 == 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L,\
    \ 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) ==\
    \ 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i,e; lst)\n\
    \    {\n        if(i % 2 != 0 && e % 2 == 0)\n        {\n            sum += e;\n\
    \        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L,\
    \ 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n \
    \   assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i,e; lst)\n\
    \    {\n        if(i % 2 == 1 && e % 2 == 0)\n        {\n            sum += e;\n\
    \        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L,\
    \ 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n \
    \   assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i,e; lst)\n\
    \    {\n        if(i%2==1 && e%2==0)\n        {\n            sum += e;\n     \
    \   }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = add;\n\n\
    \    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L, 7L,\
    \ 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L,\
    \ 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i,e; lst)\n\
    \    {\n        if(i % 2 == 1 && e % 2 == 0)\n        {\n            sum += e;\n\
    \        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L,\
    \ 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n \
    \   assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 1 && e % 2 == 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L,\
    \ 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) ==\
    \ 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i,e; lst)\n\
    \    {\n        if(i%2==1 && e%2==0)\n        {\n            sum += e;\n     \
    \   }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = add;\n\n\
    \    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L, 7L,\
    \ 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L,\
    \ 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i,v;lst)\n\
    \    {\n        if(i%2==1 && v%2==0)\n            sum+=v;\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L, 88L])\
    \ == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i,e; lst)\n\
    \    {\n        if(i % 2 == 1 && e % 2 == 0)\n        {\n            sum += e;\n\
    \        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L,\
    \ 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n \
    \   assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 1 && e % 2 == 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L,\
    \ 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) ==\
    \ 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 1 && e % 2 == 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L,\
    \ 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) ==\
    \ 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long result = 0;\n    foreach(i,\
    \ e; lst)\n    {\n        if(i % 2 == 1 && e % 2 == 0)\n        {\n          \
    \  result += e;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L,\
    \ 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) ==\
    \ 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 1 && e % 2 == 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L,\
    \ 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) ==\
    \ 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i, v;\
    \ lst)\n    {\n        if(i % 2 == 1 && v % 2 == 0)\n        {\n            sum\
    \ += v;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L,\
    \ 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) ==\
    \ 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i,e; lst)\n\
    \    {\n        if(i % 2 != 0 && e % 2 == 0)\n        {\n            sum += e;\n\
    \        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L,\
    \ 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n \
    \   assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i,e; lst)\n\
    \    {\n        if(i % 2 == 1 && e % 2 == 0)\n        {\n            sum += e;\n\
    \        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L,\
    \ 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n \
    \   assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i,e; lst)\n\
    \    {\n        if(i % 2 != 0 && e % 2 == 0)\n        {\n            sum += e;\n\
    \        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L,\
    \ 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n \
    \   assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 1 && e % 2 == 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L,\
    \ 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) ==\
    \ 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i,e; lst)\n\
    \    {\n        if(i % 2 == 1 && e % 2 == 0)\n        {\n            sum += e;\n\
    \        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L,\
    \ 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n \
    \   assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i, v;\
    \ lst)\n    {\n        if(i % 2 == 1 && v % 2 == 0)\n        {\n            sum\
    \ += v;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L,\
    \ 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) ==\
    \ 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 1 && e % 2 == 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L,\
    \ 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) ==\
    \ 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0;\
    \ i < lst.length; i++)\n    {\n        if (i % 2 == 1 && lst[i] % 2 == 0)\n  \
    \      {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n  \
    \  assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0;\
    \ i < lst.length; i++)\n    {\n        if (i % 2 == 1 && lst[i] % 2 == 0)\n  \
    \      {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n  \
    \  assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i, v;\
    \ lst)\n    {\n        if(i % 2 == 1 && v % 2 == 0)\n        {\n            sum\
    \ += v;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L,\
    \ 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) ==\
    \ 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 1 && e % 2 == 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L,\
    \ 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) ==\
    \ 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 1 && e % 2 == 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L,\
    \ 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) ==\
    \ 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 1 && e % 2 == 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L,\
    \ 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) ==\
    \ 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 1 && e % 2 == 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L,\
    \ 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) ==\
    \ 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i,e; lst)\n\
    \    {\n        if(i%2==1 && e%2==0)\n        {\n            sum += e;\n     \
    \   }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = add;\n\n\
    \    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L, 7L,\
    \ 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L,\
    \ 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 1 && e % 2 == 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L,\
    \ 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) ==\
    \ 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i, v;\
    \ lst)\n    {\n        if(i % 2 == 1 && v % 2 == 0)\n        {\n            sum\
    \ += v;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L,\
    \ 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) ==\
    \ 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 1 && e % 2 == 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L,\
    \ 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) ==\
    \ 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 1 && e % 2 == 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L,\
    \ 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) ==\
    \ 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    return lst.filter!(a => a % 2 ==\
    \ 0).sum;\n}\nunittest\n{\n    alias candidate = add;\n\n    assert(candidate([4L,\
    \ 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n\
    \    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L,\
    \ 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsjvw758c.d(12): Error: no property `filter` for type `long[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsjvw758c.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164308
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i,e; lst)\n\
    \    {\n        if(i % 2 == 1 && e % 2 == 0)\n        {\n            sum += e;\n\
    \        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L,\
    \ 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n \
    \   assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 1 && e % 2 == 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\n/*\n    add([1,2,3,4,5,6,7,8,9])\
    \ == 6\n    add([1,2,3,4,5,6,7,8,9,10]) == 6\n    add([1,2,3,4,5,6,7,8,9,10,11])\
    \ == 6\n    add([1,2,3,4,5,6,7,8,9,10,11,12]) == 18\n    add([1,2,3,4,5,6,7,8,9,10,11,12,13])\
    \ == 18\n    add([1,2,3,4,5,6,7,8,9,10,11,12,13,14]) == 18\n    add([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])\
    \ == 18\n    add([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]) == 18\n    add([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17])\
    \ == 18\n    add([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18]) == 18\n    add([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19])\
    \ == 18\n    add([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]) == 18\n\
    \    add([1,2,3,4,5,6,7,8,9,10,11,12,\nunittest\n{\n    alias candidate = add;\n\
    \n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L, 5L, 6L,\
    \ 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) == 0L);\n \
    \   assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2tbh_3ca.d(22): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2tbh_3ca.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 1 && e % 2 == 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L,\
    \ 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) ==\
    \ 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    for (int i = 0;\
    \ i < lst.length; i++)\n    {\n        if (i % 2 == 1 && lst[i] % 2 == 0)\n  \
    \      {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n  \
    \  assert(candidate([4L, 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L,\
    \ 0L, 6L, 7L]) == 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid\
    \ main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 1 && e % 2 == 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\n/*\n    add([1, 2, 3, 4, 5, 6])\
    \ == 6\n    add([1, 2, 3, 4, 5, 6, 7, 8]) == 14\n    add([1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10]) == 14\n    add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == 24\n \
    \   add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]) == 40\n    add([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 50\n\
    \    add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\
    \ 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 80\n    add([1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27,\
    \ 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40]) == 120\n    add([1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,\
    \ 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42,\
    \ 43, 44, 45, 46, 47, 48, 49, 50]) == 170\n    add([1, 2, 3,\nunittest\n{\n  \
    \  alias candidate = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L,\
    \ 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) ==\
    \ 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprgtxhroo.d(22): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprgtxhroo.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i, v;\
    \ lst)\n    {\n        if(i % 2 == 1 && v % 2 == 0)\n        {\n            sum\
    \ += v;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L,\
    \ 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) ==\
    \ 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nGiven a non-empty list of\
    \ integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n\
    \        \n*/\nlong add(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e;\
    \ lst)\n    {\n        if(i % 2 == 1 && e % 2 == 0)\n        {\n            sum\
    \ += e;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = add;\n\n    assert(candidate([4L, 88L]) == 88L);\n    assert(candidate([4L,\
    \ 5L, 6L, 7L, 2L, 122L]) == 122L);\n    assert(candidate([4L, 0L, 6L, 7L]) ==\
    \ 0L);\n    assert(candidate([4L, 4L, 6L, 8L]) == 12L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164309
