language: d
name: HumanEval_139_special_factorial
results:
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n+1)\n    {\n        result *= factorial(i);\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4y2pgqqu.d(19): Error: undefined identifier `factorial`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4y2pgqqu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkwyfc6h8.d(19): Error: undefined identifier `factorial`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkwyfc6h8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkwyfc6h8.d(19): Error: undefined identifier `factorial`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkwyfc6h8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n)\n    {\n        result *= i;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n\
    \    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n\
    \    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpm659p15i.d(27): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d65]

    ??:? void tmpm659p15i.__unittest_L23_C1() [0x427a62]

    ??:? void tmpm659p15i.__modtest() [0x427ae8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba8b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a91e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa3d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8f5]

    ??:? runModuleUnitTests [0x42b861]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281b4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkwyfc6h8.d(19): Error: undefined identifier `factorial`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkwyfc6h8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n+1)\n    {\n        result *= factorial(i);\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4y2pgqqu.d(19): Error: undefined identifier `factorial`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4y2pgqqu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkwyfc6h8.d(19): Error: undefined identifier `factorial`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkwyfc6h8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n+1)\n    {\n        result *= factorial(i);\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4y2pgqqu.d(19): Error: undefined identifier `factorial`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4y2pgqqu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkwyfc6h8.d(19): Error: undefined identifier `factorial`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkwyfc6h8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkwyfc6h8.d(19): Error: undefined identifier `factorial`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkwyfc6h8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkwyfc6h8.d(19): Error: undefined identifier `factorial`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkwyfc6h8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkwyfc6h8.d(19): Error: undefined identifier `factorial`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkwyfc6h8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkwyfc6h8.d(19): Error: undefined identifier `factorial`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkwyfc6h8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n+1)\n    {\n        result *= factorial(i);\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4y2pgqqu.d(19): Error: undefined identifier `factorial`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4y2pgqqu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n)\n    {\n        result *= i;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n\
    \    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n\
    \    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpm659p15i.d(27): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d65]

    ??:? void tmpm659p15i.__unittest_L23_C1() [0x427a62]

    ??:? void tmpm659p15i.__modtest() [0x427ae8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba8b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a91e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa3d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8f5]

    ??:? runModuleUnitTests [0x42b861]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281b4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    for (long\
    \ i = n; i > 0; i--)\n    {\n        result *= i;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpa0_dtbjo.d(27): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d5d]

    ??:? void tmpa0_dtbjo.__unittest_L23_C1() [0x427a5a]

    ??:? void tmpa0_dtbjo.__modtest() [0x427ae0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba83]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a916]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42faa9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff58]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa35]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8ed]

    ??:? runModuleUnitTests [0x42b859]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281ac]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n)\n    {\n        result *= i;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n\
    \    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n\
    \    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpm659p15i.d(27): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d65]

    ??:? void tmpm659p15i.__unittest_L23_C1() [0x427a62]

    ??:? void tmpm659p15i.__modtest() [0x427ae8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba8b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a91e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa3d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8f5]

    ??:? runModuleUnitTests [0x42b861]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281b4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkwyfc6h8.d(19): Error: undefined identifier `factorial`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkwyfc6h8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkwyfc6h8.d(19): Error: undefined identifier `factorial`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkwyfc6h8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkwyfc6h8.d(19): Error: undefined identifier `factorial`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkwyfc6h8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkwyfc6h8.d(19): Error: undefined identifier `factorial`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkwyfc6h8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkwyfc6h8.d(19): Error: undefined identifier `factorial`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkwyfc6h8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkwyfc6h8.d(19): Error: undefined identifier `factorial`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkwyfc6h8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n+1)\n    {\n        result *= factorial(i);\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4y2pgqqu.d(19): Error: undefined identifier `factorial`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4y2pgqqu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n)\n    {\n        result *= i;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n\
    \    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n\
    \    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpm659p15i.d(27): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d65]

    ??:? void tmpm659p15i.__unittest_L23_C1() [0x427a62]

    ??:? void tmpm659p15i.__modtest() [0x427ae8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba8b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a91e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa3d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8f5]

    ??:? runModuleUnitTests [0x42b861]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281b4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkwyfc6h8.d(19): Error: undefined identifier `factorial`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkwyfc6h8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    for (long\
    \ i = n; i > 0; i--)\n    {\n        result *= i;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpa0_dtbjo.d(27): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d5d]

    ??:? void tmpa0_dtbjo.__unittest_L23_C1() [0x427a5a]

    ??:? void tmpa0_dtbjo.__modtest() [0x427ae0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba83]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a916]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42faa9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff58]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa35]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8ed]

    ??:? runModuleUnitTests [0x42b859]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281ac]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n+1)\n    {\n        result *= factorial(i);\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4y2pgqqu.d(19): Error: undefined identifier `factorial`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4y2pgqqu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkwyfc6h8.d(19): Error: undefined identifier `factorial`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkwyfc6h8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    for (long\
    \ i = n; i > 0; i--)\n    {\n        result *= i;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpa0_dtbjo.d(27): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d5d]

    ??:? void tmpa0_dtbjo.__unittest_L23_C1() [0x427a5a]

    ??:? void tmpa0_dtbjo.__modtest() [0x427ae0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba83]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a916]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42faa9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff58]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa35]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8ed]

    ??:? runModuleUnitTests [0x42b859]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281ac]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkwyfc6h8.d(19): Error: undefined identifier `factorial`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkwyfc6h8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    for (long\
    \ i = n; i > 0; i--)\n    {\n        result *= i;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpa0_dtbjo.d(27): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d5d]

    ??:? void tmpa0_dtbjo.__unittest_L23_C1() [0x427a5a]

    ??:? void tmpa0_dtbjo.__modtest() [0x427ae0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba83]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a916]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42faa9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff58]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa35]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8ed]

    ??:? runModuleUnitTests [0x42b859]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281ac]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkwyfc6h8.d(19): Error: undefined identifier `factorial`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkwyfc6h8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkwyfc6h8.d(19): Error: undefined identifier `factorial`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkwyfc6h8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    for (int\
    \ i = n; i > 0; i--)\n    {\n        result *= factorial(i);\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6ri6koqo.d(17): Error: cannot implicitly convert expression `n`
    of type `long` to `int`

    /tmp/tmp6ri6koqo.d(19): Error: undefined identifier `factorial`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6ri6koqo.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkwyfc6h8.d(19): Error: undefined identifier `factorial`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkwyfc6h8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    if (n <= 1)\n        return 1;\n\
    \    return n * special_factorial(n - 1);\n}\nunittest\n{\n    alias candidate\
    \ = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L)\
    \ == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L)\
    \ == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpz06r_2hr.d(24): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d5d]

    ??:? void tmpz06r_2hr.__unittest_L20_C1() [0x427a5a]

    ??:? void tmpz06r_2hr.__modtest() [0x427ae0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba83]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a916]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42faa9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff58]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa35]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8ed]

    ??:? runModuleUnitTests [0x42b859]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281ac]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n+1)\n    {\n        result *= factorial(i);\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4y2pgqqu.d(19): Error: undefined identifier `factorial`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4y2pgqqu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkwyfc6h8.d(19): Error: undefined identifier `factorial`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkwyfc6h8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n+1)\n    {\n        result *= factorial(i);\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4y2pgqqu.d(19): Error: undefined identifier `factorial`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4y2pgqqu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkwyfc6h8.d(19): Error: undefined identifier `factorial`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkwyfc6h8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    if (n == 0)\n        return 1;\n\
    \    long result = n;\n    for (long i = n - 1; i > 0; i--)\n        result *=\
    \ i;\n    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpyeuuwmxs.d(27): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d7d]

    ??:? void tmpyeuuwmxs.__unittest_L23_C1() [0x427a76]

    ??:? void tmpyeuuwmxs.__modtest() [0x427afc]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baa3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a936]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fac9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff78]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa55]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a90d]

    ??:? runModuleUnitTests [0x42b879]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281cc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n)\n    {\n        result *= i;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n\
    \    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n\
    \    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpm659p15i.d(27): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d65]

    ??:? void tmpm659p15i.__unittest_L23_C1() [0x427a62]

    ??:? void tmpm659p15i.__modtest() [0x427ae8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba8b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a91e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa3d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8f5]

    ??:? runModuleUnitTests [0x42b861]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281b4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkwyfc6h8.d(19): Error: undefined identifier `factorial`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkwyfc6h8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkwyfc6h8.d(19): Error: undefined identifier `factorial`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkwyfc6h8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkwyfc6h8.d(19): Error: undefined identifier `factorial`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkwyfc6h8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkwyfc6h8.d(19): Error: undefined identifier `factorial`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkwyfc6h8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkwyfc6h8.d(19): Error: undefined identifier `factorial`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkwyfc6h8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkwyfc6h8.d(19): Error: undefined identifier `factorial`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkwyfc6h8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkwyfc6h8.d(19): Error: undefined identifier `factorial`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkwyfc6h8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long res = 1;\n    foreach(i;\
    \ 1..n)\n    {\n        res *= i;\n    }\n    return res;\n}\nunittest\n{\n  \
    \  alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n\
    \    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n\
    \    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpl5l0jgqt.d(27): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d65]

    ??:? void tmpl5l0jgqt.__unittest_L23_C1() [0x427a62]

    ??:? void tmpl5l0jgqt.__modtest() [0x427ae8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba8b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a91e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa3d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8f5]

    ??:? runModuleUnitTests [0x42b861]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281b4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkwyfc6h8.d(19): Error: undefined identifier `factorial`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkwyfc6h8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkwyfc6h8.d(19): Error: undefined identifier `factorial`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkwyfc6h8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkwyfc6h8.d(19): Error: undefined identifier `factorial`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkwyfc6h8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long res = 1;\n    foreach(i;\
    \ 1..n+1)\n    {\n        res *= factorial(i);\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n\
    \    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n\
    \    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqtyjrci8.d(19): Error: undefined identifier `factorial`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqtyjrci8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkwyfc6h8.d(19): Error: undefined identifier `factorial`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkwyfc6h8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkwyfc6h8.d(19): Error: undefined identifier `factorial`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkwyfc6h8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkwyfc6h8.d(19): Error: undefined identifier `factorial`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkwyfc6h8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkwyfc6h8.d(19): Error: undefined identifier `factorial`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkwyfc6h8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkwyfc6h8.d(19): Error: undefined identifier `factorial`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkwyfc6h8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkwyfc6h8.d(19): Error: undefined identifier `factorial`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkwyfc6h8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long res = 1;\n    foreach(i;\
    \ 1..n)\n    {\n        res *= i;\n    }\n    return res;\n}\nunittest\n{\n  \
    \  alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n\
    \    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n\
    \    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpl5l0jgqt.d(27): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d65]

    ??:? void tmpl5l0jgqt.__unittest_L23_C1() [0x427a62]

    ??:? void tmpl5l0jgqt.__modtest() [0x427ae8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba8b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a91e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa3d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8f5]

    ??:? runModuleUnitTests [0x42b861]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281b4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkwyfc6h8.d(19): Error: undefined identifier `factorial`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkwyfc6h8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkwyfc6h8.d(19): Error: undefined identifier `factorial`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkwyfc6h8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n+1)\n    {\n        result *= factorial(i);\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4y2pgqqu.d(19): Error: undefined identifier `factorial`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4y2pgqqu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    if (n <= 1)\n        return 1;\n\
    \    return n * special_factorial(n - 1);\n}\nunittest\n{\n    alias candidate\
    \ = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L)\
    \ == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L)\
    \ == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpz06r_2hr.d(24): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d5d]

    ??:? void tmpz06r_2hr.__unittest_L20_C1() [0x427a5a]

    ??:? void tmpz06r_2hr.__modtest() [0x427ae0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba83]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a916]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42faa9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff58]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa35]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8ed]

    ??:? runModuleUnitTests [0x42b859]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281ac]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkwyfc6h8.d(19): Error: undefined identifier `factorial`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkwyfc6h8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkwyfc6h8.d(19): Error: undefined identifier `factorial`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkwyfc6h8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkwyfc6h8.d(19): Error: undefined identifier `factorial`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkwyfc6h8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkwyfc6h8.d(19): Error: undefined identifier `factorial`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkwyfc6h8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    for (long\
    \ i = n; i > 0; i--)\n    {\n        result *= i;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpa0_dtbjo.d(27): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d5d]

    ??:? void tmpa0_dtbjo.__unittest_L23_C1() [0x427a5a]

    ??:? void tmpa0_dtbjo.__modtest() [0x427ae0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba83]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a916]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42faa9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff58]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa35]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8ed]

    ??:? runModuleUnitTests [0x42b859]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281ac]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkwyfc6h8.d(19): Error: undefined identifier `factorial`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkwyfc6h8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkwyfc6h8.d(19): Error: undefined identifier `factorial`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkwyfc6h8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkwyfc6h8.d(19): Error: undefined identifier `factorial`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkwyfc6h8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkwyfc6h8.d(19): Error: undefined identifier `factorial`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkwyfc6h8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkwyfc6h8.d(19): Error: undefined identifier `factorial`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkwyfc6h8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n+1)\n    {\n        result *= factorial(i);\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4y2pgqqu.d(19): Error: undefined identifier `factorial`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4y2pgqqu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkwyfc6h8.d(19): Error: undefined identifier `factorial`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkwyfc6h8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkwyfc6h8.d(19): Error: undefined identifier `factorial`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkwyfc6h8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkwyfc6h8.d(19): Error: undefined identifier `factorial`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkwyfc6h8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    // your code here\n    long result\
    \ = 1;\n    foreach(i; 1..n)\n    {\n        result *= factorial(i);\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpga4aoqdc.d(20): Error: undefined identifier `factorial`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpga4aoqdc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n+1)\n    {\n        result *= factorial(i);\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4y2pgqqu.d(19): Error: undefined identifier `factorial`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4y2pgqqu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n)\n    {\n        result *= i;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n\
    \    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n\
    \    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpm659p15i.d(27): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d65]

    ??:? void tmpm659p15i.__unittest_L23_C1() [0x427a62]

    ??:? void tmpm659p15i.__modtest() [0x427ae8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba8b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a91e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa3d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8f5]

    ??:? runModuleUnitTests [0x42b861]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281b4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkwyfc6h8.d(19): Error: undefined identifier `factorial`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkwyfc6h8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n+1)\n    {\n        result *= factorial(i);\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4y2pgqqu.d(19): Error: undefined identifier `factorial`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4y2pgqqu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkwyfc6h8.d(19): Error: undefined identifier `factorial`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkwyfc6h8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n)\n    {\n        result *= i;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n\
    \    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n\
    \    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpm659p15i.d(27): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d65]

    ??:? void tmpm659p15i.__unittest_L23_C1() [0x427a62]

    ??:? void tmpm659p15i.__modtest() [0x427ae8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba8b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a91e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa3d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8f5]

    ??:? runModuleUnitTests [0x42b861]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281b4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n)\n    {\n        result *= i;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n\
    \    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n\
    \    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpm659p15i.d(27): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d65]

    ??:? void tmpm659p15i.__unittest_L23_C1() [0x427a62]

    ??:? void tmpm659p15i.__modtest() [0x427ae8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba8b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a91e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa3d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8f5]

    ??:? runModuleUnitTests [0x42b861]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281b4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n)\n    {\n        result *= i;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n\
    \    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n\
    \    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpm659p15i.d(27): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d65]

    ??:? void tmpm659p15i.__unittest_L23_C1() [0x427a62]

    ??:? void tmpm659p15i.__modtest() [0x427ae8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba8b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a91e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa3d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8f5]

    ??:? runModuleUnitTests [0x42b861]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281b4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n+1)\n    {\n        result *= factorial(i);\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4y2pgqqu.d(19): Error: undefined identifier `factorial`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4y2pgqqu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkwyfc6h8.d(19): Error: undefined identifier `factorial`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkwyfc6h8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long factorial = 1;\n    foreach(i;\
    \ 1..n)\n    {\n        factorial *= i;\n    }\n    return factorial;\n}\nunittest\n\
    {\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n\
    \    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n\
    \    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpbpdw5jnt.d(27): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d65]

    ??:? void tmpbpdw5jnt.__unittest_L23_C1() [0x427a62]

    ??:? void tmpbpdw5jnt.__modtest() [0x427ae8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba8b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a91e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa3d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8f5]

    ??:? runModuleUnitTests [0x42b861]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281b4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkwyfc6h8.d(19): Error: undefined identifier `factorial`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkwyfc6h8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkwyfc6h8.d(19): Error: undefined identifier `factorial`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkwyfc6h8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    for (long\
    \ i = n; i > 0; i--)\n    {\n        result *= i;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpa0_dtbjo.d(27): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d5d]

    ??:? void tmpa0_dtbjo.__unittest_L23_C1() [0x427a5a]

    ??:? void tmpa0_dtbjo.__modtest() [0x427ae0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba83]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a916]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42faa9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff58]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa35]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8ed]

    ??:? runModuleUnitTests [0x42b859]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281ac]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n+1)\n    {\n        result *= factorial(i);\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4y2pgqqu.d(19): Error: undefined identifier `factorial`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4y2pgqqu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkwyfc6h8.d(19): Error: undefined identifier `factorial`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkwyfc6h8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkwyfc6h8.d(19): Error: undefined identifier `factorial`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkwyfc6h8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n+1)\n    {\n        result *= factorial(i);\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4y2pgqqu.d(19): Error: undefined identifier `factorial`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4y2pgqqu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkwyfc6h8.d(19): Error: undefined identifier `factorial`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkwyfc6h8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkwyfc6h8.d(19): Error: undefined identifier `factorial`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkwyfc6h8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkwyfc6h8.d(19): Error: undefined identifier `factorial`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkwyfc6h8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n+1)\n    {\n        result *= factorial(i);\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4y2pgqqu.d(19): Error: undefined identifier `factorial`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4y2pgqqu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkwyfc6h8.d(19): Error: undefined identifier `factorial`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkwyfc6h8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkwyfc6h8.d(19): Error: undefined identifier `factorial`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkwyfc6h8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkwyfc6h8.d(19): Error: undefined identifier `factorial`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkwyfc6h8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n+1)\n    {\n        result *= factorial(i);\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4y2pgqqu.d(19): Error: undefined identifier `factorial`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4y2pgqqu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    for (long\
    \ i = n; i > 0; i--)\n    {\n        result *= i;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpa0_dtbjo.d(27): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d5d]

    ??:? void tmpa0_dtbjo.__unittest_L23_C1() [0x427a5a]

    ??:? void tmpa0_dtbjo.__modtest() [0x427ae0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba83]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a916]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42faa9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff58]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa35]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8ed]

    ??:? runModuleUnitTests [0x42b859]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281ac]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n)\n    {\n        result *= i;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n\
    \    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n\
    \    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpm659p15i.d(27): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d65]

    ??:? void tmpm659p15i.__unittest_L23_C1() [0x427a62]

    ??:? void tmpm659p15i.__modtest() [0x427ae8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba8b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a91e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa3d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8f5]

    ??:? runModuleUnitTests [0x42b861]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281b4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkwyfc6h8.d(19): Error: undefined identifier `factorial`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkwyfc6h8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n)\n    {\n        result *= i;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n\
    \    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n\
    \    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpm659p15i.d(27): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d65]

    ??:? void tmpm659p15i.__unittest_L23_C1() [0x427a62]

    ??:? void tmpm659p15i.__modtest() [0x427ae8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba8b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a91e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa3d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8f5]

    ??:? runModuleUnitTests [0x42b861]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281b4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkwyfc6h8.d(19): Error: undefined identifier `factorial`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkwyfc6h8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    if (n <= 1)\n        return 1;\n\
    \    else\n        return n * special_factorial(n - 1);\n}\nunittest\n{\n    alias\
    \ candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L)\
    \ == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L)\
    \ == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp7i7yqty3.d(25): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d5d]

    ??:? void tmp7i7yqty3.__unittest_L21_C1() [0x427a5a]

    ??:? void tmp7i7yqty3.__modtest() [0x427ae0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba83]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a916]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42faa9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff58]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa35]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8ed]

    ??:? runModuleUnitTests [0x42b859]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281ac]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    for (long\
    \ i = n; i > 0; i--)\n    {\n        result *= i;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpa0_dtbjo.d(27): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d5d]

    ??:? void tmpa0_dtbjo.__unittest_L23_C1() [0x427a5a]

    ??:? void tmpa0_dtbjo.__modtest() [0x427ae0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba83]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a916]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42faa9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff58]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa35]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8ed]

    ??:? runModuleUnitTests [0x42b859]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281ac]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkwyfc6h8.d(19): Error: undefined identifier `factorial`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkwyfc6h8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkwyfc6h8.d(19): Error: undefined identifier `factorial`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkwyfc6h8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkwyfc6h8.d(19): Error: undefined identifier `factorial`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkwyfc6h8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n)\n    {\n        result *= i;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n\
    \    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n\
    \    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpm659p15i.d(27): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d65]

    ??:? void tmpm659p15i.__unittest_L23_C1() [0x427a62]

    ??:? void tmpm659p15i.__modtest() [0x427ae8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba8b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a91e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa3d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8f5]

    ??:? runModuleUnitTests [0x42b861]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281b4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkwyfc6h8.d(19): Error: undefined identifier `factorial`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkwyfc6h8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkwyfc6h8.d(19): Error: undefined identifier `factorial`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkwyfc6h8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkwyfc6h8.d(19): Error: undefined identifier `factorial`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkwyfc6h8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkwyfc6h8.d(19): Error: undefined identifier `factorial`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkwyfc6h8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkwyfc6h8.d(19): Error: undefined identifier `factorial`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkwyfc6h8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkwyfc6h8.d(19): Error: undefined identifier `factorial`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkwyfc6h8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkwyfc6h8.d(19): Error: undefined identifier `factorial`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkwyfc6h8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkwyfc6h8.d(19): Error: undefined identifier `factorial`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkwyfc6h8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkwyfc6h8.d(19): Error: undefined identifier `factorial`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkwyfc6h8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkwyfc6h8.d(19): Error: undefined identifier `factorial`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkwyfc6h8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkwyfc6h8.d(19): Error: undefined identifier `factorial`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkwyfc6h8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    for (long\
    \ i = n; i > 0; i--)\n    {\n        result *= i;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpa0_dtbjo.d(27): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d5d]

    ??:? void tmpa0_dtbjo.__unittest_L23_C1() [0x427a5a]

    ??:? void tmpa0_dtbjo.__modtest() [0x427ae0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba83]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a916]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42faa9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff58]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa35]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8ed]

    ??:? runModuleUnitTests [0x42b859]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281ac]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n)\n    {\n        result *= i;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n\
    \    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n\
    \    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpm659p15i.d(27): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d65]

    ??:? void tmpm659p15i.__unittest_L23_C1() [0x427a62]

    ??:? void tmpm659p15i.__modtest() [0x427ae8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba8b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a91e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa3d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8f5]

    ??:? runModuleUnitTests [0x42b861]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281b4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long factorial = 1;\n    foreach(i;\
    \ 1..n)\n    {\n        factorial *= i;\n    }\n    return factorial;\n}\nunittest\n\
    {\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n\
    \    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n\
    \    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpbpdw5jnt.d(27): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d65]

    ??:? void tmpbpdw5jnt.__unittest_L23_C1() [0x427a62]

    ??:? void tmpbpdw5jnt.__modtest() [0x427ae8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba8b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a91e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa3d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8f5]

    ??:? runModuleUnitTests [0x42b861]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281b4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    if (n <= 1)\n        return 1;\n\
    \    return n * special_factorial(n - 1);\n}\nunittest\n{\n    alias candidate\
    \ = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L)\
    \ == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L)\
    \ == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpz06r_2hr.d(24): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d5d]

    ??:? void tmpz06r_2hr.__unittest_L20_C1() [0x427a5a]

    ??:? void tmpz06r_2hr.__modtest() [0x427ae0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba83]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a916]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42faa9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff58]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa35]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8ed]

    ??:? runModuleUnitTests [0x42b859]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281ac]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkwyfc6h8.d(19): Error: undefined identifier `factorial`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkwyfc6h8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkwyfc6h8.d(19): Error: undefined identifier `factorial`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkwyfc6h8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkwyfc6h8.d(19): Error: undefined identifier `factorial`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkwyfc6h8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkwyfc6h8.d(19): Error: undefined identifier `factorial`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkwyfc6h8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n+1)\n    {\n        result *= factorial(i);\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4y2pgqqu.d(19): Error: undefined identifier `factorial`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4y2pgqqu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n+1)\n    {\n        result *= factorial(i);\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4y2pgqqu.d(19): Error: undefined identifier `factorial`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4y2pgqqu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n+1)\n    {\n        result *= factorial(i);\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4y2pgqqu.d(19): Error: undefined identifier `factorial`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4y2pgqqu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkwyfc6h8.d(19): Error: undefined identifier `factorial`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkwyfc6h8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n)\n    {\n        result *= i;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n\
    \    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n\
    \    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpm659p15i.d(27): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d65]

    ??:? void tmpm659p15i.__unittest_L23_C1() [0x427a62]

    ??:? void tmpm659p15i.__modtest() [0x427ae8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba8b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a91e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa3d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8f5]

    ??:? runModuleUnitTests [0x42b861]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281b4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    for (long\
    \ i = n; i > 0; i--)\n    {\n        result *= i;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpa0_dtbjo.d(27): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d5d]

    ??:? void tmpa0_dtbjo.__unittest_L23_C1() [0x427a5a]

    ??:? void tmpa0_dtbjo.__modtest() [0x427ae0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba83]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a916]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42faa9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff58]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa35]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8ed]

    ??:? runModuleUnitTests [0x42b859]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281ac]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkwyfc6h8.d(19): Error: undefined identifier `factorial`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkwyfc6h8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkwyfc6h8.d(19): Error: undefined identifier `factorial`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkwyfc6h8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkwyfc6h8.d(19): Error: undefined identifier `factorial`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkwyfc6h8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkwyfc6h8.d(19): Error: undefined identifier `factorial`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkwyfc6h8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkwyfc6h8.d(19): Error: undefined identifier `factorial`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkwyfc6h8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    for (long\
    \ i = n; i > 0; i--)\n    {\n        result *= i;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpa0_dtbjo.d(27): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d5d]

    ??:? void tmpa0_dtbjo.__unittest_L23_C1() [0x427a5a]

    ??:? void tmpa0_dtbjo.__modtest() [0x427ae0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba83]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a916]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42faa9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff58]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa35]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8ed]

    ??:? runModuleUnitTests [0x42b859]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281ac]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n)\n    {\n        result *= i;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n\
    \    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n\
    \    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpm659p15i.d(27): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d65]

    ??:? void tmpm659p15i.__unittest_L23_C1() [0x427a62]

    ??:? void tmpm659p15i.__modtest() [0x427ae8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba8b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a91e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa3d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8f5]

    ??:? runModuleUnitTests [0x42b861]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281b4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkwyfc6h8.d(19): Error: undefined identifier `factorial`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkwyfc6h8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkwyfc6h8.d(19): Error: undefined identifier `factorial`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkwyfc6h8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkwyfc6h8.d(19): Error: undefined identifier `factorial`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkwyfc6h8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkwyfc6h8.d(19): Error: undefined identifier `factorial`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkwyfc6h8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n+1)\n    {\n        result *= factorial(i);\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4y2pgqqu.d(19): Error: undefined identifier `factorial`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4y2pgqqu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkwyfc6h8.d(19): Error: undefined identifier `factorial`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkwyfc6h8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n+1)\n    {\n        result *= factorial(i);\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4y2pgqqu.d(19): Error: undefined identifier `factorial`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4y2pgqqu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkwyfc6h8.d(19): Error: undefined identifier `factorial`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkwyfc6h8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkwyfc6h8.d(19): Error: undefined identifier `factorial`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkwyfc6h8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkwyfc6h8.d(19): Error: undefined identifier `factorial`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkwyfc6h8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n+1)\n    {\n        result *= factorial(i);\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4y2pgqqu.d(19): Error: undefined identifier `factorial`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4y2pgqqu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n+1)\n    {\n        result *= factorial(i);\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4y2pgqqu.d(19): Error: undefined identifier `factorial`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4y2pgqqu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n)\n    {\n        result *= i;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n\
    \    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n\
    \    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpm659p15i.d(27): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d65]

    ??:? void tmpm659p15i.__unittest_L23_C1() [0x427a62]

    ??:? void tmpm659p15i.__modtest() [0x427ae8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba8b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a91e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa3d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8f5]

    ??:? runModuleUnitTests [0x42b861]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281b4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n)\n    {\n        result *= i;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n\
    \    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n\
    \    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpm659p15i.d(27): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d65]

    ??:? void tmpm659p15i.__unittest_L23_C1() [0x427a62]

    ??:? void tmpm659p15i.__modtest() [0x427ae8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba8b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a91e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa3d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8f5]

    ??:? runModuleUnitTests [0x42b861]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281b4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkwyfc6h8.d(19): Error: undefined identifier `factorial`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkwyfc6h8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    for (long\
    \ i = n; i > 0; i--)\n    {\n        result *= i;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpa0_dtbjo.d(27): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d5d]

    ??:? void tmpa0_dtbjo.__unittest_L23_C1() [0x427a5a]

    ??:? void tmpa0_dtbjo.__modtest() [0x427ae0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba83]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a916]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42faa9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff58]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa35]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8ed]

    ??:? runModuleUnitTests [0x42b859]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281ac]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkwyfc6h8.d(19): Error: undefined identifier `factorial`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkwyfc6h8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n)\n    {\n        result *= i;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n\
    \    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n\
    \    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpm659p15i.d(27): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d65]

    ??:? void tmpm659p15i.__unittest_L23_C1() [0x427a62]

    ??:? void tmpm659p15i.__modtest() [0x427ae8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba8b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a91e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa3d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8f5]

    ??:? runModuleUnitTests [0x42b861]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281b4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkwyfc6h8.d(19): Error: undefined identifier `factorial`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkwyfc6h8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkwyfc6h8.d(19): Error: undefined identifier `factorial`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkwyfc6h8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n)\n    {\n        result *= i;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n\
    \    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n\
    \    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpm659p15i.d(27): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d65]

    ??:? void tmpm659p15i.__unittest_L23_C1() [0x427a62]

    ??:? void tmpm659p15i.__modtest() [0x427ae8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba8b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a91e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa3d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8f5]

    ??:? runModuleUnitTests [0x42b861]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281b4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    for (long\
    \ i = n; i > 0; i--)\n    {\n        result *= i;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpa0_dtbjo.d(27): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d5d]

    ??:? void tmpa0_dtbjo.__unittest_L23_C1() [0x427a5a]

    ??:? void tmpa0_dtbjo.__modtest() [0x427ae0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba83]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a916]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42faa9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff58]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa35]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8ed]

    ??:? runModuleUnitTests [0x42b859]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281ac]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n+1)\n    {\n        result *= factorial(i);\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4y2pgqqu.d(19): Error: undefined identifier `factorial`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4y2pgqqu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n+1)\n    {\n        result *= factorial(i);\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4y2pgqqu.d(19): Error: undefined identifier `factorial`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4y2pgqqu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkwyfc6h8.d(19): Error: undefined identifier `factorial`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkwyfc6h8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkwyfc6h8.d(19): Error: undefined identifier `factorial`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkwyfc6h8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n+1)\n    {\n        result *= factorial(i);\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4y2pgqqu.d(19): Error: undefined identifier `factorial`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4y2pgqqu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkwyfc6h8.d(19): Error: undefined identifier `factorial`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkwyfc6h8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    for (long\
    \ i = n; i > 0; i--)\n    {\n        result *= i;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpa0_dtbjo.d(27): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d5d]

    ??:? void tmpa0_dtbjo.__unittest_L23_C1() [0x427a5a]

    ??:? void tmpa0_dtbjo.__modtest() [0x427ae0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba83]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a916]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42faa9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff58]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa35]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8ed]

    ??:? runModuleUnitTests [0x42b859]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281ac]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n)\n    {\n        result *= i;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n\
    \    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n\
    \    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpm659p15i.d(27): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d65]

    ??:? void tmpm659p15i.__unittest_L23_C1() [0x427a62]

    ??:? void tmpm659p15i.__modtest() [0x427ae8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba8b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a91e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa3d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8f5]

    ??:? runModuleUnitTests [0x42b861]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281b4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n)\n    {\n        result *= i;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n\
    \    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n\
    \    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpm659p15i.d(27): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d65]

    ??:? void tmpm659p15i.__unittest_L23_C1() [0x427a62]

    ??:? void tmpm659p15i.__modtest() [0x427ae8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba8b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a91e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa3d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8f5]

    ??:? runModuleUnitTests [0x42b861]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281b4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    for (long\
    \ i = n; i > 0; i--)\n    {\n        result *= i;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpa0_dtbjo.d(27): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d5d]

    ??:? void tmpa0_dtbjo.__unittest_L23_C1() [0x427a5a]

    ??:? void tmpa0_dtbjo.__modtest() [0x427ae0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba83]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a916]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42faa9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff58]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa35]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8ed]

    ??:? runModuleUnitTests [0x42b859]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281ac]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n+1)\n    {\n        result *= factorial(i);\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4y2pgqqu.d(19): Error: undefined identifier `factorial`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4y2pgqqu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n+1)\n    {\n        result *= factorial(i);\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4y2pgqqu.d(19): Error: undefined identifier `factorial`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4y2pgqqu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkwyfc6h8.d(19): Error: undefined identifier `factorial`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkwyfc6h8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkwyfc6h8.d(19): Error: undefined identifier `factorial`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkwyfc6h8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    for (long\
    \ i = n; i > 0; i--)\n    {\n        result *= i;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpa0_dtbjo.d(27): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d5d]

    ??:? void tmpa0_dtbjo.__unittest_L23_C1() [0x427a5a]

    ??:? void tmpa0_dtbjo.__modtest() [0x427ae0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba83]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a916]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42faa9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff58]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa35]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8ed]

    ??:? runModuleUnitTests [0x42b859]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281ac]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkwyfc6h8.d(19): Error: undefined identifier `factorial`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkwyfc6h8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkwyfc6h8.d(19): Error: undefined identifier `factorial`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkwyfc6h8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkwyfc6h8.d(19): Error: undefined identifier `factorial`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkwyfc6h8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkwyfc6h8.d(19): Error: undefined identifier `factorial`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkwyfc6h8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkwyfc6h8.d(19): Error: undefined identifier `factorial`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkwyfc6h8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n+1)\n    {\n        result *= factorial(i);\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4y2pgqqu.d(19): Error: undefined identifier `factorial`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4y2pgqqu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n+1)\n    {\n        result *= factorial(i);\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4y2pgqqu.d(19): Error: undefined identifier `factorial`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4y2pgqqu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n)\n    {\n        result *= i;\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n\
    \    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n\
    \    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpm659p15i.d(27): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d65]

    ??:? void tmpm659p15i.__unittest_L23_C1() [0x427a62]

    ??:? void tmpm659p15i.__modtest() [0x427ae8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba8b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a91e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa3d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8f5]

    ??:? runModuleUnitTests [0x42b861]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281b4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n+1)\n    {\n        result *= factorial(i);\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4y2pgqqu.d(19): Error: undefined identifier `factorial`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4y2pgqqu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    for (long\
    \ i = n; i > 0; i--)\n    {\n        result *= i;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpa0_dtbjo.d(27): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d5d]

    ??:? void tmpa0_dtbjo.__unittest_L23_C1() [0x427a5a]

    ??:? void tmpa0_dtbjo.__modtest() [0x427ae0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba83]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a916]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42faa9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff58]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa35]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8ed]

    ??:? runModuleUnitTests [0x42b859]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281ac]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163920
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkwyfc6h8.d(19): Error: undefined identifier `factorial`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkwyfc6h8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkwyfc6h8.d(19): Error: undefined identifier `factorial`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkwyfc6h8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    foreach(i;\
    \ 1..n)\n    {\n        result *= factorial(i);\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkwyfc6h8.d(19): Error: undefined identifier `factorial`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkwyfc6h8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163919
