name: HumanEval_129_minPath
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\n\n    Given a grid with N rows\
  \ and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains\
  \ a value. Every integer in the range [1, N * N]\n    inclusive appears exactly\
  \ once on the cells of the grid.\n\n    You have to find the minimum path of length\
  \ k in the grid. You can start\n    from any cell, and in each step you can move\
  \ to any of the neighbor cells,\n    in other words, you can go to cells which share\
  \ an edge with you current\n    cell.\n    Please note that a path of length k means\
  \ visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off\
  \ the grid.\n    A path A (of length k) is considered less than a path B (of length\
  \ k) if\n    after making the ordered lists of the values on the cells that A and\
  \ B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically\
  \ less\n    than lst_B, in other words, there exist an integer index i (1 <= i <=\
  \ k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n   \
  \ lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return\
  \ an ordered list of the values on the cells that the minimum path go through.\n\
  \n    Examples:    \n    \n        \n*/\nlong[] minPath(long[][] grid, long k) \n"
tests: "unittest\n{\n    alias candidate = minPath;\n\n    assert(candidate([[1L,\
  \ 2L, 3L], [4L, 5L, 6L], [7L, 8L, 9L]], 3L) == [1L, 2L, 1L]);\n    assert(candidate([[5L,\
  \ 9L, 3L], [4L, 1L, 6L], [7L, 8L, 2L]], 1L) == [1L]);\n    assert(candidate([[1L,\
  \ 2L, 3L, 4L], [5L, 6L, 7L, 8L], [9L, 10L, 11L, 12L], [13L, 14L, 15L, 16L]], 4L)\
  \ == [1L, 2L, 1L, 2L]);\n    assert(candidate([[6L, 4L, 13L, 10L], [5L, 7L, 12L,\
  \ 1L], [3L, 16L, 11L, 15L], [8L, 14L, 9L, 2L]], 7L) == [1L, 10L, 1L, 10L, 1L, 10L,\
  \ 1L]);\n    assert(candidate([[8L, 14L, 9L, 2L], [6L, 4L, 13L, 15L], [5L, 7L, 1L,\
  \ 12L], [3L, 10L, 11L, 16L]], 5L) == [1L, 7L, 1L, 7L, 1L]);\n    assert(candidate([[11L,\
  \ 8L, 7L, 2L], [5L, 16L, 14L, 4L], [9L, 3L, 15L, 6L], [12L, 13L, 10L, 1L]], 9L)\
  \ == [1L, 6L, 1L, 6L, 1L, 6L, 1L, 6L, 1L]);\n    assert(candidate([[12L, 13L, 10L,\
  \ 1L], [9L, 3L, 15L, 6L], [5L, 16L, 14L, 4L], [11L, 8L, 7L, 2L]], 12L) == [1L, 6L,\
  \ 1L, 6L, 1L, 6L, 1L, 6L, 1L, 6L, 1L, 6L]);\n    assert(candidate([[2L, 7L, 4L],\
  \ [3L, 1L, 5L], [6L, 8L, 9L]], 8L) == [1L, 3L, 1L, 3L, 1L, 3L, 1L, 3L]);\n    assert(candidate([[6L,\
  \ 1L, 5L], [3L, 8L, 9L], [2L, 7L, 4L]], 8L) == [1L, 5L, 1L, 5L, 1L, 5L, 1L, 5L]);\n\
  \    assert(candidate([[1L, 2L], [3L, 4L]], 10L) == [1L, 2L, 1L, 2L, 1L, 2L, 1L,\
  \ 2L, 1L, 2L]);\n    assert(candidate([[1L, 3L], [3L, 2L]], 10L) == [1L, 3L, 1L,\
  \ 3L, 1L, 3L, 1L, 3L, 1L, 3L]);\n}\nvoid main(){}"
completions: ["{\n    long N = grid.length;\n    long[][] dp = new long[N][N];\n \
    \   long[][] path = new long[N][N];\n    long[][] path_index = new long[N][N];\n\
    \    long[][] path_value = new long[N][N];\n    long[] result = new long[k];\n\
    \    for (long i = 0; i < N; i++)\n    {\n        for (long j = 0; j < N; j++)\n\
    \        {\n            dp[i][j] = long.max;\n            path[i][j] = long.max;\n\
    \            path_index[i][j] = long.max;\n            path_value[i][j] = long.max;\n\
    \        }\n    }\n    dp[0][0] = 0;\n    path[0][0] = 0;\n    path_index[0][0]\
    \ = 0;\n    path_value[0][0] = grid[0][0];\n    for (long i = 0; i < N; i++)\n\
    \    {\n        for (long j = 0; j < N; j++)\n        {\n            if (i > 0)\n\
    \            {\n                if (dp[i - 1][j] + 1 < dp[i][j])\n           \
    \     {\n                    dp[i][j] = dp[i - 1][j] + 1;\n                  \
    \  path[i][j] = path[i - 1][j];\n                    path_index[i][j] = path_index[i\
    \ - 1][j] + 1;\n                    path_value[i][j] = grid[i][j];\n         \
    \       }\n                else if (dp[i - 1][j] + 1 == dp[i][j])\n          \
    \      {\n                    if (path[i - 1][j] < path[i][j])\n             \
    \       {\n                        path[i][j] = path[i - 1][j];\n            \
    \            path_index[i][j] = path_index[i - 1][j] + 1;\n                  \
    \      path_value[i][j] = grid[i][j];\n                    }\n               \
    \     else if (path[i -", "{\n    long N = grid.length;\n    long[][] dp = new\
    \ long[N][N];\n    foreach(i; 0 .. N)\n        foreach(j; 0 .. N)\n          \
    \  dp[i][j] = long.max;\n    dp[0][0] = grid[0][0];\n    foreach(i; 0 .. N)\n\
    \        foreach(j; 0 .. N)\n        {\n            if(i > 0)\n              \
    \  dp[i][j] = min(dp[i][j], dp[i - 1][j] + grid[i][j]);\n            if(j > 0)\n\
    \                dp[i][j] = min(dp[i][j], dp[i][j - 1] + grid[i][j]);\n      \
    \  }\n    long[] res = new long[k];\n    res[0] = grid[0][0];\n    long i = 0,\
    \ j = 0;\n    foreach(idx; 1 .. k)\n    {\n        long min_val = long.max;\n\
    \        long min_i = -1, min_j = -1;\n        if(i > 0)\n        {\n        \
    \    if(dp[i - 1][j] + grid[i][j] < min_val)\n            {\n                min_val\
    \ = dp[i - 1][j] + grid[i][j];\n                min_i = i - 1;\n             \
    \   min_j = j;\n            }\n        }\n        if(j > 0)\n        {\n     \
    \       if(dp[i][j - 1] + grid[i][j] < min_val)\n            {\n             \
    \   min_val = dp[i][j - 1] + grid[i][j];\n                min_i = i;\n       \
    \         min_j = j - 1;\n            }\n        }\n        res[idx] = grid[min_i][min_j];\n\
    \        i = min_i;\n        j = min_j;\n    }\n    return res;\n}", "{\n    int\
    \ n = grid.length;\n    int[][] dp = new int[n][n];\n    for (int i = 0; i < n;\
    \ i++)\n        for (int j = 0; j < n; j++)\n            dp[i][j] = int.max;\n\
    \    dp[0][0] = 0;\n    for (int i = 0; i < n; i++)\n        for (int j = 0; j\
    \ < n; j++)\n        {\n            if (i > 0)\n                dp[i][j] = min(dp[i][j],\
    \ dp[i - 1][j] + 1);\n            if (j > 0)\n                dp[i][j] = min(dp[i][j],\
    \ dp[i][j - 1] + 1);\n        }\n    int[][] dp2 = new int[n][n];\n    for (int\
    \ i = 0; i < n; i++)\n        for (int j = 0; j < n; j++)\n            dp2[i][j]\
    \ = int.max;\n    dp2[n - 1][n - 1] = 0;\n    for (int i = n - 1; i >= 0; i--)\n\
    \        for (int j = n - 1; j >= 0; j--)\n        {\n            if (i < n -\
    \ 1)\n                dp2[i][j] = min(dp2[i][j], dp2[i + 1][j] + 1);\n       \
    \     if (j < n - 1)\n                dp2[i][j] = min(dp2[i][j], dp2[i][j + 1]\
    \ + 1);\n        }\n    int[][] dp3 = new int[n][n];\n    for (int i = 0; i <\
    \ n; i++)\n        for (int j = 0; j < n; j++)\n            dp3[i][j] = dp[i][j]\
    \ + dp2[i][j];\n    int min = int.max;\n    int minI = 0;\n    int minJ = 0;\n\
    \    for (int i = 0; i <", "{\n    long n = grid.length;\n    long[][] dp = new\
    \ long[n][n];\n    long[][] prev = new long[n][n];\n    long[][] next = new long[n][n];\n\
    \    long[][] sum = new long[n][n];\n    for (long i = 0; i < n; i++)\n    {\n\
    \        for (long j = 0; j < n; j++)\n        {\n            if (i == 0 && j\
    \ == 0)\n            {\n                dp[i][j] = grid[i][j];\n             \
    \   prev[i][j] = -1;\n                next[i][j] = -1;\n                sum[i][j]\
    \ = grid[i][j];\n            }\n            else if (i == 0)\n            {\n\
    \                dp[i][j] = dp[i][j - 1] + grid[i][j];\n                prev[i][j]\
    \ = -1;\n                next[i][j] = j - 1;\n                sum[i][j] = sum[i][j\
    \ - 1] + grid[i][j];\n            }\n            else if (j == 0)\n          \
    \  {\n                dp[i][j] = dp[i - 1][j] + grid[i][j];\n                prev[i][j]\
    \ = i - 1;\n                next[i][j] = -1;\n                sum[i][j] = sum[i\
    \ - 1][j] + grid[i][j];\n            }\n            else\n            {\n    \
    \            if (dp[i - 1][j] < dp[i][j - 1])\n                {\n           \
    \         dp[i][j] = dp[i - 1][j] + grid[i][j];\n                    prev[i][j]\
    \ = i - 1;\n                    next[i][j] = -1;\n                    sum[i][j]\
    \ = sum[i - 1][j] + grid[i][j];\n                }\n                else\n   \
    \             {\n                    dp[i][j] = dp[i][j - 1] + grid[i][j];\n \
    \                   prev[i][j] = -", "{\n    long n = grid.length;\n    long[][]\
    \ dp = new long[n][n];\n    long[][] path = new long[n][n];\n    for (long i =\
    \ 0; i < n; i++)\n    {\n        for (long j = 0; j < n; j++)\n        {\n   \
    \         dp[i][j] = long.max;\n            path[i][j] = -1;\n        }\n    }\n\
    \    dp[0][0] = grid[0][0];\n    for (long i = 0; i < n; i++)\n    {\n       \
    \ for (long j = 0; j < n; j++)\n        {\n            if (i > 0)\n          \
    \  {\n                if (dp[i - 1][j] + grid[i][j] < dp[i][j])\n            \
    \    {\n                    dp[i][j] = dp[i - 1][j] + grid[i][j];\n          \
    \          path[i][j] = 0;\n                }\n            }\n            if (j\
    \ > 0)\n            {\n                if (dp[i][j - 1] + grid[i][j] < dp[i][j])\n\
    \                {\n                    dp[i][j] = dp[i][j - 1] + grid[i][j];\n\
    \                    path[i][j] = 1;\n                }\n            }\n     \
    \   }\n    }\n    long[] res = new long[k];\n    long i = n - 1;\n    long j =\
    \ n - 1;\n    for (long l = k - 1; l >= 0; l--)\n    {\n        res[l] = grid[i][j];\n\
    \        if (path[i][j] == 0)\n        {\n            i--;\n        }\n      \
    \  else\n        {\n            j--;\n        }\n    }\n    return res;\n}", "{\n\
    \    auto N = grid.length;\n    auto M = grid[0].length;\n    auto dp = new long[N][M][k\
    \ + 1];\n    foreach (i; 0 .. N)\n        foreach (j; 0 .. M)\n            foreach\
    \ (l; 0 .. k + 1)\n                dp[i][j][l] = long.max;\n    dp[0][0][1] =\
    \ grid[0][0];\n    foreach (i; 0 .. N)\n        foreach (j; 0 .. M)\n        \
    \    foreach (l; 1 .. k + 1)\n            {\n                if (i > 0)\n    \
    \                dp[i][j][l] = min(dp[i][j][l], dp[i - 1][j][l - 1] + grid[i][j]);\n\
    \                if (j > 0)\n                    dp[i][j][l] = min(dp[i][j][l],\
    \ dp[i][j - 1][l - 1] + grid[i][j]);\n                if (i < N - 1)\n       \
    \             dp[i][j][l] = min(dp[i][j][l], dp[i + 1][j][l - 1] + grid[i][j]);\n\
    \                if (j < M - 1)\n                    dp[i][j][l] = min(dp[i][j][l],\
    \ dp[i][j + 1][l - 1] + grid[i][j]);\n            }\n    auto ans = new long[k];\n\
    \    ans[0] = grid[0][0];\n    auto i = 0;\n    auto j = 0;\n    foreach (l; 1\
    \ .. k)\n    {\n        if (i > 0 && dp[i][j][l] == dp[i - 1][j][l - 1] + grid[i][j])\n\
    \        {\n            ans[l] = grid[i][j];\n            i--;\n        }\n  \
    \      else if (j > 0 && dp[i][j][l] == dp[i][j - 1][l - 1] + grid[i][j])\n  \
    \      {\n            ans[", "{\n    // Write your code here\n    int n = grid.length;\n\
    \    int[][] dp = new int[n][n];\n    for (int i = 0; i < n; i++)\n        for\
    \ (int j = 0; j < n; j++)\n            dp[i][j] = int.max;\n    dp[0][0] = 0;\n\
    \    for (int i = 0; i < n; i++)\n        for (int j = 0; j < n; j++)\n      \
    \  {\n            if (i > 0)\n                dp[i][j] = min(dp[i][j], dp[i -\
    \ 1][j] + 1);\n            if (j > 0)\n                dp[i][j] = min(dp[i][j],\
    \ dp[i][j - 1] + 1);\n        }\n    int[][] dp2 = new int[n][n];\n    for (int\
    \ i = 0; i < n; i++)\n        for (int j = 0; j < n; j++)\n            dp2[i][j]\
    \ = int.max;\n    dp2[n - 1][n - 1] = 0;\n    for (int i = n - 1; i >= 0; i--)\n\
    \        for (int j = n - 1; j >= 0; j--)\n        {\n            if (i < n -\
    \ 1)\n                dp2[i][j] = min(dp2[i][j], dp2[i + 1][j] + 1);\n       \
    \     if (j < n - 1)\n                dp2[i][j] = min(dp2[i][j], dp2[i][j + 1]\
    \ + 1);\n        }\n    int[][] dp3 = new int[n][n];\n    for (int i = 0; i <\
    \ n; i++)\n        for (int j = 0; j < n; j++)\n            dp3[i][j] = dp[i][j]\
    \ + dp2[i][j];\n    int min = int.max;\n    int[] res = new int[k];\n    for (int\
    \ i = 0;", "{\n    int N = grid.length;\n    int[][] dp = new int[N][N];\n   \
    \ int[][] path = new int[N][N];\n    int[][] dir = new int[][]{{1, 0}, {0, 1},\
    \ {-1, 0}, {0, -1}};\n    int[][] dir2 = new int[][]{{1, 0}, {0, 1}, {-1, 0},\
    \ {0, -1}, {1, 1}, {1, -1}, {-1, 1}, {-1, -1}};\n    int[][] dir3 = new int[][]{{1,\
    \ 0}, {0, 1}, {-1, 0}, {0, -1}, {1, 1}, {1, -1}, {-1, 1}, {-1, -1}, {2, 0}, {0,\
    \ 2}, {-2, 0}, {0, -2}};\n    int[][] dir4 = new int[][]{{1, 0}, {0, 1}, {-1,\
    \ 0}, {0, -1}, {1, 1}, {1, -1}, {-1, 1}, {-1, -1}, {2, 0}, {0, 2}, {-2, 0}, {0,\
    \ -2}, {2, 2}, {2, -2}, {-2, 2}, {-2, -2}};\n    int[][] dir5 = new int[][]{{1,\
    \ 0}, {0, 1}, {-1, 0}, {0, -1}, {1, 1}, {1, -1}, {-1, 1}, {-1, -1}, {2, 0}, {0,\
    \ 2}, {-2, 0}, {0, -2}, {2, 2}, {2, -2}, {-2, 2}, {-2, -2}, {3, 0}, {0, 3}, {-3,\
    \ 0}, {0, -3}};\n    int[][] dir6 = new int[][]{{1, 0}, {0, 1}, {-1, 0}, {0, -1},\
    \ {1, 1}, {1, -1}, {-1, 1}, {", "{\n    int n = grid.length;\n    int[][] dp =\
    \ new int[n][n];\n    for (int i = 0; i < n; i++)\n        for (int j = 0; j <\
    \ n; j++)\n            dp[i][j] = int.max;\n    dp[0][0] = 0;\n    for (int i\
    \ = 0; i < n; i++)\n        for (int j = 0; j < n; j++)\n        {\n         \
    \   if (i > 0)\n                dp[i][j] = min(dp[i][j], dp[i - 1][j] + 1);\n\
    \            if (j > 0)\n                dp[i][j] = min(dp[i][j], dp[i][j - 1]\
    \ + 1);\n        }\n    int[][] dp2 = new int[n][n];\n    for (int i = 0; i <\
    \ n; i++)\n        for (int j = 0; j < n; j++)\n            dp2[i][j] = int.max;\n\
    \    dp2[n - 1][n - 1] = 0;\n    for (int i = n - 1; i >= 0; i--)\n        for\
    \ (int j = n - 1; j >= 0; j--)\n        {\n            if (i < n - 1)\n      \
    \          dp2[i][j] = min(dp2[i][j], dp2[i + 1][j] + 1);\n            if (j <\
    \ n - 1)\n                dp2[i][j] = min(dp2[i][j], dp2[i][j + 1] + 1);\n   \
    \     }\n    int[][] dp3 = new int[n][n];\n    for (int i = 0; i < n; i++)\n \
    \       for (int j = 0; j < n; j++)\n            dp3[i][j] = dp[i][j] + dp2[i][j];\n\
    \    int[][] dp4 = new int[n][n];\n    for (int i = 0; i < n; i++)\n        for\
    \ (", "{\n    int N = grid.length;\n    int[][] dp = new int[N][N];\n    int[][]\
    \ path = new int[N][N];\n    int[][] dir = new int[][]{{1, 0}, {0, 1}, {-1, 0},\
    \ {0, -1}};\n    int[][] dirs = new int[N * N][2];\n    int[] res = new int[k];\n\
    \    for (int i = 0; i < N; i++)\n        for (int j = 0; j < N; j++)\n      \
    \      dp[i][j] = int.max;\n    dp[0][0] = 0;\n    for (int i = 0; i < N; i++)\n\
    \        for (int j = 0; j < N; j++)\n        {\n            for (int d = 0; d\
    \ < 4; d++)\n            {\n                int ni = i + dir[d][0];\n        \
    \        int nj = j + dir[d][1];\n                if (ni < 0 || ni >= N || nj\
    \ < 0 || nj >= N)\n                    continue;\n                if (dp[ni][nj]\
    \ > dp[i][j] + 1)\n                {\n                    dp[ni][nj] = dp[i][j]\
    \ + 1;\n                    path[ni][nj] = d;\n                }\n           \
    \ }\n        }\n    int x = N - 1, y = N - 1;\n    for (int i = 0; i < k; i++)\n\
    \    {\n        res[i] = grid[x][y];\n        dirs[i][0] = x;\n        dirs[i][1]\
    \ = y;\n        int d = path[x][y];\n        x += dir[d][0];\n        y += dir[d][1];\n\
    \    }\n    return res;\n}", "{\n    int n = grid.length;\n    int[][] dp = new\
    \ int[n][n];\n    for (int i = 0; i < n; i++)\n        for (int j = 0; j < n;\
    \ j++)\n            dp[i][j] = int.max;\n    dp[0][0] = 0;\n    for (int i = 0;\
    \ i < n; i++)\n        for (int j = 0; j < n; j++)\n        {\n            if\
    \ (i > 0)\n                dp[i][j] = min(dp[i][j], dp[i - 1][j] + grid[i][j]);\n\
    \            if (j > 0)\n                dp[i][j] = min(dp[i][j], dp[i][j - 1]\
    \ + grid[i][j]);\n        }\n    long[] res = new long[k];\n    int cur = 0;\n\
    \    for (int i = 0; i < n; i++)\n        for (int j = 0; j < n; j++)\n      \
    \      if (dp[i][j] == cur)\n            {\n                res[cur] = grid[i][j];\n\
    \                cur++;\n                if (cur == k)\n                    return\
    \ res;\n            }\n    return res;\n}", "{\n    long N = grid.length;\n  \
    \  long[] result = new long[k];\n    long[] path = new long[k];\n    long[] minPath\
    \ = new long[k];\n    long[] minPathValues = new long[k];\n    long minPathSum\
    \ = long.max;\n    long[] pathValues = new long[k];\n    long pathSum = 0;\n \
    \   long[] pathLength = new long[k];\n    long[] minPathLength = new long[k];\n\
    \    long minPathLengthSum = long.max;\n    long pathLengthSum = 0;\n    long[]\
    \ pathLengthValues = new long[k];\n    long[] minPathLengthValues = new long[k];\n\
    \    long[] pathLengthValuesSum = new long[k];\n    long[] minPathLengthValuesSum\
    \ = new long[k];\n    long[] pathLengthValuesSumValues = new long[k];\n    long[]\
    \ minPathLengthValuesSumValues = new long[k];\n    long[] pathLengthValuesSumValuesSum\
    \ = new long[k];\n    long[] minPathLengthValuesSumValuesSum = new long[k];\n\
    \    long[] pathLengthValuesSumValuesSumValues = new long[k];\n    long[] minPathLengthValuesSumValuesSumValues\
    \ = new long[k];\n    long[] pathLengthValuesSumValuesSumValuesSum = new long[k];\n\
    \    long[] minPathLengthValuesSumValuesSumValuesSum = new long[k];\n    long[]\
    \ pathLengthValuesSumValuesSumValuesSumValues = new long[k];\n    long[] minPathLengthValuesSumValuesSumValuesSumValues\
    \ = new long[k];\n    long[] pathLengthValuesSumValuesSumValuesSumValuesSum =\
    \ new long[k];\n    long[] minPathLengthValuesSumValuesSumValuesSumValuesSum =\
    \ new long[k];\n    long[] pathLengthValuesSumValuesSumValuesSumValuesSumValues\
    \ = new long[k];\n    long[] minPathLengthValuesSumValuesSumValuesSumValuesSumValues\
    \ = new long[k];\n    long[] pathLengthValuesSumValuesSumValuesSumValuesSumValuesSum\
    \ = new long[k];\n    long[] minPathLengthValuesSumValuesSumValuesSumValuesSumValuesSum\
    \ = new long[k];\n    long[] pathLengthValuesSumValuesSumValuesSumValuesSumValuesSumValues",
  "{\n    long N = grid.length;\n    long[][] dp = new long[N][N];\n    foreach(i;\
    \ 0 .. N)\n        foreach(j; 0 .. N)\n            dp[i][j] = -1;\n    dp[0][0]\
    \ = grid[0][0];\n    long[][] prev = new long[N][N];\n    foreach(i; 0 .. N)\n\
    \        foreach(j; 0 .. N)\n            prev[i][j] = -1;\n    prev[0][0] = 0;\n\
    \    long[][] next = new long[N][N];\n    foreach(i; 0 .. N)\n        foreach(j;\
    \ 0 .. N)\n            next[i][j] = -1;\n    next[0][0] = 0;\n    foreach(i; 0\
    \ .. N)\n        foreach(j; 0 .. N)\n        {\n            if(i > 0)\n      \
    \      {\n                if(dp[i - 1][j] == -1 || dp[i - 1][j] > dp[i][j] + grid[i\
    \ - 1][j])\n                {\n                    dp[i - 1][j] = dp[i][j] + grid[i\
    \ - 1][j];\n                    prev[i - 1][j] = i * N + j;\n                \
    \    next[i][j] = (i - 1) * N + j;\n                }\n            }\n       \
    \     if(j > 0)\n            {\n                if(dp[i][j - 1] == -1 || dp[i][j\
    \ - 1] > dp[i][j] + grid[i][j - 1])\n                {\n                    dp[i][j\
    \ - 1] = dp[i][j] + grid[i][j - 1];\n                    prev[i][j - 1] = i *\
    \ N + j;\n                    next[i][j] = i * N + j - 1;\n                }\n\
    \            }\n            if(i < N - 1)\n            {\n                if(dp[i\
    \ + 1][j] == -1 || dp[i + 1][j] >", "{\n    int N = grid.length;\n    long[][]\
    \ dp = new long[N][N];\n    for (int i = 0; i < N; i++)\n        for (int j =\
    \ 0; j < N; j++)\n            dp[i][j] = grid[i][j];\n    for (int i = 1; i <\
    \ N; i++)\n        dp[0][i] += dp[0][i - 1];\n    for (int i = 1; i < N; i++)\n\
    \        dp[i][0] += dp[i - 1][0];\n    for (int i = 1; i < N; i++)\n        for\
    \ (int j = 1; j < N; j++)\n            dp[i][j] += min(dp[i - 1][j], dp[i][j -\
    \ 1]);\n    long[] res = new long[k];\n    int i = 0, j = 0;\n    for (int l =\
    \ 0; l < k; l++)\n    {\n        res[l] = grid[i][j];\n        if (i + 1 < N &&\
    \ dp[i + 1][j] < dp[i][j + 1])\n            i++;\n        else\n            j++;\n\
    \    }\n    return res;\n}", "{\n    long n = grid.length;\n    long[][] dp =\
    \ new long[n][n];\n    long[][] path = new long[n][n];\n    long[][] path_len\
    \ = new long[n][n];\n    long[][] path_val = new long[n][n];\n    for (long i\
    \ = 0; i < n; i++)\n    {\n        for (long j = 0; j < n; j++)\n        {\n \
    \           dp[i][j] = grid[i][j];\n            path[i][j] = -1;\n           \
    \ path_len[i][j] = 1;\n            path_val[i][j] = grid[i][j];\n        }\n \
    \   }\n    for (long i = 0; i < n; i++)\n    {\n        for (long j = 0; j < n;\
    \ j++)\n        {\n            if (i > 0 && dp[i][j] > dp[i - 1][j] + grid[i][j])\n\
    \            {\n                dp[i][j] = dp[i - 1][j] + grid[i][j];\n      \
    \          path[i][j] = 0;\n                path_len[i][j] = path_len[i - 1][j]\
    \ + 1;\n                path_val[i][j] = path_val[i - 1][j] * 10 + grid[i][j];\n\
    \            }\n            if (j > 0 && dp[i][j] > dp[i][j - 1] + grid[i][j])\n\
    \            {\n                dp[i][j] = dp[i][j - 1] + grid[i][j];\n      \
    \          path[i][j] = 1;\n                path_len[i][j] = path_len[i][j - 1]\
    \ + 1;\n                path_val[i][j] = path_val[i][j - 1] * 10 + grid[i][j];\n\
    \            }\n            if (i < n - 1 && dp[i][j] > dp[i + 1][j] + grid[i][j])\n\
    \            {\n                dp[", "{\n    long n = grid.length;\n    long[][]\
    \ dp = new long[n][n];\n    foreach(i; 0 .. n)\n        foreach(j; 0 .. n)\n \
    \           dp[i][j] = long.max;\n    dp[0][0] = grid[0][0];\n    foreach(i; 0\
    \ .. n)\n        foreach(j; 0 .. n)\n        {\n            if(i > 0)\n      \
    \          dp[i][j] = min(dp[i][j], dp[i - 1][j] + grid[i][j]);\n            if(j\
    \ > 0)\n                dp[i][j] = min(dp[i][j], dp[i][j - 1] + grid[i][j]);\n\
    \        }\n    long[] res = new long[k];\n    long sum = 0;\n    foreach(i; 0\
    \ .. k)\n    {\n        res[i] = grid[0][0];\n        sum += grid[0][0];\n   \
    \     if(i == k - 1)\n            break;\n        if(i + 1 < k && dp[i + 1][i\
    \ + 1] - sum < dp[i][i + 1] - sum)\n        {\n            ++i;\n            res[i]\
    \ = grid[i][i];\n            sum += grid[i][i];\n        }\n        else\n   \
    \     {\n            res[i + 1] = grid[i + 1][i];\n            sum += grid[i +\
    \ 1][i];\n        }\n    }\n    return res;\n}", "{\n    // Write your code here\n\
    \    int N = grid.length;\n    int[][] dp = new int[N][N];\n    for (int i = 0;\
    \ i < N; i++)\n        for (int j = 0; j < N; j++)\n            dp[i][j] = int.max;\n\
    \    dp[0][0] = 0;\n    for (int i = 0; i < N; i++)\n        for (int j = 0; j\
    \ < N; j++)\n        {\n            if (i > 0)\n                dp[i][j] = min(dp[i][j],\
    \ dp[i - 1][j] + 1);\n            if (j > 0)\n                dp[i][j] = min(dp[i][j],\
    \ dp[i][j - 1] + 1);\n        }\n    int[][] dp2 = new int[N][N];\n    for (int\
    \ i = 0; i < N; i++)\n        for (int j = 0; j < N; j++)\n            dp2[i][j]\
    \ = int.max;\n    dp2[N - 1][N - 1] = 0;\n    for (int i = N - 1; i >= 0; i--)\n\
    \        for (int j = N - 1; j >= 0; j--)\n        {\n            if (i < N -\
    \ 1)\n                dp2[i][j] = min(dp2[i][j], dp2[i + 1][j] + 1);\n       \
    \     if (j < N - 1)\n                dp2[i][j] = min(dp2[i][j], dp2[i][j + 1]\
    \ + 1);\n        }\n    int[][] dp3 = new int[N][N];\n    for (int i = 0; i <\
    \ N; i++)\n        for (int j = 0; j < N; j++)\n            dp3[i][j] = dp[i][j]\
    \ + dp2[i][j];\n    int[][] dp4 = new int[N][N];\n    for (int i = 0; i < N",
  "{\n    int n = grid.length;\n    int[][] dp = new int[n][n];\n    int[][] dir =\
    \ new int[n][n];\n    for (int i = 0; i < n; i++)\n        for (int j = 0; j <\
    \ n; j++)\n            dp[i][j] = int.max;\n    dp[0][0] = 0;\n    for (int i\
    \ = 0; i < n; i++)\n        for (int j = 0; j < n; j++)\n        {\n         \
    \   if (i > 0 && dp[i - 1][j] + 1 < dp[i][j])\n            {\n               \
    \ dp[i][j] = dp[i - 1][j] + 1;\n                dir[i][j] = 0;\n            }\n\
    \            if (j > 0 && dp[i][j - 1] + 1 < dp[i][j])\n            {\n      \
    \          dp[i][j] = dp[i][j - 1] + 1;\n                dir[i][j] = 1;\n    \
    \        }\n            if (i < n - 1 && dp[i + 1][j] + 1 < dp[i][j])\n      \
    \      {\n                dp[i][j] = dp[i + 1][j] + 1;\n                dir[i][j]\
    \ = 2;\n            }\n            if (j < n - 1 && dp[i][j + 1] + 1 < dp[i][j])\n\
    \            {\n                dp[i][j] = dp[i][j + 1] + 1;\n               \
    \ dir[i][j] = 3;\n            }\n        }\n    long[] res = new long[k];\n  \
    \  int x = 0, y = 0;\n    for (int i = 0; i < k; i++)\n    {\n        res[i] =\
    \ grid[x][y];\n        switch (dir[x][y])\n        {\n            case 0:\n  \
    \              x--;\n                break;\n            case 1:\n           \
    \     y--;\n                break;\n            case 2:\n                x++;\n\
    \                break;\n            case", "{\n    // Write your code here\n\
    \    int N = grid.length;\n    int[][] dp = new int[N][N];\n    for (int i = 0;\
    \ i < N; i++)\n        for (int j = 0; j < N; j++)\n            dp[i][j] = int.max;\n\
    \    dp[0][0] = 0;\n    for (int i = 0; i < N; i++)\n        for (int j = 0; j\
    \ < N; j++)\n        {\n            if (i > 0)\n                dp[i][j] = min(dp[i][j],\
    \ dp[i - 1][j] + 1);\n            if (j > 0)\n                dp[i][j] = min(dp[i][j],\
    \ dp[i][j - 1] + 1);\n        }\n    long[] res = new long[k];\n    int x = 0,\
    \ y = 0;\n    for (int i = 0; i < k; i++)\n    {\n        res[i] = grid[x][y];\n\
    \        if (x < N - 1 && dp[x + 1][y] == dp[x][y] + 1)\n            x++;\n  \
    \      else if (y < N - 1 && dp[x][y + 1] == dp[x][y] + 1)\n            y++;\n\
    \        else\n            break;\n    }\n    return res;\n}", "{\n    long N\
    \ = grid.length;\n    long[][] dp = new long[N][N];\n    long[][] path = new long[N][N];\n\
    \    long[][] path_len = new long[N][N];\n    long[][] path_val = new long[N][N];\n\
    \    for (long i = 0; i < N; i++)\n    {\n        for (long j = 0; j < N; j++)\n\
    \        {\n            dp[i][j] = -1;\n            path[i][j] = -1;\n       \
    \     path_len[i][j] = -1;\n            path_val[i][j] = -1;\n        }\n    }\n\
    \    long[] dx = new long[]{0, 0, 1, -1};\n    long[] dy = new long[]{1, -1, 0,\
    \ 0};\n    for (long i = 0; i < N; i++)\n    {\n        for (long j = 0; j < N;\
    \ j++)\n        {\n            if (dp[i][j] == -1)\n            {\n          \
    \      dp[i][j] = 0;\n                path[i][j] = -1;\n                path_len[i][j]\
    \ = 0;\n                path_val[i][j] = grid[i][j];\n                long[] qx\
    \ = new long[N * N];\n                long[] qy = new long[N * N];\n         \
    \       long[] qv = new long[N * N];\n                long[] ql = new long[N *\
    \ N];\n                long[] qp = new long[N * N];\n                long qs =\
    \ 0;\n                long qe = 0;\n                qx[qe] = i;\n            \
    \    qy[qe] = j;\n                qv[qe] = grid[i][j];\n                ql[qe]\
    \ = 0;\n                qp[qe] = -1;\n                qe++;\n                while\
    \ (qs < qe)\n                {\n                    long cx = qx[qs];\n      \
    \              long cy = qy[qs];\n                    long cv = qv[qs];\n    \
    \               ", "{\n    // Write your code here\n    int n = grid.length;\n\
    \    int[][] dp = new int[n][n];\n    int[][] visited = new int[n][n];\n    int[][]\
    \ dir = new int[][]{{1, 0}, {-1, 0}, {0, 1}, {0, -1}};\n    int[][] path = new\
    \ int[n][n];\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < n;\
    \ j++) {\n            dp[i][j] = int.max;\n        }\n    }\n    dp[0][0] = 0;\n\
    \    visited[0][0] = 1;\n    for (int i = 0; i < n; i++) {\n        for (int j\
    \ = 0; j < n; j++) {\n            for (int d = 0; d < 4; d++) {\n            \
    \    int x = i + dir[d][0];\n                int y = j + dir[d][1];\n        \
    \        if (x >= 0 && x < n && y >= 0 && y < n && visited[x][y] == 0) {\n   \
    \                 if (dp[x][y] > dp[i][j] + grid[x][y]) {\n                  \
    \      dp[x][y] = dp[i][j] + grid[x][y];\n                        path[x][y] =\
    \ d;\n                    }\n                }\n            }\n        }\n   \
    \ }\n    int x = n - 1;\n    int y = n - 1;\n    int[] res = new int[k];\n   \
    \ for (int i = k - 1; i >= 0; i--) {\n        res[i] = grid[x][y];\n        int\
    \ d = path[x][y];\n        x -= dir[d][0];\n        y -= dir[d][1];\n    }\n \
    \   return res;\n}", "{\n    int n = grid.length;\n    int[][] dp = new int[n][n];\n\
    \    for (int i = 0; i < n; i++)\n        for (int j = 0; j < n; j++)\n      \
    \      dp[i][j] = int.max;\n    dp[0][0] = 0;\n    for (int i = 0; i < n; i++)\n\
    \        for (int j = 0; j < n; j++)\n        {\n            if (i > 0)\n    \
    \            dp[i][j] = min(dp[i][j], dp[i - 1][j] + 1);\n            if (j >\
    \ 0)\n                dp[i][j] = min(dp[i][j], dp[i][j - 1] + 1);\n        }\n\
    \    int[][] dp2 = new int[n][n];\n    for (int i = 0; i < n; i++)\n        for\
    \ (int j = 0; j < n; j++)\n            dp2[i][j] = int.max;\n    dp2[n - 1][n\
    \ - 1] = 0;\n    for (int i = n - 1; i >= 0; i--)\n        for (int j = n - 1;\
    \ j >= 0; j--)\n        {\n            if (i < n - 1)\n                dp2[i][j]\
    \ = min(dp2[i][j], dp2[i + 1][j] + 1);\n            if (j < n - 1)\n         \
    \       dp2[i][j] = min(dp2[i][j], dp2[i][j + 1] + 1);\n        }\n    int[][]\
    \ dp3 = new int[n][n];\n    for (int i = 0; i < n; i++)\n        for (int j =\
    \ 0; j < n; j++)\n            dp3[i][j] = dp[i][j] + dp2[i][j];\n    int[][] dp4\
    \ = new int[n][n];\n    for (int i = 0; i < n; i++)\n        for (", "{\n    //\
    \ Write your code here\n    int n = grid.length;\n    if (n == 0)\n        return\
    \ new long[0];\n    if (n == 1)\n        return new long[]{grid[0][0]};\n    if\
    \ (k == 1)\n        return new long[]{grid[0][0]};\n    if (k == 2)\n    {\n \
    \       long[] res = new long[2];\n        res[0] = grid[0][0];\n        if (grid[0][1]\
    \ < grid[1][0])\n        {\n            res[1] = grid[0][1];\n        }\n    \
    \    else\n        {\n            res[1] = grid[1][0];\n        }\n        return\
    \ res;\n    }\n    long[] res = new long[k];\n    res[0] = grid[0][0];\n    long[][]\
    \ dp = new long[n][n];\n    for (int i = 0; i < n; i++)\n    {\n        for (int\
    \ j = 0; j < n; j++)\n        {\n            dp[i][j] = -1;\n        }\n    }\n\
    \    dp[0][0] = 0;\n    long[][] prev = new long[n][n];\n    for (int i = 0; i\
    \ < n; i++)\n    {\n        for (int j = 0; j < n; j++)\n        {\n         \
    \   prev[i][j] = -1;\n        }\n    }\n    prev[0][0] = -1;\n    long[][] next\
    \ = new long[n][n];\n    for (int i = 0; i < n; i++)\n    {\n        for (int\
    \ j = 0; j < n; j++)\n        {\n            next[i][j] = -1;\n        }\n   \
    \ }\n    next[0][0] = -1;\n    Queue<long[]> q = new Queue<long[]>();\n    q.add(new\
    \ long[]{0, 0});\n    while (!q.isEmpty())\n    {\n        long[] cur = q.poll();\n\
    \        int x = (int)cur[", "{\n    long n = grid.length;\n    long[] res = new\
    \ long[k];\n    long[][] dp = new long[n][n];\n    long[][] dir = new long[n][n];\n\
    \    for (long i = 0; i < n; i++)\n    {\n        for (long j = 0; j < n; j++)\n\
    \        {\n            dp[i][j] = grid[i][j];\n            dir[i][j] = -1;\n\
    \        }\n    }\n    for (long i = 1; i < k; i++)\n    {\n        for (long\
    \ j = 0; j < n; j++)\n        {\n            for (long l = 0; l < n; l++)\n  \
    \          {\n                long min = dp[j][l];\n                long d = -1;\n\
    \                if (j > 0 && dp[j - 1][l] < min)\n                {\n       \
    \             min = dp[j - 1][l];\n                    d = 0;\n              \
    \  }\n                if (j < n - 1 && dp[j + 1][l] < min)\n                {\n\
    \                    min = dp[j + 1][l];\n                    d = 1;\n       \
    \         }\n                if (l > 0 && dp[j][l - 1] < min)\n              \
    \  {\n                    min = dp[j][l - 1];\n                    d = 2;\n  \
    \              }\n                if (l < n - 1 && dp[j][l + 1] < min)\n     \
    \           {\n                    min = dp[j][l + 1];\n                    d\
    \ = 3;\n                }\n                dp[j][l] = min + grid[j][l];\n    \
    \            dir[j][l] = d;\n            }\n        }\n    }\n    long min = dp[0][0];\n\
    \    long x = 0;\n    long y = 0;\n    for (long i = 0; i < n; i++)\n    {\n \
    \       for (long j = 0; j < n; j++)\n        {\n            if (dp[i][j] < min)\n\
    \            {\n                min = dp[i][j];\n                x =", "{\n  \
    \  long n = grid.length;\n    long[][] dp = new long[n][n];\n    long[][] prev\
    \ = new long[n][n];\n    long[][] next = new long[n][n];\n    long[][] path =\
    \ new long[n][n];\n    long[][] path_prev = new long[n][n];\n    long[][] path_next\
    \ = new long[n][n];\n    for (long i = 0; i < n; i++)\n    {\n        for (long\
    \ j = 0; j < n; j++)\n        {\n            dp[i][j] = grid[i][j];\n        \
    \    prev[i][j] = grid[i][j];\n            next[i][j] = grid[i][j];\n        \
    \    path[i][j] = grid[i][j];\n            path_prev[i][j] = grid[i][j];\n   \
    \         path_next[i][j] = grid[i][j];\n        }\n    }\n    for (long i = 1;\
    \ i < k; i++)\n    {\n        for (long j = 0; j < n; j++)\n        {\n      \
    \      for (long l = 0; l < n; l++)\n            {\n                if (j > 0)\n\
    \                {\n                    if (prev[j - 1][l] < prev[j][l])\n   \
    \                 {\n                        prev[j][l] = prev[j - 1][l];\n  \
    \                      path_prev[j][l] = path_prev[j - 1][l];\n              \
    \      }\n                    else if (prev[j - 1][l] == prev[j][l])\n       \
    \             {\n                        if (path_prev[j - 1][l] < path_prev[j][l])\n\
    \                        {\n                            path_prev[j][l] = path_prev[j\
    \ - 1][l];\n                        }\n                    }\n               \
    \ }\n                if (j < n - 1)\n                {\n                    if\
    \ (next[j + 1][l] < next[j][l])\n                    {\n                     \
    \   next[j][l] = next[j + 1][l];\n                        path_next[j][l", "{\n\
    \    long N = grid.length;\n    long[][] dp = new long[N][N];\n    long[][] path\
    \ = new long[N][N];\n    long[][] dir = new long[N][N];\n    long[][] dir_x =\
    \ new long[][]{{1, 0, -1, 0}, {1, -1, -1, 1}, {1, -1, 1, -1}, {1, 0, 1, 0}};\n\
    \    long[][] dir_y = new long[][]{{0, 1, 0, -1}, {1, 1, -1, -1}, {1, -1, -1,\
    \ 1}, {0, 1, 0, -1}};\n    long[][] dir_idx = new long[][]{{0, 1, 2, 3}, {0, 2,\
    \ 1, 3}, {0, 1, 2, 3}, {0, 2, 1, 3}};\n    for (long i = 0; i < N; i++)\n    \
    \    for (long j = 0; j < N; j++)\n            dp[i][j] = long.max;\n    dp[0][0]\
    \ = grid[0][0];\n    path[0][0] = 1;\n    dir[0][0] = 0;\n    for (long i = 0;\
    \ i < N; i++)\n        for (long j = 0; j < N; j++)\n            for (long d =\
    \ 0; d < 4; d++)\n            {\n                long nx = i + dir_x[dir_idx[dir[i][j]][d]][d];\n\
    \                long ny = j + dir_y[dir_idx[dir[i][j]][d]][d];\n            \
    \    if (nx < 0 || nx >= N || ny < 0 || ny >= N)\n                    continue;\n\
    \                if (dp[nx][ny] > dp[i][j] + grid[nx][ny])\n                {\n\
    \                    dp[nx][ny] = dp[i][j] + grid[nx][ny];\n                 \
    \   path[nx][ny] = path[i][j", "{\n    import std.algorithm.comparison : lexicographicalCompare;\n\
    \    import std.algorithm.iteration : map;\n    import std.range : iota;\n   \
    \ import std.range : retro;\n    import std.range : take;\n    import std.range\
    \ : walkLength;\n    import std.typecons : tuple;\n    import std.typecons : tupleof;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : tupleof;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : tupleof;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : tupleof;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : tupleof;\n    import std.typecons : Tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : tupleof;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : tupleof;\n    import std.typecons\
    \ : Tuple;\n    import std.typecons : tuple;\n    import std.typecons : tupleof;\n\
    \    import std.typecons : Tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : tupleof;\n    import std.typecons : Tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : tupleof;\n    import std.typecons : Tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : tupleof;\n    import\
    \ std.typecons : Tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : tupleof;\n    import std.typecons : Tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : tupleof;\n    import std.typecons : Tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : tupleof;\n    import std.",
  "{\n    int N = grid.length;\n    int[][] dp = new int[N][N];\n    int[][] path\
    \ = new int[N][N];\n    for (int i = 0; i < N; i++)\n    {\n        for (int j\
    \ = 0; j < N; j++)\n        {\n            dp[i][j] = int.max;\n            path[i][j]\
    \ = -1;\n        }\n    }\n    dp[0][0] = 0;\n    for (int i = 0; i < N; i++)\n\
    \    {\n        for (int j = 0; j < N; j++)\n        {\n            if (i > 0\
    \ && dp[i - 1][j] + 1 < dp[i][j])\n            {\n                dp[i][j] = dp[i\
    \ - 1][j] + 1;\n                path[i][j] = 0;\n            }\n            if\
    \ (j > 0 && dp[i][j - 1] + 1 < dp[i][j])\n            {\n                dp[i][j]\
    \ = dp[i][j - 1] + 1;\n                path[i][j] = 1;\n            }\n      \
    \      if (i < N - 1 && dp[i + 1][j] + 1 < dp[i][j])\n            {\n        \
    \        dp[i][j] = dp[i + 1][j] + 1;\n                path[i][j] = 2;\n     \
    \       }\n            if (j < N - 1 && dp[i][j + 1] + 1 < dp[i][j])\n       \
    \     {\n                dp[i][j] = dp[i][j + 1] + 1;\n                path[i][j]\
    \ = 3;\n            }\n        }\n    }\n    int[] res = new int[k];\n    int\
    \ x = 0;\n    int y = 0;\n    for (int i = 0; i < k; i++)\n    {\n        res[i]\
    \ = grid[x][y];\n        switch (path[x][y])\n        {\n            case 0:\n\
    \                x--;\n", "{\n    int N = grid.length;\n    long[][] dp = new\
    \ long[N][N];\n    for (int i = 0; i < N; i++)\n        for (int j = 0; j < N;\
    \ j++)\n            dp[i][j] = long.max;\n    dp[0][0] = grid[0][0];\n    for\
    \ (int i = 0; i < N; i++)\n        for (int j = 0; j < N; j++)\n        {\n  \
    \          if (i > 0)\n                dp[i][j] = min(dp[i][j], dp[i - 1][j] +\
    \ grid[i][j]);\n            if (j > 0)\n                dp[i][j] = min(dp[i][j],\
    \ dp[i][j - 1] + grid[i][j]);\n        }\n    long[] res = new long[k];\n    int\
    \ i = N - 1, j = N - 1;\n    for (int l = k - 1; l >= 0; l--)\n    {\n       \
    \ res[l] = grid[i][j];\n        if (i > 0 && dp[i - 1][j] + grid[i][j] == dp[i][j])\n\
    \            i--;\n        else\n            j--;\n    }\n    return res;\n}",
  "{\n    int n = grid.length;\n    long[][] dp = new long[n][n];\n    for (int i\
    \ = 0; i < n; i++)\n        for (int j = 0; j < n; j++)\n            dp[i][j]\
    \ = long.max;\n    dp[0][0] = grid[0][0];\n    for (int i = 0; i < n; i++)\n \
    \       for (int j = 0; j < n; j++)\n        {\n            if (i > 0)\n     \
    \           dp[i][j] = min(dp[i][j], dp[i - 1][j] + grid[i][j]);\n           \
    \ if (j > 0)\n                dp[i][j] = min(dp[i][j], dp[i][j - 1] + grid[i][j]);\n\
    \        }\n    long[] res = new long[k];\n    int i = n - 1, j = n - 1;\n   \
    \ for (int t = k - 1; t >= 0; t--)\n    {\n        res[t] = grid[i][j];\n    \
    \    if (i > 0 && dp[i - 1][j] + grid[i][j] == dp[i][j])\n            i--;\n \
    \       else\n            j--;\n    }\n    return res;\n}", "{\n    int N = grid.length;\n\
    \    int[][] dp = new int[N][N];\n    int[][] prev = new int[N][N];\n    int[][]\
    \ dir = new int[][]{{0, 1}, {1, 0}, {0, -1}, {-1, 0}};\n    for (int i = 0; i\
    \ < N; i++)\n        for (int j = 0; j < N; j++)\n            dp[i][j] = int.max;\n\
    \    dp[0][0] = 0;\n    for (int i = 0; i < N; i++)\n        for (int j = 0; j\
    \ < N; j++)\n            for (int d = 0; d < 4; d++)\n            {\n        \
    \        int x = i + dir[d][0];\n                int y = j + dir[d][1];\n    \
    \            if (x < 0 || x >= N || y < 0 || y >= N)\n                    continue;\n\
    \                if (dp[x][y] > dp[i][j] + 1)\n                {\n           \
    \         dp[x][y] = dp[i][j] + 1;\n                    prev[x][y] = i * N + j;\n\
    \                }\n            }\n    long[] res = new long[k];\n    int cur\
    \ = (int)(k - 1);\n    int x = N - 1;\n    int y = N - 1;\n    while (cur >= 0)\n\
    \    {\n        res[cur--] = grid[x][y];\n        int p = prev[x][y];\n      \
    \  x = p / N;\n        y = p % N;\n    }\n    return res;\n}", "{\n    int N =\
    \ grid.length;\n    long[][] dp = new long[N][N];\n    long[][] visited = new\
    \ long[N][N];\n    long[][] prev = new long[N][N];\n    long[][] prev_i = new\
    \ long[N][N];\n    long[][] prev_j = new long[N][N];\n    for (int i = 0; i <\
    \ N; i++)\n    {\n        for (int j = 0; j < N; j++)\n        {\n           \
    \ dp[i][j] = long.max;\n            visited[i][j] = 0;\n            prev[i][j]\
    \ = -1;\n            prev_i[i][j] = -1;\n            prev_j[i][j] = -1;\n    \
    \    }\n    }\n    dp[0][0] = grid[0][0];\n    visited[0][0] = 1;\n    for (int\
    \ i = 0; i < N; i++)\n    {\n        for (int j = 0; j < N; j++)\n        {\n\
    \            if (i > 0 && dp[i][j] > dp[i - 1][j] + grid[i][j])\n            {\n\
    \                dp[i][j] = dp[i - 1][j] + grid[i][j];\n                prev[i][j]\
    \ = dp[i - 1][j];\n                prev_i[i][j] = i - 1;\n                prev_j[i][j]\
    \ = j;\n            }\n            if (j > 0 && dp[i][j] > dp[i][j - 1] + grid[i][j])\n\
    \            {\n                dp[i][j] = dp[i][j - 1] + grid[i][j];\n      \
    \          prev[i][j] = dp[i][j - 1];\n                prev_i[i][j] = i;\n   \
    \             prev_j[i][j] = j - 1;\n            }\n            if (i < N - 1\
    \ && dp[i][j] > dp[i + 1][j] + grid[i", "{\n    // Write your code here\n    int\
    \ n = grid.length;\n    int[][] dp = new int[n][n];\n    int[][] path = new int[n][n];\n\
    \    for (int i = 0; i < n; i++)\n    {\n        for (int j = 0; j < n; j++)\n\
    \        {\n            dp[i][j] = int.max;\n            path[i][j] = -1;\n  \
    \      }\n    }\n    dp[0][0] = 0;\n    for (int i = 0; i < n; i++)\n    {\n \
    \       for (int j = 0; j < n; j++)\n        {\n            if (i > 0)\n     \
    \       {\n                if (dp[i - 1][j] + 1 < dp[i][j])\n                {\n\
    \                    dp[i][j] = dp[i - 1][j] + 1;\n                    path[i][j]\
    \ = 0;\n                }\n            }\n            if (j > 0)\n           \
    \ {\n                if (dp[i][j - 1] + 1 < dp[i][j])\n                {\n   \
    \                 dp[i][j] = dp[i][j - 1] + 1;\n                    path[i][j]\
    \ = 1;\n                }\n            }\n        }\n    }\n    int x = n - 1;\n\
    \    int y = n - 1;\n    long[] res = new long[k];\n    for (int i = 0; i < k;\
    \ i++)\n    {\n        res[i] = grid[x][y];\n        if (path[x][y] == 0)\n  \
    \      {\n            x--;\n        }\n        else\n        {\n            y--;\n\
    \        }\n    }\n    return res;\n}", "{\n    long N = grid.length;\n    long[][]\
    \ dp = new long[N][N];\n    for (long i = 0; i < N; i++)\n        for (long j\
    \ = 0; j < N; j++)\n            dp[i][j] = long.max;\n    dp[0][0] = grid[0][0];\n\
    \    for (long i = 0; i < N; i++)\n        for (long j = 0; j < N; j++)\n    \
    \    {\n            if (i > 0)\n                dp[i][j] = min(dp[i][j], dp[i\
    \ - 1][j] + grid[i][j]);\n            if (j > 0)\n                dp[i][j] = min(dp[i][j],\
    \ dp[i][j - 1] + grid[i][j]);\n        }\n    long[] res = new long[k];\n    res[0]\
    \ = grid[0][0];\n    long i = 0, j = 0;\n    for (long l = 1; l < k; l++)\n  \
    \  {\n        if (i > 0 && dp[i - 1][j] + grid[i][j] < dp[i][j])\n        {\n\
    \            res[l] = grid[i][j];\n            i--;\n        }\n        else if\
    \ (j > 0 && dp[i][j - 1] + grid[i][j] < dp[i][j])\n        {\n            res[l]\
    \ = grid[i][j];\n            j--;\n        }\n        else\n        {\n      \
    \      res[l] = grid[i][j];\n            i++;\n            j++;\n        }\n \
    \   }\n    return res;\n}", "{\n    auto n = grid.length;\n    auto m = grid[0].length;\n\
    \    auto dp = new long[][](n, m);\n    auto path = new long[][](n, m);\n    foreach\
    \ (i; 0 .. n)\n    {\n        foreach (j; 0 .. m)\n        {\n            dp[i][j]\
    \ = long.max;\n            path[i][j] = long.max;\n        }\n    }\n    dp[0][0]\
    \ = 0;\n    path[0][0] = grid[0][0];\n    foreach (i; 0 .. n)\n    {\n       \
    \ foreach (j; 0 .. m)\n        {\n            if (i > 0)\n            {\n    \
    \            if (dp[i][j] > dp[i - 1][j] + 1)\n                {\n           \
    \         dp[i][j] = dp[i - 1][j] + 1;\n                    path[i][j] = path[i\
    \ - 1][j] * 10 + grid[i][j];\n                }\n                else if (dp[i][j]\
    \ == dp[i - 1][j] + 1)\n                {\n                    path[i][j] = min(path[i][j],\
    \ path[i - 1][j] * 10 + grid[i][j]);\n                }\n            }\n     \
    \       if (j > 0)\n            {\n                if (dp[i][j] > dp[i][j - 1]\
    \ + 1)\n                {\n                    dp[i][j] = dp[i][j - 1] + 1;\n\
    \                    path[i][j] = path[i][j - 1] * 10 + grid[i][j];\n        \
    \        }\n                else if (dp[i][j] == dp[i][j - 1] + 1)\n         \
    \       {\n                    path[i][j] = min(path[i][j], path[i][j - 1] * 10\
    \ + grid[i][j]);\n                }\n            }\n        }\n    }\n    auto\
    \ res = new long[k];\n    auto temp = path[n - 1][m - 1];\n    foreach", "{\n\
    \    int N = grid.length;\n    int[] dx = [0, 0, 1, -1];\n    int[] dy = [1, -1,\
    \ 0, 0];\n    int[][] dist = new int[N][N];\n    for (int i = 0; i < N; i++)\n\
    \        for (int j = 0; j < N; j++)\n            dist[i][j] = int.max;\n    dist[0][0]\
    \ = 0;\n    auto cmp = (int[] a, int[] b) => dist[a[0]][a[1]] > dist[b[0]][b[1]];\n\
    \    auto pq = new PriorityQueue!(cmp)();\n    pq.put([0, 0]);\n    while (!pq.empty)\n\
    \    {\n        int[] cur = pq.get;\n        int x = cur[0];\n        int y =\
    \ cur[1];\n        for (int i = 0; i < 4; i++)\n        {\n            int nx\
    \ = x + dx[i];\n            int ny = y + dy[i];\n            if (nx < 0 || nx\
    \ >= N || ny < 0 || ny >= N)\n                continue;\n            if (dist[nx][ny]\
    \ > dist[x][y] + 1)\n            {\n                dist[nx][ny] = dist[x][y]\
    \ + 1;\n                pq.put([nx, ny]);\n            }\n        }\n    }\n \
    \   int[][] dp = new int[N][N];\n    for (int i = 0; i < N; i++)\n        for\
    \ (int j = 0; j < N; j++)\n            dp[i][j] = int.max;\n    dp[0][0] = grid[0][0];\n\
    \    pq.put([0, 0]);\n    while (!pq.empty)\n    {\n        int[] cur = pq.get;\n\
    \        int x = cur[0];\n        int y = cur[1];\n        for (int i = 0; i <\
    \ 4; i++)\n        {\n            int nx = x + dx[i];\n", "{\n    long N = grid.length;\n\
    \    long[][] dp = new long[N][N];\n    long[][] prev = new long[N][N];\n    long[][]\
    \ next = new long[N][N];\n    foreach(i; 0 .. N)\n    {\n        foreach(j; 0\
    \ .. N)\n        {\n            dp[i][j] = long.max;\n            prev[i][j] =\
    \ -1;\n            next[i][j] = -1;\n        }\n    }\n    dp[0][0] = 0;\n   \
    \ foreach(i; 0 .. N)\n    {\n        foreach(j; 0 .. N)\n        {\n         \
    \   if(i + 1 < N)\n            {\n                if(dp[i + 1][j] > dp[i][j] +\
    \ grid[i + 1][j])\n                {\n                    dp[i + 1][j] = dp[i][j]\
    \ + grid[i + 1][j];\n                    prev[i + 1][j] = i * N + j;\n       \
    \         }\n            }\n            if(j + 1 < N)\n            {\n       \
    \         if(dp[i][j + 1] > dp[i][j] + grid[i][j + 1])\n                {\n  \
    \                  dp[i][j + 1] = dp[i][j] + grid[i][j + 1];\n               \
    \     prev[i][j + 1] = i * N + j;\n                }\n            }\n        }\n\
    \    }\n    long[] res = new long[k];\n    long cur = (N - 1) * N + N - 1;\n \
    \   foreach(i; 0 .. k)\n    {\n        res[i] = grid[cur / N][cur % N];\n    \
    \    next[prev[cur / N][cur % N] / N][prev[cur / N][cur % N] % N] = cur;\n   \
    \     cur = prev[cur / N][cur % N];\n    }\n    return res;\n}", "{\n    int N\
    \ = grid.length;\n    int[][] dp = new int[N][N];\n    int[][] prev = new int[N][N];\n\
    \    for (int i = 0; i < N; i++)\n        for (int j = 0; j < N; j++)\n      \
    \      dp[i][j] = int.max;\n    dp[0][0] = 0;\n    prev[0][0] = -1;\n    for (int\
    \ i = 0; i < N; i++)\n        for (int j = 0; j < N; j++)\n        {\n       \
    \     if (i > 0 && dp[i - 1][j] + 1 < dp[i][j])\n            {\n             \
    \   dp[i][j] = dp[i - 1][j] + 1;\n                prev[i][j] = 0;\n          \
    \  }\n            if (j > 0 && dp[i][j - 1] + 1 < dp[i][j])\n            {\n \
    \               dp[i][j] = dp[i][j - 1] + 1;\n                prev[i][j] = 1;\n\
    \            }\n            if (i < N - 1 && dp[i + 1][j] + 1 < dp[i][j])\n  \
    \          {\n                dp[i][j] = dp[i + 1][j] + 1;\n                prev[i][j]\
    \ = 2;\n            }\n            if (j < N - 1 && dp[i][j + 1] + 1 < dp[i][j])\n\
    \            {\n                dp[i][j] = dp[i][j + 1] + 1;\n               \
    \ prev[i][j] = 3;\n            }\n        }\n    long[] res = new long[k];\n \
    \   int x = N - 1;\n    int y = N - 1;\n    for (int i = k - 1; i >= 0; i--)\n\
    \    {\n        res[i] = grid[x][y];\n        switch (prev[x][y])\n        {\n\
    \            case 0:\n                x--;\n                break;\n         \
    \   case 1:\n                y", "{\n    long n = grid.length;\n    long[][] dp\
    \ = new long[n][n];\n    foreach(i; 0 .. n)\n        foreach(j; 0 .. n)\n    \
    \        dp[i][j] = long.max;\n    dp[0][0] = grid[0][0];\n    foreach(i; 0 ..\
    \ n)\n        foreach(j; 0 .. n)\n        {\n            if(i > 0)\n         \
    \       dp[i][j] = min(dp[i][j], dp[i - 1][j] + grid[i][j]);\n            if(j\
    \ > 0)\n                dp[i][j] = min(dp[i][j], dp[i][j - 1] + grid[i][j]);\n\
    \        }\n    long[] res = new long[k];\n    long x = 0, y = 0;\n    foreach(i;\
    \ 0 .. k)\n    {\n        res[i] = grid[x][y];\n        if(x < n - 1 && dp[x +\
    \ 1][y] + grid[x][y] == dp[x][y])\n            x++;\n        else\n          \
    \  y++;\n    }\n    return res;\n}", "{\n    // Write your code here\n    int\
    \ n = grid.length;\n    int[][] dp = new int[n][n];\n    for (int i = 0; i < n;\
    \ i++)\n        for (int j = 0; j < n; j++)\n            dp[i][j] = int.max;\n\
    \    dp[0][0] = 0;\n    for (int i = 0; i < n; i++)\n        for (int j = 0; j\
    \ < n; j++)\n        {\n            if (i > 0)\n                dp[i][j] = min(dp[i][j],\
    \ dp[i - 1][j] + 1);\n            if (j > 0)\n                dp[i][j] = min(dp[i][j],\
    \ dp[i][j - 1] + 1);\n        }\n    int[][] dp2 = new int[n][n];\n    for (int\
    \ i = 0; i < n; i++)\n        for (int j = 0; j < n; j++)\n            dp2[i][j]\
    \ = int.max;\n    dp2[n - 1][n - 1] = 0;\n    for (int i = n - 1; i >= 0; i--)\n\
    \        for (int j = n - 1; j >= 0; j--)\n        {\n            if (i < n -\
    \ 1)\n                dp2[i][j] = min(dp2[i][j], dp2[i + 1][j] + 1);\n       \
    \     if (j < n - 1)\n                dp2[i][j] = min(dp2[i][j], dp2[i][j + 1]\
    \ + 1);\n        }\n    int[][] dp3 = new int[n][n];\n    for (int i = 0; i <\
    \ n; i++)\n        for (int j = 0; j < n; j++)\n            dp3[i][j] = dp[i][j]\
    \ + dp2[i][j];\n    int[][] dp4 = new int[n][n];\n    for (int i = 0; i < n",
  "{\n    // Write your code here\n    int n = grid.length;\n    int[][] dp = new\
    \ int[n][n];\n    for (int i = 0; i < n; i++)\n        for (int j = 0; j < n;\
    \ j++)\n            dp[i][j] = int.max;\n    dp[0][0] = 0;\n    for (int i = 0;\
    \ i < n; i++)\n        for (int j = 0; j < n; j++)\n        {\n            if\
    \ (i > 0)\n                dp[i][j] = min(dp[i][j], dp[i - 1][j] + grid[i][j]);\n\
    \            if (j > 0)\n                dp[i][j] = min(dp[i][j], dp[i][j - 1]\
    \ + grid[i][j]);\n        }\n    long[] ans = new long[k];\n    int cur = 0;\n\
    \    for (int i = 0; i < n; i++)\n        for (int j = 0; j < n; j++)\n      \
    \      if (dp[i][j] == k - 1)\n            {\n                ans[cur++] = grid[i][j];\n\
    \                int x = i, y = j;\n                while (k > 1)\n          \
    \      {\n                    if (x > 0 && dp[x - 1][y] == k - 2)\n          \
    \          {\n                        ans[cur++] = grid[x - 1][y];\n         \
    \               x--;\n                    }\n                    else if (y >\
    \ 0 && dp[x][y - 1] == k - 2)\n                    {\n                       \
    \ ans[cur++] = grid[x][y - 1];\n                        y--;\n               \
    \     }\n                    k--;\n                }\n                return ans;\n\
    \            }\n    return ans;\n}", "{\n    int n = grid.length;\n    int[][]\
    \ dp = new int[n][n];\n    for (int i = 0; i < n; i++)\n        for (int j = 0;\
    \ j < n; j++)\n            dp[i][j] = int.max;\n    dp[0][0] = 0;\n    for (int\
    \ i = 0; i < n; i++)\n        for (int j = 0; j < n; j++)\n        {\n       \
    \     if (i > 0)\n                dp[i][j] = min(dp[i][j], dp[i - 1][j] + 1);\n\
    \            if (j > 0)\n                dp[i][j] = min(dp[i][j], dp[i][j - 1]\
    \ + 1);\n        }\n    int[][] dp2 = new int[n][n];\n    for (int i = 0; i <\
    \ n; i++)\n        for (int j = 0; j < n; j++)\n            dp2[i][j] = int.max;\n\
    \    dp2[n - 1][n - 1] = 0;\n    for (int i = n - 1; i >= 0; i--)\n        for\
    \ (int j = n - 1; j >= 0; j--)\n        {\n            if (i < n - 1)\n      \
    \          dp2[i][j] = min(dp2[i][j], dp2[i + 1][j] + 1);\n            if (j <\
    \ n - 1)\n                dp2[i][j] = min(dp2[i][j], dp2[i][j + 1] + 1);\n   \
    \     }\n    int[][] dp3 = new int[n][n];\n    for (int i = 0; i < n; i++)\n \
    \       for (int j = 0; j < n; j++)\n            dp3[i][j] = dp[i][j] + dp2[i][j];\n\
    \    int[][] dp4 = new int[n][n];\n    for (int i = 0; i < n; i++)\n        for\
    \ (", "{\n    int n = grid.length;\n    int[][] dp = new int[n][n];\n    int[][]\
    \ prev = new int[n][n];\n    for (int i = 0; i < n; i++)\n        for (int j =\
    \ 0; j < n; j++)\n            dp[i][j] = int.max;\n    dp[0][0] = 0;\n    for\
    \ (int i = 0; i < n; i++)\n        for (int j = 0; j < n; j++)\n        {\n  \
    \          if (i > 0 && dp[i - 1][j] + 1 < dp[i][j])\n            {\n        \
    \        dp[i][j] = dp[i - 1][j] + 1;\n                prev[i][j] = 1;\n     \
    \       }\n            if (j > 0 && dp[i][j - 1] + 1 < dp[i][j])\n           \
    \ {\n                dp[i][j] = dp[i][j - 1] + 1;\n                prev[i][j]\
    \ = 2;\n            }\n            if (i < n - 1 && dp[i + 1][j] + 1 < dp[i][j])\n\
    \            {\n                dp[i][j] = dp[i + 1][j] + 1;\n               \
    \ prev[i][j] = 3;\n            }\n            if (j < n - 1 && dp[i][j + 1] +\
    \ 1 < dp[i][j])\n            {\n                dp[i][j] = dp[i][j + 1] + 1;\n\
    \                prev[i][j] = 4;\n            }\n        }\n    int[] path = new\
    \ int[k];\n    int cur = 0;\n    int i = n - 1;\n    int j = n - 1;\n    while\
    \ (k > 0)\n    {\n        path[cur++] = grid[i][j];\n        k--;\n        if\
    \ (prev[i][j] == 1)\n            i--;\n        else if (prev[i][j] == 2)\n   \
    \         j--;\n        else if (prev[", "{\n    int N = grid.length;\n    int[][]\
    \ dp = new int[N][N];\n    for (int i = 0; i < N; i++)\n        for (int j = 0;\
    \ j < N; j++)\n            dp[i][j] = int.max;\n    dp[0][0] = 0;\n    for (int\
    \ i = 0; i < N; i++)\n        for (int j = 0; j < N; j++)\n        {\n       \
    \     if (i > 0)\n                dp[i][j] = min(dp[i][j], dp[i - 1][j] + grid[i][j]);\n\
    \            if (j > 0)\n                dp[i][j] = min(dp[i][j], dp[i][j - 1]\
    \ + grid[i][j]);\n        }\n    int[] res = new int[k];\n    int r = N - 1, c\
    \ = N - 1;\n    for (int i = k - 1; i >= 0; i--)\n    {\n        res[i] = grid[r][c];\n\
    \        if (r > 0 && dp[r - 1][c] + grid[r][c] == dp[r][c])\n            r--;\n\
    \        else\n            c--;\n    }\n    return res;\n}", "{\n    // Write\
    \ your code here\n    int n = grid.length;\n    if (n == 0)\n        return new\
    \ long[0];\n    int m = grid[0].length;\n    if (m == 0)\n        return new long[0];\n\
    \    if (k == 0)\n        return new long[0];\n    if (k == 1)\n        return\
    \ new long[]{grid[0][0]};\n    if (k == 2)\n    {\n        long min = grid[0][0];\n\
    \        if (n == 1)\n        {\n            for (int i = 1; i < m; i++)\n   \
    \             min = min(min, grid[0][i]);\n            return new long[]{min};\n\
    \        }\n        if (m == 1)\n        {\n            for (int i = 1; i < n;\
    \ i++)\n                min = min(min, grid[i][0]);\n            return new long[]{min};\n\
    \        }\n        for (int i = 0; i < n; i++)\n            for (int j = 0; j\
    \ < m; j++)\n                if (i + j == 1)\n                    min = min(min,\
    \ grid[i][j]);\n        return new long[]{min};\n    }\n    if (k == 3)\n    {\n\
    \        long min = grid[0][0];\n        if (n == 1)\n        {\n            for\
    \ (int i = 1; i < m; i++)\n                min = min(min, grid[0][i]);\n     \
    \       return new long[]{min};\n        }\n        if (m == 1)\n        {\n \
    \           for (int i = 1; i < n; i++)\n                min = min(min, grid[i][0]);\n\
    \            return new long[]{min};\n        }\n        for (int i = 0; i < n;\
    \ i++)\n            for (int j = 0; j < m; j++)\n                if (i + j ==\
    \ 1)\n                    min = min(min, grid[i][j]);\n        return new long[]{min};\n\
    \    }\n    if (k == 4)\n    {\n        long min = grid[0][0];\n        if (n\
    \ == 1", "{\n    long N = grid.length;\n    long[][] dp = new long[N][N];\n  \
    \  long[][] prev = new long[N][N];\n    long[][] next = new long[N][N];\n    for\
    \ (long i = 0; i < N; i++) \n    {\n        for (long j = 0; j < N; j++) \n  \
    \      {\n            dp[i][j] = long.max;\n            prev[i][j] = -1;\n   \
    \         next[i][j] = -1;\n        }\n    }\n    dp[0][0] = grid[0][0];\n   \
    \ for (long i = 0; i < N; i++) \n    {\n        for (long j = 0; j < N; j++) \n\
    \        {\n            if (i > 0 && dp[i - 1][j] + grid[i][j] < dp[i][j]) \n\
    \            {\n                dp[i][j] = dp[i - 1][j] + grid[i][j];\n      \
    \          prev[i][j] = i - 1;\n                next[i][j] = j;\n            }\n\
    \            if (j > 0 && dp[i][j - 1] + grid[i][j] < dp[i][j]) \n           \
    \ {\n                dp[i][j] = dp[i][j - 1] + grid[i][j];\n                prev[i][j]\
    \ = i;\n                next[i][j] = j - 1;\n            }\n        }\n    }\n\
    \    long[] res = new long[k];\n    long i = N - 1;\n    long j = N - 1;\n   \
    \ for (long l = k - 1; l >= 0; l--) \n    {\n        res[l] = grid[i][j];\n  \
    \      long tmp = i;\n        i = prev[i][j];\n        j = next[tmp][j];\n   \
    \ }\n    return res;\n}", "{\n    long N = grid.length;\n    long[][] dp = new\
    \ long[N][N];\n    foreach(i; 0 .. N)\n        foreach(j; 0 .. N)\n          \
    \  dp[i][j] = long.max;\n    dp[0][0] = grid[0][0];\n    foreach(i; 0 .. N)\n\
    \        foreach(j; 0 .. N)\n        {\n            if(i > 0)\n              \
    \  dp[i][j] = min(dp[i][j], dp[i - 1][j] + grid[i][j]);\n            if(j > 0)\n\
    \                dp[i][j] = min(dp[i][j], dp[i][j - 1] + grid[i][j]);\n      \
    \  }\n    long[] ans = new long[k];\n    ans[0] = grid[0][0];\n    long cur =\
    \ dp[0][0];\n    long i = 0, j = 0;\n    foreach(idx; 1 .. k)\n    {\n       \
    \ if(i > 0 && dp[i - 1][j] == cur - grid[i][j])\n        {\n            ans[idx]\
    \ = grid[i - 1][j];\n            cur = dp[i - 1][j];\n            i--;\n     \
    \   }\n        else if(j > 0 && dp[i][j - 1] == cur - grid[i][j])\n        {\n\
    \            ans[idx] = grid[i][j - 1];\n            cur = dp[i][j - 1];\n   \
    \         j--;\n        }\n    }\n    return ans;\n}", "{\n    int n = grid.length;\n\
    \    long[][] dp = new long[n][n];\n    long[][] path = new long[n][n];\n    for\
    \ (int i = 0; i < n; i++)\n        for (int j = 0; j < n; j++)\n            dp[i][j]\
    \ = -1;\n    dp[0][0] = grid[0][0];\n    path[0][0] = 1;\n    for (int i = 0;\
    \ i < n; i++)\n        for (int j = 0; j < n; j++)\n        {\n            if\
    \ (i > 0 && dp[i - 1][j] != -1)\n            {\n                long new_dp =\
    \ dp[i - 1][j] + grid[i][j];\n                if (dp[i][j] == -1 || new_dp < dp[i][j])\n\
    \                {\n                    dp[i][j] = new_dp;\n                 \
    \   path[i][j] = path[i - 1][j];\n                }\n                else if (new_dp\
    \ == dp[i][j])\n                    path[i][j] += path[i - 1][j];\n          \
    \  }\n            if (j > 0 && dp[i][j - 1] != -1)\n            {\n          \
    \      long new_dp = dp[i][j - 1] + grid[i][j];\n                if (dp[i][j]\
    \ == -1 || new_dp < dp[i][j])\n                {\n                    dp[i][j]\
    \ = new_dp;\n                    path[i][j] = path[i][j - 1];\n              \
    \  }\n                else if (new_dp == dp[i][j])\n                    path[i][j]\
    \ += path[i][j - 1];\n            }\n        }\n    long[] res = new long[k];\n\
    \    res[0] = grid[0][0];\n    int i = 0, j = 0;\n    for (int l = 1; l < k; l++)\n\
    \    {\n        long[][] new_dp = new long[n][n];\n        long[", "{\n    long\
    \ n = grid.length;\n    long[][] dp = new long[n][n];\n    for (long i = 0; i\
    \ < n; i++)\n        for (long j = 0; j < n; j++)\n            dp[i][j] = long.max;\n\
    \    dp[0][0] = grid[0][0];\n    for (long i = 0; i < n; i++)\n        for (long\
    \ j = 0; j < n; j++)\n        {\n            if (i > 0)\n                dp[i][j]\
    \ = min(dp[i][j], dp[i - 1][j] + grid[i][j]);\n            if (j > 0)\n      \
    \          dp[i][j] = min(dp[i][j], dp[i][j - 1] + grid[i][j]);\n        }\n \
    \   long[] ans = new long[k];\n    long x = n - 1, y = n - 1;\n    for (long i\
    \ = k - 1; i >= 0; i--)\n    {\n        ans[i] = grid[x][y];\n        if (x >\
    \ 0 && dp[x - 1][y] + grid[x][y] == dp[x][y])\n            x--;\n        else\n\
    \            y--;\n    }\n    return ans;\n}", "{\n    long n = grid.length;\n\
    \    long[][] dp = new long[n][n];\n    long[][] prev = new long[n][n];\n    for\
    \ (long i = 0; i < n; i++)\n    {\n        for (long j = 0; j < n; j++)\n    \
    \    {\n            dp[i][j] = long.max;\n            prev[i][j] = -1;\n     \
    \   }\n    }\n    dp[0][0] = grid[0][0];\n    for (long i = 0; i < n; i++)\n \
    \   {\n        for (long j = 0; j < n; j++)\n        {\n            if (i > 0)\n\
    \            {\n                if (dp[i][j] > dp[i - 1][j] + grid[i][j])\n  \
    \              {\n                    dp[i][j] = dp[i - 1][j] + grid[i][j];\n\
    \                    prev[i][j] = 0;\n                }\n            }\n     \
    \       if (j > 0)\n            {\n                if (dp[i][j] > dp[i][j - 1]\
    \ + grid[i][j])\n                {\n                    dp[i][j] = dp[i][j - 1]\
    \ + grid[i][j];\n                    prev[i][j] = 1;\n                }\n    \
    \        }\n        }\n    }\n    long[] res = new long[k];\n    long i = n -\
    \ 1;\n    long j = n - 1;\n    for (long l = k - 1; l >= 0; l--)\n    {\n    \
    \    res[l] = grid[i][j];\n        if (prev[i][j] == 0)\n        {\n         \
    \   i--;\n        }\n        else\n        {\n            j--;\n        }\n  \
    \  }\n    return res;\n}", "{\n    int n = grid.length;\n    int m = grid[0].length;\n\
    \    long[][] dp = new long[n][m];\n    for (int i = 0; i < n; i++)\n        for\
    \ (int j = 0; j < m; j++)\n            dp[i][j] = long.max;\n    dp[0][0] = grid[0][0];\n\
    \    for (int i = 0; i < n; i++)\n        for (int j = 0; j < m; j++)\n      \
    \  {\n            if (i > 0)\n                dp[i][j] = min(dp[i][j], dp[i -\
    \ 1][j] + grid[i][j]);\n            if (j > 0)\n                dp[i][j] = min(dp[i][j],\
    \ dp[i][j - 1] + grid[i][j]);\n        }\n    long[] res = new long[k];\n    int\
    \ i = n - 1;\n    int j = m - 1;\n    for (int t = k - 1; t >= 0; t--)\n    {\n\
    \        res[t] = grid[i][j];\n        if (i > 0 && dp[i - 1][j] + grid[i][j]\
    \ == dp[i][j])\n            i--;\n        else\n            j--;\n    }\n    return\
    \ res;\n}", "{\n    int n = grid.length;\n    int[][] dp = new int[n][n];\n  \
    \  for (int i = 0; i < n; i++)\n        for (int j = 0; j < n; j++)\n        \
    \    dp[i][j] = int.max;\n    dp[0][0] = 0;\n    for (int i = 0; i < n; i++)\n\
    \        for (int j = 0; j < n; j++)\n        {\n            if (i > 0)\n    \
    \            dp[i][j] = min(dp[i][j], dp[i - 1][j] + grid[i][j]);\n          \
    \  if (j > 0)\n                dp[i][j] = min(dp[i][j], dp[i][j - 1] + grid[i][j]);\n\
    \        }\n    long[] ans = new long[k];\n    int cnt = 0;\n    for (int i =\
    \ n - 1, j = n - 1; i >= 0 && j >= 0;)\n    {\n        ans[cnt++] = grid[i][j];\n\
    \        if (i > 0 && dp[i - 1][j] + grid[i][j] == dp[i][j])\n            i--;\n\
    \        else\n            j--;\n    }\n    return ans;\n}", "{\n    auto n =\
    \ grid.length;\n    auto m = grid[0].length;\n    auto dp = new long[][](n, m);\n\
    \    dp[0][0] = grid[0][0];\n    foreach(i; 1 .. n)\n        dp[i][0] = dp[i -\
    \ 1][0] + grid[i][0];\n    foreach(i; 1 .. m)\n        dp[0][i] = dp[0][i - 1]\
    \ + grid[0][i];\n    foreach(i; 1 .. n)\n        foreach(j; 1 .. m)\n        \
    \    dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];\n    auto res =\
    \ new long[](k);\n    auto i = n - 1;\n    auto j = m - 1;\n    foreach(idx; k\
    \ .. 0)\n    {\n        res[idx] = grid[i][j];\n        if(i == 0)\n         \
    \   j--;\n        else if(j == 0)\n            i--;\n        else if(dp[i - 1][j]\
    \ < dp[i][j - 1])\n            i--;\n        else\n            j--;\n    }\n \
    \   return res;\n}", "{\n    long N = grid.length;\n    long[][] dp = new long[N][N];\n\
    \    foreach(i; 0 .. N)\n        foreach(j; 0 .. N)\n            dp[i][j] = long.max;\n\
    \    dp[0][0] = grid[0][0];\n    foreach(i; 0 .. N)\n        foreach(j; 0 .. N)\n\
    \        {\n            if(i > 0)\n                dp[i][j] = min(dp[i][j], dp[i\
    \ - 1][j] + grid[i][j]);\n            if(j > 0)\n                dp[i][j] = min(dp[i][j],\
    \ dp[i][j - 1] + grid[i][j]);\n        }\n    long[] ans = new long[k];\n    long\
    \ cur = 0;\n    for(long i = N - 1, j = N - 1; k > 0; k--)\n    {\n        ans[cur++]\
    \ = grid[i][j];\n        if(i > 0 && dp[i - 1][j] + grid[i][j] == dp[i][j])\n\
    \            i--;\n        else\n            j--;\n    }\n    return ans;\n}",
  "{\n    long N = grid.length;\n    long[][] dp = new long[N][N];\n    foreach(i;\
    \ 0 .. N)\n        foreach(j; 0 .. N)\n            dp[i][j] = long.max;\n    dp[0][0]\
    \ = grid[0][0];\n    foreach(i; 0 .. N)\n        foreach(j; 0 .. N)\n        {\n\
    \            if(i > 0)\n                dp[i][j] = min(dp[i][j], dp[i - 1][j]\
    \ + grid[i][j]);\n            if(j > 0)\n                dp[i][j] = min(dp[i][j],\
    \ dp[i][j - 1] + grid[i][j]);\n        }\n    long[] res = new long[k];\n    res[0]\
    \ = grid[0][0];\n    long i = 0, j = 0;\n    foreach(idx; 1 .. k)\n    {\n   \
    \     if(i + 1 < N && dp[i + 1][j] + grid[i + 1][j] == dp[i][j])\n        {\n\
    \            res[idx] = grid[i + 1][j];\n            i++;\n        }\n       \
    \ else\n        {\n            res[idx] = grid[i][j + 1];\n            j++;\n\
    \        }\n    }\n    return res;\n}", "{\n    int N = grid.length;\n    int[][]\
    \ dp = new int[N][N];\n    int[][] path = new int[N][N];\n    for (int i = 0;\
    \ i < N; i++)\n    {\n        for (int j = 0; j < N; j++)\n        {\n       \
    \     dp[i][j] = int.max;\n            path[i][j] = -1;\n        }\n    }\n  \
    \  dp[0][0] = 0;\n    for (int i = 0; i < N; i++)\n    {\n        for (int j =\
    \ 0; j < N; j++)\n        {\n            if (i > 0 && dp[i - 1][j] + 1 < dp[i][j])\n\
    \            {\n                dp[i][j] = dp[i - 1][j] + 1;\n               \
    \ path[i][j] = 0;\n            }\n            if (j > 0 && dp[i][j - 1] + 1 <\
    \ dp[i][j])\n            {\n                dp[i][j] = dp[i][j - 1] + 1;\n   \
    \             path[i][j] = 1;\n            }\n            if (i < N - 1 && dp[i\
    \ + 1][j] + 1 < dp[i][j])\n            {\n                dp[i][j] = dp[i + 1][j]\
    \ + 1;\n                path[i][j] = 2;\n            }\n            if (j < N\
    \ - 1 && dp[i][j + 1] + 1 < dp[i][j])\n            {\n                dp[i][j]\
    \ = dp[i][j + 1] + 1;\n                path[i][j] = 3;\n            }\n      \
    \  }\n    }\n    int x = 0;\n    int y = 0;\n    long[] ret = new long[k];\n \
    \   for (int i = 0; i < k; i++)\n    {\n        ret[i] = grid[x][y];\n       \
    \ switch (path[x][y])\n        {\n            case 0:\n                x--;\n",
  "{\n    int N = grid.length;\n    int[][] dp = new int[N][N];\n    for (int i =\
    \ 0; i < N; i++)\n        for (int j = 0; j < N; j++)\n            dp[i][j] =\
    \ int.max;\n    dp[0][0] = 0;\n    for (int i = 0; i < N; i++)\n        for (int\
    \ j = 0; j < N; j++)\n        {\n            if (i > 0)\n                dp[i][j]\
    \ = min(dp[i][j], dp[i - 1][j] + 1);\n            if (j > 0)\n               \
    \ dp[i][j] = min(dp[i][j], dp[i][j - 1] + 1);\n        }\n    int[] res = new\
    \ int[k];\n    int x = 0, y = 0;\n    for (int i = 0; i < k; i++)\n    {\n   \
    \     res[i] = grid[x][y];\n        if (x + 1 < N && dp[x + 1][y] == dp[x][y]\
    \ + 1)\n            x++;\n        else if (y + 1 < N && dp[x][y + 1] == dp[x][y]\
    \ + 1)\n            y++;\n    }\n    return res;\n}", "{\n    long n = grid.length;\n\
    \    long[][] dp = new long[n][n];\n    long[][] dp2 = new long[n][n];\n    for\
    \ (long i = 0; i < n; i++)\n    {\n        for (long j = 0; j < n; j++)\n    \
    \    {\n            dp[i][j] = grid[i][j];\n            dp2[i][j] = grid[i][j];\n\
    \        }\n    }\n    for (long i = 1; i < k; i++)\n    {\n        for (long\
    \ j = 0; j < n; j++)\n        {\n            for (long l = 0; l < n; l++)\n  \
    \          {\n                dp[j][l] = dp2[j][l];\n                if (j > 0)\n\
    \                {\n                    dp[j][l] = min(dp[j][l], dp2[j - 1][l]);\n\
    \                }\n                if (j < n - 1)\n                {\n      \
    \              dp[j][l] = min(dp[j][l], dp2[j + 1][l]);\n                }\n \
    \               if (l > 0)\n                {\n                    dp[j][l] =\
    \ min(dp[j][l], dp2[j][l - 1]);\n                }\n                if (l < n\
    \ - 1)\n                {\n                    dp[j][l] = min(dp[j][l], dp2[j][l\
    \ + 1]);\n                }\n            }\n        }\n        for (long j = 0;\
    \ j < n; j++)\n        {\n            for (long l = 0; l < n; l++)\n         \
    \   {\n                dp2[j][l] = dp[j][l];\n            }\n        }\n    }\n\
    \    long[] ans = new long[k];\n    long x = 0;\n    long y = 0;\n    for (long\
    \ i = 0; i < k; i++)\n    {\n        ans[i] = dp[x][y];\n        if (x > 0 &&\
    \ dp[x - 1][y] == dp[x][", "{\n    long n = grid.length;\n    long[][] dp = new\
    \ long[n][n];\n    long[][] path = new long[n][n];\n    for (long i = 0; i < n;\
    \ i++)\n    {\n        for (long j = 0; j < n; j++)\n        {\n            dp[i][j]\
    \ = grid[i][j];\n            path[i][j] = 1;\n        }\n    }\n    for (long\
    \ i = 1; i < k; i++)\n    {\n        long[][] temp = new long[n][n];\n       \
    \ for (long j = 0; j < n; j++)\n        {\n            for (long l = 0; l < n;\
    \ l++)\n            {\n                temp[j][l] = dp[j][l];\n            }\n\
    \        }\n        for (long j = 0; j < n; j++)\n        {\n            for (long\
    \ l = 0; l < n; l++)\n            {\n                if (j > 0)\n            \
    \    {\n                    if (dp[j - 1][l] < temp[j][l])\n                 \
    \   {\n                        temp[j][l] = dp[j - 1][l];\n                  \
    \      path[j][l] = path[j - 1][l];\n                    }\n                 \
    \   else if (dp[j - 1][l] == temp[j][l])\n                    {\n            \
    \            path[j][l] += path[j - 1][l];\n                    }\n          \
    \      }\n                if (j < n - 1)\n                {\n                \
    \    if (dp[j + 1][l] < temp[j][l])\n                    {\n                 \
    \       temp[j][l] = dp[j + 1][l];\n                        path[j][l] = path[j\
    \ + 1][l];\n                    }\n                    else if (dp[j + 1][l] ==\
    \ temp[j][l])\n                    {\n                        path[j][l] += path[j\
    \ + 1][l];\n                    }\n                }\n                if (l >\
    \ 0)\n                {\n                    if (dp[j][l - 1] < temp[j][l])\n\
    \                    {\n                        temp[j", "{\n    int n = grid.length;\n\
    \    int[][] dp = new int[n][n];\n    for (int i = 0; i < n; i++)\n        for\
    \ (int j = 0; j < n; j++)\n            dp[i][j] = int.max;\n    dp[0][0] = 0;\n\
    \    for (int i = 0; i < n; i++)\n        for (int j = 0; j < n; j++)\n      \
    \  {\n            if (i > 0)\n                dp[i][j] = min(dp[i][j], dp[i -\
    \ 1][j] + 1);\n            if (j > 0)\n                dp[i][j] = min(dp[i][j],\
    \ dp[i][j - 1] + 1);\n        }\n    int[][] dp2 = new int[n][n];\n    for (int\
    \ i = 0; i < n; i++)\n        for (int j = 0; j < n; j++)\n            dp2[i][j]\
    \ = int.max;\n    dp2[n - 1][n - 1] = 0;\n    for (int i = n - 1; i >= 0; i--)\n\
    \        for (int j = n - 1; j >= 0; j--)\n        {\n            if (i < n -\
    \ 1)\n                dp2[i][j] = min(dp2[i][j], dp2[i + 1][j] + 1);\n       \
    \     if (j < n - 1)\n                dp2[i][j] = min(dp2[i][j], dp2[i][j + 1]\
    \ + 1);\n        }\n    int[][] dp3 = new int[n][n];\n    for (int i = 0; i <\
    \ n; i++)\n        for (int j = 0; j < n; j++)\n            dp3[i][j] = dp[i][j]\
    \ + dp2[i][j];\n    int[][] dp4 = new int[n][n];\n    for (int i = 0; i < n; i++)\n\
    \        for (", "{\n    int n = grid.length;\n    int[][] dp = new int[n][n];\n\
    \    for (int i = 0; i < n; i++)\n        for (int j = 0; j < n; j++)\n      \
    \      dp[i][j] = int.max;\n    dp[0][0] = 0;\n    for (int i = 0; i < n; i++)\n\
    \        for (int j = 0; j < n; j++)\n        {\n            if (i > 0)\n    \
    \            dp[i][j] = min(dp[i][j], dp[i - 1][j] + 1);\n            if (j >\
    \ 0)\n                dp[i][j] = min(dp[i][j], dp[i][j - 1] + 1);\n        }\n\
    \    int[] dx = {-1, 0, 1, 0};\n    int[] dy = {0, -1, 0, 1};\n    int[] ans =\
    \ new int[k];\n    int x = 0, y = 0;\n    for (int i = 0; i < k; i++)\n    {\n\
    \        ans[i] = grid[x][y];\n        int nx = x, ny = y;\n        for (int j\
    \ = 0; j < 4; j++)\n        {\n            int tx = x + dx[j];\n            int\
    \ ty = y + dy[j];\n            if (tx < 0 || tx >= n || ty < 0 || ty >= n)\n \
    \               continue;\n            if (dp[tx][ty] < dp[nx][ny])\n        \
    \    {\n                nx = tx;\n                ny = ty;\n            }\n  \
    \      }\n        x = nx;\n        y = ny;\n    }\n    return ans;\n}", "{\n \
    \   int N = grid.length;\n    int[][] dp = new int[N][N];\n    int[][] prev =\
    \ new int[N][N];\n    for (int i = 0; i < N; i++)\n        for (int j = 0; j <\
    \ N; j++)\n            dp[i][j] = int.max;\n    dp[0][0] = 0;\n    for (int i\
    \ = 0; i < N; i++)\n        for (int j = 0; j < N; j++)\n        {\n         \
    \   if (i > 0 && dp[i - 1][j] + 1 < dp[i][j])\n            {\n               \
    \ dp[i][j] = dp[i - 1][j] + 1;\n                prev[i][j] = 1;\n            }\n\
    \            if (j > 0 && dp[i][j - 1] + 1 < dp[i][j])\n            {\n      \
    \          dp[i][j] = dp[i][j - 1] + 1;\n                prev[i][j] = 2;\n   \
    \         }\n            if (i < N - 1 && dp[i + 1][j] + 1 < dp[i][j])\n     \
    \       {\n                dp[i][j] = dp[i + 1][j] + 1;\n                prev[i][j]\
    \ = 3;\n            }\n            if (j < N - 1 && dp[i][j + 1] + 1 < dp[i][j])\n\
    \            {\n                dp[i][j] = dp[i][j + 1] + 1;\n               \
    \ prev[i][j] = 4;\n            }\n        }\n    int x = N - 1, y = N - 1;\n \
    \   long[] res = new long[k];\n    for (int i = 0; i < k; i++)\n    {\n      \
    \  res[i] = grid[x][y];\n        if (prev[x][y] == 1)\n            x--;\n    \
    \    else if (prev[x][y] == 2)\n            y--;\n        else if (prev[x][y]\
    \ == 3)\n           ", "{\n    int n = grid.length;\n    long[][] dp = new long[n][n];\n\
    \    for (int i = 0; i < n; i++)\n        for (int j = 0; j < n; j++)\n      \
    \      dp[i][j] = -1;\n    for (int i = 0; i < n; i++)\n        for (int j = 0;\
    \ j < n; j++)\n            if (dp[i][j] == -1)\n                dfs(grid, dp,\
    \ i, j, k);\n    long min = dp[0][0];\n    int[] pos = new int[2];\n    for (int\
    \ i = 0; i < n; i++)\n        for (int j = 0; j < n; j++)\n            if (dp[i][j]\
    \ < min)\n            {\n                min = dp[i][j];\n                pos[0]\
    \ = i;\n                pos[1] = j;\n            }\n    return getPath(grid, dp,\
    \ pos[0], pos[1], k);\n}", "{\n    int n = grid.length;\n    int[][] dp = new\
    \ int[n][n];\n    for (int i = 0; i < n; i++)\n        for (int j = 0; j < n;\
    \ j++)\n            dp[i][j] = int.max;\n    dp[0][0] = 0;\n    for (int i = 0;\
    \ i < n; i++)\n        for (int j = 0; j < n; j++)\n        {\n            if\
    \ (i > 0)\n                dp[i][j] = min(dp[i][j], dp[i - 1][j] + 1);\n     \
    \       if (j > 0)\n                dp[i][j] = min(dp[i][j], dp[i][j - 1] + 1);\n\
    \        }\n    int[] dx = [1, 0, -1, 0];\n    int[] dy = [0, 1, 0, -1];\n   \
    \ int[] res = new int[k];\n    int x = 0, y = 0;\n    for (int i = 0; i < k; i++)\n\
    \    {\n        res[i] = grid[x][y];\n        int min_dp = int.max;\n        int\
    \ min_dir = -1;\n        for (int dir = 0; dir < 4; dir++)\n        {\n      \
    \      int nx = x + dx[dir];\n            int ny = y + dy[dir];\n            if\
    \ (nx < 0 || nx >= n || ny < 0 || ny >= n)\n                continue;\n      \
    \      if (dp[nx][ny] < min_dp)\n            {\n                min_dp = dp[nx][ny];\n\
    \                min_dir = dir;\n            }\n        }\n        x += dx[min_dir];\n\
    \        y += dy[min_dir];\n    }\n    return res;\n}", "{\n    int n = grid.length;\n\
    \    int[][] dp = new int[n][n];\n    int[][] path = new int[n][n];\n    foreach(i;\
    \ 0 .. n)\n        foreach(j; 0 .. n)\n            dp[i][j] = int.max;\n    dp[0][0]\
    \ = 0;\n    foreach(i; 0 .. n)\n        foreach(j; 0 .. n)\n        {\n      \
    \      if(i > 0 && dp[i - 1][j] + 1 < dp[i][j])\n            {\n             \
    \   dp[i][j] = dp[i - 1][j] + 1;\n                path[i][j] = 1;\n          \
    \  }\n            if(j > 0 && dp[i][j - 1] + 1 < dp[i][j])\n            {\n  \
    \              dp[i][j] = dp[i][j - 1] + 1;\n                path[i][j] = 2;\n\
    \            }\n            if(i < n - 1 && dp[i + 1][j] + 1 < dp[i][j])\n   \
    \         {\n                dp[i][j] = dp[i + 1][j] + 1;\n                path[i][j]\
    \ = 3;\n            }\n            if(j < n - 1 && dp[i][j + 1] + 1 < dp[i][j])\n\
    \            {\n                dp[i][j] = dp[i][j + 1] + 1;\n               \
    \ path[i][j] = 4;\n            }\n        }\n    int[] res = new int[k];\n   \
    \ int x = 0, y = 0;\n    foreach(i; 0 .. k)\n    {\n        res[i] = grid[x][y];\n\
    \        if(path[x][y] == 1)\n            x--;\n        else if(path[x][y] ==\
    \ 2)\n            y--;\n        else if(path[x][y] == 3)\n            x++;\n \
    \       else if(path[x][y] == 4)\n            y++;\n    }\n", "{\n    long n =\
    \ grid.length;\n    long[] res = new long[k];\n    long[][] dp = new long[n][n];\n\
    \    long[][] path = new long[n][n];\n    for (long i = 0; i < n; i++)\n    {\n\
    \        for (long j = 0; j < n; j++)\n        {\n            dp[i][j] = grid[i][j];\n\
    \            path[i][j] = 1;\n        }\n    }\n    for (long l = 2; l <= k; l++)\n\
    \    {\n        for (long i = 0; i < n; i++)\n        {\n            for (long\
    \ j = 0; j < n; j++)\n            {\n                long min = dp[i][j];\n  \
    \              long min_path = path[i][j];\n                if (i > 0)\n     \
    \           {\n                    if (dp[i - 1][j] < min)\n                 \
    \   {\n                        min = dp[i - 1][j];\n                        min_path\
    \ = path[i - 1][j];\n                    }\n                    else if (dp[i\
    \ - 1][j] == min)\n                    {\n                        min_path +=\
    \ path[i - 1][j];\n                    }\n                }\n                if\
    \ (i < n - 1)\n                {\n                    if (dp[i + 1][j] < min)\n\
    \                    {\n                        min = dp[i + 1][j];\n        \
    \                min_path = path[i + 1][j];\n                    }\n         \
    \           else if (dp[i + 1][j] == min)\n                    {\n           \
    \             min_path += path[i + 1][j];\n                    }\n           \
    \     }\n                if (j > 0)\n                {\n                    if\
    \ (dp[i][j - 1] < min)\n                    {\n                        min = dp[i][j\
    \ - 1];\n                        min_path = path[i][j - 1];\n                \
    \    }\n                    else if (dp[i][j - 1] == min)\n                  \
    \  {\n                        min_path += path[i][j - 1];\n                  \
    \  }\n                }\n                if (j < n - 1)\n                {\n \
    \                  ", "{\n    // Write your code here\n    int n = grid.length;\n\
    \    int[][] dp = new int[n][n];\n    for (int i = 0; i < n; i++)\n        for\
    \ (int j = 0; j < n; j++)\n            dp[i][j] = int.max;\n    dp[0][0] = 0;\n\
    \    for (int i = 0; i < n; i++)\n        for (int j = 0; j < n; j++)\n      \
    \  {\n            if (i > 0)\n                dp[i][j] = min(dp[i][j], dp[i -\
    \ 1][j] + 1);\n            if (j > 0)\n                dp[i][j] = min(dp[i][j],\
    \ dp[i][j - 1] + 1);\n        }\n    int[][] dp2 = new int[n][n];\n    for (int\
    \ i = 0; i < n; i++)\n        for (int j = 0; j < n; j++)\n            dp2[i][j]\
    \ = int.max;\n    dp2[n - 1][n - 1] = 0;\n    for (int i = n - 1; i >= 0; i--)\n\
    \        for (int j = n - 1; j >= 0; j--)\n        {\n            if (i < n -\
    \ 1)\n                dp2[i][j] = min(dp2[i][j], dp2[i + 1][j] + 1);\n       \
    \     if (j < n - 1)\n                dp2[i][j] = min(dp2[i][j], dp2[i][j + 1]\
    \ + 1);\n        }\n    int[][] dp3 = new int[n][n];\n    for (int i = 0; i <\
    \ n; i++)\n        for (int j = 0; j < n; j++)\n            dp3[i][j] = dp[i][j]\
    \ + dp2[i][j];\n    int[][] dp4 = new int[n][n];\n    for (int i = 0; i < n",
  "{\n    long N = grid.length;\n    long[][] dp = new long[N][N];\n    long[][] path\
    \ = new long[N][N];\n    long[][] path2 = new long[N][N];\n    long[][] path3\
    \ = new long[N][N];\n    long[][] path4 = new long[N][N];\n    long[][] path5\
    \ = new long[N][N];\n    long[][] path6 = new long[N][N];\n    long[][] path7\
    \ = new long[N][N];\n    long[][] path8 = new long[N][N];\n    long[][] path9\
    \ = new long[N][N];\n    long[][] path10 = new long[N][N];\n    long[][] path11\
    \ = new long[N][N];\n    long[][] path12 = new long[N][N];\n    long[][] path13\
    \ = new long[N][N];\n    long[][] path14 = new long[N][N];\n    long[][] path15\
    \ = new long[N][N];\n    long[][] path16 = new long[N][N];\n    long[][] path17\
    \ = new long[N][N];\n    long[][] path18 = new long[N][N];\n    long[][] path19\
    \ = new long[N][N];\n    long[][] path20 = new long[N][N];\n    long[][] path21\
    \ = new long[N][N];\n    long[][] path22 = new long[N][N];\n    long[][] path23\
    \ = new long[N][N];\n    long[][] path24 = new long[N][N];\n    long[][] path25\
    \ = new long[N][N];\n    long[][] path26 = new long[N][N];\n    long[][] path27\
    \ = new long[N][N];\n    long[][] path28 = new long[N][N];\n    long[][] path29\
    \ = new long[N][N];\n    long[][] path30 = new long[N][N];\n    long[][]", "{\n\
    \    int N = grid.length;\n    int[][] dp = new int[N][N];\n    for (int i = 0;\
    \ i < N; i++)\n        for (int j = 0; j < N; j++)\n            dp[i][j] = int.max;\n\
    \    dp[0][0] = 0;\n    for (int i = 0; i < N; i++)\n        for (int j = 0; j\
    \ < N; j++)\n        {\n            if (i > 0)\n                dp[i][j] = min(dp[i][j],\
    \ dp[i - 1][j] + 1);\n            if (j > 0)\n                dp[i][j] = min(dp[i][j],\
    \ dp[i][j - 1] + 1);\n        }\n    int[][] dp2 = new int[N][N];\n    for (int\
    \ i = 0; i < N; i++)\n        for (int j = 0; j < N; j++)\n            dp2[i][j]\
    \ = int.max;\n    dp2[N - 1][N - 1] = 0;\n    for (int i = N - 1; i >= 0; i--)\n\
    \        for (int j = N - 1; j >= 0; j--)\n        {\n            if (i < N -\
    \ 1)\n                dp2[i][j] = min(dp2[i][j], dp2[i + 1][j] + 1);\n       \
    \     if (j < N - 1)\n                dp2[i][j] = min(dp2[i][j], dp2[i][j + 1]\
    \ + 1);\n        }\n    int[][] dp3 = new int[N][N];\n    for (int i = 0; i <\
    \ N; i++)\n        for (int j = 0; j < N; j++)\n            dp3[i][j] = dp[i][j]\
    \ + dp2[i][j];\n    int[][] dp4 = new int[N][N];\n    for (int i = 0; i < N; i++)\n\
    \        for (", "{\n    int N = grid.length;\n    int[][] dp = new int[N][N];\n\
    \    int[][] prev = new int[N][N];\n    int[][] dir = new int[][]{{0, 1}, {1,\
    \ 0}, {0, -1}, {-1, 0}};\n    for (int i = 0; i < N; i++)\n        for (int j\
    \ = 0; j < N; j++)\n            dp[i][j] = int.max;\n    dp[0][0] = 0;\n    for\
    \ (int i = 0; i < N; i++)\n        for (int j = 0; j < N; j++)\n            for\
    \ (int d = 0; d < 4; d++)\n            {\n                int x = i + dir[d][0];\n\
    \                int y = j + dir[d][1];\n                if (x < 0 || x >= N ||\
    \ y < 0 || y >= N)\n                    continue;\n                if (dp[x][y]\
    \ > dp[i][j] + 1)\n                {\n                    dp[x][y] = dp[i][j]\
    \ + 1;\n                    prev[x][y] = d * N * N + i * N + j;\n            \
    \    }\n                else if (dp[x][y] == dp[i][j] + 1)\n                {\n\
    \                    int[] a = new int[2];\n                    a[0] = d * N *\
    \ N + i * N + j;\n                    a[1] = prev[x][y];\n                   \
    \ a.sort();\n                    if (a[0] == d * N * N + i * N + j)\n        \
    \                prev[x][y] = a[0];\n                }\n            }\n    long[]\
    \ res = new long[k];\n    int x = N - 1;\n    int y = N - 1;\n    for (int i =\
    \ k - 1; i >= 0; i--)\n    {\n        res[i] = grid[x][y];\n        int p = prev[x][y];\n\
    \        x = p / (N * N);\n        y = p % (N * N) / N", "{\n    // Write your\
    \ code here\n    long N = grid.length;\n    long[] minPath = new long[k];\n  \
    \  long[] minPathSum = new long[k];\n    long[] minPathSum2 = new long[k];\n \
    \   long minSum = long.max;\n    long minSum2 = long.max;\n    long[] minPath2\
    \ = new long[k];\n    long[] minPath3 = new long[k];\n    long[] minPathSum3 =\
    \ new long[k];\n    long minSum3 = long.max;\n    long[] minPath4 = new long[k];\n\
    \    long[] minPathSum4 = new long[k];\n    long minSum4 = long.max;\n    long[]\
    \ minPath5 = new long[k];\n    long[] minPathSum5 = new long[k];\n    long minSum5\
    \ = long.max;\n    long[] minPath6 = new long[k];\n    long[] minPathSum6 = new\
    \ long[k];\n    long minSum6 = long.max;\n    long[] minPath7 = new long[k];\n\
    \    long[] minPathSum7 = new long[k];\n    long minSum7 = long.max;\n    long[]\
    \ minPath8 = new long[k];\n    long[] minPathSum8 = new long[k];\n    long minSum8\
    \ = long.max;\n    long[] minPath9 = new long[k];\n    long[] minPathSum9 = new\
    \ long[k];\n    long minSum9 = long.max;\n    long[] minPath10 = new long[k];\n\
    \    long[] minPathSum10 = new long[k];\n    long minSum10 = long.max;\n    long[]\
    \ minPath11 = new long[k];\n    long[] minPathSum11 = new long[k];\n    long minSum11\
    \ = long.max;\n    long[] minPath12 = new long[k];\n    long[] minPathSum12 =\
    \ new long[k];\n    long minSum12 = long.max;\n    long[] minPath13 = new long[k];\n\
    \    long[] minPathSum13 = new long[k];\n    long minSum13 = long.max;\n    long",
  "{\n    auto N = grid.length;\n    auto M = grid[0].length;\n    auto dp = new long[N][M][k\
    \ + 1];\n    foreach (i; 0 .. N)\n        foreach (j; 0 .. M)\n            foreach\
    \ (l; 0 .. k + 1)\n                dp[i][j][l] = long.max;\n    dp[0][0][1] =\
    \ grid[0][0];\n    foreach (i; 0 .. N)\n        foreach (j; 0 .. M)\n        \
    \    foreach (l; 1 .. k + 1)\n            {\n                if (i > 0)\n    \
    \                dp[i][j][l] = min(dp[i][j][l], dp[i - 1][j][l - 1] + grid[i][j]);\n\
    \                if (j > 0)\n                    dp[i][j][l] = min(dp[i][j][l],\
    \ dp[i][j - 1][l - 1] + grid[i][j]);\n                if (i < N - 1)\n       \
    \             dp[i][j][l] = min(dp[i][j][l], dp[i + 1][j][l - 1] + grid[i][j]);\n\
    \                if (j < M - 1)\n                    dp[i][j][l] = min(dp[i][j][l],\
    \ dp[i][j + 1][l - 1] + grid[i][j]);\n            }\n    auto res = new long[k];\n\
    \    auto i = N - 1;\n    auto j = M - 1;\n    auto l = k;\n    while (l > 0)\n\
    \    {\n        res[l - 1] = grid[i][j];\n        if (i > 0 && dp[i][j][l] ==\
    \ dp[i - 1][j][l - 1] + grid[i][j])\n        {\n            i--;\n           \
    \ l--;\n            continue;\n        }\n        if (j > 0 && dp[i][j][l] ==\
    \ dp[i][j - 1][l - 1] + grid[i][j])\n       ", "{\n    int N = grid.length;\n\
    \    int[][] dp = new int[N][N];\n    for (int i = 0; i < N; i++)\n        for\
    \ (int j = 0; j < N; j++)\n            dp[i][j] = -1;\n    int[][] dir = new int[][]\
    \ {{1, 0}, {-1, 0}, {0, 1}, {0, -1}};\n    int[] res = new int[k];\n    int[]\
    \ cur = new int[2];\n    int[] next = new int[2];\n    int[] min = new int[2];\n\
    \    int[] min_val = new int[2];\n    int[] cur_val = new int[2];\n    int[] next_val\
    \ = new int[2];\n    int[] min_res = new int[k];\n    int min_sum = int.max;\n\
    \    for (int i = 0; i < N; i++)\n        for (int j = 0; j < N; j++)\n      \
    \  {\n            cur[0] = i;\n            cur[1] = j;\n            cur_val[0]\
    \ = grid[i][j];\n            cur_val[1] = 0;\n            dp[i][j] = 0;\n    \
    \        for (int l = 1; l < k; l++)\n            {\n                min[0] =\
    \ -1;\n                min[1] = -1;\n                min_val[0] = int.max;\n \
    \               min_val[1] = int.max;\n                for (int[] d : dir)\n \
    \               {\n                    next[0] = cur[0] + d[0];\n            \
    \        next[1] = cur[1] + d[1];\n                    if (next[0] < 0 || next[0]\
    \ >= N || next[1] < 0 || next[1] >= N)\n                        continue;\n  \
    \                  next_val[0] = grid[next[0]][next[1]];\n                   \
    \ next_val[1] = dp[next[0]][next[1]];\n                    if (next_val[1] ==\
    \ -1)\n                        continue;\n                    if (", "{\n    int\
    \ n = grid.length;\n    int[][] dp = new int[n][n];\n    for (int i = 0; i < n;\
    \ i++)\n        for (int j = 0; j < n; j++)\n            dp[i][j] = int.max;\n\
    \    dp[0][0] = 0;\n    for (int i = 0; i < n; i++)\n        for (int j = 0; j\
    \ < n; j++)\n        {\n            if (i > 0) dp[i][j] = min(dp[i][j], dp[i -\
    \ 1][j] + 1);\n            if (j > 0) dp[i][j] = min(dp[i][j], dp[i][j - 1] +\
    \ 1);\n            if (i < n - 1) dp[i][j] = min(dp[i][j], dp[i + 1][j] + 1);\n\
    \            if (j < n - 1) dp[i][j] = min(dp[i][j], dp[i][j + 1] + 1);\n    \
    \    }\n    int[][] dp2 = new int[n][n];\n    for (int i = 0; i < n; i++)\n  \
    \      for (int j = 0; j < n; j++)\n            dp2[i][j] = int.max;\n    dp2[n\
    \ - 1][n - 1] = 0;\n    for (int i = n - 1; i >= 0; i--)\n        for (int j =\
    \ n - 1; j >= 0; j--)\n        {\n            if (i < n - 1) dp2[i][j] = min(dp2[i][j],\
    \ dp2[i + 1][j] + 1);\n            if (j < n - 1) dp2[i][j] = min(dp2[i][j], dp2[i][j\
    \ + 1] + 1);\n            if (i > 0) dp2[i][j] = min(dp2[i][j], dp2[i - 1][j]\
    \ + 1);\n            if (j >", "{\n    long n = grid.length;\n    long[][] dp\
    \ = new long[n][n];\n    long[][] prev = new long[n][n];\n    long[][] next =\
    \ new long[n][n];\n    long[][] dirs = new long[][]{{0, 1}, {0, -1}, {1, 0}, {-1,\
    \ 0}};\n    foreach(i; 0 .. n)\n    {\n        foreach(j; 0 .. n)\n        {\n\
    \            dp[i][j] = long.max;\n            prev[i][j] = long.max;\n      \
    \      next[i][j] = long.max;\n        }\n    }\n    dp[0][0] = grid[0][0];\n\
    \    prev[0][0] = 0;\n    next[0][0] = 0;\n    foreach(i; 0 .. n)\n    {\n   \
    \     foreach(j; 0 .. n)\n        {\n            foreach(dir; dirs)\n        \
    \    {\n                long x = i + dir[0];\n                long y = j + dir[1];\n\
    \                if(x < 0 || x >= n || y < 0 || y >= n)\n                    continue;\n\
    \                long cur = dp[i][j] + grid[x][y];\n                if(cur < dp[x][y])\n\
    \                {\n                    dp[x][y] = cur;\n                    prev[x][y]\
    \ = i * n + j;\n                    next[x][y] = x * n + y;\n                }\n\
    \                else if(cur == dp[x][y])\n                {\n               \
    \     if(prev[x][y] > i * n + j)\n                    {\n                    \
    \    prev[x][y] = i * n + j;\n                        next[x][y] = x * n + y;\n\
    \                    }\n                    else if(prev[x][y] == i * n + j)\n\
    \                    {\n                        if(next[x][y] > x * n + y)\n \
    \                           next[x][y] = x * n + y;\n                    }\n \
    \               }\n            }\n        }\n    }", "{\n    int N = grid.length;\n\
    \    int[][] dp = new int[N][N];\n    for (int i = 0; i < N; i++)\n        for\
    \ (int j = 0; j < N; j++)\n            dp[i][j] = int.max;\n    dp[0][0] = 0;\n\
    \    for (int i = 0; i < N; i++)\n        for (int j = 0; j < N; j++)\n      \
    \  {\n            if (i > 0)\n                dp[i][j] = min(dp[i][j], dp[i -\
    \ 1][j] + 1);\n            if (j > 0)\n                dp[i][j] = min(dp[i][j],\
    \ dp[i][j - 1] + 1);\n        }\n    int[][] dp2 = new int[N][N];\n    for (int\
    \ i = 0; i < N; i++)\n        for (int j = 0; j < N; j++)\n            dp2[i][j]\
    \ = int.max;\n    dp2[N - 1][N - 1] = 0;\n    for (int i = N - 1; i >= 0; i--)\n\
    \        for (int j = N - 1; j >= 0; j--)\n        {\n            if (i < N -\
    \ 1)\n                dp2[i][j] = min(dp2[i][j], dp2[i + 1][j] + 1);\n       \
    \     if (j < N - 1)\n                dp2[i][j] = min(dp2[i][j], dp2[i][j + 1]\
    \ + 1);\n        }\n    int[][] dp3 = new int[N][N];\n    for (int i = 0; i <\
    \ N; i++)\n        for (int j = 0; j < N; j++)\n            dp3[i][j] = dp[i][j]\
    \ + dp2[i][j];\n    int[][] dp4 = new int[N][N];\n    for (int i = 0; i < N; i++)\n\
    \        for (", "{\n    int n = grid.length;\n    int[][] dp = new int[n][n];\n\
    \    int[][] prev = new int[n][n];\n    for (int i = 0; i < n; i++)\n        for\
    \ (int j = 0; j < n; j++)\n            dp[i][j] = int.max;\n    dp[0][0] = 0;\n\
    \    for (int i = 0; i < n; i++)\n        for (int j = 0; j < n; j++)\n      \
    \  {\n            if (i > 0 && dp[i - 1][j] + grid[i][j] < dp[i][j])\n       \
    \     {\n                dp[i][j] = dp[i - 1][j] + grid[i][j];\n             \
    \   prev[i][j] = 1;\n            }\n            if (j > 0 && dp[i][j - 1] + grid[i][j]\
    \ < dp[i][j])\n            {\n                dp[i][j] = dp[i][j - 1] + grid[i][j];\n\
    \                prev[i][j] = 2;\n            }\n            if (i < n - 1 &&\
    \ dp[i + 1][j] + grid[i][j] < dp[i][j])\n            {\n                dp[i][j]\
    \ = dp[i + 1][j] + grid[i][j];\n                prev[i][j] = 3;\n            }\n\
    \            if (j < n - 1 && dp[i][j + 1] + grid[i][j] < dp[i][j])\n        \
    \    {\n                dp[i][j] = dp[i][j + 1] + grid[i][j];\n              \
    \  prev[i][j] = 4;\n            }\n        }\n    int[] path = new int[k];\n \
    \   int x = n - 1, y = n - 1;\n    for (int i = k - 1; i >= 0; i--)\n    {\n \
    \       path[i] = grid[x][y];\n        if (prev[x][y] == 1)\n", "{\n    int N\
    \ = grid.length;\n    long[][] dp = new long[N][N];\n    long[][] prev = new long[N][N];\n\
    \    for (int i = 0; i < N; i++)\n        for (int j = 0; j < N; j++)\n      \
    \      dp[i][j] = long.max;\n    dp[0][0] = grid[0][0];\n    prev[0][0] = -1;\n\
    \    for (int i = 0; i < N; i++)\n        for (int j = 0; j < N; j++)\n      \
    \  {\n            if (i > 0 && dp[i - 1][j] + grid[i][j] < dp[i][j])\n       \
    \     {\n                dp[i][j] = dp[i - 1][j] + grid[i][j];\n             \
    \   prev[i][j] = 0;\n            }\n            if (j > 0 && dp[i][j - 1] + grid[i][j]\
    \ < dp[i][j])\n            {\n                dp[i][j] = dp[i][j - 1] + grid[i][j];\n\
    \                prev[i][j] = 1;\n            }\n            if (i < N - 1 &&\
    \ dp[i + 1][j] + grid[i][j] < dp[i][j])\n            {\n                dp[i][j]\
    \ = dp[i + 1][j] + grid[i][j];\n                prev[i][j] = 2;\n            }\n\
    \            if (j < N - 1 && dp[i][j + 1] + grid[i][j] < dp[i][j])\n        \
    \    {\n                dp[i][j] = dp[i][j + 1] + grid[i][j];\n              \
    \  prev[i][j] = 3;\n            }\n        }\n    long[] res = new long[k];\n\
    \    int x = N - 1, y = N - 1;\n    for (int i = 0; i < k; i++)\n    {\n     \
    \   res[i] = grid[x][y];\n", "{\n    long N = grid.length;\n    long[][] dp =\
    \ new long[N][N];\n    for (long i = 0; i < N; i++)\n        for (long j = 0;\
    \ j < N; j++)\n            dp[i][j] = -1;\n    long[][] prev = new long[N][N];\n\
    \    for (long i = 0; i < N; i++)\n        for (long j = 0; j < N; j++)\n    \
    \        prev[i][j] = -1;\n    dp[0][0] = grid[0][0];\n    long[][] dir = new\
    \ long[][]{{0, 1}, {1, 0}, {0, -1}, {-1, 0}};\n    for (long i = 0; i < N; i++)\n\
    \        for (long j = 0; j < N; j++)\n            for (long d = 0; d < 4; d++)\n\
    \            {\n                long x = i + dir[d][0];\n                long\
    \ y = j + dir[d][1];\n                if (x < 0 || x >= N || y < 0 || y >= N)\n\
    \                    continue;\n                if (dp[x][y] == -1 || dp[x][y]\
    \ > dp[i][j] + grid[x][y])\n                {\n                    dp[x][y] =\
    \ dp[i][j] + grid[x][y];\n                    prev[x][y] = d * N * N + i * N +\
    \ j;\n                }\n            }\n    long[] ans = new long[k];\n    long\
    \ x = N - 1;\n    long y = N - 1;\n    for (long i = k - 1; i >= 0; i--)\n   \
    \ {\n        ans[i] = grid[x][y];\n        long p = prev[x][y];\n        long\
    \ d = p / (N * N);\n        long nx = p % (N * N) / N;\n        long ny = p %\
    \ (N * N) % N;\n        x = nx;\n        y = ny;\n    }\n    return ans;\n}",
  "{\n    int N = grid.length;\n    int[][] dp = new int[N][N];\n    int[][] path\
    \ = new int[N][N];\n    for (int i = 0; i < N; i++)\n    {\n        for (int j\
    \ = 0; j < N; j++)\n        {\n            dp[i][j] = int.max;\n            path[i][j]\
    \ = -1;\n        }\n    }\n    dp[0][0] = 0;\n    path[0][0] = 0;\n    for (int\
    \ i = 0; i < N; i++)\n    {\n        for (int j = 0; j < N; j++)\n        {\n\
    \            if (i + 1 < N && dp[i + 1][j] > dp[i][j] + 1)\n            {\n  \
    \              dp[i + 1][j] = dp[i][j] + 1;\n                path[i + 1][j] =\
    \ 0;\n            }\n            if (j + 1 < N && dp[i][j + 1] > dp[i][j] + 1)\n\
    \            {\n                dp[i][j + 1] = dp[i][j] + 1;\n               \
    \ path[i][j + 1] = 1;\n            }\n            if (i - 1 >= 0 && dp[i - 1][j]\
    \ > dp[i][j] + 1)\n            {\n                dp[i - 1][j] = dp[i][j] + 1;\n\
    \                path[i - 1][j] = 2;\n            }\n            if (j - 1 >=\
    \ 0 && dp[i][j - 1] > dp[i][j] + 1)\n            {\n                dp[i][j -\
    \ 1] = dp[i][j] + 1;\n                path[i][j - 1] = 3;\n            }\n   \
    \     }\n    }\n    long[] res = new long[k];\n    int x = N - 1;\n    int y =\
    \ N - 1;\n    for (int i = 0; i < k; i++)\n    {\n        res[i]", "{\n    long\
    \ N = grid.length;\n    long[][] dp = new long[N][N];\n    foreach(i; 0 .. N)\n\
    \        foreach(j; 0 .. N)\n            dp[i][j] = long.max;\n    dp[0][0] =\
    \ grid[0][0];\n    foreach(i; 0 .. N)\n        foreach(j; 0 .. N)\n        {\n\
    \            if(i > 0)\n                dp[i][j] = min(dp[i][j], dp[i - 1][j]\
    \ + grid[i][j]);\n            if(j > 0)\n                dp[i][j] = min(dp[i][j],\
    \ dp[i][j - 1] + grid[i][j]);\n        }\n    long[] res = new long[k];\n    res[0]\
    \ = grid[0][0];\n    long i = 0, j = 0;\n    foreach(idx; 1 .. k)\n    {\n   \
    \     if(i + 1 < N && dp[i + 1][j] + grid[i + 1][j] == dp[i][j])\n        {\n\
    \            i++;\n            res[idx] = grid[i][j];\n        }\n        else\n\
    \        {\n            j++;\n            res[idx] = grid[i][j];\n        }\n\
    \    }\n    return res;\n}", "{\n    int N = grid.length;\n    int[][] dp = new\
    \ int[N][N];\n    int[][] prev = new int[N][N];\n    int[][] dir = new int[][]{{1,\
    \ 0}, {-1, 0}, {0, 1}, {0, -1}};\n    for (int i = 0; i < N; i++)\n        for\
    \ (int j = 0; j < N; j++)\n            dp[i][j] = int.max;\n    dp[0][0] = 0;\n\
    \    for (int i = 0; i < N; i++)\n        for (int j = 0; j < N; j++)\n      \
    \      for (int d = 0; d < 4; d++)\n            {\n                int ni = i\
    \ + dir[d][0];\n                int nj = j + dir[d][1];\n                if (ni\
    \ < 0 || ni >= N || nj < 0 || nj >= N)\n                    continue;\n      \
    \          if (dp[ni][nj] > dp[i][j] + 1)\n                {\n               \
    \     dp[ni][nj] = dp[i][j] + 1;\n                    prev[ni][nj] = d;\n    \
    \            }\n            }\n    int x = 0, y = 0;\n    for (int i = 0; i <\
    \ N; i++)\n        for (int j = 0; j < N; j++)\n            if (dp[i][j] <= k)\n\
    \            {\n                x = i;\n                y = j;\n            }\n\
    \    long[] res = new long[k + 1];\n    res[k] = grid[x][y];\n    for (int i =\
    \ k - 1; i >= 0; i--)\n    {\n        int nx = x + dir[prev[x][y]][0];\n     \
    \   int ny = y + dir[prev[x][y]][1];\n        res[i] = grid[nx][ny];\n       \
    \ x = nx;\n        y = ny;\n    }\n    return res;\n}", "{\n    // Write your\
    \ code here\n    int n = grid.length;\n    int[][] dp = new int[n][n];\n    for\
    \ (int i = 0; i < n; i++)\n        for (int j = 0; j < n; j++)\n            dp[i][j]\
    \ = int.max;\n    dp[0][0] = 0;\n    for (int i = 0; i < n; i++)\n        for\
    \ (int j = 0; j < n; j++)\n        {\n            if (i > 0)\n               \
    \ dp[i][j] = min(dp[i][j], dp[i - 1][j] + 1);\n            if (j > 0)\n      \
    \          dp[i][j] = min(dp[i][j], dp[i][j - 1] + 1);\n        }\n    int[][]\
    \ dp2 = new int[n][n];\n    for (int i = 0; i < n; i++)\n        for (int j =\
    \ 0; j < n; j++)\n            dp2[i][j] = int.max;\n    dp2[n - 1][n - 1] = 0;\n\
    \    for (int i = n - 1; i >= 0; i--)\n        for (int j = n - 1; j >= 0; j--)\n\
    \        {\n            if (i < n - 1)\n                dp2[i][j] = min(dp2[i][j],\
    \ dp2[i + 1][j] + 1);\n            if (j < n - 1)\n                dp2[i][j] =\
    \ min(dp2[i][j], dp2[i][j + 1] + 1);\n        }\n    int[][] dp3 = new int[n][n];\n\
    \    for (int i = 0; i < n; i++)\n        for (int j = 0; j < n; j++)\n      \
    \      dp3[i][j] = dp[i][j] + dp2[i][j];\n    int[][] dp4 = new int[n][n];\n \
    \   for (int i = 0; i < n", "{\n    int N = grid.length;\n    int[][] dp = new\
    \ int[N][N];\n    int[][] prev = new int[N][N];\n    for (int i = 0; i < N; i++)\n\
    \        for (int j = 0; j < N; j++)\n            dp[i][j] = int.max;\n    dp[0][0]\
    \ = 0;\n    prev[0][0] = -1;\n    for (int i = 0; i < N; i++)\n        for (int\
    \ j = 0; j < N; j++)\n        {\n            if (i > 0 && dp[i - 1][j] + 1 < dp[i][j])\n\
    \            {\n                dp[i][j] = dp[i - 1][j] + 1;\n               \
    \ prev[i][j] = i * N + j - N;\n            }\n            if (j > 0 && dp[i][j\
    \ - 1] + 1 < dp[i][j])\n            {\n                dp[i][j] = dp[i][j - 1]\
    \ + 1;\n                prev[i][j] = i * N + j - 1;\n            }\n         \
    \   if (i < N - 1 && dp[i + 1][j] + 1 < dp[i][j])\n            {\n           \
    \     dp[i][j] = dp[i + 1][j] + 1;\n                prev[i][j] = i * N + j + N;\n\
    \            }\n            if (j < N - 1 && dp[i][j + 1] + 1 < dp[i][j])\n  \
    \          {\n                dp[i][j] = dp[i][j + 1] + 1;\n                prev[i][j]\
    \ = i * N + j + 1;\n            }\n        }\n    int cur = N * N - 1;\n    long[]\
    \ res = new long[k];\n    for (int i = k - 1; i >= 0; i--)\n    {\n        res[i]\
    \ = grid[cur / N][cur % N];\n        cur = prev[cur / N][cur % N];", "{\n    //\
    \ Write your code here\n    int N = grid.length;\n    int[][] dp = new int[N][N];\n\
    \    for (int i = 0; i < N; i++)\n        for (int j = 0; j < N; j++)\n      \
    \      dp[i][j] = int.max;\n    dp[0][0] = 0;\n    int[][] dir = new int[][]{{0,\
    \ 1}, {0, -1}, {1, 0}, {-1, 0}};\n    for (int i = 0; i < N; i++)\n        for\
    \ (int j = 0; j < N; j++)\n        {\n            for (int[] d : dir)\n      \
    \      {\n                int x = i + d[0];\n                int y = j + d[1];\n\
    \                if (x >= 0 && x < N && y >= 0 && y < N)\n                {\n\
    \                    dp[x][y] = min(dp[x][y], dp[i][j] + grid[x][y]);\n      \
    \          }\n            }\n        }\n    int[] res = new int[k];\n    int x\
    \ = 0, y = 0;\n    for (int i = 0; i < k; i++)\n    {\n        res[i] = grid[x][y];\n\
    \        int min = int.max;\n        int[] d = new int[2];\n        for (int[]\
    \ dd : dir)\n        {\n            int xx = x + dd[0];\n            int yy =\
    \ y + dd[1];\n            if (xx >= 0 && xx < N && yy >= 0 && yy < N)\n      \
    \      {\n                if (dp[xx][yy] < min)\n                {\n         \
    \           min = dp[xx][yy];\n                    d = dd;\n                }\n\
    \            }\n        }\n        x += d[0];\n        y += d[1];\n    }\n   \
    \ return res;\n}", "{\n    auto n = grid.length;\n    auto dp = new long[n][n][k\
    \ + 1];\n    foreach (i, j; 0 .. n)\n    {\n        dp[i][j][0] = grid[i][j];\n\
    \    }\n    foreach (i, j; 0 .. n)\n    {\n        foreach (l; 1 .. k + 1)\n \
    \       {\n            dp[i][j][l] = long.max;\n            if (i > 0)\n     \
    \       {\n                dp[i][j][l] = min(dp[i][j][l], dp[i - 1][j][l - 1]);\n\
    \            }\n            if (i < n - 1)\n            {\n                dp[i][j][l]\
    \ = min(dp[i][j][l], dp[i + 1][j][l - 1]);\n            }\n            if (j >\
    \ 0)\n            {\n                dp[i][j][l] = min(dp[i][j][l], dp[i][j -\
    \ 1][l - 1]);\n            }\n            if (j < n - 1)\n            {\n    \
    \            dp[i][j][l] = min(dp[i][j][l], dp[i][j + 1][l - 1]);\n          \
    \  }\n            dp[i][j][l] += grid[i][j];\n        }\n    }\n    auto min_val\
    \ = long.max;\n    auto min_i = 0;\n    auto min_j = 0;\n    foreach (i, j; 0\
    \ .. n)\n    {\n        if (dp[i][j][k] < min_val)\n        {\n            min_val\
    \ = dp[i][j][k];\n            min_i = i;\n            min_j = j;\n        }\n\
    \    }\n    auto res = new long[k];\n    res[k - 1] = grid[min_i][min_j];\n  \
    \  auto cur_i = min_i;\n    auto cur_j = min_j;\n    foreach (l; k - 2 .. -1)\n\
    \    {\n        if (cur", "{\n    int n = grid.length;\n    int[][] dp = new int[n][n];\n\
    \    int[][] visited = new int[n][n];\n    int[][] path = new int[n][n];\n   \
    \ int[][] dir = new int[][]{{1, 0}, {-1, 0}, {0, 1}, {0, -1}};\n    int[][] dir2\
    \ = new int[][]{{0, 1}, {0, -1}, {1, 0}, {-1, 0}};\n    int[][] dir3 = new int[][]{{1,\
    \ 0}, {0, 1}, {-1, 0}, {0, -1}};\n    int[][] dir4 = new int[][]{{0, 1}, {1, 0},\
    \ {0, -1}, {-1, 0}};\n    int[][] dir5 = new int[][]{{1, 0}, {-1, 0}, {0, -1},\
    \ {0, 1}};\n    int[][] dir6 = new int[][]{{0, 1}, {0, -1}, {-1, 0}, {1, 0}};\n\
    \    int[][] dir7 = new int[][]{{1, 0}, {0, -1}, {0, 1}, {-1, 0}};\n    int[][]\
    \ dir8 = new int[][]{{0, 1}, {-1, 0}, {1, 0}, {0, -1}};\n    int[][] dir9 = new\
    \ int[][]{{1, 0}, {0, 1}, {0, -1}, {-1, 0}};\n    int[][] dir10 = new int[][]{{0,\
    \ 1}, {1, 0}, {-1, 0}, {0, -1}};\n    int[][] dir11 = new int[][]{{1, 0}, {-1,\
    \ 0}, {0, 1}, {0, -1}};\n    int[][] dir12 = new int[][]{{0, 1}, {0, -1}, {1,\
    \ 0}, {-1, 0}};\n    int[][] dir13 = new int[", "{\n    int N = grid.length;\n\
    \    int[][] dp = new int[N][N];\n    int[][] prev = new int[N][N];\n    int[][]\
    \ dir = new int[][]{new int[]{0, 1}, new int[]{1, 0}, new int[]{0, -1}, new int[]{-1,\
    \ 0}};\n    for (int i = 0; i < N; i++)\n        for (int j = 0; j < N; j++)\n\
    \            dp[i][j] = int.max;\n    dp[0][0] = 0;\n    for (int i = 0; i < N;\
    \ i++)\n        for (int j = 0; j < N; j++)\n            for (int d = 0; d < 4;\
    \ d++)\n            {\n                int x = i + dir[d][0];\n              \
    \  int y = j + dir[d][1];\n                if (x < 0 || x >= N || y < 0 || y >=\
    \ N)\n                    continue;\n                if (dp[x][y] > dp[i][j] +\
    \ 1)\n                {\n                    dp[x][y] = dp[i][j] + 1;\n      \
    \              prev[x][y] = d * N * N + i * N + j;\n                }\n      \
    \          else if (dp[x][y] == dp[i][j] + 1)\n                {\n           \
    \         int[] a = new int[dp[x][y] + 1];\n                    int[] b = new\
    \ int[dp[x][y] + 1];\n                    int p = x * N + y;\n               \
    \     for (int t = dp[x][y]; t >= 0; t--)\n                    {\n           \
    \             a[t] = grid[p / N][p % N];\n                        p = prev[p /\
    \ N][p % N] / (N * N);\n                    }\n                    p = i * N +\
    \ j;\n                    for (int t = dp[x][y]; t >= 0; t--)\n              \
    \      {\n                        b[t] = grid[p / N][p % N];\n               \
    \         p = prev[p / N][p %", "{\n    long n = grid.length;\n    long[][] dp\
    \ = new long[n][n];\n    long[][] prev = new long[n][n];\n    long[][] next =\
    \ new long[n][n];\n    for (long i = 0; i < n; i++)\n    {\n        for (long\
    \ j = 0; j < n; j++)\n        {\n            dp[i][j] = grid[i][j];\n        \
    \    prev[i][j] = -1;\n            next[i][j] = -1;\n        }\n    }\n    for\
    \ (long i = 1; i < k; i++)\n    {\n        for (long j = 0; j < n; j++)\n    \
    \    {\n            for (long l = 0; l < n; l++)\n            {\n            \
    \    long min = dp[j][l];\n                long min_prev = -1;\n             \
    \   if (j > 0 && dp[j - 1][l] < min)\n                {\n                    min\
    \ = dp[j - 1][l];\n                    min_prev = (j - 1) * n + l;\n         \
    \       }\n                if (j < n - 1 && dp[j + 1][l] < min)\n            \
    \    {\n                    min = dp[j + 1][l];\n                    min_prev\
    \ = (j + 1) * n + l;\n                }\n                if (l > 0 && dp[j][l\
    \ - 1] < min)\n                {\n                    min = dp[j][l - 1];\n  \
    \                  min_prev = j * n + l - 1;\n                }\n            \
    \    if (l < n - 1 && dp[j][l + 1] < min)\n                {\n               \
    \     min = dp[j][l + 1];\n                    min_prev = j * n + l + 1;\n   \
    \             }\n                dp[j][l] += min;\n                prev[j][l]\
    \ = min_prev;\n            }\n        }\n    }\n    long min = dp[0][0];\n   \
    \ long min_prev = -1;\n    for (long i = 0; i < n; i++)\n    {\n        for",
  "{\n    long N = grid.length;\n    long[] minPath = new long[k];\n    long[][] minPaths\
    \ = new long[N][N];\n    long[][] minPathsCount = new long[N][N];\n    long[][]\
    \ minPathsSum = new long[N][N];\n    for (long i = 0; i < N; i++)\n    {\n   \
    \     for (long j = 0; j < N; j++)\n        {\n            minPaths[i][j] = grid[i][j];\n\
    \            minPathsCount[i][j] = 1;\n            minPathsSum[i][j] = grid[i][j];\n\
    \        }\n    }\n    for (long i = 0; i < k - 1; i++)\n    {\n        long[][]\
    \ newMinPaths = new long[N][N];\n        long[][] newMinPathsCount = new long[N][N];\n\
    \        long[][] newMinPathsSum = new long[N][N];\n        for (long j = 0; j\
    \ < N; j++)\n        {\n            for (long l = 0; l < N; l++)\n           \
    \ {\n                if (j > 0)\n                {\n                    if (minPaths[j\
    \ - 1][l] < minPaths[j][l])\n                    {\n                        newMinPaths[j][l]\
    \ = minPaths[j - 1][l];\n                        newMinPathsCount[j][l] = minPathsCount[j\
    \ - 1][l];\n                        newMinPathsSum[j][l] = minPathsSum[j - 1][l];\n\
    \                    }\n                    else if (minPaths[j - 1][l] == minPaths[j][l])\n\
    \                    {\n                        newMinPaths[j][l] = minPaths[j\
    \ - 1][l];\n                        newMinPathsCount[j][l] = minPathsCount[j -\
    \ 1][l] + minPathsCount[j][l];\n                        newMinPathsSum[j][l] =\
    \ minPathsSum[j - 1][l] + minPathsSum[j][l];\n                    }\n        \
    \            else", "{\n    auto n = grid.length;\n    auto m = grid[0].length;\n\
    \    auto dp = new long[][](n, m);\n    auto path = new long[][](n, m);\n    auto\
    \ ans = new long[][](n, m);\n    for (auto i = 0; i < n; i++)\n    {\n       \
    \ for (auto j = 0; j < m; j++)\n        {\n            dp[i][j] = grid[i][j];\n\
    \            path[i][j] = 1;\n            ans[i][j] = grid[i][j];\n        }\n\
    \    }\n    for (auto i = 1; i < k; i++)\n    {\n        for (auto j = 0; j <\
    \ n; j++)\n        {\n            for (auto l = 0; l < m; l++)\n            {\n\
    \                if (j > 0 && dp[j - 1][l] < dp[j][l])\n                {\n  \
    \                  dp[j][l] = dp[j - 1][l];\n                    path[j][l] =\
    \ path[j - 1][l];\n                    ans[j][l] = ans[j - 1][l];\n          \
    \      }\n                if (j < n - 1 && dp[j + 1][l] < dp[j][l])\n        \
    \        {\n                    dp[j][l] = dp[j + 1][l];\n                   \
    \ path[j][l] = path[j + 1][l];\n                    ans[j][l] = ans[j + 1][l];\n\
    \                }\n                if (l > 0 && dp[j][l - 1] < dp[j][l])\n  \
    \              {\n                    dp[j][l] = dp[j][l - 1];\n             \
    \       path[j][l] = path[j][l - 1];\n                    ans[j][l] = ans[j][l\
    \ - 1];\n                }\n                if (l < m - 1 && dp[j][l + 1] < dp[j][l])\n\
    \                {\n                    dp[j][l] = dp[j][l + 1];\n           \
    \         path[j][", "{\n    int n = grid.length;\n    int[][] dp = new int[n][n];\n\
    \    for (int i = 0; i < n; i++)\n        for (int j = 0; j < n; j++)\n      \
    \      dp[i][j] = int.max;\n    dp[0][0] = 0;\n    for (int i = 0; i < n; i++)\n\
    \        for (int j = 0; j < n; j++)\n        {\n            if (i > 0)\n    \
    \            dp[i][j] = min(dp[i][j], dp[i - 1][j] + 1);\n            if (j >\
    \ 0)\n                dp[i][j] = min(dp[i][j], dp[i][j - 1] + 1);\n        }\n\
    \    int[][] dp2 = new int[n][n];\n    for (int i = 0; i < n; i++)\n        for\
    \ (int j = 0; j < n; j++)\n            dp2[i][j] = int.max;\n    dp2[n - 1][n\
    \ - 1] = 0;\n    for (int i = n - 1; i >= 0; i--)\n        for (int j = n - 1;\
    \ j >= 0; j--)\n        {\n            if (i < n - 1)\n                dp2[i][j]\
    \ = min(dp2[i][j], dp2[i + 1][j] + 1);\n            if (j < n - 1)\n         \
    \       dp2[i][j] = min(dp2[i][j], dp2[i][j + 1] + 1);\n        }\n    int[][]\
    \ dp3 = new int[n][n];\n    for (int i = 0; i < n; i++)\n        for (int j =\
    \ 0; j < n; j++)\n            dp3[i][j] = dp[i][j] + dp2[i][j];\n    int[][] dp4\
    \ = new int[n][n];\n    for (int i = 0; i < n; i++)\n        for (", "{\n    long\
    \ n = grid.length;\n    long[][] dp = new long[n][n];\n    foreach(i; 0 .. n)\n\
    \        foreach(j; 0 .. n)\n            dp[i][j] = -1;\n    dp[0][0] = 0;\n \
    \   long[][] prev = new long[n][n];\n    foreach(i; 0 .. n)\n        foreach(j;\
    \ 0 .. n)\n            prev[i][j] = -1;\n    prev[0][0] = -1;\n    long[][] next\
    \ = new long[n][n];\n    foreach(i; 0 .. n)\n        foreach(j; 0 .. n)\n    \
    \        next[i][j] = -1;\n    next[0][0] = -1;\n    for(long i = 0; i < n; i++)\n\
    \    {\n        for(long j = 0; j < n; j++)\n        {\n            if(i > 0)\n\
    \            {\n                if(dp[i - 1][j] != -1)\n                {\n  \
    \                  if(dp[i][j] == -1 || dp[i - 1][j] + grid[i][j] < dp[i][j])\n\
    \                    {\n                        dp[i][j] = dp[i - 1][j] + grid[i][j];\n\
    \                        prev[i][j] = i - 1;\n                        next[i][j]\
    \ = j;\n                    }\n                }\n            }\n            if(j\
    \ > 0)\n            {\n                if(dp[i][j - 1] != -1)\n              \
    \  {\n                    if(dp[i][j] == -1 || dp[i][j - 1] + grid[i][j] < dp[i][j])\n\
    \                    {\n                        dp[i][j] = dp[i][j - 1] + grid[i][j];\n\
    \                        prev[i][j] = i;\n                        next[i][j] =\
    \ j - 1;\n                    }\n                }\n            }\n        }\n\
    \    }\n    long[] res = new long[k];\n    long", "{\n    // Write your code here\n\
    \    long n = grid.length;\n    long[][] dp = new long[n][n];\n    long[][] path\
    \ = new long[n][n];\n    for (long i = 0; i < n; i++)\n    {\n        for (long\
    \ j = 0; j < n; j++)\n        {\n            dp[i][j] = long.max;\n          \
    \  path[i][j] = -1;\n        }\n    }\n    dp[0][0] = grid[0][0];\n    for (long\
    \ i = 0; i < n; i++)\n    {\n        for (long j = 0; j < n; j++)\n        {\n\
    \            if (i + 1 < n)\n            {\n                if (dp[i + 1][j] >\
    \ dp[i][j] + grid[i + 1][j])\n                {\n                    dp[i + 1][j]\
    \ = dp[i][j] + grid[i + 1][j];\n                    path[i + 1][j] = i * n + j;\n\
    \                }\n            }\n            if (j + 1 < n)\n            {\n\
    \                if (dp[i][j + 1] > dp[i][j] + grid[i][j + 1])\n             \
    \   {\n                    dp[i][j + 1] = dp[i][j] + grid[i][j + 1];\n       \
    \             path[i][j + 1] = i * n + j;\n                }\n            }\n\
    \        }\n    }\n    long[] res = new long[k];\n    long cur = n * n - 1;\n\
    \    for (long i = k - 1; i >= 0; i--)\n    {\n        res[i] = grid[cur / n][cur\
    \ % n];\n        cur = path[cur / n][cur % n];\n    }\n    return res;\n}", "{\n\
    \    int n = grid.length;\n    int[][] dp = new int[n][n];\n    int[][] prev =\
    \ new int[n][n];\n    for (int i = 0; i < n; i++)\n        for (int j = 0; j <\
    \ n; j++)\n            dp[i][j] = int.max;\n    dp[0][0] = 0;\n    prev[0][0]\
    \ = -1;\n    for (int i = 0; i < n; i++)\n        for (int j = 0; j < n; j++)\n\
    \        {\n            if (i > 0 && dp[i - 1][j] + 1 < dp[i][j])\n          \
    \  {\n                dp[i][j] = dp[i - 1][j] + 1;\n                prev[i][j]\
    \ = 0;\n            }\n            if (j > 0 && dp[i][j - 1] + 1 < dp[i][j])\n\
    \            {\n                dp[i][j] = dp[i][j - 1] + 1;\n               \
    \ prev[i][j] = 1;\n            }\n            if (i < n - 1 && dp[i + 1][j] +\
    \ 1 < dp[i][j])\n            {\n                dp[i][j] = dp[i + 1][j] + 1;\n\
    \                prev[i][j] = 2;\n            }\n            if (j < n - 1 &&\
    \ dp[i][j + 1] + 1 < dp[i][j])\n            {\n                dp[i][j] = dp[i][j\
    \ + 1] + 1;\n                prev[i][j] = 3;\n            }\n        }\n    int[]\
    \ path = new int[k];\n    int x = n - 1;\n    int y = n - 1;\n    for (int i =\
    \ k - 1; i >= 0; i--)\n    {\n        path[i] = grid[x][y];\n        switch (prev[x][y])\n\
    \        {\n            case 0:\n                x--;\n                break;\n\
    \            case 1:\n                y", "{\n    // Write your code here\n  \
    \  long[][] dp = new long[grid.length][grid[0].length];\n    long[][] path = new\
    \ long[grid.length][grid[0].length];\n    for (int i = 0; i < grid.length; i++)\n\
    \    {\n        for (int j = 0; j < grid[0].length; j++)\n        {\n        \
    \    dp[i][j] = grid[i][j];\n            path[i][j] = grid[i][j];\n        }\n\
    \    }\n    for (int i = 1; i < k; i++)\n    {\n        for (int j = 0; j < grid.length;\
    \ j++)\n        {\n            for (int l = 0; l < grid[0].length; l++)\n    \
    \        {\n                long min = dp[j][l];\n                long minPath\
    \ = path[j][l];\n                if (j > 0 && dp[j - 1][l] < min)\n          \
    \      {\n                    min = dp[j - 1][l];\n                    minPath\
    \ = path[j - 1][l];\n                }\n                if (j < grid.length -\
    \ 1 && dp[j + 1][l] < min)\n                {\n                    min = dp[j\
    \ + 1][l];\n                    minPath = path[j + 1][l];\n                }\n\
    \                if (l > 0 && dp[j][l - 1] < min)\n                {\n       \
    \             min = dp[j][l - 1];\n                    minPath = path[j][l - 1];\n\
    \                }\n                if (l < grid[0].length - 1 && dp[j][l + 1]\
    \ < min)\n                {\n                    min = dp[j][l + 1];\n       \
    \             minPath = path[j][l + 1];\n                }\n                dp[j][l]\
    \ = min + grid[j][l];\n                path[j][l] = minPath + grid[j][l];\n  \
    \          }\n        }\n    }\n    long min = dp[0][0];\n    long minPath = path[0][0];\n\
    \    for (int i = 0; i", "{\n    long n = grid.length;\n    long[][] dp = new\
    \ long[n][n];\n    long[][] path = new long[n][n];\n    long[][] visited = new\
    \ long[n][n];\n    long[][] dir = new long[][]{{1, 0}, {0, 1}, {-1, 0}, {0, -1}};\n\
    \    long[][] dir_path = new long[][]{{0, 0}, {1, 0}, {0, 1}, {1, 1}};\n    long[][]\
    \ dir_path_rev = new long[][]{{0, 0}, {0, 1}, {1, 0}, {1, 1}};\n    long[][] dir_path_rev_2\
    \ = new long[][]{{0, 0}, {1, 0}, {0, 1}, {1, 1}};\n    long[][] dir_path_2 = new\
    \ long[][]{{0, 0}, {0, 1}, {1, 0}, {1, 1}};\n    long[][] dir_path_3 = new long[][]{{0,\
    \ 0}, {1, 0}, {0, 1}, {1, 1}};\n    long[][] dir_path_4 = new long[][]{{0, 0},\
    \ {0, 1}, {1, 0}, {1, 1}};\n    long[][] dir_path_5 = new long[][]{{0, 0}, {1,\
    \ 0}, {0, 1}, {1, 1}};\n    long[][] dir_path_6 = new long[][]{{0, 0}, {0, 1},\
    \ {1, 0}, {1, 1}};\n    long[][] dir_path_7 = new long[][]{{0, 0}, {1, 0}, {0,\
    \ 1}, {1, 1}};\n    long[][] dir_path_8 = new long[][]{{0, 0}, {0, 1}, {1, 0},\
    \ {1, 1}};\n    long[][] dir_path_9 = new long[][]{{0, 0}, {1, 0}, {0, 1}, {1,\
    \ 1}};\n", "{\n    int n = grid.length;\n    int[][] dp = new int[n][n];\n   \
    \ for (int i = 0; i < n; i++)\n        for (int j = 0; j < n; j++)\n         \
    \   dp[i][j] = int.max;\n    dp[0][0] = 0;\n    for (int i = 0; i < n; i++)\n\
    \        for (int j = 0; j < n; j++)\n        {\n            if (i > 0)\n    \
    \            dp[i][j] = min(dp[i][j], dp[i - 1][j] + grid[i][j]);\n          \
    \  if (j > 0)\n                dp[i][j] = min(dp[i][j], dp[i][j - 1] + grid[i][j]);\n\
    \        }\n    long[] res = new long[k];\n    for (int i = 0; i < k; i++)\n \
    \       res[i] = grid[0][0];\n    int x = 0, y = 0;\n    for (int i = 0; i < k\
    \ - 1; i++)\n    {\n        if (x < n - 1 && dp[x + 1][y] == dp[x][y] + grid[x\
    \ + 1][y])\n        {\n            x++;\n            res[i + 1] = grid[x][y];\n\
    \        }\n        else\n        {\n            y++;\n            res[i + 1]\
    \ = grid[x][y];\n        }\n    }\n    return res;\n}", "{\n    long n = grid.length;\n\
    \    long[][] dp = new long[n][n];\n    for (long i = 0; i < n; i++)\n       \
    \ for (long j = 0; j < n; j++)\n            dp[i][j] = long.max;\n    dp[0][0]\
    \ = grid[0][0];\n    for (long i = 0; i < n; i++)\n        for (long j = 0; j\
    \ < n; j++)\n        {\n            if (i > 0)\n                dp[i][j] = min(dp[i][j],\
    \ dp[i - 1][j] + grid[i][j]);\n            if (j > 0)\n                dp[i][j]\
    \ = min(dp[i][j], dp[i][j - 1] + grid[i][j]);\n        }\n    long[] path = new\
    \ long[k];\n    path[0] = grid[0][0];\n    long i = 0, j = 0;\n    for (long l\
    \ = 1; l < k; l++)\n    {\n        if (i + 1 < n && dp[i + 1][j] + grid[i + 1][j]\
    \ == dp[i][j])\n        {\n            i++;\n            path[l] = grid[i][j];\n\
    \        }\n        else\n        {\n            j++;\n            path[l] = grid[i][j];\n\
    \        }\n    }\n    return path;\n}", "{\n    int n = grid.length;\n    int[][]\
    \ dp = new int[n][n];\n    int[][] prev = new int[n][n];\n    for (int i = 0;\
    \ i < n; i++)\n        for (int j = 0; j < n; j++)\n            dp[i][j] = int.max;\n\
    \    dp[0][0] = 0;\n    for (int i = 0; i < n; i++)\n        for (int j = 0; j\
    \ < n; j++)\n        {\n            if (i > 0 && dp[i - 1][j] + grid[i][j] < dp[i][j])\n\
    \            {\n                dp[i][j] = dp[i - 1][j] + grid[i][j];\n      \
    \          prev[i][j] = 1;\n            }\n            if (j > 0 && dp[i][j -\
    \ 1] + grid[i][j] < dp[i][j])\n            {\n                dp[i][j] = dp[i][j\
    \ - 1] + grid[i][j];\n                prev[i][j] = 2;\n            }\n       \
    \     if (i < n - 1 && dp[i + 1][j] + grid[i][j] < dp[i][j])\n            {\n\
    \                dp[i][j] = dp[i + 1][j] + grid[i][j];\n                prev[i][j]\
    \ = 3;\n            }\n            if (j < n - 1 && dp[i][j + 1] + grid[i][j]\
    \ < dp[i][j])\n            {\n                dp[i][j] = dp[i][j + 1] + grid[i][j];\n\
    \                prev[i][j] = 4;\n            }\n        }\n    long[] res = new\
    \ long[k];\n    int x = n - 1, y = n - 1;\n    for (int i = k - 1; i >= 0; i--)\n\
    \    {\n        res[i] = grid[x][y];\n        if (prev[x][y] == 1)\n", "{\n  \
    \  long N = grid.length;\n    long[][] dp = new long[N][N];\n    foreach(i; 0\
    \ .. N)\n        foreach(j; 0 .. N)\n            dp[i][j] = long.max;\n    dp[0][0]\
    \ = grid[0][0];\n    foreach(i; 0 .. N)\n        foreach(j; 0 .. N)\n        {\n\
    \            if(i > 0)\n                dp[i][j] = min(dp[i][j], dp[i - 1][j]\
    \ + grid[i][j]);\n            if(j > 0)\n                dp[i][j] = min(dp[i][j],\
    \ dp[i][j - 1] + grid[i][j]);\n        }\n    long[] res = new long[k];\n    long\
    \ i = N - 1;\n    long j = N - 1;\n    foreach(idx; 0 .. k)\n    {\n        res[idx]\
    \ = grid[i][j];\n        if(i > 0 && dp[i - 1][j] + grid[i][j] == dp[i][j])\n\
    \            i--;\n        else\n            j--;\n    }\n    return res;\n}",
  "{\n    long n = grid.length;\n    long[][] dp = new long[n][n];\n    long[][] path\
    \ = new long[n][n];\n    long[][] path_len = new long[n][n];\n    long[][] path_idx\
    \ = new long[n][n];\n    long[][] path_val = new long[n][n];\n    long[][] path_val_idx\
    \ = new long[n][n];\n    long[][] path_val_len = new long[n][n];\n    long[][]\
    \ path_val_idx_len = new long[n][n];\n    long[][] path_val_idx_len_val = new\
    \ long[n][n];\n    for (long i = 0; i < n; i++)\n    {\n        for (long j =\
    \ 0; j < n; j++)\n        {\n            dp[i][j] = long.max;\n            path[i][j]\
    \ = long.max;\n            path_len[i][j] = long.max;\n            path_idx[i][j]\
    \ = long.max;\n            path_val[i][j] = long.max;\n            path_val_idx[i][j]\
    \ = long.max;\n            path_val_len[i][j] = long.max;\n            path_val_idx_len[i][j]\
    \ = long.max;\n            path_val_idx_len_val[i][j] = long.max;\n        }\n\
    \    }\n    for (long i = 0; i < n; i++)\n    {\n        for (long j = 0; j <\
    \ n; j++)\n        {\n            if (i == 0 && j == 0)\n            {\n     \
    \           dp[i][j] = grid[i][j];\n                path[i][j] = 0;\n        \
    \        path_len[i][j] = 1;\n                path_idx[i][j] = 0;\n          \
    \      path_val[i][j] = grid[i][j];\n                path_val_idx[i][j] = 0;\n\
    \                path", "{\n    int N = grid.length;\n    long[][] dp = new long[N][N];\n\
    \    for (int i = 0; i < N; i++)\n        for (int j = 0; j < N; j++)\n      \
    \      dp[i][j] = long.max;\n    dp[0][0] = grid[0][0];\n    for (int i = 0; i\
    \ < N; i++)\n        for (int j = 0; j < N; j++)\n        {\n            if (i\
    \ > 0)\n                dp[i][j] = min(dp[i][j], dp[i - 1][j] + grid[i][j]);\n\
    \            if (j > 0)\n                dp[i][j] = min(dp[i][j], dp[i][j - 1]\
    \ + grid[i][j]);\n        }\n    long[] res = new long[k];\n    int i = N - 1,\
    \ j = N - 1;\n    for (int l = k - 1; l >= 0; l--)\n    {\n        res[l] = grid[i][j];\n\
    \        if (i > 0 && dp[i - 1][j] + grid[i][j] == dp[i][j])\n            i--;\n\
    \        else\n            j--;\n    }\n    return res;\n}", "{\n    int N = grid.length;\n\
    \    int[][] dp = new int[N][N];\n    for (int i = 0; i < N; i++)\n        for\
    \ (int j = 0; j < N; j++)\n            dp[i][j] = int.max;\n    dp[0][0] = 0;\n\
    \    for (int i = 0; i < N; i++)\n        for (int j = 0; j < N; j++)\n      \
    \  {\n            if (i > 0)\n                dp[i][j] = min(dp[i][j], dp[i -\
    \ 1][j] + 1);\n            if (j > 0)\n                dp[i][j] = min(dp[i][j],\
    \ dp[i][j - 1] + 1);\n        }\n    int[][] dp2 = new int[N][N];\n    for (int\
    \ i = 0; i < N; i++)\n        for (int j = 0; j < N; j++)\n            dp2[i][j]\
    \ = int.max;\n    dp2[N - 1][N - 1] = 0;\n    for (int i = N - 1; i >= 0; i--)\n\
    \        for (int j = N - 1; j >= 0; j--)\n        {\n            if (i < N -\
    \ 1)\n                dp2[i][j] = min(dp2[i][j], dp2[i + 1][j] + 1);\n       \
    \     if (j < N - 1)\n                dp2[i][j] = min(dp2[i][j], dp2[i][j + 1]\
    \ + 1);\n        }\n    int[][] dp3 = new int[N][N];\n    for (int i = 0; i <\
    \ N; i++)\n        for (int j = 0; j < N; j++)\n            dp3[i][j] = dp[i][j]\
    \ + dp2[i][j];\n    int[][] dp4 = new int[N][N];\n    for (int i = 0; i < N; i++)\n\
    \        for (", "{\n    int n = grid.length;\n    int[][] dp = new int[n][n];\n\
    \    for (int i = 0; i < n; i++)\n        for (int j = 0; j < n; j++)\n      \
    \      dp[i][j] = int.max;\n    dp[0][0] = 0;\n    for (int i = 0; i < n; i++)\n\
    \        for (int j = 0; j < n; j++)\n        {\n            if (i > 0)\n    \
    \            dp[i][j] = min(dp[i][j], dp[i - 1][j] + 1);\n            if (j >\
    \ 0)\n                dp[i][j] = min(dp[i][j], dp[i][j - 1] + 1);\n        }\n\
    \    int[][] dp2 = new int[n][n];\n    for (int i = 0; i < n; i++)\n        for\
    \ (int j = 0; j < n; j++)\n            dp2[i][j] = int.max;\n    dp2[n - 1][n\
    \ - 1] = 0;\n    for (int i = n - 1; i >= 0; i--)\n        for (int j = n - 1;\
    \ j >= 0; j--)\n        {\n            if (i < n - 1)\n                dp2[i][j]\
    \ = min(dp2[i][j], dp2[i + 1][j] + 1);\n            if (j < n - 1)\n         \
    \       dp2[i][j] = min(dp2[i][j], dp2[i][j + 1] + 1);\n        }\n    int[][]\
    \ dp3 = new int[n][n];\n    for (int i = 0; i < n; i++)\n        for (int j =\
    \ 0; j < n; j++)\n            dp3[i][j] = dp[i][j] + dp2[i][j];\n    int[][] dp4\
    \ = new int[n][n];\n    for (int i = 0; i < n; i++)\n        for (", "{\n    int\
    \ n = grid.length;\n    int[][] dp = new int[n][n];\n    foreach(i; 0 .. n)\n\
    \        foreach(j; 0 .. n)\n            dp[i][j] = int.max;\n    dp[0][0] = 0;\n\
    \    foreach(i; 0 .. n)\n        foreach(j; 0 .. n)\n        {\n            if(i\
    \ > 0)\n                dp[i][j] = min(dp[i][j], dp[i - 1][j] + 1);\n        \
    \    if(j > 0)\n                dp[i][j] = min(dp[i][j], dp[i][j - 1] + 1);\n\
    \        }\n    int[][] dp2 = new int[n][n];\n    foreach(i; 0 .. n)\n       \
    \ foreach(j; 0 .. n)\n            dp2[i][j] = int.max;\n    dp2[n - 1][n - 1]\
    \ = 0;\n    foreach(i; n - 1 .. 0)\n        foreach(j; n - 1 .. 0)\n        {\n\
    \            if(i < n - 1)\n                dp2[i][j] = min(dp2[i][j], dp2[i +\
    \ 1][j] + 1);\n            if(j < n - 1)\n                dp2[i][j] = min(dp2[i][j],\
    \ dp2[i][j + 1] + 1);\n        }\n    int[][] dp3 = new int[n][n];\n    foreach(i;\
    \ 0 .. n)\n        foreach(j; 0 .. n)\n            dp3[i][j] = dp[i][j] + dp2[i][j];\n\
    \    int[][] dp4 = new int[n][n];\n    foreach(i; 0 .. n)\n        foreach(j;\
    \ 0 .. n)\n            dp4[i][j] = int.max;\n    dp4[0][0] = 0;\n    foreach(i;\
    \ 0 .. n)", "{\n    int n = grid.length;\n    int m = grid[0].length;\n    int[][]\
    \ dp = new int[n][m];\n    int[][] dp2 = new int[n][m];\n    for (int i = 0; i\
    \ < n; i++)\n        for (int j = 0; j < m; j++)\n        {\n            dp[i][j]\
    \ = int.max;\n            dp2[i][j] = int.max;\n        }\n    dp[0][0] = 0;\n\
    \    dp2[0][0] = 0;\n    for (int i = 0; i < n; i++)\n        for (int j = 0;\
    \ j < m; j++)\n        {\n            if (i > 0)\n            {\n            \
    \    if (dp[i][j] + grid[i - 1][j] < dp[i - 1][j])\n                {\n      \
    \              dp[i - 1][j] = dp[i][j] + grid[i - 1][j];\n                   \
    \ dp2[i - 1][j] = dp2[i][j] + 1;\n                }\n                else if (dp[i][j]\
    \ + grid[i - 1][j] == dp[i - 1][j])\n                {\n                    if\
    \ (dp2[i][j] + 1 < dp2[i - 1][j])\n                    {\n                   \
    \     dp2[i - 1][j] = dp2[i][j] + 1;\n                    }\n                }\n\
    \            }\n            if (j > 0)\n            {\n                if (dp[i][j]\
    \ + grid[i][j - 1] < dp[i][j - 1])\n                {\n                    dp[i][j\
    \ - 1] = dp[i][j] + grid[i][j - 1];\n                    dp2[i][j - 1] = dp2[i][j]\
    \ + 1;\n                }\n                else if (dp[i][j] + grid[i][j - 1]\
    \ == dp[i][j - 1])\n                {\n                    if (dp2[i][j] +", "{\n\
    \    long N = grid.length;\n    long[][] dp = new long[N][N];\n    long[][] path\
    \ = new long[N][N];\n    long[][] path_idx = new long[N][N];\n    long[][] path_val\
    \ = new long[N][N];\n    long[][] path_len = new long[N][N];\n    long[][] path_sum\
    \ = new long[N][N];\n    long[][] path_max = new long[N][N];\n    long[][] path_min\
    \ = new long[N][N];\n    long[][] path_cnt = new long[N][N];\n    long[][] path_avg\
    \ = new long[N][N];\n    long[][] path_med = new long[N][N];\n    long[][] path_var\
    \ = new long[N][N];\n    long[][] path_std = new long[N][N];\n    long[][] path_min_idx\
    \ = new long[N][N];\n    long[][] path_max_idx = new long[N][N];\n    long[][]\
    \ path_min_val = new long[N][N];\n    long[][] path_max_val = new long[N][N];\n\
    \    long[][] path_min_len = new long[N][N];\n    long[][] path_max_len = new\
    \ long[N][N];\n    long[][] path_min_sum = new long[N][N];\n    long[][] path_max_sum\
    \ = new long[N][N];\n    long[][] path_min_max = new long[N][N];\n    long[][]\
    \ path_max_max = new long[N][N];\n    long[][] path_min_min = new long[N][N];\n\
    \    long[][] path_max_min = new long[N][N];\n    long[][] path_min_cnt = new\
    \ long[N][N];\n    long[][] path_max_cnt = new long[N][N];\n    long[][] path_min_",
  "{\n    long N = grid.length;\n    long[][] dp = new long[N][N];\n    long[][] path\
    \ = new long[N][N];\n    long[][] dir = new long[][]{{1, 0}, {0, 1}, {-1, 0},\
    \ {0, -1}};\n    long[][] visited = new long[N][N];\n    long[][] dist = new long[N][N];\n\
    \    long[][] pre = new long[N][N];\n    long[][] pre_dir = new long[N][N];\n\
    \    long[][] pre_dist = new long[N][N];\n    long[][] pre_visited = new long[N][N];\n\
    \    for (long i = 0; i < N; i++) \n    {\n        for (long j = 0; j < N; j++)\
    \ \n        {\n            dp[i][j] = grid[i][j];\n            path[i][j] = 1;\n\
    \            dist[i][j] = 1;\n            visited[i][j] = 1;\n        }\n    }\n\
    \    for (long i = 1; i < k; i++) \n    {\n        for (long j = 0; j < N; j++)\
    \ \n        {\n            for (long l = 0; l < N; l++) \n            {\n    \
    \            pre[j][l] = dp[j][l];\n                pre_dir[j][l] = path[j][l];\n\
    \                pre_dist[j][l] = dist[j][l];\n                pre_visited[j][l]\
    \ = visited[j][l];\n            }\n        }\n        for (long j = 0; j < N;\
    \ j++) \n        {\n            for (long l = 0; l < N; l++) \n            {\n\
    \                for (long m = 0; m < 4; m++) \n                {\n          \
    \          long x = j + dir[m][0];\n                    long y = l + dir[m][1];\n\
    \                    if (x < 0 || x >= N || y < 0 || y >= N) \n              \
    \      {\n                        continue;\n                   ", "{\n    long\
    \ N = grid.length;\n    long[][] dp = new long[N][N];\n    long[][] path = new\
    \ long[N][N];\n    for (long i = 0; i < N; i++)\n    {\n        for (long j =\
    \ 0; j < N; j++)\n        {\n            dp[i][j] = long.max;\n            path[i][j]\
    \ = -1;\n        }\n    }\n    dp[0][0] = grid[0][0];\n    for (long i = 0; i\
    \ < N; i++)\n    {\n        for (long j = 0; j < N; j++)\n        {\n        \
    \    if (i > 0)\n            {\n                if (dp[i][j] > dp[i - 1][j] +\
    \ grid[i][j])\n                {\n                    dp[i][j] = dp[i - 1][j]\
    \ + grid[i][j];\n                    path[i][j] = 0;\n                }\n    \
    \        }\n            if (j > 0)\n            {\n                if (dp[i][j]\
    \ > dp[i][j - 1] + grid[i][j])\n                {\n                    dp[i][j]\
    \ = dp[i][j - 1] + grid[i][j];\n                    path[i][j] = 1;\n        \
    \        }\n            }\n        }\n    }\n    long[] res = new long[k];\n \
    \   long i = N - 1;\n    long j = N - 1;\n    for (long l = k - 1; l >= 0; l--)\n\
    \    {\n        res[l] = grid[i][j];\n        if (path[i][j] == 0)\n        {\n\
    \            i--;\n        }\n        else\n        {\n            j--;\n    \
    \    }\n    }\n    return res;\n}", "{\n    // Write your code here\n    int n\
    \ = grid.length;\n    int m = grid[0].length;\n    long[][] dp = new long[n][m];\n\
    \    for (int i = 0; i < n; i++)\n    {\n        for (int j = 0; j < m; j++)\n\
    \        {\n            dp[i][j] = long.max;\n        }\n    }\n    dp[0][0] =\
    \ grid[0][0];\n    for (int i = 0; i < n; i++)\n    {\n        for (int j = 0;\
    \ j < m; j++)\n        {\n            if (i > 0)\n            {\n            \
    \    dp[i][j] = min(dp[i][j], dp[i - 1][j] + grid[i][j]);\n            }\n   \
    \         if (j > 0)\n            {\n                dp[i][j] = min(dp[i][j],\
    \ dp[i][j - 1] + grid[i][j]);\n            }\n        }\n    }\n    long[] res\
    \ = new long[k];\n    res[0] = grid[0][0];\n    int x = 0;\n    int y = 0;\n \
    \   for (int i = 1; i < k; i++)\n    {\n        if (x + 1 < n && dp[x + 1][y]\
    \ + grid[x + 1][y] == dp[x][y])\n        {\n            x++;\n        }\n    \
    \    else\n        {\n            y++;\n        }\n        res[i] = grid[x][y];\n\
    \    }\n    return res;\n}", "{\n    // Write your code here\n    int n = grid.length;\n\
    \    int[][] dp = new int[n][n];\n    for (int i = 0; i < n; i++)\n        for\
    \ (int j = 0; j < n; j++)\n            dp[i][j] = int.max;\n    dp[0][0] = 0;\n\
    \    for (int i = 0; i < n; i++)\n        for (int j = 0; j < n; j++)\n      \
    \  {\n            if (i > 0)\n                dp[i][j] = min(dp[i][j], dp[i -\
    \ 1][j] + grid[i][j]);\n            if (j > 0)\n                dp[i][j] = min(dp[i][j],\
    \ dp[i][j - 1] + grid[i][j]);\n        }\n    long[] ans = new long[k];\n    for\
    \ (int i = 0; i < k; i++)\n        ans[i] = grid[0][0];\n    int x = 0, y = 0;\n\
    \    for (int i = 1; i < k; i++)\n    {\n        if (x < n - 1 && dp[x + 1][y]\
    \ == dp[x][y] + grid[x + 1][y])\n        {\n            x++;\n            ans[i]\
    \ = grid[x][y];\n        }\n        else\n        {\n            y++;\n      \
    \      ans[i] = grid[x][y];\n        }\n    }\n    return ans;\n}", "{\n    int\
    \ N = grid.length;\n    int[][] dp = new int[N][N];\n    int[][] prev = new int[N][N];\n\
    \    for (int i = 0; i < N; i++)\n        for (int j = 0; j < N; j++)\n      \
    \      dp[i][j] = int.max;\n    dp[0][0] = 0;\n    for (int i = 0; i < N; i++)\n\
    \        for (int j = 0; j < N; j++)\n        {\n            if (i > 0 && dp[i\
    \ - 1][j] + 1 < dp[i][j])\n            {\n                dp[i][j] = dp[i - 1][j]\
    \ + 1;\n                prev[i][j] = 1;\n            }\n            if (j > 0\
    \ && dp[i][j - 1] + 1 < dp[i][j])\n            {\n                dp[i][j] = dp[i][j\
    \ - 1] + 1;\n                prev[i][j] = 2;\n            }\n            if (i\
    \ < N - 1 && dp[i + 1][j] + 1 < dp[i][j])\n            {\n                dp[i][j]\
    \ = dp[i + 1][j] + 1;\n                prev[i][j] = 3;\n            }\n      \
    \      if (j < N - 1 && dp[i][j + 1] + 1 < dp[i][j])\n            {\n        \
    \        dp[i][j] = dp[i][j + 1] + 1;\n                prev[i][j] = 4;\n     \
    \       }\n        }\n    long[] res = new long[k];\n    int i = N - 1;\n    int\
    \ j = N - 1;\n    for (int t = k - 1; t >= 0; t--)\n    {\n        res[t] = grid[i][j];\n\
    \        if (prev[i][j] == 1)\n            i--;\n        else if (prev[i][j] ==\
    \ 2)\n            j--;\n        else if (prev[i][j", "{\n    // Write your code\
    \ here\n    int n = grid.length;\n    int[][] dp = new int[n][n];\n    for (int\
    \ i = 0; i < n; i++)\n        for (int j = 0; j < n; j++)\n            dp[i][j]\
    \ = int.max;\n    dp[0][0] = 0;\n    for (int i = 0; i < n; i++)\n        for\
    \ (int j = 0; j < n; j++)\n        {\n            if (i > 0)\n               \
    \ dp[i][j] = min(dp[i][j], dp[i - 1][j] + 1);\n            if (j > 0)\n      \
    \          dp[i][j] = min(dp[i][j], dp[i][j - 1] + 1);\n        }\n    int[][]\
    \ dp2 = new int[n][n];\n    for (int i = 0; i < n; i++)\n        for (int j =\
    \ 0; j < n; j++)\n            dp2[i][j] = int.max;\n    dp2[n - 1][n - 1] = 0;\n\
    \    for (int i = n - 1; i >= 0; i--)\n        for (int j = n - 1; j >= 0; j--)\n\
    \        {\n            if (i < n - 1)\n                dp2[i][j] = min(dp2[i][j],\
    \ dp2[i + 1][j] + 1);\n            if (j < n - 1)\n                dp2[i][j] =\
    \ min(dp2[i][j], dp2[i][j + 1] + 1);\n        }\n    int[][] dp3 = new int[n][n];\n\
    \    for (int i = 0; i < n; i++)\n        for (int j = 0; j < n; j++)\n      \
    \      dp3[i][j] = dp[i][j] + dp2[i][j];\n    int[][] dp4 = new int[n][n];\n \
    \   for (int i = 0; i < n", "{\n    int n = grid.length;\n    int[][] dp = new\
    \ int[n][n];\n    for (int i = 0; i < n; i++)\n        for (int j = 0; j < n;\
    \ j++)\n            dp[i][j] = int.max;\n    dp[0][0] = 0;\n    for (int i = 0;\
    \ i < n; i++)\n        for (int j = 0; j < n; j++)\n        {\n            if\
    \ (i > 0)\n                dp[i][j] = min(dp[i][j], dp[i - 1][j] + 1);\n     \
    \       if (j > 0)\n                dp[i][j] = min(dp[i][j], dp[i][j - 1] + 1);\n\
    \        }\n    int[][] dp2 = new int[n][n];\n    for (int i = 0; i < n; i++)\n\
    \        for (int j = 0; j < n; j++)\n            dp2[i][j] = int.max;\n    dp2[n\
    \ - 1][n - 1] = 0;\n    for (int i = n - 1; i >= 0; i--)\n        for (int j =\
    \ n - 1; j >= 0; j--)\n        {\n            if (i < n - 1)\n               \
    \ dp2[i][j] = min(dp2[i][j], dp2[i + 1][j] + 1);\n            if (j < n - 1)\n\
    \                dp2[i][j] = min(dp2[i][j], dp2[i][j + 1] + 1);\n        }\n \
    \   int[][] dp3 = new int[n][n];\n    for (int i = 0; i < n; i++)\n        for\
    \ (int j = 0; j < n; j++)\n            dp3[i][j] = dp[i][j] + dp2[i][j];\n   \
    \ int[][] dp4 = new int[n][n];\n    for (int i = 0; i < n; i++)\n        for (",
  "{\n    int n = grid.length;\n    int[][] dp = new int[n][n];\n    foreach(i; 0\
    \ .. n)\n        foreach(j; 0 .. n)\n            dp[i][j] = int.max;\n    dp[0][0]\
    \ = 0;\n    foreach(i; 0 .. n)\n        foreach(j; 0 .. n)\n        {\n      \
    \      if(i > 0)\n                dp[i][j] = min(dp[i][j], dp[i - 1][j] + 1);\n\
    \            if(j > 0)\n                dp[i][j] = min(dp[i][j], dp[i][j - 1]\
    \ + 1);\n        }\n    int[] ans = new int[k];\n    int i = 0, j = 0;\n    foreach(idx;\
    \ 0 .. k)\n    {\n        ans[idx] = grid[i][j];\n        if(i > 0 && dp[i - 1][j]\
    \ + 1 == dp[i][j])\n            i--;\n        else if(j > 0 && dp[i][j - 1] +\
    \ 1 == dp[i][j])\n            j--;\n        else\n            assert(false);\n\
    \    }\n    return ans;\n}", "{\n    int n = grid.length;\n    int[][] dp = new\
    \ int[n][n];\n    for (int i = 0; i < n; i++)\n        for (int j = 0; j < n;\
    \ j++)\n            dp[i][j] = int.max;\n    dp[0][0] = 0;\n    for (int i = 0;\
    \ i < n; i++)\n        for (int j = 0; j < n; j++)\n        {\n            if\
    \ (i > 0)\n                dp[i][j] = min(dp[i][j], dp[i - 1][j] + 1);\n     \
    \       if (j > 0)\n                dp[i][j] = min(dp[i][j], dp[i][j - 1] + 1);\n\
    \        }\n    int[][] dp2 = new int[n][n];\n    for (int i = 0; i < n; i++)\n\
    \        for (int j = 0; j < n; j++)\n            dp2[i][j] = int.max;\n    dp2[n\
    \ - 1][n - 1] = 0;\n    for (int i = n - 1; i >= 0; i--)\n        for (int j =\
    \ n - 1; j >= 0; j--)\n        {\n            if (i < n - 1)\n               \
    \ dp2[i][j] = min(dp2[i][j], dp2[i + 1][j] + 1);\n            if (j < n - 1)\n\
    \                dp2[i][j] = min(dp2[i][j], dp2[i][j + 1] + 1);\n        }\n \
    \   int[][] dp3 = new int[n][n];\n    for (int i = 0; i < n; i++)\n        for\
    \ (int j = 0; j < n; j++)\n            dp3[i][j] = dp[i][j] + dp2[i][j];\n   \
    \ int[][] dp4 = new int[n][n];\n    for (int i = 0; i < n; i++)\n        for (",
  "{\n    // Write your code here\n    int n = grid.length;\n    int[][] dp = new\
    \ int[n][n];\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < n;\
    \ j++) {\n            dp[i][j] = int.max;\n        }\n    }\n    dp[0][0] = 0;\n\
    \    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < n; j++) {\n  \
    \          if (i > 0) {\n                dp[i][j] = min(dp[i][j], dp[i - 1][j]\
    \ + grid[i][j]);\n            }\n            if (j > 0) {\n                dp[i][j]\
    \ = min(dp[i][j], dp[i][j - 1] + grid[i][j]);\n            }\n        }\n    }\n\
    \    long[] res = new long[k];\n    for (int i = 0; i < k; i++) {\n        res[i]\
    \ = grid[0][0];\n    }\n    int i = 0;\n    int j = 0;\n    for (int l = 1; l\
    \ < k; l++) {\n        if (i > 0 && dp[i - 1][j] + grid[i][j] < dp[i][j - 1] +\
    \ grid[i][j]) {\n            i--;\n        } else {\n            j--;\n      \
    \  }\n        res[l] = grid[i][j];\n    }\n    return res;\n}", "{\n    int n\
    \ = grid.length;\n    int[][] dp = new int[n][n];\n    int[][] dir = new int[][]{{1,\
    \ 0}, {0, 1}, {-1, 0}, {0, -1}};\n    for (int i = 0; i < n; i++)\n        for\
    \ (int j = 0; j < n; j++)\n            dp[i][j] = int.max;\n    dp[0][0] = 0;\n\
    \    for (int i = 0; i < n; i++)\n        for (int j = 0; j < n; j++)\n      \
    \      for (int d = 0; d < 4; d++)\n            {\n                int x = i +\
    \ dir[d][0];\n                int y = j + dir[d][1];\n                if (x <\
    \ 0 || x >= n || y < 0 || y >= n)\n                    continue;\n           \
    \     dp[x][y] = min(dp[x][y], dp[i][j] + 1);\n            }\n    int[][] dp2\
    \ = new int[n][n];\n    for (int i = 0; i < n; i++)\n        for (int j = 0; j\
    \ < n; j++)\n            dp2[i][j] = int.max;\n    dp2[n - 1][n - 1] = 0;\n  \
    \  for (int i = n - 1; i >= 0; i--)\n        for (int j = n - 1; j >= 0; j--)\n\
    \            for (int d = 0; d < 4; d++)\n            {\n                int x\
    \ = i + dir[d][0];\n                int y = j + dir[d][1];\n                if\
    \ (x < 0 || x >= n || y < 0 || y >= n)\n                    continue;\n      \
    \          dp2[x][y] = min(dp2[x][y], dp2[i][j] + 1);\n            }\n    int[][]\
    \ dp3 = new int[n][n];\n    for (int i = 0; i < n; i++)\n        for (int j =\
    \ 0; j < n; j++)", "{\n    auto n = grid.length;\n    auto m = grid[0].length;\n\
    \    auto dp = new long[n][m][k + 1];\n    foreach (i; 0 .. n)\n        foreach\
    \ (j; 0 .. m)\n            foreach (l; 0 .. k + 1)\n                dp[i][j][l]\
    \ = long.max;\n    dp[0][0][1] = grid[0][0];\n    foreach (i; 0 .. n)\n      \
    \  foreach (j; 0 .. m)\n            foreach (l; 1 .. k + 1)\n            {\n \
    \               if (i > 0)\n                    dp[i][j][l] = min(dp[i][j][l],\
    \ dp[i - 1][j][l - 1] + grid[i][j]);\n                if (j > 0)\n           \
    \         dp[i][j][l] = min(dp[i][j][l], dp[i][j - 1][l - 1] + grid[i][j]);\n\
    \                if (i < n - 1)\n                    dp[i][j][l] = min(dp[i][j][l],\
    \ dp[i + 1][j][l - 1] + grid[i][j]);\n                if (j < m - 1)\n       \
    \             dp[i][j][l] = min(dp[i][j][l], dp[i][j + 1][l - 1] + grid[i][j]);\n\
    \            }\n    auto res = new long[k];\n    res[0] = grid[0][0];\n    auto\
    \ i = 0;\n    auto j = 0;\n    foreach (l; 1 .. k)\n    {\n        if (i > 0 &&\
    \ dp[i][j][l] == dp[i - 1][j][l - 1] + grid[i][j])\n        {\n            res[l]\
    \ = grid[i][j];\n            i--;\n        }\n        else if (j > 0 && dp[i][j][l]\
    \ == dp[i][j - 1][l - 1] + grid[i][j])\n        {\n            res[", "{\n   \
    \ int N = grid.length;\n    int[][] dp = new int[N][N];\n    int[][] prev = new\
    \ int[N][N];\n    for (int i = 0; i < N; i++)\n        for (int j = 0; j < N;\
    \ j++)\n            dp[i][j] = int.max;\n    dp[0][0] = 0;\n    for (int i = 0;\
    \ i < N; i++)\n        for (int j = 0; j < N; j++)\n        {\n            if\
    \ (i > 0 && dp[i - 1][j] + 1 < dp[i][j])\n            {\n                dp[i][j]\
    \ = dp[i - 1][j] + 1;\n                prev[i][j] = 1;\n            }\n      \
    \      if (j > 0 && dp[i][j - 1] + 1 < dp[i][j])\n            {\n            \
    \    dp[i][j] = dp[i][j - 1] + 1;\n                prev[i][j] = 2;\n         \
    \   }\n            if (i < N - 1 && dp[i + 1][j] + 1 < dp[i][j])\n           \
    \ {\n                dp[i][j] = dp[i + 1][j] + 1;\n                prev[i][j]\
    \ = 3;\n            }\n            if (j < N - 1 && dp[i][j + 1] + 1 < dp[i][j])\n\
    \            {\n                dp[i][j] = dp[i][j + 1] + 1;\n               \
    \ prev[i][j] = 4;\n            }\n        }\n    int x = N - 1, y = N - 1;\n \
    \   long[] res = new long[k];\n    for (int i = 0; i < k; i++)\n    {\n      \
    \  res[i] = grid[x][y];\n        if (prev[x][y] == 1)\n            x--;\n    \
    \    else if (prev[x][y] == 2)\n            y--;\n        else if (prev[x][y]\
    \ == 3)\n           ", "{\n    int n = grid.length;\n    int[][] dp = new int[n][n];\n\
    \    int[][] dir = new int[n][n];\n    for (int i = 0; i < n; i++)\n        for\
    \ (int j = 0; j < n; j++)\n            dp[i][j] = int.max;\n    dp[0][0] = 0;\n\
    \    for (int i = 0; i < n; i++)\n        for (int j = 0; j < n; j++)\n      \
    \  {\n            if (i > 0 && dp[i - 1][j] + 1 < dp[i][j])\n            {\n \
    \               dp[i][j] = dp[i - 1][j] + 1;\n                dir[i][j] = 1;\n\
    \            }\n            if (j > 0 && dp[i][j - 1] + 1 < dp[i][j])\n      \
    \      {\n                dp[i][j] = dp[i][j - 1] + 1;\n                dir[i][j]\
    \ = 2;\n            }\n            if (i < n - 1 && dp[i + 1][j] + 1 < dp[i][j])\n\
    \            {\n                dp[i][j] = dp[i + 1][j] + 1;\n               \
    \ dir[i][j] = 3;\n            }\n            if (j < n - 1 && dp[i][j + 1] + 1\
    \ < dp[i][j])\n            {\n                dp[i][j] = dp[i][j + 1] + 1;\n \
    \               dir[i][j] = 4;\n            }\n        }\n    int[] path = new\
    \ int[k];\n    int i = n - 1, j = n - 1;\n    for (int t = k - 1; t >= 0; t--)\n\
    \    {\n        path[t] = grid[i][j];\n        switch (dir[i][j])\n        {\n\
    \            case 1:\n                i--;\n                break;\n         \
    \   case 2:\n                j--;\n                break;\n            case 3:\n\
    \                i++;", "{\n    long N = grid.length;\n    long[][] dp = new long[N][N];\n\
    \    for (long i = 0; i < N; i++)\n        for (long j = 0; j < N; j++)\n    \
    \        dp[i][j] = long.max;\n    dp[0][0] = grid[0][0];\n    for (long i = 0;\
    \ i < N; i++)\n        for (long j = 0; j < N; j++)\n        {\n            if\
    \ (i > 0)\n                dp[i][j] = min(dp[i][j], dp[i - 1][j] + grid[i][j]);\n\
    \            if (j > 0)\n                dp[i][j] = min(dp[i][j], dp[i][j - 1]\
    \ + grid[i][j]);\n        }\n    long[] ans = new long[k];\n    ans[0] = dp[N\
    \ - 1][N - 1];\n    long i = N - 1;\n    long j = N - 1;\n    for (long l = 1;\
    \ l < k; l++)\n    {\n        if (i > 0 && dp[i - 1][j] + grid[i][j] == dp[i][j])\n\
    \        {\n            ans[l] = grid[i][j];\n            i--;\n        }\n  \
    \      else\n        {\n            ans[l] = grid[i][j];\n            j--;\n \
    \       }\n    }\n    return ans;\n}", "{\n    long n = grid.length;\n    long[][]\
    \ dp = new long[n][n];\n    long[][] dp2 = new long[n][n];\n    for (long i =\
    \ 0; i < n; i++)\n    {\n        for (long j = 0; j < n; j++)\n        {\n   \
    \         dp[i][j] = grid[i][j];\n            dp2[i][j] = grid[i][j];\n      \
    \  }\n    }\n    for (long i = 1; i < k; i++)\n    {\n        for (long j = 0;\
    \ j < n; j++)\n        {\n            for (long l = 0; l < n; l++)\n         \
    \   {\n                dp[j][l] = grid[j][l];\n                if (j > 0)\n  \
    \              {\n                    dp[j][l] = min(dp[j][l], dp2[j - 1][l]);\n\
    \                }\n                if (j < n - 1)\n                {\n      \
    \              dp[j][l] = min(dp[j][l], dp2[j + 1][l]);\n                }\n \
    \               if (l > 0)\n                {\n                    dp[j][l] =\
    \ min(dp[j][l], dp2[j][l - 1]);\n                }\n                if (l < n\
    \ - 1)\n                {\n                    dp[j][l] = min(dp[j][l], dp2[j][l\
    \ + 1]);\n                }\n            }\n        }\n        for (long j = 0;\
    \ j < n; j++)\n        {\n            for (long l = 0; l < n; l++)\n         \
    \   {\n                dp2[j][l] = dp[j][l];\n            }\n        }\n    }\n\
    \    long[] res = new long[k];\n    long x = 0;\n    long y = 0;\n    for (long\
    \ i = 0; i < k; i++)\n    {\n        res[i] = dp[x][y];\n        long min = dp[x][y];\n\
    \        if (x > 0 && dp[x -", "{\n    // Write your code here\n    int n = grid.length;\n\
    \    int[][] dp = new int[n][n];\n    int[][] visited = new int[n][n];\n    int[][]\
    \ dir = new int[][]{{0,1},{0,-1},{1,0},{-1,0}};\n    int[][] path = new int[n][n];\n\
    \    for(int i = 0; i < n; i++)\n    {\n        for(int j = 0; j < n; j++)\n \
    \       {\n            dp[i][j] = int.max;\n        }\n    }\n    dp[0][0] = 0;\n\
    \    visited[0][0] = 1;\n    path[0][0] = 1;\n    for(int i = 0; i < n; i++)\n\
    \    {\n        for(int j = 0; j < n; j++)\n        {\n            for(int d =\
    \ 0; d < 4; d++)\n            {\n                int x = i + dir[d][0];\n    \
    \            int y = j + dir[d][1];\n                if(x >= 0 && x < n && y >=\
    \ 0 && y < n)\n                {\n                    if(dp[x][y] > dp[i][j] +\
    \ grid[x][y])\n                    {\n                        dp[x][y] = dp[i][j]\
    \ + grid[x][y];\n                        path[x][y] = path[i][j];\n          \
    \          }\n                    else if(dp[x][y] == dp[i][j] + grid[x][y])\n\
    \                    {\n                        path[x][y] += path[i][j];\n  \
    \                  }\n                }\n            }\n        }\n    }\n   \
    \ int[][] dp2 = new int[n][n];\n    int[][] visited2 = new int[n][n];\n    int[][]\
    \ path2 = new int[n][n];\n    for(int i = 0; i < n; i++)\n    {\n        for(int\
    \ j = 0; j < n; j++)\n        {\n            dp2[", "{\n    long n = grid.length;\n\
    \    long[][] dp = new long[n][n];\n    long[][] path = new long[n][n];\n    long[][]\
    \ path_len = new long[n][n];\n    long[][] path_val = new long[n][n];\n    long[][]\
    \ path_val_len = new long[n][n];\n    long[][] path_val_len_sum = new long[n][n];\n\
    \    long[][] path_val_len_sum_len = new long[n][n];\n    long[][] path_val_len_sum_len_sum\
    \ = new long[n][n];\n    long[][] path_val_len_sum_len_sum_len = new long[n][n];\n\
    \    long[][] path_val_len_sum_len_sum_len_sum = new long[n][n];\n    long[][]\
    \ path_val_len_sum_len_sum_len_sum_len = new long[n][n];\n    long[][] path_val_len_sum_len_sum_len_sum_len_sum\
    \ = new long[n][n];\n    long[][] path_val_len_sum_len_sum_len_sum_len_sum_len\
    \ = new long[n][n];\n    long[][] path_val_len_sum_len_sum_len_sum_len_sum_len_sum\
    \ = new long[n][n];\n    long[][] path_val_len_sum_len_sum_len_sum_len_sum_len_sum_len\
    \ = new long[n][n];\n    long[][] path_val_len_sum_len_sum_len_sum_len_sum_len_sum_len_sum\
    \ = new long[n][n];\n    long[][] path_val_len_sum_len_sum_len_sum_len_sum_len_sum_len_sum_len\
    \ = new long[n][n];\n    long[][] path_val_len_sum_len_sum_len_sum_len_sum_len_sum_len_sum",
  "{\n    int N = grid.length;\n    long[][] dp = new long[N][N];\n    long[][] prev\
    \ = new long[N][N];\n    for (int i = 0; i < N; i++)\n        for (int j = 0;\
    \ j < N; j++)\n            dp[i][j] = long.max;\n    dp[0][0] = grid[0][0];\n\
    \    for (int i = 0; i < N; i++)\n        for (int j = 0; j < N; j++)\n      \
    \  {\n            if (i > 0)\n            {\n                if (dp[i][j] + grid[i\
    \ - 1][j] < dp[i - 1][j])\n                {\n                    dp[i - 1][j]\
    \ = dp[i][j] + grid[i - 1][j];\n                    prev[i - 1][j] = (i << 32)\
    \ | j;\n                }\n            }\n            if (j > 0)\n           \
    \ {\n                if (dp[i][j] + grid[i][j - 1] < dp[i][j - 1])\n         \
    \       {\n                    dp[i][j - 1] = dp[i][j] + grid[i][j - 1];\n   \
    \                 prev[i][j - 1] = (i << 32) | j;\n                }\n       \
    \     }\n            if (i < N - 1)\n            {\n                if (dp[i][j]\
    \ + grid[i + 1][j] < dp[i + 1][j])\n                {\n                    dp[i\
    \ + 1][j] = dp[i][j] + grid[i + 1][j];\n                    prev[i + 1][j] = (i\
    \ << 32) | j;\n                }\n            }\n            if (j < N - 1)\n\
    \            {\n                if (dp[i][j] + grid[i][j + 1] < dp[i][j + 1])\n\
    \                {\n                    dp[i][j + 1] = dp[i][j] + grid[i][j +\
    \ 1];\n                    prev[i][j + 1] = (i <<", "{\n    long n = grid.length;\n\
    \    long[][] dp = new long[n][n];\n    foreach(i; 0 .. n)\n        foreach(j;\
    \ 0 .. n)\n            dp[i][j] = long.max;\n    dp[0][0] = grid[0][0];\n    foreach(i;\
    \ 0 .. n)\n        foreach(j; 0 .. n)\n        {\n            if(i > 0)\n    \
    \            dp[i][j] = min(dp[i][j], dp[i - 1][j] + grid[i][j]);\n          \
    \  if(j > 0)\n                dp[i][j] = min(dp[i][j], dp[i][j - 1] + grid[i][j]);\n\
    \        }\n    long[] res = new long[k];\n    res[0] = grid[0][0];\n    long\
    \ i = 0, j = 0;\n    foreach(k; 1 .. k)\n    {\n        if(i < n - 1 && dp[i +\
    \ 1][j] < dp[i][j + 1])\n        {\n            res[k] = grid[i + 1][j];\n   \
    \         i++;\n        }\n        else\n        {\n            res[k] = grid[i][j\
    \ + 1];\n            j++;\n        }\n    }\n    return res;\n}", "{\n    int\
    \ N = grid.length;\n    int[][] dp = new int[N][N];\n    for (int i = 0; i < N;\
    \ i++)\n        for (int j = 0; j < N; j++)\n            dp[i][j] = int.max;\n\
    \    dp[0][0] = 0;\n    for (int i = 0; i < N; i++)\n        for (int j = 0; j\
    \ < N; j++)\n        {\n            if (i > 0)\n                dp[i][j] = min(dp[i][j],\
    \ dp[i - 1][j] + grid[i][j]);\n            if (j > 0)\n                dp[i][j]\
    \ = min(dp[i][j], dp[i][j - 1] + grid[i][j]);\n        }\n    long[] res = new\
    \ long[k];\n    int index = 0;\n    int i = N - 1;\n    int j = N - 1;\n    while\
    \ (k > 0)\n    {\n        res[index++] = grid[i][j];\n        if (i > 0 && dp[i\
    \ - 1][j] + grid[i][j] == dp[i][j])\n            i--;\n        else\n        \
    \    j--;\n        k--;\n    }\n    return res;\n}", "{\n    long n = grid.length;\n\
    \    long[][] dp = new long[n][n];\n    long[][] path = new long[n][n];\n    long[][]\
    \ path_len = new long[n][n];\n    long[][] path_val = new long[n][n];\n    for\
    \ (long i = 0; i < n; i++)\n    {\n        for (long j = 0; j < n; j++)\n    \
    \    {\n            dp[i][j] = long.max;\n            path[i][j] = -1;\n     \
    \       path_len[i][j] = 0;\n            path_val[i][j] = 0;\n        }\n    }\n\
    \    dp[0][0] = 0;\n    path[0][0] = -1;\n    path_len[0][0] = 0;\n    path_val[0][0]\
    \ = grid[0][0];\n    for (long i = 0; i < n; i++)\n    {\n        for (long j\
    \ = 0; j < n; j++)\n        {\n            if (i > 0)\n            {\n       \
    \         if (dp[i][j] > dp[i - 1][j] + 1)\n                {\n              \
    \      dp[i][j] = dp[i - 1][j] + 1;\n                    path[i][j] = 0;\n   \
    \                 path_len[i][j] = path_len[i - 1][j] + 1;\n                 \
    \   path_val[i][j] = path_val[i - 1][j] * n + grid[i][j];\n                }\n\
    \                else if (dp[i][j] == dp[i - 1][j] + 1)\n                {\n \
    \                   if (path_val[i][j] > path_val[i - 1][j] * n + grid[i][j])\n\
    \                    {\n                        path[i][j] = 0;\n            \
    \            path_len[i][j] = path_len[i - 1][j] + 1;\n                      \
    \  path_val[i][j] = path_val[i - 1][j] * n + grid[i][", "{\n    long N = grid.length;\n\
    \    long[][] dp = new long[N][N];\n    foreach(i; 0 .. N)\n        foreach(j;\
    \ 0 .. N)\n            dp[i][j] = long.max;\n    dp[0][0] = grid[0][0];\n    foreach(i;\
    \ 0 .. N)\n        foreach(j; 0 .. N)\n        {\n            if(i > 0)\n    \
    \            dp[i][j] = min(dp[i][j], dp[i - 1][j] + grid[i][j]);\n          \
    \  if(j > 0)\n                dp[i][j] = min(dp[i][j], dp[i][j - 1] + grid[i][j]);\n\
    \        }\n    long[] res = new long[k];\n    res[0] = grid[0][0];\n    long\
    \ i = 0, j = 0;\n    foreach(idx; 1 .. k)\n    {\n        if(i + 1 < N && dp[i\
    \ + 1][j] + grid[i + 1][j] == dp[i][j])\n        {\n            i++;\n       \
    \     res[idx] = grid[i][j];\n        }\n        else\n        {\n           \
    \ j++;\n            res[idx] = grid[i][j];\n        }\n    }\n    return res;\n\
    }", "{\n    long N = grid.length;\n    long[][] dp = new long[N][N];\n    long[][]\
    \ path = new long[N][N];\n    long[][] path_len = new long[N][N];\n    long[][]\
    \ path_val = new long[N][N];\n    for (long i = 0; i < N; i++)\n    {\n      \
    \  for (long j = 0; j < N; j++)\n        {\n            dp[i][j] = long.max;\n\
    \            path[i][j] = -1;\n            path_len[i][j] = 0;\n            path_val[i][j]\
    \ = 0;\n        }\n    }\n    dp[0][0] = 0;\n    path[0][0] = -1;\n    path_len[0][0]\
    \ = 0;\n    path_val[0][0] = grid[0][0];\n    for (long i = 0; i < N; i++)\n \
    \   {\n        for (long j = 0; j < N; j++)\n        {\n            if (i > 0)\n\
    \            {\n                if (dp[i][j] > dp[i - 1][j] + 1)\n           \
    \     {\n                    dp[i][j] = dp[i - 1][j] + 1;\n                  \
    \  path[i][j] = 0;\n                    path_len[i][j] = path_len[i - 1][j] +\
    \ 1;\n                    path_val[i][j] = path_val[i - 1][j] * N + grid[i][j];\n\
    \                }\n                else if (dp[i][j] == dp[i - 1][j] + 1)\n \
    \               {\n                    if (path_val[i][j] > path_val[i - 1][j]\
    \ * N + grid[i][j])\n                    {\n                        path[i][j]\
    \ = 0;\n                        path_len[i][j] = path_len[i - 1][j] + 1;\n   \
    \                     path_val[i][j] = path_val[i - 1][j] * N + grid[i][", "{\n\
    \    long n = grid.length;\n    long[][] dp = new long[n][n];\n    foreach(i;\
    \ 0 .. n)\n        foreach(j; 0 .. n)\n            dp[i][j] = long.max;\n    dp[0][0]\
    \ = grid[0][0];\n    foreach(i; 0 .. n)\n        foreach(j; 0 .. n)\n        {\n\
    \            if(i > 0)\n                dp[i][j] = min(dp[i][j], dp[i - 1][j]\
    \ + grid[i][j]);\n            if(j > 0)\n                dp[i][j] = min(dp[i][j],\
    \ dp[i][j - 1] + grid[i][j]);\n        }\n    long[] res = new long[k];\n    long\
    \ sum = 0;\n    foreach(i; 0 .. k)\n    {\n        res[i] = grid[0][0];\n    \
    \    sum += grid[0][0];\n        if(i == k - 1)\n            break;\n        if(i\
    \ == n - 1)\n        {\n            long min = long.max;\n            long min_j\
    \ = 0;\n            foreach(j; 0 .. n)\n                if(dp[n - 1][j] - sum\
    \ < min)\n                {\n                    min = dp[n - 1][j] - sum;\n \
    \                   min_j = j;\n                }\n            foreach(j; 0 ..\
    \ n)\n                if(j != min_j)\n                    dp[n - 1][j] = long.max;\n\
    \            grid[n - 1][min_j] = long.max;\n        }\n        else\n       \
    \ {\n            long min = long.max;\n            long min_i = 0;\n         \
    \   foreach(j; 0 .. n)\n                if(dp[j][n - 1] - sum < min)\n       \
    \         {\n                    min = dp[j][n - 1] - sum;\n                 \
    \   min_i = j;\n                }\n            foreach(j; 0 .. n)\n          \
    \      if(j != min_i)\n                    d", "{\n    int N = grid.length;\n\
    \    int[][] dp = new int[N][N];\n    foreach(int i, int j; product(iota(N), iota(N)))\n\
    \    {\n        dp[i][j] = int.max;\n    }\n    dp[0][0] = 0;\n    foreach(int\
    \ i, int j; product(iota(N), iota(N)))\n    {\n        if(i > 0)\n        {\n\
    \            dp[i][j] = min(dp[i][j], dp[i - 1][j] + 1);\n        }\n        if(j\
    \ > 0)\n        {\n            dp[i][j] = min(dp[i][j], dp[i][j - 1] + 1);\n \
    \       }\n    }\n    int[][] dp2 = new int[N][N];\n    foreach(int i, int j;\
    \ product(iota(N), iota(N)))\n    {\n        dp2[i][j] = int.max;\n    }\n   \
    \ dp2[N - 1][N - 1] = 0;\n    foreach(int i, int j; product(iota(N), iota(N)))\n\
    \    {\n        if(i < N - 1)\n        {\n            dp2[i][j] = min(dp2[i][j],\
    \ dp2[i + 1][j] + 1);\n        }\n        if(j < N - 1)\n        {\n         \
    \   dp2[i][j] = min(dp2[i][j], dp2[i][j + 1] + 1);\n        }\n    }\n    int[][]\
    \ dp3 = new int[N][N];\n    foreach(int i, int j; product(iota(N), iota(N)))\n\
    \    {\n        dp3[i][j] = dp[i][j] + dp2[i][j];\n    }\n    int[][] dp4 = new\
    \ int[N][N];\n    foreach(int i, int j; product(iota(N),", "{\n    long N = grid.length;\n\
    \    long[][] dp = new long[N][N];\n    long[][] path = new long[N][N];\n    long[][]\
    \ path_len = new long[N][N];\n    for (long i = 0; i < N; i++) \n    {\n     \
    \   for (long j = 0; j < N; j++) \n        {\n            dp[i][j] = grid[i][j];\n\
    \            path[i][j] = grid[i][j];\n            path_len[i][j] = 1;\n     \
    \   }\n    }\n    for (long i = 1; i < k; i++) \n    {\n        for (long j =\
    \ 0; j < N; j++) \n        {\n            for (long l = 0; l < N; l++) \n    \
    \        {\n                long min = dp[j][l];\n                long min_path\
    \ = path[j][l];\n                long min_path_len = path_len[j][l];\n       \
    \         if (j > 0 && dp[j - 1][l] < min) \n                {\n             \
    \       min = dp[j - 1][l];\n                    min_path = path[j - 1][l];\n\
    \                    min_path_len = path_len[j - 1][l];\n                }\n \
    \               if (j < N - 1 && dp[j + 1][l] < min) \n                {\n   \
    \                 min = dp[j + 1][l];\n                    min_path = path[j +\
    \ 1][l];\n                    min_path_len = path_len[j + 1][l];\n           \
    \     }\n                if (l > 0 && dp[j][l - 1] < min) \n                {\n\
    \                    min = dp[j][l - 1];\n                    min_path = path[j][l\
    \ - 1];\n                    min_path_len = path_len[j][l - 1];\n            \
    \    }\n                if (l < N - 1 && dp[j][l + 1] < min) \n              \
    \  {\n                    min = dp[j][l + 1];\n                    min_path =\
    \ path[j", "{\n    long N = grid.length;\n    long[][] dp = new long[N][N];\n\
    \    for (long i = 0; i < N; i++)\n        for (long j = 0; j < N; j++)\n    \
    \        dp[i][j] = long.max;\n    dp[0][0] = 0;\n    for (long i = 0; i < N;\
    \ i++)\n        for (long j = 0; j < N; j++)\n        {\n            if (i > 0)\n\
    \                dp[i][j] = min(dp[i][j], dp[i - 1][j] + grid[i][j]);\n      \
    \      if (j > 0)\n                dp[i][j] = min(dp[i][j], dp[i][j - 1] + grid[i][j]);\n\
    \        }\n    long[] ans = new long[k];\n    long cur = 0;\n    for (long i\
    \ = 0; i < k; i++)\n    {\n        ans[i] = grid[cur / N][cur % N];\n        if\
    \ (cur / N + 1 < N && dp[cur / N + 1][cur % N] + grid[cur / N + 1][cur % N] ==\
    \ dp[cur / N][cur % N])\n            cur += N;\n        else\n            cur++;\n\
    \    }\n    return ans;\n}", "{\n    int n = grid.length;\n    int[][] dp = new\
    \ int[n][n];\n    for (int i = 0; i < n; i++)\n        for (int j = 0; j < n;\
    \ j++)\n            dp[i][j] = int.max;\n    dp[0][0] = 0;\n    for (int i = 0;\
    \ i < n; i++)\n        for (int j = 0; j < n; j++)\n        {\n            if\
    \ (i > 0)\n                dp[i][j] = min(dp[i][j], dp[i - 1][j] + 1);\n     \
    \       if (j > 0)\n                dp[i][j] = min(dp[i][j], dp[i][j - 1] + 1);\n\
    \        }\n    int[][] dp2 = new int[n][n];\n    for (int i = 0; i < n; i++)\n\
    \        for (int j = 0; j < n; j++)\n            dp2[i][j] = int.max;\n    dp2[n\
    \ - 1][n - 1] = 0;\n    for (int i = n - 1; i >= 0; i--)\n        for (int j =\
    \ n - 1; j >= 0; j--)\n        {\n            if (i < n - 1)\n               \
    \ dp2[i][j] = min(dp2[i][j], dp2[i + 1][j] + 1);\n            if (j < n - 1)\n\
    \                dp2[i][j] = min(dp2[i][j], dp2[i][j + 1] + 1);\n        }\n \
    \   int[][] dp3 = new int[n][n];\n    for (int i = 0; i < n; i++)\n        for\
    \ (int j = 0; j < n; j++)\n            dp3[i][j] = dp[i][j] + dp2[i][j];\n   \
    \ int[][] dp4 = new int[n][n];\n    for (int i = 0; i < n; i++)\n        for (",
  "{\n    // Write your code here\n    int N = grid.length;\n    int[][] dp = new\
    \ int[N][N];\n    for (int i = 0; i < N; i++)\n        for (int j = 0; j < N;\
    \ j++)\n            dp[i][j] = int.max;\n    dp[0][0] = 0;\n    for (int i = 0;\
    \ i < N; i++)\n        for (int j = 0; j < N; j++)\n        {\n            if\
    \ (i > 0)\n                dp[i][j] = min(dp[i][j], dp[i - 1][j] + 1);\n     \
    \       if (j > 0)\n                dp[i][j] = min(dp[i][j], dp[i][j - 1] + 1);\n\
    \        }\n    int[][] dp2 = new int[N][N];\n    for (int i = 0; i < N; i++)\n\
    \        for (int j = 0; j < N; j++)\n            dp2[i][j] = int.max;\n    dp2[N\
    \ - 1][N - 1] = 0;\n    for (int i = N - 1; i >= 0; i--)\n        for (int j =\
    \ N - 1; j >= 0; j--)\n        {\n            if (i < N - 1)\n               \
    \ dp2[i][j] = min(dp2[i][j], dp2[i + 1][j] + 1);\n            if (j < N - 1)\n\
    \                dp2[i][j] = min(dp2[i][j], dp2[i][j + 1] + 1);\n        }\n \
    \   int[][] dp3 = new int[N][N];\n    for (int i = 0; i < N; i++)\n        for\
    \ (int j = 0; j < N; j++)\n            dp3[i][j] = dp[i][j] + dp2[i][j];\n   \
    \ int[][] dp4 = new int[N][N];\n    for (int i = 0; i < N", "{\n    long N = grid.length;\n\
    \    long[][] dp = new long[N][N];\n    long[][] prev = new long[N][N];\n    long[][]\
    \ next = new long[N][N];\n    for (long i = 0; i < N; i++) \n    {\n        for\
    \ (long j = 0; j < N; j++) \n        {\n            dp[i][j] = long.max;\n   \
    \         prev[i][j] = -1;\n            next[i][j] = -1;\n        }\n    }\n \
    \   dp[0][0] = grid[0][0];\n    for (long i = 0; i < N; i++) \n    {\n       \
    \ for (long j = 0; j < N; j++) \n        {\n            if (i > 0 && dp[i - 1][j]\
    \ + grid[i][j] < dp[i][j]) \n            {\n                dp[i][j] = dp[i -\
    \ 1][j] + grid[i][j];\n                prev[i][j] = i - 1;\n                next[i][j]\
    \ = j;\n            }\n            if (j > 0 && dp[i][j - 1] + grid[i][j] < dp[i][j])\
    \ \n            {\n                dp[i][j] = dp[i][j - 1] + grid[i][j];\n   \
    \             prev[i][j] = i;\n                next[i][j] = j - 1;\n         \
    \   }\n        }\n    }\n    long[] ans = new long[k];\n    long i = N - 1;\n\
    \    long j = N - 1;\n    for (long t = k - 1; t >= 0; t--) \n    {\n        ans[t]\
    \ = grid[i][j];\n        long tmp = i;\n        i = prev[i][j];\n        j = next[tmp][j];\n\
    \    }\n    return ans;\n}", "{\n    long N = grid.length;\n    long[][] dp =\
    \ new long[N][N];\n    long[][] path = new long[N][N];\n    long[][] prev = new\
    \ long[N][N];\n    long[][] next = new long[N][N];\n    for (long i = 0; i < N;\
    \ i++)\n    {\n        for (long j = 0; j < N; j++)\n        {\n            dp[i][j]\
    \ = grid[i][j];\n            path[i][j] = 1;\n            prev[i][j] = -1;\n \
    \           next[i][j] = -1;\n        }\n    }\n    for (long i = 1; i < k; i++)\n\
    \    {\n        for (long j = 0; j < N; j++)\n        {\n            for (long\
    \ l = 0; l < N; l++)\n            {\n                long min = dp[j][l];\n  \
    \              long min_path = path[j][l];\n                long min_prev = -1;\n\
    \                long min_next = -1;\n                if (j > 0 && dp[j - 1][l]\
    \ < min)\n                {\n                    min = dp[j - 1][l];\n       \
    \             min_path = path[j - 1][l];\n                    min_prev = j - 1;\n\
    \                    min_next = l;\n                }\n                if (j <\
    \ N - 1 && dp[j + 1][l] < min)\n                {\n                    min = dp[j\
    \ + 1][l];\n                    min_path = path[j + 1][l];\n                 \
    \   min_prev = j + 1;\n                    min_next = l;\n                }\n\
    \                if (l > 0 && dp[j][l - 1] < min)\n                {\n       \
    \             min = dp[j][l - 1];\n                    min_path = path[j][l -\
    \ 1];\n                    min_prev = j;\n                    min_next = l - 1;\n\
    \                }\n                if (l < N - 1 && dp[j][l + 1] < min)\n   \
    \             {\n                    min = dp[j", "{\n    long N = grid.length;\n\
    \    long[][] dp = new long[N][N];\n    for (long i = 0; i < N; i++)\n       \
    \ for (long j = 0; j < N; j++)\n            dp[i][j] = grid[i][j];\n    for (long\
    \ i = 1; i < k; i++)\n    {\n        long[][] new_dp = new long[N][N];\n     \
    \   for (long j = 0; j < N; j++)\n            for (long l = 0; l < N; l++)\n \
    \           {\n                long min = dp[j][l];\n                if (j > 0)\n\
    \                    min = min(min, dp[j - 1][l]);\n                if (j < N\
    \ - 1)\n                    min = min(min, dp[j + 1][l]);\n                if\
    \ (l > 0)\n                    min = min(min, dp[j][l - 1]);\n               \
    \ if (l < N - 1)\n                    min = min(min, dp[j][l + 1]);\n        \
    \        new_dp[j][l] = min;\n            }\n        dp = new_dp;\n    }\n   \
    \ long[] res = new long[N * N];\n    long idx = 0;\n    for (long i = 0; i < N;\
    \ i++)\n        for (long j = 0; j < N; j++)\n            res[idx++] = dp[i][j];\n\
    \    return res;\n}", "{\n    int N = grid.length;\n    int[][] dp = new int[N][N];\n\
    \    for (int i = 0; i < N; i++)\n        for (int j = 0; j < N; j++)\n      \
    \      dp[i][j] = int.max;\n    dp[0][0] = 0;\n    for (int i = 0; i < N; i++)\n\
    \        for (int j = 0; j < N; j++)\n        {\n            if (i > 0)\n    \
    \            dp[i][j] = min(dp[i][j], dp[i - 1][j] + 1);\n            if (j >\
    \ 0)\n                dp[i][j] = min(dp[i][j], dp[i][j - 1] + 1);\n        }\n\
    \    int[][] dp2 = new int[N][N];\n    for (int i = 0; i < N; i++)\n        for\
    \ (int j = 0; j < N; j++)\n            dp2[i][j] = int.max;\n    dp2[N - 1][N\
    \ - 1] = 0;\n    for (int i = N - 1; i >= 0; i--)\n        for (int j = N - 1;\
    \ j >= 0; j--)\n        {\n            if (i < N - 1)\n                dp2[i][j]\
    \ = min(dp2[i][j], dp2[i + 1][j] + 1);\n            if (j < N - 1)\n         \
    \       dp2[i][j] = min(dp2[i][j], dp2[i][j + 1] + 1);\n        }\n    int[][]\
    \ dp3 = new int[N][N];\n    for (int i = 0; i < N; i++)\n        for (int j =\
    \ 0; j < N; j++)\n            dp3[i][j] = dp[i][j] + dp2[i][j];\n    int[][] dp4\
    \ = new int[N][N];\n    for (int i = 0; i < N; i++)\n        for (", "{\n    long\
    \ n = grid.length;\n    long[][] dp = new long[n][n];\n    foreach(i; 0 .. n)\n\
    \        foreach(j; 0 .. n)\n            dp[i][j] = long.max;\n    dp[0][0] =\
    \ grid[0][0];\n    foreach(i; 0 .. n)\n        foreach(j; 0 .. n)\n        {\n\
    \            if(i > 0)\n                dp[i][j] = min(dp[i][j], dp[i - 1][j]\
    \ + grid[i][j]);\n            if(j > 0)\n                dp[i][j] = min(dp[i][j],\
    \ dp[i][j - 1] + grid[i][j]);\n        }\n    long[] res = new long[k];\n    res[0]\
    \ = grid[0][0];\n    long i = 0, j = 0;\n    foreach(l; 1 .. k)\n    {\n     \
    \   if(i + 1 < n && dp[i + 1][j] + grid[i + 1][j] == dp[i][j])\n        {\n  \
    \          res[l] = grid[i + 1][j];\n            i++;\n        }\n        else\n\
    \        {\n            res[l] = grid[i][j + 1];\n            j++;\n        }\n\
    \    }\n    return res;\n}", "{\n    int N = grid.length;\n    int[][] dp = new\
    \ int[N][N];\n    int[][] prev = new int[N][N];\n    for (int i = 0; i < N; i++)\n\
    \        for (int j = 0; j < N; j++)\n            dp[i][j] = int.max;\n    dp[0][0]\
    \ = 0;\n    for (int i = 0; i < N; i++)\n        for (int j = 0; j < N; j++)\n\
    \        {\n            if (i > 0 && dp[i - 1][j] + 1 < dp[i][j])\n          \
    \  {\n                dp[i][j] = dp[i - 1][j] + 1;\n                prev[i][j]\
    \ = 1;\n            }\n            if (j > 0 && dp[i][j - 1] + 1 < dp[i][j])\n\
    \            {\n                dp[i][j] = dp[i][j - 1] + 1;\n               \
    \ prev[i][j] = 2;\n            }\n            if (i < N - 1 && dp[i + 1][j] +\
    \ 1 < dp[i][j])\n            {\n                dp[i][j] = dp[i + 1][j] + 1;\n\
    \                prev[i][j] = 3;\n            }\n            if (j < N - 1 &&\
    \ dp[i][j + 1] + 1 < dp[i][j])\n            {\n                dp[i][j] = dp[i][j\
    \ + 1] + 1;\n                prev[i][j] = 4;\n            }\n        }\n    int[]\
    \ path = new int[k];\n    int x = 0, y = 0;\n    for (int i = 0; i < k; i++)\n\
    \    {\n        path[i] = grid[x][y];\n        switch (prev[x][y])\n        {\n\
    \            case 1:\n                x--;\n                break;\n         \
    \   case 2:\n                y--;\n                break;\n            case 3:\n\
    \                x++;\n                break;\n            case", "{\n    long\
    \ n = grid.length;\n    long[][] dp = new long[n][n];\n    long[][] path = new\
    \ long[n][n];\n    for (long i = 0; i < n; i++)\n    {\n        for (long j =\
    \ 0; j < n; j++)\n        {\n            dp[i][j] = long.max;\n            path[i][j]\
    \ = -1;\n        }\n    }\n    dp[0][0] = grid[0][0];\n    for (long i = 0; i\
    \ < n; i++)\n    {\n        for (long j = 0; j < n; j++)\n        {\n        \
    \    if (i > 0)\n            {\n                if (dp[i - 1][j] + grid[i][j]\
    \ < dp[i][j])\n                {\n                    dp[i][j] = dp[i - 1][j]\
    \ + grid[i][j];\n                    path[i][j] = 0;\n                }\n    \
    \        }\n            if (j > 0)\n            {\n                if (dp[i][j\
    \ - 1] + grid[i][j] < dp[i][j])\n                {\n                    dp[i][j]\
    \ = dp[i][j - 1] + grid[i][j];\n                    path[i][j] = 1;\n        \
    \        }\n            }\n        }\n    }\n    long[] res = new long[k];\n \
    \   long i = n - 1;\n    long j = n - 1;\n    for (long l = k - 1; l >= 0; l--)\n\
    \    {\n        res[l] = grid[i][j];\n        if (path[i][j] == 0)\n        {\n\
    \            i--;\n        }\n        else\n        {\n            j--;\n    \
    \    }\n    }\n    return res;\n}", "{\n    int n = grid.length;\n    int[][]\
    \ dp = new int[n][n];\n    for (int i = 0; i < n; i++)\n        for (int j = 0;\
    \ j < n; j++)\n            dp[i][j] = int.max;\n    dp[0][0] = 0;\n    for (int\
    \ i = 0; i < n; i++)\n        for (int j = 0; j < n; j++)\n        {\n       \
    \     if (i > 0)\n                dp[i][j] = min(dp[i][j], dp[i - 1][j] + 1);\n\
    \            if (j > 0)\n                dp[i][j] = min(dp[i][j], dp[i][j - 1]\
    \ + 1);\n        }\n    int[][] dp2 = new int[n][n];\n    for (int i = 0; i <\
    \ n; i++)\n        for (int j = 0; j < n; j++)\n            dp2[i][j] = int.max;\n\
    \    dp2[n - 1][n - 1] = 0;\n    for (int i = n - 1; i >= 0; i--)\n        for\
    \ (int j = n - 1; j >= 0; j--)\n        {\n            if (i < n - 1)\n      \
    \          dp2[i][j] = min(dp2[i][j], dp2[i + 1][j] + 1);\n            if (j <\
    \ n - 1)\n                dp2[i][j] = min(dp2[i][j], dp2[i][j + 1] + 1);\n   \
    \     }\n    int[] res = new int[n * n];\n    for (int i = 0; i < n; i++)\n  \
    \      for (int j = 0; j < n; j++)\n            res[i * n + j] = dp[i][j] + dp2[i][j];\n\
    \    int[] idx = new int[n * n];\n    for (int i = 0; i < n * n; i++)\n      \
    \  idx[i] = i", "{\n    long N = grid.length;\n    long[][] dp = new long[N][N];\n\
    \    long[][] prev = new long[N][N];\n    long[][] next = new long[N][N];\n  \
    \  foreach(i; 0 .. N)\n    {\n        foreach(j; 0 .. N)\n        {\n        \
    \    dp[i][j] = long.max;\n            prev[i][j] = -1;\n            next[i][j]\
    \ = -1;\n        }\n    }\n    dp[0][0] = 0;\n    foreach(i; 0 .. N)\n    {\n\
    \        foreach(j; 0 .. N)\n        {\n            if(i > 0)\n            {\n\
    \                if(dp[i - 1][j] + grid[i][j] < dp[i][j])\n                {\n\
    \                    dp[i][j] = dp[i - 1][j] + grid[i][j];\n                 \
    \   prev[i][j] = i - 1;\n                    next[i][j] = j;\n               \
    \ }\n            }\n            if(j > 0)\n            {\n                if(dp[i][j\
    \ - 1] + grid[i][j] < dp[i][j])\n                {\n                    dp[i][j]\
    \ = dp[i][j - 1] + grid[i][j];\n                    prev[i][j] = i;\n        \
    \            next[i][j] = j - 1;\n                }\n            }\n        }\n\
    \    }\n    long[] res = new long[k];\n    long cur = N - 1;\n    long cur2 =\
    \ N - 1;\n    foreach(i; 0 .. k)\n    {\n        res[i] = grid[cur][cur2];\n \
    \       long tmp = cur;\n        cur = prev[cur][cur2];\n        cur2 = next[tmp][cur2];\n\
    \    }\n    return res;\n}", "{\n    long N = grid.length;\n    long[][] dp =\
    \ new long[N][N];\n    long[][] path = new long[N][N];\n    long[][] path_len\
    \ = new long[N][N];\n    long[][] path_idx = new long[N][N];\n    long[][] path_val\
    \ = new long[N][N];\n    long[][] path_val_idx = new long[N][N];\n    long[][]\
    \ path_val_idx_len = new long[N][N];\n    long[][] path_val_idx_len_idx = new\
    \ long[N][N];\n    long[][] path_val_idx_len_idx_val = new long[N][N];\n    long[][]\
    \ path_val_idx_len_idx_val_idx = new long[N][N];\n    long[][] path_val_idx_len_idx_val_idx_val\
    \ = new long[N][N];\n    long[][] path_val_idx_len_idx_val_idx_val_idx = new long[N][N];\n\
    \    long[][] path_val_idx_len_idx_val_idx_val_idx_val = new long[N][N];\n   \
    \ long[][] path_val_idx_len_idx_val_idx_val_idx_val_idx = new long[N][N];\n  \
    \  long[][] path_val_idx_len_idx_val_idx_val_idx_val_idx_val = new long[N][N];\n\
    \    long[][] path_val_idx_len_idx_val_idx_val_idx_val_idx_val_idx = new long[N][N];\n\
    \    long[][] path_val_idx_len_idx_val_idx_val_idx_val_idx_val_idx_val = new long[N][N];\n\
    \    long[][] path_val_idx_len_id", "{\n    int N = grid.length;\n    long[] res\
    \ = new long[k];\n    int[][] dirs = new int[][]{{0, 1}, {0, -1}, {1, 0}, {-1,\
    \ 0}};\n    int[][] visited = new int[N][N];\n    int[][] dist = new int[N][N];\n\
    \    for (int i = 0; i < N; i++)\n        for (int j = 0; j < N; j++)\n      \
    \      dist[i][j] = int.max;\n    dist[0][0] = 0;\n    PriorityQueue!(int[]) pq\
    \ = new PriorityQueue!(int[])((a, b) => dist[a[0]][a[1]] < dist[b[0]][b[1]]);\n\
    \    pq.put(new int[]{0, 0});\n    while (!pq.isEmpty())\n    {\n        int[]\
    \ cur = pq.poll();\n        int x = cur[0];\n        int y = cur[1];\n       \
    \ visited[x][y] = 1;\n        for (int[] dir : dirs)\n        {\n            int\
    \ nx = x + dir[0];\n            int ny = y + dir[1];\n            if (nx < 0 ||\
    \ nx >= N || ny < 0 || ny >= N)\n                continue;\n            if (visited[nx][ny]\
    \ == 1)\n                continue;\n            if (dist[nx][ny] > dist[x][y]\
    \ + 1)\n            {\n                dist[nx][ny] = dist[x][y] + 1;\n      \
    \          pq.put(new int[]{nx, ny});\n            }\n        }\n    }\n    int[]\
    \ cur = new int[]{N - 1, N - 1};\n    for (int i = k - 1; i >= 0; i--)\n    {\n\
    \        res[i] = grid[cur[0]][cur[1]];\n        for (int[] dir : dirs)\n    \
    \    {\n            int nx = cur[0] + dir[0];\n            int ny = cur[1]", "{\n\
    \    int n = grid.length;\n    int[][] dp = new int[n][n];\n    for (int i = 0;\
    \ i < n; i++) \n    {\n        for (int j = 0; j < n; j++) \n        {\n     \
    \       dp[i][j] = int.max;\n        }\n    }\n    dp[0][0] = 0;\n    for (int\
    \ i = 0; i < n; i++) \n    {\n        for (int j = 0; j < n; j++) \n        {\n\
    \            if (i > 0) \n            {\n                dp[i][j] = min(dp[i][j],\
    \ dp[i - 1][j] + 1);\n            }\n            if (j > 0) \n            {\n\
    \                dp[i][j] = min(dp[i][j], dp[i][j - 1] + 1);\n            }\n\
    \        }\n    }\n    for (int i = n - 1; i >= 0; i--) \n    {\n        for (int\
    \ j = n - 1; j >= 0; j--) \n        {\n            if (i < n - 1) \n         \
    \   {\n                dp[i][j] = min(dp[i][j], dp[i + 1][j] + 1);\n         \
    \   }\n            if (j < n - 1) \n            {\n                dp[i][j] =\
    \ min(dp[i][j], dp[i][j + 1] + 1);\n            }\n        }\n    }\n    int[]\
    \ dx = [0, 1, 0, -1];\n    int[] dy = [1, 0, -1, 0];\n    int[] d = [0, 1, 2,\
    \ 3];\n    long[] ans = new long[k];\n    int x = 0;\n    int y = 0;\n    for\
    \ (int i = 0; i < k; i++) \n    {\n        ans[i] = grid[x][y];\n        int mn\
    \ = int.max;\n        int idx = -1;\n        for (int j = 0; j < 4; j", "{\n \
    \   int N = grid.length;\n    long[][] dp = new long[N][N];\n    long[][] prev\
    \ = new long[N][N];\n    for (int i = 0; i < N; i++)\n        for (int j = 0;\
    \ j < N; j++)\n            dp[i][j] = long.max;\n    dp[0][0] = grid[0][0];\n\
    \    for (int i = 0; i < N; i++)\n        for (int j = 0; j < N; j++)\n      \
    \  {\n            if (i > 0)\n            {\n                if (dp[i - 1][j]\
    \ + grid[i][j] < dp[i][j])\n                {\n                    dp[i][j] =\
    \ dp[i - 1][j] + grid[i][j];\n                    prev[i][j] = 1;\n          \
    \      }\n                else if (dp[i - 1][j] + grid[i][j] == dp[i][j])\n  \
    \              {\n                    if (grid[i - 1][j] < grid[i][j])\n     \
    \               {\n                        dp[i][j] = dp[i - 1][j] + grid[i][j];\n\
    \                        prev[i][j] = 1;\n                    }\n            \
    \    }\n            }\n            if (j > 0)\n            {\n               \
    \ if (dp[i][j - 1] + grid[i][j] < dp[i][j])\n                {\n             \
    \       dp[i][j] = dp[i][j - 1] + grid[i][j];\n                    prev[i][j]\
    \ = 2;\n                }\n                else if (dp[i][j - 1] + grid[i][j]\
    \ == dp[i][j])\n                {\n                    if (grid[i][j - 1] < grid[i][j])\n\
    \                    {\n                        dp[i][j] = dp[i][j - 1] + grid[i][j];\n\
    \                        prev[i][j] = 2;\n                    }\n            \
    \    }\n            }\n        }\n    long[] res = new long[k];\n    int", "{\n\
    \    long N = grid.length;\n    long[][] dp = new long[N][N];\n    long[][] prev\
    \ = new long[N][N];\n    long[][] next = new long[N][N];\n    for (long i = 0;\
    \ i < N; i++)\n    {\n        for (long j = 0; j < N; j++)\n        {\n      \
    \      dp[i][j] = long.max;\n            prev[i][j] = -1;\n            next[i][j]\
    \ = -1;\n        }\n    }\n    dp[0][0] = 0;\n    for (long i = 0; i < N; i++)\n\
    \    {\n        for (long j = 0; j < N; j++)\n        {\n            if (i > 0)\n\
    \            {\n                if (dp[i - 1][j] + grid[i][j] < dp[i][j])\n  \
    \              {\n                    dp[i][j] = dp[i - 1][j] + grid[i][j];\n\
    \                    prev[i][j] = i - 1;\n                    next[i][j] = j;\n\
    \                }\n            }\n            if (j > 0)\n            {\n   \
    \             if (dp[i][j - 1] + grid[i][j] < dp[i][j])\n                {\n \
    \                   dp[i][j] = dp[i][j - 1] + grid[i][j];\n                  \
    \  prev[i][j] = i;\n                    next[i][j] = j - 1;\n                }\n\
    \            }\n        }\n    }\n    long[] res = new long[k];\n    long i =\
    \ N - 1;\n    long j = N - 1;\n    for (long l = k - 1; l >= 0; l--)\n    {\n\
    \        res[l] = grid[i][j];\n        long tmp = i;\n        i = prev[i][j];\n\
    \        j = next[tmp][j];\n    }\n    return res;\n}", "{\n    int N = grid.length;\n\
    \    int[][] dp = new int[N][N];\n    int[][] path = new int[N][N];\n    for (int\
    \ i = 0; i < N; i++)\n    {\n        for (int j = 0; j < N; j++)\n        {\n\
    \            dp[i][j] = int.max;\n            path[i][j] = -1;\n        }\n  \
    \  }\n    dp[0][0] = 0;\n    for (int i = 0; i < N; i++)\n    {\n        for (int\
    \ j = 0; j < N; j++)\n        {\n            if (i > 0 && dp[i - 1][j] + 1 < dp[i][j])\n\
    \            {\n                dp[i][j] = dp[i - 1][j] + 1;\n               \
    \ path[i][j] = 0;\n            }\n            if (j > 0 && dp[i][j - 1] + 1 <\
    \ dp[i][j])\n            {\n                dp[i][j] = dp[i][j - 1] + 1;\n   \
    \             path[i][j] = 1;\n            }\n            if (i < N - 1 && dp[i\
    \ + 1][j] + 1 < dp[i][j])\n            {\n                dp[i][j] = dp[i + 1][j]\
    \ + 1;\n                path[i][j] = 2;\n            }\n            if (j < N\
    \ - 1 && dp[i][j + 1] + 1 < dp[i][j])\n            {\n                dp[i][j]\
    \ = dp[i][j + 1] + 1;\n                path[i][j] = 3;\n            }\n      \
    \  }\n    }\n    long[] res = new long[k];\n    int x = 0;\n    int y = 0;\n \
    \   for (int i = 0; i < k; i++)\n    {\n        res[i] = grid[x][y];\n       \
    \ switch (path[x][y])\n        {\n            case 0:\n                x--;\n",
  "{\n    int n = grid.length;\n    if (n == 0)\n        return new long[0];\n   \
    \ int m = grid[0].length;\n    if (m == 0)\n        return new long[0];\n    if\
    \ (k == 0)\n        return new long[0];\n    if (k > n * m)\n        return new\
    \ long[0];\n    int[][] dp = new int[n][m];\n    for (int i = 0; i < n; i++)\n\
    \        for (int j = 0; j < m; j++)\n            dp[i][j] = int.max;\n    dp[0][0]\
    \ = grid[0][0];\n    for (int i = 0; i < n; i++)\n        for (int j = 0; j <\
    \ m; j++)\n        {\n            if (i > 0)\n                dp[i][j] = min(dp[i][j],\
    \ dp[i - 1][j] + grid[i][j]);\n            if (j > 0)\n                dp[i][j]\
    \ = min(dp[i][j], dp[i][j - 1] + grid[i][j]);\n        }\n    int[][] dp2 = new\
    \ int[n][m];\n    for (int i = 0; i < n; i++)\n        for (int j = 0; j < m;\
    \ j++)\n            dp2[i][j] = int.max;\n    dp2[n - 1][m - 1] = grid[n - 1][m\
    \ - 1];\n    for (int i = n - 1; i >= 0; i--)\n        for (int j = m - 1; j >=\
    \ 0; j--)\n        {\n            if (i < n - 1)\n                dp2[i][j] =\
    \ min(dp2[i][j], dp2[i + 1][j] + grid[i][j]);\n            if (j < m - 1)\n  \
    \              dp2[i][j] = min(dp2[i][j], dp2[i][j + 1] + grid[i][j]);\n     \
    \   }\n    int[][", "{\n    long n = grid.length;\n    long[][] dp = new long[n][n];\n\
    \    long[][] prev = new long[n][n];\n    foreach(i; 0 .. n)\n        foreach(j;\
    \ 0 .. n)\n        {\n            dp[i][j] = long.max;\n            prev[i][j]\
    \ = -1;\n        }\n    dp[0][0] = grid[0][0];\n    foreach(i; 0 .. n)\n     \
    \   foreach(j; 0 .. n)\n        {\n            if(i > 0 && dp[i - 1][j] + grid[i][j]\
    \ < dp[i][j])\n            {\n                dp[i][j] = dp[i - 1][j] + grid[i][j];\n\
    \                prev[i][j] = 0;\n            }\n            if(j > 0 && dp[i][j\
    \ - 1] + grid[i][j] < dp[i][j])\n            {\n                dp[i][j] = dp[i][j\
    \ - 1] + grid[i][j];\n                prev[i][j] = 1;\n            }\n       \
    \ }\n    long[] res = new long[k];\n    long i = n - 1;\n    long j = n - 1;\n\
    \    foreach(k; k .. 0)\n    {\n        res[k] = grid[i][j];\n        if(prev[i][j]\
    \ == 0)\n            i--;\n        else\n            j--;\n    }\n    return res;\n\
    }", "{\n    int n = grid.length;\n    int[][] dp = new int[n][n];\n    for (int\
    \ i = 0; i < n; i++)\n        for (int j = 0; j < n; j++)\n            dp[i][j]\
    \ = int.max;\n    dp[0][0] = 0;\n    for (int i = 0; i < n; i++)\n        for\
    \ (int j = 0; j < n; j++)\n        {\n            if (i > 0)\n               \
    \ dp[i][j] = min(dp[i][j], dp[i - 1][j] + 1);\n            if (j > 0)\n      \
    \          dp[i][j] = min(dp[i][j], dp[i][j - 1] + 1);\n        }\n    int[][]\
    \ dp2 = new int[n][n];\n    for (int i = 0; i < n; i++)\n        for (int j =\
    \ 0; j < n; j++)\n            dp2[i][j] = int.max;\n    dp2[n - 1][n - 1] = 0;\n\
    \    for (int i = n - 1; i >= 0; i--)\n        for (int j = n - 1; j >= 0; j--)\n\
    \        {\n            if (i < n - 1)\n                dp2[i][j] = min(dp2[i][j],\
    \ dp2[i + 1][j] + 1);\n            if (j < n - 1)\n                dp2[i][j] =\
    \ min(dp2[i][j], dp2[i][j + 1] + 1);\n        }\n    int[][] dp3 = new int[n][n];\n\
    \    for (int i = 0; i < n; i++)\n        for (int j = 0; j < n; j++)\n      \
    \      dp3[i][j] = dp[i][j] + dp2[i][j];\n    int[][] dp4 = new int[n][n];\n \
    \   for (int i = 0; i < n; i++)\n        for (", "{\n    long n = grid.length;\n\
    \    long[][] dp = new long[n][n];\n    long[][] prev = new long[n][n];\n    long[][]\
    \ next = new long[n][n];\n    foreach(i; 0 .. n)\n    {\n        foreach(j; 0\
    \ .. n)\n        {\n            dp[i][j] = long.max;\n            prev[i][j] =\
    \ long.max;\n            next[i][j] = long.max;\n        }\n    }\n    dp[0][0]\
    \ = grid[0][0];\n    prev[0][0] = -1;\n    next[0][0] = -1;\n    foreach(i; 0\
    \ .. n)\n    {\n        foreach(j; 0 .. n)\n        {\n            if(i > 0)\n\
    \            {\n                if(dp[i][j] + grid[i - 1][j] < dp[i - 1][j])\n\
    \                {\n                    dp[i - 1][j] = dp[i][j] + grid[i - 1][j];\n\
    \                    prev[i - 1][j] = i * n + j;\n                    next[i -\
    \ 1][j] = -1;\n                }\n                else if(dp[i][j] + grid[i -\
    \ 1][j] == dp[i - 1][j])\n                {\n                    if(prev[i - 1][j]\
    \ == long.max)\n                    {\n                        prev[i - 1][j]\
    \ = i * n + j;\n                        next[i - 1][j] = -1;\n               \
    \     }\n                    else\n                    {\n                   \
    \     long cur = prev[i - 1][j];\n                        while(next[cur / n][cur\
    \ % n] != -1)\n                        {\n                            cur = next[cur\
    \ / n][cur % n];\n                        }\n                        next[cur\
    \ / n][cur % n] = i * n + j;\n                    }\n                }\n     \
    \       }\n            if(j > 0)\n            {\n                if(dp[i][j] +\
    \ grid[i][j - 1] < dp[i", "{\n    int N = grid.length;\n    int[][] dp = new int[N][N];\n\
    \    for (int i = 0; i < N; i++)\n        for (int j = 0; j < N; j++)\n      \
    \      dp[i][j] = int.max;\n    dp[0][0] = 0;\n    for (int i = 0; i < N; i++)\n\
    \        for (int j = 0; j < N; j++)\n        {\n            if (i > 0)\n    \
    \            dp[i][j] = min(dp[i][j], dp[i - 1][j] + 1);\n            if (j >\
    \ 0)\n                dp[i][j] = min(dp[i][j], dp[i][j - 1] + 1);\n        }\n\
    \    int[] dx = [1, 0, -1, 0];\n    int[] dy = [0, 1, 0, -1];\n    int[] res =\
    \ new int[k];\n    int x = 0, y = 0;\n    for (int i = 0; i < k; i++)\n    {\n\
    \        res[i] = grid[x][y];\n        int min_dp = int.max;\n        int min_idx\
    \ = -1;\n        for (int j = 0; j < 4; j++)\n        {\n            int nx =\
    \ x + dx[j];\n            int ny = y + dy[j];\n            if (nx < 0 || nx >=\
    \ N || ny < 0 || ny >= N)\n                continue;\n            if (dp[nx][ny]\
    \ < min_dp)\n            {\n                min_dp = dp[nx][ny];\n           \
    \     min_idx = j;\n            }\n        }\n        x += dx[min_idx];\n    \
    \    y += dy[min_idx];\n        dp[x][y]++;\n    }\n    return res;\n}", "{\n\
    \    import std.algorithm.comparison : min;\n    import std.algorithm.iteration\
    \ : map;\n    import std.array : array;\n    import std.conv : to;\n    import\
    \ std.range : iota;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n\
    \    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import\
    \ std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons\
    \ : tuple;\n    import std.typecons : tuple;\n    import std.", "{\n    auto N\
    \ = grid.length;\n    auto M = grid[0].length;\n    auto dp = new long[N][M][k\
    \ + 1];\n    foreach (i; 0 .. N)\n        foreach (j; 0 .. M)\n            foreach\
    \ (l; 0 .. k + 1)\n                dp[i][j][l] = long.max;\n    dp[0][0][1] =\
    \ grid[0][0];\n    foreach (i; 0 .. N)\n        foreach (j; 0 .. M)\n        \
    \    foreach (l; 1 .. k + 1)\n            {\n                if (i > 0)\n    \
    \                dp[i][j][l] = min(dp[i][j][l], dp[i - 1][j][l - 1] + grid[i][j]);\n\
    \                if (j > 0)\n                    dp[i][j][l] = min(dp[i][j][l],\
    \ dp[i][j - 1][l - 1] + grid[i][j]);\n                if (i < N - 1)\n       \
    \             dp[i][j][l] = min(dp[i][j][l], dp[i + 1][j][l - 1] + grid[i][j]);\n\
    \                if (j < M - 1)\n                    dp[i][j][l] = min(dp[i][j][l],\
    \ dp[i][j + 1][l - 1] + grid[i][j]);\n            }\n    auto res = new long[k];\n\
    \    res[0] = grid[0][0];\n    auto i = 0;\n    auto j = 0;\n    foreach (l; 1\
    \ .. k)\n    {\n        if (i > 0 && dp[i][j][l] == dp[i - 1][j][l - 1] + grid[i][j])\n\
    \        {\n            res[l] = grid[i - 1][j];\n            i--;\n        }\n\
    \        else if (j > 0 && dp[i][j][l] == dp[i][j - 1][l - 1] + grid[i][j])\n\
    \        {\n           ", "{\n    // Write your code here\n    int n = grid.length;\n\
    \    int[][] dp = new int[n][n];\n    for (int i = 0; i < n; i++)\n        for\
    \ (int j = 0; j < n; j++)\n            dp[i][j] = int.max;\n    dp[0][0] = 0;\n\
    \    for (int i = 0; i < n; i++)\n        for (int j = 0; j < n; j++)\n      \
    \  {\n            if (i > 0)\n                dp[i][j] = min(dp[i][j], dp[i -\
    \ 1][j] + 1);\n            if (j > 0)\n                dp[i][j] = min(dp[i][j],\
    \ dp[i][j - 1] + 1);\n        }\n    long[] res = new long[k];\n    int i = 0,\
    \ j = 0;\n    for (int l = 0; l < k; l++)\n    {\n        res[l] = grid[i][j];\n\
    \        if (i < n - 1 && dp[i + 1][j] == dp[i][j] + 1)\n            i++;\n  \
    \      else\n            j++;\n    }\n    return res;\n}", "{\n    long n = grid.length;\n\
    \    long[][] dp = new long[n][n];\n    foreach(i; 0 .. n)\n        foreach(j;\
    \ 0 .. n)\n            dp[i][j] = long.max;\n    dp[0][0] = grid[0][0];\n    foreach(i;\
    \ 0 .. n)\n        foreach(j; 0 .. n)\n        {\n            if(i > 0)\n    \
    \            dp[i][j] = min(dp[i][j], dp[i - 1][j] + grid[i][j]);\n          \
    \  if(j > 0)\n                dp[i][j] = min(dp[i][j], dp[i][j - 1] + grid[i][j]);\n\
    \        }\n    long[] res = new long[k];\n    res[0] = grid[0][0];\n    long\
    \ cur = dp[0][0];\n    long i = 0;\n    long j = 0;\n    foreach(idx; 1 .. k)\n\
    \    {\n        if(i < n - 1 && cur + grid[i + 1][j] == dp[i + 1][j])\n      \
    \  {\n            i++;\n            cur += grid[i][j];\n        }\n        else\n\
    \        {\n            j++;\n            cur += grid[i][j];\n        }\n    \
    \    res[idx] = grid[i][j];\n    }\n    return res;\n}", "{\n    int N = grid.length;\n\
    \    int[][] dp = new int[N][N];\n    int[][] prev = new int[N][N];\n    for (int\
    \ i = 0; i < N; i++)\n        for (int j = 0; j < N; j++)\n            dp[i][j]\
    \ = int.max;\n    dp[0][0] = 0;\n    prev[0][0] = -1;\n    for (int i = 0; i <\
    \ N; i++)\n        for (int j = 0; j < N; j++)\n        {\n            if (i >\
    \ 0 && dp[i - 1][j] + 1 < dp[i][j])\n            {\n                dp[i][j] =\
    \ dp[i - 1][j] + 1;\n                prev[i][j] = 0;\n            }\n        \
    \    if (j > 0 && dp[i][j - 1] + 1 < dp[i][j])\n            {\n              \
    \  dp[i][j] = dp[i][j - 1] + 1;\n                prev[i][j] = 1;\n           \
    \ }\n            if (i < N - 1 && dp[i + 1][j] + 1 < dp[i][j])\n            {\n\
    \                dp[i][j] = dp[i + 1][j] + 1;\n                prev[i][j] = 2;\n\
    \            }\n            if (j < N - 1 && dp[i][j + 1] + 1 < dp[i][j])\n  \
    \          {\n                dp[i][j] = dp[i][j + 1] + 1;\n                prev[i][j]\
    \ = 3;\n            }\n        }\n    int[] path = new int[k];\n    int x = N\
    \ - 1;\n    int y = N - 1;\n    for (int i = k - 1; i >= 0; i--)\n    {\n    \
    \    path[i] = grid[x][y];\n        switch (prev[x][y])\n        {\n         \
    \   case 0:\n                x++;\n                break;\n            case 1:\n\
    \                y++;", "{\n    long n = grid.length;\n    long[][] dp = new long[n][n];\n\
    \    long[][] prev = new long[n][n];\n    for (long i = 0; i < n; i++)\n    {\n\
    \        for (long j = 0; j < n; j++)\n        {\n            dp[i][j] = -1;\n\
    \            prev[i][j] = -1;\n        }\n    }\n    dp[0][0] = grid[0][0];\n\
    \    for (long i = 0; i < n; i++)\n    {\n        for (long j = 0; j < n; j++)\n\
    \        {\n            if (i > 0 && dp[i - 1][j] != -1)\n            {\n    \
    \            if (dp[i][j] == -1 || dp[i][j] > dp[i - 1][j] + grid[i][j])\n   \
    \             {\n                    dp[i][j] = dp[i - 1][j] + grid[i][j];\n \
    \                   prev[i][j] = i * n + j - n;\n                }\n         \
    \   }\n            if (j > 0 && dp[i][j - 1] != -1)\n            {\n         \
    \       if (dp[i][j] == -1 || dp[i][j] > dp[i][j - 1] + grid[i][j])\n        \
    \        {\n                    dp[i][j] = dp[i][j - 1] + grid[i][j];\n      \
    \              prev[i][j] = i * n + j - 1;\n                }\n            }\n\
    \        }\n    }\n    long[] res = new long[k];\n    long cur = n * n - 1;\n\
    \    for (long i = k - 1; i >= 0; i--)\n    {\n        res[i] = grid[cur / n][cur\
    \ % n];\n        cur = prev[cur / n][cur % n];\n    }\n    return res;\n}", "{\n\
    \    long n = grid.length;\n    long[][] dp = new long[n][n];\n    for (long i\
    \ = 0; i < n; i++)\n        for (long j = 0; j < n; j++)\n            dp[i][j]\
    \ = grid[i][j];\n    for (long i = 1; i < k; i++)\n    {\n        long[][] dp2\
    \ = new long[n][n];\n        for (long j = 0; j < n; j++)\n            for (long\
    \ l = 0; l < n; l++)\n            {\n                long[] arr = new long[4];\n\
    \                arr[0] = j > 0 ? dp[j - 1][l] : long.max;\n                arr[1]\
    \ = j < n - 1 ? dp[j + 1][l] : long.max;\n                arr[2] = l > 0 ? dp[j][l\
    \ - 1] : long.max;\n                arr[3] = l < n - 1 ? dp[j][l + 1] : long.max;\n\
    \                dp2[j][l] = min(arr);\n            }\n        dp = dp2;\n   \
    \ }\n    long[] res = new long[n];\n    for (long i = 0; i < n; i++)\n       \
    \ res[i] = dp[i][i];\n    return res;\n}", "{\n    // Write your code here\n \
    \   int n = grid.length;\n    int[][] dp = new int[n][n];\n    for (int i = 0;\
    \ i < n; i++)\n        for (int j = 0; j < n; j++)\n            dp[i][j] = int.max;\n\
    \    dp[0][0] = 0;\n    for (int i = 0; i < n; i++)\n        for (int j = 0; j\
    \ < n; j++)\n        {\n            if (i > 0)\n                dp[i][j] = min(dp[i][j],\
    \ dp[i - 1][j] + 1);\n            if (j > 0)\n                dp[i][j] = min(dp[i][j],\
    \ dp[i][j - 1] + 1);\n        }\n    int[][] dp2 = new int[n][n];\n    for (int\
    \ i = 0; i < n; i++)\n        for (int j = 0; j < n; j++)\n            dp2[i][j]\
    \ = int.max;\n    dp2[n - 1][n - 1] = 0;\n    for (int i = n - 1; i >= 0; i--)\n\
    \        for (int j = n - 1; j >= 0; j--)\n        {\n            if (i < n -\
    \ 1)\n                dp2[i][j] = min(dp2[i][j], dp2[i + 1][j] + 1);\n       \
    \     if (j < n - 1)\n                dp2[i][j] = min(dp2[i][j], dp2[i][j + 1]\
    \ + 1);\n        }\n    int[][] dp3 = new int[n][n];\n    for (int i = 0; i <\
    \ n; i++)\n        for (int j = 0; j < n; j++)\n            dp3[i][j] = dp[i][j]\
    \ + dp2[i][j];\n    int[][] dp4 = new int[n][n];\n    for (int i = 0; i < n",
  "{\n    int n = grid.length;\n    int[][] dp = new int[n][n];\n    int[][] path\
    \ = new int[n][n];\n    for (int i = 0; i < n; i++)\n    {\n        for (int j\
    \ = 0; j < n; j++)\n        {\n            dp[i][j] = int.max;\n            path[i][j]\
    \ = -1;\n        }\n    }\n    dp[0][0] = 0;\n    for (int i = 0; i < n; i++)\n\
    \    {\n        for (int j = 0; j < n; j++)\n        {\n            if (i > 0\
    \ && dp[i][j] + grid[i - 1][j] < dp[i - 1][j])\n            {\n              \
    \  dp[i - 1][j] = dp[i][j] + grid[i - 1][j];\n                path[i - 1][j] =\
    \ i * n + j;\n            }\n            if (j > 0 && dp[i][j] + grid[i][j - 1]\
    \ < dp[i][j - 1])\n            {\n                dp[i][j - 1] = dp[i][j] + grid[i][j\
    \ - 1];\n                path[i][j - 1] = i * n + j;\n            }\n        \
    \    if (i < n - 1 && dp[i][j] + grid[i + 1][j] < dp[i + 1][j])\n            {\n\
    \                dp[i + 1][j] = dp[i][j] + grid[i + 1][j];\n                path[i\
    \ + 1][j] = i * n + j;\n            }\n            if (j < n - 1 && dp[i][j] +\
    \ grid[i][j + 1] < dp[i][j + 1])\n            {\n                dp[i][j + 1]\
    \ = dp[i][j] + grid[i][j + 1];\n                path[i][j + 1] = i * n + j;\n\
    \            }\n        }\n    }\n    int[]", "{\n    int n = grid.length;\n \
    \   int[][] dp = new int[n][n];\n    for (int i = 0; i < n; i++)\n        for\
    \ (int j = 0; j < n; j++)\n            dp[i][j] = int.max;\n    dp[0][0] = 0;\n\
    \    for (int i = 0; i < n; i++)\n        for (int j = 0; j < n; j++)\n      \
    \  {\n            if (i > 0)\n                dp[i][j] = min(dp[i][j], dp[i -\
    \ 1][j] + 1);\n            if (j > 0)\n                dp[i][j] = min(dp[i][j],\
    \ dp[i][j - 1] + 1);\n        }\n    int[][] dp2 = new int[n][n];\n    for (int\
    \ i = 0; i < n; i++)\n        for (int j = 0; j < n; j++)\n            dp2[i][j]\
    \ = int.max;\n    dp2[n - 1][n - 1] = 0;\n    for (int i = n - 1; i >= 0; i--)\n\
    \        for (int j = n - 1; j >= 0; j--)\n        {\n            if (i < n -\
    \ 1)\n                dp2[i][j] = min(dp2[i][j], dp2[i + 1][j] + 1);\n       \
    \     if (j < n - 1)\n                dp2[i][j] = min(dp2[i][j], dp2[i][j + 1]\
    \ + 1);\n        }\n    int[][] dp3 = new int[n][n];\n    for (int i = 0; i <\
    \ n; i++)\n        for (int j = 0; j < n; j++)\n            dp3[i][j] = dp[i][j]\
    \ + dp2[i][j];\n    int[][] dp4 = new int[n][n];\n    for (int i = 0; i < n; i++)\n\
    \        for (", "{\n    long N = grid.length;\n    long[][] dp = new long[N][N];\n\
    \    foreach(i; 0 .. N)\n        foreach(j; 0 .. N)\n            dp[i][j] = long.max;\n\
    \    dp[0][0] = grid[0][0];\n    foreach(i; 0 .. N)\n        foreach(j; 0 .. N)\n\
    \        {\n            if(i > 0)\n                dp[i][j] = min(dp[i][j], dp[i\
    \ - 1][j] + grid[i][j]);\n            if(j > 0)\n                dp[i][j] = min(dp[i][j],\
    \ dp[i][j - 1] + grid[i][j]);\n        }\n    long[] res = new long[k];\n    long\
    \ cur = dp[N - 1][N - 1];\n    long i = N - 1;\n    long j = N - 1;\n    foreach(idx;\
    \ k .. 0)\n    {\n        res[idx] = grid[i][j];\n        if(i > 0 && dp[i - 1][j]\
    \ + grid[i][j] == cur)\n        {\n            cur -= grid[i][j];\n          \
    \  i--;\n        }\n        else if(j > 0 && dp[i][j - 1] + grid[i][j] == cur)\n\
    \        {\n            cur -= grid[i][j];\n            j--;\n        }\n    }\n\
    \    return res;\n}", "{\n    long n = grid.length;\n    long[][] dp = new long[n][n];\n\
    \    foreach(i; 0 .. n)\n        foreach(j; 0 .. n)\n            dp[i][j] = long.max;\n\
    \    dp[0][0] = grid[0][0];\n    foreach(i; 0 .. n)\n        foreach(j; 0 .. n)\n\
    \        {\n            if(i > 0)\n                dp[i][j] = min(dp[i][j], dp[i\
    \ - 1][j] + grid[i][j]);\n            if(j > 0)\n                dp[i][j] = min(dp[i][j],\
    \ dp[i][j - 1] + grid[i][j]);\n        }\n    long[] res = new long[k];\n    long\
    \ cur = dp[n - 1][n - 1];\n    long i = n - 1;\n    long j = n - 1;\n    foreach(x;\
    \ k .. 0)\n    {\n        res[x] = grid[i][j];\n        if(i > 0 && dp[i - 1][j]\
    \ + grid[i][j] == cur)\n        {\n            cur -= grid[i][j];\n          \
    \  i--;\n        }\n        else if(j > 0 && dp[i][j - 1] + grid[i][j] == cur)\n\
    \        {\n            cur -= grid[i][j];\n            j--;\n        }\n    }\n\
    \    return res;\n}", "{\n    long n = grid.length;\n    long[][] dp = new long[n][n];\n\
    \    foreach(i; 0 .. n)\n        foreach(j; 0 .. n)\n            dp[i][j] = long.max;\n\
    \    dp[0][0] = grid[0][0];\n    foreach(i; 0 .. n)\n        foreach(j; 0 .. n)\n\
    \        {\n            if(i > 0)\n                dp[i][j] = min(dp[i][j], dp[i\
    \ - 1][j] + grid[i][j]);\n            if(j > 0)\n                dp[i][j] = min(dp[i][j],\
    \ dp[i][j - 1] + grid[i][j]);\n        }\n    long[] res = new long[k];\n    long\
    \ i = n - 1;\n    long j = n - 1;\n    foreach(idx; 0 .. k)\n    {\n        res[idx]\
    \ = grid[i][j];\n        if(i > 0 && dp[i - 1][j] + grid[i][j] == dp[i][j])\n\
    \            i--;\n        else\n            j--;\n    }\n    return res;\n}",
  "{\n    int n = grid.length;\n    int[][] dp = new int[n][n];\n    foreach(int i;\
    \ 0 .. n)\n        foreach(int j; 0 .. n)\n            dp[i][j] = int.max;\n \
    \   dp[0][0] = 0;\n    foreach(int i; 0 .. n)\n        foreach(int j; 0 .. n)\n\
    \        {\n            if(i > 0)\n                dp[i][j] = min(dp[i][j], dp[i\
    \ - 1][j] + 1);\n            if(j > 0)\n                dp[i][j] = min(dp[i][j],\
    \ dp[i][j - 1] + 1);\n        }\n    int[][] dp2 = new int[n][n];\n    foreach(int\
    \ i; 0 .. n)\n        foreach(int j; 0 .. n)\n            dp2[i][j] = int.max;\n\
    \    dp2[n - 1][n - 1] = 0;\n    foreach(int i; n - 1 .. 0)\n        foreach(int\
    \ j; n - 1 .. 0)\n        {\n            if(i < n - 1)\n                dp2[i][j]\
    \ = min(dp2[i][j], dp2[i + 1][j] + 1);\n            if(j < n - 1)\n          \
    \      dp2[i][j] = min(dp2[i][j], dp2[i][j + 1] + 1);\n        }\n    int[][]\
    \ dp3 = new int[n][n];\n    foreach(int i; 0 .. n)\n        foreach(int j; 0 ..\
    \ n)\n            dp3[i][j] = dp[i][j] + dp2[i][j];\n    int[][] dp4 = new int[n][n];\n\
    \    foreach(int i; 0 .. n)\n        foreach(int j; 0 .. n)\n            dp4[i][j]\
    \ = int.max;\n    dp4[0][0] = 0", "{\n    int n = grid.length;\n    int[][] dp\
    \ = new int[n][n];\n    for (int i = 0; i < n; i++)\n        for (int j = 0; j\
    \ < n; j++)\n            dp[i][j] = int.max;\n    dp[0][0] = 0;\n    for (int\
    \ i = 0; i < n; i++)\n        for (int j = 0; j < n; j++)\n        {\n       \
    \     if (i > 0)\n                dp[i][j] = min(dp[i][j], dp[i - 1][j] + 1);\n\
    \            if (j > 0)\n                dp[i][j] = min(dp[i][j], dp[i][j - 1]\
    \ + 1);\n        }\n    int[][] dp2 = new int[n][n];\n    for (int i = 0; i <\
    \ n; i++)\n        for (int j = 0; j < n; j++)\n            dp2[i][j] = int.max;\n\
    \    dp2[n - 1][n - 1] = 0;\n    for (int i = n - 1; i >= 0; i--)\n        for\
    \ (int j = n - 1; j >= 0; j--)\n        {\n            if (i < n - 1)\n      \
    \          dp2[i][j] = min(dp2[i][j], dp2[i + 1][j] + 1);\n            if (j <\
    \ n - 1)\n                dp2[i][j] = min(dp2[i][j], dp2[i][j + 1] + 1);\n   \
    \     }\n    int[][] dp3 = new int[n][n];\n    for (int i = 0; i < n; i++)\n \
    \       for (int j = 0; j < n; j++)\n            dp3[i][j] = dp[i][j] + dp2[i][j];\n\
    \    int[][] dp4 = new int[n][n];\n    for (int i = 0; i < n; i++)\n        for\
    \ (", "{\n    int N = grid.length;\n    long[][] dp = new long[N][N];\n    long[][]\
    \ prev = new long[N][N];\n    for (int i = 0; i < N; i++)\n        for (int j\
    \ = 0; j < N; j++)\n            dp[i][j] = long.max;\n    dp[0][0] = grid[0][0];\n\
    \    prev[0][0] = -1;\n    for (int i = 0; i < N; i++)\n        for (int j = 0;\
    \ j < N; j++)\n        {\n            if (i > 0 && dp[i - 1][j] + grid[i][j] <\
    \ dp[i][j])\n            {\n                dp[i][j] = dp[i - 1][j] + grid[i][j];\n\
    \                prev[i][j] = 0;\n            }\n            if (j > 0 && dp[i][j\
    \ - 1] + grid[i][j] < dp[i][j])\n            {\n                dp[i][j] = dp[i][j\
    \ - 1] + grid[i][j];\n                prev[i][j] = 1;\n            }\n       \
    \     if (i < N - 1 && dp[i + 1][j] + grid[i][j] < dp[i][j])\n            {\n\
    \                dp[i][j] = dp[i + 1][j] + grid[i][j];\n                prev[i][j]\
    \ = 2;\n            }\n            if (j < N - 1 && dp[i][j + 1] + grid[i][j]\
    \ < dp[i][j])\n            {\n                dp[i][j] = dp[i][j + 1] + grid[i][j];\n\
    \                prev[i][j] = 3;\n            }\n        }\n    long[] res = new\
    \ long[k];\n    int x = N - 1, y = N - 1;\n    for (int i = k - 1; i >= 0; i--)\n\
    \    {\n        res[i] = grid[x][", "{\n    int n = grid.length;\n    int[][]\
    \ dp = new int[n][n];\n    for (int i = 0; i < n; i++)\n        for (int j = 0;\
    \ j < n; j++)\n            dp[i][j] = int.max;\n    dp[0][0] = 0;\n    for (int\
    \ i = 0; i < n; i++)\n        for (int j = 0; j < n; j++)\n        {\n       \
    \     if (i > 0)\n                dp[i][j] = min(dp[i][j], dp[i - 1][j] + 1);\n\
    \            if (j > 0)\n                dp[i][j] = min(dp[i][j], dp[i][j - 1]\
    \ + 1);\n        }\n    int[][] dp2 = new int[n][n];\n    for (int i = 0; i <\
    \ n; i++)\n        for (int j = 0; j < n; j++)\n            dp2[i][j] = int.max;\n\
    \    dp2[n - 1][n - 1] = 0;\n    for (int i = n - 1; i >= 0; i--)\n        for\
    \ (int j = n - 1; j >= 0; j--)\n        {\n            if (i < n - 1)\n      \
    \          dp2[i][j] = min(dp2[i][j], dp2[i + 1][j] + 1);\n            if (j <\
    \ n - 1)\n                dp2[i][j] = min(dp2[i][j], dp2[i][j + 1] + 1);\n   \
    \     }\n    int[][] dp3 = new int[n][n];\n    for (int i = 0; i < n; i++)\n \
    \       for (int j = 0; j < n; j++)\n            dp3[i][j] = dp[i][j] + dp2[i][j];\n\
    \    int[][] dp4 = new int[n][n];\n    for (int i = 0; i < n; i++)\n        for\
    \ (", "{\n    // Write your code here\n    long[] res = new long[k];\n    long\
    \ n = grid.length;\n    long[][] dp = new long[n][n];\n    long[][] dp2 = new\
    \ long[n][n];\n    for (long i = 0; i < n; i++)\n    {\n        for (long j =\
    \ 0; j < n; j++)\n        {\n            dp[i][j] = grid[i][j];\n            dp2[i][j]\
    \ = grid[i][j];\n        }\n    }\n    for (long i = 1; i < k; i++)\n    {\n \
    \       for (long j = 0; j < n; j++)\n        {\n            for (long l = 0;\
    \ l < n; l++)\n            {\n                if (j > 0)\n                {\n\
    \                    dp[j][l] = min(dp[j][l], dp[j - 1][l]);\n               \
    \ }\n                if (j < n - 1)\n                {\n                    dp[j][l]\
    \ = min(dp[j][l], dp[j + 1][l]);\n                }\n                if (l > 0)\n\
    \                {\n                    dp[j][l] = min(dp[j][l], dp[j][l - 1]);\n\
    \                }\n                if (l < n - 1)\n                {\n      \
    \              dp[j][l] = min(dp[j][l], dp[j][l + 1]);\n                }\n  \
    \          }\n        }\n        for (long j = 0; j < n; j++)\n        {\n   \
    \         for (long l = 0; l < n; l++)\n            {\n                dp2[j][l]\
    \ = dp[j][l];\n            }\n        }\n    }\n    long min = dp[0][0];\n   \
    \ long x = 0;\n    long y = 0;\n    for (long i = 0; i < n; i++)\n    {\n    \
    \    for (long j = 0; j < n; j++)\n        {\n            if (dp[i][j] < min)\n\
    \            {\n                min = dp", "{\n    long n = grid.length;\n   \
    \ long[][] dp = new long[n][n];\n    long[][] path = new long[n][n];\n    long[][]\
    \ path_len = new long[n][n];\n    long[][] path_val = new long[n][n];\n    for\
    \ (long i = 0; i < n; i++)\n    {\n        for (long j = 0; j < n; j++)\n    \
    \    {\n            dp[i][j] = long.max;\n            path[i][j] = -1;\n     \
    \       path_len[i][j] = 0;\n            path_val[i][j] = 0;\n        }\n    }\n\
    \    dp[0][0] = 0;\n    path[0][0] = -1;\n    path_len[0][0] = 0;\n    path_val[0][0]\
    \ = grid[0][0];\n    for (long i = 0; i < n; i++)\n    {\n        for (long j\
    \ = 0; j < n; j++)\n        {\n            if (i > 0)\n            {\n       \
    \         if (dp[i][j] + 1 < dp[i - 1][j])\n                {\n              \
    \      dp[i - 1][j] = dp[i][j] + 1;\n                    path[i - 1][j] = i *\
    \ n + j;\n                    path_len[i - 1][j] = path_len[i][j] + 1;\n     \
    \               path_val[i - 1][j] = path_val[i][j] * (n * n) + grid[i - 1][j];\n\
    \                }\n                else if (dp[i][j] + 1 == dp[i - 1][j])\n \
    \               {\n                    if (path_val[i][j] * (n * n) + grid[i -\
    \ 1][j] < path_val[i - 1][j])\n                    {\n                       \
    \ path[i - 1][j] = i * n + j;\n                        path_len[i - 1][j] = path_len[i][j]\
    \ + 1;\n                        path_val[", "{\n    auto N = grid.length;\n  \
    \  auto dp = new long[N][N][k + 1];\n    foreach (i, j; 0 .. N)\n    {\n     \
    \   dp[i][j][0] = grid[i][j];\n    }\n    foreach (i, j; 0 .. N)\n    {\n    \
    \    foreach (l; 1 .. k + 1)\n        {\n            dp[i][j][l] = long.max;\n\
    \            if (i > 0)\n            {\n                dp[i][j][l] = min(dp[i][j][l],\
    \ dp[i - 1][j][l - 1]);\n            }\n            if (i < N - 1)\n         \
    \   {\n                dp[i][j][l] = min(dp[i][j][l], dp[i + 1][j][l - 1]);\n\
    \            }\n            if (j > 0)\n            {\n                dp[i][j][l]\
    \ = min(dp[i][j][l], dp[i][j - 1][l - 1]);\n            }\n            if (j <\
    \ N - 1)\n            {\n                dp[i][j][l] = min(dp[i][j][l], dp[i][j\
    \ + 1][l - 1]);\n            }\n        }\n    }\n    auto ans = new long[k];\n\
    \    ans[k - 1] = dp[0][0][k];\n    auto cur = tuple(0, 0, k);\n    foreach (i;\
    \ k - 2 .. -1)\n    {\n        if (cur[0] > 0 && dp[cur[0] - 1][cur[1]][cur[2]\
    \ - 1] == ans[i + 1])\n        {\n            cur = tuple(cur[0] - 1, cur[1],\
    \ cur[2] - 1);\n        }\n        else if (cur[0] < N - 1 && dp[cur[0] + 1][cur[1]][cur[2]\
    \ - 1] == ans[i + 1])\n        {\n            cur = tuple(cur[0] + 1, cur[1],\
    \ cur[", "{\n    long N = grid.length;\n    long[][] dp = new long[N][N];\n  \
    \  long[][] pre = new long[N][N];\n    for (long i = 0; i < N; i++)\n    {\n \
    \       for (long j = 0; j < N; j++)\n        {\n            dp[i][j] = long.max;\n\
    \            pre[i][j] = -1;\n        }\n    }\n    dp[0][0] = grid[0][0];\n \
    \   for (long i = 0; i < N; i++)\n    {\n        for (long j = 0; j < N; j++)\n\
    \        {\n            if (i > 0)\n            {\n                if (dp[i][j]\
    \ > dp[i - 1][j] + grid[i][j])\n                {\n                    dp[i][j]\
    \ = dp[i - 1][j] + grid[i][j];\n                    pre[i][j] = 0;\n         \
    \       }\n            }\n            if (j > 0)\n            {\n            \
    \    if (dp[i][j] > dp[i][j - 1] + grid[i][j])\n                {\n          \
    \          dp[i][j] = dp[i][j - 1] + grid[i][j];\n                    pre[i][j]\
    \ = 1;\n                }\n            }\n        }\n    }\n    long[] res = new\
    \ long[k];\n    long x = N - 1;\n    long y = N - 1;\n    for (long i = k - 1;\
    \ i >= 0; i--)\n    {\n        res[i] = grid[x][y];\n        if (pre[x][y] ==\
    \ 0)\n        {\n            x--;\n        }\n        else\n        {\n      \
    \      y--;\n        }\n    }\n    return res;\n}", "{\n    int n = grid.length;\n\
    \    int[][] dp = new int[n][n];\n    int[][] prev = new int[n][n];\n    for (int\
    \ i = 0; i < n; i++)\n        for (int j = 0; j < n; j++)\n            dp[i][j]\
    \ = int.max;\n    dp[0][0] = 0;\n    for (int i = 0; i < n; i++)\n        for\
    \ (int j = 0; j < n; j++)\n        {\n            if (i > 0 && dp[i - 1][j] +\
    \ 1 < dp[i][j])\n            {\n                dp[i][j] = dp[i - 1][j] + 1;\n\
    \                prev[i][j] = 1;\n            }\n            if (j > 0 && dp[i][j\
    \ - 1] + 1 < dp[i][j])\n            {\n                dp[i][j] = dp[i][j - 1]\
    \ + 1;\n                prev[i][j] = 2;\n            }\n            if (i < n\
    \ - 1 && dp[i + 1][j] + 1 < dp[i][j])\n            {\n                dp[i][j]\
    \ = dp[i + 1][j] + 1;\n                prev[i][j] = 3;\n            }\n      \
    \      if (j < n - 1 && dp[i][j + 1] + 1 < dp[i][j])\n            {\n        \
    \        dp[i][j] = dp[i][j + 1] + 1;\n                prev[i][j] = 4;\n     \
    \       }\n        }\n    int[] path = new int[k];\n    int x = 0, y = 0;\n  \
    \  for (int i = 0; i < k; i++)\n    {\n        path[i] = grid[x][y];\n       \
    \ if (prev[x][y] == 1)\n            x--;\n        else if (prev[x][y] == 2)\n\
    \            y--;\n        else if (prev[x][y] == 3)\n            x++;\n     \
    \  ", "{\n    int n = grid.length;\n    int[][] dp = new int[n][n];\n    for (int\
    \ i = 0; i < n; i++)\n        for (int j = 0; j < n; j++)\n            dp[i][j]\
    \ = -1;\n    dp[0][0] = 0;\n    for (int i = 0; i < n; i++)\n        for (int\
    \ j = 0; j < n; j++)\n            if (dp[i][j] != -1)\n            {\n       \
    \         if (i + 1 < n && dp[i + 1][j] == -1)\n                    dp[i + 1][j]\
    \ = dp[i][j] + 1;\n                if (j + 1 < n && dp[i][j + 1] == -1)\n    \
    \                dp[i][j + 1] = dp[i][j] + 1;\n                if (i - 1 >= 0\
    \ && dp[i - 1][j] == -1)\n                    dp[i - 1][j] = dp[i][j] + 1;\n \
    \               if (j - 1 >= 0 && dp[i][j - 1] == -1)\n                    dp[i][j\
    \ - 1] = dp[i][j] + 1;\n            }\n    int[] dx = new int[]{1, 0, -1, 0};\n\
    \    int[] dy = new int[]{0, 1, 0, -1};\n    int[][] dp2 = new int[n][n];\n  \
    \  for (int i = 0; i < n; i++)\n        for (int j = 0; j < n; j++)\n        \
    \    dp2[i][j] = -1;\n    dp2[n - 1][n - 1] = 0;\n    for (int i = n - 1; i >=\
    \ 0; i--)\n        for (int j = n - 1; j >= 0; j--)\n            if (dp2[i][j]\
    \ != -1)\n            {\n                if (i + 1 < n && dp2[i + 1][j] == -1)\n\
    \                    dp2[", "{\n    int n = grid.length;\n    int[][] dp = new\
    \ int[n][n];\n    for (int i = 0; i < n; i++) \n    {\n        for (int j = 0;\
    \ j < n; j++) \n        {\n            dp[i][j] = int.max;\n        }\n    }\n\
    \    dp[0][0] = 0;\n    for (int i = 0; i < n; i++) \n    {\n        for (int\
    \ j = 0; j < n; j++) \n        {\n            if (i > 0) \n            {\n   \
    \             dp[i][j] = min(dp[i][j], dp[i - 1][j] + 1);\n            }\n   \
    \         if (j > 0) \n            {\n                dp[i][j] = min(dp[i][j],\
    \ dp[i][j - 1] + 1);\n            }\n        }\n    }\n    for (int i = n - 1;\
    \ i >= 0; i--) \n    {\n        for (int j = n - 1; j >= 0; j--) \n        {\n\
    \            if (i < n - 1) \n            {\n                dp[i][j] = min(dp[i][j],\
    \ dp[i + 1][j] + 1);\n            }\n            if (j < n - 1) \n           \
    \ {\n                dp[i][j] = min(dp[i][j], dp[i][j + 1] + 1);\n           \
    \ }\n        }\n    }\n    int[][] dp2 = new int[n][n];\n    for (int i = 0; i\
    \ < n; i++) \n    {\n        for (int j = 0; j < n; j++) \n        {\n       \
    \     dp2[i][j] = int.max;\n        }\n    }\n    dp2[0][0] = 0;\n    for (int\
    \ i = 0; i < n; i++) \n    {\n        for (int j = 0; j < n; j++) \n        {\n\
    \            if (i > 0) \n", "{\n    int n = grid.length;\n    int[][] dp = new\
    \ int[n][n];\n    for (int i = 0; i < n; i++)\n        for (int j = 0; j < n;\
    \ j++)\n            dp[i][j] = int.max;\n    dp[0][0] = 0;\n    for (int i = 0;\
    \ i < n; i++)\n        for (int j = 0; j < n; j++)\n        {\n            if\
    \ (i > 0)\n                dp[i][j] = min(dp[i][j], dp[i - 1][j] + grid[i][j]);\n\
    \            if (j > 0)\n                dp[i][j] = min(dp[i][j], dp[i][j - 1]\
    \ + grid[i][j]);\n        }\n    long[] res = new long[k];\n    int i = n - 1,\
    \ j = n - 1;\n    for (int l = k - 1; l >= 0; l--)\n    {\n        res[l] = grid[i][j];\n\
    \        if (i > 0 && dp[i - 1][j] + grid[i][j] == dp[i][j])\n            i--;\n\
    \        else\n            j--;\n    }\n    return res;\n}", "{\n    auto N =\
    \ grid.length;\n    auto M = grid[0].length;\n    auto dp = new long[N][M][k+1];\n\
    \    foreach(i; 0..N)\n        foreach(j; 0..M)\n            foreach(l; 0..k+1)\n\
    \                dp[i][j][l] = long.max;\n    dp[0][0][1] = grid[0][0];\n    foreach(i;\
    \ 0..N)\n        foreach(j; 0..M)\n            foreach(l; 1..k+1)\n          \
    \  {\n                if(i > 0)\n                    dp[i][j][l] = min(dp[i][j][l],\
    \ dp[i-1][j][l-1] + grid[i][j]);\n                if(j > 0)\n                \
    \    dp[i][j][l] = min(dp[i][j][l], dp[i][j-1][l-1] + grid[i][j]);\n         \
    \       if(i < N-1)\n                    dp[i][j][l] = min(dp[i][j][l], dp[i+1][j][l-1]\
    \ + grid[i][j]);\n                if(j < M-1)\n                    dp[i][j][l]\
    \ = min(dp[i][j][l], dp[i][j+1][l-1] + grid[i][j]);\n            }\n    auto res\
    \ = new long[k];\n    res[k-1] = grid[N-1][M-1];\n    auto i = N-1;\n    auto\
    \ j = M-1;\n    auto l = k-1;\n    while(l > 0)\n    {\n        if(i > 0 && dp[i][j][l]\
    \ == dp[i-1][j][l-1] + grid[i][j])\n        {\n            res[l-1] = grid[i-1][j];\n\
    \            i--;\n        }\n        else if(j > 0 && dp[i][j][l] == dp[i][j-",
  "{\n    long n = grid.length;\n    long[][] dp = new long[n][n];\n    long[][] path\
    \ = new long[n][n];\n    for (long i = 0; i < n; i++)\n    {\n        for (long\
    \ j = 0; j < n; j++)\n        {\n            dp[i][j] = long.max;\n          \
    \  path[i][j] = -1;\n        }\n    }\n    dp[0][0] = grid[0][0];\n    for (long\
    \ i = 0; i < n; i++)\n    {\n        for (long j = 0; j < n; j++)\n        {\n\
    \            if (i > 0)\n            {\n                if (dp[i][j] > dp[i -\
    \ 1][j] + grid[i][j])\n                {\n                    dp[i][j] = dp[i\
    \ - 1][j] + grid[i][j];\n                    path[i][j] = 0;\n               \
    \ }\n            }\n            if (j > 0)\n            {\n                if\
    \ (dp[i][j] > dp[i][j - 1] + grid[i][j])\n                {\n                \
    \    dp[i][j] = dp[i][j - 1] + grid[i][j];\n                    path[i][j] = 1;\n\
    \                }\n            }\n        }\n    }\n    long[] res = new long[k];\n\
    \    long i = n - 1;\n    long j = n - 1;\n    for (long l = k - 1; l >= 0; l--)\n\
    \    {\n        res[l] = grid[i][j];\n        if (path[i][j] == 0)\n        {\n\
    \            i--;\n        }\n        else\n        {\n            j--;\n    \
    \    }\n    }\n    return res;\n}", "{\n    long n = grid.length;\n    long[][]\
    \ dp = new long[n][n];\n    long[][] path = new long[n][n];\n    long[][] path_len\
    \ = new long[n][n];\n    for (long i = 0; i < n; i++)\n    {\n        for (long\
    \ j = 0; j < n; j++)\n        {\n            dp[i][j] = grid[i][j];\n        \
    \    path[i][j] = grid[i][j];\n            path_len[i][j] = 1;\n        }\n  \
    \  }\n    for (long i = 1; i < k; i++)\n    {\n        long[][] new_dp = new long[n][n];\n\
    \        long[][] new_path = new long[n][n];\n        long[][] new_path_len =\
    \ new long[n][n];\n        for (long j = 0; j < n; j++)\n        {\n         \
    \   for (long l = 0; l < n; l++)\n            {\n                new_dp[j][l]\
    \ = long.max;\n                new_path[j][l] = long.max;\n                new_path_len[j][l]\
    \ = long.max;\n            }\n        }\n        for (long j = 0; j < n; j++)\n\
    \        {\n            for (long l = 0; l < n; l++)\n            {\n        \
    \        if (j > 0)\n                {\n                    if (dp[j - 1][l] <\
    \ new_dp[j][l])\n                    {\n                        new_dp[j][l] =\
    \ dp[j - 1][l];\n                        new_path[j][l] = path[j - 1][l];\n  \
    \                      new_path_len[j][l] = path_len[j - 1][l];\n            \
    \        }\n                    else if (dp[j - 1][l] == new_dp[j][l])\n     \
    \               {\n                        if (path[j - 1][l] < new_path[j][l])\n\
    \                        {\n                            new_path[j][l] = path[j\
    \ - 1][l];\n                ", "{\n    int n = grid.length;\n    int[][] dp =\
    \ new int[n][n];\n    int[][] prev = new int[n][n];\n    for (int i = 0; i < n;\
    \ i++)\n        for (int j = 0; j < n; j++)\n            dp[i][j] = int.max;\n\
    \    dp[0][0] = 0;\n    for (int i = 0; i < n; i++)\n        for (int j = 0; j\
    \ < n; j++)\n        {\n            if (i > 0 && dp[i][j] + grid[i - 1][j] < dp[i\
    \ - 1][j])\n            {\n                dp[i - 1][j] = dp[i][j] + grid[i -\
    \ 1][j];\n                prev[i - 1][j] = 0;\n            }\n            if (j\
    \ > 0 && dp[i][j] + grid[i][j - 1] < dp[i][j - 1])\n            {\n          \
    \      dp[i][j - 1] = dp[i][j] + grid[i][j - 1];\n                prev[i][j -\
    \ 1] = 1;\n            }\n            if (i < n - 1 && dp[i][j] + grid[i + 1][j]\
    \ < dp[i + 1][j])\n            {\n                dp[i + 1][j] = dp[i][j] + grid[i\
    \ + 1][j];\n                prev[i + 1][j] = 2;\n            }\n            if\
    \ (j < n - 1 && dp[i][j] + grid[i][j + 1] < dp[i][j + 1])\n            {\n   \
    \             dp[i][j + 1] = dp[i][j] + grid[i][j + 1];\n                prev[i][j\
    \ + 1] = 3;\n            }\n        }\n    long[] res = new long[k];\n    int\
    \ x = n - 1, y = n - 1;\n    for (int i = k - 1; i >= 0; i--)\n    {\n       \
    \ res", "{\n    int n = grid.length;\n    int[][] dp = new int[n][n];\n    for\
    \ (int i = 0; i < n; i++)\n        for (int j = 0; j < n; j++)\n            dp[i][j]\
    \ = int.max;\n    dp[0][0] = 0;\n    for (int i = 0; i < n; i++)\n        for\
    \ (int j = 0; j < n; j++)\n        {\n            if (i > 0)\n               \
    \ dp[i][j] = min(dp[i][j], dp[i - 1][j] + 1);\n            if (j > 0)\n      \
    \          dp[i][j] = min(dp[i][j], dp[i][j - 1] + 1);\n        }\n    int[][]\
    \ dp2 = new int[n][n];\n    for (int i = 0; i < n; i++)\n        for (int j =\
    \ 0; j < n; j++)\n            dp2[i][j] = int.max;\n    dp2[n - 1][n - 1] = 0;\n\
    \    for (int i = n - 1; i >= 0; i--)\n        for (int j = n - 1; j >= 0; j--)\n\
    \        {\n            if (i < n - 1)\n                dp2[i][j] = min(dp2[i][j],\
    \ dp2[i + 1][j] + 1);\n            if (j < n - 1)\n                dp2[i][j] =\
    \ min(dp2[i][j], dp2[i][j + 1] + 1);\n        }\n    int[][] dp3 = new int[n][n];\n\
    \    for (int i = 0; i < n; i++)\n        for (int j = 0; j < n; j++)\n      \
    \      dp3[i][j] = dp[i][j] + dp2[i][j];\n    int[][] dp4 = new int[n][n];\n \
    \   for (int i = 0; i < n; i++)\n        for (", "{\n    int N = grid.length;\n\
    \    int[][] dp = new int[N][N];\n    for (int i = 0; i < N; i++)\n        for\
    \ (int j = 0; j < N; j++)\n            dp[i][j] = int.max;\n    dp[0][0] = 0;\n\
    \    for (int i = 0; i < N; i++)\n        for (int j = 0; j < N; j++)\n      \
    \  {\n            if (i > 0)\n                dp[i][j] = min(dp[i][j], dp[i -\
    \ 1][j] + 1);\n            if (j > 0)\n                dp[i][j] = min(dp[i][j],\
    \ dp[i][j - 1] + 1);\n        }\n    int[][] dp2 = new int[N][N];\n    for (int\
    \ i = 0; i < N; i++)\n        for (int j = 0; j < N; j++)\n            dp2[i][j]\
    \ = int.max;\n    dp2[N - 1][N - 1] = 0;\n    for (int i = N - 1; i >= 0; i--)\n\
    \        for (int j = N - 1; j >= 0; j--)\n        {\n            if (i < N -\
    \ 1)\n                dp2[i][j] = min(dp2[i][j], dp2[i + 1][j] + 1);\n       \
    \     if (j < N - 1)\n                dp2[i][j] = min(dp2[i][j], dp2[i][j + 1]\
    \ + 1);\n        }\n    int[][] dp3 = new int[N][N];\n    for (int i = 0; i <\
    \ N; i++)\n        for (int j = 0; j < N; j++)\n            dp3[i][j] = dp[i][j]\
    \ + dp2[i][j];\n    int[][] dp4 = new int[N][N];\n    for (int i = 0; i < N; i++)\n\
    \        for (", "{\n    int N = grid.length;\n    int[][] dp = new int[N][N];\n\
    \    for (int i = 0; i < N; i++) \n    {\n        for (int j = 0; j < N; j++)\
    \ \n        {\n            dp[i][j] = int.max;\n        }\n    }\n    dp[0][0]\
    \ = 0;\n    for (int i = 0; i < N; i++) \n    {\n        for (int j = 0; j < N;\
    \ j++) \n        {\n            if (i > 0) \n            {\n                dp[i][j]\
    \ = min(dp[i][j], dp[i - 1][j] + 1);\n            }\n            if (j > 0) \n\
    \            {\n                dp[i][j] = min(dp[i][j], dp[i][j - 1] + 1);\n\
    \            }\n        }\n    }\n    for (int i = N - 1; i >= 0; i--) \n    {\n\
    \        for (int j = N - 1; j >= 0; j--) \n        {\n            if (i < N -\
    \ 1) \n            {\n                dp[i][j] = min(dp[i][j], dp[i + 1][j] +\
    \ 1);\n            }\n            if (j < N - 1) \n            {\n           \
    \     dp[i][j] = min(dp[i][j], dp[i][j + 1] + 1);\n            }\n        }\n\
    \    }\n    int[] dx = [1, 0, -1, 0];\n    int[] dy = [0, 1, 0, -1];\n    int[][]\
    \ dp2 = new int[N][N];\n    for (int i = 0; i < N; i++) \n    {\n        for (int\
    \ j = 0; j < N; j++) \n        {\n            dp2[i][j] = int.max;\n        }\n\
    \    }\n    dp2[0][0] = 0;\n    for (int i = 0; i < N; i++) ", "{\n    int n =\
    \ grid.length;\n    int[][] dp = new int[n][n];\n    int[][] path = new int[n][n];\n\
    \    for (int i = 0; i < n; i++)\n    {\n        for (int j = 0; j < n; j++)\n\
    \        {\n            dp[i][j] = int.max;\n            path[i][j] = -1;\n  \
    \      }\n    }\n    dp[0][0] = 0;\n    for (int i = 0; i < n; i++)\n    {\n \
    \       for (int j = 0; j < n; j++)\n        {\n            if (i + 1 < n && dp[i\
    \ + 1][j] > dp[i][j] + 1)\n            {\n                dp[i + 1][j] = dp[i][j]\
    \ + 1;\n                path[i + 1][j] = 0;\n            }\n            if (j\
    \ + 1 < n && dp[i][j + 1] > dp[i][j] + 1)\n            {\n                dp[i][j\
    \ + 1] = dp[i][j] + 1;\n                path[i][j + 1] = 1;\n            }\n \
    \           if (i - 1 >= 0 && dp[i - 1][j] > dp[i][j] + 1)\n            {\n  \
    \              dp[i - 1][j] = dp[i][j] + 1;\n                path[i - 1][j] =\
    \ 2;\n            }\n            if (j - 1 >= 0 && dp[i][j - 1] > dp[i][j] + 1)\n\
    \            {\n                dp[i][j - 1] = dp[i][j] + 1;\n               \
    \ path[i][j - 1] = 3;\n            }\n        }\n    }\n    int x = n - 1;\n \
    \   int y = n - 1;\n    long[] res = new long[k];\n    for (int i = 0; i < k;\
    \ i++)\n    {\n        res[i] = grid[x][y];\n        if (", "{\n    int n = grid.length;\n\
    \    long[][] dp = new long[n][n];\n    long[][] path = new long[n][n];\n    for\
    \ (int i = 0; i < n; i++)\n        for (int j = 0; j < n; j++)\n            dp[i][j]\
    \ = long.max;\n    dp[0][0] = grid[0][0];\n    path[0][0] = 1;\n    for (int i\
    \ = 0; i < n; i++)\n        for (int j = 0; j < n; j++)\n        {\n         \
    \   if (i > 0)\n            {\n                if (dp[i][j] + grid[i - 1][j] <\
    \ dp[i - 1][j])\n                {\n                    dp[i - 1][j] = dp[i][j]\
    \ + grid[i - 1][j];\n                    path[i - 1][j] = path[i][j] * 10 + grid[i\
    \ - 1][j];\n                }\n                else if (dp[i][j] + grid[i - 1][j]\
    \ == dp[i - 1][j])\n                {\n                    path[i - 1][j] = min(path[i\
    \ - 1][j], path[i][j] * 10 + grid[i - 1][j]);\n                }\n           \
    \ }\n            if (j > 0)\n            {\n                if (dp[i][j] + grid[i][j\
    \ - 1] < dp[i][j - 1])\n                {\n                    dp[i][j - 1] =\
    \ dp[i][j] + grid[i][j - 1];\n                    path[i][j - 1] = path[i][j]\
    \ * 10 + grid[i][j - 1];\n                }\n                else if (dp[i][j]\
    \ + grid[i][j - 1] == dp[i][j - 1])\n                {\n                    path[i][j\
    \ - 1] = min(path[i][j - 1], path[i][j] * 10 + grid[i][j - 1]);\n            \
    \    }\n            }\n        }\n    long[] res", "{\n    // Write your code\
    \ here\n    long N = grid.length;\n    long[][] dp = new long[N][N];\n    long[][]\
    \ path = new long[N][N];\n    for (long i = 0; i < N; i++)\n    {\n        for\
    \ (long j = 0; j < N; j++)\n        {\n            dp[i][j] = long.max;\n    \
    \        path[i][j] = long.max;\n        }\n    }\n    dp[0][0] = grid[0][0];\n\
    \    path[0][0] = 0;\n    for (long i = 0; i < N; i++)\n    {\n        for (long\
    \ j = 0; j < N; j++)\n        {\n            if (i > 0)\n            {\n     \
    \           if (dp[i][j] > dp[i - 1][j] + grid[i][j])\n                {\n   \
    \                 dp[i][j] = dp[i - 1][j] + grid[i][j];\n                    path[i][j]\
    \ = path[i - 1][j] + 1;\n                }\n                else if (dp[i][j]\
    \ == dp[i - 1][j] + grid[i][j])\n                {\n                    path[i][j]\
    \ = min(path[i][j], path[i - 1][j] + 1);\n                }\n            }\n \
    \           if (j > 0)\n            {\n                if (dp[i][j] > dp[i][j\
    \ - 1] + grid[i][j])\n                {\n                    dp[i][j] = dp[i][j\
    \ - 1] + grid[i][j];\n                    path[i][j] = path[i][j - 1] + 1;\n \
    \               }\n                else if (dp[i][j] == dp[i][j - 1] + grid[i][j])\n\
    \                {\n                    path[i][j] = min(path[i][j], path[i][j\
    \ - 1] + 1);\n                }\n            }\n        }\n    }\n    long[] res\
    \ = new long[k];\n    long i", "{\n    int N = grid.length;\n    int[][] dp =\
    \ new int[N][N];\n    for (int i = 0; i < N; i++)\n        for (int j = 0; j <\
    \ N; j++)\n            dp[i][j] = int.max;\n    dp[0][0] = 0;\n    for (int i\
    \ = 0; i < N; i++)\n        for (int j = 0; j < N; j++)\n        {\n         \
    \   if (i > 0)\n                dp[i][j] = min(dp[i][j], dp[i - 1][j] + 1);\n\
    \            if (j > 0)\n                dp[i][j] = min(dp[i][j], dp[i][j - 1]\
    \ + 1);\n        }\n    int[][] dp2 = new int[N][N];\n    for (int i = 0; i <\
    \ N; i++)\n        for (int j = 0; j < N; j++)\n            dp2[i][j] = int.max;\n\
    \    dp2[N - 1][N - 1] = 0;\n    for (int i = N - 1; i >= 0; i--)\n        for\
    \ (int j = N - 1; j >= 0; j--)\n        {\n            if (i < N - 1)\n      \
    \          dp2[i][j] = min(dp2[i][j], dp2[i + 1][j] + 1);\n            if (j <\
    \ N - 1)\n                dp2[i][j] = min(dp2[i][j], dp2[i][j + 1] + 1);\n   \
    \     }\n    int[][] dp3 = new int[N][N];\n    for (int i = 0; i < N; i++)\n \
    \       for (int j = 0; j < N; j++)\n            dp3[i][j] = dp[i][j] + dp2[i][j];\n\
    \    int[][] dp4 = new int[N][N];\n    for (int i = 0; i < N; i++)\n        for\
    \ (", "{\n    // Write your code here\n    long n = grid.length;\n    long[][]\
    \ dp = new long[n][n];\n    for (long i = 0; i < n; i++)\n    {\n        for (long\
    \ j = 0; j < n; j++)\n        {\n            dp[i][j] = grid[i][j];\n        }\n\
    \    }\n    for (long i = 0; i < n; i++)\n    {\n        for (long j = 0; j <\
    \ n; j++)\n        {\n            if (i > 0)\n            {\n                dp[i][j]\
    \ = min(dp[i][j], dp[i - 1][j]);\n            }\n            if (j > 0)\n    \
    \        {\n                dp[i][j] = min(dp[i][j], dp[i][j - 1]);\n        \
    \    }\n        }\n    }\n    long[] res = new long[k];\n    long i = 0;\n   \
    \ long j = 0;\n    for (long l = 0; l < k; l++)\n    {\n        res[l] = dp[i][j];\n\
    \        if (i > 0 && dp[i - 1][j] < dp[i][j])\n        {\n            i--;\n\
    \        }\n        else if (j > 0 && dp[i][j - 1] < dp[i][j])\n        {\n  \
    \          j--;\n        }\n        else if (i < n - 1 && dp[i + 1][j] < dp[i][j])\n\
    \        {\n            i++;\n        }\n        else if (j < n - 1 && dp[i][j\
    \ + 1] < dp[i][j])\n        {\n            j++;\n        }\n    }\n    return\
    \ res;\n}", "{\n    long N = grid.length;\n    long[] result = new long[k];\n\
    \    long[] min = new long[k];\n    long[] cur = new long[k];\n    long minSum\
    \ = long.max;\n    long curSum = 0;\n    long[] dirs = [1, 0, -1, 0, 1];\n   \
    \ long[][] visited = new long[N][N];\n    for (long i = 0; i < N; i++)\n    {\n\
    \        for (long j = 0; j < N; j++)\n        {\n            visited[i][j] =\
    \ 0;\n        }\n    }\n    long[] start = [0, 0];\n    visited[0][0] = 1;\n \
    \   cur[0] = grid[0][0];\n    curSum = grid[0][0];\n    for (long i = 1; i < k;\
    \ i++)\n    {\n        long minVal = long.max;\n        long[] minPos = [0, 0];\n\
    \        for (long j = 0; j < 4; j++)\n        {\n            long x = start[0]\
    \ + dirs[j];\n            long y = start[1] + dirs[j + 1];\n            if (x\
    \ >= 0 && x < N && y >= 0 && y < N && visited[x][y] == 0)\n            {\n   \
    \             if (grid[x][y] < minVal)\n                {\n                  \
    \  minVal = grid[x][y];\n                    minPos = [x, y];\n              \
    \  }\n            }\n        }\n        start = minPos;\n        visited[start[0]][start[1]]\
    \ = 1;\n        cur[i] = minVal;\n        curSum += minVal;\n    }\n    if (curSum\
    \ < minSum)\n    {\n        minSum = curSum;\n        for (long i = 0; i < k;\
    \ i++)\n        {\n            min[i] = cur[i];\n        }\n    }\n    long[]\
    \ pos = [0, 0];\n    for (long i = 0; i < N; i++)\n    {\n        for (long j\
    \ = 0; j < N; j++)\n        {\n", "{\n    // Write your code here\n    int n =\
    \ grid.length;\n    int[][] dp = new int[n][n];\n    int[][] parent = new int[n][n];\n\
    \    for (int i = 0; i < n; i++)\n    {\n        for (int j = 0; j < n; j++)\n\
    \        {\n            dp[i][j] = int.max;\n            parent[i][j] = -1;\n\
    \        }\n    }\n    dp[0][0] = 0;\n    parent[0][0] = -1;\n    for (int i =\
    \ 0; i < n; i++)\n    {\n        for (int j = 0; j < n; j++)\n        {\n    \
    \        if (i > 0)\n            {\n                if (dp[i - 1][j] + 1 < dp[i][j])\n\
    \                {\n                    dp[i][j] = dp[i - 1][j] + 1;\n       \
    \             parent[i][j] = i * n + j - n;\n                }\n            }\n\
    \            if (j > 0)\n            {\n                if (dp[i][j - 1] + 1 <\
    \ dp[i][j])\n                {\n                    dp[i][j] = dp[i][j - 1] +\
    \ 1;\n                    parent[i][j] = i * n + j - 1;\n                }\n \
    \           }\n        }\n    }\n    int[] path = new int[k];\n    int cur = n\
    \ * n - 1;\n    for (int i = k - 1; i >= 0; i--)\n    {\n        path[i] = cur;\n\
    \        cur = parent[cur / n][cur % n];\n    }\n    long[] res = new long[k];\n\
    \    for (int i = 0; i < k; i++)\n    {\n        res[i] = grid[path[i] / n][path[i]\
    \ % n];\n    }\n    return res;\n}", "{\n    long N = grid.length;\n    long[][]\
    \ dp = new long[N][N];\n    for (long i = 0; i < N; i++)\n        for (long j\
    \ = 0; j < N; j++)\n            dp[i][j] = long.max;\n    dp[0][0] = grid[0][0];\n\
    \    for (long i = 0; i < N; i++)\n        for (long j = 0; j < N; j++)\n    \
    \    {\n            if (i > 0)\n                dp[i][j] = min(dp[i][j], dp[i\
    \ - 1][j] + grid[i][j]);\n            if (j > 0)\n                dp[i][j] = min(dp[i][j],\
    \ dp[i][j - 1] + grid[i][j]);\n        }\n    long[] res = new long[k];\n    for\
    \ (long i = 0; i < k; i++)\n        res[i] = grid[0][0];\n    long i = 0, j =\
    \ 0;\n    for (long l = 1; l < k; l++)\n    {\n        if (i > 0 && dp[i - 1][j]\
    \ + grid[i][j] == dp[i][j])\n        {\n            res[l] = grid[i][j];\n   \
    \         i--;\n        }\n        else\n        {\n            res[l] = grid[i][j];\n\
    \            j--;\n        }\n    }\n    return res;\n}", "{\n    int N = grid.length;\n\
    \    int[][] dp = new int[N][N];\n    for (int i = 0; i < N; i++)\n        for\
    \ (int j = 0; j < N; j++)\n            dp[i][j] = int.max;\n    dp[0][0] = 0;\n\
    \    for (int i = 0; i < N; i++)\n        for (int j = 0; j < N; j++)\n      \
    \  {\n            if (i > 0)\n                dp[i][j] = min(dp[i][j], dp[i -\
    \ 1][j] + 1);\n            if (j > 0)\n                dp[i][j] = min(dp[i][j],\
    \ dp[i][j - 1] + 1);\n        }\n    int[][] dp2 = new int[N][N];\n    for (int\
    \ i = 0; i < N; i++)\n        for (int j = 0; j < N; j++)\n            dp2[i][j]\
    \ = int.max;\n    dp2[N - 1][N - 1] = 0;\n    for (int i = N - 1; i >= 0; i--)\n\
    \        for (int j = N - 1; j >= 0; j--)\n        {\n            if (i < N -\
    \ 1)\n                dp2[i][j] = min(dp2[i][j], dp2[i + 1][j] + 1);\n       \
    \     if (j < N - 1)\n                dp2[i][j] = min(dp2[i][j], dp2[i][j + 1]\
    \ + 1);\n        }\n    int[][] dp3 = new int[N][N];\n    for (int i = 0; i <\
    \ N; i++)\n        for (int j = 0; j < N; j++)\n            dp3[i][j] = dp[i][j]\
    \ + dp2[i][j];\n    int[][] dp4 = new int[N][N];\n    for (int i = 0; i < N; i++)\n\
    \        for (", "{\n    int n = grid.length;\n    int[][] dp = new int[n][n];\n\
    \    int[][] prev = new int[n][n];\n    for (int i = 0; i < n; i++)\n        for\
    \ (int j = 0; j < n; j++)\n            dp[i][j] = int.max;\n    dp[0][0] = 0;\n\
    \    for (int i = 0; i < n; i++)\n        for (int j = 0; j < n; j++)\n      \
    \  {\n            if (i > 0 && dp[i - 1][j] + grid[i][j] < dp[i][j])\n       \
    \     {\n                dp[i][j] = dp[i - 1][j] + grid[i][j];\n             \
    \   prev[i][j] = 1;\n            }\n            if (j > 0 && dp[i][j - 1] + grid[i][j]\
    \ < dp[i][j])\n            {\n                dp[i][j] = dp[i][j - 1] + grid[i][j];\n\
    \                prev[i][j] = 2;\n            }\n            if (i < n - 1 &&\
    \ dp[i + 1][j] + grid[i][j] < dp[i][j])\n            {\n                dp[i][j]\
    \ = dp[i + 1][j] + grid[i][j];\n                prev[i][j] = 3;\n            }\n\
    \            if (j < n - 1 && dp[i][j + 1] + grid[i][j] < dp[i][j])\n        \
    \    {\n                dp[i][j] = dp[i][j + 1] + grid[i][j];\n              \
    \  prev[i][j] = 4;\n            }\n        }\n    long[] res = new long[k];\n\
    \    int x = n - 1, y = n - 1;\n    for (int i = k - 1; i >= 0; i--)\n    {\n\
    \        res[i] = grid[x][y];\n        if (prev[x][y] == 1)\n"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
