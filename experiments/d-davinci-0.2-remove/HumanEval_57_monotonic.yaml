name: HumanEval_57_monotonic
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\nReturn True is list elements\
  \ are monotonically increasing or decreasing.\n                \n*/\nbool monotonic(long[]\
  \ l) \n"
tests: "unittest\n{\n    alias candidate = monotonic;\n\n    assert(candidate([1L,\
  \ 2L, 4L, 10L]) == true);\n    assert(candidate([1L, 2L, 4L, 20L]) == true);\n \
  \   assert(candidate([1L, 20L, 4L, 10L]) == false);\n    assert(candidate([4L, 1L,\
  \ 0L, -10L]) == true);\n    assert(candidate([4L, 1L, 1L, 0L]) == true);\n    assert(candidate([1L,\
  \ 2L, 3L, 2L, 5L, 60L]) == false);\n    assert(candidate([1L, 2L, 3L, 4L, 5L, 60L])\
  \ == true);\n    assert(candidate([9L, 9L, 9L, 9L]) == true);\n}\nvoid main(){}"
completions: ["{\n    if (l.length < 2) return true;\n    bool increasing = l[1] >\
    \ l[0];\n    for (int i = 1; i < l.length; i++)\n    {\n        if (increasing\
    \ && l[i] < l[i-1]) return false;\n        if (!increasing && l[i] > l[i-1]) return\
    \ false;\n    }\n    return true;\n}", "{\n    if (l.length < 2)\n        return\
    \ true;\n    bool increasing = l[1] > l[0];\n    foreach (i, v; l[1..$])\n   \
    \ {\n        if (increasing && v < l[i-1])\n            return false;\n      \
    \  if (!increasing && v > l[i-1])\n            return false;\n    }\n    return\
    \ true;\n}", "{\n    bool increasing = true;\n    bool decreasing = true;\n  \
    \  for (int i = 1; i < l.length; i++) {\n        if (l[i] < l[i - 1]) {\n    \
    \        increasing = false;\n        }\n        if (l[i] > l[i - 1]) {\n    \
    \        decreasing = false;\n        }\n    }\n    return increasing || decreasing;\n\
    }", "{\n    bool increasing = true;\n    bool decreasing = true;\n    foreach(i,e;l)\n\
    \    {\n        if(i>0)\n        {\n            increasing &= l[i]>=l[i-1];\n\
    \            decreasing &= l[i]<=l[i-1];\n        }\n    }\n    return increasing\
    \ || decreasing;\n}\n/*\nReturn True is list elements are monotonically increasing\
    \ or decreasing.\n                \n*/", "{\n    bool increasing = true;\n   \
    \ bool decreasing = true;\n    for (int i = 1; i < l.length; i++)\n    {\n   \
    \     if (l[i] < l[i - 1])\n            increasing = false;\n        if (l[i]\
    \ > l[i - 1])\n            decreasing = false;\n    }\n    return increasing ||\
    \ decreasing;\n}", "{\n    if (l.length < 2) return true;\n    bool increasing\
    \ = l[1] > l[0];\n    for (int i = 2; i < l.length; i++)\n    {\n        if (increasing)\n\
    \        {\n            if (l[i] < l[i-1]) return false;\n        }\n        else\n\
    \        {\n            if (l[i] > l[i-1]) return false;\n        }\n    }\n \
    \   return true;\n}", "{\n    bool increasing = true;\n    bool decreasing = true;\n\
    \    for (int i = 1; i < l.length; i++)\n    {\n        if (l[i] < l[i - 1])\n\
    \            increasing = false;\n        if (l[i] > l[i - 1])\n            decreasing\
    \ = false;\n    }\n    return increasing || decreasing;\n}\n/*\nReturn True if\
    \ list elements are monotonically increasing.\n*/", "{\n    if (l.length < 2)\
    \ return true;\n    bool increasing = l[1] > l[0];\n    for (int i = 1; i < l.length;\
    \ i++)\n    {\n        if (increasing && l[i] < l[i-1]) return false;\n      \
    \  if (!increasing && l[i] > l[i-1]) return false;\n    }\n    return true;\n}",
  "{\n    bool increasing = true;\n    bool decreasing = true;\n    foreach(i, j;\
    \ l)\n    {\n        if(i > j)\n        {\n            increasing = false;\n \
    \       }\n        if(i < j)\n        {\n            decreasing = false;\n   \
    \     }\n    }\n    return increasing || decreasing;\n}", "{\n    if (l.length\
    \ < 2)\n        return true;\n    bool increasing = l[1] > l[0];\n    for (int\
    \ i = 2; i < l.length; i++)\n    {\n        if (increasing)\n        {\n     \
    \       if (l[i] < l[i - 1])\n                return false;\n        }\n     \
    \   else\n        {\n            if (l[i] > l[i - 1])\n                return\
    \ false;\n        }\n    }\n    return true;\n}", "{\n    if (l.length < 2) \n\
    \    {\n        return true;\n    }\n    bool increasing = l[1] > l[0];\n    foreach\
    \ (i, v; l[1..$]) \n    {\n        if (increasing && v < l[i - 1]) \n        {\n\
    \            return false;\n        }\n        if (!increasing && v > l[i - 1])\
    \ \n        {\n            return false;\n        }\n    }\n    return true;\n\
    }\n/*\nReturn True if list elements are monotonically increasing.\n*/", "{\n \
    \   bool increasing = true;\n    bool decreasing = true;\n    for (int i = 1;\
    \ i < l.length; i++)\n    {\n        if (l[i] < l[i - 1])\n            increasing\
    \ = false;\n        if (l[i] > l[i - 1])\n            decreasing = false;\n  \
    \  }\n    return increasing || decreasing;\n}\n/*\nReturn True if list is sorted\
    \ in ascending order.\n                \n*/", "{\n    if (l.length < 2) return\
    \ true;\n    bool increasing = l[1] > l[0];\n    foreach (i, v; l[1..$])\n   \
    \ {\n        if (v < l[i-1])\n        {\n            if (increasing) return false;\n\
    \        }\n        else if (v > l[i-1])\n        {\n            if (!increasing)\
    \ return false;\n        }\n    }\n    return true;\n}\n/*\nReturn True is list\
    \ elements are monotonically increasing or decreasing.\n                \n*/",
  "{\n    bool increasing = true;\n    bool decreasing = true;\n    for (int i = 1;\
    \ i < l.length; i++)\n    {\n        if (l[i] < l[i - 1])\n            increasing\
    \ = false;\n        if (l[i] > l[i - 1])\n            decreasing = false;\n  \
    \  }\n    return increasing || decreasing;\n}", "{\n    bool increasing = true;\n\
    \    bool decreasing = true;\n    foreach(i, j; l)\n    {\n        if(i > j)\n\
    \        {\n            increasing = false;\n        }\n        if(i < j)\n  \
    \      {\n            decreasing = false;\n        }\n    }\n    return increasing\
    \ || decreasing;\n}", "{\n    bool increasing = true;\n    bool decreasing = true;\n\
    \    for (size_t i = 1; i < l.length; i++) \n    {\n        if (l[i] < l[i - 1])\
    \ \n        {\n            increasing = false;\n        }\n        if (l[i] >\
    \ l[i - 1]) \n        {\n            decreasing = false;\n        }\n    }\n \
    \   return increasing || decreasing;\n}\n/*\nReturn True if list is sorted.\n\
    \                \n*/", "{\n    bool increasing = true;\n    bool decreasing =\
    \ true;\n    for (int i = 1; i < l.length; i++)\n    {\n        if (l[i] < l[i\
    \ - 1])\n            increasing = false;\n        if (l[i] > l[i - 1])\n     \
    \       decreasing = false;\n    }\n    return increasing || decreasing;\n}",
  "{\n    bool increasing = true;\n    bool decreasing = true;\n    for (int i = 1;\
    \ i < l.length; i++)\n    {\n        if (l[i] < l[i - 1])\n            increasing\
    \ = false;\n        if (l[i] > l[i - 1])\n            decreasing = false;\n  \
    \  }\n    return increasing || decreasing;\n}", "{\n    bool increasing = true;\n\
    \    bool decreasing = true;\n    for (int i = 1; i < l.length; i++) {\n     \
    \   if (l[i] < l[i - 1]) {\n            increasing = false;\n        }\n     \
    \   if (l[i] > l[i - 1]) {\n            decreasing = false;\n        }\n    }\n\
    \    return increasing || decreasing;\n}\n/*\nReturn True if list is sorted.\n\
    */", "{\n    if (l.length < 2)\n        return true;\n    bool increasing = l[1]\
    \ > l[0];\n    foreach (i, e; l[1..$])\n    {\n        if (increasing && e < l[i-1])\n\
    \            return false;\n        if (!increasing && e > l[i-1])\n         \
    \   return false;\n    }\n    return true;\n}", "{\n    if (l.length < 2)\n  \
    \      return true;\n    bool increasing = l[1] > l[0];\n    for (int i = 1; i\
    \ < l.length; i++)\n    {\n        if (increasing && l[i] < l[i - 1])\n      \
    \      return false;\n        if (!increasing && l[i] > l[i - 1])\n          \
    \  return false;\n    }\n    return true;\n}\n/*\nReturn True if list is sorted\
    \ in ascending order.\n                \n*/", "{\n    if (l.length == 0)\n   \
    \     return true;\n    bool increasing = true;\n    bool decreasing = true;\n\
    \    for (int i = 1; i < l.length; i++)\n    {\n        if (l[i] < l[i - 1])\n\
    \            increasing = false;\n        if (l[i] > l[i - 1])\n            decreasing\
    \ = false;\n    }\n    return increasing || decreasing;\n}\n/*\nReturn True if\
    \ list is sorted in ascending order.\n                \n*/", "{\n    bool increasing\
    \ = true;\n    bool decreasing = true;\n    foreach(i, e; l)\n    {\n        if(i\
    \ > 0)\n        {\n            if(e < l[i-1])\n            {\n               \
    \ increasing = false;\n            }\n            if(e > l[i-1])\n           \
    \ {\n                decreasing = false;\n            }\n        }\n    }\n  \
    \  return increasing || decreasing;\n}", "{\n    bool increasing = true;\n   \
    \ bool decreasing = true;\n    for (int i = 1; i < l.length; i++)\n    {\n   \
    \     if (l[i] < l[i - 1])\n            increasing = false;\n        if (l[i]\
    \ > l[i - 1])\n            decreasing = false;\n    }\n    return increasing ||\
    \ decreasing;\n}", "{\n    bool increasing = true;\n    bool decreasing = true;\n\
    \    for (int i = 1; i < l.length; i++) {\n        if (l[i] < l[i - 1]) {\n  \
    \          increasing = false;\n        }\n        if (l[i] > l[i - 1]) {\n  \
    \          decreasing = false;\n        }\n    }\n    return increasing || decreasing;\n\
    }\n/*\nReturn True if list elements are monotonically increasing.\n*/", "{\n \
    \   if (l.length < 2)\n    {\n        return true;\n    }\n    bool increasing\
    \ = l[0] < l[1];\n    foreach (i, e; l)\n    {\n        if (i > 0)\n        {\n\
    \            if (increasing)\n            {\n                if (e < l[i - 1])\n\
    \                {\n                    return false;\n                }\n   \
    \         }\n            else\n            {\n                if (e > l[i - 1])\n\
    \                {\n                    return false;\n                }\n   \
    \         }\n        }\n    }\n    return true;\n}", "{\n    if (l.length < 2)\n\
    \        return true;\n    bool increasing = l[1] > l[0];\n    for (int i = 2;\
    \ i < l.length; i++)\n    {\n        if (increasing && l[i] < l[i - 1])\n    \
    \        return false;\n        if (!increasing && l[i] > l[i - 1])\n        \
    \    return false;\n    }\n    return true;\n}", "{\n    if (l.length < 2)\n \
    \       return true;\n    bool increasing = l[1] > l[0];\n    foreach (i, e; l[1..$])\n\
    \    {\n        if (increasing && e < l[i-1])\n            return false;\n   \
    \     if (!increasing && e > l[i-1])\n            return false;\n    }\n    return\
    \ true;\n}", "{\n    if (l.length < 2) \n    {\n        return true;\n    }\n\
    \    bool increasing = l[1] > l[0];\n    foreach (i, e; l[1..$]) \n    {\n   \
    \     if (increasing && e < l[i - 1]) \n        {\n            return false;\n\
    \        }\n        if (!increasing && e > l[i - 1]) \n        {\n           \
    \ return false;\n        }\n    }\n    return true;\n}\n/*\nReturn True is list\
    \ elements are monotonically increasing or decreasing.\n                \n*/",
  "{\n    bool increasing = true;\n    bool decreasing = true;\n    foreach(i,e; l)\n\
    \    {\n        if(i > 0)\n        {\n            if(e < l[i-1])\n           \
    \ {\n                increasing = false;\n            }\n            if(e > l[i-1])\n\
    \            {\n                decreasing = false;\n            }\n        }\n\
    \    }\n    return increasing || decreasing;\n}\n/*\nReturn True if list elements\
    \ are monotonically increasing.\n*/", "{\n    if (l.length == 0)\n        return\
    \ true;\n    bool increasing = true;\n    bool decreasing = true;\n    for (int\
    \ i = 1; i < l.length; i++)\n    {\n        if (l[i] < l[i - 1])\n           \
    \ increasing = false;\n        if (l[i] > l[i - 1])\n            decreasing =\
    \ false;\n    }\n    return increasing || decreasing;\n}", "{\n    if (l.length\
    \ < 2) \n    {\n        return true;\n    }\n    bool increasing = l[1] > l[0];\n\
    \    foreach (i, e; l[1..$]) \n    {\n        if (increasing && e < l[i - 1])\
    \ \n        {\n            return false;\n        }\n        if (!increasing &&\
    \ e > l[i - 1]) \n        {\n            return false;\n        }\n    }\n   \
    \ return true;\n}", "{\n    bool increasing = true;\n    bool decreasing = true;\n\
    \    for (int i = 1; i < l.length; i++)\n    {\n        if (l[i] < l[i - 1])\n\
    \            increasing = false;\n        if (l[i] > l[i - 1])\n            decreasing\
    \ = false;\n    }\n    return increasing || decreasing;\n}\n/*\nReturn True if\
    \ list elements are monotonically increasing.\n*/", "{\n    if (l.length == 0)\
    \ return true;\n    bool increasing = l[0] < l[1];\n    for (int i = 1; i < l.length;\
    \ i++)\n    {\n        if (increasing && l[i-1] > l[i]) return false;\n      \
    \  if (!increasing && l[i-1] < l[i]) return false;\n    }\n    return true;\n}",
  "{\n    if (l.length < 2) \n    {\n        return true;\n    }\n    bool increasing\
    \ = l[1] > l[0];\n    for (int i = 1; i < l.length; i++) \n    {\n        if (increasing)\
    \ \n        {\n            if (l[i] < l[i - 1]) \n            {\n            \
    \    return false;\n            }\n        } \n        else \n        {\n    \
    \        if (l[i] > l[i - 1]) \n            {\n                return false;\n\
    \            }\n        }\n    }\n    return true;\n}\n/*\nReturn True if list\
    \ elements are monotonically increasing.\n*/", "{\n    bool increasing = true;\n\
    \    bool decreasing = true;\n    foreach(i,j; zip(l[0..$-1],l[1..$]))\n    {\n\
    \        increasing &= (i < j);\n        decreasing &= (i > j);\n    }\n    return\
    \ increasing || decreasing;\n}", "{\n    if (l.length < 2) \n        return true;\n\
    \    bool increasing = l[1] > l[0];\n    foreach (i, e; l[1..$]) \n    {\n   \
    \     if (e > l[i]) \n        {\n            if (!increasing) \n             \
    \   return false;\n        } \n        else if (e < l[i]) \n        {\n      \
    \      if (increasing) \n                return false;\n        } \n        else\
    \ \n            return false;\n    }\n    return true;\n}", "{\n    bool increasing\
    \ = true;\n    bool decreasing = true;\n    for (int i = 1; i < l.length; i++)\
    \ {\n        if (l[i] < l[i - 1]) {\n            increasing = false;\n       \
    \ }\n        if (l[i] > l[i - 1]) {\n            decreasing = false;\n       \
    \ }\n    }\n    return increasing || decreasing;\n}\n/*\nReturn True if list elements\
    \ are monotonically increasing.\n*/", "{\n    bool increasing = true;\n    bool\
    \ decreasing = true;\n    foreach(i, j; l)\n    {\n        if(i > j)\n       \
    \ {\n            increasing = false;\n        }\n        if(i < j)\n        {\n\
    \            decreasing = false;\n        }\n    }\n    return increasing || decreasing;\n\
    }\n/*\nReturn True if list elements are monotonically increasing.\n*/", "{\n \
    \   bool increasing = true;\n    bool decreasing = true;\n    for (int i = 1;\
    \ i < l.length; i++)\n    {\n        if (l[i] < l[i - 1])\n            increasing\
    \ = false;\n        if (l[i] > l[i - 1])\n            decreasing = false;\n  \
    \  }\n    return increasing || decreasing;\n}\n/*\nReturn True if list elements\
    \ are monotonically increasing.\n*/", "{\n    bool increasing = true;\n    bool\
    \ decreasing = true;\n    foreach(i, j; l)\n    {\n        if(j < i)\n       \
    \ {\n            increasing = false;\n        }\n        if(j > i)\n        {\n\
    \            decreasing = false;\n        }\n    }\n    return increasing || decreasing;\n\
    }", "{\n    bool increasing = true;\n    bool decreasing = true;\n    for (int\
    \ i = 1; i < l.length; i++) {\n        if (l[i] < l[i - 1])\n            increasing\
    \ = false;\n        if (l[i] > l[i - 1])\n            decreasing = false;\n  \
    \  }\n    return increasing || decreasing;\n}", "{\n    bool increasing = true;\n\
    \    bool decreasing = true;\n    foreach(i,j; zip(l[0..$-1],l[1..$]))\n    {\n\
    \        increasing &= i < j;\n        decreasing &= i > j;\n    }\n    return\
    \ increasing || decreasing;\n}", "{\n    bool increasing = true;\n    bool decreasing\
    \ = true;\n    foreach(i,j; zip(l[0..$-1],l[1..$]))\n    {\n        increasing\
    \ &= i < j;\n        decreasing &= i > j;\n    }\n    return increasing || decreasing;\n\
    }", "{\n    if (l.length < 2)\n        return true;\n    bool increasing = l[1]\
    \ > l[0];\n    for (int i = 2; i < l.length; i++)\n    {\n        if (increasing)\n\
    \        {\n            if (l[i] < l[i - 1])\n                return false;\n\
    \        }\n        else\n        {\n            if (l[i] > l[i - 1])\n      \
    \          return false;\n        }\n    }\n    return true;\n}", "{\n    bool\
    \ increasing = true;\n    bool decreasing = true;\n    for (int i = 1; i < l.length;\
    \ i++) {\n        if (l[i] < l[i - 1]) {\n            increasing = false;\n  \
    \      }\n        if (l[i] > l[i - 1]) {\n            decreasing = false;\n  \
    \      }\n    }\n    return increasing || decreasing;\n}\n/*\nReturn True if list\
    \ is sorted in ascending order.\n*/", "{\n    bool increasing = true;\n    bool\
    \ decreasing = true;\n    for (size_t i = 1; i < l.length; i++)\n    {\n     \
    \   if (l[i] < l[i - 1])\n            increasing = false;\n        if (l[i] >\
    \ l[i - 1])\n            decreasing = false;\n    }\n    return increasing ||\
    \ decreasing;\n}", "{\n    if (l.length < 2)\n        return true;\n    bool increasing\
    \ = l[1] > l[0];\n    for (int i = 2; i < l.length; i++)\n    {\n        if (increasing\
    \ && l[i] < l[i - 1])\n            return false;\n        if (!increasing && l[i]\
    \ > l[i - 1])\n            return false;\n    }\n    return true;\n}\n/*\nReturn\
    \ True if list is sorted.\n                \n*/", "{\n    return l.length < 2\
    \ || l[0] < l[1] ? l.all!(a => a < a.next) : l.all!(a => a > a.next);\n}", "{\n\
    \    bool increasing = true;\n    bool decreasing = true;\n    for (int i = 1;\
    \ i < l.length; i++)\n    {\n        if (l[i] < l[i - 1])\n            increasing\
    \ = false;\n        if (l[i] > l[i - 1])\n            decreasing = false;\n  \
    \  }\n    return increasing || decreasing;\n}", "{\n    bool increasing = true;\n\
    \    bool decreasing = true;\n    for (int i = 1; i < l.length; i++) {\n     \
    \   if (l[i] < l[i - 1]) {\n            increasing = false;\n        }\n     \
    \   if (l[i] > l[i - 1]) {\n            decreasing = false;\n        }\n    }\n\
    \    return increasing || decreasing;\n}", "{\n    bool increasing = true;\n \
    \   bool decreasing = true;\n    for (int i = 1; i < l.length; i++) {\n      \
    \  if (l[i] < l[i - 1]) {\n            increasing = false;\n        }\n      \
    \  if (l[i] > l[i - 1]) {\n            decreasing = false;\n        }\n    }\n\
    \    return increasing || decreasing;\n}\n/*\nReturn True if list is sorted in\
    \ ascending order.\n*/", "{\n    bool increasing = true;\n    bool decreasing\
    \ = true;\n    for (int i = 1; i < l.length; i++)\n    {\n        if (l[i] < l[i\
    \ - 1])\n            increasing = false;\n        if (l[i] > l[i - 1])\n     \
    \       decreasing = false;\n    }\n    return increasing || decreasing;\n}",
  "{\n    if (l.length < 2)\n        return true;\n    bool increasing = l[1] > l[0];\n\
    \    for (int i = 1; i < l.length; i++)\n    {\n        if (increasing && l[i]\
    \ < l[i - 1])\n            return false;\n        if (!increasing && l[i] > l[i\
    \ - 1])\n            return false;\n    }\n    return true;\n}", "{\n    bool\
    \ increasing = true;\n    bool decreasing = true;\n    for (int i = 1; i < l.length;\
    \ i++)\n    {\n        if (l[i] < l[i - 1])\n            increasing = false;\n\
    \        if (l[i] > l[i - 1])\n            decreasing = false;\n    }\n    return\
    \ increasing || decreasing;\n}\n/*\nReturn True if list elements are monotonically\
    \ increasing.\n*/", "{\n    bool increasing = true;\n    bool decreasing = true;\n\
    \    foreach(i, j; zip(l[0..$-1], l[1..$]))\n    {\n        increasing &= i <\
    \ j;\n        decreasing &= i > j;\n    }\n    return increasing || decreasing;\n\
    }", "{\n    bool increasing = true;\n    bool decreasing = true;\n    foreach(i,\
    \ j; l)\n    {\n        if(i > j)\n        {\n            increasing = false;\n\
    \        }\n        if(i < j)\n        {\n            decreasing = false;\n  \
    \      }\n    }\n    return increasing || decreasing;\n}", "{\n    if (l.length\
    \ < 2)\n        return true;\n    bool increasing = l[1] > l[0];\n    foreach\
    \ (i, e; l[1..$])\n    {\n        if (increasing && e < l[i-1])\n            return\
    \ false;\n        if (!increasing && e > l[i-1])\n            return false;\n\
    \    }\n    return true;\n}", "{\n    if (l.length < 2) return true;\n    bool\
    \ increasing = l[1] > l[0];\n    for (int i = 1; i < l.length; i++) \n    {\n\
    \        if (increasing) \n        {\n            if (l[i] < l[i - 1]) return\
    \ false;\n        } \n        else \n        {\n            if (l[i] > l[i - 1])\
    \ return false;\n        }\n    }\n    return true;\n}", "{\n    bool increasing\
    \ = true;\n    bool decreasing = true;\n    foreach(i,e; l)\n    {\n        if(i>0)\n\
    \        {\n            increasing &= (e >= l[i-1]);\n            decreasing &=\
    \ (e <= l[i-1]);\n        }\n    }\n    return increasing || decreasing;\n}",
  "{\n    bool increasing = true;\n    bool decreasing = true;\n    foreach(i, v;\
    \ l)\n    {\n        if(i > 0)\n        {\n            if(v < l[i-1])\n      \
    \      {\n                increasing = false;\n            }\n            if(v\
    \ > l[i-1])\n            {\n                decreasing = false;\n            }\n\
    \        }\n    }\n    return increasing || decreasing;\n}", "{\n    bool increasing\
    \ = true;\n    bool decreasing = true;\n    for (int i = 1; i < l.length; i++)\n\
    \    {\n        if (l[i] < l[i - 1])\n            increasing = false;\n      \
    \  if (l[i] > l[i - 1])\n            decreasing = false;\n    }\n    return increasing\
    \ || decreasing;\n}", "{\n    if (l.length < 2)\n        return true;\n    bool\
    \ increasing = l[1] > l[0];\n    for (int i = 1; i < l.length; i++)\n    {\n \
    \       if (increasing && l[i] < l[i - 1])\n            return false;\n      \
    \  if (!increasing && l[i] > l[i - 1])\n            return false;\n    }\n   \
    \ return true;\n}", "{\n    bool increasing = true;\n    bool decreasing = true;\n\
    \    for (int i = 1; i < l.length; i++)\n    {\n        if (l[i] < l[i - 1])\n\
    \            increasing = false;\n        if (l[i] > l[i - 1])\n            decreasing\
    \ = false;\n    }\n    return increasing || decreasing;\n}", "{\n    bool increasing\
    \ = true;\n    bool decreasing = true;\n    for (size_t i = 1; i < l.length; i++)\n\
    \    {\n        if (l[i] < l[i - 1])\n            increasing = false;\n      \
    \  if (l[i] > l[i - 1])\n            decreasing = false;\n    }\n    return increasing\
    \ || decreasing;\n}\n/*\nReturn True if list elements are monotonically increasing.\n\
    */", "{\n    if (l.length < 2) \n        return true;\n    bool increasing = l[1]\
    \ > l[0];\n    for (int i = 2; i < l.length; i++) \n    {\n        if (increasing\
    \ && l[i] < l[i - 1]) \n            return false;\n        if (!increasing &&\
    \ l[i] > l[i - 1]) \n            return false;\n    }\n    return true;\n}", "{\n\
    \    bool increasing = true;\n    bool decreasing = true;\n    for (int i = 1;\
    \ i < l.length; i++) {\n        if (l[i] < l[i - 1]) {\n            increasing\
    \ = false;\n        }\n        if (l[i] > l[i - 1]) {\n            decreasing\
    \ = false;\n        }\n    }\n    return increasing || decreasing;\n}", "{\n \
    \   bool increasing = true;\n    bool decreasing = true;\n    foreach(i,j; zip(l[0..$-1],l[1..$]))\n\
    \    {\n        increasing &= (i<j);\n        decreasing &= (i>j);\n    }\n  \
    \  return increasing || decreasing;\n}", "{\n    bool increasing = true;\n   \
    \ bool decreasing = true;\n    for (int i = 1; i < l.length; i++)\n    {\n   \
    \     if (l[i] < l[i - 1])\n            increasing = false;\n        if (l[i]\
    \ > l[i - 1])\n            decreasing = false;\n    }\n    return increasing ||\
    \ decreasing;\n}", "{\n    if (l.length < 2)\n        return true;\n    bool increasing\
    \ = l[1] > l[0];\n    for (int i = 1; i < l.length - 1; i++)\n    {\n        if\
    \ (increasing)\n        {\n            if (l[i + 1] < l[i])\n                return\
    \ false;\n        }\n        else\n        {\n            if (l[i + 1] > l[i])\n\
    \                return false;\n        }\n    }\n    return true;\n}", "{\n \
    \   if (l.length < 2)\n        return true;\n    bool increasing = l[1] > l[0];\n\
    \    foreach (i, e; l[1..$])\n    {\n        if (e > l[i])\n        {\n      \
    \      if (!increasing)\n                return false;\n        }\n        else\
    \ if (e < l[i])\n        {\n            if (increasing)\n                return\
    \ false;\n        }\n    }\n    return true;\n}", "{\n    if (l.length < 2) \n\
    \        return true;\n    bool increasing = l[1] > l[0];\n    foreach (i, e;\
    \ l[1..$]) \n    {\n        if (increasing && e < l[i - 1]) \n            return\
    \ false;\n        if (!increasing && e > l[i - 1]) \n            return false;\n\
    \    }\n    return true;\n}", "{\n    if (l.length < 2) return true;\n    bool\
    \ increasing = l[1] > l[0];\n    foreach (i, e; l[1..$])\n    {\n        if (e\
    \ > l[i])\n        {\n            if (!increasing) return false;\n        }\n\
    \        else if (e < l[i])\n        {\n            if (increasing) return false;\n\
    \        }\n    }\n    return true;\n}", "{\n    if (l.length < 2) \n    {\n \
    \       return true;\n    }\n    bool increasing = l[1] > l[0];\n    foreach (i,\
    \ e; l[1..$]) \n    {\n        if (increasing) \n        {\n            if (e\
    \ < l[i - 1]) \n            {\n                return false;\n            }\n\
    \        } \n        else \n        {\n            if (e > l[i - 1]) \n      \
    \      {\n                return false;\n            }\n        }\n    }\n   \
    \ return true;\n}\n/*\nReturn True if list elements are monotonically increasing.\n\
    \                \n*/", "{\n    bool increasing = true;\n    bool decreasing =\
    \ true;\n    for (int i = 1; i < l.length; i++)\n    {\n        if (l[i] < l[i\
    \ - 1])\n            increasing = false;\n        if (l[i] > l[i - 1])\n     \
    \       decreasing = false;\n    }\n    return increasing || decreasing;\n}\n\
    /*\nReturn True if list elements are monotonically increasing.\n*/", "{\n    bool\
    \ increasing = true;\n    bool decreasing = true;\n    for (int i = 1; i < l.length;\
    \ i++) {\n        if (l[i] < l[i - 1]) {\n            increasing = false;\n  \
    \      }\n        if (l[i] > l[i - 1]) {\n            decreasing = false;\n  \
    \      }\n    }\n    return increasing || decreasing;\n}", "{\n    bool increasing\
    \ = true;\n    bool decreasing = true;\n    foreach(i, j; l)\n    {\n        if(i\
    \ > j)\n        {\n            increasing = false;\n        }\n        if(i <\
    \ j)\n        {\n            decreasing = false;\n        }\n    }\n    return\
    \ increasing || decreasing;\n}", "{\n    bool increasing = true;\n    bool decreasing\
    \ = true;\n    for (int i = 1; i < l.length; i++)\n    {\n        if (l[i] < l[i\
    \ - 1])\n            increasing = false;\n        if (l[i] > l[i - 1])\n     \
    \       decreasing = false;\n    }\n    return increasing || decreasing;\n}",
  "{\n    if (l.length < 2) \n        return true;\n    bool increasing = l[1] > l[0];\n\
    \    foreach (i, e; l[1..$]) \n    {\n        if (e == l[i]) \n            continue;\n\
    \        if (increasing && e < l[i]) \n            return false;\n        if (!increasing\
    \ && e > l[i]) \n            return false;\n    }\n    return true;\n}", "{\n\
    \    bool increasing = true;\n    bool decreasing = true;\n    foreach(i, v; l)\n\
    \    {\n        if(i > 0)\n        {\n            if(v < l[i-1])\n           \
    \ {\n                increasing = false;\n            }\n            if(v > l[i-1])\n\
    \            {\n                decreasing = false;\n            }\n        }\n\
    \    }\n    return increasing || decreasing;\n}\n/*\nReturn True if list elements\
    \ are monotonically increasing.\n*/", "{\n    if (l.length < 2)\n        return\
    \ true;\n    bool increasing = l[1] > l[0];\n    for (int i = 2; i < l.length;\
    \ i++)\n    {\n        if (increasing && l[i] < l[i - 1])\n            return\
    \ false;\n        if (!increasing && l[i] > l[i - 1])\n            return false;\n\
    \    }\n    return true;\n}", "{\n    if (l.length < 2)\n        return true;\n\
    \    bool increasing = l[1] > l[0];\n    for (int i = 1; i < l.length; i++)\n\
    \    {\n        if (increasing)\n        {\n            if (l[i] < l[i - 1])\n\
    \                return false;\n        }\n        else\n        {\n         \
    \   if (l[i] > l[i - 1])\n                return false;\n        }\n    }\n  \
    \  return true;\n}\n/*\nReturn True if list elements are monotonically increasing.\n\
    */", "{\n    if (l.length < 2) return true;\n    bool increasing = l[1] > l[0];\n\
    \    for (int i = 2; i < l.length; i++)\n    {\n        if (increasing)\n    \
    \    {\n            if (l[i] < l[i-1]) return false;\n        }\n        else\n\
    \        {\n            if (l[i] > l[i-1]) return false;\n        }\n    }\n \
    \   return true;\n}", "{\n    bool increasing = true;\n    bool decreasing = true;\n\
    \    foreach(i,j; zip(l[0..$-1],l[1..$]))\n    {\n        increasing &= i<j;\n\
    \        decreasing &= i>j;\n    }\n    return increasing || decreasing;\n}",
  "{\n    bool increasing = true;\n    bool decreasing = true;\n    for (int i = 1;\
    \ i < l.length; i++) {\n        if (l[i] < l[i - 1]) {\n            increasing\
    \ = false;\n        }\n        if (l[i] > l[i - 1]) {\n            decreasing\
    \ = false;\n        }\n    }\n    return increasing || decreasing;\n}", "{\n \
    \   bool increasing = true;\n    bool decreasing = true;\n    for (int i = 1;\
    \ i < l.length; i++)\n    {\n        if (l[i] < l[i - 1])\n            increasing\
    \ = false;\n        if (l[i] > l[i - 1])\n            decreasing = false;\n  \
    \  }\n    return increasing || decreasing;\n}", "{\n    if (l.length == 0)\n \
    \       return true;\n    bool increasing = l[0] < l[1];\n    for (int i = 1;\
    \ i < l.length - 1; i++)\n    {\n        if (increasing)\n        {\n        \
    \    if (l[i] > l[i + 1])\n                return false;\n        }\n        else\n\
    \        {\n            if (l[i] < l[i + 1])\n                return false;\n\
    \        }\n    }\n    return true;\n}", "{\n    bool increasing = true;\n   \
    \ bool decreasing = true;\n    for (int i = 1; i < l.length; i++)\n    {\n   \
    \     if (l[i] < l[i - 1])\n            increasing = false;\n        if (l[i]\
    \ > l[i - 1])\n            decreasing = false;\n    }\n    return increasing ||\
    \ decreasing;\n}\n/*\nReturn True if list elements are monotonically increasing.\n\
    \                \n*/", "{\n    if (l.length < 2)\n        return true;\n    bool\
    \ increasing = l[1] > l[0];\n    for (int i = 1; i < l.length - 1; i++)\n    {\n\
    \        if (increasing && l[i + 1] < l[i])\n            return false;\n     \
    \   if (!increasing && l[i + 1] > l[i])\n            return false;\n    }\n  \
    \  return true;\n}\n/*\nReturn True if list is sorted in ascending order.\n*/",
  "{\n    bool increasing = true;\n    bool decreasing = true;\n    foreach(i,j; zip(l[1..$],l[0..$-1]))\n\
    \    {\n        increasing &= i > j;\n        decreasing &= i < j;\n    }\n  \
    \  return increasing || decreasing;\n}", "{\n    bool increasing = true;\n   \
    \ bool decreasing = true;\n    for (int i = 1; i < l.length; i++)\n    {\n   \
    \     if (l[i] < l[i - 1])\n            increasing = false;\n        if (l[i]\
    \ > l[i - 1])\n            decreasing = false;\n    }\n    return increasing ||\
    \ decreasing;\n}\n/*\nReturn True if list elements are monotonically increasing.\n\
    */", "{\n    bool increasing = true;\n    bool decreasing = true;\n    for (int\
    \ i = 1; i < l.length; i++)\n    {\n        if (l[i] < l[i - 1])\n           \
    \ increasing = false;\n        if (l[i] > l[i - 1])\n            decreasing =\
    \ false;\n    }\n    return increasing || decreasing;\n}\n/*\nReturn True if list\
    \ elements are monotonically increasing.\n*/", "{\n    if (l.length < 2)\n   \
    \ {\n        return true;\n    }\n    bool increasing = l[0] < l[1];\n    for\
    \ (int i = 1; i < l.length - 1; i++)\n    {\n        if (increasing && l[i] >\
    \ l[i + 1])\n        {\n            return false;\n        }\n        if (!increasing\
    \ && l[i] < l[i + 1])\n        {\n            return false;\n        }\n    }\n\
    \    return true;\n}", "{\n    bool increasing = true;\n    bool decreasing =\
    \ true;\n    for (int i = 1; i < l.length; i++)\n    {\n        if (l[i] < l[i\
    \ - 1])\n            increasing = false;\n        if (l[i] > l[i - 1])\n     \
    \       decreasing = false;\n    }\n    return increasing || decreasing;\n}\n\
    /*\nReturn True if list elements are monotonically increasing.\n*/", "{\n    bool\
    \ increasing = true;\n    bool decreasing = true;\n    for (int i = 1; i < l.length;\
    \ i++)\n    {\n        if (l[i] < l[i - 1])\n            increasing = false;\n\
    \        if (l[i] > l[i - 1])\n            decreasing = false;\n    }\n    return\
    \ increasing || decreasing;\n}\n/*\nReturn True if list is sorted in ascending\
    \ order.\n*/", "{\n    bool increasing = true;\n    bool decreasing = true;\n\
    \    for (int i = 1; i < l.length; i++)\n    {\n        if (l[i] < l[i - 1])\n\
    \            increasing = false;\n        if (l[i] > l[i - 1])\n            decreasing\
    \ = false;\n    }\n    return increasing || decreasing;\n}", "{\n    if (l.length\
    \ < 2) \n    {\n        return true;\n    }\n    bool increasing = l[1] > l[0];\n\
    \    foreach (i, e; l[1..$]) \n    {\n        if (increasing && e < l[i - 1])\
    \ \n        {\n            return false;\n        }\n        if (!increasing &&\
    \ e > l[i - 1]) \n        {\n            return false;\n        }\n    }\n   \
    \ return true;\n}\n/*\nReturn True if list elements are monotonically increasing.\n\
    \                \n*/", "{\n    if (l.length < 2) return true;\n    bool increasing\
    \ = l[1] > l[0];\n    for (int i = 1; i < l.length; i++)\n    {\n        if (increasing)\n\
    \        {\n            if (l[i] < l[i-1]) return false;\n        }\n        else\n\
    \        {\n            if (l[i] > l[i-1]) return false;\n        }\n    }\n \
    \   return true;\n}", "{\n    bool increasing = true;\n    bool decreasing = true;\n\
    \    foreach(i, j; l)\n    {\n        if(i > j)\n        {\n            increasing\
    \ = false;\n        }\n        if(i < j)\n        {\n            decreasing =\
    \ false;\n        }\n    }\n    return increasing || decreasing;\n}", "{\n   \
    \ if (l.length < 2) return true;\n    bool increasing = l[1] > l[0];\n    for\
    \ (int i = 2; i < l.length; i++)\n    {\n        if (increasing && l[i] < l[i-1])\
    \ return false;\n        if (!increasing && l[i] > l[i-1]) return false;\n   \
    \ }\n    return true;\n}\n/*\nReturn True if list is sorted.\n               \
    \ \n*/", "{\n    bool increasing = true;\n    bool decreasing = true;\n    for\
    \ (int i = 1; i < l.length; i++) {\n        if (l[i] < l[i - 1]) {\n         \
    \   increasing = false;\n        }\n        if (l[i] > l[i - 1]) {\n         \
    \   decreasing = false;\n        }\n    }\n    return increasing || decreasing;\n\
    }", "{\n    if (l.length < 2)\n        return true;\n    bool increasing = l[1]\
    \ > l[0];\n    foreach (i, e; l[1..$])\n    {\n        if (increasing && e < l[i-1])\n\
    \            return false;\n        if (!increasing && e > l[i-1])\n         \
    \   return false;\n    }\n    return true;\n}", "{\n    bool increasing = true;\n\
    \    bool decreasing = true;\n    foreach(i,j; zip(l[0..$-1],l[1..$]))\n    {\n\
    \        increasing &= (i < j);\n        decreasing &= (i > j);\n    }\n    return\
    \ increasing || decreasing;\n}\n/*\nReturn True is list elements are monotonically\
    \ increasing or decreasing.\n                \n*/", "{\n    bool increasing =\
    \ true;\n    bool decreasing = true;\n    foreach(i,j; zip(l[0..$-1],l[1..$]))\n\
    \    {\n        increasing &= i < j;\n        decreasing &= i > j;\n    }\n  \
    \  return increasing || decreasing;\n}", "{\n    bool increasing = true;\n   \
    \ bool decreasing = true;\n    for (int i = 1; i < l.length; i++)\n    {\n   \
    \     if (l[i] < l[i - 1])\n            increasing = false;\n        if (l[i]\
    \ > l[i - 1])\n            decreasing = false;\n    }\n    return increasing ||\
    \ decreasing;\n}\n/*\nReturn True if list elements are monotonically increasing.\n\
    \                \n*/", "{\n    bool increasing = true;\n    bool decreasing =\
    \ true;\n    for (int i = 1; i < l.length; i++)\n    {\n        if (l[i] < l[i\
    \ - 1])\n            increasing = false;\n        if (l[i] > l[i - 1])\n     \
    \       decreasing = false;\n    }\n    return increasing || decreasing;\n}\n\
    /*\nReturn True if list elements are monotonically increasing.\n             \
    \   \n*/", "{\n    bool increasing = true;\n    bool decreasing = true;\n    foreach(i,x;l)\n\
    \    {\n        if(i>0)\n        {\n            if(l[i]<l[i-1])\n            {\n\
    \                increasing = false;\n            }\n            if(l[i]>l[i-1])\n\
    \            {\n                decreasing = false;\n            }\n        }\n\
    \    }\n    return increasing || decreasing;\n}", "{\n    bool increasing = true;\n\
    \    bool decreasing = true;\n    foreach(i, j; zip(l[0..$-1], l[1..$]))\n   \
    \ {\n        increasing &= i < j;\n        decreasing &= i > j;\n    }\n    return\
    \ increasing || decreasing;\n}\n/*\nReturn True if list elements are monotonically\
    \ increasing.\n*/", "{\n    bool increasing = true;\n    bool decreasing = true;\n\
    \    for (int i = 1; i < l.length; i++)\n    {\n        if (l[i] < l[i - 1])\n\
    \            increasing = false;\n        if (l[i] > l[i - 1])\n            decreasing\
    \ = false;\n    }\n    return increasing || decreasing;\n}", "{\n    bool increasing\
    \ = true;\n    bool decreasing = true;\n    for (size_t i = 1; i < l.length; i++)\
    \ \n    {\n        if (l[i-1] > l[i]) \n        {\n            increasing = false;\n\
    \        }\n        if (l[i-1] < l[i]) \n        {\n            decreasing = false;\n\
    \        }\n    }\n    return increasing || decreasing;\n}\n/*\nReturn True if\
    \ list is sorted in ascending order.\n*/", "{\n    bool increasing = true;\n \
    \   bool decreasing = true;\n    for (int i = 1; i < l.length; i++)\n    {\n \
    \       if (l[i] < l[i - 1])\n            increasing = false;\n        if (l[i]\
    \ > l[i - 1])\n            decreasing = false;\n    }\n    return increasing ||\
    \ decreasing;\n}", "{\n    bool increasing = true;\n    bool decreasing = true;\n\
    \    for (int i = 1; i < l.length; i++)\n    {\n        if (l[i] < l[i - 1])\n\
    \            increasing = false;\n        if (l[i] > l[i - 1])\n            decreasing\
    \ = false;\n    }\n    return increasing || decreasing;\n}\n/*\nReturn True if\
    \ list elements are monotonically increasing.\n*/", "{\n    bool increasing =\
    \ true;\n    bool decreasing = true;\n    for (int i = 1; i < l.length; i++) {\n\
    \        if (l[i] < l[i - 1]) {\n            increasing = false;\n        }\n\
    \        if (l[i] > l[i - 1]) {\n            decreasing = false;\n        }\n\
    \    }\n    return increasing || decreasing;\n}", "{\n    bool increasing = true;\n\
    \    bool decreasing = true;\n    foreach(i,j; zip(l[0..$-1],l[1..$]))\n    {\n\
    \        increasing &= i<j;\n        decreasing &= i>j;\n    }\n    return increasing\
    \ || decreasing;\n}", "{\n    bool increasing = true;\n    bool decreasing = true;\n\
    \    for (int i = 1; i < l.length; i++) {\n        if (l[i] < l[i - 1]) {\n  \
    \          increasing = false;\n        }\n        if (l[i] > l[i - 1]) {\n  \
    \          decreasing = false;\n        }\n    }\n    return increasing || decreasing;\n\
    }", "{\n    bool increasing = true;\n    bool decreasing = true;\n    for (int\
    \ i = 1; i < l.length; i++)\n    {\n        if (l[i] < l[i - 1])\n           \
    \ increasing = false;\n        if (l[i] > l[i - 1])\n            decreasing =\
    \ false;\n    }\n    return increasing || decreasing;\n}", "{\n    if (l.length\
    \ < 2)\n        return true;\n    bool increasing = l[1] > l[0];\n    for (int\
    \ i = 1; i < l.length - 1; i++)\n    {\n        if (increasing && l[i + 1] < l[i])\n\
    \            return false;\n        if (!increasing && l[i + 1] > l[i])\n    \
    \        return false;\n    }\n    return true;\n}", "{\n    if (l.length < 2)\n\
    \        return true;\n    bool increasing = l[1] > l[0];\n    for (int i = 2;\
    \ i < l.length; i++)\n    {\n        if (increasing)\n        {\n            if\
    \ (l[i] < l[i - 1])\n                return false;\n        }\n        else\n\
    \        {\n            if (l[i] > l[i - 1])\n                return false;\n\
    \        }\n    }\n    return true;\n}", "{\n    if (l.length < 2)\n        return\
    \ true;\n    bool increasing = l[1] > l[0];\n    for (int i = 1; i < l.length;\
    \ i++)\n    {\n        if (increasing)\n        {\n            if (l[i] < l[i\
    \ - 1])\n                return false;\n        }\n        else\n        {\n \
    \           if (l[i] > l[i - 1])\n                return false;\n        }\n \
    \   }\n    return true;\n}", "{\n    bool increasing = true;\n    bool decreasing\
    \ = true;\n    for (int i = 1; i < l.length; i++)\n    {\n        if (l[i] < l[i\
    \ - 1])\n            increasing = false;\n        if (l[i] > l[i - 1])\n     \
    \       decreasing = false;\n    }\n    return increasing || decreasing;\n}\n\
    /*\nReturn True if list elements are monotonically increasing.\n*/", "{\n    bool\
    \ increasing = true;\n    bool decreasing = true;\n    for (int i = 1; i < l.length;\
    \ i++)\n    {\n        if (l[i] < l[i - 1])\n            increasing = false;\n\
    \        if (l[i] > l[i - 1])\n            decreasing = false;\n    }\n    return\
    \ increasing || decreasing;\n}\n/*\nReturn True if list elements are monotonically\
    \ increasing.\n*/", "{\n    if (l.length < 2)\n        return true;\n    bool\
    \ increasing = l[1] > l[0];\n    for (int i = 1; i < l.length; i++)\n    {\n \
    \       if (increasing)\n        {\n            if (l[i] < l[i - 1])\n       \
    \         return false;\n        }\n        else\n        {\n            if (l[i]\
    \ > l[i - 1])\n                return false;\n        }\n    }\n    return true;\n\
    }\n/*\nReturn True if list elements are monotonically increasing or decreasing.\n\
    \                \n*/", "{\n    if (l.length < 2) return true;\n    bool increasing\
    \ = l[1] > l[0];\n    foreach (i, e; l[1..$])\n    {\n        if (e > l[i])\n\
    \        {\n            if (!increasing) return false;\n        }\n        else\
    \ if (e < l[i])\n        {\n            if (increasing) return false;\n      \
    \  }\n    }\n    return true;\n}", "{\n    bool increasing = true;\n    bool decreasing\
    \ = true;\n    foreach(i, j; l)\n    {\n        if(i > j)\n        {\n       \
    \     increasing = false;\n        }\n        if(i < j)\n        {\n         \
    \   decreasing = false;\n        }\n    }\n    return increasing || decreasing;\n\
    }", "{\n    if (l.length < 2) \n        return true;\n    bool increasing = l[1]\
    \ > l[0];\n    for (int i = 2; i < l.length; i++) \n    {\n        if (increasing)\
    \ \n        {\n            if (l[i] < l[i - 1]) \n                return false;\n\
    \        } \n        else \n        {\n            if (l[i] > l[i - 1]) \n   \
    \             return false;\n        }\n    }\n    return true;\n}", "{\n    if\
    \ (l.length < 2)\n        return true;\n    bool increasing = l[1] > l[0];\n \
    \   for (int i = 2; i < l.length; i++)\n    {\n        if (increasing && l[i]\
    \ < l[i - 1])\n            return false;\n        if (!increasing && l[i] > l[i\
    \ - 1])\n            return false;\n    }\n    return true;\n}", "{\n    if (l.length\
    \ < 2) return true;\n    bool increasing = l[1] > l[0];\n    for (int i = 1; i\
    \ < l.length; i++)\n    {\n        if (increasing)\n        {\n            if\
    \ (l[i] < l[i-1]) return false;\n        }\n        else\n        {\n        \
    \    if (l[i] > l[i-1]) return false;\n        }\n    }\n    return true;\n}",
  "{\n    bool increasing = true;\n    bool decreasing = true;\n    foreach(i,e; l)\n\
    \    {\n        if(i>0)\n        {\n            if(e>l[i-1])\n               \
    \ decreasing = false;\n            if(e<l[i-1])\n                increasing =\
    \ false;\n        }\n    }\n    return increasing || decreasing;\n}\n/*\nReturn\
    \ True is list elements are monotonically increasing or decreasing.\n        \
    \        \n*/", "{\n    bool increasing = true;\n    bool decreasing = true;\n\
    \    foreach(i,e; l)\n    {\n        if(i > 0)\n        {\n            if(e <\
    \ l[i-1])\n            {\n                increasing = false;\n            }\n\
    \            if(e > l[i-1])\n            {\n                decreasing = false;\n\
    \            }\n        }\n    }\n    return increasing || decreasing;\n}\n/*\n\
    Return True is list elements are monotonically increasing or decreasing.\n   \
    \             \n*/", "{\n    bool increasing = true;\n    bool decreasing = true;\n\
    \    for (int i = 1; i < l.length; i++)\n    {\n        if (l[i] < l[i - 1])\n\
    \            increasing = false;\n        if (l[i] > l[i - 1])\n            decreasing\
    \ = false;\n    }\n    return increasing || decreasing;\n}", "{\n    bool increasing\
    \ = true;\n    bool decreasing = true;\n    foreach(i, j; l)\n    {\n        if(i\
    \ > j)\n        {\n            increasing = false;\n        }\n        if(i <\
    \ j)\n        {\n            decreasing = false;\n        }\n    }\n    return\
    \ increasing || decreasing;\n}", "{\n    if (l.length < 2)\n        return true;\n\
    \    if (l[0] < l[1])\n    {\n        for (int i = 1; i < l.length - 1; i++)\n\
    \        {\n            if (l[i] > l[i + 1])\n                return false;\n\
    \        }\n    }\n    else\n    {\n        for (int i = 1; i < l.length - 1;\
    \ i++)\n        {\n            if (l[i] < l[i + 1])\n                return false;\n\
    \        }\n    }\n    return true;\n}", "{\n    if (l.length < 2)\n        return\
    \ true;\n    bool increasing = l[1] > l[0];\n    for (int i = 1; i < l.length;\
    \ i++)\n    {\n        if (increasing && l[i] < l[i - 1])\n            return\
    \ false;\n        if (!increasing && l[i] > l[i - 1])\n            return false;\n\
    \    }\n    return true;\n}\n/*\nReturn True if list elements are monotonically\
    \ increasing.\n                \n*/", "{\n    long[] l2 = l.dup;\n    l2.sort;\n\
    \    return l == l2 || l == l2.reverse;\n}", "{\n    bool increasing = true;\n\
    \    bool decreasing = true;\n    foreach(i, j; zip(l[0..$-1], l[1..$]))\n   \
    \ {\n        increasing &= i < j;\n        decreasing &= i > j;\n    }\n    return\
    \ increasing || decreasing;\n}", "{\n    if (l.length < 2) return true;\n    bool\
    \ increasing = l[1] > l[0];\n    for (int i = 2; i < l.length; i++)\n    {\n \
    \       if (increasing)\n        {\n            if (l[i] < l[i-1]) return false;\n\
    \        }\n        else\n        {\n            if (l[i] > l[i-1]) return false;\n\
    \        }\n    }\n    return true;\n}", "{\n    bool increasing = true;\n   \
    \ bool decreasing = true;\n    for (int i = 1; i < l.length; i++)\n    {\n   \
    \     if (l[i] < l[i - 1])\n            increasing = false;\n        if (l[i]\
    \ > l[i - 1])\n            decreasing = false;\n    }\n    return increasing ||\
    \ decreasing;\n}\n/*\nReturn True if all elements of the list are unique.\n*/",
  "{\n    bool increasing = true;\n    bool decreasing = true;\n    for (int i = 1;\
    \ i < l.length; i++)\n    {\n        if (l[i] < l[i - 1])\n            increasing\
    \ = false;\n        if (l[i] > l[i - 1])\n            decreasing = false;\n  \
    \  }\n    return increasing || decreasing;\n}", "{\n    bool increasing = true;\n\
    \    bool decreasing = true;\n    for (int i = 1; i < l.length; i++)\n    {\n\
    \        if (l[i] < l[i - 1])\n            increasing = false;\n        if (l[i]\
    \ > l[i - 1])\n            decreasing = false;\n    }\n    return increasing ||\
    \ decreasing;\n}\n/*\nReturn True if list elements are monotonically increasing.\n\
    */", "{\n    if (l.length == 0) return true;\n    bool increasing = true;\n  \
    \  foreach (i, v; l) {\n        if (i > 0) {\n            if (increasing) {\n\
    \                if (v < l[i-1]) {\n                    increasing = false;\n\
    \                }\n            } else {\n                if (v > l[i-1]) {\n\
    \                    return false;\n                }\n            }\n       \
    \ }\n    }\n    return true;\n}", "{\n    if (l.length < 2)\n        return true;\n\
    \    bool increasing = l[1] > l[0];\n    for (int i = 1; i < l.length; i++)\n\
    \    {\n        if (increasing)\n        {\n            if (l[i] < l[i - 1])\n\
    \                return false;\n        }\n        else\n        {\n         \
    \   if (l[i] > l[i - 1])\n                return false;\n        }\n    }\n  \
    \  return true;\n}\n/*\nReturn True if list elements are monotonically increasing.\n\
    \                \n*/", "{\n    if (l.length < 2) return true;\n    bool increasing\
    \ = l[1] > l[0];\n    for (int i = 1; i < l.length; i++)\n    {\n        if (l[i]\
    \ > l[i-1] != increasing) return false;\n    }\n    return true;\n}", "{\n   \
    \ bool increasing = true;\n    bool decreasing = true;\n    foreach(i,e; l)\n\
    \    {\n        if(i != 0)\n        {\n            increasing &= e > l[i-1];\n\
    \            decreasing &= e < l[i-1];\n        }\n    }\n    return increasing\
    \ || decreasing;\n}", "{\n    bool increasing = true;\n    bool decreasing = true;\n\
    \    foreach(i, j; l)\n    {\n        if(j < i)\n        {\n            increasing\
    \ = false;\n        }\n        if(j > i)\n        {\n            decreasing =\
    \ false;\n        }\n    }\n    return increasing || decreasing;\n}", "{\n   \
    \ return l.length < 2 || l[0] == l[1] || l[0] < l[1] == all!((a, b) => a <= b)(l);\n\
    }", "{\n    bool increasing = true;\n    bool decreasing = true;\n    foreach(i,\
    \ j; l)\n    {\n        if(i > j)\n        {\n            increasing = false;\n\
    \        }\n        if(i < j)\n        {\n            decreasing = false;\n  \
    \      }\n    }\n    return increasing || decreasing;\n}", "{\n    bool increasing\
    \ = true;\n    bool decreasing = true;\n    for (int i = 1; i < l.length; i++)\
    \ {\n        if (l[i] < l[i - 1]) {\n            increasing = false;\n       \
    \ }\n        if (l[i] > l[i - 1]) {\n            decreasing = false;\n       \
    \ }\n    }\n    return increasing || decreasing;\n}\n/*\nReturn True if list is\
    \ sorted in ascending order.\n                \n*/", "{\n    if (l.length < 2)\
    \ return true;\n    bool increasing = l[1] > l[0];\n    for (int i = 1; i < l.length;\
    \ i++)\n    {\n        if (increasing)\n        {\n            if (l[i] < l[i-1])\
    \ return false;\n        }\n        else\n        {\n            if (l[i] > l[i-1])\
    \ return false;\n        }\n    }\n    return true;\n}", "{\n    if (l.length\
    \ < 2) return true;\n    bool increasing = l[1] > l[0];\n    for (int i = 2; i\
    \ < l.length; i++)\n    {\n        if (increasing && l[i] < l[i-1]) return false;\n\
    \        if (!increasing && l[i] > l[i-1]) return false;\n    }\n    return true;\n\
    }", "{\n    bool increasing = true;\n    bool decreasing = true;\n    for (int\
    \ i = 1; i < l.length; i++) {\n        if (l[i] < l[i - 1]) {\n            increasing\
    \ = false;\n        }\n        if (l[i] > l[i - 1]) {\n            decreasing\
    \ = false;\n        }\n    }\n    return increasing || decreasing;\n}", "{\n \
    \   bool increasing = true;\n    bool decreasing = true;\n    for (int i = 1;\
    \ i < l.length; i++)\n    {\n        if (l[i] < l[i - 1])\n            increasing\
    \ = false;\n        if (l[i] > l[i - 1])\n            decreasing = false;\n  \
    \  }\n    return increasing || decreasing;\n}", "{\n    bool increasing = true;\n\
    \    bool decreasing = true;\n    for (int i = 1; i < l.length; i++)\n    {\n\
    \        if (l[i] < l[i - 1])\n            increasing = false;\n        if (l[i]\
    \ > l[i - 1])\n            decreasing = false;\n    }\n    return increasing ||\
    \ decreasing;\n}", "{\n    bool increasing = true;\n    bool decreasing = true;\n\
    \    for (int i = 1; i < l.length; i++)\n    {\n        if (l[i] < l[i - 1])\n\
    \            increasing = false;\n        if (l[i] > l[i - 1])\n            decreasing\
    \ = false;\n    }\n    return increasing || decreasing;\n}", "{\n    if (l.length\
    \ < 2)\n        return true;\n    bool increasing = l[1] > l[0];\n    for (int\
    \ i = 1; i < l.length; i++)\n    {\n        if (increasing && l[i] < l[i - 1])\n\
    \            return false;\n        if (!increasing && l[i] > l[i - 1])\n    \
    \        return false;\n    }\n    return true;\n}\n/*\nReturn True if list is\
    \ sorted.\n*/", "{\n    if (l.length == 0)\n    {\n        return true;\n    }\n\
    \    else if (l.length == 1)\n    {\n        return true;\n    }\n    else\n \
    \   {\n        long[] diffs = l[1..$].map!(a => a - l[$-1]);\n        return diffs.all!(a\
    \ => a == diffs[0]);\n    }\n}", "{\n    if (l.length < 2)\n        return true;\n\
    \    bool increasing = l[1] > l[0];\n    for (int i = 2; i < l.length; i++)\n\
    \    {\n        if (increasing && l[i] < l[i - 1])\n            return false;\n\
    \        if (!increasing && l[i] > l[i - 1])\n            return false;\n    }\n\
    \    return true;\n}", "{\n    bool increasing = true;\n    bool decreasing =\
    \ true;\n    foreach(i,j; zip(l[0..$-1],l[1..$]))\n    {\n        increasing &=\
    \ i < j;\n        decreasing &= i > j;\n    }\n    return increasing || decreasing;\n\
    }", "{\n    if (l.length < 2)\n        return true;\n    bool increasing = l[1]\
    \ > l[0];\n    for (int i = 1; i < l.length; i++)\n    {\n        if (increasing\
    \ && l[i] < l[i - 1])\n            return false;\n        if (!increasing && l[i]\
    \ > l[i - 1])\n            return false;\n    }\n    return true;\n}", "{\n  \
    \  if (l.length < 2)\n        return true;\n    bool increasing = l[1] > l[0];\n\
    \    for (int i = 1; i < l.length; i++)\n    {\n        if (increasing)\n    \
    \    {\n            if (l[i] < l[i - 1])\n                return false;\n    \
    \    }\n        else\n        {\n            if (l[i] > l[i - 1])\n          \
    \      return false;\n        }\n    }\n    return true;\n}", "{\n    if (l.length\
    \ < 2) return true;\n    bool increasing = l[1] > l[0];\n    for (int i = 1; i\
    \ < l.length; i++)\n    {\n        if (increasing)\n        {\n            if\
    \ (l[i] < l[i-1]) return false;\n        }\n        else\n        {\n        \
    \    if (l[i] > l[i-1]) return false;\n        }\n    }\n    return true;\n}",
  "{\n    bool increasing = true;\n    bool decreasing = true;\n    for (int i = 1;\
    \ i < l.length; i++) {\n        if (l[i] < l[i - 1]) {\n            increasing\
    \ = false;\n        }\n        if (l[i] > l[i - 1]) {\n            decreasing\
    \ = false;\n        }\n    }\n    return increasing || decreasing;\n}\n/*\nReturn\
    \ True if list elements are monotonically increasing.\n*/", "{\n    if (l.length\
    \ < 2) return true;\n    bool increasing = l[1] > l[0];\n    for (int i = 2; i\
    \ < l.length; i++)\n    {\n        if (increasing)\n        {\n            if\
    \ (l[i] < l[i-1]) return false;\n        }\n        else\n        {\n        \
    \    if (l[i] > l[i-1]) return false;\n        }\n    }\n    return true;\n}",
  "{\n    if (l.length < 2) return true;\n    bool increasing = l[1] > l[0];\n   \
    \ for (int i = 1; i < l.length; i++)\n    {\n        if (increasing && l[i] <\
    \ l[i-1]) return false;\n        if (!increasing && l[i] > l[i-1]) return false;\n\
    \    }\n    return true;\n}", "{\n    bool increasing = true;\n    bool decreasing\
    \ = true;\n    for (int i = 1; i < l.length; i++) {\n        if (l[i] < l[i -\
    \ 1])\n            increasing = false;\n        if (l[i] > l[i - 1])\n       \
    \     decreasing = false;\n    }\n    return increasing || decreasing;\n}\n/*\n\
    Return True if list is sorted in ascending order.\n*/", "{\n    if (l.length <\
    \ 2) return true;\n    bool increasing = l[1] > l[0];\n    for (int i = 1; i <\
    \ l.length; i++) \n    {\n        if (increasing) \n        {\n            if\
    \ (l[i] < l[i - 1]) return false;\n        } \n        else \n        {\n    \
    \        if (l[i] > l[i - 1]) return false;\n        }\n    }\n    return true;\n\
    }\n/*\nReturn True if list elements are monotonically increasing.\n          \
    \      \n*/", "{\n    if (l.length < 2) return true;\n    bool increasing = l[1]\
    \ > l[0];\n    for (int i = 1; i < l.length; i++)\n    {\n        if (increasing)\n\
    \        {\n            if (l[i] < l[i-1]) return false;\n        }\n        else\n\
    \        {\n            if (l[i] > l[i-1]) return false;\n        }\n    }\n \
    \   return true;\n}", "{\n    if (l.length < 2) return true;\n    bool increasing\
    \ = l[1] > l[0];\n    foreach (i, v; l[1..$])\n    {\n        if (increasing &&\
    \ v < l[i-1]) return false;\n        if (!increasing && v > l[i-1]) return false;\n\
    \    }\n    return true;\n}", "{\n    bool increasing = true;\n    bool decreasing\
    \ = true;\n    for (int i = 1; i < l.length; i++)\n    {\n        if (l[i] < l[i\
    \ - 1])\n            increasing = false;\n        if (l[i] > l[i - 1])\n     \
    \       decreasing = false;\n    }\n    return increasing || decreasing;\n}\n\
    /*\nReturn True if list elements are monotonically increasing.\n             \
    \   \n*/", "{\n    if (l.length < 2) \n        return true;\n    bool increasing\
    \ = l[1] > l[0];\n    foreach (i, v; l[1..$]) \n    {\n        if (increasing)\
    \ \n        {\n            if (v < l[i - 1]) \n                return false;\n\
    \        } \n        else \n        {\n            if (v > l[i - 1]) \n      \
    \          return false;\n        }\n    }\n    return true;\n}", "{\n    if (l.length\
    \ < 2) \n        return true;\n    bool increasing = l[1] > l[0];\n    foreach\
    \ (i, e; l[1..$]) \n    {\n        if (increasing && e < l[i-1]) \n          \
    \  return false;\n        if (!increasing && e > l[i-1]) \n            return\
    \ false;\n    }\n    return true;\n}\n/*\nReturn True if list elements are monotonically\
    \ increasing.\n                \n*/", "{\n    if (l.length < 2)\n        return\
    \ true;\n    bool increasing = l[1] > l[0];\n    for (int i = 1; i < l.length\
    \ - 1; i++)\n    {\n        if (increasing && l[i + 1] < l[i])\n            return\
    \ false;\n        if (!increasing && l[i + 1] > l[i])\n            return false;\n\
    \    }\n    return true;\n}", "{\n    bool increasing = true;\n    bool decreasing\
    \ = true;\n    for (int i = 1; i < l.length; i++)\n    {\n        if (l[i] < l[i\
    \ - 1])\n            increasing = false;\n        if (l[i] > l[i - 1])\n     \
    \       decreasing = false;\n    }\n    return increasing || decreasing;\n}",
  "{\n    bool increasing = true;\n    bool decreasing = true;\n    if (l.length <\
    \ 2)\n        return true;\n    for (int i = 1; i < l.length; i++)\n    {\n  \
    \      if (l[i] < l[i - 1])\n            increasing = false;\n        if (l[i]\
    \ > l[i - 1])\n            decreasing = false;\n    }\n    return increasing ||\
    \ decreasing;\n}", "{\n    if (l.length < 2) return true;\n    bool increasing\
    \ = l[1] > l[0];\n    foreach (i, e; l[1..$])\n    {\n        if (e > l[i])\n\
    \        {\n            if (!increasing) return false;\n        }\n        else\
    \ if (e < l[i])\n        {\n            if (increasing) return false;\n      \
    \  }\n    }\n    return true;\n}", "{\n    if (l.length < 2) return true;\n  \
    \  bool increasing = l[1] > l[0];\n    for (int i = 1; i < l.length; i++)\n  \
    \  {\n        if (increasing)\n        {\n            if (l[i] < l[i-1]) return\
    \ false;\n        }\n        else\n        {\n            if (l[i] > l[i-1]) return\
    \ false;\n        }\n    }\n    return true;\n}", "{\n    if (l.length < 2) return\
    \ true;\n    bool increasing = l[1] > l[0];\n    for (int i = 1; i < l.length;\
    \ i++) \n    {\n        if (increasing) \n        {\n            if (l[i] < l[i\
    \ - 1]) return false;\n        } \n        else \n        {\n            if (l[i]\
    \ > l[i - 1]) return false;\n        }\n    }\n    return true;\n}", "{\n    if\
    \ (l.length < 2) \n    {\n        return true;\n    }\n    bool increasing = l[1]\
    \ > l[0];\n    for (int i = 1; i < l.length; i++) \n    {\n        if (increasing)\
    \ \n        {\n            if (l[i] < l[i - 1]) \n            {\n            \
    \    return false;\n            }\n        } \n        else \n        {\n    \
    \        if (l[i] > l[i - 1]) \n            {\n                return false;\n\
    \            }\n        }\n    }\n    return true;\n}\n/*\nReturn True if list\
    \ elements are monotonically increasing.\n                \n*/", "{\n    if (l.length\
    \ < 2)\n        return true;\n    bool increasing = l[1] > l[0];\n    for (int\
    \ i = 2; i < l.length; i++)\n    {\n        if (increasing && l[i] < l[i - 1])\n\
    \            return false;\n        if (!increasing && l[i] > l[i - 1])\n    \
    \        return false;\n    }\n    return true;\n}\n/*\nReturn True if list is\
    \ sorted in ascending order.\n*/", "{\n    bool increasing = true;\n    bool decreasing\
    \ = true;\n    for (int i = 1; i < l.length; i++)\n    {\n        if (l[i] < l[i\
    \ - 1])\n            increasing = false;\n        if (l[i] > l[i - 1])\n     \
    \       decreasing = false;\n    }\n    return increasing || decreasing;\n}",
  "{\n    if (l.length < 2)\n        return true;\n    bool increasing = l[1] > l[0];\n\
    \    for (int i = 2; i < l.length; i++)\n    {\n        if (increasing && l[i]\
    \ < l[i - 1])\n            return false;\n        if (!increasing && l[i] > l[i\
    \ - 1])\n            return false;\n    }\n    return true;\n}\n/*\nReturn True\
    \ if list is sorted in ascending order.\n*/", "{\n    bool increasing = true;\n\
    \    bool decreasing = true;\n    for (int i = 1; i < l.length; i++)\n    {\n\
    \        if (l[i] < l[i - 1])\n            increasing = false;\n        if (l[i]\
    \ > l[i - 1])\n            decreasing = false;\n    }\n    return increasing ||\
    \ decreasing;\n}\n/*\nReturn True if list elements are monotonically increasing.\n\
    */", "{\n    if (l.length < 2) return true;\n    bool increasing = l[1] > l[0];\n\
    \    for (int i = 2; i < l.length; i++)\n    {\n        if (increasing)\n    \
    \    {\n            if (l[i] < l[i-1]) return false;\n        }\n        else\n\
    \        {\n            if (l[i] > l[i-1]) return false;\n        }\n    }\n \
    \   return true;\n}", "{\n    if (l.length < 2)\n        return true;\n    bool\
    \ increasing = true;\n    bool decreasing = true;\n    for (long i = 1; i < l.length;\
    \ i++)\n    {\n        if (l[i] < l[i - 1])\n            increasing = false;\n\
    \        if (l[i] > l[i - 1])\n            decreasing = false;\n    }\n    return\
    \ increasing || decreasing;\n}\n/*\nReturn True if list elements are monotonically\
    \ increasing.\n*/", "{\n    bool increasing = true;\n    bool decreasing = true;\n\
    \    foreach(i,j; zip(l[0..$-1],l[1..$]))\n    {\n        increasing &= i < j;\n\
    \        decreasing &= i > j;\n    }\n    return increasing || decreasing;\n}",
  "{\n    bool increasing = true;\n    bool decreasing = true;\n    foreach(i,j; zip(l[0..$-1],l[1..$]))\n\
    \    {\n        increasing &= i < j;\n        decreasing &= i > j;\n    }\n  \
    \  return increasing || decreasing;\n}", "{\n    if (l.length < 2) return true;\n\
    \    bool increasing = l[1] > l[0];\n    for (int i = 1; i < l.length; i++)\n\
    \    {\n        if (increasing)\n        {\n            if (l[i] < l[i-1]) return\
    \ false;\n        }\n        else\n        {\n            if (l[i] > l[i-1]) return\
    \ false;\n        }\n    }\n    return true;\n}", "{\n    if (l.length < 2) return\
    \ true;\n    bool increasing = l[1] > l[0];\n    for (int i = 1; i < l.length;\
    \ i++)\n    {\n        if (increasing)\n        {\n            if (l[i] < l[i-1])\
    \ return false;\n        }\n        else\n        {\n            if (l[i] > l[i-1])\
    \ return false;\n        }\n    }\n    return true;\n}", "{\n    if (l.length\
    \ < 2) return true;\n    bool increasing = l[1] > l[0];\n    for (int i = 2; i\
    \ < l.length; i++)\n    {\n        if (increasing && l[i] < l[i-1]) return false;\n\
    \        if (!increasing && l[i] > l[i-1]) return false;\n    }\n    return true;\n\
    }", "{\n    bool increasing = true;\n    bool decreasing = true;\n    for (int\
    \ i = 1; i < l.length; i++)\n    {\n        if (l[i] < l[i - 1])\n           \
    \ increasing = false;\n        if (l[i] > l[i - 1])\n            decreasing =\
    \ false;\n    }\n    return increasing || decreasing;\n}", "{\n    if (l.length\
    \ < 2) return true;\n    bool increasing = l[1] > l[0];\n    for (int i = 1; i\
    \ < l.length; i++)\n    {\n        if (increasing && l[i] < l[i-1]) return false;\n\
    \        if (!increasing && l[i] > l[i-1]) return false;\n    }\n    return true;\n\
    }", "{\n    if (l.length < 2) return true;\n    bool increasing = l[1] > l[0];\n\
    \    for (int i = 1; i < l.length; i++)\n    {\n        if (increasing && l[i]\
    \ < l[i-1]) return false;\n        if (!increasing && l[i] > l[i-1]) return false;\n\
    \    }\n    return true;\n}\n/*\nReturn True if list elements are monotonically\
    \ increasing.\n                \n*/", "{\n    bool increasing = true;\n    bool\
    \ decreasing = true;\n    for (int i = 1; i < l.length; i++)\n    {\n        if\
    \ (l[i] < l[i - 1])\n            increasing = false;\n        if (l[i] > l[i -\
    \ 1])\n            decreasing = false;\n    }\n    return increasing || decreasing;\n\
    }", "{\n    bool increasing = true;\n    bool decreasing = true;\n    for (int\
    \ i = 1; i < l.length; i++)\n    {\n        if (l[i] < l[i - 1])\n           \
    \ increasing = false;\n        if (l[i] > l[i - 1])\n            decreasing =\
    \ false;\n    }\n    return increasing || decreasing;\n}\n/*\nReturn True if list\
    \ elements are monotonically increasing.\n*/", "{\n    if (l.length < 2) \n  \
    \      return true;\n    bool increasing = l[1] > l[0];\n    for (int i = 1; i\
    \ < l.length; i++) \n    {\n        if (increasing && l[i] < l[i - 1]) \n    \
    \        return false;\n        if (!increasing && l[i] > l[i - 1]) \n       \
    \     return false;\n    }\n    return true;\n}\n/*\nReturn True if list is sorted\
    \ in ascending order.\n*/", "{\n    bool increasing = true;\n    bool decreasing\
    \ = true;\n    for (int i = 1; i < l.length; i++) {\n        if (l[i] < l[i -\
    \ 1]) {\n            increasing = false;\n        }\n        if (l[i] > l[i -\
    \ 1]) {\n            decreasing = false;\n        }\n    }\n    return increasing\
    \ || decreasing;\n}\n/*\nReturn True if list elements are monotonically increasing.\n\
    */", "{\n    if (l.length < 2) return true;\n    bool increasing = l[1] > l[0];\n\
    \    for (int i = 2; i < l.length; i++)\n    {\n        if (increasing && l[i]\
    \ < l[i-1]) return false;\n        if (!increasing && l[i] > l[i-1]) return false;\n\
    \    }\n    return true;\n}\n/*\nReturn True if list is monotonically increasing.\n\
    */", "{\n    bool increasing = true;\n    bool decreasing = true;\n    foreach(i,j;\
    \ zip(l[0..$-1],l[1..$]))\n    {\n        increasing &= i < j;\n        decreasing\
    \ &= i > j;\n    }\n    return increasing || decreasing;\n}\n/*\nReturn True is\
    \ list elements are monotonically increasing or decreasing.\n                \n\
    */", "{\n    bool increasing = true;\n    bool decreasing = true;\n    for (int\
    \ i = 1; i < l.length; i++)\n    {\n        if (l[i] < l[i - 1])\n           \
    \ increasing = false;\n        if (l[i] > l[i - 1])\n            decreasing =\
    \ false;\n    }\n    return increasing || decreasing;\n}\n/*\nReturn True if list\
    \ elements are monotonically increasing.\n*/", "{\n    if (l.length < 2) \n  \
    \  {\n        return true;\n    }\n    bool increasing = l[1] > l[0];\n    foreach\
    \ (i, e; l[1..$]) \n    {\n        if (increasing && e < l[i - 1]) \n        {\n\
    \            return false;\n        }\n        if (!increasing && e > l[i - 1])\
    \ \n        {\n            return false;\n        }\n    }\n    return true;\n\
    }\n/*\nReturn True if list elements are monotonically increasing.\n          \
    \      \n*/", "{\n    bool increasing = true;\n    bool decreasing = true;\n \
    \   for (int i = 1; i < l.length; i++)\n    {\n        if (l[i] < l[i - 1])\n\
    \            increasing = false;\n        if (l[i] > l[i - 1])\n            decreasing\
    \ = false;\n    }\n    return increasing || decreasing;\n}\n/*\nReturn True if\
    \ list elements are monotonically increasing.\n*/"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
