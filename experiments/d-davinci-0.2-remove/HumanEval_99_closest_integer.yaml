name: HumanEval_99_closest_integer
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\n\n    Create a function that\
  \ takes a value (string) representing a number\n    and returns the closest integer\
  \ to it. If the number is equidistant\n    from two integers, round it away from\
  \ zero.\n\n    Examples\n        \n    Note:\n    Rounding away from zero means\
  \ that if the given number is equidistant\n    from two integers, the one you should\
  \ return is the one that is the\n    farthest from zero. For example closest_integer(\"\
  14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n\
  \    \n*/\nlong closest_integer(string value) \n"
tests: "unittest\n{\n    alias candidate = closest_integer;\n\n    assert(candidate(\"\
  10\") == 10L);\n    assert(candidate(\"14.5\") == 15L);\n    assert(candidate(\"\
  -15.5\") == -16L);\n    assert(candidate(\"15.3\") == 15L);\n    assert(candidate(\"\
  0\") == 0L);\n}\nvoid main(){}"
completions: ["{\n    long result = 0;\n    double d = to!double(value);\n    double\
    \ d_int = floor(d);\n    double d_frac = d - d_int;\n    if (d_frac == 0.5)\n\
    \    {\n        if (d > 0)\n        {\n            result = cast(long)d_int +\
    \ 1;\n        }\n        else\n        {\n            result = cast(long)d_int\
    \ - 1;\n        }\n    }\n    else\n    {\n        result = cast(long)round(d);\n\
    \    }\n    return result;\n}", "{\n    long result = 0;\n    double d = to!double(value);\n\
    \    if (d < 0)\n    {\n        result = cast(long) (d - 0.5);\n    }\n    else\n\
    \    {\n        result = cast(long) (d + 0.5);\n    }\n    return result;\n}",
  "{\n    auto d = to!double(value);\n    return cast(long)round(d);\n}", "{\n   \
    \ long result = 0;\n    double d = to!double(value);\n    double d1 = floor(d);\n\
    \    double d2 = ceil(d);\n    double diff1 = abs(d - d1);\n    double diff2 =\
    \ abs(d - d2);\n    if (diff1 < diff2)\n        result = cast(long)d1;\n    else\n\
    \        result = cast(long)d2;\n    return result;\n}", "{\n    double d = to!double(value);\n\
    \    long l = to!long(value);\n    if (d - l > 0.5)\n        return l + 1;\n \
    \   else if (d - l < -0.5)\n        return l - 1;\n    else\n        return l;\n\
    }", "{\n    long result = 0;\n    double d = to!double(value);\n    double d_int\
    \ = cast(double) cast(long) d;\n    double d_frac = d - d_int;\n    if (d_frac\
    \ == 0.5)\n    {\n        if (d > 0)\n        {\n            result = cast(long)\
    \ d + 1;\n        }\n        else\n        {\n            result = cast(long)\
    \ d - 1;\n        }\n    }\n    else\n    {\n        result = cast(long) d;\n\
    \    }\n    return result;\n}", "{\n    long result = 0;\n    double d = to!double(value);\n\
    \    double d_int = to!double(to!long(d));\n    if (d_int == d)\n        return\
    \ to!long(d);\n    else if (d_int < d)\n        return to!long(d_int + 1);\n \
    \   else\n        return to!long(d_int - 1);\n}", "{\n    long result = 0;\n \
    \   double d = to!double(value);\n    if (d > 0)\n    {\n        result = cast(long)ceil(d);\n\
    \    }\n    else\n    {\n        result = cast(long)floor(d);\n    }\n    return\
    \ result;\n}", "{\n    return cast(long)round(to!double(value));\n}", "{\n   \
    \ long result = 0;\n    double d = to!double(value);\n    if(d > 0)\n    {\n \
    \       result = cast(long) (d + 0.5);\n    }\n    else\n    {\n        result\
    \ = cast(long) (d - 0.5);\n    }\n    return result;\n}", "{\n    long result\
    \ = 0;\n    double d = to!double(value);\n    if (d < 0)\n    {\n        result\
    \ = cast(long)floor(d);\n        if (d - result == 0.5)\n            result--;\n\
    \    }\n    else\n    {\n        result = cast(long)ceil(d);\n        if (result\
    \ - d == 0.5)\n            result++;\n    }\n    return result;\n}", "{\n    long\
    \ result = 0;\n    double d = to!double(value);\n    if (d > 0)\n    {\n     \
    \   result = cast(long)d;\n        if (d - result > 0.5)\n            result++;\n\
    \    }\n    else\n    {\n        result = cast(long)d;\n        if (result - d\
    \ > 0.5)\n            result--;\n    }\n    return result;\n}", "{\n    long result\
    \ = 0;\n    double d = to!double(value);\n    double d_int = floor(d);\n    double\
    \ d_frac = d - d_int;\n    if (d_frac < 0.5)\n        result = cast(long)d_int;\n\
    \    else\n        result = cast(long)d_int + 1;\n    return result;\n}", "{\n\
    \    long result = 0;\n    double d = to!double(value);\n    double d_abs = abs(d);\n\
    \    long l = to!long(d_abs);\n    double d_diff = d_abs - l;\n    if (d_diff\
    \ < 0.5)\n    {\n        result = l;\n    }\n    else\n    {\n        result =\
    \ l + 1;\n    }\n    if (d < 0)\n    {\n        result = -result;\n    }\n   \
    \ return result;\n}", "{\n    auto num = to!double(value);\n    auto floor = cast(long)num;\n\
    \    auto ceil = floor + 1;\n    if (abs(num - floor) < abs(num - ceil))\n   \
    \     return floor;\n    else\n        return ceil;\n}", "{\n    long result =\
    \ 0;\n    double d = to!double(value);\n    if (d > 0)\n    {\n        result\
    \ = cast(long)d + 1;\n    }\n    else\n    {\n        result = cast(long)d - 1;\n\
    \    }\n    return result;\n}", "{\n    long result = 0;\n    double d = to!double(value);\n\
    \    double fractional = d - cast(long)d;\n    if (fractional >= 0.5)\n    {\n\
    \        result = cast(long)d + 1;\n    }\n    else\n    {\n        result = cast(long)d;\n\
    \    }\n    return result;\n}", "{\n    long result = 0;\n    double d = to!double(value);\n\
    \    double d_int = cast(double) cast(long) d;\n    double d_frac = d - d_int;\n\
    \    if (d_frac > 0.5)\n        result = cast(long) ceil(d);\n    else if (d_frac\
    \ < -0.5)\n        result = cast(long) floor(d);\n    else\n        result = cast(long)\
    \ round(d);\n    return result;\n}", "{\n    return cast(long) round(to!double(value));\n\
    }", "{\n    long result = 0;\n    double d = to!double(value);\n    if (d < 0)\n\
    \    {\n        result = cast(long) d - 1;\n    }\n    else\n    {\n        result\
    \ = cast(long) d + 1;\n    }\n    return result;\n}", "{\n    auto num = to!double(value);\n\
    \    auto floor = cast(long)num;\n    auto ceil = floor + 1;\n    auto diff_floor\
    \ = abs(num - floor);\n    auto diff_ceil = abs(num - ceil);\n    return diff_floor\
    \ < diff_ceil ? floor : ceil;\n}", "{\n    long result = 0;\n    double d = to!double(value);\n\
    \    double d_abs = abs(d);\n    double d_floor = floor(d_abs);\n    double d_ceil\
    \ = ceil(d_abs);\n    double d_floor_diff = d_abs - d_floor;\n    double d_ceil_diff\
    \ = d_ceil - d_abs;\n    if (d_floor_diff == d_ceil_diff)\n    {\n        if (d\
    \ > 0)\n        {\n            result = cast(long)d_ceil;\n        }\n       \
    \ else\n        {\n            result = cast(long)d_floor;\n        }\n    }\n\
    \    else if (d_floor_diff < d_ceil_diff)\n    {\n        result = cast(long)d_floor;\n\
    \    }\n    else\n    {\n        result = cast(long)d_ceil;\n    }\n    return\
    \ result;\n}", "{\n    return cast(long) round(to!double(value));\n}", "{\n  \
    \  long result = 0;\n    double d = to!double(value);\n    if (d > 0)\n    {\n\
    \        result = cast(long)ceil(d);\n    }\n    else\n    {\n        result =\
    \ cast(long)floor(d);\n    }\n    return result;\n}", "{\n    long v = to!long(value);\n\
    \    long r = v - v.floor;\n    if (r == 0.5)\n        return v > 0 ? v.ceil :\
    \ v.floor;\n    return v.round;\n}", "{\n    long result = 0;\n    double d =\
    \ to!double(value);\n    long l = to!long(value);\n    double diff = d - l;\n\
    \    if (diff < 0)\n    {\n        diff = -diff;\n    }\n    if (diff >= 0.5)\n\
    \    {\n        if (d > 0)\n        {\n            result = l + 1;\n        }\n\
    \        else\n        {\n            result = l - 1;\n        }\n    }\n    else\n\
    \    {\n        result = l;\n    }\n    return result;\n}", "{\n    auto num =\
    \ to!double(value);\n    return cast(long)round(num);\n}", "{\n    long result\
    \ = 0;\n    double d = to!double(value);\n    if(d == 0.0)\n        return 0;\n\
    \    if(d < 0.0)\n    {\n        d = -d;\n        result = cast(long)d;\n    \
    \    if(d - result > 0.5)\n            result--;\n        return -result;\n  \
    \  }\n    result = cast(long)d;\n    if(d - result > 0.5)\n        result++;\n\
    \    return result;\n}", "{\n    auto v = to!double(value);\n    return cast(long)round(v);\n\
    }", "{\n    long result = 0;\n    double d = to!double(value);\n    double fraction\
    \ = d - cast(long)d;\n    if (fraction < 0.5)\n    {\n        result = cast(long)d;\n\
    \    }\n    else\n    {\n        result = cast(long)d + 1;\n    }\n    return\
    \ result;\n}", "{\n    return round(to!double(value));\n}", "{\n    double d =\
    \ to!double(value);\n    return cast(long)round(d);\n}", "{\n    auto v = to!double(value);\n\
    \    return cast(long)round(v);\n}", "{\n    long result = 0;\n    double d =\
    \ to!double(value);\n    if (d > 0)\n    {\n        result = cast(long)d;\n  \
    \      if (d - result > 0.5)\n            result++;\n    }\n    else\n    {\n\
    \        result = cast(long)d;\n        if (result - d > 0.5)\n            result--;\n\
    \    }\n    return result;\n}", "{\n    long result = 0;\n    real num = to!real(value);\n\
    \    long int_part = cast(long)num;\n    real dec_part = num - int_part;\n   \
    \ if (dec_part < 0.5)\n        result = int_part;\n    else if (dec_part > 0.5)\n\
    \        result = int_part + 1;\n    else\n        result = abs(int_part) > abs(int_part\
    \ + 1) ? int_part : int_part + 1;\n    return result;\n}", "{\n    return cast(long)\
    \ round(to!double(value));\n}", "{\n    long result = 0;\n    double d = to!double(value);\n\
    \    double f = floor(d);\n    double c = ceil(d);\n    if (d - f == c - d)\n\
    \    {\n        if (d < 0)\n            result = cast(long)f;\n        else\n\
    \            result = cast(long)c;\n    }\n    else\n    {\n        if (d - f\
    \ < c - d)\n            result = cast(long)f;\n        else\n            result\
    \ = cast(long)c;\n    }\n    return result;\n}", "{\n    double d = to!double(value);\n\
    \    return cast(long) d;\n}", "{\n    return round(to!double(value));\n}", "{\n\
    \    long result = 0;\n    double d = to!double(value);\n    if (d < 0)\n    {\n\
    \        result = cast(long)floor(d);\n        if (d - result > 0.5)\n       \
    \     result++;\n    }\n    else\n    {\n        result = cast(long)ceil(d);\n\
    \        if (result - d > 0.5)\n            result--;\n    }\n    return result;\n\
    }", "{\n    auto num = to!double(value);\n    return cast(long)round(num);\n}",
  "{\n    // TODO\n    return 0;\n}", "{\n    long result = 0;\n    double d = to!double(value);\n\
    \    double fraction = d - cast(long)d;\n    if (fraction == 0.5)\n    {\n   \
    \     result = cast(long)d;\n        if (result > 0)\n            result++;\n\
    \        else\n            result--;\n    }\n    else\n    {\n        result =\
    \ cast(long)d;\n        if (fraction > 0.5)\n            result++;\n        else\
    \ if (fraction < -0.5)\n            result--;\n    }\n    return result;\n}",
  "{\n    long result = 0;\n    double dbl = to!double(value);\n    double dbl_int\
    \ = cast(double) cast(long) dbl;\n    double dbl_frac = dbl - dbl_int;\n    if\
    \ (dbl_frac < 0.5)\n        result = cast(long) dbl_int;\n    else\n        result\
    \ = cast(long) dbl_int + 1;\n    return result;\n}", "{\n    auto f = to!double(value);\n\
    \    auto i = cast(long)f;\n    if (f - i > 0.5)\n        return i + 1;\n    else\
    \ if (f - i < -0.5)\n        return i - 1;\n    else\n        return i;\n}", "{\n\
    \    long result = 0;\n    double d = to!double(value);\n    if(d > 0)\n    {\n\
    \        result = cast(long)ceil(d);\n    }\n    else\n    {\n        result =\
    \ cast(long)floor(d);\n    }\n    return result;\n}", "{\n    long result = 0;\n\
    \    double d = to!double(value);\n    double fractional = d - cast(long)d;\n\
    \    if (fractional < 0.5)\n    {\n        result = cast(long)d;\n    }\n    else\n\
    \    {\n        result = cast(long)d + 1;\n    }\n    return result;\n}", "{\n\
    \    double d = to!double(value);\n    return cast(long)round(d);\n}", "{\n  \
    \  long result = 0;\n    double d = to!double(value);\n    if (d >= 0)\n    {\n\
    \        result = cast(long) d;\n        if (d - result >= 0.5)\n            result++;\n\
    \    }\n    else\n    {\n        result = cast(long) d;\n        if (result -\
    \ d >= 0.5)\n            result--;\n    }\n    return result;\n}", "{\n    long\
    \ result = 0;\n    double d = to!double(value);\n    if (d > 0)\n    {\n     \
    \   result = cast(long)d;\n        if (d - result > 0.5)\n            result++;\n\
    \    }\n    else\n    {\n        result = cast(long)d;\n        if (result - d\
    \ > 0.5)\n            result--;\n    }\n    return result;\n}", "{\n    long result\
    \ = 0;\n    double d = to!double(value);\n    if(d > 0)\n    {\n        result\
    \ = cast(long)ceil(d);\n    }\n    else\n    {\n        result = cast(long)floor(d);\n\
    \    }\n    return result;\n}", "{\n    double d = to!double(value);\n    long\
    \ l = to!long(value);\n    if (d - l > 0.5)\n        return l + 1;\n    else if\
    \ (d - l < -0.5)\n        return l - 1;\n    else\n        return l;\n}", "{\n\
    \    long result = 0;\n    double d = to!double(value);\n    if (d > 0)\n    {\n\
    \        result = cast(long)ceil(d);\n    }\n    else\n    {\n        result =\
    \ cast(long)floor(d);\n    }\n    return result;\n}", "{\n    long result = 0;\n\
    \    double d = to!double(value);\n    if (d < 0)\n    {\n        result = cast(long)\
    \ (d - 0.5);\n    }\n    else\n    {\n        result = cast(long) (d + 0.5);\n\
    \    }\n    return result;\n}", "{\n    // TODO: Implement this function\n   \
    \ return 0;\n}", "{\n    return cast(long) round(to!double(value));\n}", "{\n\
    \    long result = 0;\n    double d = to!double(value);\n    if (d < 0)\n    {\n\
    \        d = -d;\n        result = cast(long)d;\n        if (d - result > 0.5)\n\
    \            result++;\n        result = -result;\n    }\n    else\n    {\n  \
    \      result = cast(long)d;\n        if (d - result > 0.5)\n            result++;\n\
    \    }\n    return result;\n}", "{\n    long result = 0;\n    long sign = 1;\n\
    \    if (value[0] == '-') {\n        sign = -1;\n        value = value[1..$];\n\
    \    }\n    auto dot = value.find('.');\n    if (dot == -1) {\n        result\
    \ = to!long(value);\n    } else {\n        auto integer = value[0..dot];\n   \
    \     auto fraction = value[dot+1..$];\n        result = to!long(integer);\n \
    \       if (fraction.length > 0) {\n            auto frac = to!double(fraction);\n\
    \            if (frac >= 0.5) {\n                result++;\n            }\n  \
    \      }\n    }\n    return result * sign;\n}", "{\n    long result = 0;\n   \
    \ double number = to!double(value);\n    if(number > 0)\n    {\n        result\
    \ = cast(long)number;\n        if(number - result > 0.5)\n        {\n        \
    \    result++;\n        }\n    }\n    else\n    {\n        result = cast(long)number;\n\
    \        if(result - number > 0.5)\n        {\n            result--;\n       \
    \ }\n    }\n    return result;\n}", "{\n    long ret;\n    double d = to!double(value);\n\
    \    if (d < 0)\n    {\n        ret = cast(long)ceil(d);\n    }\n    else\n  \
    \  {\n        ret = cast(long)floor(d);\n    }\n    return ret;\n}", "{\n    auto\
    \ val = to!double(value);\n    auto int_val = cast(long)val;\n    if(val - int_val\
    \ > 0.5)\n        return int_val + 1;\n    else if(val - int_val < -0.5)\n   \
    \     return int_val - 1;\n    else\n        return int_val;\n}", "{\n    long\
    \ result = 0;\n    double d = to!double(value);\n    if (d > 0)\n    {\n     \
    \   result = cast(long)ceil(d);\n    }\n    else\n    {\n        result = cast(long)floor(d);\n\
    \    }\n    return result;\n}", "{\n    long result = 0;\n    double d = to!double(value);\n\
    \    if (d > 0)\n    {\n        result = cast(long)ceil(d);\n    }\n    else\n\
    \    {\n        result = cast(long)floor(d);\n    }\n    return result;\n}", "{\n\
    \    long result = 0;\n    double d = to!double(value);\n    double f = floor(d);\n\
    \    double c = ceil(d);\n    if (d - f < c - d)\n        result = cast(long)f;\n\
    \    else\n        result = cast(long)c;\n    return result;\n}", "{\n    long\
    \ result = 0;\n    double d = to!double(value);\n    double f = floor(d);\n  \
    \  double c = ceil(d);\n    if (d - f < c - d)\n        result = cast(long)f;\n\
    \    else\n        result = cast(long)c;\n    return result;\n}", "{\n    long\
    \ result = 0;\n    double d = to!double(value);\n    if(d < 0)\n    {\n      \
    \  result = cast(long)ceil(d);\n    }\n    else\n    {\n        result = cast(long)floor(d);\n\
    \    }\n    return result;\n}", "{\n    long ret = 0;\n    double val = to!double(value);\n\
    \    if(val > 0)\n    {\n        ret = cast(long)ceil(val);\n    }\n    else\n\
    \    {\n        ret = cast(long)floor(val);\n    }\n    return ret;\n}", "{\n\
    \    double d = to!double(value);\n    long l = to!long(value);\n    if (d - l\
    \ > 0.5)\n        return l + 1;\n    else if (d - l < -0.5)\n        return l\
    \ - 1;\n    else\n        return l;\n}", "{\n    long result = 0;\n    double\
    \ d = to!double(value);\n    double fraction = d - cast(long)d;\n    if (fraction\
    \ < 0.5)\n    {\n        result = cast(long)d;\n    }\n    else\n    {\n     \
    \   result = cast(long)d + 1;\n    }\n    return result;\n}", "{\n    long result\
    \ = 0;\n    double d = to!double(value);\n    double d_int = cast(double) cast(long)\
    \ d;\n    if (d - d_int > 0.5)\n        result = cast(long) d + 1;\n    else if\
    \ (d - d_int < -0.5)\n        result = cast(long) d - 1;\n    else\n        result\
    \ = cast(long) d;\n    return result;\n}", "{\n    long number = to!long(value);\n\
    \    double fraction = to!double(value) - number;\n    if (fraction > 0.5)\n \
    \       return number + 1;\n    else if (fraction < -0.5)\n        return number\
    \ - 1;\n    else\n        return number;\n}", "{\n    return round(to!double(value));\n\
    }", "{\n    long result = 0;\n    double d = to!double(value);\n    double d_int\
    \ = cast(double) cast(long) d;\n    double d_frac = d - d_int;\n    if (d_frac\
    \ >= 0.5)\n        result = cast(long) ceil(d);\n    else\n        result = cast(long)\
    \ floor(d);\n    return result;\n}", "{\n    long result = 0;\n    double d =\
    \ to!double(value);\n    if (d >= 0)\n    {\n        result = cast(long)d;\n \
    \       if (d - result > 0.5)\n            result++;\n    }\n    else\n    {\n\
    \        result = cast(long)d;\n        if (result - d > 0.5)\n            result--;\n\
    \    }\n    return result;\n}", "{\n    long result = 0;\n    double d = to!double(value);\n\
    \    if(d > 0)\n    {\n        result = cast(long)d;\n        if(d - result >\
    \ 0.5)\n            result++;\n    }\n    else\n    {\n        result = cast(long)d;\n\
    \        if(result - d > 0.5)\n            result--;\n    }\n    return result;\n\
    }", "{\n    long result = 0;\n    double d = to!double(value);\n    result = cast(long)d;\n\
    \    if (d - result > 0.5)\n        result++;\n    return result;\n}", "{\n  \
    \  long result = 0;\n    double d = to!double(value);\n    double d_abs = abs(d);\n\
    \    long l = to!long(d_abs);\n    double d_diff = d_abs - l;\n    if (d_diff\
    \ == 0.5)\n    {\n        if (d > 0)\n        {\n            result = l + 1;\n\
    \        }\n        else\n        {\n            result = l - 1;\n        }\n\
    \    }\n    else\n    {\n        result = to!long(d);\n    }\n    return result;\n\
    }", "{\n    long result = 0;\n    double d = to!double(value);\n    if (d > 0)\n\
    \    {\n        result = cast(long)ceil(d);\n    }\n    else\n    {\n        result\
    \ = cast(long)floor(d);\n    }\n    return result;\n}", "{\n    long result =\
    \ 0;\n    double d = to!double(value);\n    double d_int = to!double(to!long(d));\n\
    \    if (d_int == d)\n        return to!long(d);\n    else\n    {\n        double\
    \ d_int_plus_one = d_int + 1;\n        if (abs(d_int_plus_one - d) < abs(d_int\
    \ - d))\n            return to!long(d_int_plus_one);\n        else\n         \
    \   return to!long(d_int);\n    }\n}", "{\n    auto val = to!double(value);\n\
    \    return val > 0 ? cast(long)ceil(val) : cast(long)floor(val);\n}", "{\n  \
    \  long result = 0;\n    double d = to!double(value);\n    double f = floor(d);\n\
    \    double c = ceil(d);\n    double d1 = abs(d - f);\n    double d2 = abs(d -\
    \ c);\n    if (d1 < d2)\n        result = cast(long)f;\n    else\n        result\
    \ = cast(long)c;\n    return result;\n}", "{\n    long result = 0;\n    double\
    \ d = to!double(value);\n    if(d < 0)\n    {\n        result = cast(long) ceil(d);\n\
    \    }\n    else\n    {\n        result = cast(long) floor(d);\n    }\n    return\
    \ result;\n}", "{\n    // convert the string to a double\n    double d = to!double(value);\n\
    \    // if the double is positive, round up\n    if (d >= 0)\n        return cast(long)\
    \ ceil(d);\n    // if the double is negative, round down\n    else\n        return\
    \ cast(long) floor(d);\n}", "{\n    double d = to!double(value);\n    return cast(long)d;\n\
    }", "{\n    auto d = to!double(value);\n    return cast(long) d;\n}", "{\n   \
    \ double d = to!double(value);\n    return cast(long)d;\n}", "{\n    auto d =\
    \ to!double(value);\n    auto i = to!long(d);\n    auto f = d - i;\n    if (f\
    \ > 0.5)\n        return i + 1;\n    else if (f < -0.5)\n        return i - 1;\n\
    \    else\n        return i;\n}", "{\n    long result = 0;\n    double d = to!double(value);\n\
    \    if (d < 0)\n    {\n        result = cast(long)floor(d);\n        if (d -\
    \ result > 0.5)\n            result++;\n    }\n    else\n    {\n        result\
    \ = cast(long)ceil(d);\n        if (result - d > 0.5)\n            result--;\n\
    \    }\n    return result;\n}", "{\n    long result = 0;\n    double d = to!double(value);\n\
    \    double f = floor(d);\n    double c = ceil(d);\n    if (d - f < c - d)\n \
    \       result = cast(long)f;\n    else\n        result = cast(long)c;\n    return\
    \ result;\n}", "{\n    auto parsed = to!double(value);\n    return cast(long)parsed;\n\
    }", "{\n    double d = to!double(value);\n    long l = to!long(d);\n    if (d\
    \ - l >= 0.5)\n        return l + 1;\n    else\n        return l;\n}", "{\n  \
    \  auto num = to!double(value);\n    return cast(long)num;\n}", "{\n    long ret\
    \ = 0;\n    double d = to!double(value);\n    long l = to!long(value);\n    if(d\
    \ - l == 0.5)\n    {\n        ret = l + 1;\n    }\n    else if(d - l == -0.5)\n\
    \    {\n        ret = l - 1;\n    }\n    else\n    {\n        ret = round(d);\n\
    \    }\n    return ret;\n}", "{\n    double d = to!double(value);\n    return\
    \ cast(long) d;\n}", "{\n    auto val = to!double(value);\n    auto int_val =\
    \ to!long(val);\n    auto diff = abs(val - int_val);\n    if (diff == 0.5)\n \
    \   {\n        if (val > 0)\n            return int_val + 1;\n        else\n \
    \           return int_val - 1;\n    }\n    return int_val;\n}", "{\n    long\
    \ result = 0;\n    double d = to!double(value);\n    double d_int = cast(double)\
    \ cast(long) d;\n    double d_int_plus_one = d_int + 1;\n    double d_int_minus_one\
    \ = d_int - 1;\n    double d_int_plus_one_diff = abs(d_int_plus_one - d);\n  \
    \  double d_int_minus_one_diff = abs(d_int_minus_one - d);\n    double d_int_diff\
    \ = abs(d_int - d);\n    if (d_int_plus_one_diff < d_int_minus_one_diff)\n   \
    \ {\n        if (d_int_plus_one_diff < d_int_diff)\n        {\n            result\
    \ = cast(long) d_int_plus_one;\n        }\n        else\n        {\n         \
    \   result = cast(long) d_int;\n        }\n    }\n    else\n    {\n        if\
    \ (d_int_minus_one_diff < d_int_diff)\n        {\n            result = cast(long)\
    \ d_int_minus_one;\n        }\n        else\n        {\n            result = cast(long)\
    \ d_int;\n        }\n    }\n    return result;\n}", "{\n    return cast(long)\
    \ round(to!double(value));\n}", "{\n    long result = 0;\n    double d = to!double(value);\n\
    \    double fraction = d - cast(long)d;\n    if (fraction > 0.5)\n    {\n    \
    \    result = cast(long)d + 1;\n    }\n    else if (fraction < -0.5)\n    {\n\
    \        result = cast(long)d - 1;\n    }\n    else\n    {\n        result = cast(long)d;\n\
    \    }\n    return result;\n}", "{\n    // TODO: Implement this function\n   \
    \ return 0;\n}", "{\n    long number = to!long(value);\n    long decimal = to!long(value.split(\"\
    .\")[1]);\n    long result = number;\n    if (decimal >= 5)\n    {\n        result\
    \ += 1;\n    }\n    return result;\n}", "{\n    long result = 0;\n    double d\
    \ = to!double(value);\n    if(d > 0)\n    {\n        result = cast(long)ceil(d);\n\
    \    }\n    else\n    {\n        result = cast(long)floor(d);\n    }\n    return\
    \ result;\n}", "{\n    return cast(long) round(to!double(value));\n}", "{\n  \
    \  long result = 0;\n    double d = to!double(value);\n    double fractional =\
    \ d - cast(long)d;\n    if (fractional < 0.5)\n    {\n        result = cast(long)d;\n\
    \    }\n    else\n    {\n        result = cast(long)d + 1;\n    }\n    return\
    \ result;\n}", "{\n    long result = 0;\n    double d = to!double(value);\n  \
    \  double d_int = to!double(to!int(d));\n    double d_frac = d - d_int;\n    if\
    \ (d_frac == 0.5)\n    {\n        if (d > 0)\n        {\n            result =\
    \ to!int(d) + 1;\n        }\n        else\n        {\n            result = to!int(d)\
    \ - 1;\n        }\n    }\n    else\n    {\n        result = to!int(d);\n    }\n\
    \    return result;\n}", "{\n    return round(to!double(value));\n}", "{\n   \
    \ long result = 0;\n    double d = to!double(value);\n    if (d > 0)\n    {\n\
    \        result = cast(long)ceil(d);\n    }\n    else\n    {\n        result =\
    \ cast(long)floor(d);\n    }\n    return result;\n}", "{\n    long result = 0;\n\
    \    double d = to!double(value);\n    double fraction = d - cast(long)d;\n  \
    \  if (fraction == 0.5)\n    {\n        result = cast(long)d;\n        if (d >\
    \ 0)\n            result++;\n        else\n            result--;\n    }\n    else\n\
    \    {\n        result = cast(long)d;\n        if (fraction > 0.5)\n         \
    \   result++;\n        else if (fraction < -0.5)\n            result--;\n    }\n\
    \    return result;\n}", "{\n    long result = 0;\n    double d = to!double(value);\n\
    \    double d_int = cast(double) cast(long) d;\n    double d_frac = d - d_int;\n\
    \    if (d_frac == 0.5)\n    {\n        result = cast(long) d;\n        if (result\
    \ < 0)\n            result--;\n        else\n            result++;\n    }\n  \
    \  else\n    {\n        result = cast(long) round(d);\n    }\n    return result;\n\
    }", "{\n    long result = 0;\n    double d = to!double(value);\n    result = cast(long)d;\n\
    \    if (d - result > 0.5)\n        result++;\n    return result;\n}", "{\n  \
    \  long result = 0;\n    double d = to!double(value);\n    double d_int = to!double(to!long(d));\n\
    \    double d_frac = d - d_int;\n    if (d_frac == 0.5)\n    {\n        if (d\
    \ > 0)\n        {\n            result = to!long(d_int + 1);\n        }\n     \
    \   else\n        {\n            result = to!long(d_int - 1);\n        }\n   \
    \ }\n    else\n    {\n        result = to!long(d);\n    }\n    return result;\n\
    }", "{\n    auto v = to!double(value);\n    auto i = cast(long)v;\n    if(v -\
    \ i > 0.5)\n        return i + 1;\n    else if(v - i < -0.5)\n        return i\
    \ - 1;\n    else\n        return i;\n}", "{\n    double d = to!double(value);\n\
    \    return cast(long)round(d);\n}", "{\n    double d = to!double(value);\n  \
    \  long l = to!long(d);\n    if (d - l >= 0.5)\n        return l + 1;\n    else\n\
    \        return l;\n}", "{\n    long result = 0;\n    double d = to!double(value);\n\
    \    if (d > 0)\n    {\n        result = cast(long)ceil(d);\n    }\n    else\n\
    \    {\n        result = cast(long)floor(d);\n    }\n    return result;\n}", "{\n\
    \    long result = 0;\n    double d = to!double(value);\n    double f = floor(d);\n\
    \    double c = ceil(d);\n    if (d - f < c - d)\n        result = cast(long)f;\n\
    \    else\n        result = cast(long)c;\n    return result;\n}", "{\n    double\
    \ d = to!double(value);\n    return cast(long)round(d);\n}", "{\n    long result\
    \ = 0;\n    double d = to!double(value);\n    if (d < 0)\n    {\n        result\
    \ = cast(long)ceil(d);\n    }\n    else\n    {\n        result = cast(long)floor(d);\n\
    \    }\n    return result;\n}", "{\n    long result = 0;\n    double d = to!double(value);\n\
    \    if(d > 0)\n    {\n        result = cast(long)ceil(d);\n    }\n    else\n\
    \    {\n        result = cast(long)floor(d);\n    }\n    return result;\n}", "{\n\
    \    double d = to!double(value);\n    return cast(long)d;\n}", "{\n    long result\
    \ = 0;\n    double d = to!double(value);\n    if (d < 0)\n    {\n        result\
    \ = cast(long) ceil(d);\n    }\n    else\n    {\n        result = cast(long) floor(d);\n\
    \    }\n    return result;\n}", "{\n    return cast(long)round(to!double(value));\n\
    }", "{\n    auto num = to!double(value);\n    return cast(long)round(num);\n}",
  "{\n    long result = 0;\n    double d = to!double(value);\n    if (d > 0)\n   \
    \ {\n        result = cast(long)ceil(d);\n    }\n    else\n    {\n        result\
    \ = cast(long)floor(d);\n    }\n    return result;\n}", "{\n    double d = to!double(value);\n\
    \    return cast(long) round(d);\n}", "{\n    long result = 0;\n    double d =\
    \ to!double(value);\n    if (d > 0)\n    {\n        result = cast(long)d;\n  \
    \      if (d - result > 0.5)\n            result++;\n    }\n    else\n    {\n\
    \        result = cast(long)d;\n        if (result - d > 0.5)\n            result--;\n\
    \    }\n    return result;\n}", "{\n    long result = 0;\n    double d = to!double(value);\n\
    \    double d_abs = abs(d);\n    long l = to!long(d_abs);\n    double d_diff =\
    \ d_abs - l;\n    if (d_diff >= 0.5)\n    {\n        if (d > 0)\n        {\n \
    \           result = l + 1;\n        }\n        else\n        {\n            result\
    \ = -(l + 1);\n        }\n    }\n    else\n    {\n        if (d > 0)\n       \
    \ {\n            result = l;\n        }\n        else\n        {\n           \
    \ result = -l;\n        }\n    }\n    return result;\n}", "{\n    return cast(long)round(to!double(value));\n\
    }", "{\n    long result = 0;\n    double d = to!double(value);\n    double d_abs\
    \ = abs(d);\n    double d_floor = floor(d_abs);\n    double d_ceil = ceil(d_abs);\n\
    \    double d_floor_diff = d_abs - d_floor;\n    double d_ceil_diff = d_ceil -\
    \ d_abs;\n    if (d_floor_diff == d_ceil_diff)\n    {\n        result = d < 0\
    \ ? -d_ceil : d_ceil;\n    }\n    else\n    {\n        result = d_floor_diff <\
    \ d_ceil_diff ? d_floor : d_ceil;\n    }\n    return result;\n}", "{\n    long\
    \ result = 0;\n    double d = to!double(value);\n    if (d > 0)\n    {\n     \
    \   result = cast(long)ceil(d);\n    }\n    else\n    {\n        result = cast(long)floor(d);\n\
    \    }\n    return result;\n}", "{\n    long ret = 0;\n    double d = to!double(value);\n\
    \    if (d > 0)\n    {\n        ret = cast(long) ceil(d);\n    }\n    else\n \
    \   {\n        ret = cast(long) floor(d);\n    }\n    return ret;\n}", "{\n  \
    \  double d = to!double(value);\n    long l = to!long(value);\n    if (d - l >=\
    \ 0.5)\n        return l + 1;\n    else\n        return l;\n}", "{\n    long result\
    \ = 0;\n    double dbl = to!double(value);\n    double intpart = 0;\n    double\
    \ fracpart = modf(dbl, &intpart);\n    if (fracpart == 0.5)\n    {\n        result\
    \ = cast(long)intpart;\n        if (dbl < 0)\n            result -= 1;\n     \
    \   else\n            result += 1;\n    }\n    else\n    {\n        result = cast(long)round(dbl);\n\
    \    }\n    return result;\n}", "{\n    return cast(long)round(to!double(value));\n\
    }", "{\n    return cast(long) round(to!double(value));\n}", "{\n    long result\
    \ = 0;\n    double d = to!double(value);\n    double intpart = 0;\n    double\
    \ fractpart = modf(d, &intpart);\n    if (fractpart == 0.5)\n    {\n        if\
    \ (d > 0)\n        {\n            result = cast(long)intpart + 1;\n        }\n\
    \        else\n        {\n            result = cast(long)intpart - 1;\n      \
    \  }\n    }\n    else\n    {\n        result = cast(long)d;\n    }\n    return\
    \ result;\n}", "{\n    return cast(long) round(to!double(value));\n}", "{\n  \
    \  long result = 0;\n    double d = to!double(value);\n    double d1 = floor(d);\n\
    \    double d2 = ceil(d);\n    if (d1 == d2)\n        return cast(long)d;\n  \
    \  else if (d - d1 < d2 - d)\n        return cast(long)d1;\n    else\n       \
    \ return cast(long)d2;\n}", "{\n    double d = to!double(value);\n    long l =\
    \ to!long(value);\n    if (d - l > 0.5)\n        return l + 1;\n    else if (d\
    \ - l < -0.5)\n        return l - 1;\n    else\n        return l;\n}", "{\n  \
    \  return cast(long) round(to!double(value));\n}", "{\n    long result = 0;\n\
    \    double d = to!double(value);\n    long l = to!long(value);\n    if (d - l\
    \ == 0.5)\n    {\n        result = l + 1;\n    }\n    else if (d - l == -0.5)\n\
    \    {\n        result = l - 1;\n    }\n    else\n    {\n        result = l;\n\
    \    }\n    return result;\n}", "{\n    long result = 0;\n    double d = to!double(value);\n\
    \    double d1 = floor(d);\n    double d2 = ceil(d);\n    if (d - d1 == d2 - d)\n\
    \    {\n        if (d > 0)\n            result = cast(long)d2;\n        else\n\
    \            result = cast(long)d1;\n    }\n    else\n    {\n        if (d - d1\
    \ < d2 - d)\n            result = cast(long)d1;\n        else\n            result\
    \ = cast(long)d2;\n    }\n    return result;\n}", "{\n    long result = 0;\n \
    \   double d = to!double(value);\n    if (d > 0)\n    {\n        result = cast(long)d;\n\
    \        if (d - result >= 0.5)\n            result++;\n    }\n    else\n    {\n\
    \        result = cast(long)d;\n        if (result - d >= 0.5)\n            result--;\n\
    \    }\n    return result;\n}", "{\n    long result = 0;\n    double d = to!double(value);\n\
    \    double f = floor(d);\n    double c = ceil(d);\n    if (d - f < c - d)\n \
    \       result = cast(long)f;\n    else\n        result = cast(long)c;\n    return\
    \ result;\n}", "{\n    long result = 0;\n    double d = to!double(value);\n  \
    \  double d_int = cast(double) cast(long) d;\n    double d_frac = d - d_int;\n\
    \    if (d_frac < 0.5)\n        result = cast(long) d_int;\n    else\n       \
    \ result = cast(long) d_int + 1;\n    return result;\n}", "{\n    long result\
    \ = 0;\n    double d = to!double(value);\n    double f = floor(d);\n    double\
    \ c = ceil(d);\n    if (d - f < c - d)\n        result = cast(long)f;\n    else\n\
    \        result = cast(long)c;\n    return result;\n}", "{\n    long result =\
    \ 0;\n    double d = to!double(value);\n    if (d > 0)\n    {\n        result\
    \ = cast(long)ceil(d);\n    }\n    else\n    {\n        result = cast(long)floor(d);\n\
    \    }\n    return result;\n}", "{\n    long result = 0;\n    double d = to!double(value);\n\
    \    if (d < 0)\n    {\n        result = cast(long) (d - 0.5);\n    }\n    else\n\
    \    {\n        result = cast(long) (d + 0.5);\n    }\n    return result;\n}",
  "{\n    auto num = to!double(value);\n    auto num_int = to!long(num);\n    auto\
    \ num_frac = num - num_int;\n    if (num_frac == 0.5)\n    {\n        if (num_int\
    \ < 0)\n            return num_int - 1;\n        else\n            return num_int\
    \ + 1;\n    }\n    else\n    {\n        return num_int;\n    }\n}", "{\n    long\
    \ result = 0;\n    double d = to!double(value);\n    if (d < 0)\n    {\n     \
    \   result = cast(long)ceil(d);\n    }\n    else\n    {\n        result = cast(long)floor(d);\n\
    \    }\n    return result;\n}", "{\n    return cast(long)round(to!double(value));\n\
    }", "{\n    long result = 0;\n    double d = to!double(value);\n    if (d < 0)\n\
    \    {\n        result = cast(long)floor(d);\n        if (d - result > 0.5)\n\
    \            result++;\n    }\n    else\n    {\n        result = cast(long)ceil(d);\n\
    \        if (result - d > 0.5)\n            result--;\n    }\n    return result;\n\
    }", "{\n    long result = 0;\n    double d = to!double(value);\n    if (d > 0)\n\
    \    {\n        result = cast(long)ceil(d);\n    }\n    else if (d < 0)\n    {\n\
    \        result = cast(long)floor(d);\n    }\n    else\n    {\n        result\
    \ = 0;\n    }\n    return result;\n}", "{\n    auto num = to!double(value);\n\
    \    auto int_part = to!long(num);\n    auto frac_part = num - int_part;\n   \
    \ if (frac_part >= 0.5)\n        return int_part + 1;\n    else if (frac_part\
    \ <= -0.5)\n        return int_part - 1;\n    else\n        return int_part;\n\
    }", "{\n    auto num = to!double(value);\n    auto floor = cast(long) floor(num);\n\
    \    auto ceil = cast(long) ceil(num);\n    return abs(num - floor) < abs(num\
    \ - ceil) ? floor : ceil;\n}", "{\n    auto num = to!double(value);\n    return\
    \ cast(long)round(num);\n}", "{\n    return cast(long)round(to!double(value));\n\
    }", "{\n    // TODO: Implement this function\n    return 0;\n}", "{\n    auto\
    \ d = to!double(value);\n    return cast(long)d;\n}", "{\n    double d = to!double(value);\n\
    \    return cast(long) round(d);\n}", "{\n    auto num = to!double(value);\n \
    \   return cast(long) (num > 0 ? num + 0.5 : num - 0.5);\n}", "{\n    long result\
    \ = 0;\n    double d = to!double(value);\n    if (d > 0)\n    {\n        result\
    \ = cast(long)ceil(d);\n    }\n    else\n    {\n        result = cast(long)floor(d);\n\
    \    }\n    return result;\n}", "{\n    return cast(long)round(to!double(value));\n\
    }", "{\n    long result = 0;\n    double d = to!double(value);\n    double f =\
    \ floor(d);\n    double c = ceil(d);\n    if (d - f < c - d)\n        result =\
    \ to!long(f);\n    else\n        result = to!long(c);\n    return result;\n}",
  "{\n    long result = 0;\n    double d = to!double(value);\n    if (d > 0)\n   \
    \ {\n        result = cast(long)ceil(d);\n    }\n    else\n    {\n        result\
    \ = cast(long)floor(d);\n    }\n    return result;\n}", "{\n    auto num = to!double(value);\n\
    \    auto floor = cast(long)num;\n    auto ceil = cast(long)num + 1;\n    auto\
    \ diff_floor = abs(num - floor);\n    auto diff_ceil = abs(num - ceil);\n    return\
    \ diff_floor < diff_ceil ? floor : ceil;\n}", "{\n    long result = 0;\n    double\
    \ d = to!double(value);\n    if (d > 0)\n    {\n        result = cast(long)d;\n\
    \        if (d - result > 0.5)\n            result++;\n    }\n    else\n    {\n\
    \        result = cast(long)d;\n        if (result - d > 0.5)\n            result--;\n\
    \    }\n    return result;\n}", "{\n    return cast(long)round(to!double(value));\n\
    }", "{\n    return cast(long)round(to!double(value));\n}", "{\n    // TODO: implement\
    \ this function\n    return 0;\n}", "{\n    long result = 0;\n    double d = to!double(value);\n\
    \    result = cast(long)d;\n    if (abs(d - result) >= 0.5)\n    {\n        result\
    \ += (d > 0) ? 1 : -1;\n    }\n    return result;\n}", "{\n    double d = to!double(value);\n\
    \    return cast(long)round(d);\n}", "{\n    long result = 0;\n    double d =\
    \ to!double(value);\n    if (d > 0)\n    {\n        result = cast(long)ceil(d);\n\
    \    }\n    else\n    {\n        result = cast(long)floor(d);\n    }\n    return\
    \ result;\n}", "{\n    auto num = to!double(value);\n    return round(num);\n}",
  "{\n    long result = 0;\n    double d = to!double(value);\n    if (d > 0)\n   \
    \ {\n        result = cast(long)ceil(d);\n    }\n    else if (d < 0)\n    {\n\
    \        result = cast(long)floor(d);\n    }\n    else\n    {\n        result\
    \ = 0;\n    }\n    return result;\n}", "{\n    double d = to!double(value);\n\
    \    long l = to!long(value);\n    double d2 = to!double(l);\n    if (d == d2)\
    \ return l;\n    else if (d > d2) return l + 1;\n    else return l - 1;\n}", "{\n\
    \    return cast(long) round(to!double(value));\n}", "{\n    long result = 0;\n\
    \    double d = to!double(value);\n    double d_int = to!double(to!long(d));\n\
    \    double d_frac = d - d_int;\n    if (d_frac == 0.5)\n    {\n        if (d\
    \ > 0)\n        {\n            result = to!long(d + 0.5);\n        }\n       \
    \ else\n        {\n            result = to!long(d - 0.5);\n        }\n    }\n\
    \    else\n    {\n        result = to!long(d);\n    }\n    return result;\n}",
  "{\n    auto d = to!double(value);\n    return cast(long) round(d);\n}", "{\n  \
    \  long result = 0;\n    double d = to!double(value);\n    double intpart = 0;\n\
    \    double fractpart = modf(d, &intpart);\n    if (fractpart == 0.5)\n    {\n\
    \        if (d > 0)\n        {\n            result = cast(long)intpart + 1;\n\
    \        }\n        else\n        {\n            result = cast(long)intpart -\
    \ 1;\n        }\n    }\n    else\n    {\n        result = cast(long)d;\n    }\n\
    \    return result;\n}", "{\n    long result = 0;\n    double d = to!double(value);\n\
    \    if (d > 0)\n    {\n        result = cast(long) ceil(d);\n    }\n    else\n\
    \    {\n        result = cast(long) floor(d);\n    }\n    return result;\n}",
  "{\n    long result = 0;\n    double d = to!double(value);\n    if(d < 0)\n    {\n\
    \        result = cast(long)ceil(d);\n    }\n    else\n    {\n        result =\
    \ cast(long)floor(d);\n    }\n    return result;\n}", "{\n    long result = 0;\n\
    \    double d = to!double(value);\n    if (d < 0)\n    {\n        result = cast(long)ceil(d);\n\
    \    }\n    else\n    {\n        result = cast(long)floor(d);\n    }\n    return\
    \ result;\n}", "{\n    double d = to!double(value);\n    return cast(long) (d\
    \ > 0 ? ceil(d) : floor(d));\n}", "{\n    long result = 0;\n    double d = to!double(value);\n\
    \    if (d < 0)\n    {\n        result = cast(long) (d - 0.5);\n    }\n    else\n\
    \    {\n        result = cast(long) (d + 0.5);\n    }\n    return result;\n}",
  "{\n    double d = to!double(value);\n    return cast(long) round(d);\n}", "{\n\
    \    auto x = to!double(value);\n    return cast(long)round(x);\n}", "{\n    long\
    \ result = 0;\n    double d = to!double(value);\n    if (d > 0)\n    {\n     \
    \   result = cast(long)ceil(d);\n    }\n    else\n    {\n        result = cast(long)floor(d);\n\
    \    }\n    return result;\n}", "{\n    long result = 0;\n    double d = to!double(value);\n\
    \    if (d > 0)\n    {\n        result = cast(long)ceil(d);\n    }\n    else\n\
    \    {\n        result = cast(long)floor(d);\n    }\n    return result;\n}", "{\n\
    \    // TODO: Implement me\n    return 0;\n}", "{\n    long result = 0;\n    long\
    \ number = to!long(value);\n    long fraction = to!long(value.split(\".\")[1]);\n\
    \    if (fraction >= 50)\n    {\n        result = number + 1;\n    }\n    else\n\
    \    {\n        result = number;\n    }\n    return result;\n}", "{\n    long\
    \ result = 0;\n    double d = to!double(value);\n    double intpart = 0;\n   \
    \ double fractpart = modf(d, &intpart);\n    if (fractpart == 0.5)\n    {\n  \
    \      if (intpart > 0)\n        {\n            result = cast(long)intpart + 1;\n\
    \        }\n        else\n        {\n            result = cast(long)intpart -\
    \ 1;\n        }\n    }\n    else\n    {\n        result = cast(long)intpart;\n\
    \    }\n    return result;\n}", "{\n    auto num = to!double(value);\n    return\
    \ cast(long) round(num);\n}", "{\n    long result = 0;\n    double d = to!double(value);\n\
    \    if (d < 0)\n    {\n        result = cast(long) ceil(d);\n    }\n    else\n\
    \    {\n        result = cast(long) floor(d);\n    }\n    return result;\n}",
  "{\n    long result = 0;\n    double d = to!double(value);\n    double f = floor(d);\n\
    \    double c = ceil(d);\n    if (d - f < c - d)\n        result = cast(long)f;\n\
    \    else\n        result = cast(long)c;\n    return result;\n}", "{\n    long\
    \ result = 0;\n    double d = to!double(value);\n    double d_int = to!double(to!long(d));\n\
    \    double d_frac = d - d_int;\n    if (d_frac < 0.5)\n        result = to!long(d_int);\n\
    \    else\n        result = to!long(d_int + 1);\n    return result;\n}", "{\n\
    \    long result = 0;\n    double d = to!double(value);\n    double d_abs = abs(d);\n\
    \    double d_floor = floor(d_abs);\n    double d_ceil = ceil(d_abs);\n    double\
    \ d_diff_floor = d_abs - d_floor;\n    double d_diff_ceil = d_ceil - d_abs;\n\
    \    if (d_diff_floor < d_diff_ceil)\n    {\n        result = cast(long)d_floor;\n\
    \    }\n    else if (d_diff_floor > d_diff_ceil)\n    {\n        result = cast(long)d_ceil;\n\
    \    }\n    else\n    {\n        result = cast(long)d_ceil;\n    }\n    if (d\
    \ < 0)\n    {\n        result = -result;\n    }\n    return result;\n}", "{\n\
    \    long result = 0;\n    double d = to!double(value);\n    double f = floor(d);\n\
    \    double c = ceil(d);\n    double d1 = abs(d - f);\n    double d2 = abs(d -\
    \ c);\n    if (d1 == d2)\n    {\n        result = (d < 0) ? f : c;\n    }\n  \
    \  else\n    {\n        result = (d1 < d2) ? f : c;\n    }\n    return result;\n\
    }", "{\n    long result = 0;\n    double d = to!double(value);\n    double f =\
    \ floor(d);\n    double c = ceil(d);\n    if (d - f == 0.5)\n    {\n        result\
    \ = (d > 0) ? c : f;\n    }\n    else\n    {\n        result = (d - f < c - d)\
    \ ? f : c;\n    }\n    return result;\n}", "{\n    long result = 0;\n    double\
    \ d = to!double(value);\n    if(d > 0)\n    {\n        result = cast(long) d;\n\
    \        if(d - result > 0.5)\n            result++;\n    }\n    else\n    {\n\
    \        result = cast(long) d;\n        if(d - result < -0.5)\n            result--;\n\
    \    }\n    return result;\n}", "{\n    long result = 0;\n    double d = 0.0;\n\
    \    double fractional = 0.0;\n    double integral = 0.0;\n    double fractional_abs\
    \ = 0.0;\n    double integral_abs = 0.0;\n    double fractional_abs_ceil = 0.0;\n\
    \    double integral_abs_ceil = 0.0;\n    double fractional_abs_floor = 0.0;\n\
    \    double integral_abs_floor = 0.0;\n    double fractional_abs_ceil_abs = 0.0;\n\
    \    double integral_abs_ceil_abs = 0.0;\n    double fractional_abs_floor_abs\
    \ = 0.0;\n    double integral_abs_floor_abs = 0.0;\n    double fractional_abs_ceil_abs_diff\
    \ = 0.0;\n    double integral_abs_ceil_abs_diff = 0.0;\n    double fractional_abs_floor_abs_diff\
    \ = 0.0;\n    double integral_abs_floor_abs_diff = 0.0;\n    double fractional_abs_ceil_abs_diff_abs\
    \ = 0.0;\n    double integral_abs_ceil_abs_diff_abs = 0.0;\n    double fractional_abs_floor_abs_diff_abs\
    \ = 0.0;\n    double integral_abs_floor_abs_diff_abs = 0.0;\n    double fractional_abs_ceil_abs_diff_abs_min\
    \ = 0.0;\n    double integral_abs_ceil_abs_diff_abs_min = 0.0;\n    double fractional_abs_floor_abs_diff_abs_min\
    \ = 0.0;\n    double integral_abs_floor_abs_diff_abs_min = 0.0;\n    double fractional_abs_ceil_abs_diff_abs_min_abs\
    \ = 0.0;\n    double integral_abs_ceil_abs_diff_abs_min_abs = 0.0;\n    double\
    \ fractional_abs_floor_abs_diff_abs_min_abs = 0.0;\n    double integral_abs_floor_abs_diff_abs_min_abs\
    \ ="]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
