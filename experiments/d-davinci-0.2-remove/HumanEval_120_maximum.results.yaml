language: d
name: HumanEval_120_maximum
results:
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (int i = 0; i < k; i++)\n\
    \    {\n        result[i] = arr[i];\n    }\n    sort(result);\n    for (int i\
    \ = k; i < arr.length; i++)\n    {\n        if (arr[i] > result[0])\n        {\n\
    \            result[0] = arr[i];\n            sort(result);\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfa4yimj7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (int i = 0; i < k; i++)\n\
    \    {\n        result[i] = arr[i];\n    }\n    sort(result);\n    for (int i\
    \ = k; i < arr.length; i++)\n    {\n        if (arr[i] > result[0])\n        {\n\
    \            result[0] = arr[i];\n            sort(result);\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfa4yimj7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (int i = 0; i < k; i++)\n\
    \    {\n        result[i] = arr[i];\n    }\n    sort(result);\n    for (int i\
    \ = k; i < arr.length; i++)\n    {\n        if (arr[i] > result[0])\n        {\n\
    \            result[0] = arr[i];\n            sort(result);\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfa4yimj7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (int i = 0; i < k; i++)\n\
    \    {\n        result[i] = arr[i];\n    }\n    sort(result);\n    for (int i\
    \ = k; i < arr.length; i++)\n    {\n        if (arr[i] > result[0])\n        {\n\
    \            result[0] = arr[i];\n            sort(result);\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfa4yimj7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (int i = 0; i < k; i++)\n\
    \    {\n        result[i] = arr[i];\n    }\n    sort(result);\n    for (int i\
    \ = k; i < arr.length; i++)\n    {\n        if (arr[i] > result[0])\n        {\n\
    \            result[0] = arr[i];\n            sort(result);\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfa4yimj7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (long i = 0; i < k; i++)\n\
    \    {\n        result[i] = arr[i];\n    }\n    sort(result);\n    for (long i\
    \ = k; i < arr.length; i++)\n    {\n        if (arr[i] > result[0])\n        {\n\
    \            result[0] = arr[i];\n            sort(result);\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl9ty7dnh.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (long i = 0; i < k; i++)\n\
    \    {\n        result[i] = arr[i];\n    }\n    sort(result);\n    for (long i\
    \ = k; i < arr.length; i++)\n    {\n        if (arr[i] > result[0])\n        {\n\
    \            result[0] = arr[i];\n            sort(result);\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl9ty7dnh.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (int i = 0; i < k; i++)\n\
    \    {\n        result[i] = arr[i];\n    }\n    sort(result);\n    for (int i\
    \ = k; i < arr.length; i++)\n    {\n        if (arr[i] > result[0])\n        {\n\
    \            result[0] = arr[i];\n            sort(result);\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfa4yimj7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (int i = 0; i < k; i++)\n\
    \    {\n        result[i] = arr[i];\n    }\n    sort(result);\n    for (int i\
    \ = k; i < arr.length; i++)\n    {\n        if (arr[i] > result[0])\n        {\n\
    \            result[0] = arr[i];\n            sort(result);\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfa4yimj7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (int i = 0; i < k; i++)\n\
    \    {\n        result[i] = arr[i];\n    }\n    sort(result);\n    for (int i\
    \ = k; i < arr.length; i++)\n    {\n        if (arr[i] > result[0])\n        {\n\
    \            result[0] = arr[i];\n            sort(result);\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfa4yimj7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (int i = 0; i < k; i++)\n\
    \    {\n        result[i] = arr[i];\n    }\n    result.sort();\n    for (int i\
    \ = k; i < arr.length; i++)\n    {\n        if (arr[i] > result[0])\n        {\n\
    \            result[0] = arr[i];\n            result.sort();\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2nrdyt80.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (int i = 0; i < k; i++)\n\
    \    {\n        result[i] = arr[i];\n    }\n    sort(result);\n    for (int i\
    \ = k; i < arr.length; i++)\n    {\n        if (arr[i] > result[0])\n        {\n\
    \            result[0] = arr[i];\n            sort(result);\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfa4yimj7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[k];\n\
    \    int i = 0;\n    int j = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n\
    \    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n\
    \    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n\
    \    int y = 0;\n    int z = 0;\n    int aa = 0;\n    int bb = 0;\n    int cc\
    \ = 0;\n    int dd = 0;\n    int ee = 0;\n    int ff = 0;\n    int gg = 0;\n \
    \   int hh = 0;\n    int ii = 0;\n    int jj = 0;\n    int kk = 0;\n    int ll\
    \ = 0;\n    int mm = 0;\n    int nn = 0;\n    int oo = 0;\n    int pp = 0;\n \
    \   int qq = 0;\n    int rr = 0;\n    int ss = 0;\n    int tt = 0;\n    int uu\
    \ = 0;\n    int vv = 0;\n    int ww = 0;\n    int xx = 0;\n    int yy = 0;\n \
    \   int zz = 0;\n    int aaa = 0;\n    int bbb = 0;\n    int ccc = 0;\n    int\
    \ ddd = 0;\n    int eee = 0;\n    int fff = 0;\n    int ggg = 0;\n    int hhh\
    \ = 0;\n    int iii = 0;\n    int jjj = 0;\n    int kkk = 0;\n    int lll = 0;\n\
    \    int mmm = 0;\n    int nnn = 0;\n    int ooo = 0;\n    int ppp = 0;\n    int\
    \ qqq = 0;\n    int rrr = 0;\n    int sss = 0;\n    int ttt = 0;\n    int uuu\
    \ = 0;\n    int\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp00j04am1.d(91): Error: no identifier for declarator int\n/tmp/tmp00j04am1.d(91):
    Error: found \''unittest\'' instead of statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmp00j04am1.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (int i = 0; i < k; i++)\n\
    \    {\n        result[i] = arr[i];\n    }\n    sort(result);\n    for (int i\
    \ = k; i < arr.length; i++)\n    {\n        if (arr[i] > result[0])\n        {\n\
    \            result[0] = arr[i];\n            sort(result);\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfa4yimj7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (long i = 0; i < k; i++)\n\
    \    {\n        result[i] = arr[i];\n    }\n    sort(result);\n    for (long i\
    \ = k; i < arr.length; i++)\n    {\n        if (arr[i] > result[0])\n        {\n\
    \            result[0] = arr[i];\n            sort(result);\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl9ty7dnh.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] res = new long[k];\n    for (long i = 0; i < k; i++)\n\
    \    {\n        res[i] = arr[i];\n    }\n    sort(res);\n    for (long i = k;\
    \ i < arr.length; i++)\n    {\n        if (arr[i] > res[0])\n        {\n     \
    \       res[0] = arr[i];\n            sort(res);\n        }\n    }\n    return\
    \ res;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi6bkjclj.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (int i = 0; i < k; i++)\n\
    \    {\n        result[i] = arr[i];\n    }\n    sort(result);\n    for (int i\
    \ = k; i < arr.length; i++)\n    {\n        if (arr[i] > result[0])\n        {\n\
    \            result[0] = arr[i];\n            sort(result);\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfa4yimj7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (int i = 0; i < k; i++)\n\
    \    {\n        result[i] = arr[i];\n    }\n    sort(result);\n    for (int i\
    \ = k; i < arr.length; i++)\n    {\n        if (arr[i] > result[0])\n        {\n\
    \            result[0] = arr[i];\n            sort(result);\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfa4yimj7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (long i = 0; i < k; i++)\n\
    \    {\n        result[i] = arr[i];\n    }\n    sort(result);\n    for (long i\
    \ = k; i < arr.length; i++)\n    {\n        if (arr[i] > result[0])\n        {\n\
    \            result[0] = arr[i];\n            sort(result);\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl9ty7dnh.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (long i = 0; i < k; i++)\n\
    \    {\n        result[i] = arr[i];\n    }\n    sort(result);\n    for (long i\
    \ = k; i < arr.length; i++)\n    {\n        if (arr[i] > result[0])\n        {\n\
    \            result[0] = arr[i];\n            sort(result);\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl9ty7dnh.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (int i = 0; i < k; i++)\n\
    \    {\n        result[i] = arr[i];\n    }\n    sort(result);\n    for (int i\
    \ = k; i < arr.length; i++)\n    {\n        if (arr[i] > result[0])\n        {\n\
    \            result[0] = arr[i];\n            sort(result);\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfa4yimj7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (int i = 0; i < k; i++)\n\
    \    {\n        result[i] = arr[i];\n    }\n    sort(result);\n    for (int i\
    \ = k; i < arr.length; i++)\n    {\n        if (arr[i] > result[0])\n        {\n\
    \            result[0] = arr[i];\n            sort(result);\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfa4yimj7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (int i = 0; i < k; i++)\n\
    \    {\n        result[i] = arr[i];\n    }\n    sort(result);\n    for (int i\
    \ = k; i < arr.length; i++)\n    {\n        if (arr[i] > result[0])\n        {\n\
    \            result[0] = arr[i];\n            sort(result);\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfa4yimj7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (long i = 0; i < k; i++)\n\
    \    {\n        result[i] = arr[i];\n    }\n    sort(result);\n    for (long i\
    \ = k; i < arr.length; i++)\n    {\n        if (arr[i] > result[0])\n        {\n\
    \            result[0] = arr[i];\n            sort(result);\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl9ty7dnh.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (long i = 0; i < k; i++)\n\
    \    {\n        result[i] = arr[i];\n    }\n    sort(result);\n    for (long i\
    \ = k; i < arr.length; i++)\n    {\n        if (arr[i] > result[0])\n        {\n\
    \            result[0] = arr[i];\n            sort(result);\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl9ty7dnh.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (long i = 0; i < k; i++)\n\
    \    {\n        result[i] = arr[i];\n    }\n    sort(result);\n    for (long i\
    \ = k; i < arr.length; i++)\n    {\n        if (arr[i] > result[0])\n        {\n\
    \            result[0] = arr[i];\n            sort(result);\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl9ty7dnh.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (int i = 0; i < k; i++)\n\
    \    {\n        result[i] = arr[i];\n    }\n    sort(result);\n    for (int i\
    \ = k; i < arr.length; i++)\n    {\n        if (arr[i] > result[0])\n        {\n\
    \            result[0] = arr[i];\n            sort(result);\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfa4yimj7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (long i = 0; i < k; i++)\n\
    \    {\n        result[i] = arr[i];\n    }\n    sort(result);\n    for (long i\
    \ = k; i < arr.length; i++)\n    {\n        if (arr[i] > result[0])\n        {\n\
    \            result[0] = arr[i];\n            sort(result);\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl9ty7dnh.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (int i = 0; i < k; i++)\n\
    \    {\n        result[i] = arr[i];\n    }\n    sort(result);\n    for (int i\
    \ = k; i < arr.length; i++)\n    {\n        if (arr[i] > result[0])\n        {\n\
    \            result[0] = arr[i];\n            sort(result);\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfa4yimj7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] res = new long[k];\n    for (int i = 0; i < k; i++)\n\
    \    {\n        res[i] = arr[i];\n    }\n    sort(res);\n    for (int i = k; i\
    \ < arr.length; i++)\n    {\n        if (arr[i] > res[0])\n        {\n       \
    \     res[0] = arr[i];\n            sort(res);\n        }\n    }\n    return res;\n\
    }\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L, -4L,\
    \ 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L,\
    \ 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkmob69sz.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    if (arr.length == 0)\n        return new long[0];\n    if (arr.length\
    \ == 1)\n        return arr;\n    if (k == 0)\n        return new long[0];\n \
    \   if (k == 1)\n        return new long[]{max(arr)};\n    if (k == arr.length)\n\
    \        return arr;\n    long[] res = new long[k];\n    for (int i = 0; i < k;\
    \ i++)\n        res[i] = arr[i];\n    for (int i = k; i < arr.length; i++)\n \
    \   {\n        long min = res[0];\n        int minIndex = 0;\n        for (int\
    \ j = 1; j < k; j++)\n        {\n            if (res[j] < min)\n            {\n\
    \                min = res[j];\n                minIndex = j;\n            }\n\
    \        }\n        if (arr[i] > min)\n            res[minIndex] = arr[i];\n \
    \   }\n    return res;\n}\nunittest\n{\n    alias candidate = maximum;\n\n   \
    \ assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpzvd2ujwq.d(31): Error: found \''{\'' when expecting \'';\''
    following return statement\n/tmp/tmpzvd2ujwq.d(31): Error: found \''}\'' when
    expecting \'';\'' following statement\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpzvd2ujwq.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (long i = 0; i < k; i++)\n\
    \    {\n        result[i] = arr[i];\n    }\n    sort(result);\n    for (long i\
    \ = k; i < arr.length; i++)\n    {\n        if (arr[i] > result[0])\n        {\n\
    \            result[0] = arr[i];\n            sort(result);\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl9ty7dnh.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (long i = 0; i < k; i++)\n\
    \    {\n        result[i] = arr[i];\n    }\n    sort(result);\n    for (long i\
    \ = k; i < arr.length; i++)\n    {\n        if (arr[i] > result[0])\n        {\n\
    \            result[0] = arr[i];\n            sort(result);\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl9ty7dnh.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] res = new long[k];\n    for (int i = 0; i < k; i++)\n\
    \    {\n        res[i] = arr[i];\n    }\n    sort(res);\n    for (int i = k; i\
    \ < arr.length; i++)\n    {\n        if (arr[i] > res[0])\n        {\n       \
    \     res[0] = arr[i];\n            sort(res);\n        }\n    }\n    return res;\n\
    }\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L, -4L,\
    \ 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L,\
    \ 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkmob69sz.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[k];\n\
    \    int index = 0;\n    for (int i = 0; i < k; i++)\n    {\n        temp[i] =\
    \ arr[i];\n    }\n    temp = temp.sort();\n    for (int i = k; i < arr.length;\
    \ i++)\n    {\n        if (arr[i] > temp[0])\n        {\n            temp[0] =\
    \ arr[i];\n            temp = temp.sort();\n        }\n    }\n    return temp;\n\
    }\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L, -4L,\
    \ 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L,\
    \ 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp83nb9kvs.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (int i = 0; i < k; i++)\n\
    \    {\n        result[i] = arr[i];\n    }\n    sort(result);\n    for (int i\
    \ = k; i < arr.length; i++)\n    {\n        if (arr[i] > result[0])\n        {\n\
    \            result[0] = arr[i];\n            sort(result);\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfa4yimj7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (int i = 0; i < k; i++)\n\
    \    {\n        result[i] = arr[i];\n    }\n    sort(result);\n    for (int i\
    \ = k; i < arr.length; i++)\n    {\n        if (arr[i] > result[0])\n        {\n\
    \            result[0] = arr[i];\n            sort(result);\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfa4yimj7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (int i = 0; i < k; i++)\n\
    \    {\n        result[i] = arr[i];\n    }\n    sort(result);\n    for (int i\
    \ = k; i < arr.length; i++)\n    {\n        if (arr[i] > result[0])\n        {\n\
    \            result[0] = arr[i];\n            sort(result);\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfa4yimj7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (long i = 0; i < k; i++)\n\
    \    {\n        result[i] = arr[i];\n    }\n    sort(result);\n    for (long i\
    \ = k; i < arr.length; i++)\n    {\n        if (arr[i] > result[0])\n        {\n\
    \            result[0] = arr[i];\n            sort(result);\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl9ty7dnh.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    if(k == 0)\n    {\n     \
    \   return result;\n    }\n    if(k == arr.length)\n    {\n        return arr;\n\
    \    }\n    if(k > arr.length)\n    {\n        return null;\n    }\n    long[]\
    \ temp = new long[k];\n    for(int i = 0; i < k; i++)\n    {\n        temp[i]\
    \ = arr[i];\n    }\n    temp.sort();\n    for(int i = k; i < arr.length; i++)\n\
    \    {\n        if(arr[i] > temp[0])\n        {\n            temp[0] = arr[i];\n\
    \            temp.sort();\n        }\n    }\n    for(int i = 0; i < k; i++)\n\
    \    {\n        result[i] = temp[k - i - 1];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L)\
    \ == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n\
    \    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L,\
    \ -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpssyqqnbg.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (int i = 0; i < k; i++)\n\
    \    {\n        result[i] = arr[i];\n    }\n    sort(result);\n    for (int i\
    \ = k; i < arr.length; i++)\n    {\n        if (arr[i] > result[0])\n        {\n\
    \            result[0] = arr[i];\n            sort(result);\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfa4yimj7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] res = new long[k];\n    for (int i = 0; i < k; i++)\n\
    \    {\n        res[i] = arr[i];\n    }\n    sort(res);\n    for (int i = k; i\
    \ < arr.length; i++)\n    {\n        if (arr[i] > res[0])\n        {\n       \
    \     res[0] = arr[i];\n            sort(res);\n        }\n    }\n    return res;\n\
    }\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L, -4L,\
    \ 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L,\
    \ 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkmob69sz.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (int i = 0; i < k; i++)\n\
    \    {\n        result[i] = arr[i];\n    }\n    sort(result);\n    for (int i\
    \ = k; i < arr.length; i++)\n    {\n        if (arr[i] > result[0])\n        {\n\
    \            result[0] = arr[i];\n            sort(result);\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfa4yimj7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (long i = 0; i < k; i++)\n\
    \    {\n        long max = arr[0];\n        long maxIndex = 0;\n        for (long\
    \ j = 1; j < arr.length; j++)\n        {\n            if (arr[j] > max)\n    \
    \        {\n                max = arr[j];\n                maxIndex = j;\n   \
    \         }\n        }\n        result[i] = max;\n        arr[maxIndex] = -1;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n\
    \    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2t2ys1u6.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (long i = 0; i < k; i++)\n\
    \    {\n        result[i] = arr[i];\n    }\n    sort(result);\n    for (long i\
    \ = k; i < arr.length; i++)\n    {\n        if (arr[i] > result[0])\n        {\n\
    \            result[0] = arr[i];\n            sort(result);\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl9ty7dnh.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (int i = 0; i < k; i++)\n\
    \    {\n        result[i] = arr[i];\n    }\n    sort(result);\n    for (int i\
    \ = k; i < arr.length; i++)\n    {\n        if (arr[i] > result[0])\n        {\n\
    \            result[0] = arr[i];\n            sort(result);\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfa4yimj7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[k];\n\
    \    long max = 0;\n    long index = 0;\n    for(int i = 0; i < k; i++)\n    {\n\
    \        max = 0;\n        index = 0;\n        for(int j = 0; j < arr.length;\
    \ j++)\n        {\n            if(arr[j] > max)\n            {\n             \
    \   max = arr[j];\n                index = j;\n            }\n        }\n    \
    \    arr[index] = -1;\n        temp[i] = max;\n    }\n    for(int i = 0; i < k;\
    \ i++)\n    {\n        result[i] = temp[k - i - 1];\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L, -4L,\
    \ 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L,\
    \ 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7sm5a_hh.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (int i = 0; i < k; i++)\n\
    \    {\n        result[i] = arr[i];\n    }\n    sort(result);\n    for (int i\
    \ = k; i < arr.length; i++)\n    {\n        if (arr[i] > result[0])\n        {\n\
    \            result[0] = arr[i];\n            sort(result);\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfa4yimj7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (int i = 0; i < k; i++)\n\
    \    {\n        result[i] = arr[i];\n    }\n    sort(result);\n    for (int i\
    \ = k; i < arr.length; i++)\n    {\n        if (arr[i] > result[0])\n        {\n\
    \            result[0] = arr[i];\n            sort(result);\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfa4yimj7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[arr.length];\n\
    \    for (int i = 0; i < arr.length; i++)\n    {\n        temp[i] = arr[i];\n\
    \    }\n    sort(temp);\n    for (int i = 0; i < k; i++)\n    {\n        result[i]\
    \ = temp[arr.length - 1 - i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L,\
    \ -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyi6w2p5p.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] res = new long[k];\n    int i = 0;\n    for (; i < k;\
    \ i++)\n    {\n        res[i] = arr[i];\n    }\n    sort(res);\n    for (; i <\
    \ arr.length; i++)\n    {\n        if (arr[i] > res[0])\n        {\n         \
    \   res[0] = arr[i];\n            sort(res);\n        }\n    }\n    return res;\n\
    }\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L, -4L,\
    \ 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L,\
    \ 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgfle0d87.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    int n = arr.length;\n   \
    \ for (int i = 0; i < k; i++) \n    {\n        result[i] = arr[i];\n    }\n  \
    \  Arrays.sort(result);\n    for (int i = k; i < n; i++) \n    {\n        if (arr[i]\
    \ > result[0]) \n        {\n            result[0] = arr[i];\n            Arrays.sort(result);\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\
    \n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzuse13sc.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[arr.length];\n\
    \    for (int i = 0; i < arr.length; i++)\n    {\n        temp[i] = arr[i];\n\
    \    }\n    sort(temp);\n    for (int i = 0; i < k; i++)\n    {\n        result[i]\
    \ = temp[arr.length - 1 - i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L,\
    \ -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyi6w2p5p.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (long i = 0; i < k; i++)\n\
    \    {\n        result[i] = arr[i];\n    }\n    sort(result);\n    for (long i\
    \ = k; i < arr.length; i++)\n    {\n        if (arr[i] > result[0])\n        {\n\
    \            result[0] = arr[i];\n            sort(result);\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl9ty7dnh.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (long i = 0; i < k; i++)\n\
    \    {\n        result[i] = arr[i];\n    }\n    sort(result);\n    for (long i\
    \ = k; i < arr.length; i++)\n    {\n        if (arr[i] > result[0])\n        {\n\
    \            result[0] = arr[i];\n            sort(result);\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl9ty7dnh.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[arr.length];\n\
    \    long[] temp2 = new long[arr.length];\n    long[] temp3 = new long[arr.length];\n\
    \    long[] temp4 = new long[arr.length];\n    long[] temp5 = new long[arr.length];\n\
    \    long[] temp6 = new long[arr.length];\n    long[] temp7 = new long[arr.length];\n\
    \    long[] temp8 = new long[arr.length];\n    long[] temp9 = new long[arr.length];\n\
    \    long[] temp10 = new long[arr.length];\n    long[] temp11 = new long[arr.length];\n\
    \    long[] temp12 = new long[arr.length];\n    long[] temp13 = new long[arr.length];\n\
    \    long[] temp14 = new long[arr.length];\n    long[] temp15 = new long[arr.length];\n\
    \    long[] temp16 = new long[arr.length];\n    long[] temp17 = new long[arr.length];\n\
    \    long[] temp18 = new long[arr.length];\n    long[] temp19 = new long[arr.length];\n\
    \    long[] temp20 = new long[arr.length];\n    long[] temp21 = new long[arr.length];\n\
    \    long[] temp22 = new long[arr.length];\n    long[] temp23 = new long[arr.length];\n\
    \    long[] temp24 = new long[arr.length];\n    long[] temp25 = new long[arr.length];\n\
    \    long[] temp26 = new long[arr.length];\n    long[] temp27 = new long[arr.length];\n\
    \    long[] temp28 = new long[arr.length];\n    long[] temp29 = new long[arr.length];\n\
    \    long[] temp30 = new long[arr.length];\n    long[] temp31 = new long[arr.length];\n\
    \    long[] temp32 = new long[arr.length];\n    long[] temp33 = new long[arr.length];\n\
    \    long[] temp34 = new long[arr.length];\n    long[] temp35 = new long[arr.length];\n\
    \    long[] temp36 = new long[\nunittest\n{\n    alias candidate = maximum;\n\n\
    \    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpyk4jkg59.d(61): Error: expression expected, not \''unittest\''\n/tmp/tmpyk4jkg59.d(62):
    Error: found \''{\'' when expecting \'']\''\n/tmp/tmpyk4jkg59.d(63): Error: semicolon
    expected, not \''alias\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyk4jkg59.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] res = new long[k];\n    for (int i = 0; i < k; i++)\n\
    \    {\n        res[i] = arr[i];\n    }\n    sort(res);\n    for (int i = k; i\
    \ < arr.length; i++)\n    {\n        if (arr[i] > res[0])\n        {\n       \
    \     res[0] = arr[i];\n            sort(res);\n        }\n    }\n    return res;\n\
    }\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L, -4L,\
    \ 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L,\
    \ 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkmob69sz.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (int i = 0; i < k; i++)\n\
    \    {\n        result[i] = arr[i];\n    }\n    sort(result);\n    for (int i\
    \ = k; i < arr.length; i++)\n    {\n        if (arr[i] > result[0])\n        {\n\
    \            result[0] = arr[i];\n            sort(result);\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfa4yimj7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (long i = 0; i < k; i++)\n\
    \    {\n        result[i] = arr[i];\n    }\n    for (long i = k; i < arr.length;\
    \ i++)\n    {\n        long min = result[0];\n        long minIndex = 0;\n   \
    \     for (long j = 1; j < k; j++)\n        {\n            if (result[j] < min)\n\
    \            {\n                min = result[j];\n                minIndex = j;\n\
    \            }\n        }\n        if (arr[i] > min)\n        {\n            result[minIndex]\
    \ = arr[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n\
    \    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkuuqk09y.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (long i = 0; i < k; i++)\n\
    \    {\n        result[i] = arr[i];\n    }\n    result.sort();\n    for (long\
    \ i = k; i < arr.length; i++)\n    {\n        if (arr[i] > result[0])\n      \
    \  {\n            result[0] = arr[i];\n            result.sort();\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n\
    \    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjgjuah0e.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] res = new long[k];\n    for (long i = 0; i < k; i++)\n\
    \    {\n        res[i] = arr[i];\n    }\n    sort(res);\n    for (long i = k;\
    \ i < arr.length; i++)\n    {\n        if (arr[i] > res[0])\n        {\n     \
    \       res[0] = arr[i];\n            sort(res);\n        }\n    }\n    return\
    \ res;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi6bkjclj.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (long i = 0; i < k; i++)\n\
    \    {\n        result[i] = arr[i];\n    }\n    sort(result);\n    for (long i\
    \ = k; i < arr.length; i++)\n    {\n        if (arr[i] > result[0])\n        {\n\
    \            result[0] = arr[i];\n            sort(result);\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl9ty7dnh.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (int i = 0; i < k; i++)\n\
    \    {\n        result[i] = arr[i];\n    }\n    sort(result);\n    for (int i\
    \ = k; i < arr.length; i++)\n    {\n        if (arr[i] > result[0])\n        {\n\
    \            result[0] = arr[i];\n            sort(result);\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfa4yimj7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (int i = 0; i < k; i++)\n\
    \    {\n        result[i] = arr[i];\n    }\n    sort(result);\n    for (int i\
    \ = k; i < arr.length; i++)\n    {\n        if (arr[i] > result[0])\n        {\n\
    \            result[0] = arr[i];\n            sort(result);\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfa4yimj7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (int i = 0; i < k; i++)\n\
    \    {\n        result[i] = arr[i];\n    }\n    sort(result);\n    for (int i\
    \ = k; i < arr.length; i++)\n    {\n        if (arr[i] > result[0])\n        {\n\
    \            result[0] = arr[i];\n            sort(result);\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfa4yimj7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] res = new long[k];\n    for (long i = 0; i < k; i++)\n\
    \    {\n        res[i] = arr[i];\n    }\n    sort(res);\n    for (long i = k;\
    \ i < arr.length; i++)\n    {\n        if (arr[i] > res[0])\n        {\n     \
    \       res[0] = arr[i];\n            sort(res);\n        }\n    }\n    return\
    \ res;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi6bkjclj.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (int i = 0; i < k; i++)\n\
    \    {\n        result[i] = arr[i];\n    }\n    sort(result);\n    for (int i\
    \ = k; i < arr.length; i++)\n    {\n        if (arr[i] > result[0])\n        {\n\
    \            result[0] = arr[i];\n            sort(result);\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfa4yimj7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (int i = 0; i < k; i++)\n\
    \    {\n        result[i] = arr[i];\n    }\n    sort(result);\n    for (int i\
    \ = k; i < arr.length; i++)\n    {\n        if (arr[i] > result[0])\n        {\n\
    \            result[0] = arr[i];\n            sort(result);\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfa4yimj7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    int n = arr.length;\n    if (k == n)\n        return arr;\n\
    \    long[] res = new long[k];\n    for (int i = 0; i < k; i++)\n        res[i]\
    \ = arr[i];\n    sort(res);\n    for (int i = k; i < n; i++)\n    {\n        if\
    \ (arr[i] > res[0])\n        {\n            res[0] = arr[i];\n            sort(res);\n\
    \        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = maximum;\n\
    \n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxxxoz1bk.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (long i = 0; i < k; i++)\n\
    \    {\n        result[i] = arr[i];\n    }\n    sort(result);\n    for (long i\
    \ = k; i < arr.length; i++)\n    {\n        if (arr[i] > result[0])\n        {\n\
    \            result[0] = arr[i];\n            sort(result);\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl9ty7dnh.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (long i = 0; i < k; i++)\n\
    \    {\n        result[i] = arr[i];\n    }\n    sort(result);\n    for (long i\
    \ = k; i < arr.length; i++)\n    {\n        if (arr[i] > result[0])\n        {\n\
    \            result[0] = arr[i];\n            sort(result);\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl9ty7dnh.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (int i = 0; i < k; i++)\n\
    \    {\n        result[i] = arr[i];\n    }\n    sort(result);\n    for (int i\
    \ = k; i < arr.length; i++)\n    {\n        if (arr[i] > result[0])\n        {\n\
    \            result[0] = arr[i];\n            sort(result);\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfa4yimj7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (int i = 0; i < k; i++)\n\
    \    {\n        result[i] = arr[i];\n    }\n    sort(result);\n    for (int i\
    \ = k; i < arr.length; i++)\n    {\n        if (arr[i] > result[0])\n        {\n\
    \            result[0] = arr[i];\n            sort(result);\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfa4yimj7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (long i = 0; i < k; i++)\n\
    \    {\n        result[i] = arr[i];\n    }\n    sort(result);\n    for (long i\
    \ = k; i < arr.length; i++)\n    {\n        if (arr[i] > result[0])\n        {\n\
    \            result[0] = arr[i];\n            sort(result);\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl9ty7dnh.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (int i = 0; i < k; i++)\n\
    \    {\n        result[i] = arr[i];\n    }\n    sort(result);\n    for (int i\
    \ = k; i < arr.length; i++)\n    {\n        if (arr[i] > result[0])\n        {\n\
    \            result[0] = arr[i];\n            sort(result);\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfa4yimj7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    if(k == 0)\n    {\n     \
    \   return result;\n    }\n    if(k == arr.length)\n    {\n        return arr;\n\
    \    }\n    for(int i = 0; i < k; i++)\n    {\n        result[i] = arr[i];\n \
    \   }\n    for(int i = k; i < arr.length; i++)\n    {\n        long min = result[0];\n\
    \        int index = 0;\n        for(int j = 1; j < k; j++)\n        {\n     \
    \       if(result[j] < min)\n            {\n                min = result[j];\n\
    \                index = j;\n            }\n        }\n        if(arr[i] > min)\n\
    \        {\n            result[index] = arr[i];\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp40ehtzqo.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (int i = 0; i < k; i++)\
    \ \n    {\n        result[i] = arr[i];\n    }\n    sort(result);\n    for (int\
    \ i = k; i < arr.length; i++) \n    {\n        if (arr[i] > result[0]) \n    \
    \    {\n            result[0] = arr[i];\n            sort(result);\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n\
    \    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz0rndxme.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (int i = 0; i < k; i++)\n\
    \    {\n        result[i] = arr[i];\n    }\n    sort(result);\n    for (int i\
    \ = k; i < arr.length; i++)\n    {\n        if (arr[i] > result[0])\n        {\n\
    \            result[0] = arr[i];\n            sort(result);\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfa4yimj7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    int n = arr.length;\n   \
    \ for (int i = 0; i < k; i++) \n    {\n        result[i] = arr[i];\n    }\n  \
    \  for (int i = k / 2 - 1; i >= 0; i--) \n    {\n        heapify(result, i, k);\n\
    \    }\n    for (int i = k; i < n; i++) \n    {\n        if (arr[i] > result[0])\
    \ \n        {\n            result[0] = arr[i];\n            heapify(result, 0,\
    \ k);\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n\
    \    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppmg0nmkp.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (long i = 0; i < k; i++)\
    \ \n    {\n        result[i] = arr[i];\n    }\n    sort(result);\n    for (long\
    \ i = k; i < arr.length; i++) \n    {\n        if (arr[i] > result[0]) \n    \
    \    {\n            result[0] = arr[i];\n            sort(result);\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n\
    \    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpac7x5ttf.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (long i = 0; i < k; i++)\n\
    \    {\n        result[i] = arr[i];\n    }\n    sort(result);\n    for (long i\
    \ = k; i < arr.length; i++)\n    {\n        if (arr[i] > result[0])\n        {\n\
    \            result[0] = arr[i];\n            sort(result);\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl9ty7dnh.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (int i = 0; i < k; i++)\n\
    \    {\n        result[i] = arr[i];\n    }\n    sort(result);\n    for (int i\
    \ = k; i < arr.length; i++)\n    {\n        if (arr[i] > result[0])\n        {\n\
    \            result[0] = arr[i];\n            sort(result);\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfa4yimj7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (int i = 0; i < k; i++)\n\
    \    {\n        result[i] = arr[i];\n    }\n    sort(result);\n    for (int i\
    \ = k; i < arr.length; i++)\n    {\n        if (arr[i] > result[0])\n        {\n\
    \            result[0] = arr[i];\n            sort(result);\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfa4yimj7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (int i = 0; i < k; i++)\n\
    \    {\n        result[i] = arr[i];\n    }\n    sort(result);\n    for (int i\
    \ = k; i < arr.length; i++)\n    {\n        if (arr[i] > result[0])\n        {\n\
    \            result[0] = arr[i];\n            sort(result);\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfa4yimj7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[(int)k];\n    for(int i = 0; i < k;\
    \ i++)\n    {\n        result[i] = arr[i];\n    }\n    sort(result);\n    for(int\
    \ i = (int)k; i < arr.length; i++)\n    {\n        if(arr[i] > result[0])\n  \
    \      {\n            result[0] = arr[i];\n            sort(result);\n       \
    \ }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\
    \n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpom17d6vy.d(24): Error: C style cast illegal, use cast(int)k\n/tmp/tmpom17d6vy.d(30):
    Error: C style cast illegal, use cast(int)k\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpom17d6vy.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (int i = 0; i < k; i++)\n\
    \    {\n        result[i] = arr[i];\n    }\n    sort(result);\n    for (int i\
    \ = k; i < arr.length; i++)\n    {\n        if (arr[i] > result[0])\n        {\n\
    \            result[0] = arr[i];\n            sort(result);\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfa4yimj7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (long i = 0; i < k; i++)\n\
    \    {\n        result[i] = arr[i];\n    }\n    sort(result);\n    for (long i\
    \ = k; i < arr.length; i++)\n    {\n        if (arr[i] > result[0])\n        {\n\
    \            result[0] = arr[i];\n            sort(result);\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl9ty7dnh.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (long i = 0; i < k; i++)\n\
    \    {\n        result[i] = arr[i];\n    }\n    sort(result);\n    for (long i\
    \ = k; i < arr.length; i++)\n    {\n        if (arr[i] > result[0])\n        {\n\
    \            result[0] = arr[i];\n            sort(result);\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl9ty7dnh.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (int i = 0; i < k; i++)\n\
    \    {\n        result[i] = arr[i];\n    }\n    sort(result);\n    for (int i\
    \ = k; i < arr.length; i++)\n    {\n        if (arr[i] > result[0])\n        {\n\
    \            result[0] = arr[i];\n            sort(result);\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfa4yimj7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (int i = 0; i < k; i++)\n\
    \    {\n        result[i] = arr[i];\n    }\n    sort(result);\n    for (int i\
    \ = k; i < arr.length; i++)\n    {\n        if (arr[i] > result[0])\n        {\n\
    \            result[0] = arr[i];\n            sort(result);\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfa4yimj7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (int i = 0; i < k; i++)\n\
    \    {\n        result[i] = arr[i];\n    }\n    sort(result);\n    for (int i\
    \ = k; i < arr.length; i++)\n    {\n        if (arr[i] > result[0])\n        {\n\
    \            result[0] = arr[i];\n            sort(result);\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfa4yimj7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (int i = 0; i < k; i++)\n\
    \    {\n        result[i] = arr[i];\n    }\n    sort(result);\n    for (int i\
    \ = k; i < arr.length; i++)\n    {\n        if (arr[i] > result[0])\n        {\n\
    \            result[0] = arr[i];\n            sort(result);\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfa4yimj7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (int i = 0; i < k; i++)\n\
    \    {\n        result[i] = arr[i];\n    }\n    sort(result);\n    for (int i\
    \ = k; i < arr.length; i++)\n    {\n        if (arr[i] > result[0])\n        {\n\
    \            result[0] = arr[i];\n            sort(result);\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfa4yimj7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (int i = 0; i < k; i++)\n\
    \    {\n        result[i] = arr[i];\n    }\n    sort(result);\n    for (int i\
    \ = k; i < arr.length; i++)\n    {\n        if (arr[i] > result[0])\n        {\n\
    \            result[0] = arr[i];\n            sort(result);\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfa4yimj7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[k];\n\
    \    for (int i = 0; i < k; i++)\n    {\n        temp[i] = arr[i];\n    }\n  \
    \  sort(temp);\n    for (int i = k; i < arr.length; i++)\n    {\n        if (arr[i]\
    \ > temp[0])\n        {\n            temp[0] = arr[i];\n            sort(temp);\n\
    \        }\n    }\n    for (int i = 0; i < k; i++)\n    {\n        result[i] =\
    \ temp[i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\
    \n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppnlayvqk.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] heap = new long[k];\n\
    \    long heapSize = 0;\n    foreach(i; arr)\n    {\n        if(heapSize < k)\n\
    \        {\n            heap[heapSize] = i;\n            heapSize++;\n       \
    \     heapifyUp(heap, heapSize);\n        }\n        else\n        {\n       \
    \     if(i > heap[0])\n            {\n                heap[0] = i;\n         \
    \       heapifyDown(heap, heapSize);\n            }\n        }\n    }\n    foreach(i;\
    \ 0..k)\n    {\n        result[i] = heap[0];\n        heap[0] = heap[heapSize\
    \ - 1];\n        heapSize--;\n        heapifyDown(heap, heapSize);\n    }\n  \
    \  return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmps5ocmjjz.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (long i = 0; i < k; i++)\n\
    \    {\n        result[i] = arr[i];\n    }\n    sort(result);\n    for (long i\
    \ = k; i < arr.length; i++)\n    {\n        if (arr[i] > result[0])\n        {\n\
    \            result[0] = arr[i];\n            sort(result);\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl9ty7dnh.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (long i = 0; i < k; i++)\n\
    \    {\n        result[i] = arr[i];\n    }\n    sort(result);\n    for (long i\
    \ = k; i < arr.length; i++)\n    {\n        if (arr[i] > result[0])\n        {\n\
    \            result[0] = arr[i];\n            sort(result);\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl9ty7dnh.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (int i = 0; i < k; i++)\n\
    \    {\n        result[i] = arr[i];\n    }\n    sort(result);\n    for (int i\
    \ = k; i < arr.length; i++)\n    {\n        if (arr[i] > result[0])\n        {\n\
    \            result[0] = arr[i];\n            sort(result);\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfa4yimj7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] res = new long[k];\n    for (long i = 0; i < k; i++)\n\
    \    {\n        res[i] = arr[i];\n    }\n    res.sort();\n    for (long i = k;\
    \ i < arr.length; i++)\n    {\n        if (arr[i] > res[0])\n        {\n     \
    \       res[0] = arr[i];\n            res.sort();\n        }\n    }\n    return\
    \ res;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxt69qsml.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (long i = 0; i < k; i++)\n\
    \    {\n        result[i] = arr[i];\n    }\n    sort(result);\n    for (long i\
    \ = k; i < arr.length; i++)\n    {\n        if (arr[i] > result[0])\n        {\n\
    \            result[0] = arr[i];\n            sort(result);\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl9ty7dnh.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    if (arr.length == k)\n        return arr;\n    long[] res =\
    \ new long[k];\n    for (int i = 0; i < k; i++)\n        res[i] = arr[i];\n  \
    \  sort(res);\n    for (int i = k; i < arr.length; i++)\n    {\n        if (arr[i]\
    \ > res[0])\n        {\n            res[0] = arr[i];\n            sort(res);\n\
    \        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = maximum;\n\
    \n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwo4marge.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] res = new long[k];\n    for (int i = 0; i < k; i++)\n\
    \    {\n        res[i] = arr[i];\n    }\n    sort(res);\n    for (int i = k; i\
    \ < arr.length; i++)\n    {\n        if (arr[i] > res[0])\n        {\n       \
    \     res[0] = arr[i];\n            sort(res);\n        }\n    }\n    return res;\n\
    }\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L, -4L,\
    \ 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L,\
    \ 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkmob69sz.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (int i = 0; i < k; i++)\n\
    \    {\n        result[i] = arr[i];\n    }\n    sort(result);\n    for (int i\
    \ = k; i < arr.length; i++)\n    {\n        if (arr[i] > result[0])\n        {\n\
    \            result[0] = arr[i];\n            sort(result);\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfa4yimj7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (int i = 0; i < k; i++)\n\
    \    {\n        result[i] = arr[i];\n    }\n    sort(result);\n    for (int i\
    \ = k; i < arr.length; i++)\n    {\n        if (arr[i] > result[0])\n        {\n\
    \            result[0] = arr[i];\n            sort(result);\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfa4yimj7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (int i = 0; i < k; i++)\n\
    \    {\n        result[i] = arr[i];\n    }\n    sort(result);\n    for (int i\
    \ = k; i < arr.length; i++)\n    {\n        if (arr[i] > result[0])\n        {\n\
    \            result[0] = arr[i];\n            sort(result);\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfa4yimj7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (long i = 0; i < k; i++)\n\
    \    {\n        result[i] = arr[i];\n    }\n    sort(result);\n    for (long i\
    \ = k; i < arr.length; i++)\n    {\n        if (arr[i] > result[0])\n        {\n\
    \            result[0] = arr[i];\n            sort(result);\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl9ty7dnh.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (long i = 0; i < k; i++)\n\
    \    {\n        result[i] = arr[i];\n    }\n    sort(result);\n    for (long i\
    \ = k; i < arr.length; i++)\n    {\n        if (arr[i] > result[0])\n        {\n\
    \            result[0] = arr[i];\n            sort(result);\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl9ty7dnh.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (int i = 0; i < k; i++)\n\
    \    {\n        result[i] = arr[i];\n    }\n    sort(result);\n    for (int i\
    \ = k; i < arr.length; i++)\n    {\n        if (arr[i] > result[0])\n        {\n\
    \            result[0] = arr[i];\n            sort(result);\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfa4yimj7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (int i = 0; i < k; i++)\n\
    \    {\n        result[i] = arr[i];\n    }\n    sort(result);\n    for (int i\
    \ = k; i < arr.length; i++)\n    {\n        if (arr[i] > result[0])\n        {\n\
    \            result[0] = arr[i];\n            sort(result);\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfa4yimj7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (int i = 0; i < k; i++)\n\
    \    {\n        result[i] = arr[i];\n    }\n    sort(result);\n    for (int i\
    \ = k; i < arr.length; i++)\n    {\n        if (arr[i] > result[0])\n        {\n\
    \            result[0] = arr[i];\n            sort(result);\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfa4yimj7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (int i = 0; i < k; i++)\n\
    \    {\n        result[i] = arr[i];\n    }\n    sort(result);\n    for (int i\
    \ = k; i < arr.length; i++)\n    {\n        if (arr[i] > result[0])\n        {\n\
    \            result[0] = arr[i];\n            sort(result);\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfa4yimj7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (int i = 0; i < k; i++)\n\
    \    {\n        result[i] = arr[i];\n    }\n    sort(result);\n    for (int i\
    \ = k; i < arr.length; i++)\n    {\n        if (arr[i] > result[0])\n        {\n\
    \            result[0] = arr[i];\n            sort(result);\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfa4yimj7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[k];\n\
    \    long[] temp2 = new long[k];\n    long[] temp3 = new long[k];\n    long[]\
    \ temp4 = new long[k];\n    long[] temp5 = new long[k];\n    long[] temp6 = new\
    \ long[k];\n    long[] temp7 = new long[k];\n    long[] temp8 = new long[k];\n\
    \    long[] temp9 = new long[k];\n    long[] temp10 = new long[k];\n    long[]\
    \ temp11 = new long[k];\n    long[] temp12 = new long[k];\n    long[] temp13 =\
    \ new long[k];\n    long[] temp14 = new long[k];\n    long[] temp15 = new long[k];\n\
    \    long[] temp16 = new long[k];\n    long[] temp17 = new long[k];\n    long[]\
    \ temp18 = new long[k];\n    long[] temp19 = new long[k];\n    long[] temp20 =\
    \ new long[k];\n    long[] temp21 = new long[k];\n    long[] temp22 = new long[k];\n\
    \    long[] temp23 = new long[k];\n    long[] temp24 = new long[k];\n    long[]\
    \ temp25 = new long[k];\n    long[] temp26 = new long[k];\n    long[] temp27 =\
    \ new long[k];\n    long[] temp28 = new long[k];\n    long[] temp29 = new long[k];\n\
    \    long[] temp30 = new long[k];\n    long[] temp31 = new long[k];\n    long[]\
    \ temp32 = new long[k];\n    long[] temp33 = new long[k];\n    long[] temp34 =\
    \ new long[k];\n    long[] temp35 = new long[k];\n    long[] temp36 = new long[k];\n\
    \    long[] temp37 = new long[k];\n    long[] temp38 = new long[k];\n    long[]\
    \ temp39 = new long[k];\n    long[] temp40 = new long[k];\n    long[] temp41 =\
    \ new long[k];\n    long[] temp42 = new\nunittest\n{\n    alias candidate = maximum;\n\
    \n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpezdhplcz.d(67): Error: basic type expected, not unittest\n/tmp/tmpezdhplcz.d(67):
    Error: semicolon expected, not \''unittest\''\n/tmp/tmpezdhplcz.d(67): Error:
    found \''unittest\'' instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpezdhplcz.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (long i = 0; i < k; i++)\n\
    \    {\n        result[i] = arr[i];\n    }\n    sort(result);\n    for (long i\
    \ = k; i < arr.length; i++)\n    {\n        if (arr[i] > result[0])\n        {\n\
    \            result[0] = arr[i];\n            sort(result);\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl9ty7dnh.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (int i = 0; i < k; i++)\n\
    \    {\n        result[i] = arr[i];\n    }\n    sort(result);\n    for (int i\
    \ = k; i < arr.length; i++)\n    {\n        if (arr[i] > result[0])\n        {\n\
    \            result[0] = arr[i];\n            sort(result);\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfa4yimj7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (int i = 0; i < k; i++)\n\
    \    {\n        result[i] = arr[i];\n    }\n    sort(result);\n    for (int i\
    \ = k; i < arr.length; i++)\n    {\n        if (arr[i] > result[0])\n        {\n\
    \            result[0] = arr[i];\n            sort(result);\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfa4yimj7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] res = new long[k];\n    for (int i = 0; i < k; i++)\
    \ \n    {\n        res[i] = arr[i];\n    }\n    sort(res);\n    for (int i = k;\
    \ i < arr.length; i++) \n    {\n        if (arr[i] > res[0]) \n        {\n   \
    \         res[0] = arr[i];\n            sort(res);\n        }\n    }\n    return\
    \ res;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwu45fnpt.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] sorted = arr.sorted;\n\
    \    for (long i = 0; i < k; i++)\n    {\n        result[i] = sorted[sorted.length\
    \ - 1 - i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate =\
    \ maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n \
    \   assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprnspv26n.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[arr.length];\n\
    \    for (long i = 0; i < arr.length; i++)\n    {\n        temp[i] = arr[i];\n\
    \    }\n    sort(temp);\n    for (long i = 0; i < k; i++)\n    {\n        result[i]\
    \ = temp[arr.length - 1 - i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L,\
    \ -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmps6_5vs1c.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (int i = 0; i < k; i++)\n\
    \    {\n        result[i] = arr[i];\n    }\n    sort(result);\n    for (int i\
    \ = k; i < arr.length; i++)\n    {\n        if (arr[i] > result[0])\n        {\n\
    \            result[0] = arr[i];\n            sort(result);\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfa4yimj7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    if (arr.length == 0)\n        return new long[0];\n    if (arr.length\
    \ == 1)\n        return new long[]{arr[0]};\n    if (arr.length == k)\n      \
    \  return arr;\n    long[] result = new long[k];\n    for (int i = 0; i < k; i++)\n\
    \        result[i] = arr[i];\n    for (int i = k; i < arr.length; i++)\n    {\n\
    \        for (int j = 0; j < k; j++)\n        {\n            if (arr[i] > result[j])\n\
    \            {\n                for (int l = k - 1; l > j; l--)\n            \
    \        result[l] = result[l - 1];\n                result[j] = arr[i];\n   \
    \             break;\n            }\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L, -4L,\
    \ 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L,\
    \ 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnjedyhlm.d(27): Error: found \''{\'' when expecting \'';\''
    following return statement\n/tmp/tmpnjedyhlm.d(27): Error: found \''}\'' when
    expecting \'';\'' following statement\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpnjedyhlm.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[arr.length];\n\
    \    for (int i = 0; i < arr.length; i++)\n    {\n        temp[i] = arr[i];\n\
    \    }\n    sort(temp);\n    for (int i = 0; i < k; i++)\n    {\n        result[i]\
    \ = temp[arr.length - 1 - i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L,\
    \ -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyi6w2p5p.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (int i = 0; i < k; i++)\
    \ \n    {\n        result[i] = arr[i];\n    }\n    sort(result);\n    for (int\
    \ i = k; i < arr.length; i++) \n    {\n        if (arr[i] > result[0]) \n    \
    \    {\n            result[0] = arr[i];\n            sort(result);\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n\
    \    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz0rndxme.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (long i = 0; i < k; i++)\n\
    \    {\n        result[i] = arr[i];\n    }\n    sort(result);\n    for (long i\
    \ = k; i < arr.length; i++)\n    {\n        if (arr[i] > result[0])\n        {\n\
    \            result[0] = arr[i];\n            sort(result);\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl9ty7dnh.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[k];\n\
    \    long[] temp2 = new long[k];\n    long[] temp3 = new long[k];\n    long[]\
    \ temp4 = new long[k];\n    long[] temp5 = new long[k];\n    long[] temp6 = new\
    \ long[k];\n    long[] temp7 = new long[k];\n    long[] temp8 = new long[k];\n\
    \    long[] temp9 = new long[k];\n    long[] temp10 = new long[k];\n    long[]\
    \ temp11 = new long[k];\n    long[] temp12 = new long[k];\n    long[] temp13 =\
    \ new long[k];\n    long[] temp14 = new long[k];\n    long[] temp15 = new long[k];\n\
    \    long[] temp16 = new long[k];\n    long[] temp17 = new long[k];\n    long[]\
    \ temp18 = new long[k];\n    long[] temp19 = new long[k];\n    long[] temp20 =\
    \ new long[k];\n    long[] temp21 = new long[k];\n    long[] temp22 = new long[k];\n\
    \    long[] temp23 = new long[k];\n    long[] temp24 = new long[k];\n    long[]\
    \ temp25 = new long[k];\n    long[] temp26 = new long[k];\n    long[] temp27 =\
    \ new long[k];\n    long[] temp28 = new long[k];\n    long[] temp29 = new long[k];\n\
    \    long[] temp30 = new long[k];\n    long[] temp31 = new long[k];\n    long[]\
    \ temp32 = new long[k];\n    long[] temp33 = new long[k];\n    long[] temp34 =\
    \ new long[k];\n    long[] temp35 = new long[k];\n    long[] temp36 = new long[k];\n\
    \    long[] temp37 = new long[k];\n    long[] temp38 = new long[k];\n    long[]\
    \ temp39 = new long[k];\n    long[] temp40 = new long[k];\n    long[] temp41 =\
    \ new long[k];\n    long[] temp42 = new\nunittest\n{\n    alias candidate = maximum;\n\
    \n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpezdhplcz.d(67): Error: basic type expected, not unittest\n/tmp/tmpezdhplcz.d(67):
    Error: semicolon expected, not \''unittest\''\n/tmp/tmpezdhplcz.d(67): Error:
    found \''unittest\'' instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpezdhplcz.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (int i = 0; i < k; i++)\n\
    \    {\n        result[i] = arr[i];\n    }\n    sort(result);\n    for (int i\
    \ = k; i < arr.length; i++)\n    {\n        if (arr[i] > result[0])\n        {\n\
    \            result[0] = arr[i];\n            sort(result);\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfa4yimj7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] res = new long[k];\n    for (long i = 0; i < k; i++)\n\
    \    {\n        res[i] = arr[i];\n    }\n    sort(res);\n    for (long i = k;\
    \ i < arr.length; i++)\n    {\n        if (arr[i] > res[0])\n        {\n     \
    \       res[0] = arr[i];\n            sort(res);\n        }\n    }\n    return\
    \ res;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi6bkjclj.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] max = new long[k];\n    for(int i = 0; i < k; i++)\n\
    \    {\n        max[i] = arr[i];\n    }\n    for(int i = k; i < arr.length; i++)\n\
    \    {\n        long min = max[0];\n        int minIndex = 0;\n        for(int\
    \ j = 1; j < k; j++)\n        {\n            if(max[j] < min)\n            {\n\
    \                min = max[j];\n                minIndex = j;\n            }\n\
    \        }\n        if(arr[i] > min)\n        {\n            max[minIndex] = arr[i];\n\
    \        }\n    }\n    sort(max);\n    return max;\n}\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpylasa3c_.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (int i = 0; i < k; i++)\n\
    \    {\n        result[i] = arr[i];\n    }\n    sort(result);\n    for (int i\
    \ = k; i < arr.length; i++)\n    {\n        if (arr[i] > result[0])\n        {\n\
    \            result[0] = arr[i];\n            sort(result);\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfa4yimj7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (int i = 0; i < k; i++)\n\
    \    {\n        result[i] = arr[i];\n    }\n    sort(result);\n    for (int i\
    \ = k; i < arr.length; i++)\n    {\n        if (arr[i] > result[0])\n        {\n\
    \            result[0] = arr[i];\n            sort(result);\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfa4yimj7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[k];\n\
    \    long[] temp2 = new long[k];\n    long[] temp3 = new long[k];\n    long[]\
    \ temp4 = new long[k];\n    long[] temp5 = new long[k];\n    long[] temp6 = new\
    \ long[k];\n    long[] temp7 = new long[k];\n    long[] temp8 = new long[k];\n\
    \    long[] temp9 = new long[k];\n    long[] temp10 = new long[k];\n    long[]\
    \ temp11 = new long[k];\n    long[] temp12 = new long[k];\n    long[] temp13 =\
    \ new long[k];\n    long[] temp14 = new long[k];\n    long[] temp15 = new long[k];\n\
    \    long[] temp16 = new long[k];\n    long[] temp17 = new long[k];\n    long[]\
    \ temp18 = new long[k];\n    long[] temp19 = new long[k];\n    long[] temp20 =\
    \ new long[k];\n    long[] temp21 = new long[k];\n    long[] temp22 = new long[k];\n\
    \    long[] temp23 = new long[k];\n    long[] temp24 = new long[k];\n    long[]\
    \ temp25 = new long[k];\n    long[] temp26 = new long[k];\n    long[] temp27 =\
    \ new long[k];\n    long[] temp28 = new long[k];\n    long[] temp29 = new long[k];\n\
    \    long[] temp30 = new long[k];\n    long[] temp31 = new long[k];\n    long[]\
    \ temp32 = new long[k];\n    long[] temp33 = new long[k];\n    long[] temp34 =\
    \ new long[k];\n    long[] temp35 = new long[k];\n    long[] temp36 = new long[k];\n\
    \    long[] temp37 = new long[k];\n    long[] temp38 = new long[k];\n    long[]\
    \ temp39 = new long[k];\n    long[] temp40 = new long[k];\n    long[] temp41 =\
    \ new long[k];\n    long[] temp42 = new\nunittest\n{\n    alias candidate = maximum;\n\
    \n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpezdhplcz.d(67): Error: basic type expected, not unittest\n/tmp/tmpezdhplcz.d(67):
    Error: semicolon expected, not \''unittest\''\n/tmp/tmpezdhplcz.d(67): Error:
    found \''unittest\'' instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpezdhplcz.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (int i = 0; i < k; i++)\n\
    \    {\n        result[i] = arr[i];\n    }\n    sort(result);\n    for (int i\
    \ = k; i < arr.length; i++)\n    {\n        if (arr[i] > result[0])\n        {\n\
    \            result[0] = arr[i];\n            sort(result);\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfa4yimj7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (int i = 0; i < k; i++)\n\
    \    {\n        result[i] = arr[i];\n    }\n    sort(result);\n    for (int i\
    \ = k; i < arr.length; i++)\n    {\n        if (arr[i] > result[0])\n        {\n\
    \            result[0] = arr[i];\n            sort(result);\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfa4yimj7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (int i = 0; i < k; i++)\n\
    \    {\n        result[i] = arr[i];\n    }\n    sort(result);\n    for (int i\
    \ = k; i < arr.length; i++)\n    {\n        if (arr[i] > result[0])\n        {\n\
    \            result[0] = arr[i];\n            sort(result);\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfa4yimj7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (long i = 0; i < k; i++)\n\
    \    {\n        result[i] = arr[i];\n    }\n    sort(result);\n    for (long i\
    \ = k; i < arr.length; i++)\n    {\n        if (arr[i] > result[0])\n        {\n\
    \            result[0] = arr[i];\n            sort(result);\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl9ty7dnh.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (int i = 0; i < k; i++)\
    \ \n    {\n        result[i] = arr[i];\n    }\n    sort(result);\n    for (int\
    \ i = k; i < arr.length; i++) \n    {\n        if (arr[i] > result[0]) \n    \
    \    {\n            result[0] = arr[i];\n            sort(result);\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n\
    \    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz0rndxme.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (int i = 0; i < k; i++)\n\
    \    {\n        result[i] = arr[i];\n    }\n    sort(result);\n    for (int i\
    \ = k; i < arr.length; i++)\n    {\n        if (arr[i] > result[0])\n        {\n\
    \            result[0] = arr[i];\n            sort(result);\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfa4yimj7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (int i = 0; i < k; i++)\n\
    \    {\n        result[i] = arr[i];\n    }\n    sort(result);\n    for (int i\
    \ = k; i < arr.length; i++)\n    {\n        if (arr[i] > result[0])\n        {\n\
    \            result[0] = arr[i];\n            sort(result);\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfa4yimj7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (int i = 0; i < k; i++)\n\
    \    {\n        result[i] = arr[i];\n    }\n    sort(result);\n    for (int i\
    \ = k; i < arr.length; i++)\n    {\n        if (arr[i] > result[0])\n        {\n\
    \            result[0] = arr[i];\n            sort(result);\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfa4yimj7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    int n = arr.length;\n   \
    \ for (int i = 0; i < k; i++) \n    {\n        int maxIndex = i;\n        for\
    \ (int j = i + 1; j < n; j++) \n        {\n            if (arr[j] > arr[maxIndex])\
    \ \n            {\n                maxIndex = j;\n            }\n        }\n \
    \       result[i] = arr[maxIndex];\n        swap(arr, i, maxIndex);\n    }\n \
    \   return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw3jkl30u.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (long i = 0; i < k; i++)\n\
    \    {\n        result[i] = arr[i];\n    }\n    sort(result);\n    for (long i\
    \ = k; i < arr.length; i++)\n    {\n        if (arr[i] > result[0])\n        {\n\
    \            result[0] = arr[i];\n            sort(result);\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl9ty7dnh.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[k];\n\
    \    long[] temp2 = new long[k];\n    long[] temp3 = new long[k];\n    long[]\
    \ temp4 = new long[k];\n    long[] temp5 = new long[k];\n    long[] temp6 = new\
    \ long[k];\n    long[] temp7 = new long[k];\n    long[] temp8 = new long[k];\n\
    \    long[] temp9 = new long[k];\n    long[] temp10 = new long[k];\n    long[]\
    \ temp11 = new long[k];\n    long[] temp12 = new long[k];\n    long[] temp13 =\
    \ new long[k];\n    long[] temp14 = new long[k];\n    long[] temp15 = new long[k];\n\
    \    long[] temp16 = new long[k];\n    long[] temp17 = new long[k];\n    long[]\
    \ temp18 = new long[k];\n    long[] temp19 = new long[k];\n    long[] temp20 =\
    \ new long[k];\n    long[] temp21 = new long[k];\n    long[] temp22 = new long[k];\n\
    \    long[] temp23 = new long[k];\n    long[] temp24 = new long[k];\n    long[]\
    \ temp25 = new long[k];\n    long[] temp26 = new long[k];\n    long[] temp27 =\
    \ new long[k];\n    long[] temp28 = new long[k];\n    long[] temp29 = new long[k];\n\
    \    long[] temp30 = new long[k];\n    long[] temp31 = new long[k];\n    long[]\
    \ temp32 = new long[k];\n    long[] temp33 = new long[k];\n    long[] temp34 =\
    \ new long[k];\n    long[] temp35 = new long[k];\n    long[] temp36 = new long[k];\n\
    \    long[] temp37 = new long[k];\n    long[] temp38 = new long[k];\n    long[]\
    \ temp39 = new long[k];\n    long[] temp40 = new long[k];\n    long[] temp41 =\
    \ new long[k];\n    long[] temp42 = new\nunittest\n{\n    alias candidate = maximum;\n\
    \n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpezdhplcz.d(67): Error: basic type expected, not unittest\n/tmp/tmpezdhplcz.d(67):
    Error: semicolon expected, not \''unittest\''\n/tmp/tmpezdhplcz.d(67): Error:
    found \''unittest\'' instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpezdhplcz.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (long i = 0; i < k; i++)\n\
    \    {\n        result[i] = arr[i];\n    }\n    sort(result);\n    for (long i\
    \ = k; i < arr.length; i++)\n    {\n        if (arr[i] > result[0])\n        {\n\
    \            result[0] = arr[i];\n            sort(result);\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl9ty7dnh.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (int i = 0; i < k; i++)\n\
    \    {\n        result[i] = arr[i];\n    }\n    sort(result);\n    for (int i\
    \ = k; i < arr.length; i++)\n    {\n        if (arr[i] > result[0])\n        {\n\
    \            result[0] = arr[i];\n            sort(result);\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfa4yimj7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (int i = 0; i < k; i++)\n\
    \    {\n        result[i] = arr[i];\n    }\n    sort(result);\n    for (int i\
    \ = k; i < arr.length; i++)\n    {\n        if (arr[i] > result[0])\n        {\n\
    \            result[0] = arr[i];\n            sort(result);\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfa4yimj7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (int i = 0; i < k; i++)\n\
    \    {\n        result[i] = arr[i];\n    }\n    sort(result);\n    for (int i\
    \ = k; i < arr.length; i++)\n    {\n        if (arr[i] > result[0])\n        {\n\
    \            result[0] = arr[i];\n            sort(result);\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfa4yimj7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] res = new long[k];\n    for (int i = 0; i < k; i++)\n\
    \    {\n        res[i] = arr[i];\n    }\n    sort(res);\n    for (int i = k; i\
    \ < arr.length; i++)\n    {\n        if (arr[i] > res[0])\n        {\n       \
    \     res[0] = arr[i];\n            sort(res);\n        }\n    }\n    return res;\n\
    }\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L, -4L,\
    \ 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L,\
    \ 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkmob69sz.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] res = new long[k];\n    for (long i = 0; i < k; i++)\n\
    \    {\n        res[i] = arr[i];\n    }\n    sort(res);\n    for (long i = k;\
    \ i < arr.length; i++)\n    {\n        if (arr[i] > res[0])\n        {\n     \
    \       res[0] = arr[i];\n            sort(res);\n        }\n    }\n    return\
    \ res;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi6bkjclj.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] res = new long[k];\n    for (int i = 0; i < k; i++)\
    \ \n    {\n        res[i] = arr[i];\n    }\n    sort(res);\n    for (int i = k;\
    \ i < arr.length; i++) \n    {\n        if (arr[i] > res[0]) \n        {\n   \
    \         res[0] = arr[i];\n            sort(res);\n        }\n    }\n    return\
    \ res;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwu45fnpt.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] res = new long[k];\n    long[] temp = new long[k];\n\
    \    for (long i = 0; i < k; i++)\n    {\n        temp[i] = arr[i];\n    }\n \
    \   temp = temp.sort();\n    for (long i = k; i < arr.length; i++)\n    {\n  \
    \      if (arr[i] > temp[0])\n        {\n            temp[0] = arr[i];\n     \
    \       temp = temp.sort();\n        }\n    }\n    for (long i = 0; i < k; i++)\n\
    \    {\n        res[i] = temp[i];\n    }\n    return res;\n}\nunittest\n{\n  \
    \  alias candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L,\
    \ -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcx6o6z25.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[arr.length];\n\
    \    for (long i = 0; i < arr.length; i++)\n    {\n        temp[i] = arr[i];\n\
    \    }\n    sort(temp);\n    for (long i = 0; i < k; i++)\n    {\n        result[i]\
    \ = temp[arr.length - 1 - i];\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L,\
    \ -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmps6_5vs1c.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (int i = 0; i < k; i++)\n\
    \    {\n        result[i] = arr[i];\n    }\n    sort(result);\n    for (int i\
    \ = k; i < arr.length; i++)\n    {\n        if (arr[i] > result[0])\n        {\n\
    \            result[0] = arr[i];\n            sort(result);\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfa4yimj7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (int i = 0; i < k; i++)\n\
    \    {\n        result[i] = arr[i];\n    }\n    sort(result);\n    for (int i\
    \ = k; i < arr.length; i++)\n    {\n        if (arr[i] > result[0])\n        {\n\
    \            result[0] = arr[i];\n            sort(result);\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfa4yimj7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[k];\n\
    \    long[] temp2 = new long[k];\n    long[] temp3 = new long[k];\n    long[]\
    \ temp4 = new long[k];\n    long[] temp5 = new long[k];\n    long[] temp6 = new\
    \ long[k];\n    long[] temp7 = new long[k];\n    long[] temp8 = new long[k];\n\
    \    long[] temp9 = new long[k];\n    long[] temp10 = new long[k];\n    long[]\
    \ temp11 = new long[k];\n    long[] temp12 = new long[k];\n    long[] temp13 =\
    \ new long[k];\n    long[] temp14 = new long[k];\n    long[] temp15 = new long[k];\n\
    \    long[] temp16 = new long[k];\n    long[] temp17 = new long[k];\n    long[]\
    \ temp18 = new long[k];\n    long[] temp19 = new long[k];\n    long[] temp20 =\
    \ new long[k];\n    long[] temp21 = new long[k];\n    long[] temp22 = new long[k];\n\
    \    long[] temp23 = new long[k];\n    long[] temp24 = new long[k];\n    long[]\
    \ temp25 = new long[k];\n    long[] temp26 = new long[k];\n    long[] temp27 =\
    \ new long[k];\n    long[] temp28 = new long[k];\n    long[] temp29 = new long[k];\n\
    \    long[] temp30 = new long[k];\n    long[] temp31 = new long[k];\n    long[]\
    \ temp32 = new long[k];\n    long[] temp33 = new long[k];\n    long[] temp34 =\
    \ new long[k];\n    long[] temp35 = new long[k];\n    long[] temp36 = new long[k];\n\
    \    long[] temp37 = new long[k];\n    long[] temp38 = new long[k];\n    long[]\
    \ temp39 = new long[k];\n    long[] temp40 = new long[k];\n    long[] temp41 =\
    \ new long[k];\n    long[] temp42 = new\nunittest\n{\n    alias candidate = maximum;\n\
    \n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpezdhplcz.d(67): Error: basic type expected, not unittest\n/tmp/tmpezdhplcz.d(67):
    Error: semicolon expected, not \''unittest\''\n/tmp/tmpezdhplcz.d(67): Error:
    found \''unittest\'' instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmpezdhplcz.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] res = new long[k];\n    for (int i = 0; i < k; i++)\n\
    \    {\n        res[i] = arr[i];\n    }\n    sort(res);\n    for (int i = k; i\
    \ < arr.length; i++)\n    {\n        if (arr[i] > res[0])\n        {\n       \
    \     res[0] = arr[i];\n            sort(res);\n        }\n    }\n    return res;\n\
    }\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L, -4L,\
    \ 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L,\
    \ 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkmob69sz.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (int i = 0; i < k; i++)\
    \ \n    {\n        result[i] = arr[i];\n    }\n    sort(result);\n    for (int\
    \ i = k; i < arr.length; i++) \n    {\n        if (arr[i] > result[0]) \n    \
    \    {\n            result[0] = arr[i];\n            sort(result);\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n\
    \    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz0rndxme.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (long i = 0; i < k; i++)\n\
    \    {\n        result[i] = arr[i];\n    }\n    sort(result);\n    for (long i\
    \ = k; i < arr.length; i++)\n    {\n        if (arr[i] > result[0])\n        {\n\
    \            result[0] = arr[i];\n            sort(result);\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl9ty7dnh.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (int i = 0; i < k; i++)\n\
    \    {\n        result[i] = arr[i];\n    }\n    sort(result);\n    for (int i\
    \ = k; i < arr.length; i++)\n    {\n        if (arr[i] > result[0])\n        {\n\
    \            result[0] = arr[i];\n            sort(result);\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfa4yimj7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (int i = 0; i < k; i++)\n\
    \    {\n        result[i] = arr[i];\n    }\n    sort(result);\n    for (int i\
    \ = k; i < arr.length; i++)\n    {\n        if (arr[i] > result[0])\n        {\n\
    \            result[0] = arr[i];\n            sort(result);\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfa4yimj7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (int i = 0; i < k; i++)\n\
    \    {\n        result[i] = arr[i];\n    }\n    sort(result);\n    for (int i\
    \ = k; i < arr.length; i++)\n    {\n        if (arr[i] > result[0])\n        {\n\
    \            result[0] = arr[i];\n            sort(result);\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfa4yimj7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (long i = 0; i < k; i++)\n\
    \    {\n        long max = arr[0];\n        long maxIndex = 0;\n        for (long\
    \ j = 1; j < arr.length; j++)\n        {\n            if (arr[j] > max)\n    \
    \        {\n                max = arr[j];\n                maxIndex = j;\n   \
    \         }\n        }\n        result[i] = max;\n        arr[maxIndex] = -1;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n\
    \    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2t2ys1u6.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (int i = 0; i < k; i++)\n\
    \    {\n        result[i] = arr[i];\n    }\n    sort(result);\n    for (int i\
    \ = k; i < arr.length; i++)\n    {\n        if (arr[i] > result[0])\n        {\n\
    \            result[0] = arr[i];\n            sort(result);\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfa4yimj7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (long i = 0; i < k; i++)\n\
    \    {\n        result[i] = arr[i];\n    }\n    sort(result);\n    for (long i\
    \ = k; i < arr.length; i++)\n    {\n        if (arr[i] > result[0])\n        {\n\
    \            result[0] = arr[i];\n            sort(result);\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl9ty7dnh.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    int n = arr.length;\n    if (k == n)\n        return arr;\n\
    \    long[] res = new long[k];\n    for (int i = 0; i < k; i++)\n        res[i]\
    \ = arr[i];\n    sort(res);\n    for (int i = k; i < n; i++)\n    {\n        int\
    \ j = 0;\n        while (j < k && res[j] > arr[i])\n            j++;\n       \
    \ if (j < k)\n        {\n            for (int l = 0; l < j; l++)\n           \
    \     res[l] = res[l + 1];\n            res[j] = arr[i];\n        }\n    }\n \
    \   return res;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi6gqv1zm.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (int i = 0; i < k; i++)\n\
    \    {\n        result[i] = arr[i];\n    }\n    sort(result);\n    for (int i\
    \ = k; i < arr.length; i++)\n    {\n        if (arr[i] > result[0])\n        {\n\
    \            result[0] = arr[i];\n            sort(result);\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfa4yimj7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (long i = 0; i < k; i++)\n\
    \    {\n        result[i] = arr[i];\n    }\n    sort(result);\n    for (long i\
    \ = k; i < arr.length; i++)\n    {\n        if (arr[i] > result[0])\n        {\n\
    \            result[0] = arr[i];\n            sort(result);\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl9ty7dnh.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] temp = new long[k];\n\
    \    for (int i = 0; i < k; i++)\n    {\n        temp[i] = arr[i];\n    }\n  \
    \  sort(temp);\n    for (int i = k; i < arr.length; i++)\n    {\n        if (arr[i]\
    \ > temp[0])\n        {\n            temp[0] = arr[i];\n            sort(temp);\n\
    \        }\n    }\n    for (int i = 0; i < k; i++)\n    {\n        result[i] =\
    \ temp[i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\
    \n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppnlayvqk.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (long i = 0; i < k; i++)\n\
    \    {\n        result[i] = arr[i];\n    }\n    sort(result);\n    for (long i\
    \ = k; i < arr.length; i++)\n    {\n        if (arr[i] > result[0])\n        {\n\
    \            result[0] = arr[i];\n            sort(result);\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl9ty7dnh.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (int i = 0; i < k; i++)\n\
    \    {\n        result[i] = arr[i];\n    }\n    sort(result);\n    for (int i\
    \ = k; i < arr.length; i++)\n    {\n        if (arr[i] > result[0])\n        {\n\
    \            result[0] = arr[i];\n            sort(result);\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfa4yimj7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (long i = 0; i < k; i++)\n\
    \    {\n        result[i] = arr[i];\n    }\n    sort(result);\n    for (long i\
    \ = k; i < arr.length; i++)\n    {\n        if (arr[i] > result[0])\n        {\n\
    \            result[0] = arr[i];\n            sort(result);\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl9ty7dnh.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (int i = 0; i < k; i++)\n\
    \    {\n        result[i] = arr[i];\n    }\n    sort(result);\n    for (int i\
    \ = k; i < arr.length; i++)\n    {\n        if (arr[i] > result[0])\n        {\n\
    \            result[0] = arr[i];\n            sort(result);\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfa4yimj7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (long i = 0; i < k; i++)\n\
    \    {\n        result[i] = arr[i];\n    }\n    sort(result);\n    for (long i\
    \ = k; i < arr.length; i++)\n    {\n        if (arr[i] > result[0])\n        {\n\
    \            result[0] = arr[i];\n            sort(result);\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl9ty7dnh.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    if(k == 0)\n        return\
    \ result;\n    if(k == arr.length)\n        return arr;\n    long max = arr[0];\n\
    \    int maxIndex = 0;\n    for(int i = 0; i < k; i++)\n    {\n        for(int\
    \ j = i; j < arr.length; j++)\n        {\n            if(arr[j] > max)\n     \
    \       {\n                max = arr[j];\n                maxIndex = j;\n    \
    \        }\n        }\n        result[i] = max;\n        arr[maxIndex] = -1;\n\
    \        max = arr[i+1];\n        maxIndex = i+1;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L, -4L,\
    \ 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L,\
    \ 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpq9eheudv.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (long i = 0; i < k; i++)\n\
    \    {\n        result[i] = arr[i];\n    }\n    sort(result);\n    for (long i\
    \ = k; i < arr.length; i++)\n    {\n        if (arr[i] > result[0])\n        {\n\
    \            result[0] = arr[i];\n            sort(result);\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl9ty7dnh.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] res = new long[k];\n    long[] temp = new long[k];\n\
    \    for (long i = 0; i < k; i++)\n    {\n        temp[i] = arr[i];\n    }\n \
    \   sort(temp);\n    for (long i = k; i < arr.length; i++)\n    {\n        if\
    \ (arr[i] > temp[0])\n        {\n            temp[0] = arr[i];\n            sort(temp);\n\
    \        }\n    }\n    return temp;\n}\nunittest\n{\n    alias candidate = maximum;\n\
    \n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvc62b81a.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (long i = 0; i < k; i++)\n\
    \    {\n        result[i] = arr[i];\n    }\n    sort(result);\n    for (long i\
    \ = k; i < arr.length; i++)\n    {\n        if (arr[i] > result[0])\n        {\n\
    \            result[0] = arr[i];\n            sort(result);\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl9ty7dnh.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] res = new long[k];\n    for (int i = 0; i < k; i++)\n\
    \    {\n        res[i] = arr[i];\n    }\n    sort(res);\n    for (int i = k; i\
    \ < arr.length; i++)\n    {\n        if (arr[i] > res[0])\n        {\n       \
    \     res[0] = arr[i];\n            sort(res);\n        }\n    }\n    return res;\n\
    }\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L, -4L,\
    \ 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L,\
    \ 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkmob69sz.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (long i = 0; i < k; i++)\n\
    \    {\n        result[i] = arr[i];\n    }\n    result.sort();\n    for (long\
    \ i = k; i < arr.length; i++)\n    {\n        if (arr[i] > result[0])\n      \
    \  {\n            result[0] = arr[i];\n            result.sort();\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n\
    \    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjgjuah0e.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (int i = 0; i < k; i++)\n\
    \    {\n        result[i] = arr[i];\n    }\n    sort(result);\n    for (int i\
    \ = k; i < arr.length; i++)\n    {\n        if (arr[i] > result[0])\n        {\n\
    \            result[0] = arr[i];\n            sort(result);\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfa4yimj7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (long i = 0; i < k; i++)\n\
    \    {\n        result[i] = arr[i];\n    }\n    sort(result);\n    for (long i\
    \ = k; i < arr.length; i++)\n    {\n        if (arr[i] > result[0])\n        {\n\
    \            result[0] = arr[i];\n            sort(result);\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl9ty7dnh.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (int i = 0; i < k; i++)\n\
    \    {\n        result[i] = arr[i];\n    }\n    for (int i = k; i < arr.length;\
    \ i++)\n    {\n        for (int j = 0; j < k; j++)\n        {\n            if\
    \ (arr[i] > result[j])\n            {\n                for (int l = k - 1; l >\
    \ j; l--)\n                {\n                    result[l] = result[l - 1];\n\
    \                }\n                result[j] = arr[i];\n                break;\n\
    \            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj8dxk7gh.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (long i = 0; i < k; i++)\n\
    \    {\n        result[i] = arr[i];\n    }\n    sort(result);\n    for (long i\
    \ = k; i < arr.length; i++)\n    {\n        if (arr[i] > result[0])\n        {\n\
    \            result[0] = arr[i];\n            sort(result);\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl9ty7dnh.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    long[] maxHeap = new long[k];\n\
    \    for (long i = 0; i < k; i++) \n    {\n        maxHeap[i] = arr[i];\n    }\n\
    \    for (long i = k / 2 - 1; i >= 0; i--) \n    {\n        heapify(maxHeap, k,\
    \ i);\n    }\n    for (long i = k; i < arr.length; i++) \n    {\n        if (arr[i]\
    \ > maxHeap[0]) \n        {\n            maxHeap[0] = arr[i];\n            heapify(maxHeap,\
    \ k, 0);\n        }\n    }\n    for (long i = 0; i < k; i++) \n    {\n       \
    \ result[i] = maxHeap[i];\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = maximum;\n\n    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L,\
    \ 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L,\
    \ 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L,\
    \ 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L,\
    \ 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L,\
    \ 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n   \
    \ assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L,\
    \ 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n\
    \    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L,\
    \ 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxguv5zaf.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] res = new long[k];\n    for (int i = 0; i < k; i++)\n\
    \    {\n        res[i] = arr[i];\n    }\n    sort(res);\n    for (int i = k; i\
    \ < arr.length; i++)\n    {\n        if (arr[i] > res[0])\n        {\n       \
    \     res[0] = arr[i];\n            sort(res);\n        }\n    }\n    return res;\n\
    }\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L, -4L,\
    \ 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) == [4L,\
    \ 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkmob69sz.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (int i = 0; i < k; i++)\n\
    \    {\n        result[i] = arr[i];\n    }\n    sort(result);\n    for (int i\
    \ = k; i < arr.length; i++)\n    {\n        if (arr[i] > result[0])\n        {\n\
    \            result[0] = arr[i];\n            sort(result);\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfa4yimj7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (long i = 0; i < k; i++)\n\
    \    {\n        result[i] = arr[i];\n    }\n    sort(result);\n    for (long i\
    \ = k; i < arr.length; i++)\n    {\n        if (arr[i] > result[0])\n        {\n\
    \            result[0] = arr[i];\n            sort(result);\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl9ty7dnh.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (long i = 0; i < k; i++)\n\
    \    {\n        result[i] = arr[i];\n    }\n    sort(result);\n    for (long i\
    \ = k; i < arr.length; i++)\n    {\n        if (arr[i] > result[0])\n        {\n\
    \            result[0] = arr[i];\n            sort(result);\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl9ty7dnh.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (long i = 0; i < k; i++)\n\
    \    {\n        result[i] = arr[i];\n    }\n    sort(result);\n    for (long i\
    \ = k; i < arr.length; i++)\n    {\n        if (arr[i] > result[0])\n        {\n\
    \            result[0] = arr[i];\n            sort(result);\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl9ty7dnh.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (int i = 0; i < k; i++)\n\
    \    {\n        result[i] = arr[i];\n    }\n    sort(result);\n    for (int i\
    \ = k; i < arr.length; i++)\n    {\n        if (arr[i] > result[0])\n        {\n\
    \            result[0] = arr[i];\n            sort(result);\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfa4yimj7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (long i = 0; i < k; i++)\n\
    \    {\n        result[i] = arr[i];\n    }\n    sort(result);\n    for (long i\
    \ = k; i < arr.length; i++)\n    {\n        if (arr[i] > result[0])\n        {\n\
    \            result[0] = arr[i];\n            sort(result);\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl9ty7dnh.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (long i = 0; i < k; i++)\n\
    \    {\n        result[i] = arr[i];\n    }\n    sort(result);\n    for (long i\
    \ = k; i < arr.length; i++)\n    {\n        if (arr[i] > result[0])\n        {\n\
    \            result[0] = arr[i];\n            sort(result);\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl9ty7dnh.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (int i = 0; i < k; i++)\
    \ \n    {\n        result[i] = arr[i];\n    }\n    sort(result);\n    for (int\
    \ i = k; i < arr.length; i++) \n    {\n        if (arr[i] > result[0]) \n    \
    \    {\n            result[0] = arr[i];\n            sort(result);\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n\
    \    assert(candidate([-3L, -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L,\
    \ -4L, 4L], 2L) == [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L,\
    \ 1L], 1L) == [2L]);\n    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L],\
    \ 3L) == [2L, 20L, 123L]);\n    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L],\
    \ 4L) == [0L, 1L, 2L, 20L]);\n    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L,\
    \ 0L], 7L) == [-13L, -8L, 0L, 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L,\
    \ 2L, 5L, 3L, -10L], 2L) == [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L],\
    \ 1L) == [5L]);\n    assert(candidate([4L, -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L,\
    \ 10L], 2L) == [-10L, 10L]);\n    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L,\
    \ 0L], 0L) == []);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz0rndxme.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (long i = 0; i < k; i++)\n\
    \    {\n        result[i] = arr[i];\n    }\n    sort(result);\n    for (long i\
    \ = k; i < arr.length; i++)\n    {\n        if (arr[i] > result[0])\n        {\n\
    \            result[0] = arr[i];\n            sort(result);\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl9ty7dnh.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (long i = 0; i < k; i++)\n\
    \    {\n        result[i] = arr[i];\n    }\n    sort(result);\n    for (long i\
    \ = k; i < arr.length; i++)\n    {\n        if (arr[i] > result[0])\n        {\n\
    \            result[0] = arr[i];\n            sort(result);\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl9ty7dnh.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (int i = 0; i < k; i++)\n\
    \    {\n        result[i] = arr[i];\n    }\n    sort(result);\n    for (int i\
    \ = k; i < arr.length; i++)\n    {\n        if (arr[i] > result[0])\n        {\n\
    \            result[0] = arr[i];\n            sort(result);\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfa4yimj7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] res = new long[k];\n    for (int i = 0; i < k; i++)\
    \ \n    {\n        res[i] = arr[i];\n    }\n    sort(res);\n    for (int i = k;\
    \ i < arr.length; i++) \n    {\n        if (arr[i] > res[0]) \n        {\n   \
    \         res[0] = arr[i];\n            sort(res);\n        }\n    }\n    return\
    \ res;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwu45fnpt.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (long i = 0; i < k; i++)\n\
    \    {\n        result[i] = arr[i];\n    }\n    sort(result);\n    for (long i\
    \ = k; i < arr.length; i++)\n    {\n        if (arr[i] > result[0])\n        {\n\
    \            result[0] = arr[i];\n            sort(result);\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl9ty7dnh.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (int i = 0; i < k; i++)\n\
    \    {\n        result[i] = arr[i];\n    }\n    sort(result);\n    for (int i\
    \ = k; i < arr.length; i++)\n    {\n        if (arr[i] > result[0])\n        {\n\
    \            result[0] = arr[i];\n            sort(result);\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfa4yimj7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
- exit_code: 1
  program: "import std.math;\n/*\n\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the maximum k numbers\
    \ in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n\
    \    \n    Note:\n        1. The length of the array will be in the range of [1,\
    \ 1000].\n        2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\nlong[] maximum(long[] arr,\
    \ long k) \n{\n    long[] result = new long[k];\n    for (long i = 0; i < k; i++)\n\
    \    {\n        result[i] = arr[i];\n    }\n    sort(result);\n    for (long i\
    \ = k; i < arr.length; i++)\n    {\n        if (arr[i] > result[0])\n        {\n\
    \            result[0] = arr[i];\n            sort(result);\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = maximum;\n\n    assert(candidate([-3L,\
    \ -4L, 5L], 3L) == [-4L, -3L, 5L]);\n    assert(candidate([4L, -4L, 4L], 2L) ==\
    \ [4L, 4L]);\n    assert(candidate([-3L, 2L, 1L, 2L, -1L, -2L, 1L], 1L) == [2L]);\n\
    \    assert(candidate([123L, -123L, 20L, 0L, 1L, 2L, -3L], 3L) == [2L, 20L, 123L]);\n\
    \    assert(candidate([-123L, 20L, 0L, 1L, 2L, -3L], 4L) == [0L, 1L, 2L, 20L]);\n\
    \    assert(candidate([5L, 15L, 0L, 3L, -13L, -8L, 0L], 7L) == [-13L, -8L, 0L,\
    \ 0L, 3L, 5L, 15L]);\n    assert(candidate([-1L, 0L, 2L, 5L, 3L, -10L], 2L) ==\
    \ [3L, 5L]);\n    assert(candidate([1L, 0L, 5L, -7L], 1L) == [5L]);\n    assert(candidate([4L,\
    \ -4L], 2L) == [-4L, 4L]);\n    assert(candidate([-10L, 10L], 2L) == [-10L, 10L]);\n\
    \    assert(candidate([1L, 2L, 3L, -23L, 243L, -400L, 0L], 0L) == []);\n}\nvoid\
    \ main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl9ty7dnh.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1659978048
