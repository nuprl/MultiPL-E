name: HumanEval_158_find_max
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
  \ a list of strings.\n    The list contains different words. Return the word with\
  \ maximum number\n    of unique characters. If multiple strings have maximum number\
  \ of unique\n    characters, return the one which comes first in lexicographical\
  \ order.\n\n                \n*/\nstring find_max(string[] words) \n"
tests: "unittest\n{\n    alias candidate = find_max;\n\n    assert(candidate([\"name\"\
  , \"of\", \"string\"]) == \"string\");\n    assert(candidate([\"name\", \"enam\"\
  , \"game\"]) == \"enam\");\n    assert(candidate([\"aaaaaaa\", \"bb\", \"cc\"])\
  \ == \"aaaaaaa\");\n    assert(candidate([\"abc\", \"cba\"]) == \"abc\");\n    assert(candidate([\"\
  play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\");\n    assert(candidate([\"\
  we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\");\n    assert(candidate([\"we\"\
  , \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\");\n    assert(candidate([\"\
  this\", \"is\", \"a\", \"prrk\"]) == \"this\");\n    assert(candidate([\"b\"]) ==\
  \ \"b\");\n    assert(candidate([\"play\", \"play\", \"play\"]) == \"play\");\n\
  }\nvoid main(){}"
completions: ["{\n    int max = 0;\n    string max_word = \"\";\n    foreach(word;\
    \ words)\n    {\n        int len = word.length;\n        int unique_chars = 0;\n\
    \        foreach(ch; word)\n        {\n            if(word.count(ch) == 1)\n \
    \           {\n                unique_chars++;\n            }\n        }\n   \
    \     if(unique_chars > max)\n        {\n            max = unique_chars;\n   \
    \         max_word = word;\n        }\n        else if(unique_chars == max)\n\
    \        {\n            if(word < max_word)\n            {\n                max_word\
    \ = word;\n            }\n        }\n    }\n    return max_word;\n}", "{\n   \
    \ string max_word = \"\";\n    int max_unique = 0;\n    foreach(string word; words)\n\
    \    {\n        int unique = 0;\n        foreach(char c; word)\n        {\n  \
    \          if(!max_word.canFind(c))\n            {\n                unique++;\n\
    \            }\n        }\n        if(unique > max_unique)\n        {\n      \
    \      max_unique = unique;\n            max_word = word;\n        }\n    }\n\
    \    return max_word;\n}", "{\n    string max_word = \"\";\n    int max_unique\
    \ = 0;\n    foreach(string word; words) \n    {\n        int unique = 0;\n   \
    \     foreach(char c; word) \n        {\n            if(!max_word.canFind(c))\
    \ \n            {\n                unique++;\n            }\n        }\n     \
    \   if(unique > max_unique) \n        {\n            max_unique = unique;\n  \
    \          max_word = word;\n        }\n    }\n    return max_word;\n}", "{\n\
    \    string max = \"\";\n    int max_count = 0;\n    foreach(string word; words)\n\
    \    {\n        int count = 0;\n        foreach(char c; word)\n        {\n   \
    \         if(count == 0)\n            {\n                count++;\n          \
    \  }\n            else\n            {\n                if(word[0..count].count(c)\
    \ == 0)\n                {\n                    count++;\n                }\n\
    \            }\n        }\n        if(count > max_count)\n        {\n        \
    \    max_count = count;\n            max = word;\n        }\n        else if(count\
    \ == max_count)\n        {\n            if(word < max)\n            {\n      \
    \          max = word;\n            }\n        }\n    }\n    return max;\n}",
  "{\n    string max_word = \"\";\n    int max_unique = 0;\n    foreach(string word;\
    \ words) \n    {\n        int unique = 0;\n        foreach(char c; word) \n  \
    \      {\n            if(c !in max_word) \n            {\n                unique++;\n\
    \                max_word ~= c;\n            }\n        }\n        if(unique >\
    \ max_unique) \n        {\n            max_unique = unique;\n            max_word\
    \ = word;\n        }\n    }\n    return max_word;\n}", "{\n    string max_word;\n\
    \    int max_count = 0;\n    foreach(word; words)\n    {\n        int count =\
    \ 0;\n        foreach(c; word)\n        {\n            if(c in word[0..count])\n\
    \                continue;\n            count++;\n        }\n        if(count\
    \ > max_count)\n        {\n            max_count = count;\n            max_word\
    \ = word;\n        }\n    }\n    return max_word;\n}", "{\n    string max_word\
    \ = \"\";\n    int max_unique = 0;\n    foreach(word; words) \n    {\n       \
    \ int unique = 0;\n        foreach(c; word) \n        {\n            if(word.count(c)\
    \ == 1) \n            {\n                unique++;\n            }\n        }\n\
    \        if(unique > max_unique) \n        {\n            max_unique = unique;\n\
    \            max_word = word;\n        }\n        else if(unique == max_unique)\
    \ \n        {\n            if(word < max_word) \n            {\n             \
    \   max_word = word;\n            }\n        }\n    }\n    return max_word;\n}",
  "{\n    string max_word;\n    int max_unique_chars = 0;\n    foreach(word; words)\n\
    \    {\n        int unique_chars = 0;\n        foreach(char ch; word)\n      \
    \  {\n            if(!ch.isAlpha)\n                continue;\n            if(!ch.isUpper)\n\
    \                ch = ch.toUpper;\n            if(!ch.isAlpha)\n             \
    \   continue;\n            unique_chars++;\n        }\n        if(unique_chars\
    \ > max_unique_chars)\n        {\n            max_unique_chars = unique_chars;\n\
    \            max_word = word;\n        }\n    }\n    return max_word;\n}", "{\n\
    \    string max_word;\n    int max_unique = 0;\n    foreach(word; words)\n   \
    \ {\n        int unique = 0;\n        foreach(c; word)\n        {\n          \
    \  if(!c.canFindIn(word[0..$-1]))\n                unique++;\n        }\n    \
    \    if(unique > max_unique)\n        {\n            max_unique = unique;\n  \
    \          max_word = word;\n        }\n    }\n    return max_word;\n}", "{\n\
    \    string max_word = \"\";\n    int max_unique = 0;\n    foreach(word; words)\
    \ \n    {\n        int unique = 0;\n        foreach(c; word) \n        {\n   \
    \         if(word.count(c) == 1) \n            {\n                unique++;\n\
    \            }\n        }\n        if(unique > max_unique) \n        {\n     \
    \       max_unique = unique;\n            max_word = word;\n        }\n      \
    \  else if(unique == max_unique) \n        {\n            if(word < max_word)\
    \ \n            {\n                max_word = word;\n            }\n        }\n\
    \    }\n    return max_word;\n}", "{\n    string max_word;\n    int max_unique\
    \ = 0;\n    foreach(word; words)\n    {\n        auto unique_chars = set(word);\n\
    \        if(unique_chars.length > max_unique)\n        {\n            max_unique\
    \ = unique_chars.length;\n            max_word = word;\n        }\n    }\n   \
    \ return max_word;\n}", "{\n    string max_word = \"\";\n    int max_unique =\
    \ 0;\n    foreach(word; words) \n    {\n        int unique = 0;\n        foreach(c;\
    \ word) \n        {\n            if(word.count(c) == 1) \n            {\n    \
    \            unique++;\n            }\n        }\n        if(unique > max_unique)\
    \ \n        {\n            max_unique = unique;\n            max_word = word;\n\
    \        }\n        else if(unique == max_unique) \n        {\n            if(word\
    \ < max_word) \n            {\n                max_word = word;\n            }\n\
    \        }\n    }\n    return max_word;\n}", "{\n    int max_unique = 0;\n   \
    \ string result = \"\";\n    foreach(word; words)\n    {\n        int unique =\
    \ 0;\n        foreach(c; word)\n        {\n            if(word.count(c) == 1)\n\
    \            {\n                unique++;\n            }\n        }\n        if(unique\
    \ > max_unique)\n        {\n            max_unique = unique;\n            result\
    \ = word;\n        }\n        else if(unique == max_unique)\n        {\n     \
    \       if(word < result)\n            {\n                result = word;\n   \
    \         }\n        }\n    }\n    return result;\n}", "{\n    string max_word\
    \ = \"\";\n    int max_count = 0;\n    foreach(word; words) \n    {\n        int\
    \ count = 0;\n        foreach(char c; word) \n        {\n            if(c in word[0..$-1])\
    \ \n            {\n                continue;\n            }\n            count++;\n\
    \        }\n        if(count > max_count) \n        {\n            max_count =\
    \ count;\n            max_word = word;\n        }\n    }\n    return max_word;\n\
    }", "{\n    int max = 0;\n    string max_word = \"\";\n    foreach(word; words)\n\
    \    {\n        int count = 0;\n        foreach(c; word)\n        {\n        \
    \    if(count == 0)\n            {\n                count++;\n            }\n\
    \            else\n            {\n                if(word[0..count].count(c) ==\
    \ 0)\n                {\n                    count++;\n                }\n   \
    \         }\n        }\n        if(count > max)\n        {\n            max =\
    \ count;\n            max_word = word;\n        }\n        else if(count == max)\n\
    \        {\n            if(word < max_word)\n            {\n                max_word\
    \ = word;\n            }\n        }\n    }\n    return max_word;\n}", "{\n   \
    \ string max_word = \"\";\n    int max_unique = 0;\n    foreach(word; words) \n\
    \    {\n        int unique = 0;\n        foreach(c; word) \n        {\n      \
    \      if(word.count(c) == 1) \n            {\n                unique++;\n   \
    \         }\n        }\n        if(unique > max_unique) \n        {\n        \
    \    max_unique = unique;\n            max_word = word;\n        }\n        else\
    \ if(unique == max_unique) \n        {\n            max_word = min(max_word, word);\n\
    \        }\n    }\n    return max_word;\n}", "{\n    string max_word = \"\";\n\
    \    int max_unique = 0;\n    foreach(word; words)\n    {\n        int unique\
    \ = 0;\n        foreach(c; word)\n        {\n            if(word.count(c) == 1)\n\
    \            {\n                unique++;\n            }\n        }\n        if(unique\
    \ > max_unique)\n        {\n            max_unique = unique;\n            max_word\
    \ = word;\n        }\n        else if(unique == max_unique)\n        {\n     \
    \       if(word < max_word)\n            {\n                max_word = word;\n\
    \            }\n        }\n    }\n    return max_word;\n}", "{\n    string max_word\
    \ = \"\";\n    int max_unique = 0;\n    foreach(string word; words) \n    {\n\
    \        int unique = 0;\n        foreach(char c; word) \n        {\n        \
    \    if(!contains(max_word, c)) \n            {\n                unique++;\n \
    \               max_word ~= c;\n            }\n        }\n        if(unique >\
    \ max_unique) \n        {\n            max_unique = unique;\n            max_word\
    \ = word;\n        }\n    }\n    return max_word;\n}", "{\n    string max_word\
    \ = \"\";\n    int max_count = 0;\n    foreach(word; words) \n    {\n        int\
    \ count = 0;\n        foreach(c; word) \n        {\n            if(!max_word.canFind(c))\
    \ \n            {\n                count++;\n            }\n        }\n      \
    \  if(count > max_count) \n        {\n            max_count = count;\n       \
    \     max_word = word;\n        }\n    }\n    return max_word;\n}", "{\n    int\
    \ max = 0;\n    string result = \"\";\n    foreach(string word; words)\n    {\n\
    \        int count = 0;\n        foreach(char c; word)\n        {\n          \
    \  if(c in word[0..count])\n                continue;\n            count++;\n\
    \        }\n        if(count > max)\n        {\n            max = count;\n   \
    \         result = word;\n        }\n    }\n    return result;\n}", "{\n    string\
    \ max_word = \"\";\n    int max_unique = 0;\n    foreach(word; words)\n    {\n\
    \        int unique = 0;\n        foreach(c; word)\n        {\n            if(word.count(c)\
    \ == 1)\n                unique++;\n        }\n        if(unique > max_unique)\n\
    \        {\n            max_unique = unique;\n            max_word = word;\n \
    \       }\n        else if(unique == max_unique)\n        {\n            if(word\
    \ < max_word)\n                max_word = word;\n        }\n    }\n    return\
    \ max_word;\n}", "{\n    string max_word = \"\";\n    int max_unique = 0;\n  \
    \  foreach(word; words) \n    {\n        int unique = 0;\n        foreach(c; word)\
    \ \n        {\n            if(!c.isAlpha)\n                continue;\n       \
    \     if(!max_word.canFind(c))\n                unique++;\n        }\n       \
    \ if(unique > max_unique) \n        {\n            max_unique = unique;\n    \
    \        max_word = word;\n        }\n    }\n    return max_word;\n}", "{\n  \
    \  string max_word = \"\";\n    int max_chars = 0;\n    foreach(word; words)\n\
    \    {\n        int num_chars = 0;\n        foreach(char c; word)\n        {\n\
    \            if(!c.in(max_word))\n            {\n                num_chars++;\n\
    \                max_word ~= c;\n            }\n        }\n        if(num_chars\
    \ > max_chars)\n        {\n            max_chars = num_chars;\n            max_word\
    \ = word;\n        }\n    }\n    return max_word;\n}", "{\n    string max_word\
    \ = \"\";\n    int max_unique = 0;\n    foreach(word; words)\n    {\n        int\
    \ unique = 0;\n        foreach(c; word)\n        {\n            if(word.count(c)\
    \ == 1)\n            {\n                unique++;\n            }\n        }\n\
    \        if(unique > max_unique)\n        {\n            max_unique = unique;\n\
    \            max_word = word;\n        }\n        else if(unique == max_unique)\n\
    \        {\n            if(word < max_word)\n            {\n                max_word\
    \ = word;\n            }\n        }\n    }\n    return max_word;\n}", "{\n   \
    \ string max_word = \"\";\n    int max_unique = 0;\n    foreach(string word; words)\n\
    \    {\n        int unique = 0;\n        foreach(char c; word)\n        {\n  \
    \          if(c !in max_word)\n            {\n                unique++;\n    \
    \            max_word ~= c;\n            }\n        }\n        if(unique > max_unique)\n\
    \        {\n            max_unique = unique;\n            max_word = word;\n \
    \       }\n    }\n    return max_word;\n}", "{\n    string max = \"\";\n    int\
    \ max_unique = 0;\n    foreach(string word; words)\n    {\n        int unique\
    \ = 0;\n        foreach(char c; word)\n        {\n            if(!max.canFind(c))\n\
    \            {\n                unique++;\n            }\n        }\n        if(unique\
    \ > max_unique)\n        {\n            max = word;\n            max_unique =\
    \ unique;\n        }\n    }\n    return max;\n}", "{\n    string max_word = \"\
    \";\n    int max_unique = 0;\n    foreach(string word; words) \n    {\n      \
    \  int unique = 0;\n        foreach(char c; word) \n        {\n            if(c\
    \ !in word[0 .. $ - 1]) \n            {\n                unique++;\n         \
    \   }\n        }\n        if(unique > max_unique) \n        {\n            max_unique\
    \ = unique;\n            max_word = word;\n        }\n    }\n    return max_word;\n\
    }", "{\n    string max_word;\n    int max_count = 0;\n    foreach(word; words)\n\
    \    {\n        int count = 0;\n        foreach(c; word)\n        {\n        \
    \    if(count == 0)\n            {\n                count = 1;\n            }\n\
    \            else\n            {\n                if(word[$-count] != c)\n   \
    \             {\n                    count++;\n                }\n           \
    \ }\n        }\n        if(count > max_count)\n        {\n            max_count\
    \ = count;\n            max_word = word;\n        }\n    }\n    return max_word;\n\
    }", "{\n    string max_word = \"\";\n    int max_count = 0;\n    foreach(string\
    \ word; words) \n    {\n        int count = 0;\n        foreach(char c; word)\
    \ \n        {\n            if(c !in word[0..$-1]) \n            {\n          \
    \      count++;\n            }\n        }\n        if(count > max_count) \n  \
    \      {\n            max_count = count;\n            max_word = word;\n     \
    \   }\n    }\n    return max_word;\n}", "{\n    string max_word = \"\";\n    int\
    \ max_count = 0;\n    foreach(string word; words) \n    {\n        int count =\
    \ 0;\n        foreach(char c; word) \n        {\n            if(count == 0) \n\
    \            {\n                count++;\n            }\n            else \n \
    \           {\n                bool found = false;\n                foreach(char\
    \ c2; word[0..$-1]) \n                {\n                    if(c == c2) \n  \
    \                  {\n                        found = true;\n                \
    \        break;\n                    }\n                }\n                if(!found)\
    \ \n                {\n                    count++;\n                }\n     \
    \       }\n        }\n        if(count > max_count) \n        {\n            max_count\
    \ = count;\n            max_word = word;\n        }\n        else if(count ==\
    \ max_count) \n        {\n            if(word < max_word) \n            {\n  \
    \              max_word = word;\n            }\n        }\n    }\n    return max_word;\n\
    }", "{\n    string max_word = \"\";\n    int max_count = 0;\n    foreach(string\
    \ word; words)\n    {\n        int count = 0;\n        foreach(char c; word)\n\
    \        {\n            if(count == 0)\n            {\n                count++;\n\
    \            }\n            else\n            {\n                if(word[0..count].count(c)\
    \ == 0)\n                {\n                    count++;\n                }\n\
    \            }\n        }\n        if(count > max_count)\n        {\n        \
    \    max_count = count;\n            max_word = word;\n        }\n    }\n    return\
    \ max_word;\n}", "{\n    string max_word;\n    int max_unique = 0;\n    foreach(word;\
    \ words) \n    {\n        int unique = 0;\n        foreach(ch; word) \n      \
    \  {\n            if(!ch in max_word) \n            {\n                unique++;\n\
    \                max_word ~= ch;\n            }\n        }\n        if(unique\
    \ > max_unique) \n        {\n            max_unique = unique;\n            max_word\
    \ = word;\n        }\n    }\n    return max_word;\n}", "{\n    string max_word\
    \ = \"\";\n    int max_count = 0;\n    foreach(word; words) \n    {\n        int\
    \ count = 0;\n        foreach(c; word) \n        {\n            if(count == 0)\
    \ \n            {\n                count++;\n            }\n            else \n\
    \            {\n                if(word[0..count].count(c) == 0) \n          \
    \      {\n                    count++;\n                }\n            }\n   \
    \     }\n        if(count > max_count) \n        {\n            max_count = count;\n\
    \            max_word = word;\n        }\n        else if(count == max_count)\
    \ \n        {\n            if(word < max_word) \n            {\n             \
    \   max_word = word;\n            }\n        }\n    }\n    return max_word;\n}",
  "{\n    string max_word = \"\";\n    int max_count = 0;\n    foreach(word; words)\n\
    \    {\n        int count = 0;\n        foreach(c; word)\n        {\n        \
    \    if(count == 0)\n            {\n                count = 1;\n            }\n\
    \            else\n            {\n                if(word[0..count].count(c) ==\
    \ 0)\n                {\n                    count++;\n                }\n   \
    \         }\n        }\n        if(count > max_count)\n        {\n           \
    \ max_count = count;\n            max_word = word;\n        }\n    }\n    return\
    \ max_word;\n}", "{\n    auto max_word = words[0];\n    auto max_count = 0;\n\
    \    foreach(word; words) \n    {\n        auto count = 0;\n        foreach(c;\
    \ word) \n        {\n            if(c !in word[0..count]) \n            {\n  \
    \              count++;\n            }\n        }\n        if(count > max_count)\
    \ \n        {\n            max_count = count;\n            max_word = word;\n\
    \        }\n    }\n    return max_word;\n}", "{\n    string max_word;\n    int\
    \ max_count = 0;\n    foreach(word; words)\n    {\n        int count = 0;\n  \
    \      foreach(c; word)\n        {\n            if(count == 0)\n            {\n\
    \                count++;\n            }\n            else\n            {\n  \
    \              if(word[0..count].canFind(c))\n                {\n            \
    \        continue;\n                }\n                else\n                {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \       if(count > max_count)\n        {\n            max_count = count;\n   \
    \         max_word = word;\n        }\n        else if(count == max_count)\n \
    \       {\n            if(word < max_word)\n            {\n                max_word\
    \ = word;\n            }\n        }\n    }\n    return max_word;\n}", "{\n   \
    \ int max_count = 0;\n    string max_word = \"\";\n    foreach(string word; words)\n\
    \    {\n        int count = 0;\n        foreach(char c; word)\n        {\n   \
    \         if(count == 0)\n            {\n                count++;\n          \
    \  }\n            else\n            {\n                if(word[0..count].count(c)\
    \ == 0)\n                {\n                    count++;\n                }\n\
    \            }\n        }\n        if(count > max_count)\n        {\n        \
    \    max_count = count;\n            max_word = word;\n        }\n        else\
    \ if(count == max_count)\n        {\n            if(word < max_word)\n       \
    \     {\n                max_word = word;\n            }\n        }\n    }\n \
    \   return max_word;\n}", "{\n    string max_word = \"\";\n    int max_unique\
    \ = 0;\n    foreach(string word; words) \n    {\n        int unique = 0;\n   \
    \     foreach(char c; word) \n        {\n            if(c in word[0..$-1]) \n\
    \            {\n                continue;\n            }\n            unique++;\n\
    \        }\n        if(unique > max_unique) \n        {\n            max_unique\
    \ = unique;\n            max_word = word;\n        }\n    }\n    return max_word;\n\
    }", "{\n    string max_word;\n    int max_count = 0;\n    foreach(string word;\
    \ words)\n    {\n        int count = 0;\n        foreach(char c; word)\n     \
    \   {\n            if(count == 0)\n            {\n                count++;\n \
    \           }\n            else\n            {\n                if(word[$-1] !=\
    \ c)\n                {\n                    count++;\n                }\n   \
    \         }\n        }\n        if(count > max_count)\n        {\n           \
    \ max_count = count;\n            max_word = word;\n        }\n    }\n    return\
    \ max_word;\n}", "{\n    int max_unique = 0;\n    string max_word = \"\";\n  \
    \  foreach(word; words)\n    {\n        int unique = 0;\n        foreach(c; word)\n\
    \        {\n            if(word.count(c) == 1)\n            {\n              \
    \  unique++;\n            }\n        }\n        if(unique > max_unique)\n    \
    \    {\n            max_unique = unique;\n            max_word = word;\n     \
    \   }\n        else if(unique == max_unique)\n        {\n            if(word <\
    \ max_word)\n            {\n                max_word = word;\n            }\n\
    \        }\n    }\n    return max_word;\n}", "{\n    string max_word = \"\";\n\
    \    int max_unique = 0;\n    foreach(word; words)\n    {\n        int unique\
    \ = 0;\n        foreach(c; word)\n        {\n            if(c !in max_word)\n\
    \            {\n                unique++;\n                max_word ~= c;\n  \
    \          }\n        }\n        if(unique > max_unique)\n        {\n        \
    \    max_unique = unique;\n            max_word = word;\n        }\n    }\n  \
    \  return max_word;\n}", "{\n    int max_unique = 0;\n    string max_word = \"\
    \";\n    foreach(string word; words)\n    {\n        int unique = 0;\n       \
    \ foreach(char c; word)\n        {\n            if(c !in max_word)\n         \
    \   {\n                unique++;\n                max_word ~= c;\n           \
    \ }\n        }\n        if(unique > max_unique)\n        {\n            max_unique\
    \ = unique;\n            max_word = word;\n        }\n    }\n    return max_word;\n\
    }", "{\n    string max_word;\n    int max_unique_chars = 0;\n    foreach(word;\
    \ words) \n    {\n        int unique_chars = 0;\n        foreach(ch; word) \n\
    \        {\n            if(ch in word[0 .. $-1]) \n            {\n           \
    \     continue;\n            }\n            unique_chars++;\n        }\n     \
    \   if(unique_chars > max_unique_chars) \n        {\n            max_unique_chars\
    \ = unique_chars;\n            max_word = word;\n        }\n    }\n    return\
    \ max_word;\n}", "{\n    string max_word = \"\";\n    int max_unique = 0;\n  \
    \  foreach(word; words)\n    {\n        int unique = 0;\n        foreach(c; word)\n\
    \        {\n            if(!max_word.canFind(c))\n            {\n            \
    \    unique++;\n            }\n        }\n        if(unique > max_unique)\n  \
    \      {\n            max_unique = unique;\n            max_word = word;\n   \
    \     }\n    }\n    return max_word;\n}", "{\n    string max_word = \"\";\n  \
    \  int max_count = 0;\n    foreach(word; words) \n    {\n        int count = 0;\n\
    \        foreach(ch; word) \n        {\n            if(!max_word.canFind(ch))\
    \ \n            {\n                count++;\n            }\n        }\n      \
    \  if(count > max_count) \n        {\n            max_count = count;\n       \
    \     max_word = word;\n        }\n    }\n    return max_word;\n}", "{\n    string\
    \ max_word = \"\";\n    int max_unique = 0;\n    foreach(word; words) \n    {\n\
    \        int unique = 0;\n        foreach(c; word) \n        {\n            if(word.count(c)\
    \ == 1) \n            {\n                unique++;\n            }\n        }\n\
    \        if(unique > max_unique) \n        {\n            max_unique = unique;\n\
    \            max_word = word;\n        }\n        else if(unique == max_unique)\
    \ \n        {\n            max_word = min(max_word, word);\n        }\n    }\n\
    \    return max_word;\n}", "{\n    int max_count = 0;\n    string max_word = \"\
    \";\n    foreach(word; words)\n    {\n        int count = 0;\n        foreach(c;\
    \ word)\n        {\n            if(count == 0)\n            {\n              \
    \  count++;\n            }\n            else\n            {\n                if(word[0..count].count(c)\
    \ == 0)\n                {\n                    count++;\n                }\n\
    \            }\n        }\n        if(count > max_count)\n        {\n        \
    \    max_count = count;\n            max_word = word;\n        }\n        else\
    \ if(count == max_count)\n        {\n            if(word < max_word)\n       \
    \     {\n                max_word = word;\n            }\n        }\n    }\n \
    \   return max_word;\n}", "{\n    int max = 0;\n    string result = \"\";\n  \
    \  foreach(word; words)\n    {\n        int unique = 0;\n        foreach(c; word)\n\
    \        {\n            if(word.count(c) == 1)\n            {\n              \
    \  unique++;\n            }\n        }\n        if(unique > max)\n        {\n\
    \            max = unique;\n            result = word;\n        }\n    }\n   \
    \ return result;\n}", "{\n    int max = 0;\n    string result = \"\";\n    foreach(string\
    \ word; words) \n    {\n        int count = 0;\n        foreach(char c; word)\
    \ \n        {\n            if(c in word[0..count])\n                continue;\n\
    \            count++;\n        }\n        if(count > max) \n        {\n      \
    \      max = count;\n            result = word;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string max_word = \"\";\n    int max_unique = 0;\n    foreach(word;\
    \ words)\n    {\n        int unique = 0;\n        foreach(c; word)\n        {\n\
    \            if(!max_word.canFind(c))\n            {\n                unique++;\n\
    \            }\n        }\n        if(unique > max_unique)\n        {\n      \
    \      max_unique = unique;\n            max_word = word;\n        }\n    }\n\
    \    return max_word;\n}", "{\n    string max = \"\";\n    int max_len = 0;\n\
    \    foreach(word; words) \n    {\n        int len = 0;\n        foreach(c; word)\
    \ \n        {\n            if(!c.canFindIn(word[0..$-1]))\n                len++;\n\
    \        }\n        if(len > max_len) \n        {\n            max_len = len;\n\
    \            max = word;\n        }\n    }\n    return max;\n}", "{\n    string\
    \ max_word = \"\";\n    int max_unique = 0;\n    foreach(word; words)\n    {\n\
    \        int unique = 0;\n        foreach(c; word)\n        {\n            if(count(word,\
    \ c) == 1)\n                unique++;\n        }\n        if(unique > max_unique)\n\
    \        {\n            max_unique = unique;\n            max_word = word;\n \
    \       }\n        else if(unique == max_unique)\n        {\n            if(word\
    \ < max_word)\n                max_word = word;\n        }\n    }\n    return\
    \ max_word;\n}", "{\n    int max = 0;\n    string result = \"\";\n    foreach(string\
    \ word; words)\n    {\n        int count = 0;\n        foreach(char c; word)\n\
    \        {\n            if(count == 0)\n            {\n                count++;\n\
    \            }\n            else\n            {\n                int i = 0;\n\
    \                foreach(char d; word[0..$-1])\n                {\n          \
    \          if(c == d)\n                    {\n                        i++;\n \
    \                   }\n                }\n                if(i == 0)\n       \
    \         {\n                    count++;\n                }\n            }\n\
    \        }\n        if(count > max)\n        {\n            max = count;\n   \
    \         result = word;\n        }\n        else if(count == max)\n        {\n\
    \            if(word < result)\n            {\n                result = word;\n\
    \            }\n        }\n    }\n    return result;\n}", "{\n    int max_unique\
    \ = 0;\n    string max_word = \"\";\n    foreach(word; words) \n    {\n      \
    \  int unique = 0;\n        foreach(c; word) \n        {\n            if(word.count(c)\
    \ == 1) \n            {\n                unique++;\n            }\n        }\n\
    \        if(unique > max_unique) \n        {\n            max_unique = unique;\n\
    \            max_word = word;\n        }\n        else if(unique == max_unique)\
    \ \n        {\n            if(word < max_word) \n            {\n             \
    \   max_word = word;\n            }\n        }\n    }\n    return max_word;\n}",
  "{\n    int max = 0;\n    string max_word = \"\";\n    foreach(string word; words)\
    \ \n    {\n        int count = 0;\n        foreach(char c; word) \n        {\n\
    \            if(word.count(c) == 1) \n            {\n                count++;\n\
    \            }\n        }\n        if(count > max) \n        {\n            max\
    \ = count;\n            max_word = word;\n        }\n        else if(count ==\
    \ max) \n        {\n            if(word < max_word) \n            {\n        \
    \        max_word = word;\n            }\n        }\n    }\n    return max_word;\n\
    }", "{\n    string max_word = \"\";\n    int max_count = 0;\n    foreach(string\
    \ word; words) \n    {\n        int count = 0;\n        foreach(char c; word)\
    \ \n        {\n            if(count == max_count) \n            {\n          \
    \      if(word < max_word) \n                {\n                    max_word =\
    \ word;\n                }\n            }\n            else if(count > max_count)\
    \ \n            {\n                max_word = word;\n                max_count\
    \ = count;\n            }\n            count++;\n        }\n    }\n    return\
    \ max_word;\n}", "{\n    string max_word = \"\";\n    int max_unique = 0;\n  \
    \  foreach(word; words)\n    {\n        int unique = 0;\n        foreach(c; word)\n\
    \        {\n            if(count(word, c) == 1)\n                unique++;\n \
    \       }\n        if(unique > max_unique)\n        {\n            max_unique\
    \ = unique;\n            max_word = word;\n        }\n        else if(unique ==\
    \ max_unique)\n        {\n            if(word < max_word)\n                max_word\
    \ = word;\n        }\n    }\n    return max_word;\n}", "{\n    auto max_word =\
    \ words[0];\n    int max_count = 0;\n    foreach(word; words)\n    {\n       \
    \ auto count = 0;\n        foreach(ch; word)\n        {\n            if(count\
    \ == 0)\n            {\n                count = 1;\n            }\n          \
    \  else\n            {\n                if(ch != word[count-1])\n            \
    \    {\n                    count++;\n                }\n            }\n     \
    \   }\n        if(count > max_count)\n        {\n            max_count = count;\n\
    \            max_word = word;\n        }\n    }\n    return max_word;\n}", "{\n\
    \    string max_word = \"\";\n    int max_count = 0;\n    foreach(word; words)\
    \ \n    {\n        int count = 0;\n        foreach(char c; word) \n        {\n\
    \            if(!max_word.canFind(c)) \n            {\n                count++;\n\
    \            }\n        }\n        if(count > max_count) \n        {\n       \
    \     max_count = count;\n            max_word = word;\n        }\n    }\n   \
    \ return max_word;\n}", "{\n    string max_word = \"\";\n    int max_count = 0;\n\
    \    foreach(word; words) \n    {\n        int count = 0;\n        foreach(c;\
    \ word) \n        {\n            if(!max_word.canFind(c)) \n            {\n  \
    \              count++;\n            }\n        }\n        if(count > max_count)\
    \ \n        {\n            max_count = count;\n            max_word = word;\n\
    \        }\n    }\n    return max_word;\n}", "{\n    string max_word;\n    int\
    \ max_unique = 0;\n    foreach(word; words) \n    {\n        int unique = 0;\n\
    \        foreach(c; word) \n        {\n            if(c !in word[0..c]) \n   \
    \         {\n                unique++;\n            }\n        }\n        if(unique\
    \ > max_unique) \n        {\n            max_unique = unique;\n            max_word\
    \ = word;\n        }\n    }\n    return max_word;\n}", "{\n    string max_word\
    \ = \"\";\n    int max_count = 0;\n    foreach(word; words)\n    {\n        int\
    \ count = 0;\n        foreach(char c; word)\n        {\n            if(!c.isAlpha)\n\
    \                continue;\n            if(!max_word.canFind(c))\n           \
    \     count++;\n        }\n        if(count > max_count)\n        {\n        \
    \    max_count = count;\n            max_word = word;\n        }\n    }\n    return\
    \ max_word;\n}", "{\n    string max = \"\";\n    int max_count = 0;\n    foreach(string\
    \ word; words) \n    {\n        int count = 0;\n        foreach(char c; word)\
    \ \n        {\n            if(c !in word[0..$-1]) \n            {\n          \
    \      count++;\n            }\n        }\n        if(count > max_count) \n  \
    \      {\n            max = word;\n            max_count = count;\n        }\n\
    \    }\n    return max;\n}", "{\n    int max_count = 0;\n    string max_word =\
    \ \"\";\n    foreach(string word; words) \n    {\n        int count = 0;\n   \
    \     foreach(char c; word) \n        {\n            if(!max_word.canFind(c))\
    \ \n            {\n                count++;\n            }\n        }\n      \
    \  if(count > max_count) \n        {\n            max_count = count;\n       \
    \     max_word = word;\n        }\n    }\n    return max_word;\n}", "{\n    string\
    \ max_word = \"\";\n    int max_unique = 0;\n    foreach(string word; words) \n\
    \    {\n        int unique = 0;\n        foreach(char c; word) \n        {\n \
    \           if(!max_word.canFind(c)) \n            {\n                unique++;\n\
    \            }\n        }\n        if(unique > max_unique) \n        {\n     \
    \       max_unique = unique;\n            max_word = word;\n        }\n    }\n\
    \    return max_word;\n}", "{\n    int max_unique = 0;\n    string max_word =\
    \ \"\";\n    foreach(word; words) \n    {\n        int unique = 0;\n        foreach(c;\
    \ word) \n        {\n            if(word.count(c) == 1) \n            {\n    \
    \            unique++;\n            }\n        }\n        if(unique > max_unique)\
    \ \n        {\n            max_unique = unique;\n            max_word = word;\n\
    \        }\n        else if(unique == max_unique) \n        {\n            if(word\
    \ < max_word) \n            {\n                max_word = word;\n            }\n\
    \        }\n    }\n    return max_word;\n}", "{\n    string result = \"\";\n \
    \   int max = 0;\n    foreach(string word; words)\n    {\n        int count =\
    \ 0;\n        foreach(char c; word)\n        {\n            if(c !in result)\n\
    \            {\n                count++;\n                result ~= c;\n     \
    \       }\n        }\n        if(count > max)\n        {\n            max = count;\n\
    \            result = word;\n        }\n    }\n    return result;\n}", "{\n  \
    \  int max_unique = 0;\n    string max_word = \"\";\n    foreach(word; words)\n\
    \    {\n        int unique = 0;\n        foreach(c; word)\n        {\n       \
    \     if(word.count(c) == 1)\n            {\n                unique++;\n     \
    \       }\n        }\n        if(unique > max_unique)\n        {\n           \
    \ max_unique = unique;\n            max_word = word;\n        }\n        else\
    \ if(unique == max_unique)\n        {\n            if(word < max_word)\n     \
    \       {\n                max_word = word;\n            }\n        }\n    }\n\
    \    return max_word;\n}", "{\n    string max_word = \"\";\n    int max_unique\
    \ = 0;\n    foreach(word; words)\n    {\n        auto unique_chars = set(word);\n\
    \        if(unique_chars.length > max_unique)\n        {\n            max_unique\
    \ = unique_chars.length;\n            max_word = word;\n        }\n        else\
    \ if(unique_chars.length == max_unique)\n        {\n            if(word < max_word)\n\
    \            {\n                max_word = word;\n            }\n        }\n \
    \   }\n    return max_word;\n}", "{\n    string max;\n    int max_count = 0;\n\
    \    foreach(string word; words) \n    {\n        int count = 0;\n        foreach(char\
    \ c; word) \n        {\n            if(count == max_count) \n            {\n \
    \               if(word < max) \n                {\n                    max =\
    \ word;\n                }\n            }\n            else if(count > max_count)\
    \ \n            {\n                max = word;\n                max_count = count;\n\
    \            }\n            count++;\n        }\n    }\n    return max;\n}", "{\n\
    \    int max = 0;\n    string result = \"\";\n    foreach(string word; words)\n\
    \    {\n        int count = 0;\n        foreach(char c; word)\n        {\n   \
    \         if(!result.canFind(c))\n            {\n                count++;\n  \
    \          }\n        }\n        if(count > max)\n        {\n            max =\
    \ count;\n            result = word;\n        }\n    }\n    return result;\n}",
  "{\n    string max = \"\";\n    int max_unique = 0;\n    foreach(word; words)\n\
    \    {\n        int unique = 0;\n        foreach(ch; word)\n        {\n      \
    \      if(!ch in max)\n            {\n                unique++;\n            }\n\
    \        }\n        if(unique > max_unique)\n        {\n            max = word;\n\
    \            max_unique = unique;\n        }\n    }\n    return max;\n}", "{\n\
    \    string result = \"\";\n    int max = 0;\n    foreach(string word; words)\n\
    \    {\n        int count = 0;\n        foreach(char c; word)\n        {\n   \
    \         if(c !in result)\n            {\n                count++;\n        \
    \        result ~= c;\n            }\n        }\n        if(count > max)\n   \
    \     {\n            max = count;\n            result = word;\n        }\n   \
    \ }\n    return result;\n}", "{\n    string max = \"\";\n    foreach(string word;\
    \ words)\n    {\n        if(word.length > max.length)\n        {\n           \
    \ max = word;\n        }\n    }\n    return max;\n}", "{\n    string max_word;\n\
    \    int max_unique_chars = 0;\n    foreach(word; words) \n    {\n        int\
    \ unique_chars = 0;\n        foreach(char c; word) \n        {\n            if(word.count(c)\
    \ == 1) \n            {\n                unique_chars++;\n            }\n    \
    \    }\n        if(unique_chars > max_unique_chars) \n        {\n            max_unique_chars\
    \ = unique_chars;\n            max_word = word;\n        }\n    }\n    return\
    \ max_word;\n}", "{\n    string max_word;\n    int max_unique = 0;\n    foreach(word;\
    \ words)\n    {\n        int unique = 0;\n        foreach(c; word)\n        {\n\
    \            if(c !in word[0..$-1])\n                unique++;\n        }\n  \
    \      if(unique > max_unique)\n        {\n            max_unique = unique;\n\
    \            max_word = word;\n        }\n    }\n    return max_word;\n}", "{\n\
    \    int max = 0;\n    string max_word = \"\";\n    foreach(word; words) \n  \
    \  {\n        int count = 0;\n        foreach(c; word) \n        {\n         \
    \   if(word.count(c) == 1) \n            {\n                count++;\n       \
    \     }\n        }\n        if(count > max) \n        {\n            max = count;\n\
    \            max_word = word;\n        }\n        else if(count == max) \n   \
    \     {\n            if(word < max_word) \n            {\n                max_word\
    \ = word;\n            }\n        }\n    }\n    return max_word;\n}", "{\n   \
    \ string max_word = \"\";\n    int max_count = 0;\n    foreach(string word; words)\n\
    \    {\n        int count = 0;\n        foreach(char c; word)\n        {\n   \
    \         if(!max_word.canFind(c))\n            {\n                count++;\n\
    \            }\n        }\n        if(count > max_count)\n        {\n        \
    \    max_count = count;\n            max_word = word;\n        }\n    }\n    return\
    \ max_word;\n}", "{\n    int max = 0;\n    string max_word = \"\";\n    foreach(word;\
    \ words) \n    {\n        int count = 0;\n        foreach(ch; word) \n       \
    \ {\n            if(word.count(ch) == 1) \n            {\n                count++;\n\
    \            }\n        }\n        if(count > max) \n        {\n            max\
    \ = count;\n            max_word = word;\n        }\n        else if(count ==\
    \ max) \n        {\n            max_word = min(max_word, word);\n        }\n \
    \   }\n    return max_word;\n}", "{\n    string max = \"\";\n    int max_unique\
    \ = 0;\n    foreach(word; words)\n    {\n        int unique = 0;\n        foreach(c;\
    \ word)\n        {\n            if(count(word, c) == 1)\n                unique++;\n\
    \        }\n        if(unique > max_unique)\n        {\n            max = word;\n\
    \            max_unique = unique;\n        }\n        else if(unique == max_unique)\n\
    \        {\n            if(word < max)\n                max = word;\n        }\n\
    \    }\n    return max;\n}", "{\n    string max_word = \"\";\n    int max_count\
    \ = 0;\n    foreach(string word; words)\n    {\n        int count = 0;\n     \
    \   foreach(char c; word)\n        {\n            if(count == 0)\n           \
    \ {\n                count++;\n            }\n            else\n            {\n\
    \                if(word[0..count].count(c) == 0)\n                {\n       \
    \             count++;\n                }\n            }\n        }\n        if(count\
    \ > max_count)\n        {\n            max_count = count;\n            max_word\
    \ = word;\n        }\n    }\n    return max_word;\n}", "{\n    string max_word\
    \ = \"\";\n    int max_unique = 0;\n    foreach(word; words)\n    {\n        int\
    \ unique = 0;\n        foreach(c; word)\n        {\n            if(!max_word.canFind(c))\n\
    \            {\n                unique++;\n            }\n        }\n        if(unique\
    \ > max_unique)\n        {\n            max_unique = unique;\n            max_word\
    \ = word;\n        }\n    }\n    return max_word;\n}", "{\n    int max_unique\
    \ = 0;\n    string max_word = \"\";\n    foreach(word; words)\n    {\n       \
    \ int unique = 0;\n        foreach(c; word)\n        {\n            if(word.count(c)\
    \ == 1)\n            {\n                unique++;\n            }\n        }\n\
    \        if(unique > max_unique)\n        {\n            max_unique = unique;\n\
    \            max_word = word;\n        }\n        else if(unique == max_unique)\n\
    \        {\n            if(word < max_word)\n            {\n                max_word\
    \ = word;\n            }\n        }\n    }\n    return max_word;\n}", "{\n   \
    \ string max_word;\n    int max_unique_chars = 0;\n    foreach(string word; words)\
    \ \n    {\n        int unique_chars = 0;\n        foreach(char c; word) \n   \
    \     {\n            if(word.count(c) == 1) \n            {\n                unique_chars++;\n\
    \            }\n        }\n        if(unique_chars > max_unique_chars) \n    \
    \    {\n            max_unique_chars = unique_chars;\n            max_word = word;\n\
    \        }\n    }\n    return max_word;\n}", "{\n    string max_word = \"\";\n\
    \    int max_unique = 0;\n    foreach(word; words)\n    {\n        int unique\
    \ = 0;\n        foreach(c; word)\n        {\n            if(!c.canFind(word))\n\
    \                unique++;\n        }\n        if(unique > max_unique)\n     \
    \   {\n            max_unique = unique;\n            max_word = word;\n      \
    \  }\n    }\n    return max_word;\n}", "{\n    string max_word;\n    int max_unique\
    \ = 0;\n    foreach(string word; words) \n    {\n        int unique_chars = 0;\n\
    \        foreach(char c; word) \n        {\n            if(c !in word[0 .. $ -\
    \ 1]) \n            {\n                unique_chars++;\n            }\n      \
    \  }\n        if(unique_chars > max_unique) \n        {\n            max_unique\
    \ = unique_chars;\n            max_word = word;\n        }\n    }\n    return\
    \ max_word;\n}", "{\n    string max_word;\n    int max_unique = 0;\n    foreach(word;\
    \ words) \n    {\n        int unique = 0;\n        foreach(c; word) \n       \
    \ {\n            if(count(word, c) == 1) \n            {\n                unique++;\n\
    \            }\n        }\n        if(unique > max_unique) \n        {\n     \
    \       max_unique = unique;\n            max_word = word;\n        }\n      \
    \  else if(unique == max_unique) \n        {\n            max_word = min(max_word,\
    \ word);\n        }\n    }\n    return max_word;\n}", "{\n    int max = 0;\n \
    \   string max_word = \"\";\n    foreach(string word; words) \n    {\n       \
    \ int count = 0;\n        foreach(char c; word) \n        {\n            if(count\
    \ == 0) \n            {\n                count++;\n            }\n           \
    \ else \n            {\n                bool found = false;\n                foreach(char\
    \ c2; word[0..$-1]) \n                {\n                    if(c == c2) \n  \
    \                  {\n                        found = true;\n                \
    \        break;\n                    }\n                }\n                if(!found)\
    \ \n                {\n                    count++;\n                }\n     \
    \       }\n        }\n        if(count > max) \n        {\n            max = count;\n\
    \            max_word = word;\n        }\n        else if(count == max) \n   \
    \     {\n            if(word < max_word) \n            {\n                max_word\
    \ = word;\n            }\n        }\n    }\n    return max_word;\n}", "{\n   \
    \ string max_word;\n    int max_unique = 0;\n    foreach(word; words) \n    {\n\
    \        int unique = 0;\n        foreach(c; word) \n        {\n            if(!c.canFindIn(word[0..$-1]))\
    \ \n            {\n                unique++;\n            }\n        }\n     \
    \   if(unique > max_unique) \n        {\n            max_unique = unique;\n  \
    \          max_word = word;\n        }\n    }\n    return max_word;\n}", "{\n\
    \    auto max = 0;\n    string max_word;\n    foreach(word; words)\n    {\n  \
    \      auto count = 0;\n        foreach(c; word)\n        {\n            if(count\
    \ == 0)\n            {\n                count++;\n            }\n            else\n\
    \            {\n                if(word[0..count].canFind(c))\n              \
    \  {\n                    continue;\n                }\n                else\n\
    \                {\n                    count++;\n                }\n        \
    \    }\n        }\n        if(count > max)\n        {\n            max = count;\n\
    \            max_word = word;\n        }\n    }\n    return max_word;\n}", "{\n\
    \    string max_word = \"\";\n    int max_unique = 0;\n    foreach(word; words)\n\
    \    {\n        int unique = 0;\n        foreach(c; word)\n        {\n       \
    \     if(word.count(c) == 1)\n            {\n                unique++;\n     \
    \       }\n        }\n        if(unique > max_unique)\n        {\n           \
    \ max_unique = unique;\n            max_word = word;\n        }\n        else\
    \ if(unique == max_unique)\n        {\n            if(word < max_word)\n     \
    \       {\n                max_word = word;\n            }\n        }\n    }\n\
    \    return max_word;\n}", "{\n    string max_word;\n    int max_unique = 0;\n\
    \    foreach(word; words)\n    {\n        int unique = 0;\n        foreach(c;\
    \ word)\n        {\n            if(c.count(word) == 1)\n                unique++;\n\
    \        }\n        if(unique > max_unique)\n        {\n            max_unique\
    \ = unique;\n            max_word = word;\n        }\n        else if(unique ==\
    \ max_unique)\n        {\n            if(word < max_word)\n                max_word\
    \ = word;\n        }\n    }\n    return max_word;\n}", "{\n    string max_word;\n\
    \    int max_count = 0;\n    foreach(string word; words)\n    {\n        int count\
    \ = 0;\n        foreach(char c; word)\n        {\n            if(c !in word[0..$-1])\n\
    \                count++;\n        }\n        if(count > max_count)\n        {\n\
    \            max_count = count;\n            max_word = word;\n        }\n   \
    \ }\n    return max_word;\n}", "{\n    string max_word = \"\";\n    int max_count\
    \ = 0;\n    foreach(word; words)\n    {\n        int count = 0;\n        foreach(c;\
    \ word)\n        {\n            if(count == max_count)\n            {\n      \
    \          if(word < max_word)\n                {\n                    max_word\
    \ = word;\n                }\n            }\n            else if(count > max_count)\n\
    \            {\n                max_word = word;\n                max_count =\
    \ count;\n            }\n            count++;\n        }\n    }\n    return max_word;\n\
    }", "{\n    string max_word = \"\";\n    int max_unique = 0;\n    foreach(word;\
    \ words)\n    {\n        int unique = 0;\n        foreach(c; word)\n        {\n\
    \            if(word.count(c) == 1)\n            {\n                unique++;\n\
    \            }\n        }\n        if(unique > max_unique)\n        {\n      \
    \      max_unique = unique;\n            max_word = word;\n        }\n       \
    \ else if(unique == max_unique)\n        {\n            if(word < max_word)\n\
    \            {\n                max_word = word;\n            }\n        }\n \
    \   }\n    return max_word;\n}", "{\n    string max_word;\n    int max_unique_chars\
    \ = 0;\n    foreach(word; words)\n    {\n        int unique_chars = 0;\n     \
    \   foreach(char c; word)\n        {\n            if(word.count(c) == 1)\n   \
    \         {\n                unique_chars++;\n            }\n        }\n     \
    \   if(unique_chars > max_unique_chars)\n        {\n            max_unique_chars\
    \ = unique_chars;\n            max_word = word;\n        }\n        else if(unique_chars\
    \ == max_unique_chars)\n        {\n            if(word < max_word)\n         \
    \   {\n                max_word = word;\n            }\n        }\n    }\n   \
    \ return max_word;\n}", "{\n    string max_word = \"\";\n    int max_unique =\
    \ 0;\n    foreach(string word; words)\n    {\n        int unique = 0;\n      \
    \  foreach(char c; word)\n        {\n            if(!max_word.canFind(c))\n  \
    \          {\n                unique++;\n            }\n        }\n        if(unique\
    \ > max_unique)\n        {\n            max_unique = unique;\n            max_word\
    \ = word;\n        }\n    }\n    return max_word;\n}", "{\n    int max = 0;\n\
    \    string result = \"\";\n    foreach(string word; words)\n    {\n        int\
    \ count = 0;\n        foreach(char c; word)\n        {\n            if(c in word[0..count])\n\
    \                continue;\n            count++;\n        }\n        if(count\
    \ > max)\n        {\n            max = count;\n            result = word;\n  \
    \      }\n    }\n    return result;\n}", "{\n    string max_word;\n    int max_count\
    \ = 0;\n    foreach(word; words)\n    {\n        int count = 0;\n        foreach(char\
    \ c; word)\n        {\n            if(count == 0)\n            {\n           \
    \     count++;\n            }\n            else\n            {\n             \
    \   if(c != word[count-1])\n                {\n                    count++;\n\
    \                }\n            }\n        }\n        if(count > max_count)\n\
    \        {\n            max_count = count;\n            max_word = word;\n   \
    \     }\n        else if(count == max_count)\n        {\n            if(word <\
    \ max_word)\n            {\n                max_word = word;\n            }\n\
    \        }\n    }\n    return max_word;\n}", "{\n    int max = 0;\n    string\
    \ max_word = \"\";\n    foreach(word; words)\n    {\n        int count = 0;\n\
    \        foreach(c; word)\n        {\n            if(count == 0)\n           \
    \ {\n                count++;\n            }\n            else\n            {\n\
    \                if(word[0..count].count(c) == 0)\n                {\n       \
    \             count++;\n                }\n            }\n        }\n        if(count\
    \ > max)\n        {\n            max = count;\n            max_word = word;\n\
    \        }\n        else if(count == max)\n        {\n            if(word < max_word)\n\
    \            {\n                max_word = word;\n            }\n        }\n \
    \   }\n    return max_word;\n}", "{\n    int max = 0;\n    string max_word = \"\
    \";\n    foreach(word; words)\n    {\n        int count = 0;\n        foreach(c;\
    \ word)\n        {\n            if(!max_word.canFind(c))\n            {\n    \
    \            count++;\n            }\n        }\n        if(count > max)\n   \
    \     {\n            max = count;\n            max_word = word;\n        }\n \
    \   }\n    return max_word;\n}", "{\n    string max_word = \"\";\n    int max_unique\
    \ = 0;\n    foreach(string word; words)\n    {\n        int unique = 0;\n    \
    \    foreach(char c; word)\n        {\n            if(word.count(c) == 1)\n  \
    \              unique++;\n        }\n        if(unique > max_unique)\n       \
    \ {\n            max_unique = unique;\n            max_word = word;\n        }\n\
    \        else if(unique == max_unique)\n        {\n            if(word < max_word)\n\
    \                max_word = word;\n        }\n    }\n    return max_word;\n}",
  "{\n    string max_word = \"\";\n    int max_unique = 0;\n    foreach(string word;\
    \ words) \n    {\n        int unique = 0;\n        foreach(char c; word) \n  \
    \      {\n            if(c !in max_word) \n            {\n                max_word\
    \ ~= c;\n                unique++;\n            }\n        }\n        if(unique\
    \ > max_unique) \n        {\n            max_unique = unique;\n            max_word\
    \ = word;\n        }\n    }\n    return max_word;\n}", "{\n    string max_word\
    \ = \"\";\n    int max_count = 0;\n    foreach(string word; words) \n    {\n \
    \       int count = 0;\n        foreach(char c; word) \n        {\n          \
    \  if(count == 0) \n            {\n                count = 1;\n            }\n\
    \            else if(word[0..count].count(c) == 0) \n            {\n         \
    \       count++;\n            }\n        }\n        if(count > max_count) \n \
    \       {\n            max_count = count;\n            max_word = word;\n    \
    \    }\n        else if(count == max_count) \n        {\n            if(word <\
    \ max_word) \n            {\n                max_word = word;\n            }\n\
    \        }\n    }\n    return max_word;\n}", "{\n    string max_word = \"\";\n\
    \    int max_unique = 0;\n    foreach(word; words) \n    {\n        int unique\
    \ = 0;\n        foreach(char c; word) \n        {\n            if(c !in max_word)\
    \ \n            {\n                unique++;\n                max_word ~= c;\n\
    \            }\n        }\n        if(unique > max_unique) \n        {\n     \
    \       max_unique = unique;\n            max_word = word;\n        }\n    }\n\
    \    return max_word;\n}", "{\n    string max_word;\n    int max_unique = 0;\n\
    \    foreach(word; words)\n    {\n        int unique = 0;\n        foreach(c;\
    \ word)\n        {\n            if(c !in word[0..$-1])\n                unique++;\n\
    \        }\n        if(unique > max_unique)\n        {\n            max_unique\
    \ = unique;\n            max_word = word;\n        }\n    }\n    return max_word;\n\
    }", "{\n    int max = 0;\n    string max_word = \"\";\n    foreach(word; words)\n\
    \    {\n        int num_unique = 0;\n        foreach(char c; word)\n        {\n\
    \            if(c != ' ')\n            {\n                num_unique++;\n    \
    \        }\n        }\n        if(num_unique > max)\n        {\n            max\
    \ = num_unique;\n            max_word = word;\n        }\n    }\n    return max_word;\n\
    }", "{\n    string max_word = \"\";\n    int max_count = 0;\n    foreach(word;\
    \ words)\n    {\n        int count = 0;\n        foreach(c; word)\n        {\n\
    \            if(!max_word.canFind(c))\n            {\n                count++;\n\
    \            }\n        }\n        if(count > max_count)\n        {\n        \
    \    max_count = count;\n            max_word = word;\n        }\n    }\n    return\
    \ max_word;\n}", "{\n    int max = 0;\n    string max_word = \"\";\n    foreach(word;\
    \ words)\n    {\n        int unique_chars = 0;\n        foreach(char c; word)\n\
    \        {\n            if(count(word, c) == 1)\n                unique_chars++;\n\
    \        }\n        if(unique_chars > max)\n        {\n            max = unique_chars;\n\
    \            max_word = word;\n        }\n    }\n    return max_word;\n}", "{\n\
    \    string max_word = \"\";\n    int max_unique = 0;\n    foreach(word; words)\
    \ \n    {\n        int unique = 0;\n        foreach(c; word) \n        {\n   \
    \         if(count(word, c) == 1) \n            {\n                unique++;\n\
    \            }\n        }\n        if(unique > max_unique) \n        {\n     \
    \       max_unique = unique;\n            max_word = word;\n        }\n      \
    \  else if(unique == max_unique) \n        {\n            if(word < max_word)\
    \ \n            {\n                max_word = word;\n            }\n        }\n\
    \    }\n    return max_word;\n}", "{\n    int max = 0;\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        int count = 0;\n        foreach(c;\
    \ word)\n        {\n            if(count == 0)\n            {\n              \
    \  count++;\n            }\n            else\n            {\n                if(word[0..count].canFind(c))\n\
    \                {\n                    continue;\n                }\n       \
    \         else\n                {\n                    count++;\n            \
    \    }\n            }\n        }\n        if(count > max)\n        {\n       \
    \     max = count;\n            result = word;\n        }\n        else if(count\
    \ == max)\n        {\n            if(word < result)\n            {\n         \
    \       result = word;\n            }\n        }\n    }\n    return result;\n}",
  "{\n    string max = \"\";\n    int max_unique = 0;\n    foreach(word; words) \n\
    \    {\n        int unique = 0;\n        foreach(c; word) \n        {\n      \
    \      if(!max.canFind(c)) \n            {\n                unique++;\n      \
    \      }\n        }\n        if(unique > max_unique) \n        {\n           \
    \ max = word;\n            max_unique = unique;\n        }\n    }\n    return\
    \ max;\n}", "{\n    string max_word;\n    int max_count = 0;\n    foreach(word;\
    \ words)\n    {\n        int count = 0;\n        foreach(c; word)\n        {\n\
    \            if(c.countUntil(word) == 1)\n                count++;\n        }\n\
    \        if(count > max_count)\n        {\n            max_count = count;\n  \
    \          max_word = word;\n        }\n    }\n    return max_word;\n}", "{\n\
    \    string max_word = \"\";\n    int max_unique = 0;\n    foreach(word; words)\
    \ \n    {\n        int unique = 0;\n        foreach(c; word) \n        {\n   \
    \         if (word.count(c) == 1) \n            {\n                unique++;\n\
    \            }\n        }\n        if (unique > max_unique) \n        {\n    \
    \        max_unique = unique;\n            max_word = word;\n        }\n     \
    \   else if (unique == max_unique) \n        {\n            max_word = min(max_word,\
    \ word);\n        }\n    }\n    return max_word;\n}", "{\n    string max_word\
    \ = \"\";\n    int max_count = 0;\n    foreach(word; words) \n    {\n        int\
    \ count = 0;\n        foreach(c; word) \n        {\n            if(!max_word.canFind(c))\
    \ \n            {\n                count++;\n            }\n        }\n      \
    \  if(count > max_count) \n        {\n            max_count = count;\n       \
    \     max_word = word;\n        }\n    }\n    return max_word;\n}", "{\n    string\
    \ max_word = \"\";\n    int max_unique = 0;\n    foreach(string word; words)\n\
    \    {\n        int unique = 0;\n        foreach(char c; word)\n        {\n  \
    \          if(c != ' ')\n            {\n                unique++;\n          \
    \  }\n        }\n        if(unique > max_unique)\n        {\n            max_unique\
    \ = unique;\n            max_word = word;\n        }\n    }\n    return max_word;\n\
    }", "{\n    string max_word = \"\";\n    int max_unique = 0;\n    foreach(string\
    \ word; words)\n    {\n        int unique = 0;\n        foreach(char c; word)\n\
    \        {\n            if(word.count(c) == 1)\n                unique++;\n  \
    \      }\n        if(unique > max_unique)\n        {\n            max_unique =\
    \ unique;\n            max_word = word;\n        }\n        else if(unique ==\
    \ max_unique)\n        {\n            if(word < max_word)\n                max_word\
    \ = word;\n        }\n    }\n    return max_word;\n}", "{\n    int max_count =\
    \ 0;\n    string max_word = \"\";\n    foreach(word; words)\n    {\n        int\
    \ count = 0;\n        foreach(c; word)\n        {\n            if(count == 0)\n\
    \            {\n                count = 1;\n            }\n            else\n\
    \            {\n                if(word[0..count].canFind(c))\n              \
    \  {\n                    continue;\n                }\n                else\n\
    \                {\n                    count++;\n                }\n        \
    \    }\n        }\n        if(count > max_count)\n        {\n            max_count\
    \ = count;\n            max_word = word;\n        }\n        else if(count ==\
    \ max_count)\n        {\n            if(word < max_word)\n            {\n    \
    \            max_word = word;\n            }\n        }\n    }\n    return max_word;\n\
    }", "{\n    int max = 0;\n    string result = \"\";\n    foreach(word; words)\n\
    \    {\n        int count = 0;\n        foreach(ch; word)\n        {\n       \
    \     if(count == max)\n            {\n                if(word < result)\n   \
    \             {\n                    result = word;\n                }\n     \
    \       }\n            else if(count > max)\n            {\n                max\
    \ = count;\n                result = word;\n            }\n            count++;\n\
    \        }\n    }\n    return result;\n}", "{\n    int max = 0;\n    string max_word\
    \ = \"\";\n    foreach(string word; words)\n    {\n        int count = 0;\n  \
    \      foreach(char c; word)\n        {\n            if(c != ' ')\n          \
    \  {\n                count++;\n            }\n        }\n        if(count > max)\n\
    \        {\n            max = count;\n            max_word = word;\n        }\n\
    \    }\n    return max_word;\n}", "{\n    auto max = 0;\n    string result = \"\
    \";\n    foreach(word; words)\n    {\n        auto set = new Set!char;\n     \
    \   foreach(ch; word)\n        {\n            set.insert(ch);\n        }\n   \
    \     if(set.length > max)\n        {\n            max = set.length;\n       \
    \     result = word;\n        }\n    }\n    return result;\n}", "{\n    string\
    \ max_word;\n    int max_unique = 0;\n    foreach(word; words)\n    {\n      \
    \  int unique = 0;\n        foreach(ch; word)\n        {\n            if(!ch.canFind(word))\n\
    \                unique++;\n        }\n        if(unique > max_unique)\n     \
    \   {\n            max_unique = unique;\n            max_word = word;\n      \
    \  }\n    }\n    return max_word;\n}", "{\n    string max_word = \"\";\n    int\
    \ max_unique = 0;\n    foreach(word; words)\n    {\n        int unique = 0;\n\
    \        foreach(c; word)\n        {\n            if(word.count(c) == 1)\n   \
    \             unique++;\n        }\n        if(unique > max_unique)\n        {\n\
    \            max_unique = unique;\n            max_word = word;\n        }\n \
    \       else if(unique == max_unique)\n        {\n            if(word < max_word)\n\
    \                max_word = word;\n        }\n    }\n    return max_word;\n}",
  "{\n    int max = 0;\n    string max_word = \"\";\n    foreach(word; words)\n  \
    \  {\n        if(word.length > max)\n        {\n            max = word.length;\n\
    \            max_word = word;\n        }\n    }\n    return max_word;\n}", "{\n\
    \    int max = 0;\n    string result = \"\";\n    foreach(word; words)\n    {\n\
    \        int count = 0;\n        foreach(char c; word)\n        {\n          \
    \  if(c !in result)\n            {\n                count++;\n               \
    \ result ~= c;\n            }\n        }\n        if(count > max)\n        {\n\
    \            max = count;\n            result = word;\n        }\n    }\n    return\
    \ result;\n}", "{\n    string max_word = \"\";\n    int max_unique = 0;\n    foreach(word;\
    \ words) \n    {\n        int unique = 0;\n        foreach(c; word) \n       \
    \ {\n            if(count(word, c) == 1) \n            {\n                unique++;\n\
    \            }\n        }\n        if(unique > max_unique) \n        {\n     \
    \       max_unique = unique;\n            max_word = word;\n        }\n      \
    \  else if(unique == max_unique) \n        {\n            max_word = min(max_word,\
    \ word);\n        }\n    }\n    return max_word;\n}", "{\n    string result =\
    \ \"\";\n    int max = 0;\n    foreach(word; words) \n    {\n        int count\
    \ = 0;\n        foreach(c; word) \n        {\n            if(count == 0) \n  \
    \          {\n                count++;\n            }\n            else \n   \
    \         {\n                if(c != word[count - 1]) \n                {\n  \
    \                  count++;\n                }\n            }\n        }\n   \
    \     if(count > max) \n        {\n            max = count;\n            result\
    \ = word;\n        }\n    }\n    return result;\n}", "{\n    auto max_word = words[0];\n\
    \    auto max_unique = words[0].length;\n    foreach(word; words)\n    {\n   \
    \     auto unique = 0;\n        foreach(c; word)\n        {\n            if(word.count(c)\
    \ == 1)\n            {\n                unique++;\n            }\n        }\n\
    \        if(unique > max_unique)\n        {\n            max_unique = unique;\n\
    \            max_word = word;\n        }\n    }\n    return max_word;\n}", "{\n\
    \    string max_word;\n    int max_count = 0;\n    foreach(word; words) \n   \
    \ {\n        int count = 0;\n        foreach(c; word) \n        {\n          \
    \  if(c !in word[0..$-1]) \n            {\n                count++;\n        \
    \    }\n        }\n        if(count > max_count) \n        {\n            max_count\
    \ = count;\n            max_word = word;\n        }\n    }\n    return max_word;\n\
    }", "{\n    string max = \"\";\n    int max_count = 0;\n    foreach(string word;\
    \ words)\n    {\n        int count = 0;\n        foreach(char c; word)\n     \
    \   {\n            if(c !in max)\n            {\n                count++;\n  \
    \              max ~= c;\n            }\n        }\n        if(count > max_count)\n\
    \        {\n            max_count = count;\n            max = word;\n        }\n\
    \    }\n    return max;\n}", "{\n    string max_word;\n    int max_unique_chars\
    \ = 0;\n    foreach(string word; words) \n    {\n        int unique_chars = 0;\n\
    \        foreach(char c; word) \n        {\n            if(word.count(c) == 1)\
    \ \n            {\n                unique_chars++;\n            }\n        }\n\
    \        if(unique_chars > max_unique_chars) \n        {\n            max_unique_chars\
    \ = unique_chars;\n            max_word = word;\n        }\n    }\n    return\
    \ max_word;\n}", "{\n    string max_word = \"\";\n    int max_unique = 0;\n  \
    \  foreach(string word; words)\n    {\n        int unique = 0;\n        foreach(char\
    \ c; word)\n        {\n            if(word.count(c) == 1)\n                unique++;\n\
    \        }\n        if(unique > max_unique)\n        {\n            max_unique\
    \ = unique;\n            max_word = word;\n        }\n        else if(unique ==\
    \ max_unique)\n        {\n            if(word < max_word)\n                max_word\
    \ = word;\n        }\n    }\n    return max_word;\n}", "{\n    string max_word\
    \ = \"\";\n    int max_unique = 0;\n    foreach(word; words)\n    {\n        int\
    \ unique = 0;\n        foreach(char c; word)\n        {\n            if(c !in\
    \ max_word)\n            {\n                max_word ~= c;\n                unique++;\n\
    \            }\n        }\n        if(unique > max_unique)\n        {\n      \
    \      max_unique = unique;\n            max_word = word;\n        }\n    }\n\
    \    return max_word;\n}", "{\n    string max = \"\";\n    int max_count = 0;\n\
    \    foreach(string word; words)\n    {\n        int count = 0;\n        foreach(char\
    \ c; word)\n        {\n            if(c in max)\n                continue;\n \
    \           else\n                count++;\n        }\n        if(count > max_count)\n\
    \        {\n            max = word;\n            max_count = count;\n        }\n\
    \    }\n    return max;\n}", "{\n    auto max_word = \"\";\n    auto max_unique_chars\
    \ = 0;\n    foreach(word; words)\n    {\n        auto unique_chars = 0;\n    \
    \    foreach(ch; word)\n        {\n            if(!ch.in(max_word))\n        \
    \    {\n                unique_chars++;\n            }\n        }\n        if(unique_chars\
    \ > max_unique_chars)\n        {\n            max_unique_chars = unique_chars;\n\
    \            max_word = word;\n        }\n    }\n    return max_word;\n}", "{\n\
    \    string max_word;\n    int max_unique = 0;\n    foreach(word; words) \n  \
    \  {\n        int unique = 0;\n        foreach(ch; word) \n        {\n       \
    \     if(!ch in max_word) \n            {\n                unique++;\n       \
    \         max_word ~= ch;\n            }\n        }\n        if(unique > max_unique)\
    \ \n        {\n            max_unique = unique;\n            max_word = word;\n\
    \        }\n    }\n    return max_word;\n}", "{\n    int max_unique = 0;\n   \
    \ string max_word = \"\";\n    foreach(word; words)\n    {\n        int unique\
    \ = 0;\n        foreach(c; word)\n        {\n            if(count(word, c) ==\
    \ 1)\n            {\n                unique++;\n            }\n        }\n   \
    \     if(unique > max_unique)\n        {\n            max_unique = unique;\n \
    \           max_word = word;\n        }\n        else if(unique == max_unique)\n\
    \        {\n            if(word < max_word)\n            {\n                max_word\
    \ = word;\n            }\n        }\n    }\n    return max_word;\n}", "{\n   \
    \ int max_len = 0;\n    string max_word = \"\";\n    foreach(word; words)\n  \
    \  {\n        int len = word.length;\n        if(len > max_len)\n        {\n \
    \           max_len = len;\n            max_word = word;\n        }\n    }\n \
    \   return max_word;\n}", "{\n    string max_word;\n    int max_count = 0;\n \
    \   foreach(word; words)\n    {\n        int count = 0;\n        foreach(c; word)\n\
    \        {\n            if(c !in word[0..count])\n            {\n            \
    \    count++;\n            }\n        }\n        if(count > max_count)\n     \
    \   {\n            max_count = count;\n            max_word = word;\n        }\n\
    \    }\n    return max_word;\n}", "{\n    string max_word;\n    int max_unique\
    \ = 0;\n    foreach(word; words)\n    {\n        int unique = 0;\n        foreach(c;\
    \ word)\n        {\n            if(c !in word[0..c])\n                unique++;\n\
    \        }\n        if(unique > max_unique)\n        {\n            max_unique\
    \ = unique;\n            max_word = word;\n        }\n        else if(unique ==\
    \ max_unique)\n        {\n            if(word < max_word)\n                max_word\
    \ = word;\n        }\n    }\n    return max_word;\n}", "{\n    string result =\
    \ \"\";\n    int max = 0;\n    foreach(string word; words)\n    {\n        int\
    \ count = 0;\n        foreach(char c; word)\n        {\n            if(!result.canFind(c))\n\
    \            {\n                count++;\n            }\n        }\n        if(count\
    \ > max)\n        {\n            max = count;\n            result = word;\n  \
    \      }\n    }\n    return result;\n}", "{\n    int max_unique = 0;\n    string\
    \ max_word = \"\";\n    foreach(word; words)\n    {\n        int unique = 0;\n\
    \        foreach(c; word)\n        {\n            if(!max_word.canFind(c))\n \
    \           {\n                unique++;\n            }\n        }\n        if(unique\
    \ > max_unique)\n        {\n            max_unique = unique;\n            max_word\
    \ = word;\n        }\n    }\n    return max_word;\n}", "{\n    // Write your code\
    \ here\n    string max_word = \"\";\n    int max_count = 0;\n    foreach(string\
    \ word; words)\n    {\n        int count = 0;\n        foreach(char c; word)\n\
    \        {\n            if(!max_word.canFind(c))\n            {\n            \
    \    count++;\n            }\n        }\n        if(count > max_count)\n     \
    \   {\n            max_count = count;\n            max_word = word;\n        }\n\
    \    }\n    return max_word;\n}", "{\n    string max = \"\";\n    int max_count\
    \ = 0;\n    foreach(string word; words)\n    {\n        int count = 0;\n     \
    \   foreach(char c; word)\n        {\n            if(!max.canFind(c))\n      \
    \      {\n                count++;\n            }\n        }\n        if(count\
    \ > max_count)\n        {\n            max = word;\n            max_count = count;\n\
    \        }\n    }\n    return max;\n}", "{\n    string max_word;\n    int max_unique\
    \ = 0;\n    foreach(word; words)\n    {\n        int unique_chars = 0;\n     \
    \   foreach(char c; word)\n        {\n            if(word.count(c) == 1)\n   \
    \         {\n                unique_chars++;\n            }\n        }\n     \
    \   if(unique_chars > max_unique)\n        {\n            max_unique = unique_chars;\n\
    \            max_word = word;\n        }\n    }\n    return max_word;\n}", "{\n\
    \    auto max = words[0];\n    foreach(word; words)\n    {\n        if(word.length\
    \ > max.length)\n        {\n            max = word;\n        }\n    }\n    return\
    \ max;\n}", "{\n    string max = \"\";\n    int max_count = 0;\n    foreach(word;\
    \ words)\n    {\n        int count = 0;\n        foreach(c; word)\n        {\n\
    \            if(!max.canFind(c))\n            {\n                count++;\n  \
    \          }\n        }\n        if(count > max_count)\n        {\n          \
    \  max = word;\n            max_count = count;\n        }\n    }\n    return max;\n\
    }", "{\n    int max = 0;\n    string result = \"\";\n    foreach(string word;\
    \ words) \n    {\n        int count = 0;\n        foreach(char c; word) \n   \
    \     {\n            if(count == 0) \n            {\n                count = 1;\n\
    \            }\n            else if(word.count(c) == 1) \n            {\n    \
    \            count++;\n            }\n        }\n        if(count > max) \n  \
    \      {\n            max = count;\n            result = word;\n        }\n  \
    \      else if(count == max) \n        {\n            if(word < result) \n   \
    \         {\n                result = word;\n            }\n        }\n    }\n\
    \    return result;\n}", "{\n    string max_word = \"\";\n    int max_unique =\
    \ 0;\n    foreach(word; words)\n    {\n        int unique = 0;\n        foreach(c;\
    \ word)\n        {\n            if(count(word, c) == 1)\n                unique++;\n\
    \        }\n        if(unique > max_unique)\n        {\n            max_unique\
    \ = unique;\n            max_word = word;\n        }\n        else if(unique ==\
    \ max_unique)\n        {\n            if(word < max_word)\n                max_word\
    \ = word;\n        }\n    }\n    return max_word;\n}", "{\n    int max_count =\
    \ 0;\n    string max_word = \"\";\n    foreach(word; words)\n    {\n        int\
    \ count = 0;\n        foreach(c; word)\n        {\n            if(c in word[0..count])\n\
    \                continue;\n            else\n                count++;\n     \
    \   }\n        if(count > max_count)\n        {\n            max_count = count;\n\
    \            max_word = word;\n        }\n        else if(count == max_count)\n\
    \        {\n            if(word < max_word)\n                max_word = word;\n\
    \        }\n    }\n    return max_word;\n}", "{\n    string max_word;\n    int\
    \ max_unique = 0;\n    foreach(word; words) \n    {\n        int unique = 0;\n\
    \        foreach(c; word) \n        {\n            if(word.count(c) == 1) \n \
    \           {\n                unique++;\n            }\n        }\n        if(unique\
    \ > max_unique) \n        {\n            max_unique = unique;\n            max_word\
    \ = word;\n        }\n        else if(unique == max_unique) \n        {\n    \
    \        if(word < max_word) \n            {\n                max_word = word;\n\
    \            }\n        }\n    }\n    return max_word;\n}", "{\n    string result;\n\
    \    int max_unique = 0;\n    foreach(word; words) \n    {\n        int unique\
    \ = 0;\n        foreach(c; word) \n        {\n            if(word.count(c) ==\
    \ 1) \n            {\n                unique++;\n            }\n        }\n  \
    \      if(unique > max_unique) \n        {\n            max_unique = unique;\n\
    \            result = word;\n        }\n    }\n    return result;\n}", "{\n  \
    \  string max_word;\n    int max_unique = 0;\n    foreach(word; words)\n    {\n\
    \        int unique_chars = 0;\n        foreach(char c; word)\n        {\n   \
    \         if(!max_word.canFind(c))\n            {\n                unique_chars++;\n\
    \            }\n        }\n        if(unique_chars > max_unique)\n        {\n\
    \            max_unique = unique_chars;\n            max_word = word;\n      \
    \  }\n    }\n    return max_word;\n}", "{\n    int max_unique = 0;\n    string\
    \ max_word = \"\";\n    foreach(word; words) \n    {\n        int unique = 0;\n\
    \        foreach(c; word) \n        {\n            if(word.count(c) == 1) \n \
    \           {\n                unique++;\n            }\n        }\n        if(unique\
    \ > max_unique) \n        {\n            max_unique = unique;\n            max_word\
    \ = word;\n        } \n        else if(unique == max_unique) \n        {\n   \
    \         if(word < max_word) \n            {\n                max_word = word;\n\
    \            }\n        }\n    }\n    return max_word;\n}", "{\n    string max_word;\n\
    \    int max_unique = 0;\n    foreach(word; words) \n    {\n        int unique\
    \ = 0;\n        foreach(ch; word) \n        {\n            if(word.count(ch) ==\
    \ 1) \n            {\n                unique++;\n            }\n        }\n  \
    \      if(unique > max_unique) \n        {\n            max_unique = unique;\n\
    \            max_word = word;\n        }\n        else if(unique == max_unique)\
    \ \n        {\n            max_word = min(max_word, word);\n        }\n    }\n\
    \    return max_word;\n}", "{\n    int max_count = 0;\n    string max_word = \"\
    \";\n    foreach(word; words)\n    {\n        int count = 0;\n        foreach(c;\
    \ word)\n        {\n            if(count == 0)\n            {\n              \
    \  count = 1;\n            }\n            else\n            {\n              \
    \  if(c != word[count - 1])\n                {\n                    count++;\n\
    \                }\n            }\n        }\n        if(count > max_count)\n\
    \        {\n            max_count = count;\n            max_word = word;\n   \
    \     }\n        else if(count == max_count)\n        {\n            if(word <\
    \ max_word)\n            {\n                max_word = word;\n            }\n\
    \        }\n    }\n    return max_word;\n}", "{\n    string max_word;\n    int\
    \ max_count = 0;\n    foreach(word; words)\n    {\n        int count = 0;\n  \
    \      foreach(c; word)\n        {\n            if(count == 0)\n            {\n\
    \                count = 1;\n            }\n            else\n            {\n\
    \                if(c != word[count-1])\n                {\n                 \
    \   count++;\n                }\n            }\n        }\n        if(count >\
    \ max_count)\n        {\n            max_count = count;\n            max_word\
    \ = word;\n        }\n    }\n    return max_word;\n}", "{\n    string max_word;\n\
    \    int max_count = 0;\n    foreach(word; words) \n    {\n        int count =\
    \ 0;\n        foreach(c; word) \n        {\n            if(c !in word[0..$-1])\
    \ \n            {\n                count++;\n            }\n        }\n      \
    \  if(count > max_count) \n        {\n            max_count = count;\n       \
    \     max_word = word;\n        }\n    }\n    return max_word;\n}", "{\n    int\
    \ max_count = 0;\n    string max_word = \"\";\n    foreach(string word; words)\
    \ \n    {\n        int count = 0;\n        foreach(char c; word) \n        {\n\
    \            if(count == 0) \n            {\n                count = 1;\n    \
    \        }\n            else \n            {\n                if(word[0..count].count(c)\
    \ == 0) \n                {\n                    count++;\n                }\n\
    \            }\n        }\n        if(count > max_count) \n        {\n       \
    \     max_count = count;\n            max_word = word;\n        }\n        else\
    \ if(count == max_count) \n        {\n            if(word < max_word) \n     \
    \       {\n                max_word = word;\n            }\n        }\n    }\n\
    \    return max_word;\n}", "{\n    string max_word = \"\";\n    int max_count\
    \ = 0;\n    foreach(word; words)\n    {\n        int count = 0;\n        foreach(c;\
    \ word)\n        {\n            if(count == 0)\n            {\n              \
    \  count++;\n            }\n            else\n            {\n                if(word[0..count].canFind(c))\n\
    \                {\n                    continue;\n                }\n       \
    \         else\n                {\n                    count++;\n            \
    \    }\n            }\n        }\n        if(count > max_count)\n        {\n \
    \           max_count = count;\n            max_word = word;\n        }\n    \
    \    else if(count == max_count)\n        {\n            if(word < max_word)\n\
    \            {\n                max_word = word;\n            }\n        }\n \
    \   }\n    return max_word;\n}", "{\n    int max = 0;\n    string max_word = \"\
    \";\n    foreach(string word; words)\n    {\n        int count = 0;\n        foreach(char\
    \ c; word)\n        {\n            if(c != ' ')\n            {\n             \
    \   count++;\n            }\n        }\n        if(count > max)\n        {\n \
    \           max = count;\n            max_word = word;\n        }\n    }\n   \
    \ return max_word;\n}", "{\n    string max_word = \"\";\n    int max_count = 0;\n\
    \    foreach(word; words)\n    {\n        int count = 0;\n        foreach(ch;\
    \ word)\n        {\n            if(!max_word.canFind(ch))\n            {\n   \
    \             count++;\n            }\n        }\n        if(count > max_count)\n\
    \        {\n            max_count = count;\n            max_word = word;\n   \
    \     }\n    }\n    return max_word;\n}", "{\n    if (words.length == 0)\n   \
    \     return \"\";\n    string max = words[0];\n    int max_unique = unique_chars(max);\n\
    \    foreach (string word; words)\n    {\n        int unique = unique_chars(word);\n\
    \        if (unique > max_unique)\n        {\n            max = word;\n      \
    \      max_unique = unique;\n        }\n        else if (unique == max_unique)\n\
    \        {\n            if (word < max)\n                max = word;\n       \
    \ }\n    }\n    return max;\n}", "{\n    string max_word = \"\";\n    int max_unique\
    \ = 0;\n    foreach(word; words)\n    {\n        int unique = 0;\n        foreach(c;\
    \ word)\n        {\n            if(word.count(c) == 1)\n            {\n      \
    \          unique++;\n            }\n        }\n        if(unique > max_unique)\n\
    \        {\n            max_unique = unique;\n            max_word = word;\n \
    \       }\n        else if(unique == max_unique)\n        {\n            if(word\
    \ < max_word)\n            {\n                max_word = word;\n            }\n\
    \        }\n    }\n    return max_word;\n}", "{\n    string max_word = \"\";\n\
    \    int max_unique = 0;\n    foreach(word; words)\n    {\n        int unique\
    \ = 0;\n        foreach(c; word)\n        {\n            if(word.count(c) == 1)\n\
    \                unique++;\n        }\n        if(unique > max_unique)\n     \
    \   {\n            max_unique = unique;\n            max_word = word;\n      \
    \  }\n        else if(unique == max_unique)\n        {\n            if(word <\
    \ max_word)\n                max_word = word;\n        }\n    }\n    return max_word;\n\
    }", "{\n    string max_word = \"\";\n    int max_unique = 0;\n    foreach(word;\
    \ words)\n    {\n        int unique = 0;\n        foreach(ch; word)\n        {\n\
    \            if(!max_word.canFind(ch))\n            {\n                unique++;\n\
    \            }\n        }\n        if(unique > max_unique)\n        {\n      \
    \      max_unique = unique;\n            max_word = word;\n        }\n    }\n\
    \    return max_word;\n}", "{\n    string max_word = \"\";\n    int max_unique\
    \ = 0;\n    foreach(word; words)\n    {\n        int unique = 0;\n        foreach(c;\
    \ word)\n        {\n            if(c !in max_word)\n            {\n          \
    \      unique++;\n                max_word ~= c;\n            }\n        }\n \
    \       if(unique > max_unique)\n        {\n            max_unique = unique;\n\
    \            max_word = word;\n        }\n    }\n    return max_word;\n}", "{\n\
    \    string result = \"\";\n    int max_unique = 0;\n    foreach(string word;\
    \ words) \n    {\n        int unique = 0;\n        foreach(char c; word) \n  \
    \      {\n            if(!result.canFind(c)) \n            {\n               \
    \ unique++;\n            }\n        }\n        if(unique > max_unique) \n    \
    \    {\n            max_unique = unique;\n            result = word;\n       \
    \ }\n    }\n    return result;\n}", "{\n    string max_word;\n    int max_unique\
    \ = 0;\n    foreach(word; words)\n    {\n        int unique = 0;\n        foreach(ch;\
    \ word)\n        {\n            if(word.count(ch) == 1)\n                unique++;\n\
    \        }\n        if(unique > max_unique)\n        {\n            max_unique\
    \ = unique;\n            max_word = word;\n        }\n        else if(unique ==\
    \ max_unique)\n        {\n            if(word < max_word)\n                max_word\
    \ = word;\n        }\n    }\n    return max_word;\n}", "{\n    int max = 0;\n\
    \    string max_word = \"\";\n    foreach(string word; words)\n    {\n       \
    \ int unique_chars = 0;\n        foreach(char c; word)\n        {\n          \
    \  if(word.count(c) == 1)\n            {\n                unique_chars++;\n  \
    \          }\n        }\n        if(unique_chars > max)\n        {\n         \
    \   max = unique_chars;\n            max_word = word;\n        }\n    }\n    return\
    \ max_word;\n}", "{\n    int max = 0;\n    string max_word = \"\";\n    foreach(word;\
    \ words)\n    {\n        int count = 0;\n        foreach(c; word)\n        {\n\
    \            if(!max_word.canFind(c))\n            {\n                count++;\n\
    \            }\n        }\n        if(count > max)\n        {\n            max\
    \ = count;\n            max_word = word;\n        }\n    }\n    return max_word;\n\
    }", "{\n    string max_word = \"\";\n    int max_unique = 0;\n    foreach(word;\
    \ words)\n    {\n        int unique = 0;\n        foreach(c; word)\n        {\n\
    \            if(word.count(c) == 1)\n            {\n                unique++;\n\
    \            }\n        }\n        if(unique > max_unique)\n        {\n      \
    \      max_unique = unique;\n            max_word = word;\n        }\n       \
    \ else if(unique == max_unique)\n        {\n            if(word < max_word)\n\
    \            {\n                max_word = word;\n            }\n        }\n \
    \   }\n    return max_word;\n}", "{\n    string max_word;\n    int max_unique\
    \ = 0;\n    foreach(word; words)\n    {\n        int unique = 0;\n        foreach(c;\
    \ word)\n        {\n            if(word.count(c) == 1)\n                unique++;\n\
    \        }\n        if(unique > max_unique)\n        {\n            max_unique\
    \ = unique;\n            max_word = word;\n        }\n        else if(unique ==\
    \ max_unique)\n        {\n            if(word < max_word)\n                max_word\
    \ = word;\n        }\n    }\n    return max_word;\n}", "{\n    string max_word\
    \ = \"\";\n    int max_count = 0;\n    foreach(word; words) \n    {\n        int\
    \ count = 0;\n        foreach(c; word) \n        {\n            if(count == max_count)\
    \ \n            {\n                if(word < max_word) \n                {\n \
    \                   max_word = word;\n                }\n            }\n     \
    \       else if(count > max_count) \n            {\n                max_word =\
    \ word;\n                max_count = count;\n            }\n            count++;\n\
    \        }\n    }\n    return max_word;\n}", "{\n    auto max = 0;\n    auto max_word\
    \ = \"\";\n    foreach(word; words)\n    {\n        auto unique_chars = new set!char;\n\
    \        foreach(c; word)\n        {\n            unique_chars.insert(c);\n  \
    \      }\n        if(unique_chars.length > max)\n        {\n            max =\
    \ unique_chars.length;\n            max_word = word;\n        }\n        else\
    \ if(unique_chars.length == max)\n        {\n            if(word < max_word)\n\
    \            {\n                max_word = word;\n            }\n        }\n \
    \   }\n    return max_word;\n}", "{\n    string max_word = \"\";\n    int max_unique\
    \ = 0;\n    foreach(string word; words)\n    {\n        int unique = 0;\n    \
    \    foreach(char c; word)\n        {\n            if(!max_word.canFind(c))\n\
    \            {\n                unique++;\n            }\n        }\n        if(unique\
    \ > max_unique)\n        {\n            max_unique = unique;\n            max_word\
    \ = word;\n        }\n    }\n    return max_word;\n}", "{\n    int max_unique\
    \ = 0;\n    string max_word = \"\";\n    foreach(word; words)\n    {\n       \
    \ int unique = 0;\n        foreach(c; word)\n        {\n            if(count(word,\
    \ c) == 1)\n            {\n                unique++;\n            }\n        }\n\
    \        if(unique > max_unique)\n        {\n            max_unique = unique;\n\
    \            max_word = word;\n        }\n        else if(unique == max_unique)\n\
    \        {\n            if(word < max_word)\n            {\n                max_word\
    \ = word;\n            }\n        }\n    }\n    return max_word;\n}", "{\n   \
    \ string max_word = \"\";\n    int max_unique = 0;\n    foreach(word; words)\n\
    \    {\n        int unique = 0;\n        foreach(c; word)\n        {\n       \
    \     if(word.count(c) == 1)\n            {\n                unique++;\n     \
    \       }\n        }\n        if(unique > max_unique)\n        {\n           \
    \ max_unique = unique;\n            max_word = word;\n        }\n        else\
    \ if(unique == max_unique)\n        {\n            if(word < max_word)\n     \
    \       {\n                max_word = word;\n            }\n        }\n    }\n\
    \    return max_word;\n}", "{\n    string max_word;\n    int max_unique = 0;\n\
    \    foreach(word; words) \n    {\n        int unique = 0;\n        foreach(ch;\
    \ word) \n        {\n            if(!ch in max_word) \n            {\n       \
    \         max_word ~= ch;\n                unique++;\n            }\n        }\n\
    \        if(unique > max_unique) \n        {\n            max_unique = unique;\n\
    \            max_word = word;\n        }\n    }\n    return max_word;\n}", "{\n\
    \    string result = \"\";\n    int max_unique = 0;\n    foreach(word; words)\n\
    \    {\n        int unique = 0;\n        foreach(c; word)\n        {\n       \
    \     if(word.count(c) == 1)\n            {\n                unique++;\n     \
    \       }\n        }\n        if(unique > max_unique)\n        {\n           \
    \ max_unique = unique;\n            result = word;\n        }\n        else if(unique\
    \ == max_unique)\n        {\n            if(word < result)\n            {\n  \
    \              result = word;\n            }\n        }\n    }\n    return result;\n\
    }", "{\n    string max_word = \"\";\n    int max_count = 0;\n    foreach(string\
    \ word; words)\n    {\n        int count = 0;\n        foreach(char c; word)\n\
    \        {\n            if(!max_word.canFind(c))\n            {\n            \
    \    count++;\n            }\n        }\n        if(count > max_count)\n     \
    \   {\n            max_count = count;\n            max_word = word;\n        }\n\
    \    }\n    return max_word;\n}", "{\n    string max_word = \"\";\n    int max_unique\
    \ = 0;\n    foreach(string word; words)\n    {\n        int unique = 0;\n    \
    \    foreach(char c; word)\n        {\n            if(word.count(c) == 1)\n  \
    \              unique++;\n        }\n        if(unique > max_unique)\n       \
    \ {\n            max_unique = unique;\n            max_word = word;\n        }\n\
    \        else if(unique == max_unique)\n        {\n            if(word < max_word)\n\
    \                max_word = word;\n        }\n    }\n    return max_word;\n}",
  "{\n    string max_word = \"\";\n    int max_unique = 0;\n    foreach(word; words)\n\
    \    {\n        int unique = 0;\n        foreach(c; word)\n        {\n       \
    \     if(word.count(c) == 1)\n                unique++;\n        }\n        if(unique\
    \ > max_unique)\n        {\n            max_unique = unique;\n            max_word\
    \ = word;\n        }\n        else if(unique == max_unique)\n        {\n     \
    \       if(word < max_word)\n                max_word = word;\n        }\n   \
    \ }\n    return max_word;\n}", "{\n    string max_word = \"\";\n    int max_unique\
    \ = 0;\n    foreach(string word; words)\n    {\n        int unique = 0;\n    \
    \    foreach(char c; word)\n        {\n            if(word.count(c) == 1)\n  \
    \              unique++;\n        }\n        if(unique > max_unique)\n       \
    \ {\n            max_unique = unique;\n            max_word = word;\n        }\n\
    \        else if(unique == max_unique)\n        {\n            if(word < max_word)\n\
    \                max_word = word;\n        }\n    }\n    return max_word;\n}",
  "{\n    string max_word;\n    int max_count = 0;\n    foreach(word; words)\n   \
    \ {\n        int count = 0;\n        foreach(c; word)\n        {\n           \
    \ if(!c.canFindIn(word[0..$-1]))\n                count++;\n        }\n      \
    \  if(count > max_count)\n        {\n            max_count = count;\n        \
    \    max_word = word;\n        }\n    }\n    return max_word;\n}", "{\n    int\
    \ max = 0;\n    string max_word = \"\";\n    foreach(word; words) \n    {\n  \
    \      int count = 0;\n        foreach(c; word) \n        {\n            if(!max_word.canFind(c))\
    \ \n            {\n                count++;\n            }\n        }\n      \
    \  if(count > max) \n        {\n            max = count;\n            max_word\
    \ = word;\n        }\n    }\n    return max_word;\n}", "{\n    string max_word\
    \ = \"\";\n    int max_unique = 0;\n    foreach(string word; words) \n    {\n\
    \        int unique = 0;\n        foreach(char c; word) \n        {\n        \
    \    if(word.count(c) == 1) \n            {\n                unique++;\n     \
    \       }\n        }\n        if(unique > max_unique) \n        {\n          \
    \  max_unique = unique;\n            max_word = word;\n        }\n        else\
    \ if(unique == max_unique) \n        {\n            max_word = min(max_word, word);\n\
    \        }\n    }\n    return max_word;\n}", "{\n    string max_word = \"\";\n\
    \    int max_unique = 0;\n    foreach(word; words) \n    {\n        int unique\
    \ = 0;\n        foreach(c; word) \n        {\n            if(word.count(c) ==\
    \ 1) \n            {\n                unique++;\n            }\n        }\n  \
    \      if(unique > max_unique) \n        {\n            max_unique = unique;\n\
    \            max_word = word;\n        }\n        else if(unique == max_unique)\
    \ \n        {\n            if(word < max_word) \n            {\n             \
    \   max_word = word;\n            }\n        }\n    }\n    return max_word;\n}",
  "{\n    string max = words[0];\n    foreach(string word; words)\n    {\n       \
    \ if(word.length > max.length)\n        {\n            max = word;\n        }\n\
    \    }\n    return max;\n}", "{\n    string max_word = \"\";\n    int max_unique\
    \ = 0;\n    foreach(string word; words) \n    {\n        int unique = 0;\n   \
    \     foreach(char c; word) \n        {\n            if(!max_word.canFind(c))\
    \ \n            {\n                unique++;\n            }\n        }\n     \
    \   if(unique > max_unique) \n        {\n            max_unique = unique;\n  \
    \          max_word = word;\n        }\n    }\n    return max_word;\n}", "{\n\
    \    int max = 0;\n    string max_word = \"\";\n    foreach(word; words)\n   \
    \ {\n        int unique = 0;\n        foreach(char c; word)\n        {\n     \
    \       if(word.count(c) == 1)\n                unique++;\n        }\n       \
    \ if(unique > max)\n        {\n            max = unique;\n            max_word\
    \ = word;\n        }\n    }\n    return max_word;\n}", "{\n    string max = \"\
    \";\n    int max_unique = 0;\n    foreach(word; words)\n    {\n        int unique\
    \ = 0;\n        foreach(ch; word)\n        {\n            if(count(word, ch) ==\
    \ 1)\n                unique++;\n        }\n        if(unique > max_unique)\n\
    \        {\n            max = word;\n            max_unique = unique;\n      \
    \  }\n        else if(unique == max_unique)\n        {\n            if(word <\
    \ max)\n                max = word;\n        }\n    }\n    return max;\n}", "{\n\
    \    string max_word = \"\";\n    int max_unique = 0;\n    foreach(word; words)\n\
    \    {\n        int unique = 0;\n        foreach(c; word)\n        {\n       \
    \     if(word.count(c) == 1)\n            {\n                unique++;\n     \
    \       }\n        }\n        if(unique > max_unique)\n        {\n           \
    \ max_unique = unique;\n            max_word = word;\n        }\n        else\
    \ if(unique == max_unique)\n        {\n            if(word < max_word)\n     \
    \       {\n                max_word = word;\n            }\n        }\n    }\n\
    \    return max_word;\n}", "{\n    string max_word = \"\";\n    int max_count\
    \ = 0;\n    foreach(word; words) \n    {\n        int count = 0;\n        foreach(c;\
    \ word) \n        {\n            if(!max_word.canFind(c)) \n            {\n  \
    \              count++;\n            }\n        }\n        if(count > max_count)\
    \ \n        {\n            max_count = count;\n            max_word = word;\n\
    \        }\n    }\n    return max_word;\n}", "{\n    int max = 0;\n    string\
    \ result = \"\";\n    foreach(word; words)\n    {\n        int count = 0;\n  \
    \      foreach(c; word)\n        {\n            if(count == 0)\n            {\n\
    \                count++;\n            }\n            else\n            {\n  \
    \              if(word[0..count].canFind(c))\n                {\n            \
    \        continue;\n                }\n                else\n                {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \       if(count > max)\n        {\n            max = count;\n            result\
    \ = word;\n        }\n        else if(count == max)\n        {\n            if(word\
    \ < result)\n            {\n                result = word;\n            }\n  \
    \      }\n    }\n    return result;\n}", "{\n    int max = 0;\n    string result\
    \ = \"\";\n    foreach(word; words)\n    {\n        int count = 0;\n        foreach(char\
    \ c; word)\n        {\n            if(c in word[0..count])\n                continue;\n\
    \            count++;\n        }\n        if(count > max)\n        {\n       \
    \     max = count;\n            result = word;\n        }\n    }\n    return result;\n\
    }", "{\n    int max_unique = 0;\n    string result = \"\";\n    foreach(word;\
    \ words)\n    {\n        int unique = 0;\n        foreach(c; word)\n        {\n\
    \            if(count(word, c) == 1)\n                unique++;\n        }\n \
    \       if(unique > max_unique)\n        {\n            max_unique = unique;\n\
    \            result = word;\n        }\n        else if(unique == max_unique)\n\
    \        {\n            if(word < result)\n                result = word;\n  \
    \      }\n    }\n    return result;\n}", "{\n    string max_word = \"\";\n   \
    \ int max_unique = 0;\n    foreach(word; words) \n    {\n        int unique =\
    \ 0;\n        foreach(char c; word) \n        {\n            if(c !in max_word)\
    \ \n            {\n                max_word ~= c;\n                unique++;\n\
    \            }\n        }\n        if(unique > max_unique) \n        {\n     \
    \       max_unique = unique;\n            max_word = word;\n        }\n    }\n\
    \    return max_word;\n}", "{\n    string max_word = \"\";\n    int max_count\
    \ = 0;\n    foreach(string word; words) \n    {\n        int count = 0;\n    \
    \    foreach(char c; word) \n        {\n            if(count == max_count) \n\
    \            {\n                if(word < max_word) \n                {\n    \
    \                max_word = word;\n                }\n            }\n        \
    \    else if(count > max_count) \n            {\n                max_word = word;\n\
    \                max_count = count;\n            }\n            count++;\n   \
    \     }\n    }\n    return max_word;\n}", "{\n    string max = words[0];\n   \
    \ foreach(string word; words)\n    {\n        if(word.length > max.length)\n \
    \       {\n            max = word;\n        }\n    }\n    return max;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
