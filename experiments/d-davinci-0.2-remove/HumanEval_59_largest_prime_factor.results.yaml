language: d
name: HumanEval_59_largest_prime_factor
results:
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime = 1;\n    long i = 2;\n    while (i <= n) \n\
    \    {\n        if (n % i == 0) \n        {\n            largest_prime = i;\n\
    \            n /= i;\n        } \n        else \n        {\n            i++;\n\
    \        }\n    }\n    return largest_prime;\n}\nunittest\n{\n    alias candidate\
    \ = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L)\
    \ == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n\
    \    assert(candidate(13195L) == 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164562
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long i = 2;\n    while (i <= n) \n    {\n        if (n % i == 0)\
    \ \n        {\n            n /= i;\n        }\n        else \n        {\n    \
    \        i++;\n        }\n    }\n    return i;\n}\nunittest\n{\n    alias candidate\
    \ = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L)\
    \ == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n\
    \    assert(candidate(13195L) == 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164562
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime_factor = 0;\n    long i = 2;\n    while (i <=\
    \ n) {\n        if (n % i == 0) {\n            n /= i;\n            largest_prime_factor\
    \ = i;\n        } else {\n            i++;\n        }\n    }\n    return largest_prime_factor;\n\
    }\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L)\
    \ == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n\
    \    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164562
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest = 0;\n    long divisor = 2;\n    while (n > 1) \n \
    \   {\n        while (n % divisor == 0) \n        {\n            largest = divisor;\n\
    \            n /= divisor;\n        }\n        divisor++;\n    }\n    return largest;\n\
    }\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L)\
    \ == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n\
    \    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164562
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest = 1;\n    foreach (i; 2..n)\n    {\n        if (n %\
    \ i == 0)\n        {\n            largest = i;\n            n /= i;\n        }\n\
    \    }\n    return largest;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\
    \n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L)\
    \ == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) ==\
    \ 29L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpn9w3ft81.d(25): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d9d]

    ??:? void tmpn9w3ft81.__unittest_L20_C1() [0x427aa9]

    ??:? void tmpn9w3ft81.__modtest() [0x427b20]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bac3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a956]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fae9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff98]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa75]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a92d]

    ??:? runModuleUnitTests [0x42b899]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281ec]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164562
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime_factor = 1;\n    long i = 2;\n    while (i <=\
    \ n) \n    {\n        if (n % i == 0) \n        {\n            largest_prime_factor\
    \ = i;\n            n /= i;\n        } \n        else \n        {\n          \
    \  i += 1;\n        }\n    }\n    return largest_prime_factor;\n}\nunittest\n\
    {\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) ==\
    \ 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n\
    \    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164562
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest = 0;\n    long i = 2;\n    while (i <= n) \n    {\n\
    \        if (n % i == 0) \n        {\n            largest = i;\n            n\
    \ /= i;\n        } \n        else \n        {\n            i++;\n        }\n \
    \   }\n    return largest;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\
    \n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L)\
    \ == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) ==\
    \ 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164562
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_factor = 1;\n    long i = 2;\n    while (i <= n) \n\
    \    {\n        if (n % i == 0) \n        {\n            largest_factor = i;\n\
    \            n /= i;\n        } \n        else \n        {\n            i++;\n\
    \        }\n    }\n    return largest_factor;\n}\nunittest\n{\n    alias candidate\
    \ = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L)\
    \ == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n\
    \    assert(candidate(13195L) == 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164562
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime_factor = 0;\n    long i = 2;\n    while (i <=\
    \ n) \n    {\n        if (n % i == 0) \n        {\n            largest_prime_factor\
    \ = i;\n            n /= i;\n        } \n        else \n        {\n          \
    \  i++;\n        }\n    }\n    return largest_prime_factor;\n}\nunittest\n{\n\
    \    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n\
    \    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L)\
    \ == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164562
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest = 0;\n    long i = 2;\n    while (i <= n) \n    {\n\
    \        if (n % i == 0) \n        {\n            largest = i;\n            n\
    \ /= i;\n        } \n        else \n        {\n            i++;\n        }\n \
    \   }\n    return largest;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\
    \n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L)\
    \ == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) ==\
    \ 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164562
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest = 0;\n    long i = 2;\n    while (i <= n) \n    {\n\
    \        if (n % i == 0) \n        {\n            largest = i;\n            n\
    \ /= i;\n        } \n        else \n        {\n            i++;\n        }\n \
    \   }\n    return largest;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\
    \n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L)\
    \ == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) ==\
    \ 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164562
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest = 0;\n    long i = 2;\n    while (i <= n) \n    {\n\
    \        if (n % i == 0) \n        {\n            largest = i;\n            n\
    \ /= i;\n        } \n        else \n        {\n            i++;\n        }\n \
    \   }\n    return largest;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\
    \n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L)\
    \ == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) ==\
    \ 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164562
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_factor = 1;\n    long factor = 2;\n    while (n > 1)\
    \ {\n        if (n % factor == 0) {\n            largest_factor = factor;\n  \
    \          n /= factor;\n            while (n % factor == 0) {\n             \
    \   n /= factor;\n            }\n        }\n        factor = factor + 1;\n   \
    \ }\n    return largest_factor;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\
    \n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L)\
    \ == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) ==\
    \ 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164562
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest = 0;\n    long i = 2;\n    while (i <= n) \n    {\n\
    \        if (n % i == 0) \n        {\n            largest = i;\n            n\
    \ /= i;\n        } \n        else \n        {\n            i++;\n        }\n \
    \   }\n    return largest;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\
    \n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L)\
    \ == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) ==\
    \ 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164562
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest = 1;\n    foreach(i; 2..n) \n    {\n        if (n %\
    \ i == 0) \n        {\n            if (isPrime(i)) \n            {\n         \
    \       largest = i;\n            }\n        }\n    }\n    return largest;\n}\n\
    unittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L)\
    \ == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n\
    \    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpy6btos02.d(14): Error: undefined identifier `isPrime`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy6btos02.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164562
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest = 0;\n    long i = 2;\n    while (i <= n) \n    {\n\
    \        if (n % i == 0) \n        {\n            largest = i;\n            n\
    \ /= i;\n        } \n        else \n        {\n            i++;\n        }\n \
    \   }\n    return largest;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\
    \n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L)\
    \ == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) ==\
    \ 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164562
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime = 0;\n    long i = 2;\n    while (i <= n) \n\
    \    {\n        if (n % i == 0) \n        {\n            largest_prime = i;\n\
    \            n /= i;\n        } \n        else \n        {\n            i++;\n\
    \        }\n    }\n    return largest_prime;\n}\nunittest\n{\n    alias candidate\
    \ = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L)\
    \ == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n\
    \    assert(candidate(13195L) == 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164562
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest = 0;\n    foreach(i; 2..n)\n    {\n        if(n % i\
    \ == 0)\n        {\n            if(isPrime(i))\n            {\n              \
    \  largest = i;\n            }\n        }\n    }\n    return largest;\n}\nunittest\n\
    {\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) ==\
    \ 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n\
    \    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpg_7257me.d(14): Error: undefined identifier `isPrime`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg_7257me.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164562
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest = 0;\n    long i = 2;\n    while (i <= n) \n    {\n\
    \        if (n % i == 0) \n        {\n            largest = i;\n            n\
    \ /= i;\n        } \n        else \n        {\n            i++;\n        }\n \
    \   }\n    return largest;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\
    \n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L)\
    \ == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) ==\
    \ 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164562
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime_factor = 0;\n    long i = 2;\n    while (i <=\
    \ n) \n    {\n        if (n % i == 0) \n        {\n            largest_prime_factor\
    \ = i;\n            n /= i;\n        } \n        else \n        {\n          \
    \  i += 1;\n        }\n    }\n    return largest_prime_factor;\n}\nunittest\n\
    {\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) ==\
    \ 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n\
    \    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164562
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_factor = 1;\n    long i = 2;\n    while (i <= n) \n\
    \    {\n        if (n % i == 0) \n        {\n            largest_factor = i;\n\
    \            n /= i;\n        } \n        else \n        {\n            i++;\n\
    \        }\n    }\n    return largest_factor;\n}\nunittest\n{\n    alias candidate\
    \ = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L)\
    \ == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n\
    \    assert(candidate(13195L) == 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164562
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime_factor = 0;\n    long i = 2;\n    while (i <=\
    \ n) \n    {\n        if (n % i == 0) \n        {\n            largest_prime_factor\
    \ = i;\n            n /= i;\n        } \n        else \n        {\n          \
    \  i++;\n        }\n    }\n    return largest_prime_factor;\n}\nunittest\n{\n\
    \    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n\
    \    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L)\
    \ == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164562
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime = 0;\n    long i = 2;\n    while (i <= n) \n\
    \    {\n        if (n % i == 0) \n        {\n            largest_prime = i;\n\
    \            n /= i;\n        } \n        else \n        {\n            i++;\n\
    \        }\n    }\n    return largest_prime;\n}\nunittest\n{\n    alias candidate\
    \ = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L)\
    \ == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n\
    \    assert(candidate(13195L) == 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164562
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest = 1;\n    long i = 2;\n    while (i <= n) {\n     \
    \   if (n % i == 0) {\n            largest = i;\n            n /= i;\n       \
    \ }\n        else {\n            i++;\n        }\n    }\n    return largest;\n\
    }\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L)\
    \ == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n\
    \    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164562
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest = 0;\n    long i = 2;\n    while (i <= n) \n    {\n\
    \        if (n % i == 0) \n        {\n            largest = i;\n            n\
    \ /= i;\n        } \n        else \n        {\n            i++;\n        }\n \
    \   }\n    return largest;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\
    \n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L)\
    \ == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) ==\
    \ 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164562
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long i = 2;\n    while (i <= n) {\n        if (n % i == 0) {\n \
    \           n /= i;\n        } else {\n            i++;\n        }\n    }\n  \
    \  return i;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n\
    \    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L)\
    \ == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) ==\
    \ 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164562
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest = 0;\n    long i = 2;\n    while (i <= n) \n    {\n\
    \        if (n % i == 0) \n        {\n            largest = i;\n            n\
    \ /= i;\n        } \n        else \n        {\n            i++;\n        }\n \
    \   }\n    return largest;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\
    \n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L)\
    \ == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) ==\
    \ 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164562
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime = 0;\n    long i = 2;\n    while (i <= n) \n\
    \    {\n        if (n % i == 0) \n        {\n            largest_prime = i;\n\
    \            n /= i;\n        } \n        else \n        {\n            i++;\n\
    \        }\n    }\n    return largest_prime;\n}\nunittest\n{\n    alias candidate\
    \ = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L)\
    \ == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n\
    \    assert(candidate(13195L) == 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164562
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime = 0;\n    long i = 2;\n    while (i <= n) {\n\
    \        if (n % i == 0) {\n            n /= i;\n            largest_prime = i;\n\
    \        } else {\n            i++;\n        }\n    }\n    return largest_prime;\n\
    }\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L)\
    \ == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n\
    \    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164562
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest = 0;\n    long i = 2;\n    while (i <= n) \n    {\n\
    \        if (n % i == 0) \n        {\n            largest = i;\n            n\
    \ /= i;\n        } \n        else \n        {\n            i++;\n        }\n \
    \   }\n    return largest;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\
    \n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L)\
    \ == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) ==\
    \ 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164562
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime_factor = 0;\n    long max_factor = cast(long)sqrt(n);\n\
    \    foreach(i; 2..max_factor) \n    {\n        if(n % i == 0) \n        {\n \
    \           if(is_prime(i)) \n            {\n                largest_prime_factor\
    \ = i;\n            }\n        }\n    }\n    return largest_prime_factor;\n}\n\
    unittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L)\
    \ == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n\
    \    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0_iqaqtg.d(10): Error: `std.math.sqrt` called with argument types
    `(long)` matches both:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float
    x)`

    and:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real
    x)`

    /tmp/tmp0_iqaqtg.d(15): Error: undefined identifier `is_prime`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0_iqaqtg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164562
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime_factor = 0;\n    long i = 2;\n    while (i <=\
    \ n) {\n        if (n % i == 0) {\n            largest_prime_factor = i;\n   \
    \         n /= i;\n        }\n        else {\n            i++;\n        }\n  \
    \  }\n    return largest_prime_factor;\n}\nunittest\n{\n    alias candidate =\
    \ largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L)\
    \ == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n\
    \    assert(candidate(13195L) == 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164562
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_factor = 0;\n    long i = 2;\n    while (i <= n) {\n\
    \        if (n % i == 0) {\n            largest_factor = i;\n            n /=\
    \ i;\n        } else {\n            i++;\n        }\n    }\n    return largest_factor;\n\
    }\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L)\
    \ == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n\
    \    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164562
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest = 0;\n    foreach(i; 2 .. n)\n    {\n        if (n\
    \ % i == 0)\n        {\n            if (is_prime(i))\n            {\n        \
    \        largest = i;\n            }\n        }\n    }\n    return largest;\n\
    }\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L)\
    \ == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n\
    \    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpi5_zsm9l.d(14): Error: undefined identifier `is_prime`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi5_zsm9l.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164562
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_factor = 1;\n    long i = 2;\n    while (i <= n) \n\
    \    {\n        if (n % i == 0) \n        {\n            largest_factor = i;\n\
    \            n /= i;\n        } \n        else \n        {\n            i++;\n\
    \        }\n    }\n    return largest_factor;\n}\nunittest\n{\n    alias candidate\
    \ = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L)\
    \ == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n\
    \    assert(candidate(13195L) == 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164562
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime = 0;\n    long i = 2;\n    while (i <= n) \n\
    \    {\n        if (n % i == 0) \n        {\n            largest_prime = i;\n\
    \            n /= i;\n        } \n        else \n        {\n            i++;\n\
    \        }\n    }\n    return largest_prime;\n}\nunittest\n{\n    alias candidate\
    \ = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L)\
    \ == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n\
    \    assert(candidate(13195L) == 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164562
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime_factor = 0;\n    long i = 2;\n    while (i <=\
    \ n) \n    {\n        if (n % i == 0) \n        {\n            largest_prime_factor\
    \ = i;\n            n /= i;\n        } \n        else \n        {\n          \
    \  i += 1;\n        }\n    }\n    return largest_prime_factor;\n}\nunittest\n\
    {\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) ==\
    \ 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n\
    \    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164562
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime_factor = 1;\n    long i = 2;\n    while (i <=\
    \ n) \n    {\n        if (n % i == 0) \n        {\n            largest_prime_factor\
    \ = i;\n            n /= i;\n        } \n        else \n        {\n          \
    \  i++;\n        }\n    }\n    return largest_prime_factor;\n}\nunittest\n{\n\
    \    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n\
    \    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L)\
    \ == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164562
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime = 0;\n    long i = 2;\n    while (i <= n) \n\
    \    {\n        if (n % i == 0) \n        {\n            largest_prime = i;\n\
    \            n /= i;\n        } \n        else \n        {\n            i++;\n\
    \        }\n    }\n    return largest_prime;\n}\nunittest\n{\n    alias candidate\
    \ = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L)\
    \ == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n\
    \    assert(candidate(13195L) == 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164562
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_factor = 1;\n    long factor = 2;\n    while (n > 1)\
    \ \n    {\n        if (n % factor == 0) \n        {\n            largest_factor\
    \ = factor;\n            n /= factor;\n            while (n % factor == 0) \n\
    \            {\n                n /= factor;\n            }\n        }\n     \
    \   factor++;\n    }\n    return largest_factor;\n}\nunittest\n{\n    alias candidate\
    \ = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L)\
    \ == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n\
    \    assert(candidate(13195L) == 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164562
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime = 0;\n    long i = 2;\n    while (i <= n) \n\
    \    {\n        if (n % i == 0) \n        {\n            largest_prime = i;\n\
    \            n /= i;\n        } \n        else \n        {\n            i++;\n\
    \        }\n    }\n    return largest_prime;\n}\nunittest\n{\n    alias candidate\
    \ = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L)\
    \ == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n\
    \    assert(candidate(13195L) == 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164562
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime = 0;\n    long i = 2;\n    while (i <= n) \n\
    \    {\n        if (n % i == 0) \n        {\n            largest_prime = i;\n\
    \            n /= i;\n        } \n        else \n        {\n            i++;\n\
    \        }\n    }\n    return largest_prime;\n}\nunittest\n{\n    alias candidate\
    \ = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L)\
    \ == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n\
    \    assert(candidate(13195L) == 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164562
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime = 1;\n    long i = 2;\n    while (i <= n) \n\
    \    {\n        if (n % i == 0) \n        {\n            largest_prime = i;\n\
    \            n /= i;\n        } \n        else \n        {\n            i++;\n\
    \        }\n    }\n    return largest_prime;\n}\nunittest\n{\n    alias candidate\
    \ = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L)\
    \ == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n\
    \    assert(candidate(13195L) == 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164562
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest = 0;\n    long i = 2;\n    while (i <= n) \n    {\n\
    \        if (n % i == 0) \n        {\n            largest = i;\n            n\
    \ /= i;\n        } \n        else \n        {\n            i++;\n        }\n \
    \   }\n    return largest;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\
    \n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L)\
    \ == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) ==\
    \ 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164562
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_factor = 1;\n    long i = 2;\n    while (i <= n) \n\
    \    {\n        if (n % i == 0) \n        {\n            largest_factor = i;\n\
    \            n /= i;\n        } \n        else \n        {\n            i++;\n\
    \        }\n    }\n    return largest_factor;\n}\nunittest\n{\n    alias candidate\
    \ = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L)\
    \ == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n\
    \    assert(candidate(13195L) == 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164562
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime_factor = 0;\n    long i = 2;\n    while (n >\
    \ 1) \n    {\n        if (n % i == 0) \n        {\n            largest_prime_factor\
    \ = i;\n            n /= i;\n            while (n % i == 0) \n            {\n\
    \                n /= i;\n            }\n        }\n        i++;\n    }\n    return\
    \ largest_prime_factor;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\
    \n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L)\
    \ == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) ==\
    \ 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164562
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime = 1;\n    foreach (i; 2 .. n) \n    {\n     \
    \   if (n % i == 0) \n        {\n            largest_prime = i;\n            n\
    \ /= i;\n        }\n    }\n    return largest_prime;\n}\nunittest\n{\n    alias\
    \ candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n   \
    \ assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L)\
    \ == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpay118fzf.d(25): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d9d]

    ??:? void tmpay118fzf.__unittest_L20_C1() [0x427aa9]

    ??:? void tmpay118fzf.__modtest() [0x427b20]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bac3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a956]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fae9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff98]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa75]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a92d]

    ??:? runModuleUnitTests [0x42b899]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281ec]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164562
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_factor = 1;\n    long i = 2;\n    while (i <= n) \n\
    \    {\n        if (n % i == 0) \n        {\n            largest_factor = i;\n\
    \            n /= i;\n        } \n        else \n        {\n            i++;\n\
    \        }\n    }\n    return largest_factor;\n}\nunittest\n{\n    alias candidate\
    \ = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L)\
    \ == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n\
    \    assert(candidate(13195L) == 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164562
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime_factor = 1;\n    long i = 2;\n    while (i <=\
    \ n) \n    {\n        if (n % i == 0) \n        {\n            largest_prime_factor\
    \ = i;\n            n /= i;\n        }\n        else \n        {\n           \
    \ i++;\n        }\n    }\n    return largest_prime_factor;\n}\nunittest\n{\n \
    \   alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n\
    \    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L)\
    \ == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164562
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest = 0;\n    long i = 2;\n    while (i <= n) \n    {\n\
    \        if (n % i == 0) \n        {\n            largest = i;\n            n\
    \ /= i;\n        }\n        else \n        {\n            i++;\n        }\n  \
    \  }\n    return largest;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\
    \n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L)\
    \ == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) ==\
    \ 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164562
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest = 0;\n    long i = 2;\n    while (i <= n) \n    {\n\
    \        if (n % i == 0) \n        {\n            largest = i;\n            n\
    \ /= i;\n        } \n        else \n        {\n            i++;\n        }\n \
    \   }\n    return largest;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\
    \n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L)\
    \ == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) ==\
    \ 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164562
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime = 0;\n    long i = 2;\n    while (i <= n) {\n\
    \        if (n % i == 0) {\n            largest_prime = i;\n            n /= i;\n\
    \        } else {\n            i++;\n        }\n    }\n    return largest_prime;\n\
    }\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L)\
    \ == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n\
    \    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164562
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime = 0;\n    long i = 2;\n    while (i <= n) \n\
    \    {\n        if (n % i == 0) \n        {\n            largest_prime = i;\n\
    \            n /= i;\n        } \n        else \n        {\n            i++;\n\
    \        }\n    }\n    return largest_prime;\n}\nunittest\n{\n    alias candidate\
    \ = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L)\
    \ == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n\
    \    assert(candidate(13195L) == 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164562
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest = 0;\n    long i = 2;\n    while (i <= n) \n    {\n\
    \        if (n % i == 0) \n        {\n            largest = i;\n            n\
    \ /= i;\n        } \n        else \n        {\n            i++;\n        }\n \
    \   }\n    return largest;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\
    \n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L)\
    \ == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) ==\
    \ 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164562
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_factor = 0;\n    long d = 2;\n    while (n > 1) \n\
    \    {\n        while (n % d == 0) \n        {\n            largest_factor = d;\n\
    \            n /= d;\n        }\n        d = d + 1;\n        if (d*d > n) \n \
    \       {\n            if (n > 1) \n            {\n                largest_factor\
    \ = n;\n            }\n            break;\n        }\n    }\n    return largest_factor;\n\
    }\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L)\
    \ == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n\
    \    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164562
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest = 0;\n    long i = 2;\n    while (i <= n) \n    {\n\
    \        if (n % i == 0) \n        {\n            largest = i;\n            n\
    \ /= i;\n        } \n        else \n        {\n            i++;\n        }\n \
    \   }\n    return largest;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\
    \n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L)\
    \ == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) ==\
    \ 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164562
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime = 1;\n    long i = 2;\n    while (i <= n) \n\
    \    {\n        if (n % i == 0) \n        {\n            largest_prime = i;\n\
    \            n /= i;\n        } \n        else \n        {\n            i++;\n\
    \        }\n    }\n    return largest_prime;\n}\nunittest\n{\n    alias candidate\
    \ = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L)\
    \ == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n\
    \    assert(candidate(13195L) == 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164562
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest = 0;\n    for (long i = 2; i <= n; i++) \n    {\n \
    \       if (n % i == 0) \n        {\n            largest = i;\n            n /=\
    \ i;\n            i = 1;\n        }\n    }\n    return largest;\n}\nunittest\n\
    {\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) ==\
    \ 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n\
    \    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164562
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long max = 0;\n    long i = 2;\n    while (i <= n) \n    {\n   \
    \     if (n % i == 0) \n        {\n            max = i;\n            n /= i;\n\
    \        } \n        else \n        {\n            i++;\n        }\n    }\n  \
    \  return max;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n\
    \    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L)\
    \ == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) ==\
    \ 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164562
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime = 0;\n    foreach(i; 2..n)\n    {\n        if(n\
    \ % i == 0)\n        {\n            if(isPrime(i))\n            {\n          \
    \      largest_prime = i;\n            }\n        }\n    }\n    return largest_prime;\n\
    }\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L)\
    \ == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n\
    \    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5xarbzx_.d(14): Error: undefined identifier `isPrime`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5xarbzx_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164562
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest = 0;\n    long i = 2;\n    while (i <= n) \n    {\n\
    \        if (n % i == 0) \n        {\n            largest = i;\n            n\
    \ /= i;\n        } \n        else \n        {\n            i++;\n        }\n \
    \   }\n    return largest;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\
    \n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L)\
    \ == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) ==\
    \ 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164562
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime = 1;\n    long i = 2;\n    while (i <= n) \n\
    \    {\n        if (n % i == 0) \n        {\n            largest_prime = i;\n\
    \            n /= i;\n        } \n        else \n        {\n            i++;\n\
    \        }\n    }\n    return largest_prime;\n}\nunittest\n{\n    alias candidate\
    \ = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L)\
    \ == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n\
    \    assert(candidate(13195L) == 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164562
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_factor = 1;\n    long i = 2;\n    while (i <= n) \n\
    \    {\n        if (n % i == 0) \n        {\n            largest_factor = i;\n\
    \            n /= i;\n        } \n        else \n        {\n            i++;\n\
    \        }\n    }\n    return largest_factor;\n}\nunittest\n{\n    alias candidate\
    \ = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L)\
    \ == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n\
    \    assert(candidate(13195L) == 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164562
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{ \n    long largest = 1; \n    long i = 2; \n    while (i <= n) \n   \
    \ { \n        if (n % i == 0) \n        { \n            largest = i; \n      \
    \      n = n / i; \n        } \n        else\n            i++; \n    } \n    return\
    \ largest; \n} \nunittest\n{\n    alias candidate = largest_prime_factor;\n\n\
    \    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L)\
    \ == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) ==\
    \ 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164562
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime_factor = 0;\n    long i = 2;\n    while (i <=\
    \ n) {\n        if (n % i == 0) {\n            largest_prime_factor = i;\n   \
    \         n /= i;\n        } else {\n            i++;\n        }\n    }\n    return\
    \ largest_prime_factor;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\
    \n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L)\
    \ == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) ==\
    \ 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164562
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime = 1;\n    long i = 2;\n    while (i <= n) \n\
    \    {\n        if (n % i == 0) \n        {\n            largest_prime = i;\n\
    \            n /= i;\n        } \n        else \n        {\n            i++;\n\
    \        }\n    }\n    return largest_prime;\n}\nunittest\n{\n    alias candidate\
    \ = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L)\
    \ == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n\
    \    assert(candidate(13195L) == 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164562
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest = 0;\n    long i = 2;\n    while (i <= n) \n    {\n\
    \        if (n % i == 0) \n        {\n            largest = i;\n            n\
    \ /= i;\n        } \n        else \n        {\n            i++;\n        }\n \
    \   }\n    return largest;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\
    \n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L)\
    \ == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) ==\
    \ 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164562
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime_factor = 1;\n    long i = 2;\n    while (i <=\
    \ n) \n    {\n        if (n % i == 0) \n        {\n            largest_prime_factor\
    \ = i;\n            n /= i;\n        } \n        else \n        {\n          \
    \  i++;\n        }\n    }\n    return largest_prime_factor;\n}\nunittest\n{\n\
    \    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n\
    \    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L)\
    \ == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164562
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime_factor = 1;\n    long i = 2;\n    while (i <=\
    \ n) \n    {\n        if (n % i == 0) \n        {\n            largest_prime_factor\
    \ = i;\n            n /= i;\n        } \n        else \n        {\n          \
    \  i += 1;\n        }\n    }\n    return largest_prime_factor;\n}\nunittest\n\
    {\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) ==\
    \ 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n\
    \    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164562
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long i = 2;\n    while (i <= n) \n    {\n        if (n % i == 0)\
    \ \n        {\n            n /= i;\n        } \n        else \n        {\n   \
    \         i++;\n        }\n    }\n    return i;\n}\nunittest\n{\n    alias candidate\
    \ = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L)\
    \ == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n\
    \    assert(candidate(13195L) == 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164562
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest = 0;\n    long i = 2;\n    while (i <= n) {\n     \
    \   if (n % i == 0) {\n            largest = i;\n            n /= i;\n       \
    \ }\n        else {\n            i++;\n        }\n    }\n    return largest;\n\
    }\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L)\
    \ == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n\
    \    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164563
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime_factor = 0;\n    long i = 2;\n    while (i <=\
    \ n) \n    {\n        if (n % i == 0) \n        {\n            largest_prime_factor\
    \ = i;\n            n /= i;\n        } \n        else \n        {\n          \
    \  i += 1;\n        }\n    }\n    return largest_prime_factor;\n}\nunittest\n\
    {\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) ==\
    \ 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n\
    \    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164562
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest = 0;\n    foreach(i; iota(2, cast(long)sqrt(n)))\n\
    \    {\n        if (n % i == 0)\n        {\n            if (isPrime(i))\n    \
    \        {\n                largest = i;\n            }\n        }\n    }\n  \
    \  return largest;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\
    \n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L)\
    \ == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) ==\
    \ 29L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvdfigrx8.d(10): Error: undefined identifier `iota`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvdfigrx8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164562
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime = 1;\n    long i = 2;\n    while (i <= n) \n\
    \    {\n        if (n % i == 0) \n        {\n            largest_prime = i;\n\
    \            n /= i;\n        }\n        else \n        {\n            i++;\n\
    \        }\n    }\n    return largest_prime;\n}\nunittest\n{\n    alias candidate\
    \ = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L)\
    \ == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n\
    \    assert(candidate(13195L) == 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164562
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest = 0;\n    long i = 2;\n    while (i <= n) \n    {\n\
    \        if (n % i == 0) \n        {\n            largest = i;\n            n\
    \ /= i;\n        } \n        else \n        {\n            i++;\n        }\n \
    \   }\n    return largest;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\
    \n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L)\
    \ == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) ==\
    \ 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164562
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime = 0;\n    long i = 2;\n    while (i <= n) \n\
    \    {\n        if (n % i == 0) \n        {\n            largest_prime = i;\n\
    \            n /= i;\n        } \n        else \n        {\n            i++;\n\
    \        }\n    }\n    return largest_prime;\n}\nunittest\n{\n    alias candidate\
    \ = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L)\
    \ == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n\
    \    assert(candidate(13195L) == 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164562
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime_factor = 1;\n    long i = 2;\n    while (i <=\
    \ n) \n    {\n        if (n % i == 0) \n        {\n            largest_prime_factor\
    \ = i;\n            n /= i;\n        } \n        else \n        {\n          \
    \  i++;\n        }\n    }\n    return largest_prime_factor;\n}\nunittest\n{\n\
    \    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n\
    \    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L)\
    \ == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164562
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime_factor = 1;\n    long i = 2;\n    while (i <=\
    \ n) \n    {\n        if (n % i == 0) \n        {\n            largest_prime_factor\
    \ = i;\n            n /= i;\n        } \n        else \n        {\n          \
    \  i++;\n        }\n    }\n    return largest_prime_factor;\n}\nunittest\n{\n\
    \    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n\
    \    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L)\
    \ == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164562
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime = 1;\n    foreach(i; 2 .. n)\n    {\n       \
    \ if(n % i == 0)\n        {\n            if(isPrime(i))\n            {\n     \
    \           largest_prime = i;\n            }\n        }\n    }\n    return largest_prime;\n\
    }\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L)\
    \ == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n\
    \    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp36q30210.d(14): Error: undefined identifier `isPrime`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp36q30210.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164562
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime_factor = 0;\n    long i = 2;\n    while (i <=\
    \ n) \n    {\n        if (n % i == 0) \n        {\n            largest_prime_factor\
    \ = i;\n            n /= i;\n        } \n        else \n        {\n          \
    \  i++;\n        }\n    }\n    return largest_prime_factor;\n}\nunittest\n{\n\
    \    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n\
    \    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L)\
    \ == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164562
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest = 0;\n    long i = 2;\n    while (i <= n) \n    {\n\
    \        if (n % i == 0) \n        {\n            largest = i;\n            n\
    \ /= i;\n        } \n        else \n        {\n            i++;\n        }\n \
    \   }\n    return largest;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\
    \n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L)\
    \ == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) ==\
    \ 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164562
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime = 0;\n    long i = 2;\n    while (i <= n) \n\
    \    {\n        if (n % i == 0) \n        {\n            largest_prime = i;\n\
    \            n /= i;\n        } \n        else \n        {\n            i++;\n\
    \        }\n    }\n    return largest_prime;\n}\nunittest\n{\n    alias candidate\
    \ = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L)\
    \ == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n\
    \    assert(candidate(13195L) == 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164562
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime_factor = 1;\n    long factor = 2;\n    while\
    \ (n > 1) \n    {\n        if (n % factor == 0) \n        {\n            largest_prime_factor\
    \ = factor;\n            n /= factor;\n            while (n % factor == 0) \n\
    \            {\n                n /= factor;\n            }\n        }\n     \
    \   factor = factor + 1;\n    }\n    return largest_prime_factor;\n}\nunittest\n\
    {\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) ==\
    \ 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n\
    \    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164563
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long i = 2;\n    while (i <= n) \n    {\n        if (n % i == 0)\
    \ \n        {\n            n /= i;\n        } \n        else \n        {\n   \
    \         i++;\n        }\n    }\n    return i;\n}\nunittest\n{\n    alias candidate\
    \ = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L)\
    \ == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n\
    \    assert(candidate(13195L) == 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164562
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime_factor = 0;\n    long i = 2;\n    while (i <=\
    \ n) \n    {\n        if (n % i == 0) \n        {\n            largest_prime_factor\
    \ = i;\n            n /= i;\n        } \n        else \n        {\n          \
    \  i++;\n        }\n    }\n    return largest_prime_factor;\n}\nunittest\n{\n\
    \    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n\
    \    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L)\
    \ == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164562
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest = 0;\n    long i = 2;\n    while (i <= n) {\n     \
    \   if (n % i == 0) {\n            largest = i;\n            n /= i;\n       \
    \ } else {\n            i++;\n        }\n    }\n    return largest;\n}\nunittest\n\
    {\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) ==\
    \ 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n\
    \    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164562
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime_factor = 1;\n    long i = 2;\n    while (i <=\
    \ n) \n    {\n        if (n % i == 0) \n        {\n            largest_prime_factor\
    \ = i;\n            n /= i;\n        } \n        else \n        {\n          \
    \  i++;\n        }\n    }\n    return largest_prime_factor;\n}\nunittest\n{\n\
    \    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n\
    \    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L)\
    \ == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164562
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_factor = 1;\n    long d = 2;\n    while (n > 1) \n\
    \    {\n        while (n % d == 0) \n        {\n            largest_factor = d;\n\
    \            n /= d;\n        }\n        d += 1;\n        if (d * d > n) \n  \
    \      {\n            if (n > 1) \n            {\n                largest_factor\
    \ = n;\n            }\n            break;\n        }\n    }\n    return largest_factor;\n\
    }\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L)\
    \ == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n\
    \    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164563
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime = 1;\n    long i = 2;\n    while (i <= n) \n\
    \    {\n        if (n % i == 0) \n        {\n            largest_prime = i;\n\
    \            n /= i;\n        } \n        else \n        {\n            i++;\n\
    \        }\n    }\n    return largest_prime;\n}\nunittest\n{\n    alias candidate\
    \ = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L)\
    \ == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n\
    \    assert(candidate(13195L) == 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164562
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest = 0;\n    long i = 2;\n    while (i <= n) {\n     \
    \   if (n % i == 0) {\n            largest = i;\n            n /= i;\n       \
    \ } else {\n            i++;\n        }\n    }\n    return largest;\n}\nunittest\n\
    {\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) ==\
    \ 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n\
    \    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164562
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime_factor = 1;\n    long i = 2;\n    while (i <=\
    \ n) \n    {\n        if (n % i == 0) \n        {\n            largest_prime_factor\
    \ = i;\n            n /= i;\n        } \n        else \n        {\n          \
    \  i++;\n        }\n    }\n    return largest_prime_factor;\n}\nunittest\n{\n\
    \    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n\
    \    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L)\
    \ == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164562
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_factor = 1;\n    long i = 2;\n    while (i <= n) \n\
    \    {\n        if (n % i == 0) \n        {\n            largest_factor = i;\n\
    \            n /= i;\n        } \n        else \n        {\n            i++;\n\
    \        }\n    }\n    return largest_factor;\n}\nunittest\n{\n    alias candidate\
    \ = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L)\
    \ == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n\
    \    assert(candidate(13195L) == 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164562
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest = 0;\n    long factor = 2;\n    while (n > 1) \n  \
    \  {\n        if (n % factor == 0) \n        {\n            largest = factor;\n\
    \            n /= factor;\n            while (n % factor == 0) \n            {\n\
    \                n /= factor;\n            }\n        }\n        factor++;\n \
    \   }\n    return largest;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\
    \n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L)\
    \ == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) ==\
    \ 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164563
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest = 0;\n    long i = 2;\n    while (i <= n) {\n     \
    \   if (n % i == 0) {\n            largest = i;\n            n /= i;\n       \
    \ } else {\n            i++;\n        }\n    }\n    return largest;\n}\nunittest\n\
    {\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) ==\
    \ 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n\
    \    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164562
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime = 0;\n    long i = 2;\n    while (i <= n) \n\
    \    {\n        if (n % i == 0) \n        {\n            largest_prime = i;\n\
    \            n /= i;\n        } \n        else \n        {\n            i++;\n\
    \        }\n    }\n    return largest_prime;\n}\nunittest\n{\n    alias candidate\
    \ = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L)\
    \ == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n\
    \    assert(candidate(13195L) == 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164562
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime = 0;\n    long i = 2;\n    while (i <= n) \n\
    \    {\n        if (n % i == 0) \n        {\n            largest_prime = i;\n\
    \            n /= i;\n        }\n        else \n        {\n            i++;\n\
    \        }\n    }\n    return largest_prime;\n}\nunittest\n{\n    alias candidate\
    \ = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L)\
    \ == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n\
    \    assert(candidate(13195L) == 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164562
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long i = 2;\n    while (i * i <= n) \n    {\n        if (n % i ==\
    \ 0) \n        {\n            n /= i;\n        } \n        else \n        {\n\
    \            i++;\n        }\n    }\n    return n;\n}\nunittest\n{\n    alias\
    \ candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n   \
    \ assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L)\
    \ == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164563
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime = 0;\n    long i = 2;\n    while (n > 1) \n \
    \   {\n        if (n % i == 0) \n        {\n            largest_prime = i;\n \
    \           n /= i;\n            while (n % i == 0) \n            {\n        \
    \        n /= i;\n            }\n        }\n        i++;\n    }\n    return largest_prime;\n\
    }\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L)\
    \ == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n\
    \    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164563
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest = 0;\n    long i = 2;\n    while (i <= n) \n    {\n\
    \        if (n % i == 0) \n        {\n            largest = i;\n            n\
    \ /= i;\n        } \n        else \n        {\n            i++;\n        }\n \
    \   }\n    return largest;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\
    \n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L)\
    \ == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) ==\
    \ 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164562
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest = 0;\n    long i = 2;\n    while (i <= n) \n    {\n\
    \        if (n % i == 0) \n        {\n            largest = i;\n            n\
    \ /= i;\n        } \n        else \n        {\n            i++;\n        }\n \
    \   }\n    return largest;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\
    \n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L)\
    \ == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) ==\
    \ 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164562
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_factor = 1;\n    long i = 2;\n    while (i <= n) \n\
    \    {\n        if (n % i == 0) \n        {\n            largest_factor = i;\n\
    \            n /= i;\n        } \n        else \n        {\n            i += 1;\n\
    \        }\n    }\n    return largest_factor;\n}\nunittest\n{\n    alias candidate\
    \ = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L)\
    \ == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n\
    \    assert(candidate(13195L) == 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164563
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime_factor = 1;\n    long factor = 2;\n    while\
    \ (n > 1) \n    {\n        if (n % factor == 0) \n        {\n            largest_prime_factor\
    \ = factor;\n            n /= factor;\n            while (n % factor == 0) \n\
    \            {\n                n /= factor;\n            }\n        }\n     \
    \   factor++;\n    }\n    return largest_prime_factor;\n}\nunittest\n{\n    alias\
    \ candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n   \
    \ assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L)\
    \ == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164563
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest = 0;\n    long i = 2;\n    while (i <= n) \n    {\n\
    \        if (n % i == 0) \n        {\n            largest = i;\n            n\
    \ /= i;\n        } \n        else \n        {\n            i++;\n        }\n \
    \   }\n    return largest;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\
    \n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L)\
    \ == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) ==\
    \ 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164562
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest = 0;\n    long i = 2;\n    while (i <= n) \n    {\n\
    \        if (n % i == 0) \n        {\n            largest = i;\n            n\
    \ /= i;\n        } \n        else \n        {\n            i++;\n        }\n \
    \   }\n    return largest;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\
    \n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L)\
    \ == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) ==\
    \ 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164562
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long max_prime = 1;\n    long i = 2;\n    while (i <= n) \n    {\n\
    \        if (n % i == 0) \n        {\n            max_prime = i;\n           \
    \ n /= i;\n        } \n        else \n        {\n            i++;\n        }\n\
    \    }\n    return max_prime;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\
    \n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L)\
    \ == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) ==\
    \ 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164563
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime = 0;\n    long i = 2;\n    while (i <= n) {\n\
    \        if (n % i == 0) {\n            largest_prime = i;\n            n /= i;\n\
    \        } else {\n            i += 1;\n        }\n    }\n    return largest_prime;\n\
    }\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L)\
    \ == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n\
    \    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164563
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_factor = 0;\n    long factor = 2;\n    while (n > 1)\
    \ \n    {\n        if (n % factor == 0) \n        {\n            largest_factor\
    \ = factor;\n            n /= factor;\n            while (n % factor == 0) \n\
    \            {\n                n /= factor;\n            }\n        }\n     \
    \   factor = factor + 1;\n    }\n    return largest_factor;\n}\nunittest\n{\n\
    \    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n\
    \    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L)\
    \ == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164563
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest = 0;\n    long i = 2;\n    while (i <= n) {\n     \
    \   if (n % i == 0) {\n            largest = i;\n            n /= i;\n       \
    \ } else {\n            i++;\n        }\n    }\n    return largest;\n}\nunittest\n\
    {\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) ==\
    \ 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n\
    \    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164562
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime_factor = 0;\n    long i = 2;\n    while (i <=\
    \ n) \n    {\n        if (n % i == 0) \n        {\n            largest_prime_factor\
    \ = i;\n            n /= i;\n        } \n        else \n        {\n          \
    \  i++;\n        }\n    }\n    return largest_prime_factor;\n}\nunittest\n{\n\
    \    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n\
    \    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L)\
    \ == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164562
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest = 0;\n    long i = 2;\n    while (i <= n) \n    {\n\
    \        if (n % i == 0) \n        {\n            largest = i;\n            n\
    \ /= i;\n        } \n        else \n        {\n            i++;\n        }\n \
    \   }\n    return largest;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\
    \n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L)\
    \ == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) ==\
    \ 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164562
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime_factor = 0;\n    long i = 2;\n    while (i <=\
    \ n) \n    {\n        if (n % i == 0) \n        {\n            largest_prime_factor\
    \ = i;\n            n /= i;\n        } \n        else \n        {\n          \
    \  i++;\n        }\n    }\n    return largest_prime_factor;\n}\nunittest\n{\n\
    \    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n\
    \    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L)\
    \ == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164562
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest = 0;\n    long i = 2;\n    while (i <= n) \n    {\n\
    \        if (n % i == 0) \n        {\n            largest = i;\n            n\
    \ /= i;\n        } \n        else \n        {\n            i++;\n        }\n \
    \   }\n    return largest;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\
    \n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L)\
    \ == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) ==\
    \ 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164562
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime = 1;\n    long i = 2;\n    while (i <= n) \n\
    \    {\n        if (n % i == 0) \n        {\n            largest_prime = i;\n\
    \            n /= i;\n        } \n        else \n        {\n            i++;\n\
    \        }\n    }\n    return largest_prime;\n}\nunittest\n{\n    alias candidate\
    \ = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L)\
    \ == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n\
    \    assert(candidate(13195L) == 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164562
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest = 1;\n    long i = 2;\n    while (i <= n) \n    {\n\
    \        if (n % i == 0) \n        {\n            largest = i;\n            n\
    \ /= i;\n        } \n        else \n        {\n            i++;\n        }\n \
    \   }\n    return largest;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\
    \n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L)\
    \ == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) ==\
    \ 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164563
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime = 1;\n    long i = 2;\n    while (i <= n) \n\
    \    {\n        if (n % i == 0) \n        {\n            largest_prime = i;\n\
    \            n /= i;\n        } \n        else \n        {\n            i++;\n\
    \        }\n    }\n    return largest_prime;\n}\nunittest\n{\n    alias candidate\
    \ = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L)\
    \ == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n\
    \    assert(candidate(13195L) == 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164562
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime_factor = 0;\n    long i = 2;\n    while (i <=\
    \ n) \n    {\n        if (n % i == 0) \n        {\n            largest_prime_factor\
    \ = i;\n            n /= i;\n        } \n        else \n        {\n          \
    \  i++;\n        }\n    }\n    return largest_prime_factor;\n}\nunittest\n{\n\
    \    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n\
    \    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L)\
    \ == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164562
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long i = 2;\n    long max = 0;\n    while (i <= n) \n    {\n   \
    \     if (n % i == 0) \n        {\n            max = i;\n            n /= i;\n\
    \        } \n        else \n        {\n            i++;\n        }\n    }\n  \
    \  return max;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n\
    \    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L)\
    \ == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) ==\
    \ 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164563
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest = 0;\n    long i = 2;\n    while (i <= n) {\n     \
    \   if (n % i == 0) {\n            largest = i;\n            n /= i;\n       \
    \ } else {\n            i++;\n        }\n    }\n    return largest;\n}\nunittest\n\
    {\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) ==\
    \ 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n\
    \    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164562
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime = 1;\n    long i = 2;\n    while (i <= n) {\n\
    \        if (n % i == 0) {\n            largest_prime = i;\n            n /= i;\n\
    \        }\n        else {\n            i++;\n        }\n    }\n    return largest_prime;\n\
    }\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L)\
    \ == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n\
    \    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164563
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest = 0;\n    long i = 2;\n    while (i <= n) \n    {\n\
    \        if (n % i == 0) \n        {\n            largest = i;\n            n\
    \ /= i;\n        } \n        else \n        {\n            i++;\n        }\n \
    \   }\n    return largest;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\
    \n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L)\
    \ == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) ==\
    \ 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164562
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest = 0;\n    foreach(i; 2..n)\n    {\n        if(n % i\
    \ == 0)\n        {\n            if(isPrime(i))\n            {\n              \
    \  largest = i;\n            }\n        }\n    }\n    return largest;\n}\nunittest\n\
    {\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) ==\
    \ 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n\
    \    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpg_7257me.d(14): Error: undefined identifier `isPrime`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg_7257me.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164562
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime_factor = 1;\n    long i = 2;\n    while (i <=\
    \ n) \n    {\n        if (n % i == 0) \n        {\n            largest_prime_factor\
    \ = i;\n            n /= i;\n        } \n        else \n        {\n          \
    \  i++;\n        }\n    }\n    return largest_prime_factor;\n}\nunittest\n{\n\
    \    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n\
    \    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L)\
    \ == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164562
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest = 1;\n    foreach(i; 2 .. n) \n    {\n        if (n\
    \ % i == 0) \n        {\n            largest = i;\n            n /= i;\n     \
    \   }\n    }\n    return largest;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\
    \n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L)\
    \ == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) ==\
    \ 29L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmps9newz1z.d(25): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d9d]

    ??:? void tmps9newz1z.__unittest_L20_C1() [0x427aa9]

    ??:? void tmps9newz1z.__modtest() [0x427b20]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bac3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a956]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fae9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff98]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa75]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a92d]

    ??:? runModuleUnitTests [0x42b899]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281ec]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164563
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest = 0;\n    long i = 2;\n    while (i <= n) \n    {\n\
    \        if (n % i == 0) \n        {\n            largest = i;\n            n\
    \ /= i;\n        } \n        else \n        {\n            i++;\n        }\n \
    \   }\n    return largest;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\
    \n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L)\
    \ == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) ==\
    \ 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164562
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long i = 2;\n    while (i <= n) \n    {\n        if (n % i == 0)\
    \ \n        {\n            n /= i;\n        } \n        else \n        {\n   \
    \         i++;\n        }\n    }\n    return i;\n}\nunittest\n{\n    alias candidate\
    \ = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L)\
    \ == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n\
    \    assert(candidate(13195L) == 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164562
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime_factor = 1;\n    long i = 2;\n    while (i <=\
    \ n) \n    {\n        if (n % i == 0) \n        {\n            largest_prime_factor\
    \ = i;\n            n /= i;\n        } \n        else \n        {\n          \
    \  i += 1;\n        }\n    }\n    return largest_prime_factor;\n}\nunittest\n\
    {\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) ==\
    \ 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n\
    \    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164562
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime_factor = 0;\n    long i = 2;\n    while (i <=\
    \ n) {\n        if (n % i == 0) {\n            largest_prime_factor = i;\n   \
    \         n /= i;\n        } else {\n            i += 1;\n        }\n    }\n \
    \   return largest_prime_factor;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\
    \n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L)\
    \ == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) ==\
    \ 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164563
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime = 1;\n    long i = 2;\n    while (i <= n) \n\
    \    {\n        if (n % i == 0) \n        {\n            n /= i;\n           \
    \ largest_prime = i;\n        } \n        else \n        {\n            i++;\n\
    \        }\n    }\n    return largest_prime;\n}\nunittest\n{\n    alias candidate\
    \ = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L)\
    \ == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n\
    \    assert(candidate(13195L) == 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164563
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime = 1;\n    while (n % 2 == 0) \n    {\n      \
    \  largest_prime = 2;\n        n /= 2;\n    }\n    for (long i = 3; i <= n; i\
    \ += 2) \n    {\n        while (n % i == 0) \n        {\n            largest_prime\
    \ = i;\n            n /= i;\n        }\n    }\n    return largest_prime;\n}\n\
    unittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L)\
    \ == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n\
    \    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164563
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime_factor = 1;\n    long i = 2;\n    while (i <=\
    \ n) \n    {\n        if (n % i == 0) \n        {\n            largest_prime_factor\
    \ = i;\n            n /= i;\n        } \n        else \n        {\n          \
    \  i++;\n        }\n    }\n    return largest_prime_factor;\n}\nunittest\n{\n\
    \    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n\
    \    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L)\
    \ == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164562
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime_factor = 1;\n    long i = 2;\n    while (i <=\
    \ n) \n    {\n        if (n % i == 0) \n        {\n            largest_prime_factor\
    \ = i;\n            n /= i;\n        } \n        else \n        {\n          \
    \  i += 1;\n        }\n    }\n    return largest_prime_factor;\n}\nunittest\n\
    {\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) ==\
    \ 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n\
    \    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164562
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime_factor = 1;\n    long i = 2;\n    while (i <=\
    \ n) {\n        if (n % i == 0) {\n            largest_prime_factor = i;\n   \
    \         n /= i;\n        } else {\n            i++;\n        }\n    }\n    return\
    \ largest_prime_factor;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\
    \n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L)\
    \ == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) ==\
    \ 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164563
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest = 0;\n    long i = 2;\n    while (i <= n) {\n     \
    \   if (n % i == 0) {\n            largest = i;\n            n /= i;\n       \
    \ } else {\n            i++;\n        }\n    }\n    return largest;\n}\nunittest\n\
    {\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) ==\
    \ 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n\
    \    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164562
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_factor = 1;\n    long factor = 2;\n    while (n > 1)\
    \ \n    {\n        while (n % factor == 0) \n        {\n            largest_factor\
    \ = factor;\n            n /= factor;\n        }\n        factor++;\n    }\n \
    \   return largest_factor;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\
    \n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L)\
    \ == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) ==\
    \ 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164563
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime_factor = 1;\n    long i = 2;\n    while (i <=\
    \ n) \n    {\n        if (n % i == 0) \n        {\n            largest_prime_factor\
    \ = i;\n            n /= i;\n        } \n        else \n        {\n          \
    \  i += 1;\n        }\n    }\n    return largest_prime_factor;\n}\nunittest\n\
    {\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) ==\
    \ 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n\
    \    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164562
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime = 1;\n    long i = 2;\n    while (i <= n) \n\
    \    {\n        if (n % i == 0) \n        {\n            largest_prime = i;\n\
    \            n /= i;\n        } \n        else \n        {\n            i++;\n\
    \        }\n    }\n    return largest_prime;\n}\nunittest\n{\n    alias candidate\
    \ = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L)\
    \ == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n\
    \    assert(candidate(13195L) == 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164562
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest = 0;\n    long i = 2;\n    while (i <= n) \n    {\n\
    \        if (n % i == 0) \n        {\n            largest = i;\n            n\
    \ /= i;\n        } \n        else \n        {\n            i++;\n        }\n \
    \   }\n    return largest;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\
    \n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L)\
    \ == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) ==\
    \ 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164562
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime_factor = 1;\n    long factor = 2;\n    while\
    \ (n > 1) \n    {\n        if (n % factor == 0) \n        {\n            largest_prime_factor\
    \ = factor;\n            n /= factor;\n            while (n % factor == 0) \n\
    \            {\n                n /= factor;\n            }\n        }\n     \
    \   factor++;\n    }\n    return largest_prime_factor;\n}\nunittest\n{\n    alias\
    \ candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n   \
    \ assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L)\
    \ == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164563
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime_factor = 1;\n    long i = 2;\n    while (i <=\
    \ n) \n    {\n        if (n % i == 0) \n        {\n            largest_prime_factor\
    \ = i;\n            n /= i;\n        } \n        else \n        {\n          \
    \  i++;\n        }\n    }\n    return largest_prime_factor;\n}\nunittest\n{\n\
    \    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n\
    \    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L)\
    \ == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164562
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime = 0;\n    long i = 2;\n    while (i <= n) \n\
    \    {\n        if (n % i == 0) \n        {\n            largest_prime = i;\n\
    \            n /= i;\n        } \n        else \n        {\n            i++;\n\
    \        }\n    }\n    return largest_prime;\n}\nunittest\n{\n    alias candidate\
    \ = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L)\
    \ == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n\
    \    assert(candidate(13195L) == 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164562
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest = 1;\n    long i = 2;\n    while (i <= n) \n    {\n\
    \        if (n % i == 0) \n        {\n            largest = i;\n            n\
    \ /= i;\n        } \n        else \n        {\n            i++;\n        }\n \
    \   }\n    return largest;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\
    \n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L)\
    \ == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) ==\
    \ 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164563
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest = 0;\n    long i = 2;\n    while (i <= n) \n    {\n\
    \        if (n % i == 0) \n        {\n            largest = i;\n            n\
    \ /= i;\n        } \n        else \n        {\n            i++;\n        }\n \
    \   }\n    return largest;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\
    \n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L)\
    \ == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) ==\
    \ 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164562
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long i = 2;\n    long max = 0;\n    while (i <= n) \n    {\n   \
    \     if (n % i == 0) \n        {\n            max = i;\n            n /= i;\n\
    \        } \n        else \n        {\n            i++;\n        }\n    }\n  \
    \  return max;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n\
    \    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L)\
    \ == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) ==\
    \ 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime_factor = 1;\n    foreach (i; 2 .. n) \n    {\n\
    \        if (n % i == 0) \n        {\n            if (isPrime(i)) \n         \
    \   {\n                largest_prime_factor = i;\n            }\n        }\n \
    \   }\n    return largest_prime_factor;\n}\nunittest\n{\n    alias candidate =\
    \ largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L)\
    \ == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n\
    \    assert(candidate(13195L) == 29L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzlix4oua.d(14): Error: undefined identifier `isPrime`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzlix4oua.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest = 1;\n    foreach (i; 2 .. sqrt(n) + 1) \n    {\n \
    \       if (n % i == 0) \n        {\n            largest = max(largest, largest_prime_factor(n\
    \ / i));\n        }\n    }\n    return largest;\n}\nunittest\n{\n    alias candidate\
    \ = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L)\
    \ == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n\
    \    assert(candidate(13195L) == 29L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpoxn7o1_v.d(10): Error: `std.math.sqrt` called with argument types
    `(long)` matches both:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float
    x)`

    and:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real
    x)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoxn7o1_v.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest = 0;\n    for (long i = 2; i <= n; i++) \n    {\n \
    \       if (n % i == 0) \n        {\n            largest = i;\n            n /=\
    \ i;\n            i = 1;\n        }\n    }\n    return largest;\n}\nunittest\n\
    {\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) ==\
    \ 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n\
    \    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164562
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime = 0;\n    long i = 2;\n    while (i <= n) \n\
    \    {\n        if (n % i == 0) \n        {\n            largest_prime = i;\n\
    \            n /= i;\n        } \n        else \n        {\n            i++;\n\
    \        }\n    }\n    return largest_prime;\n}\nunittest\n{\n    alias candidate\
    \ = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L)\
    \ == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n\
    \    assert(candidate(13195L) == 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164562
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime = 1;\n    long factor = 2;\n    while (n > 1)\
    \ \n    {\n        if (n % factor == 0) \n        {\n            largest_prime\
    \ = factor;\n            n /= factor;\n            while (n % factor == 0) \n\
    \            {\n                n /= factor;\n            }\n        }\n     \
    \   factor = factor + 1;\n    }\n    return largest_prime;\n}\nunittest\n{\n \
    \   alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n\
    \    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L)\
    \ == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164563
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime_factor = 0;\n    long i = 2;\n    while (i <=\
    \ n) {\n        if (n % i == 0) {\n            largest_prime_factor = i;\n   \
    \         n /= i;\n        } else {\n            i++;\n        }\n    }\n    return\
    \ largest_prime_factor;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\
    \n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L)\
    \ == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) ==\
    \ 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164562
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime = 1;\n    long i = 2;\n    while (i <= n) \n\
    \    {\n        if (n % i == 0) \n        {\n            largest_prime = i;\n\
    \            n /= i;\n        } \n        else \n        {\n            i++;\n\
    \        }\n    }\n    return largest_prime;\n}\nunittest\n{\n    alias candidate\
    \ = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L)\
    \ == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n\
    \    assert(candidate(13195L) == 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164562
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime_factor = 1;\n    long i = 2;\n    while (i <=\
    \ n) \n    {\n        if (n % i == 0) \n        {\n            largest_prime_factor\
    \ = i;\n            n /= i;\n        } \n        else \n        {\n          \
    \  i++;\n        }\n    }\n    return largest_prime_factor;\n}\nunittest\n{\n\
    \    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n\
    \    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L)\
    \ == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164562
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_factor = 1;\n    long i = 2;\n    while (i <= n) {\n\
    \        if (n % i == 0) {\n            largest_factor = i;\n            n /=\
    \ i;\n        } else {\n            i += 1;\n        }\n    }\n    return largest_factor;\n\
    }\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L)\
    \ == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n\
    \    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164563
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime_factor = 1;\n    long factor = 2;\n    while\
    \ (factor <= n) \n    {\n        if (n % factor == 0) \n        {\n          \
    \  largest_prime_factor = factor;\n            n /= factor;\n        } \n    \
    \    else \n        {\n            factor += 1;\n        }\n    }\n    return\
    \ largest_prime_factor;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\
    \n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L)\
    \ == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) ==\
    \ 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164563
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest = 0;\n    long i = 2;\n    while (i <= n) \n    {\n\
    \        if (n % i == 0) \n        {\n            largest = i;\n            n\
    \ /= i;\n        } \n        else \n        {\n            i++;\n        }\n \
    \   }\n    return largest;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\
    \n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L)\
    \ == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) ==\
    \ 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164562
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest = 0;\n    long i = 2;\n    while (i <= n) \n    {\n\
    \        if (n % i == 0) \n        {\n            largest = i;\n            n\
    \ /= i;\n        } \n        else \n        {\n            i++;\n        }\n \
    \   }\n    return largest;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\
    \n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L)\
    \ == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) ==\
    \ 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164562
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime = 0;\n    long i = 2;\n    while (i <= n) \n\
    \    {\n        if (n % i == 0) \n        {\n            largest_prime = i;\n\
    \            n /= i;\n        }\n        else \n        {\n            i++;\n\
    \        }\n    }\n    return largest_prime;\n}\nunittest\n{\n    alias candidate\
    \ = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L)\
    \ == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n\
    \    assert(candidate(13195L) == 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164562
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_factor = 1;\n    long factor = 2;\n    while (n > 1)\
    \ \n    {\n        if (n % factor == 0) \n        {\n            largest_factor\
    \ = factor;\n            n /= factor;\n            while (n % factor == 0) \n\
    \            {\n                n /= factor;\n            }\n        }\n     \
    \   factor = factor + 1;\n    }\n    return largest_factor;\n}\nunittest\n{\n\
    \    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n\
    \    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L)\
    \ == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164563
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest = 0;\n    long i = 2;\n    while (i <= n) {\n     \
    \   if (n % i == 0) {\n            largest = i;\n            n /= i;\n       \
    \ } else {\n            i++;\n        }\n    }\n    return largest;\n}\nunittest\n\
    {\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) ==\
    \ 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n\
    \    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164562
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest = 0;\n    long i = 2;\n    while (i <= n) \n    {\n\
    \        if (n % i == 0) \n        {\n            largest = i;\n            n\
    \ /= i;\n        } \n        else \n        {\n            i++;\n        }\n \
    \   }\n    return largest;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\
    \n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L)\
    \ == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) ==\
    \ 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164562
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_factor = 1;\n    foreach (i; 2 .. n) \n    {\n    \
    \    if (n % i == 0) \n        {\n            largest_factor = i;\n          \
    \  n /= i;\n        }\n    }\n    return largest_factor;\n}\nunittest\n{\n   \
    \ alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n\
    \    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L)\
    \ == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpxjehqdax.d(25): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d9d]

    ??:? void tmpxjehqdax.__unittest_L20_C1() [0x427aa9]

    ??:? void tmpxjehqdax.__modtest() [0x427b20]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bac3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a956]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fae9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff98]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa75]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a92d]

    ??:? runModuleUnitTests [0x42b899]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281ec]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164563
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime = 1;\n    long i = 2;\n    while (i <= n) \n\
    \    {\n        if (n % i == 0) \n        {\n            largest_prime = i;\n\
    \            n /= i;\n        } \n        else \n        {\n            i++;\n\
    \        }\n    }\n    return largest_prime;\n}\nunittest\n{\n    alias candidate\
    \ = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L)\
    \ == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n\
    \    assert(candidate(13195L) == 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164562
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_factor = 0;\n    long factor = 2;\n    while (n > 1)\
    \ \n    {\n        if (n % factor == 0) \n        {\n            largest_factor\
    \ = factor;\n            n /= factor;\n            while (n % factor == 0) \n\
    \            {\n                n /= factor;\n            }\n        }\n     \
    \   factor = factor + 1;\n    }\n    return largest_factor;\n}\nunittest\n{\n\
    \    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n\
    \    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L)\
    \ == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164563
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime_factor = 1;\n    long i = 2;\n    while (i <=\
    \ n) \n    {\n        if (n % i == 0) \n        {\n            largest_prime_factor\
    \ = i;\n            n /= i;\n        } \n        else \n        {\n          \
    \  i++;\n        }\n    }\n    return largest_prime_factor;\n}\nunittest\n{\n\
    \    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n\
    \    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L)\
    \ == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164562
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime_factor = 1;\n    foreach (i; 2 .. n) \n    {\n\
    \        if (n % i == 0) \n        {\n            if (isPrime(i)) \n         \
    \   {\n                largest_prime_factor = i;\n            }\n        }\n \
    \   }\n    return largest_prime_factor;\n}\nunittest\n{\n    alias candidate =\
    \ largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L)\
    \ == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n\
    \    assert(candidate(13195L) == 29L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzlix4oua.d(14): Error: undefined identifier `isPrime`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzlix4oua.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime = 0;\n    long i = 2;\n    while (i <= n) {\n\
    \        if (n % i == 0) {\n            largest_prime = i;\n            n /= i;\n\
    \        } else {\n            i++;\n        }\n    }\n    return largest_prime;\n\
    }\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L)\
    \ == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n\
    \    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164562
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_factor = 1;\n    long i = 2;\n    while (i <= n) \n\
    \    {\n        if (n % i == 0) \n        {\n            largest_factor = i;\n\
    \            n /= i;\n        } \n        else \n        {\n            i++;\n\
    \        }\n    }\n    return largest_factor;\n}\nunittest\n{\n    alias candidate\
    \ = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L)\
    \ == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n\
    \    assert(candidate(13195L) == 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164562
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest = 1;\n    long i = 2;\n    while (i <= n) \n    {\n\
    \        if (n % i == 0) \n        {\n            largest = i;\n            n\
    \ /= i;\n        }\n        else \n        {\n            i++;\n        }\n  \
    \  }\n    return largest;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\
    \n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L)\
    \ == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) ==\
    \ 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164563
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_factor = 1;\n    long factor = 2;\n    while (n > 1)\
    \ \n    {\n        if (n % factor == 0) \n        {\n            largest_factor\
    \ = factor;\n            n /= factor;\n            while (n % factor == 0) \n\
    \            {\n                n /= factor;\n            }\n        }\n     \
    \   factor = factor + 1;\n    }\n    return largest_factor;\n}\nunittest\n{\n\
    \    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n\
    \    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L)\
    \ == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164563
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime_factor = 0;\n    long i = 2;\n    while (i <=\
    \ n) {\n        if (n % i == 0) {\n            largest_prime_factor = i;\n   \
    \         n /= i;\n        } else {\n            i++;\n        }\n    }\n    return\
    \ largest_prime_factor;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\
    \n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L)\
    \ == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) ==\
    \ 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164562
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest = 0;\n    long i = 2;\n    while (i <= n) {\n     \
    \   if (n % i == 0) {\n            largest = i;\n            n /= i;\n       \
    \ } else {\n            i++;\n        }\n    }\n    return largest;\n}\nunittest\n\
    {\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) ==\
    \ 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n\
    \    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164562
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime = 0;\n    long i = 2;\n    while (i <= n) \n\
    \    {\n        if (n % i == 0) \n        {\n            largest_prime = i;\n\
    \            n /= i;\n        } \n        else \n        {\n            i++;\n\
    \        }\n    }\n    return largest_prime;\n}\nunittest\n{\n    alias candidate\
    \ = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L)\
    \ == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n\
    \    assert(candidate(13195L) == 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164562
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime = 1;\n    long d = 2;\n    while (d <= n) \n\
    \    {\n        if (n % d == 0) \n        {\n            largest_prime = d;\n\
    \            n /= d;\n        } \n        else \n        {\n            d += 1;\n\
    \        }\n    }\n    return largest_prime;\n}\nunittest\n{\n    alias candidate\
    \ = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L)\
    \ == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n\
    \    assert(candidate(13195L) == 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164563
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime_factor = 1;\n    long i = 2;\n    while (i <=\
    \ n) \n    {\n        if (n % i == 0) \n        {\n            largest_prime_factor\
    \ = i;\n            n /= i;\n        } \n        else \n        {\n          \
    \  i += 1;\n        }\n    }\n    return largest_prime_factor;\n}\nunittest\n\
    {\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) ==\
    \ 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n\
    \    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164562
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime_factor = 1;\n    long i = 2;\n    while (i <=\
    \ n) \n    {\n        if (n % i == 0) \n        {\n            largest_prime_factor\
    \ = i;\n            n /= i;\n        } \n        else \n        {\n          \
    \  i++;\n        }\n    }\n    return largest_prime_factor;\n}\nunittest\n{\n\
    \    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n\
    \    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L)\
    \ == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164562
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest = 0;\n    long i = 2;\n    while (i <= n) \n    {\n\
    \        if (n % i == 0) \n        {\n            largest = i;\n            n\
    \ /= i;\n        } \n        else \n        {\n            i++;\n        }\n \
    \   }\n    return largest;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\
    \n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L)\
    \ == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) ==\
    \ 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164562
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime = 0;\n    long i = 2;\n    while (i <= n) \n\
    \    {\n        if (n % i == 0) \n        {\n            largest_prime = i;\n\
    \            n /= i;\n        } \n        else \n        {\n            i++;\n\
    \        }\n    }\n    return largest_prime;\n}\nunittest\n{\n    alias candidate\
    \ = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L)\
    \ == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n\
    \    assert(candidate(13195L) == 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164562
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime_factor = 1;\n    long i = 2;\n    while (i <=\
    \ n) \n    {\n        if (n % i == 0) \n        {\n            largest_prime_factor\
    \ = i;\n            n /= i;\n        } \n        else \n        {\n          \
    \  i++;\n        }\n    }\n    return largest_prime_factor;\n}\nunittest\n{\n\
    \    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n\
    \    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L)\
    \ == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164562
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime = 1;\n    for (long i = 2; i <= n; i++) \n  \
    \  {\n        if (n % i == 0) \n        {\n            largest_prime = i;\n  \
    \          n /= i;\n            i--;\n        }\n    }\n    return largest_prime;\n\
    }\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L)\
    \ == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n\
    \    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164563
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime_factor = 0;\n    long i = 2;\n    while (i <=\
    \ n) {\n        if (n % i == 0) {\n            largest_prime_factor = i;\n   \
    \         n /= i;\n        } else {\n            i++;\n        }\n    }\n    return\
    \ largest_prime_factor;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\
    \n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L)\
    \ == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) ==\
    \ 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164562
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest = 0;\n    foreach(i; 2 .. n)\n    {\n        if(n %\
    \ i == 0)\n        {\n            largest = i;\n            n /= i;\n        }\n\
    \    }\n    return largest;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\
    \n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L)\
    \ == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) ==\
    \ 29L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp_p39kfim.d(25): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d9d]

    ??:? void tmp_p39kfim.__unittest_L20_C1() [0x427aa9]

    ??:? void tmp_p39kfim.__modtest() [0x427b20]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bac3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a956]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fae9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff98]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa75]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a92d]

    ??:? runModuleUnitTests [0x42b899]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281ec]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164563
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime_factor = 1;\n    long i = 2;\n    while (i <=\
    \ n) \n    {\n        if (n % i == 0) \n        {\n            largest_prime_factor\
    \ = i;\n            n /= i;\n        } \n        else \n        {\n          \
    \  i++;\n        }\n    }\n    return largest_prime_factor;\n}\nunittest\n{\n\
    \    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n\
    \    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L)\
    \ == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164562
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime = 1;\n    long i = 2;\n    while (i <= n) \n\
    \    {\n        if (n % i == 0) \n        {\n            largest_prime = i;\n\
    \            n /= i;\n        }\n        else \n        {\n            i += 1;\n\
    \        }\n    }\n    return largest_prime;\n}\nunittest\n{\n    alias candidate\
    \ = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L)\
    \ == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n\
    \    assert(candidate(13195L) == 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164563
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest = 0;\n    long i = 2;\n    while (i <= n) {\n     \
    \   if (n % i == 0) {\n            largest = i;\n            n /= i;\n       \
    \ } else {\n            i += 1;\n        }\n    }\n    return largest;\n}\nunittest\n\
    {\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) ==\
    \ 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n\
    \    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164563
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime_factor = 1;\n    long i = 2;\n    while (i <=\
    \ n) \n    {\n        if (n % i == 0) \n        {\n            largest_prime_factor\
    \ = i;\n            n /= i;\n        } \n        else \n        {\n          \
    \  i++;\n        }\n    }\n    return largest_prime_factor;\n}\nunittest\n{\n\
    \    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n\
    \    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L)\
    \ == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164562
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime_factor = 0;\n    long max = cast(long)sqrt(n);\n\
    \    foreach(i; 2..max)\n    {\n        if(n % i == 0)\n        {\n          \
    \  if(isPrime(i))\n            {\n                largest_prime_factor = i;\n\
    \            }\n        }\n    }\n    return largest_prime_factor;\n}\nunittest\n\
    {\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) ==\
    \ 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n\
    \    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2bdhs8c6.d(10): Error: `std.math.sqrt` called with argument types
    `(long)` matches both:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float
    x)`

    and:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real
    x)`

    /tmp/tmp2bdhs8c6.d(15): Error: undefined identifier `isPrime`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2bdhs8c6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_factor = 1;\n    long i = 2;\n    while (i <= n) {\n\
    \        if (n % i == 0) {\n            largest_factor = i;\n            n /=\
    \ i;\n        } else {\n            i++;\n        }\n    }\n    return largest_factor;\n\
    }\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L)\
    \ == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n\
    \    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164563
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime = 1;\n    while (n % 2 == 0) \n    {\n      \
    \  largest_prime = 2;\n        n /= 2;\n    }\n    for (long i = 3; i <= sqrt(n);\
    \ i += 2) \n    {\n        while (n % i == 0) \n        {\n            largest_prime\
    \ = i;\n            n /= i;\n        }\n    }\n    if (n > 2) \n    {\n      \
    \  largest_prime = n;\n    }\n    return largest_prime;\n}\nunittest\n{\n    alias\
    \ candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n   \
    \ assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L)\
    \ == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbmyy9bsu.d(15): Error: `std.math.sqrt` called with argument types
    `(long)` matches both:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float
    x)`

    and:

    /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real
    x)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbmyy9bsu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164563
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime_factor = 1;\n    long i = 2;\n    while (i <=\
    \ n) \n    {\n        if (n % i == 0) \n        {\n            largest_prime_factor\
    \ = i;\n            n /= i;\n        } \n        else \n        {\n          \
    \  i += 1;\n        }\n    }\n    return largest_prime_factor;\n}\nunittest\n\
    {\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) ==\
    \ 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n\
    \    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164562
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest = 0;\n    long i = 2;\n    while (i <= n) {\n     \
    \   if (n % i == 0) {\n            largest = i;\n            n /= i;\n       \
    \ } else {\n            i++;\n        }\n    }\n    return largest;\n}\nunittest\n\
    {\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) ==\
    \ 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n\
    \    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164562
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest = 1;\n    long i = 2;\n    while (i <= n) \n    {\n\
    \        if (n % i == 0) \n        {\n            largest = i;\n            n\
    \ /= i;\n        } \n        else \n        {\n            i++;\n        }\n \
    \   }\n    return largest;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\
    \n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L)\
    \ == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) ==\
    \ 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164563
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime_factor = 1;\n    long i = 2;\n    while (i <=\
    \ n) \n    {\n        if (n % i == 0) \n        {\n            largest_prime_factor\
    \ = i;\n            n /= i;\n        } \n        else \n        {\n          \
    \  i += 1;\n        }\n    }\n    return largest_prime_factor;\n}\nunittest\n\
    {\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) ==\
    \ 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n\
    \    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164562
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime_factor = 1;\n    long factor = 2;\n    while\
    \ (n > 1) \n    {\n        while (n % factor == 0) \n        {\n            largest_prime_factor\
    \ = factor;\n            n /= factor;\n        }\n        factor++;\n    }\n \
    \   return largest_prime_factor;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\
    \n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L)\
    \ == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) ==\
    \ 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164563
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime = 1;\n    long i = 2;\n    while (i <= n) {\n\
    \        if (n % i == 0) {\n            largest_prime = i;\n            n /= i;\n\
    \        } else {\n            i++;\n        }\n    }\n    return largest_prime;\n\
    }\nunittest\n{\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L)\
    \ == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n\
    \    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164563
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_factor = 1;\n    long factor = 2;\n    while (n > 1)\
    \ \n    {\n        if (n % factor == 0) \n        {\n            largest_factor\
    \ = factor;\n            n /= factor;\n            while (n % factor == 0) \n\
    \            {\n                n /= factor;\n            }\n        }\n     \
    \   factor++;\n    }\n    return largest_factor;\n}\nunittest\n{\n    alias candidate\
    \ = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L)\
    \ == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n\
    \    assert(candidate(13195L) == 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164562
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest = 0;\n    long i = 2;\n    while (i <= n) {\n     \
    \   if (n % i == 0) {\n            largest = i;\n            n /= i;\n       \
    \ } else {\n            i++;\n        }\n    }\n    return largest;\n}\nunittest\n\
    {\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) ==\
    \ 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n\
    \    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164562
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime = 1;\n    long i = 2;\n    while (i <= n) \n\
    \    {\n        if (n % i == 0) \n        {\n            largest_prime = i;\n\
    \            n /= i;\n        } \n        else \n        {\n            i += 1;\n\
    \        }\n    }\n    return largest_prime;\n}\nunittest\n{\n    alias candidate\
    \ = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n    assert(candidate(27L)\
    \ == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L) == 11L);\n\
    \    assert(candidate(13195L) == 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164563
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime_factor = 1;\n    long i = 2;\n    while (i <=\
    \ n) \n    {\n        if (n % i == 0) \n        {\n            largest_prime_factor\
    \ = i;\n            n /= i;\n        } \n        else \n        {\n          \
    \  i += 1;\n        }\n    }\n    return largest_prime_factor;\n}\nunittest\n\
    {\n    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) ==\
    \ 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n\
    \    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) == 29L);\n\
    }\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164562
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime_factor = 1;\n    long i = 2;\n    while (i <=\
    \ n) {\n        if (n % i == 0) {\n            largest_prime_factor = i;\n   \
    \         n /= i;\n        } else {\n            i++;\n        }\n    }\n    return\
    \ largest_prime_factor;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\
    \n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L)\
    \ == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) ==\
    \ 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164563
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest = 0;\n    long i = 2;\n    while (i <= n) \n    {\n\
    \        if (n % i == 0) \n        {\n            largest = i;\n            n\
    \ /= i;\n        } \n        else \n        {\n            i++;\n        }\n \
    \   }\n    return largest;\n}\nunittest\n{\n    alias candidate = largest_prime_factor;\n\
    \n    assert(candidate(15L) == 5L);\n    assert(candidate(27L) == 3L);\n    assert(candidate(63L)\
    \ == 7L);\n    assert(candidate(330L) == 11L);\n    assert(candidate(13195L) ==\
    \ 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164562
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\nReturn the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n            \n*/\nlong largest_prime_factor(long\
    \ n) \n{\n    long largest_prime_factor = 1;\n    long i = 2;\n    while (i <=\
    \ n) \n    {\n        if (n % i == 0) \n        {\n            largest_prime_factor\
    \ = i;\n            n /= i;\n        } \n        else \n        {\n          \
    \  i++;\n        }\n    }\n    return largest_prime_factor;\n}\nunittest\n{\n\
    \    alias candidate = largest_prime_factor;\n\n    assert(candidate(15L) == 5L);\n\
    \    assert(candidate(27L) == 3L);\n    assert(candidate(63L) == 7L);\n    assert(candidate(330L)\
    \ == 11L);\n    assert(candidate(13195L) == 29L);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164562
