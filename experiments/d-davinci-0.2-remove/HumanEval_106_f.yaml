name: HumanEval_106_f
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\n Implement the function f that\
  \ takes n as a parameter,\n    and returns a list of size n, such that the value\
  \ of the element at index i is the factorial of i if i is even\n    or the sum of\
  \ numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is\
  \ the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n\
  \        \n*/\nlong[] f(long n) \n"
tests: "unittest\n{\n    alias candidate = f;\n\n    assert(candidate(5L) == [1L,\
  \ 2L, 6L, 24L, 15L]);\n    assert(candidate(7L) == [1L, 2L, 6L, 24L, 15L, 720L,\
  \ 28L]);\n    assert(candidate(1L) == [1L]);\n    assert(candidate(3L) == [1L, 2L,\
  \ 6L]);\n}\nvoid main(){}"
completions: ["{\n    long[] result = new long[n];\n    foreach(i; 0 .. n)\n    {\n\
    \        if (i % 2 == 0)\n        {\n            result[i] = factorial(i);\n \
    \       }\n        else\n        {\n            result[i] = sum(i);\n        }\n\
    \    }\n    return result;\n}", "{\n    long[] result = new long[n];\n    foreach(i;\
    \ 0 .. n)\n    {\n        if(i % 2 == 0)\n        {\n            result[i] = factorial(i);\n\
    \        }\n        else\n        {\n            result[i] = sum(i);\n       \
    \ }\n    }\n    return result;\n}", "{\n    long[] result = new long[n];\n   \
    \ foreach(i; 0 .. n)\n    {\n        if(i % 2 == 0)\n        {\n            result[i]\
    \ = factorial(i);\n        }\n        else\n        {\n            result[i] =\
    \ sum(i);\n        }\n    }\n    return result;\n}", "{\n    long[] result = new\
    \ long[n];\n    foreach(i; 0 .. n)\n    {\n        if(i % 2 == 0)\n        {\n\
    \            result[i] = factorial(i);\n        }\n        else\n        {\n \
    \           result[i] = sum(i);\n        }\n    }\n    return result;\n}", "{\n\
    \    long[] result = new long[n];\n    foreach(i; 0 .. n)\n    {\n        if(i\
    \ % 2 == 0)\n        {\n            result[i] = factorial(i);\n        }\n   \
    \     else\n        {\n            result[i] = i * (i + 1) / 2;\n        }\n \
    \   }\n    return result;\n}", "{\n    long[] result = new long[n];\n    foreach(i;\
    \ 0 .. n)\n    {\n        if (i % 2 == 0)\n        {\n            result[i] =\
    \ factorial(i);\n        }\n        else\n        {\n            result[i] = sum(i);\n\
    \        }\n    }\n    return result;\n}", "{\n    long[] result = new long[n];\n\
    \    foreach(i; 0 .. n)\n    {\n        if(i % 2 == 0)\n        {\n          \
    \  result[i] = factorial(i);\n        }\n        else\n        {\n           \
    \ result[i] = i * (i + 1) / 2;\n        }\n    }\n    return result;\n}", "{\n\
    \    long[] result = new long[n];\n    for (long i = 0; i < n; i++) \n    {\n\
    \        if (i % 2 == 0) \n        {\n            result[i] = factorial(i);\n\
    \        } \n        else \n        {\n            result[i] = sum(i);\n     \
    \   }\n    }\n    return result;\n}", "{\n    long[] result = new long[n];\n \
    \   foreach(i; 0 .. n)\n    {\n        if(i % 2 == 0)\n        {\n           \
    \ result[i] = factorial(i);\n        }\n        else\n        {\n            result[i]\
    \ = i * (i + 1) / 2;\n        }\n    }\n    return result;\n}", "{\n    long[]\
    \ result = new long[n];\n    for (long i = 0; i < n; i++) \n    {\n        if\
    \ (i % 2 == 0) \n        {\n            result[i] = factorial(i);\n        } \n\
    \        else \n        {\n            result[i] = sum(i);\n        }\n    }\n\
    \    return result;\n}\nlong factorial(long n) \n{\n    long result = 1;\n   \
    \ for (long i = 1; i <= n; i++) \n    {\n        result *= i;\n    }\n    return\
    \ result;\n}\nlong sum(long n) \n{\n    long result = 0;\n    for (long i = 1;\
    \ i <= n; i++) \n    {\n        result += i;\n    }\n    return result;\n}", "{\n\
    \    long[] result = new long[n];\n    foreach(i; 0 .. n)\n    {\n        if(i\
    \ % 2 == 0)\n        {\n            result[i] = factorial(i);\n        }\n   \
    \     else\n        {\n            result[i] = i * (i + 1) / 2;\n        }\n \
    \   }\n    return result;\n}", "{\n    long[] result = new long[n];\n    foreach(i;\
    \ 0 .. n)\n    {\n        if(i % 2 == 0)\n        {\n            result[i] = factorial(i);\n\
    \        }\n        else\n        {\n            result[i] = sum(i);\n       \
    \ }\n    }\n    return result;\n}", "{\n    long[] result = new long[n];\n   \
    \ foreach(i; 0 .. n)\n    {\n        if(i % 2 == 0)\n        {\n            result[i]\
    \ = factorial(i);\n        }\n        else\n        {\n            result[i] =\
    \ i * (i + 1) / 2;\n        }\n    }\n    return result;\n}", "{\n    long[] result\
    \ = new long[n];\n    for (long i = 0; i < n; i++)\n    {\n        if (i % 2 ==\
    \ 0)\n        {\n            result[i] = factorial(i);\n        }\n        else\n\
    \        {\n            result[i] = sum(i);\n        }\n    }\n    return result;\n\
    }", "{\n    long[] result = new long[n];\n    foreach(i; 0 .. n)\n    {\n    \
    \    if(i % 2 == 0)\n        {\n            result[i] = factorial(i);\n      \
    \  }\n        else\n        {\n            result[i] = sum(1 .. i);\n        }\n\
    \    }\n    return result;\n}", "{\n    long[] result = new long[n];\n    foreach(i;\
    \ 0 .. n)\n    {\n        if(i % 2 == 0)\n        {\n            result[i] = factorial(i);\n\
    \        }\n        else\n        {\n            result[i] = sum(1 .. i);\n  \
    \      }\n    }\n    return result;\n}", "{\n    long[] result = new long[n];\n\
    \    foreach(i; 0 .. n)\n    {\n        if (i % 2 == 0)\n        {\n         \
    \   result[i] = factorial(i);\n        }\n        else\n        {\n          \
    \  result[i] = sum(i);\n        }\n    }\n    return result;\n}", "{\n    long[]\
    \ result = new long[n];\n    foreach(i; 0 .. n)\n    {\n        if(i % 2 == 0)\n\
    \        {\n            result[i] = factorial(i);\n        }\n        else\n \
    \       {\n            result[i] = sum(1 .. i);\n        }\n    }\n    return\
    \ result;\n}", "{\n    long[] result = new long[n];\n    foreach(i; 0 .. n)\n\
    \    {\n        if(i % 2 == 0)\n        {\n            result[i] = factorial(i);\n\
    \        }\n        else\n        {\n            result[i] = i * (i + 1) / 2;\n\
    \        }\n    }\n    return result;\n}", "{\n    long[] res = new long[n];\n\
    \    foreach(i, ref e; res)\n    {\n        if(i % 2 == 0)\n        {\n      \
    \      e = i.factorial;\n        }\n        else\n        {\n            e = i.iota.sum;\n\
    \        }\n    }\n    return res;\n}", "{\n    long[] result = new long[n];\n\
    \    foreach(i, ref e; result)\n    {\n        if(i % 2 == 0)\n        {\n   \
    \         e = i.factorial;\n        }\n        else\n        {\n            e\
    \ = i.iota.sum;\n        }\n    }\n    return result;\n}", "{\n    long[] result\
    \ = new long[n];\n    foreach(i, ref elem; result) \n    {\n        if(i % 2 ==\
    \ 0) \n        {\n            elem = factorial(i);\n        }\n        else \n\
    \        {\n            elem = i * (i + 1) / 2;\n        }\n    }\n    return\
    \ result;\n}", "{\n    long[] result = new long[n];\n    foreach(i; 0 .. n)\n\
    \    {\n        if(i % 2 == 0)\n        {\n            result[i] = factorial(i);\n\
    \        }\n        else\n        {\n            result[i] = i * (i + 1) / 2;\n\
    \        }\n    }\n    return result;\n}", "{\n    long[] result = new long[n];\n\
    \    for (long i = 0; i < n; i++)\n    {\n        if (i % 2 == 0)\n        {\n\
    \            result[i] = factorial(i);\n        }\n        else\n        {\n \
    \           result[i] = sum(i);\n        }\n    }\n    return result;\n}", "{\n\
    \    long[] result = new long[n];\n    foreach(i; 0 .. n)\n    {\n        if(i\
    \ % 2 == 0)\n        {\n            result[i] = factorial(i);\n        }\n   \
    \     else\n        {\n            result[i] = i * (i + 1) / 2;\n        }\n \
    \   }\n    return result;\n}", "{\n    long[] result = new long[n];\n    foreach(i;\
    \ 0 .. n)\n    {\n        if(i % 2 == 0)\n        {\n            result[i] = factorial(i);\n\
    \        }\n        else\n        {\n            result[i] = i * (i + 1) / 2;\n\
    \        }\n    }\n    return result;\n}", "{\n    long[] result = new long[n];\n\
    \    foreach(i; 0 .. n)\n    {\n        if(i % 2 == 0)\n        {\n          \
    \  result[i] = factorial(i);\n        }\n        else\n        {\n           \
    \ result[i] = i * (i + 1) / 2;\n        }\n    }\n    return result;\n}", "{\n\
    \    long[] res = new long[n];\n    foreach(i; 0 .. n)\n    {\n        if(i %\
    \ 2 == 0)\n        {\n            res[i] = factorial(i);\n        }\n        else\n\
    \        {\n            res[i] = i * (i + 1) / 2;\n        }\n    }\n    return\
    \ res;\n}", "{\n    long[] result = new long[n];\n    foreach(i; 0 .. n)\n   \
    \ {\n        if(i % 2 == 0)\n        {\n            result[i] = factorial(i);\n\
    \        }\n        else\n        {\n            result[i] = sum(i);\n       \
    \ }\n    }\n    return result;\n}", "{\n    long[] result = new long[n];\n   \
    \ foreach(i; 0 .. n)\n    {\n        result[i] = i % 2 == 0 ? factorial(i) : sum(1\
    \ .. i);\n    }\n    return result;\n}", "{\n    long[] result = new long[n];\n\
    \    foreach(i; 0 .. n)\n    {\n        if(i % 2 == 0)\n        {\n          \
    \  result[i] = factorial(i);\n        }\n        else\n        {\n           \
    \ result[i] = sum(i);\n        }\n    }\n    return result;\n}", "{\n    long[]\
    \ result = new long[n];\n    for (long i = 0; i < n; i++) \n    {\n        if\
    \ (i % 2 == 0) \n        {\n            result[i] = factorial(i);\n        } \n\
    \        else \n        {\n            result[i] = sum(i);\n        }\n    }\n\
    \    return result;\n}", "{\n    long[] result = new long[n];\n    for (long i\
    \ = 0; i < n; i++)\n    {\n        if (i % 2 == 0)\n        {\n            result[i]\
    \ = factorial(i);\n        }\n        else\n        {\n            result[i] =\
    \ sum(i);\n        }\n    }\n    return result;\n}\nlong factorial(long n)\n{\n\
    \    long result = 1;\n    for (long i = 1; i <= n; i++)\n    {\n        result\
    \ *= i;\n    }\n    return result;\n}\nlong sum(long n)\n{\n    long result =\
    \ 0;\n    for (long i = 1; i <= n; i++)\n    {\n        result += i;\n    }\n\
    \    return result;\n}", "{\n    long[] result = new long[n];\n    foreach(i;\
    \ 0 .. n)\n    {\n        if(i % 2 == 0)\n        {\n            result[i] = factorial(i);\n\
    \        }\n        else\n        {\n            result[i] = i * (i + 1) / 2;\n\
    \        }\n    }\n    return result;\n}", "{\n    long[] result = new long[n];\n\
    \    foreach(i; 0 .. n)\n    {\n        if(i % 2 == 0)\n        {\n          \
    \  result[i] = factorial(i);\n        }\n        else\n        {\n           \
    \ result[i] = i * (i + 1) / 2;\n        }\n    }\n    return result;\n}", "{\n\
    \    long[] result = new long[n];\n    foreach(i; 0 .. n)\n    {\n        if (i\
    \ % 2 == 0)\n        {\n            result[i] = factorial(i);\n        }\n   \
    \     else\n        {\n            result[i] = sum(i);\n        }\n    }\n   \
    \ return result;\n}", "{\n    long[] result = new long[n];\n    for (long i =\
    \ 0; i < n; i++)\n    {\n        if (i % 2 == 0)\n        {\n            result[i]\
    \ = factorial(i);\n        }\n        else\n        {\n            result[i] =\
    \ sum(i);\n        }\n    }\n    return result;\n}\nlong factorial(long n)\n{\n\
    \    long result = 1;\n    for (long i = 1; i <= n; i++)\n    {\n        result\
    \ *= i;\n    }\n    return result;\n}\nlong sum(long n)\n{\n    long result =\
    \ 0;\n    for (long i = 1; i <= n; i++)\n    {\n        result += i;\n    }\n\
    \    return result;\n}", "{\n    long[] result = new long[n];\n    foreach(i;\
    \ 0 .. n)\n    {\n        if(i % 2 == 0)\n        {\n            result[i] = factorial(i);\n\
    \        }\n        else\n        {\n            result[i] = i * (i + 1) / 2;\n\
    \        }\n    }\n    return result;\n}", "{\n    long[] result = new long[n];\n\
    \    for (long i = 0; i < n; i++)\n    {\n        if (i % 2 == 0)\n        {\n\
    \            result[i] = factorial(i);\n        }\n        else\n        {\n \
    \           result[i] = sum(i);\n        }\n    }\n    return result;\n}\nlong\
    \ factorial(long n)\n{\n    long result = 1;\n    for (long i = 1; i <= n; i++)\n\
    \    {\n        result *= i;\n    }\n    return result;\n}\nlong sum(long n)\n\
    {\n    long result = 0;\n    for (long i = 1; i <= n; i++)\n    {\n        result\
    \ += i;\n    }\n    return result;\n}\n/*\n    Implement the function f that takes\
    \ n as a parameter,\n    and returns a list of size n, such that the value of\
    \ the element at index i is the factorial of i if i is even\n    or the sum of\
    \ numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i\
    \ is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n\
    \        \n*/\nlong[] f(long n) \n{\n    long[] result = new long[n];\n    for\
    \ (long i = 0; i < n; i++)\n    {\n        if (i % 2 == 0)\n        {\n      \
    \      result[i] = factorial(i);\n        }\n        else\n        {\n       \
    \     result[i] = sum(i);\n        }\n    }\n    return result;\n}\nlong factorial(long\
    \ n)\n{\n    long result = 1;\n    for (long i = 1; i <= n; i++)\n    {\n    \
    \    result *= i;\n    }\n    return result;\n}\nlong sum(long n)\n{\n    long\
    \ result = 0;\n    for (long i = 1; i <= n; i++)\n    {\n        result += i;\n\
    \    }\n    return result;\n}\n/*\n    Implement the function f that takes n as\
    \ a parameter,\n    and returns a list of", "{\n    long[] result = new long[n];\n\
    \    for (long i = 0; i < n; i++)\n    {\n        if (i % 2 == 0)\n        {\n\
    \            result[i] = factorial(i);\n        }\n        else\n        {\n \
    \           result[i] = sum(i);\n        }\n    }\n    return result;\n}", "{\n\
    \    long[] result = new long[n];\n    foreach(i; 0 .. n)\n    {\n        if(i\
    \ % 2 == 0)\n        {\n            result[i] = factorial(i);\n        }\n   \
    \     else\n        {\n            result[i] = i * (i + 1) / 2;\n        }\n \
    \   }\n    return result;\n}", "{\n    long[] result = new long[n];\n    for (long\
    \ i = 0; i < n; i++)\n    {\n        if (i % 2 == 0)\n        {\n            result[i]\
    \ = factorial(i);\n        }\n        else\n        {\n            result[i] =\
    \ sum(i);\n        }\n    }\n    return result;\n}\nlong factorial(long n)\n{\n\
    \    long result = 1;\n    for (long i = 1; i <= n; i++)\n    {\n        result\
    \ *= i;\n    }\n    return result;\n}\nlong sum(long n)\n{\n    long result =\
    \ 0;\n    for (long i = 1; i <= n; i++)\n    {\n        result += i;\n    }\n\
    \    return result;\n}", "{\n    long[] result = new long[n];\n    foreach(i;\
    \ 0 .. n)\n    {\n        if (i % 2 == 0)\n        {\n            result[i] =\
    \ factorial(i);\n        }\n        else\n        {\n            result[i] = sum(i);\n\
    \        }\n    }\n    return result;\n}", "{\n    long[] ret = new long[n];\n\
    \    foreach(i, ref e; ret)\n    {\n        if(i % 2 == 0)\n        {\n      \
    \      e = factorial(i);\n        }\n        else\n        {\n            e =\
    \ sum(i);\n        }\n    }\n    return ret;\n}", "{\n    long[] result = new\
    \ long[n];\n    for (long i = 0; i < n; i++)\n    {\n        if (i % 2 == 0)\n\
    \        {\n            result[i] = factorial(i);\n        }\n        else\n \
    \       {\n            result[i] = sum(i);\n        }\n    }\n    return result;\n\
    }", "{\n    long[] result = new long[n];\n    for (long i = 0; i < n; i++)\n \
    \   {\n        if (i % 2 == 0)\n        {\n            result[i] = factorial(i);\n\
    \        }\n        else\n        {\n            result[i] = sum(i);\n       \
    \ }\n    }\n    return result;\n}", "{\n    long[] result = new long[n];\n   \
    \ foreach(i; 0 .. n)\n    {\n        if(i % 2 == 0)\n        {\n            result[i]\
    \ = factorial(i);\n        }\n        else\n        {\n            result[i] =\
    \ i * (i + 1) / 2;\n        }\n    }\n    return result;\n}", "{\n    long[] result\
    \ = new long[n];\n    foreach(i; 0 .. n)\n    {\n        if(i % 2 == 0)\n    \
    \    {\n            result[i] = factorial(i);\n        }\n        else\n     \
    \   {\n            result[i] = i * (i + 1) / 2;\n        }\n    }\n    return\
    \ result;\n}", "{\n    long[] result = new long[n];\n    foreach(i; 0 .. n)\n\
    \    {\n        if(i % 2 == 0)\n        {\n            result[i] = factorial(i);\n\
    \        }\n        else\n        {\n            result[i] = i * (i + 1) / 2;\n\
    \        }\n    }\n    return result;\n}", "{\n    long[] res = new long[n];\n\
    \    foreach(i; 0 .. n)\n    {\n        if(i % 2 == 0)\n        {\n          \
    \  res[i] = factorial(i);\n        }\n        else\n        {\n            res[i]\
    \ = i * (i + 1) / 2;\n        }\n    }\n    return res;\n}", "{\n    long[] result\
    \ = new long[n];\n    foreach(i; 0 .. n)\n    {\n        if(i % 2 == 0)\n    \
    \    {\n            result[i] = factorial(i);\n        }\n        else\n     \
    \   {\n            result[i] = i * (i + 1) / 2;\n        }\n    }\n    return\
    \ result;\n}", "{\n    long[] result = new long[n];\n    for (long i = 0; i <\
    \ n; i++)\n    {\n        if (i % 2 == 0)\n        {\n            result[i] =\
    \ factorial(i);\n        }\n        else\n        {\n            result[i] = sum(i);\n\
    \        }\n    }\n    return result;\n}", "{\n    long[] result = new long[n];\n\
    \    foreach(i; 0 .. n)\n    {\n        if(i % 2 == 0)\n        {\n          \
    \  result[i] = factorial(i);\n        }\n        else\n        {\n           \
    \ result[i] = i * (i + 1) / 2;\n        }\n    }\n    return result;\n}", "{\n\
    \    long[] result = new long[n];\n    foreach(i, ref e; result)\n    {\n    \
    \    if(i % 2 == 0)\n        {\n            e = factorial(i);\n        }\n   \
    \     else\n        {\n            e = i * (i + 1) / 2;\n        }\n    }\n  \
    \  return result;\n}", "{\n    long[] result = new long[n];\n    foreach(i; 0\
    \ .. n)\n    {\n        if(i % 2 == 0)\n        {\n            result[i] = factorial(i);\n\
    \        }\n        else\n        {\n            result[i] = i * (i + 1) / 2;\n\
    \        }\n    }\n    return result;\n}", "{\n    long[] result = new long[n];\n\
    \    for (long i = 0; i < n; i++) \n    {\n        if (i % 2 == 0) \n        {\n\
    \            result[i] = factorial(i);\n        } \n        else \n        {\n\
    \            result[i] = sum(i);\n        }\n    }\n    return result;\n}\nlong\
    \ factorial(long n) \n{\n    long result = 1;\n    for (long i = 1; i <= n; i++)\
    \ \n    {\n        result *= i;\n    }\n    return result;\n}\nlong sum(long n)\
    \ \n{\n    long result = 0;\n    for (long i = 1; i <= n; i++) \n    {\n     \
    \   result += i;\n    }\n    return result;\n}\n/*\n    Implement the function\
    \ g that takes a list of integers as a parameter,\n    and returns a list of integers\
    \ where each element is the sum of the elements of the original list,\n    except\
    \ the element at the same index.\n    Example:\n        g([1, 2, 3]) == [5, 4,\
    \ 3]\n        g([1, 2, 3, 4]) == [9, 8, 7, 6]\n*/\nlong[] g(long[] list) \n{\n\
    \    long[] result = new long[list.length];\n    for (long i = 0; i < list.length;\
    \ i++) \n    {\n        result[i] = sum(list) - list[i];\n    }\n    return result;\n\
    }\nlong sum(long[] list) \n{\n    long result = 0;\n    for (long i = 0; i < list.length;\
    \ i++) \n    {\n        result += list[i];\n    }\n    return result;\n}\n/*\n\
    \    Implement the function h that takes a list of integers as a parameter,\n\
    \    and returns a list of integers where each element is the product of the elements\
    \ of the original list,\n    except the element at the same index.\n    Example:\n\
    \        h([1, 2, 3]) == [6, 3, 2]\n        h([1, 2, 3, 4]) == [24,", "{\n   \
    \ long[] ret = new long[n];\n    for (long i = 0; i < n; i++)\n    {\n       \
    \ if (i % 2 == 0)\n        {\n            ret[i] = factorial(i);\n        }\n\
    \        else\n        {\n            ret[i] = sum(i);\n        }\n    }\n   \
    \ return ret;\n}\nlong factorial(long n)\n{\n    long ret = 1;\n    for (long\
    \ i = 1; i <= n; i++)\n    {\n        ret *= i;\n    }\n    return ret;\n}\nlong\
    \ sum(long n)\n{\n    long ret = 0;\n    for (long i = 1; i <= n; i++)\n    {\n\
    \        ret += i;\n    }\n    return ret;\n}", "{\n    long[] result = new long[n];\n\
    \    foreach(i; 0 .. n)\n    {\n        if(i % 2 == 0)\n        {\n          \
    \  result[i] = factorial(i);\n        }\n        else\n        {\n           \
    \ result[i] = i * (i + 1) / 2;\n        }\n    }\n    return result;\n}", "{\n\
    \    long[] result = new long[n];\n    foreach(i; 0 .. n)\n    {\n        if(i\
    \ % 2 == 0)\n        {\n            result[i] = factorial(i);\n        }\n   \
    \     else\n        {\n            result[i] = i * (i + 1) / 2;\n        }\n \
    \   }\n    return result;\n}", "{\n    long[] result = new long[n];\n    foreach(i;\
    \ 0 .. n)\n    {\n        if(i % 2 == 0)\n        {\n            result[i] = factorial(i);\n\
    \        }\n        else\n        {\n            result[i] = sum(i);\n       \
    \ }\n    }\n    return result;\n}", "{\n    long[] result = new long[n];\n   \
    \ foreach(i; 0 .. n)\n    {\n        if(i % 2 == 0)\n        {\n            result[i]\
    \ = factorial(i);\n        }\n        else\n        {\n            result[i] =\
    \ i * (i + 1) / 2;\n        }\n    }\n    return result;\n}", "{\n    long[] result\
    \ = new long[n];\n    foreach(i; 0 .. n)\n    {\n        if(i % 2 == 0)\n    \
    \    {\n            result[i] = factorial(i);\n        }\n        else\n     \
    \   {\n            result[i] = sum(1 .. i);\n        }\n    }\n    return result;\n\
    }", "{\n    long[] result = new long[n];\n    for (long i = 0; i < n; i++)\n \
    \   {\n        if (i % 2 == 0)\n        {\n            result[i] = factorial(i);\n\
    \        }\n        else\n        {\n            result[i] = sum(i);\n       \
    \ }\n    }\n    return result;\n}\nlong factorial(long n)\n{\n    long result\
    \ = 1;\n    for (long i = 1; i <= n; i++)\n    {\n        result *= i;\n    }\n\
    \    return result;\n}\nlong sum(long n)\n{\n    long result = 0;\n    for (long\
    \ i = 1; i <= n; i++)\n    {\n        result += i;\n    }\n    return result;\n\
    }", "{\n    long[] result = new long[n];\n    foreach(i; 0 .. n)\n    {\n    \
    \    if(i % 2 == 0)\n        {\n            result[i] = factorial(i);\n      \
    \  }\n        else\n        {\n            result[i] = i * (i + 1) / 2;\n    \
    \    }\n    }\n    return result;\n}", "{\n    long[] result;\n    result.length\
    \ = n;\n    foreach(i; 0 .. n)\n    {\n        if(i % 2 == 0)\n        {\n   \
    \         result[i] = factorial(i);\n        }\n        else\n        {\n    \
    \        result[i] = sum(i);\n        }\n    }\n    return result;\n}\nlong factorial(long\
    \ n)\n{\n    long result = 1;\n    foreach(i; 1 .. n + 1)\n    {\n        result\
    \ *= i;\n    }\n    return result;\n}\nlong sum(long n)\n{\n    long result =\
    \ 0;\n    foreach(i; 1 .. n + 1)\n    {\n        result += i;\n    }\n    return\
    \ result;\n}", "{\n    long[] result = new long[n];\n    foreach(i; 0 .. n)\n\
    \    {\n        if(i % 2 == 0)\n        {\n            result[i] = factorial(i);\n\
    \        }\n        else\n        {\n            result[i] = sum(i);\n       \
    \ }\n    }\n    return result;\n}", "{\n    long[] result = new long[n];\n   \
    \ foreach(i; 0 .. n)\n    {\n        if(i % 2 == 0)\n        {\n            result[i]\
    \ = factorial(i);\n        }\n        else\n        {\n            result[i] =\
    \ sum(1 .. i);\n        }\n    }\n    return result;\n}", "{\n    long[] result\
    \ = new long[n];\n    foreach(i; 0 .. n)\n    {\n        if(i % 2 == 0)\n    \
    \    {\n            result[i] = factorial(i);\n        }\n        else\n     \
    \   {\n            result[i] = sum(1 .. i);\n        }\n    }\n    return result;\n\
    }", "{\n    long[] result = new long[n];\n    foreach(i; 0 .. n)\n    {\n    \
    \    if(i % 2 == 0)\n        {\n            result[i] = factorial(i);\n      \
    \  }\n        else\n        {\n            result[i] = i * (i + 1) / 2;\n    \
    \    }\n    }\n    return result;\n}", "{\n    long[] result = new long[n];\n\
    \    for (long i = 0; i < n; i++)\n    {\n        if (i % 2 == 0)\n        {\n\
    \            result[i] = factorial(i);\n        }\n        else\n        {\n \
    \           result[i] = sum(i);\n        }\n    }\n    return result;\n}\nlong\
    \ factorial(long n)\n{\n    long result = 1;\n    for (long i = 1; i <= n; i++)\n\
    \    {\n        result *= i;\n    }\n    return result;\n}\nlong sum(long n)\n\
    {\n    long result = 0;\n    for (long i = 1; i <= n; i++)\n    {\n        result\
    \ += i;\n    }\n    return result;\n}", "{\n    long[] result = new long[n];\n\
    \    for (long i = 0; i < n; i++)\n    {\n        if (i % 2 == 0)\n        {\n\
    \            result[i] = factorial(i);\n        }\n        else\n        {\n \
    \           result[i] = sum(i);\n        }\n    }\n    return result;\n}\nlong\
    \ factorial(long n)\n{\n    long result = 1;\n    for (long i = 1; i <= n; i++)\n\
    \    {\n        result *= i;\n    }\n    return result;\n}\nlong sum(long n)\n\
    {\n    long result = 0;\n    for (long i = 1; i <= n; i++)\n    {\n        result\
    \ += i;\n    }\n    return result;\n}", "{\n    long[] result = new long[n];\n\
    \    foreach(i; 0 .. n)\n    {\n        if(i % 2 == 0)\n        {\n          \
    \  result[i] = factorial(i);\n        }\n        else\n        {\n           \
    \ result[i] = i * (i + 1) / 2;\n        }\n    }\n    return result;\n}", "{\n\
    \    long[] result = new long[n];\n    foreach(i; 0 .. n)\n    {\n        if(i\
    \ % 2 == 0)\n        {\n            result[i] = factorial(i);\n        }\n   \
    \     else\n        {\n            result[i] = sum(1 .. i);\n        }\n    }\n\
    \    return result;\n}", "{\n    long[] result = new long[n];\n    foreach(i,\
    \ ref e; result)\n    {\n        if(i % 2 == 0)\n        {\n            e = factorial(i);\n\
    \        }\n        else\n        {\n            e = i * (i + 1) / 2;\n      \
    \  }\n    }\n    return result;\n}", "{\n    long[] result = new long[n];\n  \
    \  foreach(i; 0 .. n)\n    {\n        if(i % 2 == 0)\n        {\n            result[i]\
    \ = factorial(i);\n        }\n        else\n        {\n            result[i] =\
    \ sum(i);\n        }\n    }\n    return result;\n}", "{\n    long[] result = new\
    \ long[n];\n    foreach(i; 0 .. n)\n    {\n        if(i % 2 == 0)\n        {\n\
    \            result[i] = factorial(i);\n        }\n        else\n        {\n \
    \           result[i] = sum(i);\n        }\n    }\n    return result;\n}", "{\n\
    \    long[] result = new long[n];\n    foreach(i; 0 .. n)\n    {\n        if(i\
    \ % 2 == 0)\n        {\n            result[i] = factorial(i);\n        }\n   \
    \     else\n        {\n            result[i] = i * (i + 1) / 2;\n        }\n \
    \   }\n    return result;\n}", "{\n    long[] result = new long[n];\n    for (long\
    \ i = 0; i < n; i++)\n    {\n        if (i % 2 == 0)\n        {\n            result[i]\
    \ = factorial(i);\n        }\n        else\n        {\n            result[i] =\
    \ sum(i);\n        }\n    }\n    return result;\n}\nlong factorial(long n)\n{\n\
    \    long result = 1;\n    for (long i = 1; i <= n; i++)\n    {\n        result\
    \ *= i;\n    }\n    return result;\n}\nlong sum(long n)\n{\n    long result =\
    \ 0;\n    for (long i = 1; i <= n; i++)\n    {\n        result += i;\n    }\n\
    \    return result;\n}", "{\n    long[] result = new long[n];\n    foreach(i;\
    \ 0 .. n)\n    {\n        if(i % 2 == 0)\n        {\n            result[i] = factorial(i);\n\
    \        }\n        else\n        {\n            result[i] = sum(1 .. i);\n  \
    \      }\n    }\n    return result;\n}", "{\n    long[] result = new long[n];\n\
    \    foreach(i; 0 .. n)\n    {\n        if(i % 2 == 0)\n        {\n          \
    \  result[i] = factorial(i);\n        }\n        else\n        {\n           \
    \ result[i] = i * (i + 1) / 2;\n        }\n    }\n    return result;\n}", "{\n\
    \    long[] result = new long[n];\n    foreach(i; 0 .. n)\n    {\n        if (i\
    \ % 2 == 0)\n        {\n            result[i] = factorial(i);\n        }\n   \
    \     else\n        {\n            result[i] = i * (i + 1) / 2;\n        }\n \
    \   }\n    return result;\n}", "{\n    long[] result = new long[n];\n    foreach(i,\
    \ ref e; result)\n    {\n        if(i % 2 == 0)\n        {\n            e = i.factorial;\n\
    \        }\n        else\n        {\n            e = i.iota.sum;\n        }\n\
    \    }\n    return result;\n}", "{\n    long[] result = new long[n];\n    for\
    \ (long i = 0; i < n; i++)\n    {\n        if (i % 2 == 0)\n        {\n      \
    \      result[i] = factorial(i);\n        }\n        else\n        {\n       \
    \     result[i] = sum(i);\n        }\n    }\n    return result;\n}\nlong factorial(long\
    \ n)\n{\n    long result = 1;\n    for (long i = 1; i <= n; i++)\n    {\n    \
    \    result *= i;\n    }\n    return result;\n}\nlong sum(long n)\n{\n    long\
    \ result = 0;\n    for (long i = 1; i <= n; i++)\n    {\n        result += i;\n\
    \    }\n    return result;\n}", "{\n    long[] result = new long[n];\n    foreach(i;\
    \ 0 .. n)\n    {\n        if(i % 2 == 0)\n        {\n            result[i] = factorial(i);\n\
    \        }\n        else\n        {\n            result[i] = i * (i + 1) / 2;\n\
    \        }\n    }\n    return result;\n}", "{\n    long[] result = new long[n];\n\
    \    for (long i = 0; i < n; i++)\n    {\n        if (i % 2 == 0)\n        {\n\
    \            result[i] = factorial(i);\n        }\n        else\n        {\n \
    \           result[i] = sum(i);\n        }\n    }\n    return result;\n}\nlong\
    \ factorial(long n)\n{\n    long result = 1;\n    for (long i = 1; i <= n; i++)\n\
    \    {\n        result *= i;\n    }\n    return result;\n}\nlong sum(long n)\n\
    {\n    long result = 0;\n    for (long i = 1; i <= n; i++)\n    {\n        result\
    \ += i;\n    }\n    return result;\n}", "{\n    long[] result = new long[n];\n\
    \    foreach(i; 0 .. n)\n    {\n        if(i % 2 == 0)\n        {\n          \
    \  result[i] = factorial(i);\n        }\n        else\n        {\n           \
    \ result[i] = sum(i);\n        }\n    }\n    return result;\n}", "{\n    long[]\
    \ res = new long[n];\n    foreach(i; 0 .. n)\n    {\n        if(i % 2 == 0)\n\
    \        {\n            res[i] = factorial(i);\n        }\n        else\n    \
    \    {\n            res[i] = sum(1 .. i);\n        }\n    }\n    return res;\n\
    }", "{\n    long[] result = new long[n];\n    foreach(i, ref e; result)\n    {\n\
    \        if(i % 2 == 0)\n        {\n            e = factorial(i);\n        }\n\
    \        else\n        {\n            e = i * (i + 1) / 2;\n        }\n    }\n\
    \    return result;\n}", "{\n    long[] result = new long[n];\n    foreach(i;\
    \ 0 .. n)\n    {\n        if(i % 2 == 0)\n        {\n            result[i] = factorial(i);\n\
    \        }\n        else\n        {\n            result[i] = i * (i + 1) / 2;\n\
    \        }\n    }\n    return result;\n}", "{\n    long[] result = new long[n];\n\
    \    foreach(i; 0 .. n)\n    {\n        if(i % 2 == 0)\n        {\n          \
    \  result[i] = factorial(i);\n        }\n        else\n        {\n           \
    \ result[i] = i * (i + 1) / 2;\n        }\n    }\n    return result;\n}", "{\n\
    \    long[] result = new long[n];\n    for (long i = 0; i < n; i++) \n    {\n\
    \        if (i % 2 == 0) \n        {\n            result[i] = factorial(i);\n\
    \        } \n        else \n        {\n            result[i] = sum(i);\n     \
    \   }\n    }\n    return result;\n}\nlong factorial(long n) \n{\n    long result\
    \ = 1;\n    for (long i = 1; i <= n; i++) \n    {\n        result *= i;\n    }\n\
    \    return result;\n}\nlong sum(long n) \n{\n    long result = 0;\n    for (long\
    \ i = 1; i <= n; i++) \n    {\n        result += i;\n    }\n    return result;\n\
    }", "{\n    long[] result = new long[n];\n    for (long i = 0; i < n; i++)\n \
    \   {\n        if (i % 2 == 0)\n        {\n            result[i] = factorial(i);\n\
    \        }\n        else\n        {\n            result[i] = sum(i);\n       \
    \ }\n    }\n    return result;\n}", "{\n    long[] result = new long[n];\n   \
    \ for (long i = 0; i < n; i++)\n    {\n        if (i % 2 == 0)\n        {\n  \
    \          result[i] = factorial(i);\n        }\n        else\n        {\n   \
    \         result[i] = sum(i);\n        }\n    }\n    return result;\n}\nlong factorial(long\
    \ n)\n{\n    long result = 1;\n    for (long i = 1; i <= n; i++)\n    {\n    \
    \    result *= i;\n    }\n    return result;\n}\nlong sum(long n)\n{\n    long\
    \ result = 0;\n    for (long i = 1; i <= n; i++)\n    {\n        result += i;\n\
    \    }\n    return result;\n}", "{\n    long[] result = new long[n];\n    foreach(i;\
    \ 0 .. n)\n    {\n        if(i % 2 == 0)\n        {\n            result[i] = factorial(i);\n\
    \        }\n        else\n        {\n            result[i] = i * (i + 1) / 2;\n\
    \        }\n    }\n    return result;\n}", "{\n    long[] result = new long[n];\n\
    \    for (long i = 0; i < n; i++) \n    {\n        if (i % 2 == 0) \n        {\n\
    \            result[i] = factorial(i);\n        } \n        else \n        {\n\
    \            result[i] = sum(i);\n        }\n    }\n    return result;\n}\nlong\
    \ factorial(long n) \n{\n    long result = 1;\n    for (long i = 1; i <= n; i++)\
    \ \n    {\n        result *= i;\n    }\n    return result;\n}\nlong sum(long n)\
    \ \n{\n    long result = 0;\n    for (long i = 1; i <= n; i++) \n    {\n     \
    \   result += i;\n    }\n    return result;\n}", "{\n    long[] result = new long[n];\n\
    \    for (long i = 0; i < n; i++)\n    {\n        if (i % 2 == 0)\n        {\n\
    \            result[i] = factorial(i);\n        }\n        else\n        {\n \
    \           result[i] = sum(i);\n        }\n    }\n    return result;\n}\nlong\
    \ factorial(long n)\n{\n    long result = 1;\n    for (long i = 1; i <= n; i++)\n\
    \    {\n        result *= i;\n    }\n    return result;\n}\nlong sum(long n)\n\
    {\n    long result = 0;\n    for (long i = 1; i <= n; i++)\n    {\n        result\
    \ += i;\n    }\n    return result;\n}", "{\n    long[] result = new long[n];\n\
    \    for (long i = 0; i < n; i++)\n    {\n        if (i % 2 == 0)\n        {\n\
    \            result[i] = factorial(i);\n        }\n        else\n        {\n \
    \           result[i] = sum(i);\n        }\n    }\n    return result;\n}\nlong\
    \ factorial(long n)\n{\n    long result = 1;\n    for (long i = 1; i <= n; i++)\n\
    \    {\n        result *= i;\n    }\n    return result;\n}\nlong sum(long n)\n\
    {\n    long result = 0;\n    for (long i = 1; i <= n; i++)\n    {\n        result\
    \ += i;\n    }\n    return result;\n}", "{\n    long[] result = new long[n];\n\
    \    foreach(i; 0 .. n)\n    {\n        if(i % 2 == 0)\n        {\n          \
    \  result[i] = factorial(i);\n        }\n        else\n        {\n           \
    \ result[i] = sum(i);\n        }\n    }\n    return result;\n}", "{\n    long[]\
    \ result = new long[n];\n    for (long i = 0; i < n; i++) \n    {\n        if\
    \ (i % 2 == 0) \n        {\n            result[i] = factorial(i);\n        } \n\
    \        else \n        {\n            result[i] = sum(i);\n        }\n    }\n\
    \    return result;\n}", "{\n    long[] result = new long[n];\n    for (long i\
    \ = 0; i < n; i++)\n    {\n        if (i % 2 == 0)\n        {\n            result[i]\
    \ = factorial(i);\n        }\n        else\n        {\n            result[i] =\
    \ sum(i);\n        }\n    }\n    return result;\n}", "{\n    long[] result = new\
    \ long[n];\n    foreach(i; 0 .. n)\n    {\n        if(i % 2 == 0)\n        {\n\
    \            result[i] = factorial(i);\n        }\n        else\n        {\n \
    \           result[i] = sum(1 .. i);\n        }\n    }\n    return result;\n}",
  "{\n    long[] result = new long[n];\n    for (long i = 0; i < n; i++)\n    {\n\
    \        if (i % 2 == 0)\n        {\n            result[i] = factorial(i);\n \
    \       }\n        else\n        {\n            result[i] = sum(i);\n        }\n\
    \    }\n    return result;\n}\nlong factorial(long n)\n{\n    long result = 1;\n\
    \    for (long i = 1; i <= n; i++)\n    {\n        result *= i;\n    }\n    return\
    \ result;\n}\nlong sum(long n)\n{\n    long result = 0;\n    for (long i = 1;\
    \ i <= n; i++)\n    {\n        result += i;\n    }\n    return result;\n}", "{\n\
    \    long[] result = new long[n];\n    for (long i = 0; i < n; i++) \n    {\n\
    \        if (i % 2 == 0) \n        {\n            result[i] = factorial(i);\n\
    \        } \n        else \n        {\n            result[i] = sum(i);\n     \
    \   }\n    }\n    return result;\n}", "{\n    long[] result = new long[n];\n \
    \   foreach(i; 0 .. n)\n    {\n        if(i % 2 == 0)\n        {\n           \
    \ result[i] = factorial(i);\n        }\n        else\n        {\n            result[i]\
    \ = i * (i + 1) / 2;\n        }\n    }\n    return result;\n}", "{\n    long[]\
    \ result = new long[n];\n    foreach(i, ref e; result)\n    {\n        if (i %\
    \ 2 == 0)\n        {\n            e = factorial(i);\n        }\n        else\n\
    \        {\n            e = sum(i);\n        }\n    }\n    return result;\n}",
  "{\n    long[] result = new long[n];\n    for (long i = 0; i < n; i++)\n    {\n\
    \        if (i % 2 == 0)\n        {\n            result[i] = factorial(i);\n \
    \       }\n        else\n        {\n            result[i] = sum(i);\n        }\n\
    \    }\n    return result;\n}\nlong factorial(long n)\n{\n    long result = 1;\n\
    \    for (long i = 1; i <= n; i++)\n    {\n        result *= i;\n    }\n    return\
    \ result;\n}\nlong sum(long n)\n{\n    long result = 0;\n    for (long i = 1;\
    \ i <= n; i++)\n    {\n        result += i;\n    }\n    return result;\n}", "{\n\
    \    long[] result = new long[n];\n    for (long i = 0; i < n; i++)\n    {\n \
    \       if (i % 2 == 0)\n        {\n            result[i] = factorial(i);\n  \
    \      }\n        else\n        {\n            result[i] = sum(i);\n        }\n\
    \    }\n    return result;\n}", "{\n    long[] result = new long[n];\n    for\
    \ (long i = 0; i < n; i++)\n    {\n        if (i % 2 == 0)\n        {\n      \
    \      result[i] = factorial(i);\n        }\n        else\n        {\n       \
    \     result[i] = sum(i);\n        }\n    }\n    return result;\n}\nlong factorial(long\
    \ n)\n{\n    long result = 1;\n    for (long i = 1; i <= n; i++)\n    {\n    \
    \    result *= i;\n    }\n    return result;\n}\nlong sum(long n)\n{\n    long\
    \ result = 0;\n    for (long i = 1; i <= n; i++)\n    {\n        result += i;\n\
    \    }\n    return result;\n}", "{\n    long[] result = new long[n];\n    foreach(i;\
    \ 0 .. n)\n    {\n        if(i % 2 == 0)\n        {\n            result[i] = factorial(i);\n\
    \        }\n        else\n        {\n            result[i] = sum(1 .. i);\n  \
    \      }\n    }\n    return result;\n}", "{\n    long[] result = new long[n];\n\
    \    for (long i = 0; i < n; i++) \n    {\n        if (i % 2 == 0) \n        {\n\
    \            result[i] = factorial(i);\n        } \n        else \n        {\n\
    \            result[i] = sum(i);\n        }\n    }\n    return result;\n}\nlong\
    \ factorial(long n) \n{\n    long result = 1;\n    for (long i = 1; i <= n; i++)\
    \ \n    {\n        result *= i;\n    }\n    return result;\n}\nlong sum(long n)\
    \ \n{\n    long result = 0;\n    for (long i = 1; i <= n; i++) \n    {\n     \
    \   result += i;\n    }\n    return result;\n}", "{\n    long[] result = new long[n];\n\
    \    foreach(i, ref e; result)\n    {\n        if(i % 2 == 0)\n        {\n   \
    \         e = factorial(i);\n        }\n        else\n        {\n            e\
    \ = i * (i + 1) / 2;\n        }\n    }\n    return result;\n}", "{\n    long[]\
    \ result = new long[n];\n    foreach(i;0..n)\n    {\n        if(i%2==0)\n    \
    \    {\n            result[i] = factorial(i);\n        }\n        else\n     \
    \   {\n            result[i] = sum(1,i);\n        }\n    }\n    return result;\n\
    }", "{\n    long[] result = new long[n];\n    for (long i = 0; i < n; i++) \n\
    \    {\n        if (i % 2 == 0) \n        {\n            result[i] = factorial(i);\n\
    \        } \n        else \n        {\n            result[i] = sum(i);\n     \
    \   }\n    }\n    return result;\n}", "{\n    long[] result = new long[n];\n \
    \   foreach(i, ref e; result)\n    {\n        if(i % 2 == 0)\n        {\n    \
    \        e = factorial(i);\n        }\n        else\n        {\n            e\
    \ = i * (i + 1) / 2;\n        }\n    }\n    return result;\n}", "{\n    long[]\
    \ result = new long[n];\n    foreach(i; 0 .. n)\n    {\n        if(i % 2 == 0)\n\
    \        {\n            result[i] = factorial(i);\n        }\n        else\n \
    \       {\n            result[i] = i * (i + 1) / 2;\n        }\n    }\n    return\
    \ result;\n}", "{\n    long[] result = new long[n];\n    foreach(i; 0 .. n)\n\
    \    {\n        if(i % 2 == 0)\n        {\n            result[i] = factorial(i);\n\
    \        }\n        else\n        {\n            result[i] = sum(1 .. i);\n  \
    \      }\n    }\n    return result;\n}", "{\n    long[] result = new long[n];\n\
    \    for (long i = 0; i < n; i++)\n    {\n        if (i % 2 == 0)\n        {\n\
    \            result[i] = factorial(i);\n        }\n        else\n        {\n \
    \           result[i] = sum(i);\n        }\n    }\n    return result;\n}\nlong\
    \ factorial(long n)\n{\n    long result = 1;\n    for (long i = 1; i <= n; i++)\n\
    \    {\n        result *= i;\n    }\n    return result;\n}\nlong sum(long n)\n\
    {\n    long result = 0;\n    for (long i = 1; i <= n; i++)\n    {\n        result\
    \ += i;\n    }\n    return result;\n}", "{\n    long[] result = new long[n];\n\
    \    foreach(i; 0 .. n)\n    {\n        if(i % 2 == 0)\n        {\n          \
    \  result[i] = factorial(i);\n        }\n        else\n        {\n           \
    \ result[i] = i * (i + 1) / 2;\n        }\n    }\n    return result;\n}", "{\n\
    \    long[] result = new long[n];\n    foreach(i; 0 .. n)\n    {\n        if(i\
    \ % 2 == 0)\n        {\n            result[i] = factorial(i);\n        }\n   \
    \     else\n        {\n            result[i] = i * (i + 1) / 2;\n        }\n \
    \   }\n    return result;\n}", "{\n    long[] result = new long[n];\n    foreach(i;\
    \ 0 .. n)\n    {\n        if(i % 2 == 0)\n        {\n            result[i] = factorial(i);\n\
    \        }\n        else\n        {\n            result[i] = i * (i + 1) / 2;\n\
    \        }\n    }\n    return result;\n}", "{\n    long[] result = new long[n];\n\
    \    foreach(i; 0 .. n)\n    {\n        if(i % 2 == 0)\n        {\n          \
    \  result[i] = factorial(i);\n        }\n        else\n        {\n           \
    \ result[i] = i * (i + 1) / 2;\n        }\n    }\n    return result;\n}", "{\n\
    \    long[] result = new long[n];\n    foreach(i, ref e; result)\n    {\n    \
    \    if(i % 2 == 0)\n        {\n            e = factorial(i);\n        }\n   \
    \     else\n        {\n            e = i * (i + 1) / 2;\n        }\n    }\n  \
    \  return result;\n}", "{\n    long[] result = new long[n];\n    foreach(i; 0\
    \ .. n)\n    {\n        if(i % 2 == 0)\n        {\n            result[i] = factorial(i);\n\
    \        }\n        else\n        {\n            result[i] = i * (i + 1) / 2;\n\
    \        }\n    }\n    return result;\n}", "{\n    long[] result = new long[n];\n\
    \    for (long i = 0; i < n; i++) \n    {\n        if (i % 2 == 0) \n        {\n\
    \            result[i] = factorial(i);\n        } \n        else \n        {\n\
    \            result[i] = sum(i);\n        }\n    }\n    return result;\n}", "{\n\
    \    long[] result = new long[n];\n    for (long i = 0; i < n; i++)\n    {\n \
    \       if (i % 2 == 0)\n        {\n            result[i] = factorial(i);\n  \
    \      }\n        else\n        {\n            result[i] = sum(i);\n        }\n\
    \    }\n    return result;\n}", "{\n    long[] result = new long[n];\n    foreach(i,\
    \ ref e; result)\n    {\n        if (i % 2 == 0)\n        {\n            e = factorial(i);\n\
    \        }\n        else\n        {\n            e = i * (i + 1) / 2;\n      \
    \  }\n    }\n    return result;\n}", "{\n    long[] result = new long[n];\n  \
    \  foreach(i; 0 .. n)\n    {\n        if(i % 2 == 0)\n        {\n            result[i]\
    \ = factorial(i);\n        }\n        else\n        {\n            result[i] =\
    \ i * (i + 1) / 2;\n        }\n    }\n    return result;\n}", "{\n    long[] result\
    \ = new long[n];\n    foreach(i; 0 .. n)\n    {\n        if(i % 2 == 0)\n    \
    \    {\n            result[i] = factorial(i);\n        }\n        else\n     \
    \   {\n            result[i] = sum(1 .. i);\n        }\n    }\n    return result;\n\
    }", "{\n    long[] result = new long[n];\n    for (long i = 0; i < n; i++)\n \
    \   {\n        if (i % 2 == 0)\n        {\n            result[i] = factorial(i);\n\
    \        }\n        else\n        {\n            result[i] = sum(i);\n       \
    \ }\n    }\n    return result;\n}\nlong factorial(long n)\n{\n    long result\
    \ = 1;\n    for (long i = 1; i <= n; i++)\n    {\n        result *= i;\n    }\n\
    \    return result;\n}\nlong sum(long n)\n{\n    long result = 0;\n    for (long\
    \ i = 1; i <= n; i++)\n    {\n        result += i;\n    }\n    return result;\n\
    }", "{\n    long[] result = new long[n];\n    foreach(i; 0 .. n)\n    {\n    \
    \    if(i % 2 == 0)\n        {\n            result[i] = factorial(i);\n      \
    \  }\n        else\n        {\n            result[i] = i * (i + 1) / 2;\n    \
    \    }\n    }\n    return result;\n}", "{\n    long[] result = new long[n];\n\
    \    foreach(i, ref e; result)\n    {\n        if (i % 2 == 0)\n        {\n  \
    \          e = factorial(i);\n        }\n        else\n        {\n           \
    \ e = sum(i);\n        }\n    }\n    return result;\n}", "{\n    long[] result\
    \ = new long[n];\n    foreach(i; 0 .. n)\n    {\n        if(i % 2 == 0)\n    \
    \    {\n            result[i] = factorial(i);\n        }\n        else\n     \
    \   {\n            result[i] = i * (i + 1) / 2;\n        }\n    }\n    return\
    \ result;\n}", "{\n    long[] result = new long[n];\n    foreach(i; 0 .. n)\n\
    \    {\n        if(i % 2 == 0)\n        {\n            result[i] = factorial(i);\n\
    \        }\n        else\n        {\n            result[i] = sum(1 .. i);\n  \
    \      }\n    }\n    return result;\n}", "{\n    long[] result = new long[n];\n\
    \    for (long i = 0; i < n; i++)\n    {\n        if (i % 2 == 0)\n        {\n\
    \            result[i] = factorial(i);\n        }\n        else\n        {\n \
    \           result[i] = sum(i);\n        }\n    }\n    return result;\n}\nlong\
    \ factorial(long n)\n{\n    long result = 1;\n    for (long i = 1; i <= n; i++)\n\
    \    {\n        result *= i;\n    }\n    return result;\n}\nlong sum(long n)\n\
    {\n    long result = 0;\n    for (long i = 1; i <= n; i++)\n    {\n        result\
    \ += i;\n    }\n    return result;\n}", "{\n    long[] result = new long[n];\n\
    \    foreach(i; 0 .. n)\n    {\n        if(i % 2 == 0)\n        {\n          \
    \  result[i] = factorial(i);\n        }\n        else\n        {\n           \
    \ result[i] = i * (i + 1) / 2;\n        }\n    }\n    return result;\n}", "{\n\
    \    long[] arr;\n    arr.length = n;\n    foreach(i; 0 .. n)\n    {\n       \
    \ if(i % 2 == 0)\n        {\n            arr[i] = factorial(i);\n        }\n \
    \       else\n        {\n            arr[i] = sum(1 .. i);\n        }\n    }\n\
    \    return arr;\n}", "{\n    long[] result = new long[n];\n    foreach(i; 0 ..\
    \ n)\n    {\n        if(i % 2 == 0)\n        {\n            result[i] = factorial(i);\n\
    \        }\n        else\n        {\n            result[i] = sum(1 .. i);\n  \
    \      }\n    }\n    return result;\n}", "{\n    long[] result = new long[n];\n\
    \    foreach(i; 0 .. n)\n    {\n        if(i % 2 == 0)\n        {\n          \
    \  result[i] = factorial(i);\n        }\n        else\n        {\n           \
    \ result[i] = i * (i + 1) / 2;\n        }\n    }\n    return result;\n}", "{\n\
    \    long[] result = new long[n];\n    foreach(i; 0 .. n)\n    {\n        if (i\
    \ % 2 == 0)\n        {\n            result[i] = factorial(i);\n        }\n   \
    \     else\n        {\n            result[i] = i * (i + 1) / 2;\n        }\n \
    \   }\n    return result;\n}", "{\n    long[] result = new long[n];\n    for (long\
    \ i = 0; i < n; i++)\n    {\n        if (i % 2 == 0)\n        {\n            result[i]\
    \ = factorial(i);\n        }\n        else\n        {\n            result[i] =\
    \ sum(i);\n        }\n    }\n    return result;\n}\nlong factorial(long n)\n{\n\
    \    long result = 1;\n    for (long i = 1; i <= n; i++)\n    {\n        result\
    \ *= i;\n    }\n    return result;\n}\nlong sum(long n)\n{\n    long result =\
    \ 0;\n    for (long i = 1; i <= n; i++)\n    {\n        result += i;\n    }\n\
    \    return result;\n}", "{\n    long[] result = new long[n];\n    foreach(i;\
    \ 0 .. n)\n    {\n        if(i % 2 == 0)\n        {\n            result[i] = factorial(i);\n\
    \        }\n        else\n        {\n            result[i] = i * (i + 1) / 2;\n\
    \        }\n    }\n    return result;\n}", "{\n    long[] result = new long[n];\n\
    \    for (long i = 0; i < n; i++)\n    {\n        if (i % 2 == 0)\n        {\n\
    \            result[i] = factorial(i);\n        }\n        else\n        {\n \
    \           result[i] = sum(i);\n        }\n    }\n    return result;\n}", "{\n\
    \    long[] result = new long[n];\n    for (long i = 0; i < n; i++)\n    {\n \
    \       if (i % 2 == 0)\n        {\n            result[i] = factorial(i);\n  \
    \      }\n        else\n        {\n            result[i] = sum(i);\n        }\n\
    \    }\n    return result;\n}", "{\n    long[] result = new long[n];\n    foreach(i;\
    \ 0 .. n)\n    {\n        if(i % 2 == 0)\n        {\n            result[i] = factorial(i);\n\
    \        }\n        else\n        {\n            result[i] = sum(1 .. i);\n  \
    \      }\n    }\n    return result;\n}", "{\n    long[] result = new long[n];\n\
    \    foreach(i; 0 .. n)\n    {\n        if(i % 2 == 0)\n        {\n          \
    \  result[i] = factorial(i);\n        }\n        else\n        {\n           \
    \ result[i] = i * (i + 1) / 2;\n        }\n    }\n    return result;\n}", "{\n\
    \    long[] result = new long[n];\n    foreach(i; 0 .. n)\n    {\n        if(i\
    \ % 2 == 0)\n        {\n            result[i] = factorial(i);\n        }\n   \
    \     else\n        {\n            result[i] = i * (i + 1) / 2;\n        }\n \
    \   }\n    return result;\n}", "{\n    long[] result = new long[n];\n    for (long\
    \ i = 0; i < n; i++) \n    {\n        if (i % 2 == 0) \n        {\n          \
    \  result[i] = factorial(i);\n        } \n        else \n        {\n         \
    \   result[i] = sum(i);\n        }\n    }\n    return result;\n}", "{\n    long[]\
    \ result = new long[n];\n    foreach(i; 0 .. n)\n    {\n        if (i % 2 == 0)\n\
    \        {\n            result[i] = factorial(i);\n        }\n        else\n \
    \       {\n            result[i] = sum(i);\n        }\n    }\n    return result;\n\
    }", "{\n    long[] result = new long[n];\n    foreach(i; 0 .. n)\n    {\n    \
    \    if(i % 2 == 0)\n        {\n            result[i] = factorial(i);\n      \
    \  }\n        else\n        {\n            result[i] = i * (i + 1) / 2;\n    \
    \    }\n    }\n    return result;\n}", "{\n    long[] result = new long[n];\n\
    \    foreach(i; 0 .. n)\n    {\n        if (i % 2 == 0)\n        {\n         \
    \   result[i] = factorial(i);\n        }\n        else\n        {\n          \
    \  result[i] = sum(i);\n        }\n    }\n    return result;\n}", "{\n    long[]\
    \ result = new long[n];\n    foreach(i; 0 .. n)\n    {\n        if (i % 2 == 0)\n\
    \        {\n            result[i] = factorial(i);\n        }\n        else\n \
    \       {\n            result[i] = i * (i + 1) / 2;\n        }\n    }\n    return\
    \ result;\n}", "{\n    long[] result = new long[n];\n    foreach(i; 0 .. n)\n\
    \    {\n        if(i % 2 == 0)\n        {\n            result[i] = factorial(i);\n\
    \        }\n        else\n        {\n            result[i] = i * (i + 1) / 2;\n\
    \        }\n    }\n    return result;\n}", "{\n    long[] result = new long[n];\n\
    \    for (long i = 0; i < n; i++) \n    {\n        if (i % 2 == 0) \n        {\n\
    \            result[i] = factorial(i);\n        } \n        else \n        {\n\
    \            result[i] = sum(i);\n        }\n    }\n    return result;\n}\nlong\
    \ factorial(long n) \n{\n    long result = 1;\n    for (long i = 1; i <= n; i++)\
    \ \n    {\n        result *= i;\n    }\n    return result;\n}\nlong sum(long n)\
    \ \n{\n    long result = 0;\n    for (long i = 1; i <= n; i++) \n    {\n     \
    \   result += i;\n    }\n    return result;\n}", "{\n    long[] result = new long[n];\n\
    \    foreach(i; 0 .. n)\n    {\n        if(i % 2 == 0)\n        {\n          \
    \  result[i] = factorial(i);\n        }\n        else\n        {\n           \
    \ result[i] = i * (i + 1) / 2;\n        }\n    }\n    return result;\n}", "{\n\
    \    long[] result = new long[n];\n    foreach(i; 0 .. n)\n    {\n        if(i\
    \ % 2 == 0)\n        {\n            result[i] = factorial(i);\n        }\n   \
    \     else\n        {\n            result[i] = i * (i + 1) / 2;\n        }\n \
    \   }\n    return result;\n}", "{\n    long[] res = new long[n];\n    foreach(i;\
    \ 0 .. n)\n    {\n        if (i % 2 == 0)\n        {\n            res[i] = factorial(i);\n\
    \        }\n        else\n        {\n            res[i] = sum(1 .. i);\n     \
    \   }\n    }\n    return res;\n}", "{\n    long[] result = new long[n];\n    foreach(i;\
    \ 0 .. n) \n    {\n        if (i % 2 == 0) \n        {\n            result[i]\
    \ = factorial(i);\n        } \n        else \n        {\n            result[i]\
    \ = i * (i + 1) / 2;\n        }\n    }\n    return result;\n}", "{\n    long[]\
    \ result = new long[n];\n    foreach(i; 0 .. n)\n    {\n        if(i % 2 == 0)\n\
    \        {\n            result[i] = factorial(i);\n        }\n        else\n \
    \       {\n            result[i] = i * (i + 1) / 2;\n        }\n    }\n    return\
    \ result;\n}", "{\n    long[] result = new long[n];\n    foreach(i; 0 .. n)\n\
    \    {\n        if(i % 2 == 0)\n        {\n            result[i] = factorial(i);\n\
    \        }\n        else\n        {\n            result[i] = sum(1 .. i);\n  \
    \      }\n    }\n    return result;\n}", "{\n    long[] result = new long[n];\n\
    \    for (long i = 0; i < n; i++)\n    {\n        if (i % 2 == 0)\n        {\n\
    \            result[i] = factorial(i);\n        }\n        else\n        {\n \
    \           result[i] = sum(i);\n        }\n    }\n    return result;\n}\nlong\
    \ factorial(long n)\n{\n    long result = 1;\n    for (long i = 1; i <= n; i++)\n\
    \    {\n        result *= i;\n    }\n    return result;\n}\nlong sum(long n)\n\
    {\n    long result = 0;\n    for (long i = 1; i <= n; i++)\n    {\n        result\
    \ += i;\n    }\n    return result;\n}", "{\n    long[] result = new long[n];\n\
    \    foreach(i; 0 .. n)\n    {\n        if(i % 2 == 0)\n        {\n          \
    \  result[i] = factorial(i);\n        }\n        else\n        {\n           \
    \ result[i] = i * (i + 1) / 2;\n        }\n    }\n    return result;\n}", "{\n\
    \    long[] result = new long[n];\n    foreach(i; 0 .. n)\n    {\n        if(i\
    \ % 2 == 0)\n        {\n            result[i] = factorial(i);\n        }\n   \
    \     else\n        {\n            result[i] = i * (i + 1) / 2;\n        }\n \
    \   }\n    return result;\n}", "{\n    long[] result = new long[n];\n    foreach(i;\
    \ 0 .. n)\n    {\n        if(i % 2 == 0)\n        {\n            result[i] = factorial(i);\n\
    \        }\n        else\n        {\n            result[i] = sum(i);\n       \
    \ }\n    }\n    return result;\n}", "{\n    long[] result = new long[n];\n   \
    \ for (long i = 0; i < n; i++)\n    {\n        if (i % 2 == 0)\n        {\n  \
    \          result[i] = factorial(i);\n        }\n        else\n        {\n   \
    \         result[i] = sum(i);\n        }\n    }\n    return result;\n}", "{\n\
    \    long[] result = new long[n];\n    foreach(i; 0 .. n)\n    {\n        if (i\
    \ % 2 == 0)\n        {\n            result[i] = factorial(i);\n        }\n   \
    \     else\n        {\n            result[i] = sum(1 .. i);\n        }\n    }\n\
    \    return result;\n}", "{\n    long[] result = new long[n];\n    for (long i\
    \ = 0; i < n; i++) \n    {\n        if (i % 2 == 0) \n        {\n            result[i]\
    \ = factorial(i);\n        } \n        else \n        {\n            result[i]\
    \ = sum(i);\n        }\n    }\n    return result;\n}\nlong factorial(long n) \n\
    {\n    long result = 1;\n    for (long i = 1; i <= n; i++) \n    {\n        result\
    \ *= i;\n    }\n    return result;\n}\nlong sum(long n) \n{\n    long result =\
    \ 0;\n    for (long i = 1; i <= n; i++) \n    {\n        result += i;\n    }\n\
    \    return result;\n}", "{\n    long[] result = new long[n];\n    foreach(i;\
    \ 0 .. n)\n    {\n        if(i % 2 == 0)\n        {\n            result[i] = factorial(i);\n\
    \        }\n        else\n        {\n            result[i] = i * (i + 1) / 2;\n\
    \        }\n    }\n    return result;\n}", "{\n    long[] result = new long[n];\n\
    \    foreach(i; 0 .. n)\n    {\n        if (i % 2 == 0)\n        {\n         \
    \   result[i] = factorial(i);\n        }\n        else\n        {\n          \
    \  result[i] = sum(i);\n        }\n    }\n    return result;\n}", "{\n    long[]\
    \ result = new long[n];\n    foreach(i, ref e; result)\n    {\n        if(i %\
    \ 2 == 0)\n        {\n            e = factorial(i);\n        }\n        else\n\
    \        {\n            e = i * (i + 1) / 2;\n        }\n    }\n    return result;\n\
    }", "{\n    long[] result = new long[n];\n    foreach(i; 0 .. n)\n    {\n    \
    \    if(i % 2 == 0)\n        {\n            result[i] = factorial(i);\n      \
    \  }\n        else\n        {\n            result[i] = i * (i + 1) / 2;\n    \
    \    }\n    }\n    return result;\n}", "{\n    long[] result = new long[n];\n\
    \    foreach(i; 0 .. n)\n    {\n        if(i % 2 == 0)\n        {\n          \
    \  result[i] = factorial(i);\n        }\n        else\n        {\n           \
    \ result[i] = sum(1 .. i);\n        }\n    }\n    return result;\n}", "{\n   \
    \ long[] result = new long[n];\n    foreach(i; 0 .. n)\n    {\n        if(i %\
    \ 2 == 0)\n        {\n            result[i] = factorial(i);\n        }\n     \
    \   else\n        {\n            result[i] = i * (i + 1) / 2;\n        }\n   \
    \ }\n    return result;\n}", "{\n    long[] result = new long[n];\n    foreach(i;\
    \ 0 .. n)\n    {\n        if(i % 2 == 0)\n        {\n            result[i] = factorial(i);\n\
    \        }\n        else\n        {\n            result[i] = i * (i + 1) / 2;\n\
    \        }\n    }\n    return result;\n}", "{\n    long[] result = new long[n];\n\
    \    foreach(i; 0 .. n)\n    {\n        if(i % 2 == 0)\n        {\n          \
    \  result[i] = factorial(i);\n        }\n        else\n        {\n           \
    \ result[i] = sum(1 .. i);\n        }\n    }\n    return result;\n}", "{\n   \
    \ long[] result = new long[n];\n    foreach(i; 0 .. n)\n    {\n        if(i %\
    \ 2 == 0)\n        {\n            result[i] = factorial(i);\n        }\n     \
    \   else\n        {\n            result[i] = i * (i + 1) / 2;\n        }\n   \
    \ }\n    return result;\n}", "{\n    long[] result = new long[n];\n    foreach(i;\
    \ 0 .. n)\n    {\n        if(i % 2 == 0)\n        {\n            result[i] = factorial(i);\n\
    \        }\n        else\n        {\n            result[i] = i * (i + 1) / 2;\n\
    \        }\n    }\n    return result;\n}", "{\n    long[] result = new long[n];\n\
    \    foreach(i; 0 .. n)\n    {\n        if(i % 2 == 0)\n        {\n          \
    \  result[i] = factorial(i);\n        }\n        else\n        {\n           \
    \ result[i] = i * (i + 1) / 2;\n        }\n    }\n    return result;\n}", "{\n\
    \    long[] result = new long[n];\n    foreach(i; 0 .. n)\n    {\n        if(i\
    \ % 2 == 0)\n        {\n            result[i] = factorial(i);\n        }\n   \
    \     else\n        {\n            result[i] = sum(1 .. i);\n        }\n    }\n\
    \    return result;\n}", "{\n    long[] result = new long[n];\n    foreach(i;\
    \ 0 .. n)\n    {\n        if(i % 2 == 0)\n        {\n            result[i] = factorial(i);\n\
    \        }\n        else\n        {\n            result[i] = sum(1 .. i);\n  \
    \      }\n    }\n    return result;\n}", "{\n    long[] result = new long[n];\n\
    \    foreach(i; 0 .. n)\n    {\n        if(i % 2 == 0)\n        {\n          \
    \  result[i] = factorial(i);\n        }\n        else\n        {\n           \
    \ result[i] = sum(i);\n        }\n    }\n    return result;\n}", "{\n    long[]\
    \ result = new long[n];\n    foreach(i; 0 .. n)\n    {\n        if(i % 2 == 0)\n\
    \        {\n            result[i] = factorial(i);\n        }\n        else\n \
    \       {\n            result[i] = i * (i + 1) / 2;\n        }\n    }\n    return\
    \ result;\n}", "{\n    long[] result = new long[n];\n    foreach(i, ref elem;\
    \ result)\n    {\n        if(i % 2 == 0)\n        {\n            elem = factorial(i);\n\
    \        }\n        else\n        {\n            elem = i * (i + 1) / 2;\n   \
    \     }\n    }\n    return result;\n}", "{\n    long[] result;\n    result.length\
    \ = n;\n    foreach(i; 0 .. n)\n    {\n        if(i % 2 == 0)\n        {\n   \
    \         result[i] = factorial(i);\n        }\n        else\n        {\n    \
    \        result[i] = sum(i);\n        }\n    }\n    return result;\n}", "{\n \
    \   long[] result = new long[n];\n    for (long i = 0; i < n; i++)\n    {\n  \
    \      if (i % 2 == 0)\n        {\n            result[i] = factorial(i);\n   \
    \     }\n        else\n        {\n            result[i] = sum(i);\n        }\n\
    \    }\n    return result;\n}\nlong factorial(long n)\n{\n    long result = 1;\n\
    \    for (long i = 1; i <= n; i++)\n    {\n        result *= i;\n    }\n    return\
    \ result;\n}\nlong sum(long n)\n{\n    long result = 0;\n    for (long i = 1;\
    \ i <= n; i++)\n    {\n        result += i;\n    }\n    return result;\n}", "{\n\
    \    long[] result = new long[n];\n    foreach(i, ref e; result)\n    {\n    \
    \    if(i % 2 == 0)\n        {\n            e = i.factorial;\n        }\n    \
    \    else\n        {\n            e = i.iota.sum;\n        }\n    }\n    return\
    \ result;\n}", "{\n    long[] result = new long[n];\n    for (long i = 0; i <\
    \ n; i++)\n    {\n        if (i % 2 == 0)\n        {\n            result[i] =\
    \ factorial(i);\n        }\n        else\n        {\n            result[i] = sum(i);\n\
    \        }\n    }\n    return result;\n}", "{\n    long[] list;\n    list.length\
    \ = n;\n    foreach(i; 0..n)\n    {\n        if(i % 2 == 0)\n        {\n     \
    \       list[i] = factorial(i);\n        }\n        else\n        {\n        \
    \    list[i] = i * (i + 1) / 2;\n        }\n    }\n    return list;\n}", "{\n\
    \    long[] result = new long[n];\n    foreach(i; 0 .. n)\n    {\n        if(i\
    \ % 2 == 0)\n        {\n            result[i] = factorial(i);\n        }\n   \
    \     else\n        {\n            result[i] = i * (i + 1) / 2;\n        }\n \
    \   }\n    return result;\n}", "{\n    long[] result = new long[n];\n    foreach(i;\
    \ 0 .. n)\n    {\n        if(i % 2 == 0)\n        {\n            result[i] = factorial(i);\n\
    \        }\n        else\n        {\n            result[i] = i * (i + 1) / 2;\n\
    \        }\n    }\n    return result;\n}", "{\n    long[] result = new long[n];\n\
    \    for (long i = 0; i < n; i++)\n    {\n        if (i % 2 == 0)\n        {\n\
    \            result[i] = factorial(i);\n        }\n        else\n        {\n \
    \           result[i] = sum(i);\n        }\n    }\n    return result;\n}", "{\n\
    \    return iota(n).map!(i => (i % 2 == 0) ? factorial(i) : iota(i + 1).reduce!((a,\
    \ b) => a + b)());\n}", "{\n    long[] result = new long[n];\n    foreach(i; 0\
    \ .. n)\n    {\n        if(i % 2 == 0)\n        {\n            result[i] = factorial(i);\n\
    \        }\n        else\n        {\n            result[i] = i * (i + 1) / 2;\n\
    \        }\n    }\n    return result;\n}", "{\n    auto result = new long[](n);\n\
    \    foreach(i; 0 .. n)\n    {\n        if(i % 2 == 0)\n        {\n          \
    \  result[i] = factorial(i);\n        }\n        else\n        {\n           \
    \ result[i] = i * (i + 1) / 2;\n        }\n    }\n    return result;\n}", "{\n\
    \    long[] result = new long[n];\n    foreach(i; 0 .. n)\n    {\n        if(i\
    \ % 2 == 0)\n        {\n            result[i] = factorial(i);\n        }\n   \
    \     else\n        {\n            result[i] = sum(1 .. i);\n        }\n    }\n\
    \    return result;\n}", "{\n    long[] result = new long[n];\n    for (long i\
    \ = 0; i < n; i++)\n    {\n        if (i % 2 == 0)\n        {\n            result[i]\
    \ = factorial(i);\n        }\n        else\n        {\n            result[i] =\
    \ sum(i);\n        }\n    }\n    return result;\n}", "{\n    long[] result = new\
    \ long[n];\n    for (long i = 0; i < n; i++)\n    {\n        if (i % 2 == 0)\n\
    \        {\n            result[i] = factorial(i);\n        }\n        else\n \
    \       {\n            result[i] = sum(i);\n        }\n    }\n    return result;\n\
    }", "{\n    long[] result = new long[n];\n    foreach(i; 0 .. n)\n    {\n    \
    \    if(i % 2 == 0)\n        {\n            result[i] = i.factorial;\n       \
    \ }\n        else\n        {\n            result[i] = i.sum;\n        }\n    }\n\
    \    return result;\n}", "{\n    long[] res = new long[n];\n    foreach(i; 0 ..\
    \ n)\n    {\n        if(i % 2 == 0)\n        {\n            res[i] = factorial(i);\n\
    \        }\n        else\n        {\n            res[i] = i * (i + 1) / 2;\n \
    \       }\n    }\n    return res;\n}", "{\n    long[] result = new long[n];\n\
    \    foreach(i; 0 .. n)\n    {\n        if(i % 2 == 0)\n        {\n          \
    \  result[i] = i.factorial;\n        }\n        else\n        {\n            result[i]\
    \ = i.sum;\n        }\n    }\n    return result;\n}", "{\n    long[] result =\
    \ new long[n];\n    for (long i = 0; i < n; i++) \n    {\n        if (i % 2 ==\
    \ 0) \n        {\n            result[i] = factorial(i);\n        } \n        else\
    \ \n        {\n            result[i] = sum(i);\n        }\n    }\n    return result;\n\
    }"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
