language: d
name: HumanEval_74_total_match
results:
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpy8dg3nxb.d(44): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmpy8dg3nxb.__unittest_L34_C1() [0x428464]

    ??:? void tmpy8dg3nxb.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    return total1 < total2 ? lst1 : lst2;\n\
    }\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpc4m5foqn.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294d5]

    ??:? void tmpc4m5foqn.__unittest_L27_C1() [0x428460]

    ??:? void tmpc4m5foqn.__modtest() [0x428740]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddaf]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42922e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac5d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acec]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abe9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x429205]

    ??:? runModuleUnitTests [0x42db85]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429924]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpy8dg3nxb.d(44): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmpy8dg3nxb.__unittest_L34_C1() [0x428464]

    ??:? void tmpy8dg3nxb.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else if(total2 < total1)\n    {\n        return lst2;\n  \
    \  }\n    else\n    {\n        return lst1;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164277
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string s;\
    \ lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string s;\
    \ lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total < lst2_total)\n\
    \    {\n        return lst1;\n    }\n    else if(lst2_total < lst1_total)\n  \
    \  {\n        return lst2;\n    }\n    else\n    {\n        return lst1;\n   \
    \ }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total_lst1 = 0;\n    int total_lst2 = 0;\n    foreach(string s;\
    \ lst1)\n    {\n        total_lst1 += s.length;\n    }\n    foreach(string s;\
    \ lst2)\n    {\n        total_lst2 += s.length;\n    }\n    if(total_lst1 < total_lst2)\n\
    \    {\n        return lst1;\n    }\n    else\n    {\n        return lst2;\n \
    \   }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpoyfxb8r_.d(44): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmpoyfxb8r_.__unittest_L34_C1() [0x428464]

    ??:? void tmpoyfxb8r_.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpy8dg3nxb.d(44): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmpy8dg3nxb.__unittest_L34_C1() [0x428464]

    ??:? void tmpy8dg3nxb.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string str;\
    \ lst1)\n    {\n        lst1_total += str.length;\n    }\n    foreach(string str;\
    \ lst2)\n    {\n        lst2_total += str.length;\n    }\n    if(lst1_total <\
    \ lst2_total)\n    {\n        return lst1;\n    }\n    else\n    {\n        return\
    \ lst2;\n    }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp3l78wx5p.d(44): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmp3l78wx5p.__unittest_L34_C1() [0x428464]

    ??:? void tmp3l78wx5p.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpy8dg3nxb.d(44): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmpy8dg3nxb.__unittest_L34_C1() [0x428464]

    ??:? void tmpy8dg3nxb.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpy8dg3nxb.d(44): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmpy8dg3nxb.__unittest_L34_C1() [0x428464]

    ??:? void tmpy8dg3nxb.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpy8dg3nxb.d(44): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmpy8dg3nxb.__unittest_L34_C1() [0x428464]

    ??:? void tmpy8dg3nxb.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpy8dg3nxb.d(44): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmpy8dg3nxb.__unittest_L34_C1() [0x428464]

    ??:? void tmpy8dg3nxb.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int sum1 = 0;\n    int sum2 = 0;\n    foreach(string s; lst1)\n   \
    \ {\n        sum1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n  \
    \      sum2 += s.length;\n    }\n    if(sum1 < sum2)\n    {\n        return lst1;\n\
    \    }\n    else if(sum2 < sum1)\n    {\n        return lst2;\n    }\n    else\n\
    \    {\n        return lst1;\n    }\n}\nunittest\n{\n    alias candidate = total_match;\n\
    \n    assert(candidate([], []) == []);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpy8dg3nxb.d(44): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmpy8dg3nxb.__unittest_L34_C1() [0x428464]

    ??:? void tmpy8dg3nxb.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpy8dg3nxb.d(44): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmpy8dg3nxb.__unittest_L34_C1() [0x428464]

    ??:? void tmpy8dg3nxb.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpy8dg3nxb.d(44): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmpy8dg3nxb.__unittest_L34_C1() [0x428464]

    ??:? void tmpy8dg3nxb.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total_lst1 = 0;\n    int total_lst2 = 0;\n    foreach(string s;\
    \ lst1)\n    {\n        total_lst1 += s.length;\n    }\n    foreach(string s;\
    \ lst2)\n    {\n        total_lst2 += s.length;\n    }\n    if(total_lst1 < total_lst2)\n\
    \    {\n        return lst1;\n    }\n    else\n    {\n        return lst2;\n \
    \   }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpoyfxb8r_.d(44): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmpoyfxb8r_.__unittest_L34_C1() [0x428464]

    ??:? void tmpoyfxb8r_.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpy8dg3nxb.d(44): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmpy8dg3nxb.__unittest_L34_C1() [0x428464]

    ??:? void tmpy8dg3nxb.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpy8dg3nxb.d(44): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmpy8dg3nxb.__unittest_L34_C1() [0x428464]

    ??:? void tmpy8dg3nxb.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpy8dg3nxb.d(44): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmpy8dg3nxb.__unittest_L34_C1() [0x428464]

    ??:? void tmpy8dg3nxb.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpy8dg3nxb.d(44): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmpy8dg3nxb.__unittest_L34_C1() [0x428464]

    ??:? void tmpy8dg3nxb.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpy8dg3nxb.d(44): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmpy8dg3nxb.__unittest_L34_C1() [0x428464]

    ??:? void tmpy8dg3nxb.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    return total1 < total2 ? lst1 : lst2;\n\
    }\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpc4m5foqn.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294d5]

    ??:? void tmpc4m5foqn.__unittest_L27_C1() [0x428460]

    ??:? void tmpc4m5foqn.__modtest() [0x428740]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddaf]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42922e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac5d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acec]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abe9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x429205]

    ??:? runModuleUnitTests [0x42db85]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429924]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    return lst2;\n}\nunittest\n{\n    alias candidate = total_match;\n\
    \n    assert(candidate([], []) == []);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp3ug76mvy.d(41): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmp3ug76mvy.__unittest_L31_C1() [0x428464]

    ??:? void tmp3ug76mvy.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpy8dg3nxb.d(44): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmpy8dg3nxb.__unittest_L34_C1() [0x428464]

    ??:? void tmpy8dg3nxb.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpy8dg3nxb.d(44): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmpy8dg3nxb.__unittest_L34_C1() [0x428464]

    ??:? void tmpy8dg3nxb.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string s;\
    \ lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string s;\
    \ lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total < lst2_total)\n\
    \    {\n        return lst1;\n    }\n    else\n    {\n        return lst2;\n \
    \   }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp4xqz0lq8.d(44): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmp4xqz0lq8.__unittest_L34_C1() [0x428464]

    ??:? void tmp4xqz0lq8.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpy8dg3nxb.d(44): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmpy8dg3nxb.__unittest_L34_C1() [0x428464]

    ??:? void tmpy8dg3nxb.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpy8dg3nxb.d(44): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmpy8dg3nxb.__unittest_L34_C1() [0x428464]

    ??:? void tmpy8dg3nxb.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpy8dg3nxb.d(44): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmpy8dg3nxb.__unittest_L34_C1() [0x428464]

    ??:? void tmpy8dg3nxb.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string s;\
    \ lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string s;\
    \ lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total < lst2_total)\n\
    \    {\n        return lst1;\n    }\n    else\n    {\n        return lst2;\n \
    \   }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp4xqz0lq8.d(44): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmp4xqz0lq8.__unittest_L34_C1() [0x428464]

    ??:? void tmp4xqz0lq8.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total_lst1 = 0;\n    int total_lst2 = 0;\n    foreach(string s;\
    \ lst1)\n    {\n        total_lst1 += s.length;\n    }\n    foreach(string s;\
    \ lst2)\n    {\n        total_lst2 += s.length;\n    }\n    if(total_lst1 < total_lst2)\n\
    \    {\n        return lst1;\n    }\n    else\n    {\n        return lst2;\n \
    \   }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpoyfxb8r_.d(44): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmpoyfxb8r_.__unittest_L34_C1() [0x428464]

    ??:? void tmpoyfxb8r_.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    return total1 < total2 ? lst1 : lst2;\n\
    }\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpc4m5foqn.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294d5]

    ??:? void tmpc4m5foqn.__unittest_L27_C1() [0x428460]

    ??:? void tmpc4m5foqn.__modtest() [0x428740]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddaf]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42922e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac5d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acec]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abe9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x429205]

    ??:? runModuleUnitTests [0x42db85]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429924]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else if(total2 < total1)\n    {\n        return lst2;\n  \
    \  }\n    else\n    {\n        return lst1;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpy8dg3nxb.d(44): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmpy8dg3nxb.__unittest_L34_C1() [0x428464]

    ??:? void tmpy8dg3nxb.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpy8dg3nxb.d(44): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmpy8dg3nxb.__unittest_L34_C1() [0x428464]

    ??:? void tmpy8dg3nxb.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpy8dg3nxb.d(44): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmpy8dg3nxb.__unittest_L34_C1() [0x428464]

    ??:? void tmpy8dg3nxb.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpy8dg3nxb.d(44): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmpy8dg3nxb.__unittest_L34_C1() [0x428464]

    ??:? void tmpy8dg3nxb.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    return total1 < total2 ? lst1 : lst2;\n\
    }\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpc4m5foqn.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294d5]

    ??:? void tmpc4m5foqn.__unittest_L27_C1() [0x428460]

    ??:? void tmpc4m5foqn.__modtest() [0x428740]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddaf]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42922e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac5d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acec]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abe9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x429205]

    ??:? runModuleUnitTests [0x42db85]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429924]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    return total1 < total2 ? lst1 : lst2;\n\
    }\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpc4m5foqn.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294d5]

    ??:? void tmpc4m5foqn.__unittest_L27_C1() [0x428460]

    ??:? void tmpc4m5foqn.__modtest() [0x428740]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddaf]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42922e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac5d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acec]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abe9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x429205]

    ??:? runModuleUnitTests [0x42db85]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429924]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 == total2)\n    {\n       \
    \ return lst1;\n    }\n    else if(total1 < total2)\n    {\n        return lst1;\n\
    \    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpy8dg3nxb.d(44): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmpy8dg3nxb.__unittest_L34_C1() [0x428464]

    ??:? void tmpy8dg3nxb.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    return total1 < total2 ? lst1 : lst2;\n\
    }\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpc4m5foqn.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294d5]

    ??:? void tmpc4m5foqn.__unittest_L27_C1() [0x428460]

    ??:? void tmpc4m5foqn.__modtest() [0x428740]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddaf]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42922e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac5d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acec]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abe9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x429205]

    ??:? runModuleUnitTests [0x42db85]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429924]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpy8dg3nxb.d(44): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmpy8dg3nxb.__unittest_L34_C1() [0x428464]

    ??:? void tmpy8dg3nxb.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpy8dg3nxb.d(44): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmpy8dg3nxb.__unittest_L34_C1() [0x428464]

    ??:? void tmpy8dg3nxb.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    return total1 < total2 ? lst1 : lst2;\n\
    }\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpc4m5foqn.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294d5]

    ??:? void tmpc4m5foqn.__unittest_L27_C1() [0x428460]

    ??:? void tmpc4m5foqn.__modtest() [0x428740]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddaf]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42922e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac5d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acec]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abe9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x429205]

    ??:? runModuleUnitTests [0x42db85]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429924]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpy8dg3nxb.d(44): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmpy8dg3nxb.__unittest_L34_C1() [0x428464]

    ??:? void tmpy8dg3nxb.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    return total1 < total2 ? lst1 : lst2;\n\
    }\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpc4m5foqn.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294d5]

    ??:? void tmpc4m5foqn.__unittest_L27_C1() [0x428460]

    ??:? void tmpc4m5foqn.__modtest() [0x428740]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddaf]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42922e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac5d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acec]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abe9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x429205]

    ??:? runModuleUnitTests [0x42db85]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429924]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    return total1 < total2 ? lst1 : lst2;\n\
    }\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpc4m5foqn.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294d5]

    ??:? void tmpc4m5foqn.__unittest_L27_C1() [0x428460]

    ??:? void tmpc4m5foqn.__modtest() [0x428740]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddaf]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42922e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac5d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acec]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abe9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x429205]

    ??:? runModuleUnitTests [0x42db85]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429924]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpy8dg3nxb.d(44): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmpy8dg3nxb.__unittest_L34_C1() [0x428464]

    ??:? void tmpy8dg3nxb.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int sum1 = 0;\n    int sum2 = 0;\n    foreach(string s; lst1)\n   \
    \ {\n        sum1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n  \
    \      sum2 += s.length;\n    }\n    if(sum1 == sum2)\n    {\n        return lst1;\n\
    \    }\n    else if(sum1 < sum2)\n    {\n        return lst1;\n    }\n    else\n\
    \    {\n        return lst2;\n    }\n}\nunittest\n{\n    alias candidate = total_match;\n\
    \n    assert(candidate([], []) == []);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    return total1 < total2 ? lst1 : lst2;\n\
    }\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpc4m5foqn.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294d5]

    ??:? void tmpc4m5foqn.__unittest_L27_C1() [0x428460]

    ??:? void tmpc4m5foqn.__modtest() [0x428740]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddaf]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42922e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac5d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acec]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abe9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x429205]

    ??:? runModuleUnitTests [0x42db85]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429924]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string str; lst1)\n\
    \    {\n        total1 += str.length;\n    }\n    foreach(string str; lst2)\n\
    \    {\n        total2 += str.length;\n    }\n    if(total1 < total2)\n    {\n\
    \        return lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\n\
    unittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([], [])\
    \ == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"\
    hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"\
    admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp5t032xs8.d(44): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmp5t032xs8.__unittest_L34_C1() [0x428464]

    ??:? void tmp5t032xs8.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpy8dg3nxb.d(44): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmpy8dg3nxb.__unittest_L34_C1() [0x428464]

    ??:? void tmpy8dg3nxb.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int sum1 = 0;\n    int sum2 = 0;\n    foreach(string s; lst1)\n   \
    \ {\n        sum1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n  \
    \      sum2 += s.length;\n    }\n    if(sum1 < sum2)\n    {\n        return lst1;\n\
    \    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpjakfi3t4.d(44): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmpjakfi3t4.__unittest_L34_C1() [0x428464]

    ??:? void tmpjakfi3t4.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else if(total2 < total1)\n    {\n        return lst2;\n  \
    \  }\n    else\n    {\n        return lst1;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpy8dg3nxb.d(44): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmpy8dg3nxb.__unittest_L34_C1() [0x428464]

    ??:? void tmpy8dg3nxb.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpy8dg3nxb.d(44): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmpy8dg3nxb.__unittest_L34_C1() [0x428464]

    ??:? void tmpy8dg3nxb.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpy8dg3nxb.d(44): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmpy8dg3nxb.__unittest_L34_C1() [0x428464]

    ??:? void tmpy8dg3nxb.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    return total1 < total2 ? lst1 : lst2;\n\
    }\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpc4m5foqn.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294d5]

    ??:? void tmpc4m5foqn.__unittest_L27_C1() [0x428460]

    ??:? void tmpc4m5foqn.__modtest() [0x428740]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddaf]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42922e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac5d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acec]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abe9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x429205]

    ??:? runModuleUnitTests [0x42db85]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429924]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string s;\
    \ lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string s;\
    \ lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total < lst2_total)\n\
    \    {\n        return lst1;\n    }\n    else\n    {\n        return lst2;\n \
    \   }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp4xqz0lq8.d(44): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmp4xqz0lq8.__unittest_L34_C1() [0x428464]

    ??:? void tmp4xqz0lq8.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpy8dg3nxb.d(44): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmpy8dg3nxb.__unittest_L34_C1() [0x428464]

    ??:? void tmpy8dg3nxb.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpy8dg3nxb.d(44): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmpy8dg3nxb.__unittest_L34_C1() [0x428464]

    ??:? void tmpy8dg3nxb.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpy8dg3nxb.d(44): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmpy8dg3nxb.__unittest_L34_C1() [0x428464]

    ??:? void tmpy8dg3nxb.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpy8dg3nxb.d(44): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmpy8dg3nxb.__unittest_L34_C1() [0x428464]

    ??:? void tmpy8dg3nxb.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int sum1 = 0;\n    int sum2 = 0;\n    foreach(string s; lst1)\n   \
    \ {\n        sum1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n  \
    \      sum2 += s.length;\n    }\n    return sum1 < sum2 ? lst1 : lst2;\n}\nunittest\n\
    {\n    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpvcygt5qh.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294d5]

    ??:? void tmpvcygt5qh.__unittest_L27_C1() [0x428460]

    ??:? void tmpvcygt5qh.__modtest() [0x428740]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddaf]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42922e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac5d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acec]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abe9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x429205]

    ??:? runModuleUnitTests [0x42db85]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429924]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total_chars1 = 0;\n    int total_chars2 = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        total_chars1 += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        total_chars2 += s.length;\n    }\n    if(total_chars1\
    \ < total_chars2)\n    {\n        return lst1;\n    }\n    else\n    {\n     \
    \   return lst2;\n    }\n}\nunittest\n{\n    alias candidate = total_match;\n\n\
    \    assert(candidate([], []) == []);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpd6fr6ww8.d(44): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmpd6fr6ww8.__unittest_L34_C1() [0x428464]

    ??:? void tmpd6fr6ww8.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string s;\
    \ lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string s;\
    \ lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total < lst2_total)\n\
    \    {\n        return lst1;\n    }\n    else\n    {\n        return lst2;\n \
    \   }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp4xqz0lq8.d(44): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmp4xqz0lq8.__unittest_L34_C1() [0x428464]

    ??:? void tmp4xqz0lq8.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpy8dg3nxb.d(44): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmpy8dg3nxb.__unittest_L34_C1() [0x428464]

    ??:? void tmpy8dg3nxb.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpy8dg3nxb.d(44): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmpy8dg3nxb.__unittest_L34_C1() [0x428464]

    ??:? void tmpy8dg3nxb.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpy8dg3nxb.d(44): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmpy8dg3nxb.__unittest_L34_C1() [0x428464]

    ??:? void tmpy8dg3nxb.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpy8dg3nxb.d(44): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmpy8dg3nxb.__unittest_L34_C1() [0x428464]

    ??:? void tmpy8dg3nxb.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpy8dg3nxb.d(44): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmpy8dg3nxb.__unittest_L34_C1() [0x428464]

    ??:? void tmpy8dg3nxb.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpy8dg3nxb.d(44): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmpy8dg3nxb.__unittest_L34_C1() [0x428464]

    ??:? void tmpy8dg3nxb.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(str; lst1)\n    {\n\
    \        total1 += str.length;\n    }\n    foreach(str; lst2)\n    {\n       \
    \ total2 += str.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpz6rq3_f1.d(44): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmpz6rq3_f1.__unittest_L34_C1() [0x428464]

    ??:? void tmpz6rq3_f1.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpy8dg3nxb.d(44): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmpy8dg3nxb.__unittest_L34_C1() [0x428464]

    ??:? void tmpy8dg3nxb.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpy8dg3nxb.d(44): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmpy8dg3nxb.__unittest_L34_C1() [0x428464]

    ??:? void tmpy8dg3nxb.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    return total1 < total2 ? lst1 : lst2;\n\
    }\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpc4m5foqn.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294d5]

    ??:? void tmpc4m5foqn.__unittest_L27_C1() [0x428460]

    ??:? void tmpc4m5foqn.__modtest() [0x428740]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddaf]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42922e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac5d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acec]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abe9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x429205]

    ??:? runModuleUnitTests [0x42db85]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429924]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total_lst1 = 0;\n    int total_lst2 = 0;\n    foreach(string s;\
    \ lst1)\n    {\n        total_lst1 += s.length;\n    }\n    foreach(string s;\
    \ lst2)\n    {\n        total_lst2 += s.length;\n    }\n    if(total_lst1 < total_lst2)\n\
    \    {\n        return lst1;\n    }\n    else\n    {\n        return lst2;\n \
    \   }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpoyfxb8r_.d(44): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmpoyfxb8r_.__unittest_L34_C1() [0x428464]

    ??:? void tmpoyfxb8r_.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else if(total2 < total1)\n    {\n        return lst2;\n  \
    \  }\n    else\n    {\n        return lst1;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    return total1 < total2 ? lst1 : lst2;\n\
    }\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpc4m5foqn.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294d5]

    ??:? void tmpc4m5foqn.__unittest_L27_C1() [0x428460]

    ??:? void tmpc4m5foqn.__modtest() [0x428740]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddaf]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42922e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac5d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acec]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abe9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x429205]

    ??:? runModuleUnitTests [0x42db85]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429924]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string s;\
    \ lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string s;\
    \ lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total < lst2_total)\n\
    \    {\n        return lst1;\n    }\n    else\n    {\n        return lst2;\n \
    \   }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp4xqz0lq8.d(44): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmp4xqz0lq8.__unittest_L34_C1() [0x428464]

    ??:? void tmp4xqz0lq8.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    return total1 < total2 ? lst1 : lst2;\n\
    }\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpc4m5foqn.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294d5]

    ??:? void tmpc4m5foqn.__unittest_L27_C1() [0x428460]

    ??:? void tmpc4m5foqn.__modtest() [0x428740]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddaf]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42922e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac5d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acec]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abe9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x429205]

    ??:? runModuleUnitTests [0x42db85]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429924]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpy8dg3nxb.d(44): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmpy8dg3nxb.__unittest_L34_C1() [0x428464]

    ??:? void tmpy8dg3nxb.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpy8dg3nxb.d(44): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmpy8dg3nxb.__unittest_L34_C1() [0x428464]

    ??:? void tmpy8dg3nxb.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpy8dg3nxb.d(44): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmpy8dg3nxb.__unittest_L34_C1() [0x428464]

    ??:? void tmpy8dg3nxb.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpy8dg3nxb.d(44): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmpy8dg3nxb.__unittest_L34_C1() [0x428464]

    ??:? void tmpy8dg3nxb.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpy8dg3nxb.d(44): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmpy8dg3nxb.__unittest_L34_C1() [0x428464]

    ??:? void tmpy8dg3nxb.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpy8dg3nxb.d(44): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmpy8dg3nxb.__unittest_L34_C1() [0x428464]

    ??:? void tmpy8dg3nxb.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string s;\
    \ lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string s;\
    \ lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total < lst2_total)\n\
    \    {\n        return lst1;\n    }\n    else\n    {\n        return lst2;\n \
    \   }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp4xqz0lq8.d(44): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmp4xqz0lq8.__unittest_L34_C1() [0x428464]

    ??:? void tmp4xqz0lq8.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpy8dg3nxb.d(44): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmpy8dg3nxb.__unittest_L34_C1() [0x428464]

    ??:? void tmpy8dg3nxb.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpy8dg3nxb.d(44): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmpy8dg3nxb.__unittest_L34_C1() [0x428464]

    ??:? void tmpy8dg3nxb.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpy8dg3nxb.d(44): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmpy8dg3nxb.__unittest_L34_C1() [0x428464]

    ??:? void tmpy8dg3nxb.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string s;\
    \ lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string s;\
    \ lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total < lst2_total)\n\
    \    {\n        return lst1;\n    }\n    else\n    {\n        return lst2;\n \
    \   }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp4xqz0lq8.d(44): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmp4xqz0lq8.__unittest_L34_C1() [0x428464]

    ??:? void tmp4xqz0lq8.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    return total1 < total2 ? lst1 : lst2;\n\
    }\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpc4m5foqn.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294d5]

    ??:? void tmpc4m5foqn.__unittest_L27_C1() [0x428460]

    ??:? void tmpc4m5foqn.__modtest() [0x428740]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddaf]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42922e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac5d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acec]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abe9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x429205]

    ??:? runModuleUnitTests [0x42db85]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429924]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    return total1 < total2 ? lst1 : lst2;\n\
    }\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpc4m5foqn.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294d5]

    ??:? void tmpc4m5foqn.__unittest_L27_C1() [0x428460]

    ??:? void tmpc4m5foqn.__modtest() [0x428740]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddaf]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42922e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac5d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acec]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abe9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x429205]

    ??:? runModuleUnitTests [0x42db85]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429924]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total_chars_lst1 = 0;\n    int total_chars_lst2 = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        total_chars_lst1 += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        total_chars_lst2 += s.length;\n    }\n    if(total_chars_lst1\
    \ < total_chars_lst2)\n    {\n        return lst1;\n    }\n    else\n    {\n \
    \       return lst2;\n    }\n}\nunittest\n{\n    alias candidate = total_match;\n\
    \n    assert(candidate([], []) == []);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmph3qp0or7.d(44): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmph3qp0or7.__unittest_L34_C1() [0x428464]

    ??:? void tmph3qp0or7.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int sum1 = 0;\n    int sum2 = 0;\n    foreach(string s; lst1)\n   \
    \ {\n        sum1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n  \
    \      sum2 += s.length;\n    }\n    if(sum1 < sum2)\n    {\n        return lst1;\n\
    \    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpjakfi3t4.d(44): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmpjakfi3t4.__unittest_L34_C1() [0x428464]

    ??:? void tmpjakfi3t4.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpy8dg3nxb.d(44): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmpy8dg3nxb.__unittest_L34_C1() [0x428464]

    ??:? void tmpy8dg3nxb.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    return total1 < total2 ? lst1 : lst2;\n\
    }\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpc4m5foqn.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294d5]

    ??:? void tmpc4m5foqn.__unittest_L27_C1() [0x428460]

    ??:? void tmpc4m5foqn.__modtest() [0x428740]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddaf]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42922e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac5d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acec]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abe9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x429205]

    ??:? runModuleUnitTests [0x42db85]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429924]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpy8dg3nxb.d(44): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmpy8dg3nxb.__unittest_L34_C1() [0x428464]

    ??:? void tmpy8dg3nxb.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpy8dg3nxb.d(44): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmpy8dg3nxb.__unittest_L34_C1() [0x428464]

    ??:? void tmpy8dg3nxb.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else if(total2 < total1)\n    {\n        return lst2;\n  \
    \  }\n    else\n    {\n        return lst1;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpy8dg3nxb.d(44): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmpy8dg3nxb.__unittest_L34_C1() [0x428464]

    ??:? void tmpy8dg3nxb.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpy8dg3nxb.d(44): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmpy8dg3nxb.__unittest_L34_C1() [0x428464]

    ??:? void tmpy8dg3nxb.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string s;\
    \ lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string s;\
    \ lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total < lst2_total)\n\
    \    {\n        return lst1;\n    }\n    else\n    {\n        return lst2;\n \
    \   }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp4xqz0lq8.d(44): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmp4xqz0lq8.__unittest_L34_C1() [0x428464]

    ??:? void tmp4xqz0lq8.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else if(total2 < total1)\n    {\n        return lst2;\n  \
    \  }\n    else\n    {\n        return lst1;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpy8dg3nxb.d(44): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmpy8dg3nxb.__unittest_L34_C1() [0x428464]

    ??:? void tmpy8dg3nxb.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else if(total2 < total1)\n    {\n        return lst2;\n  \
    \  }\n    else\n    {\n        return lst1;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164277
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else if(total2 < total1)\n    {\n        return lst2;\n  \
    \  }\n    else\n    {\n        return lst1;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    return total1 < total2 ? lst1 : lst2;\n\
    }\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpc4m5foqn.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294d5]

    ??:? void tmpc4m5foqn.__unittest_L27_C1() [0x428460]

    ??:? void tmpc4m5foqn.__modtest() [0x428740]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddaf]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42922e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac5d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acec]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abe9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x429205]

    ??:? runModuleUnitTests [0x42db85]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429924]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string s;\
    \ lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string s;\
    \ lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total < lst2_total)\n\
    \    {\n        return lst1;\n    }\n    else\n    {\n        return lst2;\n \
    \   }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp4xqz0lq8.d(44): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmp4xqz0lq8.__unittest_L34_C1() [0x428464]

    ??:? void tmp4xqz0lq8.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpy8dg3nxb.d(44): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmpy8dg3nxb.__unittest_L34_C1() [0x428464]

    ??:? void tmpy8dg3nxb.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpy8dg3nxb.d(44): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmpy8dg3nxb.__unittest_L34_C1() [0x428464]

    ??:? void tmpy8dg3nxb.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else if(total2 < total1)\n    {\n        return lst2;\n  \
    \  }\n    else\n    {\n        return lst1;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    return total1 < total2 ? lst1 : lst2;\n\
    }\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpc4m5foqn.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294d5]

    ??:? void tmpc4m5foqn.__unittest_L27_C1() [0x428460]

    ??:? void tmpc4m5foqn.__modtest() [0x428740]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddaf]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42922e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac5d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acec]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abe9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x429205]

    ??:? runModuleUnitTests [0x42db85]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429924]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int lst1_total = 0;\n    foreach(string s; lst1)\n    {\n        lst1_total\
    \ += s.length;\n    }\n    int lst2_total = 0;\n    foreach(string s; lst2)\n\
    \    {\n        lst2_total += s.length;\n    }\n    if(lst1_total < lst2_total)\n\
    \    {\n        return lst1;\n    }\n    else\n    {\n        return lst2;\n \
    \   }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmprcv3kkgv.d(44): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294e5]

    ??:? void tmprcv3kkgv.__unittest_L34_C1() [0x428470]

    ??:? void tmprcv3kkgv.__modtest() [0x428750]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddbf]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42923e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac6d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acfc]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x429215]

    ??:? runModuleUnitTests [0x42db95]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429934]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpy8dg3nxb.d(44): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmpy8dg3nxb.__unittest_L34_C1() [0x428464]

    ??:? void tmpy8dg3nxb.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    return lst2;\n}\nunittest\n{\n    alias candidate = total_match;\n\
    \n    assert(candidate([], []) == []);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp3ug76mvy.d(41): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmp3ug76mvy.__unittest_L31_C1() [0x428464]

    ??:? void tmp3ug76mvy.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string str; lst1)\n\
    \    {\n        total1 += str.length;\n    }\n    foreach(string str; lst2)\n\
    \    {\n        total2 += str.length;\n    }\n    if(total1 < total2)\n    {\n\
    \        return lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\n\
    unittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([], [])\
    \ == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"\
    hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"\
    admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp5t032xs8.d(44): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmp5t032xs8.__unittest_L34_C1() [0x428464]

    ??:? void tmp5t032xs8.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total_lst1 = 0;\n    int total_lst2 = 0;\n    foreach(string s;\
    \ lst1)\n    {\n        total_lst1 += s.length;\n    }\n    foreach(string s;\
    \ lst2)\n    {\n        total_lst2 += s.length;\n    }\n    if(total_lst1 < total_lst2)\n\
    \    {\n        return lst1;\n    }\n    else\n    {\n        return lst2;\n \
    \   }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpoyfxb8r_.d(44): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmpoyfxb8r_.__unittest_L34_C1() [0x428464]

    ??:? void tmpoyfxb8r_.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpy8dg3nxb.d(44): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmpy8dg3nxb.__unittest_L34_C1() [0x428464]

    ??:? void tmpy8dg3nxb.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpy8dg3nxb.d(44): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmpy8dg3nxb.__unittest_L34_C1() [0x428464]

    ??:? void tmpy8dg3nxb.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpy8dg3nxb.d(44): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmpy8dg3nxb.__unittest_L34_C1() [0x428464]

    ??:? void tmpy8dg3nxb.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string s;\
    \ lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string s;\
    \ lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total < lst2_total)\n\
    \    {\n        return lst1;\n    }\n    else\n    {\n        return lst2;\n \
    \   }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp4xqz0lq8.d(44): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmp4xqz0lq8.__unittest_L34_C1() [0x428464]

    ??:? void tmp4xqz0lq8.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total_lst1 = 0;\n    int total_lst2 = 0;\n    foreach(string s;\
    \ lst1)\n    {\n        total_lst1 += s.length;\n    }\n    foreach(string s;\
    \ lst2)\n    {\n        total_lst2 += s.length;\n    }\n    if(total_lst1 < total_lst2)\n\
    \    {\n        return lst1;\n    }\n    else\n    {\n        return lst2;\n \
    \   }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpoyfxb8r_.d(44): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmpoyfxb8r_.__unittest_L34_C1() [0x428464]

    ??:? void tmpoyfxb8r_.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else if(total2 < total1)\n    {\n        return lst2;\n  \
    \  }\n    else\n    {\n        return lst1;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int sum1 = 0;\n    int sum2 = 0;\n    foreach(string s; lst1)\n   \
    \ {\n        sum1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n  \
    \      sum2 += s.length;\n    }\n    if(sum1 < sum2)\n    {\n        return lst1;\n\
    \    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpjakfi3t4.d(44): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmpjakfi3t4.__unittest_L34_C1() [0x428464]

    ??:? void tmpjakfi3t4.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpy8dg3nxb.d(44): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmpy8dg3nxb.__unittest_L34_C1() [0x428464]

    ??:? void tmpy8dg3nxb.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else if(total2 < total1)\n    {\n        return lst2;\n  \
    \  }\n    else\n    {\n        return lst1;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpy8dg3nxb.d(44): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmpy8dg3nxb.__unittest_L34_C1() [0x428464]

    ??:? void tmpy8dg3nxb.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string s;\
    \ lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string s;\
    \ lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total < lst2_total)\n\
    \    {\n        return lst1;\n    }\n    else\n    {\n        return lst2;\n \
    \   }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp4xqz0lq8.d(44): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmp4xqz0lq8.__unittest_L34_C1() [0x428464]

    ??:? void tmp4xqz0lq8.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpy8dg3nxb.d(44): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmpy8dg3nxb.__unittest_L34_C1() [0x428464]

    ??:? void tmpy8dg3nxb.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpy8dg3nxb.d(44): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmpy8dg3nxb.__unittest_L34_C1() [0x428464]

    ??:? void tmpy8dg3nxb.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpy8dg3nxb.d(44): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmpy8dg3nxb.__unittest_L34_C1() [0x428464]

    ??:? void tmpy8dg3nxb.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpy8dg3nxb.d(44): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmpy8dg3nxb.__unittest_L34_C1() [0x428464]

    ??:? void tmpy8dg3nxb.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpy8dg3nxb.d(44): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmpy8dg3nxb.__unittest_L34_C1() [0x428464]

    ??:? void tmpy8dg3nxb.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpy8dg3nxb.d(44): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmpy8dg3nxb.__unittest_L34_C1() [0x428464]

    ??:? void tmpy8dg3nxb.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpy8dg3nxb.d(44): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmpy8dg3nxb.__unittest_L34_C1() [0x428464]

    ??:? void tmpy8dg3nxb.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    return total1 < total2 ? lst1 : lst2;\n\
    }\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpc4m5foqn.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294d5]

    ??:? void tmpc4m5foqn.__unittest_L27_C1() [0x428460]

    ??:? void tmpc4m5foqn.__modtest() [0x428740]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddaf]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42922e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac5d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acec]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abe9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x429205]

    ??:? runModuleUnitTests [0x42db85]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429924]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    return total1 < total2 ? lst1 : lst2;\n\
    }\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpc4m5foqn.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294d5]

    ??:? void tmpc4m5foqn.__unittest_L27_C1() [0x428460]

    ??:? void tmpc4m5foqn.__modtest() [0x428740]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddaf]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42922e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac5d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acec]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abe9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x429205]

    ??:? runModuleUnitTests [0x42db85]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429924]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpy8dg3nxb.d(44): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmpy8dg3nxb.__unittest_L34_C1() [0x428464]

    ??:? void tmpy8dg3nxb.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpy8dg3nxb.d(44): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmpy8dg3nxb.__unittest_L34_C1() [0x428464]

    ??:? void tmpy8dg3nxb.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpy8dg3nxb.d(44): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmpy8dg3nxb.__unittest_L34_C1() [0x428464]

    ??:? void tmpy8dg3nxb.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpy8dg3nxb.d(44): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmpy8dg3nxb.__unittest_L34_C1() [0x428464]

    ??:? void tmpy8dg3nxb.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpy8dg3nxb.d(44): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmpy8dg3nxb.__unittest_L34_C1() [0x428464]

    ??:? void tmpy8dg3nxb.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpy8dg3nxb.d(44): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmpy8dg3nxb.__unittest_L34_C1() [0x428464]

    ??:? void tmpy8dg3nxb.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpy8dg3nxb.d(44): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmpy8dg3nxb.__unittest_L34_C1() [0x428464]

    ??:? void tmpy8dg3nxb.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpy8dg3nxb.d(44): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmpy8dg3nxb.__unittest_L34_C1() [0x428464]

    ??:? void tmpy8dg3nxb.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total_lst1 = 0;\n    int total_lst2 = 0;\n    foreach(string s;\
    \ lst1)\n    {\n        total_lst1 += s.length;\n    }\n    foreach(string s;\
    \ lst2)\n    {\n        total_lst2 += s.length;\n    }\n    if(total_lst1 < total_lst2)\n\
    \    {\n        return lst1;\n    }\n    else\n    {\n        return lst2;\n \
    \   }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpoyfxb8r_.d(44): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmpoyfxb8r_.__unittest_L34_C1() [0x428464]

    ??:? void tmpoyfxb8r_.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else if(total2 < total1)\n    {\n        return lst2;\n  \
    \  }\n    else\n    {\n        return lst1;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpy8dg3nxb.d(44): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmpy8dg3nxb.__unittest_L34_C1() [0x428464]

    ??:? void tmpy8dg3nxb.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpy8dg3nxb.d(44): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmpy8dg3nxb.__unittest_L34_C1() [0x428464]

    ??:? void tmpy8dg3nxb.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    return total1 < total2 ? lst1 : lst2;\n\
    }\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpc4m5foqn.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294d5]

    ??:? void tmpc4m5foqn.__unittest_L27_C1() [0x428460]

    ??:? void tmpc4m5foqn.__modtest() [0x428740]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddaf]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42922e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac5d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acec]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abe9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x429205]

    ??:? runModuleUnitTests [0x42db85]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429924]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else if(total2 < total1)\n    {\n        return lst2;\n  \
    \  }\n    else\n    {\n        return lst1;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    return lst2;\n}\nunittest\n{\n    alias candidate = total_match;\n\
    \n    assert(candidate([], []) == []);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp3ug76mvy.d(41): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmp3ug76mvy.__unittest_L31_C1() [0x428464]

    ??:? void tmp3ug76mvy.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpy8dg3nxb.d(44): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmpy8dg3nxb.__unittest_L34_C1() [0x428464]

    ??:? void tmpy8dg3nxb.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpy8dg3nxb.d(44): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmpy8dg3nxb.__unittest_L34_C1() [0x428464]

    ??:? void tmpy8dg3nxb.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpy8dg3nxb.d(44): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmpy8dg3nxb.__unittest_L34_C1() [0x428464]

    ??:? void tmpy8dg3nxb.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpy8dg3nxb.d(44): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmpy8dg3nxb.__unittest_L34_C1() [0x428464]

    ??:? void tmpy8dg3nxb.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total_lst1 = 0;\n    int total_lst2 = 0;\n    foreach(string s;\
    \ lst1)\n    {\n        total_lst1 += s.length;\n    }\n    foreach(string s;\
    \ lst2)\n    {\n        total_lst2 += s.length;\n    }\n    if(total_lst1 < total_lst2)\n\
    \    {\n        return lst1;\n    }\n    else\n    {\n        return lst2;\n \
    \   }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpoyfxb8r_.d(44): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmpoyfxb8r_.__unittest_L34_C1() [0x428464]

    ??:? void tmpoyfxb8r_.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    return total1 < total2 ? lst1 : lst2;\n\
    }\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpc4m5foqn.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294d5]

    ??:? void tmpc4m5foqn.__unittest_L27_C1() [0x428460]

    ??:? void tmpc4m5foqn.__modtest() [0x428740]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddaf]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42922e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac5d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acec]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abe9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x429205]

    ??:? runModuleUnitTests [0x42db85]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429924]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else if(total2 < total1)\n    {\n        return lst2;\n  \
    \  }\n    else\n    {\n        return lst1;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpy8dg3nxb.d(44): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmpy8dg3nxb.__unittest_L34_C1() [0x428464]

    ??:? void tmpy8dg3nxb.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else if(total2 < total1)\n    {\n        return lst2;\n  \
    \  }\n    else\n    {\n        return lst1;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpy8dg3nxb.d(44): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmpy8dg3nxb.__unittest_L34_C1() [0x428464]

    ??:? void tmpy8dg3nxb.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    return total1 < total2 ? lst1 : lst2;\n\
    }\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpc4m5foqn.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294d5]

    ??:? void tmpc4m5foqn.__unittest_L27_C1() [0x428460]

    ??:? void tmpc4m5foqn.__modtest() [0x428740]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddaf]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42922e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac5d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acec]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abe9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x429205]

    ??:? runModuleUnitTests [0x42db85]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429924]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpy8dg3nxb.d(44): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmpy8dg3nxb.__unittest_L34_C1() [0x428464]

    ??:? void tmpy8dg3nxb.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    return total1 < total2 ? lst1 : lst2;\n\
    }\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpc4m5foqn.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294d5]

    ??:? void tmpc4m5foqn.__unittest_L27_C1() [0x428460]

    ??:? void tmpc4m5foqn.__modtest() [0x428740]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddaf]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42922e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac5d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acec]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abe9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x429205]

    ??:? runModuleUnitTests [0x42db85]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429924]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpy8dg3nxb.d(44): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmpy8dg3nxb.__unittest_L34_C1() [0x428464]

    ??:? void tmpy8dg3nxb.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpy8dg3nxb.d(44): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmpy8dg3nxb.__unittest_L34_C1() [0x428464]

    ??:? void tmpy8dg3nxb.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string s;\
    \ lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string s;\
    \ lst2)\n    {\n        lst2_total += s.length;\n    }\n    return lst1_total\
    \ < lst2_total ? lst1 : lst2;\n}\nunittest\n{\n    alias candidate = total_match;\n\
    \n    assert(candidate([], []) == []);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpeanf_3ik.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294d5]

    ??:? void tmpeanf_3ik.__unittest_L27_C1() [0x428460]

    ??:? void tmpeanf_3ik.__modtest() [0x428740]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddaf]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42922e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac5d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acec]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abe9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x429205]

    ??:? runModuleUnitTests [0x42db85]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429924]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpy8dg3nxb.d(44): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmpy8dg3nxb.__unittest_L34_C1() [0x428464]

    ??:? void tmpy8dg3nxb.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else if(total2 < total1)\n    {\n        return lst2;\n  \
    \  }\n    else\n    {\n        return lst1;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164277
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else if(total2 < total1)\n    {\n        return lst2;\n  \
    \  }\n    else\n    {\n        return lst1;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpy8dg3nxb.d(44): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmpy8dg3nxb.__unittest_L34_C1() [0x428464]

    ??:? void tmpy8dg3nxb.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string s;\
    \ lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string s;\
    \ lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total < lst2_total)\n\
    \    {\n        return lst1;\n    }\n    else\n    {\n        return lst2;\n \
    \   }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp4xqz0lq8.d(44): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmp4xqz0lq8.__unittest_L34_C1() [0x428464]

    ??:? void tmp4xqz0lq8.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string s;\
    \ lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string s;\
    \ lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total < lst2_total)\n\
    \    {\n        return lst1;\n    }\n    else if(lst2_total < lst1_total)\n  \
    \  {\n        return lst2;\n    }\n    else\n    {\n        return lst1;\n   \
    \ }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpy8dg3nxb.d(44): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmpy8dg3nxb.__unittest_L34_C1() [0x428464]

    ??:? void tmpy8dg3nxb.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int sum1 = 0;\n    int sum2 = 0;\n    foreach(string s; lst1)\n   \
    \ {\n        sum1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n  \
    \      sum2 += s.length;\n    }\n    if(sum1 < sum2)\n    {\n        return lst1;\n\
    \    }\n    else if(sum2 < sum1)\n    {\n        return lst2;\n    }\n    else\n\
    \    {\n        return lst1;\n    }\n}\nunittest\n{\n    alias candidate = total_match;\n\
    \n    assert(candidate([], []) == []);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpy8dg3nxb.d(44): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmpy8dg3nxb.__unittest_L34_C1() [0x428464]

    ??:? void tmpy8dg3nxb.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpy8dg3nxb.d(44): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmpy8dg3nxb.__unittest_L34_C1() [0x428464]

    ??:? void tmpy8dg3nxb.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else if(total2 < total1)\n    {\n        return lst2;\n  \
    \  }\n    else\n    {\n        return lst1;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164277
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else if(total2 < total1)\n    {\n        return lst2;\n  \
    \  }\n    else\n    {\n        return lst1;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpy8dg3nxb.d(44): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmpy8dg3nxb.__unittest_L34_C1() [0x428464]

    ??:? void tmpy8dg3nxb.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    return total1 < total2 ? lst1 : lst2;\n\
    }\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpc4m5foqn.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294d5]

    ??:? void tmpc4m5foqn.__unittest_L27_C1() [0x428460]

    ??:? void tmpc4m5foqn.__modtest() [0x428740]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddaf]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42922e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac5d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acec]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abe9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x429205]

    ??:? runModuleUnitTests [0x42db85]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429924]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpy8dg3nxb.d(44): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmpy8dg3nxb.__unittest_L34_C1() [0x428464]

    ??:? void tmpy8dg3nxb.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    return total1 < total2 ? lst1 : lst2;\n\
    }\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpc4m5foqn.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294d5]

    ??:? void tmpc4m5foqn.__unittest_L27_C1() [0x428460]

    ??:? void tmpc4m5foqn.__modtest() [0x428740]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddaf]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42922e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac5d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acec]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abe9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x429205]

    ??:? runModuleUnitTests [0x42db85]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429924]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int lst1_total = 0;\n    int lst2_total = 0;\n    foreach(string s;\
    \ lst1)\n    {\n        lst1_total += s.length;\n    }\n    foreach(string s;\
    \ lst2)\n    {\n        lst2_total += s.length;\n    }\n    if(lst1_total < lst2_total)\n\
    \    {\n        return lst1;\n    }\n    else\n    {\n        return lst2;\n \
    \   }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp4xqz0lq8.d(44): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmp4xqz0lq8.__unittest_L34_C1() [0x428464]

    ??:? void tmp4xqz0lq8.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpy8dg3nxb.d(44): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmpy8dg3nxb.__unittest_L34_C1() [0x428464]

    ??:? void tmpy8dg3nxb.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total_lst1 = 0;\n    int total_lst2 = 0;\n    foreach(string s;\
    \ lst1)\n    {\n        total_lst1 += s.length;\n    }\n    foreach(string s;\
    \ lst2)\n    {\n        total_lst2 += s.length;\n    }\n    if(total_lst1 < total_lst2)\n\
    \    {\n        return lst1;\n    }\n    else\n    {\n        return lst2;\n \
    \   }\n}\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpoyfxb8r_.d(44): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmpoyfxb8r_.__unittest_L34_C1() [0x428464]

    ??:? void tmpoyfxb8r_.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpy8dg3nxb.d(44): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmpy8dg3nxb.__unittest_L34_C1() [0x428464]

    ??:? void tmpy8dg3nxb.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    return total1 < total2 ? lst1 : lst2;\n\
    }\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpc4m5foqn.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294d5]

    ??:? void tmpc4m5foqn.__unittest_L27_C1() [0x428460]

    ??:? void tmpc4m5foqn.__modtest() [0x428740]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddaf]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42922e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac5d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acec]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abe9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x429205]

    ??:? runModuleUnitTests [0x42db85]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429924]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total_chars1 = 0;\n    int total_chars2 = 0;\n    foreach(string\
    \ s; lst1)\n    {\n        total_chars1 += s.length;\n    }\n    foreach(string\
    \ s; lst2)\n    {\n        total_chars2 += s.length;\n    }\n    if(total_chars1\
    \ < total_chars2)\n    {\n        return lst1;\n    }\n    else\n    {\n     \
    \   return lst2;\n    }\n}\nunittest\n{\n    alias candidate = total_match;\n\n\
    \    assert(candidate([], []) == []);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpd6fr6ww8.d(44): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmpd6fr6ww8.__unittest_L34_C1() [0x428464]

    ??:? void tmpd6fr6ww8.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int sum1 = 0;\n    int sum2 = 0;\n    foreach(string s; lst1)\n   \
    \ {\n        sum1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n  \
    \      sum2 += s.length;\n    }\n    return sum1 < sum2 ? lst1 : lst2;\n}\nunittest\n\
    {\n    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpvcygt5qh.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294d5]

    ??:? void tmpvcygt5qh.__unittest_L27_C1() [0x428460]

    ??:? void tmpvcygt5qh.__modtest() [0x428740]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddaf]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42922e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac5d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acec]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abe9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x429205]

    ??:? runModuleUnitTests [0x42db85]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429924]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else\n    {\n        return lst2;\n    }\n}\nunittest\n{\n\
    \    alias candidate = total_match;\n\n    assert(candidate([], []) == []);\n\
    \    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"\
    ]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"\
    project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([],\
    \ [\"this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpy8dg3nxb.d(44): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294dd]

    ??:? void tmpy8dg3nxb.__unittest_L34_C1() [0x428464]

    ??:? void tmpy8dg3nxb.__modtest() [0x428744]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddb7]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x429236]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac65]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acf4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abf1]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42920d]

    ??:? runModuleUnitTests [0x42db8d]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x42992c]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    return total1 < total2 ? lst1 : lst2;\n\
    }\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpc4m5foqn.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294d5]

    ??:? void tmpc4m5foqn.__unittest_L27_C1() [0x428460]

    ??:? void tmpc4m5foqn.__modtest() [0x428740]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddaf]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42922e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac5d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acec]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abe9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x429205]

    ??:? runModuleUnitTests [0x42db85]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429924]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    return total1 < total2 ? lst1 : lst2;\n\
    }\nunittest\n{\n    alias candidate = total_match;\n\n    assert(candidate([],\
    \ []) == []);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) ==\
    \ [\"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"]);\n  \
    \  assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\"\
    , \"admin\"]);\n    assert(candidate([], [\"this\"]) == []);\n    assert(candidate([\"\
    this\"], []) == []);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpc4m5foqn.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x4294d5]

    ??:? void tmpc4m5foqn.__unittest_L27_C1() [0x428460]

    ??:? void tmpc4m5foqn.__modtest() [0x428740]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ddaf]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42922e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42ac5d]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42acec]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42abe9]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x429205]

    ??:? runModuleUnitTests [0x42db85]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x429924]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164277
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else if(total2 < total1)\n    {\n        return lst2;\n  \
    \  }\n    else\n    {\n        return lst1;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164277
- exit_code: 0
  program: "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that\
    \ accepts two lists of strings and returns the list that has \n    total number\
    \ of chars in the all strings of the list less than the other list.\n\n    if\
    \ the two lists have the same number of chars, return the first list.\n\n    Examples\n\
    \                        \n*/\nstring[] total_match(string[] lst1, string[] lst2)\
    \ \n{\n    int total1 = 0;\n    int total2 = 0;\n    foreach(string s; lst1)\n\
    \    {\n        total1 += s.length;\n    }\n    foreach(string s; lst2)\n    {\n\
    \        total2 += s.length;\n    }\n    if(total1 < total2)\n    {\n        return\
    \ lst1;\n    }\n    else if(total2 < total1)\n    {\n        return lst2;\n  \
    \  }\n    else\n    {\n        return lst1;\n    }\n}\nunittest\n{\n    alias\
    \ candidate = total_match;\n\n    assert(candidate([], []) == []);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]);\n    assert(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ]);\n    assert(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"\
    4\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\"\
    , \"Hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"\
    ]) == [\"hI\", \"hi\", \"hi\"]);\n    assert(candidate([\"hi\", \"admin\"], [\"\
    hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"]);\n    assert(candidate([], [\"\
    this\"]) == []);\n    assert(candidate([\"this\"], []) == []);\n}\nvoid main(){}"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660164277
