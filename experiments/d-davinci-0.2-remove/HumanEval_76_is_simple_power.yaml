name: HumanEval_76_is_simple_power
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\nYour task is to write a function\
  \ that returns true if a number x is a simple\n    power of n and false in other\
  \ cases.\n    x is a simple power of n if n**int=x\n    For example:\n         \
  \                   \n*/\nbool is_simple_power(long x, long n) \n"
tests: "unittest\n{\n    alias candidate = is_simple_power;\n\n    assert(candidate(16L,\
  \ 2L) == true);\n    assert(candidate(143214L, 16L) == false);\n    assert(candidate(4L,\
  \ 2L) == true);\n    assert(candidate(9L, 3L) == true);\n    assert(candidate(16L,\
  \ 4L) == true);\n    assert(candidate(24L, 2L) == false);\n    assert(candidate(128L,\
  \ 4L) == false);\n    assert(candidate(12L, 6L) == false);\n    assert(candidate(1L,\
  \ 1L) == true);\n    assert(candidate(1L, 12L) == true);\n}\nvoid main(){}"
completions: ["{\n    if (x == 1) return true;\n    if (x == 0) return false;\n  \
    \  if (n == 1) return true;\n    if (n == 0) return false;\n    if (x < 0) return\
    \ false;\n    if (n < 0) return false;\n    if (x == n) return true;\n    if (x\
    \ < n) return false;\n    if (x % n != 0) return false;\n    if (x == n * n) return\
    \ true;\n    if (x % (n * n) == 0) return false;\n    if (x % n == 0) return is_simple_power(x\
    \ / n, n);\n    return false;\n}", "{\n    if(x == 1) return true;\n    if(n ==\
    \ 1) return false;\n    if(x == n) return true;\n    if(x < n) return false;\n\
    \    if(x % n != 0) return false;\n    return is_simple_power(x / n, n);\n}",
  "{\n    if (x == 1) return true;\n    if (n == 1) return false;\n    if (x == n)\
    \ return true;\n    if (x < n) return false;\n    if (x % n != 0) return false;\n\
    \    return is_simple_power(x / n, n);\n}", "{\n    long i = 0;\n    long result\
    \ = 1;\n    while(result <= x)\n    {\n        result = pow(n, i);\n        if(result\
    \ == x)\n            return true;\n        i++;\n    }\n    return false;\n}",
  "{\n    if (x == 1) return true;\n    if (x == 0) return false;\n    if (n == 1)\
    \ return true;\n    if (n == 0) return false;\n    if (x < 0) return false;\n\
    \    if (n < 0) return false;\n    if (x == n) return true;\n    if (x < n) return\
    \ false;\n    if (x % n != 0) return false;\n    return is_simple_power(x / n,\
    \ n);\n}", "{\n    long i = 2;\n    long j = 1;\n    while(i <= x)\n    {\n  \
    \      j = i;\n        i *= n;\n    }\n    return j == x;\n}", "{\n    if (x ==\
    \ 1)\n        return true;\n    if (n == 1)\n        return false;\n    if (x\
    \ == n)\n        return true;\n    if (n == 0)\n        return false;\n    if\
    \ (x == 0)\n        return false;\n    if (x < 0)\n        return false;\n   \
    \ if (n < 0)\n        return false;\n    long i = 2;\n    long temp = n;\n   \
    \ while (temp < x)\n    {\n        temp *= n;\n        i++;\n    }\n    if (temp\
    \ == x)\n        return true;\n    return false;\n}", "{\n    long a = log(x)\
    \ / log(n);\n    return pow(n, a) == x;\n}", "{\n    if (x == 1)\n        return\
    \ true;\n    if (x == n)\n        return true;\n    if (x < n)\n        return\
    \ false;\n    if (x % n != 0)\n        return false;\n    return is_simple_power(x\
    \ / n, n);\n}", "{\n    if(x == 1) return true;\n    if(n == 1) return false;\n\
    \    if(x == n) return true;\n    if(x < n) return false;\n    if(x % n != 0)\
    \ return false;\n    return is_simple_power(x / n, n);\n}", "{\n    if (x == 1)\
    \ return true;\n    if (x == n) return true;\n    if (n == 1) return false;\n\
    \    if (x < n) return false;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}", "{\n    long y = log(x) / log(n);\n    return pow(n, y) == x;\n\
    }", "{\n    if (x == 1) return true;\n    if (x == n) return true;\n    if (x\
    \ < n) return false;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}", "{\n    if (x == 1) return true;\n    if (n == 1) return false;\n\
    \    if (x == n) return true;\n    if (x < n) return false;\n    if (x % n !=\
    \ 0) return false;\n    return is_simple_power(x / n, n);\n}", "{\n    if (x ==\
    \ 1) return true;\n    if (n == 1) return false;\n    if (x == n) return true;\n\
    \    if (x < n) return false;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}", "{\n    if(x == 1)\n        return true;\n    if(x == 0)\n   \
    \     return false;\n    if(n == 1)\n        return true;\n    if(n == 0)\n  \
    \      return false;\n    if(x < 0)\n        return false;\n    if(n < 0)\n  \
    \      return false;\n    if(x == n)\n        return true;\n    if(x % n != 0)\n\
    \        return false;\n    if(x % n == 0)\n        return is_simple_power(x /\
    \ n, n);\n}", "{\n    if(x==0)\n        return false;\n    if(n==0)\n        return\
    \ false;\n    if(x==1)\n        return true;\n    if(n==1)\n        return true;\n\
    \    if(x==n)\n        return true;\n    if(x<n)\n        return false;\n    if(x%n!=0)\n\
    \        return false;\n    if(x==n*n)\n        return true;\n    if(x==n*n*n)\n\
    \        return true;\n    if(x==n*n*n*n)\n        return true;\n    if(x==n*n*n*n*n)\n\
    \        return true;\n    if(x==n*n*n*n*n*n)\n        return true;\n    if(x==n*n*n*n*n*n*n)\n\
    \        return true;\n    if(x==n*n*n*n*n*n*n*n)\n        return true;\n    if(x==n*n*n*n*n*n*n*n*n)\n\
    \        return true;\n    if(x==n*n*n*n*n*n*n*n*n*n)\n        return true;\n\
    \    if(x==n*n*n*n*n*n*n*n*n*n*n)\n        return true;\n    if(x==n*n*n*n*n*n*n*n*n*n*n*n)\n\
    \        return true;\n    if(x==n*n*n*n*n*n*n*n*n*n*n*n*n)\n        return true;\n\
    \    if(x==n*n*n*n*n*n*n*n*n*n*n*n*n*n)\n        return true;\n    if(x==n*n*n*n*n*n*n*n*n*n*n*n*n*n*n)\n\
    \        return true;\n    if(x==n*n*n*n*n*n*n*n*n*", "{\n    if (x == 1) return\
    \ true;\n    if (n == 1) return false;\n    if (x == n) return true;\n    if (x\
    \ < n) return false;\n    return is_simple_power(x/n, n);\n}", "{\n    if(x==1)\n\
    \        return true;\n    if(n==1)\n        return false;\n    if(x==n)\n   \
    \     return true;\n    if(x<n)\n        return false;\n    if(x%n!=0)\n     \
    \   return false;\n    return is_simple_power(x/n,n);\n}", "{\n    if (x == 1)\
    \ return true;\n    if (x < n) return false;\n    if (x % n != 0) return false;\n\
    \    return is_simple_power(x / n, n);\n}", "{\n    if(x == 0)\n        return\
    \ false;\n    if(x == 1)\n        return true;\n    if(n == 0)\n        return\
    \ false;\n    if(n == 1)\n        return true;\n    if(n == 2)\n    {\n      \
    \  if(x == 2)\n            return true;\n        else\n            return false;\n\
    \    }\n    if(n == 3)\n    {\n        if(x == 3)\n            return true;\n\
    \        else\n            return false;\n    }\n    if(n == 4)\n    {\n     \
    \   if(x == 4)\n            return true;\n        else\n            return false;\n\
    \    }\n    if(n == 5)\n    {\n        if(x == 5)\n            return true;\n\
    \        else\n            return false;\n    }\n    if(n == 6)\n    {\n     \
    \   if(x == 6)\n            return true;\n        else\n            return false;\n\
    \    }\n    if(n == 7)\n    {\n        if(x == 7)\n            return true;\n\
    \        else\n            return false;\n    }\n    if(n == 8)\n    {\n     \
    \   if(x == 8)\n            return true;\n        else\n            return false;\n\
    \    }\n    if(n == 9)\n    {\n        if(x == 9)\n            return true;\n\
    \        else\n            return false;\n    }\n    if(n == 10)\n    {\n    \
    \    if(x == 10)\n            return true;\n        else\n            return false;\n\
    \    }\n    if(n == 11)\n    {\n        if(x == 11)\n            return true;\n\
    \        else\n            return false;\n    }\n    if(n == 12)\n    {\n    \
    \    if(x == 12)\n            return true;\n        else\n            return false;\n\
    \    }\n    if(n == 13)\n    {\n        if(x == 13)\n            return true;\n\
    \        else\n            return false;\n    }\n    if(n == 14)\n    {\n    \
    \    if(x == 14)\n            return true;\n        else\n            return false;\n\
    \    }\n    if", "{\n    // your code here\n    if(x==1)\n        return true;\n\
    \    if(x==0)\n        return false;\n    if(n==0)\n        return false;\n  \
    \  if(n==1)\n        return true;\n    if(x==n)\n        return true;\n    if(x<n)\n\
    \        return false;\n    if(x%n!=0)\n        return false;\n    long y=x/n;\n\
    \    if(y%n==0)\n        return false;\n    return is_simple_power(y,n);\n}",
  "{\n    if (x == 1)\n        return true;\n    if (x == 0)\n        return false;\n\
    \    if (n == 1)\n        return true;\n    if (n == 0)\n        return false;\n\
    \    if (x < 0)\n        return false;\n    if (n < 0)\n        return false;\n\
    \    if (x == n)\n        return true;\n    if (x % n != 0)\n        return false;\n\
    \    return is_simple_power(x / n, n);\n}", "{\n    if(x == 0) \n        return\
    \ false;\n    if(x == 1) \n        return true;\n    if(x % n != 0) \n       \
    \ return false;\n    return is_simple_power(x / n, n);\n}", "{\n    if(x == 1)\
    \ return true;\n    if(x == n) return true;\n    if(x % n != 0) return false;\n\
    \    return is_simple_power(x / n, n);\n}", "{\n    if(x == 1)\n        return\
    \ true;\n    if(n == 1)\n        return false;\n    if(x == n)\n        return\
    \ true;\n    if(n == 0)\n        return false;\n    if(x == 0)\n        return\
    \ false;\n    if(x < 0)\n        return false;\n    if(n < 0)\n        return\
    \ false;\n    if(x == n*n)\n        return true;\n    if(x == n*n*n)\n       \
    \ return true;\n    if(x == n*n*n*n)\n        return true;\n    if(x == n*n*n*n*n)\n\
    \        return true;\n    if(x == n*n*n*n*n*n)\n        return true;\n    if(x\
    \ == n*n*n*n*n*n*n)\n        return true;\n    if(x == n*n*n*n*n*n*n*n)\n    \
    \    return true;\n    if(x == n*n*n*n*n*n*n*n*n)\n        return true;\n    if(x\
    \ == n*n*n*n*n*n*n*n*n*n)\n        return true;\n    if(x == n*n*n*n*n*n*n*n*n*n*n)\n\
    \        return true;\n    if(x == n*n*n*n*n*n*n*n*n*n*n*n)\n        return true;\n\
    \    if(x == n*n*n*n*n*n*n*n*n*n*n*n*n)\n        return true;\n    if(x == n*n*n*n*n*n*n*n*n*n*n*n*n*n)\n\
    \        return true;\n    if(x == n*n*n*n*n*n*n*n*n*n*n*n*n*n*n)\n        return\
    \ true;\n    if(x == n*n*n*n*n*n*n*n*n*n*n", "{\n    if(x==1) return true;\n \
    \   if(n==1) return false;\n    if(x==n) return true;\n    if(x%n!=0) return false;\n\
    \    return is_simple_power(x/n,n);\n}", "{\n    auto result = log(x) / log(n);\n\
    \    return result == cast(long)result;\n}", "{\n    if (x == 1) return true;\n\
    \    if (n == 1) return false;\n    if (x == n) return true;\n    if (x < n) return\
    \ false;\n    if (x % n != 0) return false;\n    return is_simple_power(x / n,\
    \ n);\n}", "{\n    if(x==1)\n        return true;\n    if(n==1)\n        return\
    \ false;\n    if(x==n)\n        return true;\n    if(x<n)\n        return false;\n\
    \    if(x%n!=0)\n        return false;\n    return is_simple_power(x/n,n);\n}",
  "{\n    if (x == 0)\n        return false;\n    if (n == 0)\n        return false;\n\
    \    if (n == 1)\n        return true;\n    if (x == 1)\n        return true;\n\
    \    if (x == n)\n        return true;\n    if (x == n * n)\n        return true;\n\
    \    if (x == n * n * n)\n        return true;\n    if (x == n * n * n * n)\n\
    \        return true;\n    if (x == n * n * n * n * n)\n        return true;\n\
    \    if (x == n * n * n * n * n * n)\n        return true;\n    if (x == n * n\
    \ * n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n *\
    \ n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n * n * n\
    \ * n)\n        return true;\n    if (x == n * n * n * n * n * n * n * n * n *\
    \ n)\n        return true;\n    if (x == n * n * n * n * n * n * n * n * n * n\
    \ * n)\n        return true;\n    if (x == n * n * n * n * n * n * n * n * n *\
    \ n * n * n)\n        return true;\n    if (x == n * n * n * n * n * n * n * n\
    \ * n * n * n * n * n)\n        return true;\n    if (x == n * n * n * n * n *\
    \ n * n * n * n * n * n * n * n * n)\n        return true;\n    if (x == n * n\
    \ * n * n * n * n * n * n * n * n * n * n * n * n * n)\n        return true;\n\
    \    if (x == n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n)\n\
    \        return true;\n    if (x == n * n *", "{\n    if(x == 1)\n        return\
    \ true;\n    if(n == 1)\n        return false;\n    if(x == n)\n        return\
    \ true;\n    if(x > n)\n    {\n        if(x % n != 0)\n            return false;\n\
    \        else\n            return is_simple_power(x / n, n);\n    }\n    else\n\
    \        return false;\n}", "{\n    if (x == 1) return true;\n    if (n == 1)\
    \ return false;\n    if (n == 0) return false;\n    if (x == 0) return false;\n\
    \    if (x == n) return true;\n    if (x < n) return false;\n    if (x % n !=\
    \ 0) return false;\n    return is_simple_power(x / n, n);\n}", "{\n    if(x==1)\n\
    \        return true;\n    if(x==n)\n        return true;\n    if(x%n!=0)\n  \
    \      return false;\n    return is_simple_power(x/n,n);\n}", "{\n    if (x ==\
    \ 1)\n        return true;\n    if (n == 1)\n        return false;\n    if (x\
    \ == n)\n        return true;\n    if (x < n)\n        return false;\n    if (x\
    \ % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n}",
  "{\n    if(x == 1)\n        return true;\n    if(x == n)\n        return true;\n\
    \    if(x % n != 0)\n        return false;\n    return is_simple_power(x / n,\
    \ n);\n}", "{\n    if(x == 1)\n        return true;\n    if(n == 1)\n        return\
    \ false;\n    if(x == n)\n        return true;\n    if(x < n)\n        return\
    \ false;\n    if(x % n != 0)\n        return false;\n    return is_simple_power(x\
    \ / n, n);\n}", "{\n    // your code here\n    if(x==1) return true;\n    if(x==n)\
    \ return true;\n    if(x<n) return false;\n    if(x%n!=0) return false;\n    return\
    \ is_simple_power(x/n,n);\n}", "{\n    if (x == 1)\n        return true;\n   \
    \ if (n == 1)\n        return false;\n    if (x == n)\n        return true;\n\
    \    if (x < n)\n        return false;\n    if (x % n != 0)\n        return false;\n\
    \    return is_simple_power(x / n, n);\n}", "{\n    if(x == 1)\n        return\
    \ true;\n    if(x == n)\n        return true;\n    if(n == 1)\n        return\
    \ false;\n    if(x == 0)\n        return false;\n    if(x < n)\n        return\
    \ false;\n    if(x % n != 0)\n        return false;\n    return is_simple_power(x\
    \ / n, n);\n}", "{\n    return x == pow(n, (int)log(x) / log(n));\n}", "{\n  \
    \  if (x == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return\
    \ true;\n    if (x < n) return false;\n    if (x % n != 0) return false;\n   \
    \ return is_simple_power(x / n, n);\n}", "{\n    if(x == 1)\n        return true;\n\
    \    if(x == 0)\n        return false;\n    if(n == 1)\n        return false;\n\
    \    if(n == 0)\n        return false;\n    if(x < 0)\n        return false;\n\
    \    if(n < 0)\n        return false;\n    if(x == n)\n        return true;\n\
    \    if(x % n != 0)\n        return false;\n    return is_simple_power(x / n,\
    \ n);\n}", "{\n    if (x == 1)\n        return true;\n    if (n == 1)\n      \
    \  return false;\n    if (x == n)\n        return true;\n    if (x < n)\n    \
    \    return false;\n    return is_simple_power(x / n, n);\n}", "{\n    auto result\
    \ = log(x) / log(n);\n    return result == int(result);\n}", "{\n    if (x ==\
    \ 1)\n        return true;\n    if (n == 1)\n        return false;\n    if (x\
    \ == n)\n        return true;\n    if (x % n != 0)\n        return false;\n  \
    \  return is_simple_power(x / n, n);\n}", "{\n    if(x==1) return true;\n    if(x==n)\
    \ return true;\n    if(x<n) return false;\n    if(x%n!=0) return false;\n    return\
    \ is_simple_power(x/n,n);\n}", "{\n    if(x==0) return false;\n    if(n==0) return\
    \ false;\n    if(x==1) return true;\n    if(n==1) return true;\n    if(x==n) return\
    \ true;\n    if(x<n) return false;\n    if(x%n!=0) return false;\n    if(x==n*n)\
    \ return true;\n    if(x==n*n*n) return true;\n    if(x==n*n*n*n) return true;\n\
    \    if(x==n*n*n*n*n) return true;\n    if(x==n*n*n*n*n*n) return true;\n    if(x==n*n*n*n*n*n*n)\
    \ return true;\n    if(x==n*n*n*n*n*n*n*n) return true;\n    if(x==n*n*n*n*n*n*n*n*n)\
    \ return true;\n    if(x==n*n*n*n*n*n*n*n*n*n) return true;\n    if(x==n*n*n*n*n*n*n*n*n*n*n)\
    \ return true;\n    if(x==n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if(x==n*n*n*n*n*n*n*n*n*n*n*n*n)\
    \ return true;\n    if(x==n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if(x==n*n*n*n*n*n*n*n*n*n*n*n*n*n*n)\
    \ return true;\n    if(x==n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if(x==n*n*n*n*n*n*n*n*n*n",
  "{\n    if(n==1)\n        return true;\n    if(x==1)\n        return true;\n   \
    \ if(x==n)\n        return true;\n    if(x%n!=0)\n        return false;\n    if(x%n==0)\n\
    \    {\n        int i=2;\n        while(i<=x)\n        {\n            if(i==x)\n\
    \                return true;\n            i*=n;\n        }\n    }\n    return\
    \ false;\n}", "{\n    if(x==1)\n        return true;\n    if(n==1)\n        return\
    \ false;\n    if(x==n)\n        return true;\n    if(x<n)\n        return false;\n\
    \    return is_simple_power(x/n,n);\n}", "{\n    if(x == 1)\n        return true;\n\
    \    if(x == n)\n        return true;\n    if(x > n)\n    {\n        auto result\
    \ = log(x) / log(n);\n        if(result == int(result))\n            return true;\n\
    \    }\n    return false;\n}", "{\n    if(x == 1) return true;\n    if(x == n)\
    \ return true;\n    if(x < n) return false;\n    if(x % n != 0) return false;\n\
    \    return is_simple_power(x / n, n);\n}", "{\n    if(x==1) return true;\n  \
    \  if(x==0) return false;\n    if(n==1) return false;\n    if(n==0) return false;\n\
    \    if(x<0) return false;\n    if(n<0) return false;\n    if(x==n) return true;\n\
    \    if(x%n!=0) return false;\n    return is_simple_power(x/n,n);\n}", "{\n  \
    \  if(x==1) return true;\n    if(n==1) return false;\n    if(x==n) return true;\n\
    \    if(x<n) return false;\n    if(x%n!=0) return false;\n    if(x==n*n) return\
    \ true;\n    return is_simple_power(x/n,n);\n}", "{\n    if (x == 1) return true;\n\
    \    if (x == n) return true;\n    if (x == 0) return false;\n    if (n == 0)\
    \ return false;\n    if (n == 1) return false;\n    if (x < n) return false;\n\
    \    if (x % n != 0) return false;\n    return is_simple_power(x / n, n);\n}",
  "{\n    if (x == 1)\n        return true;\n    if (n == 1)\n        return false;\n\
    \    if (x == n)\n        return true;\n    if (x % n != 0)\n        return false;\n\
    \    return is_simple_power(x / n, n);\n}", "{\n    if (x == 1)\n        return\
    \ true;\n    if (x == 0)\n        return false;\n    if (n == 1)\n        return\
    \ true;\n    if (n == 0)\n        return false;\n    if (x < 0)\n        return\
    \ false;\n    if (n < 0)\n        return false;\n    if (x == n)\n        return\
    \ true;\n    if (x % n != 0)\n        return false;\n    return is_simple_power(x\
    \ / n, n);\n}", "{\n    if (x == 1) return true;\n    if (x < 1) return false;\n\
    \    if (n == 1) return true;\n    if (n < 1) return false;\n    if (x == n) return\
    \ true;\n    if (x % n != 0) return false;\n    return is_simple_power(x / n,\
    \ n);\n}", "{\n    if(x == 1)\n        return true;\n    if(x == n)\n        return\
    \ true;\n    if(x < n)\n        return false;\n    if(x % n != 0)\n        return\
    \ false;\n    return is_simple_power(x / n, n);\n}", "{\n    if(x==1)\n      \
    \  return true;\n    if(n==1)\n        return false;\n    if(x==n)\n        return\
    \ true;\n    if(x%n!=0)\n        return false;\n    return is_simple_power(x/n,n);\n\
    }", "{\n    // your code here\n    if(x == 1) return true;\n    if(n == 1) return\
    \ false;\n    if(x == n) return true;\n    if(x < n) return false;\n    if(x %\
    \ n != 0) return false;\n    return is_simple_power(x / n, n);\n}", "{\n    if\
    \ (x == 1) return true;\n    if (n == 1) return false;\n    if (n == 0) return\
    \ false;\n    if (x == 0) return false;\n    if (x == n) return true;\n    if\
    \ (x < n) return false;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}", "{\n    if(x == 1) return true;\n    if(n == 1) return false;\n\
    \    if(x == n) return true;\n    if(x < n) return false;\n    if(x % n != 0)\
    \ return false;\n    return is_simple_power(x / n, n);\n}", "{\n    if(x==1)\n\
    \        return true;\n    if(n==1)\n        return false;\n    if(x%n!=0)\n \
    \       return false;\n    long y=x/n;\n    if(y==1)\n        return true;\n \
    \   return is_simple_power(y,n);\n}", "{\n    if(x == 1)\n        return true;\n\
    \    if(n == 1)\n        return false;\n    if(x == n)\n        return true;\n\
    \    if(x < n)\n        return false;\n    if(x % n != 0)\n        return false;\n\
    \    return is_simple_power(x / n, n);\n}", "{\n    if (x == 1)\n        return\
    \ true;\n    if (x < n)\n        return false;\n    if (x % n != 0)\n        return\
    \ false;\n    return is_simple_power(x / n, n);\n}", "{\n    if (x == 1) return\
    \ true;\n    if (n == 1) return false;\n    if (x == n) return true;\n    if (x\
    \ < n) return false;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}", "{\n    return x == pow(n, cast(long)log(x) / log(n));\n}", "{\n\
    \    // your code here\n    if(x==1)\n        return true;\n    if(n==1)\n   \
    \     return false;\n    if(x==n)\n        return true;\n    if(x<n)\n       \
    \ return false;\n    if(x%n!=0)\n        return false;\n    if(x%n==0)\n     \
    \   return is_simple_power(x/n,n);\n}", "{\n    auto log = log2(x) / log2(n);\n\
    \    return log == cast(int)log;\n}", "{\n    if (x == 1) return true;\n    if\
    \ (x < n) return false;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}", "{\n    if(x == 1) return true;\n    if(x == n) return true;\n\
    \    if(x < n) return false;\n    if(x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}", "{\n    return x == pow(n, cast(int)log(x) / log(n));\n}", "{\n\
    \    if (x == 1) return true;\n    if (n == 1) return false;\n    if (x == n)\
    \ return true;\n    if (x < n) return false;\n    if (x % n != 0) return false;\n\
    \    return is_simple_power(x / n, n);\n}", "{\n    if(x == 1) return true;\n\
    \    if(n == 1) return false;\n    if(x == n) return true;\n    if(n == 0) return\
    \ false;\n    if(x == 0) return false;\n    if(x < 0) return false;\n    if(n\
    \ < 0) return false;\n    if(x == n*n) return true;\n    if(x == n*n*n) return\
    \ true;\n    if(x == n*n*n*n) return true;\n    if(x == n*n*n*n*n) return true;\n\
    \    if(x == n*n*n*n*n*n) return true;\n    if(x == n*n*n*n*n*n*n) return true;\n\
    \    if(x == n*n*n*n*n*n*n*n) return true;\n    if(x == n*n*n*n*n*n*n*n*n) return\
    \ true;\n    if(x == n*n*n*n*n*n*n*n*n*n) return true;\n    if(x == n*n*n*n*n*n*n*n*n*n*n)\
    \ return true;\n    if(x == n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if(x ==\
    \ n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if(x == n*n*n*n*n*n*n*n*n*n*n*n*n*n)\
    \ return true;\n    if(x == n*n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if(x\
    \ == n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if(x == n*n*n*n*n*n*n*n*n*n*n*",
  "{\n    if(x==1) return true;\n    if(x<n) return false;\n    if(x%n!=0) return\
    \ false;\n    return is_simple_power(x/n,n);\n}", "{\n    if (x == 1) return true;\n\
    \    if (n == 1) return false;\n    if (x == n) return true;\n    if (x < n) return\
    \ false;\n    if (x % n != 0) return false;\n    return is_simple_power(x / n,\
    \ n);\n}", "{\n    if (x == 1) return true;\n    if (n == 1) return false;\n \
    \   if (x == n) return true;\n    if (x < n) return false;\n    if (x % n != 0)\
    \ return false;\n    return is_simple_power(x / n, n);\n}", "{\n    if (x == 1)\
    \ return true;\n    if (x == 0) return false;\n    if (n == 1) return false;\n\
    \    if (n == 0) return false;\n    if (x == n) return true;\n    if (x < n) return\
    \ false;\n    if (x % n != 0) return false;\n    return is_simple_power(x / n,\
    \ n);\n}", "{\n    // your code here\n    if(x==1)\n        return true;\n   \
    \ if(n==1)\n        return false;\n    if(x==n)\n        return true;\n    if(x<n)\n\
    \        return false;\n    if(x%n!=0)\n        return false;\n    return is_simple_power(x/n,n);\n\
    }", "{\n    if (x == 1) return true;\n    if (x == 0) return false;\n    if (n\
    \ == 1) return true;\n    if (n == 0) return false;\n    if (x < 0) return false;\n\
    \    if (n < 0) return false;\n    if (x == n) return true;\n    if (x % n !=\
    \ 0) return false;\n    return is_simple_power(x / n, n);\n}", "{\n    if(x==1)\
    \ return true;\n    if(x<n) return false;\n    if(x%n!=0) return false;\n    return\
    \ is_simple_power(x/n,n);\n}", "{\n    long i = 0;\n    long result = 1;\n   \
    \ while(result < x)\n    {\n        result = n ** i;\n        i++;\n    }\n  \
    \  if(result == x)\n        return true;\n    else\n        return false;\n}",
  "{\n    if(x==1)\n        return true;\n    if(n==1)\n        return false;\n  \
    \  if(x==n)\n        return true;\n    if(n==0)\n        return false;\n    if(x<n)\n\
    \        return false;\n    if(x%n!=0)\n        return false;\n    return is_simple_power(x/n,n);\n\
    }", "{\n    if(x == 1) return true;\n    if(n == 1) return false;\n    if(x ==\
    \ n) return true;\n    if(x < n) return false;\n    if(n == 0) return false;\n\
    \    if(x % n != 0) return false;\n    return is_simple_power(x / n, n);\n}",
  "{\n    // your code here\n    auto result = log(x) / log(n);\n    return result\
    \ == (int)result;\n}", "{\n    if(x == 1) return true;\n    if(x == 0) return\
    \ false;\n    if(n == 1) return true;\n    if(n == 0) return false;\n    if(n\
    \ == x) return true;\n    if(n < 0) return false;\n    if(x < 0) return false;\n\
    \    if(n == 2)\n    {\n        if(x == 2) return true;\n        if(x == 4) return\
    \ true;\n        if(x == 8) return true;\n        if(x == 16) return true;\n \
    \       if(x == 32) return true;\n        if(x == 64) return true;\n        if(x\
    \ == 128) return true;\n        if(x == 256) return true;\n        if(x == 512)\
    \ return true;\n        if(x == 1024) return true;\n        if(x == 2048) return\
    \ true;\n        if(x == 4096) return true;\n        if(x == 8192) return true;\n\
    \        if(x == 16384) return true;\n        if(x == 32768) return true;\n  \
    \      if(x == 65536) return true;\n        if(x == 131072) return true;\n   \
    \     if(x == 262144) return true;\n        if(x == 524288) return true;\n   \
    \     if(x == 1048576) return true;\n        if(x == 2097152) return true;\n \
    \       if(x == 4194304) return true;\n        if(x == 8388608) return true;\n\
    \        if(x == 16777216) return true;\n        if(x == 33554432) return true;\n\
    \        if(x == 67108864) return true;\n        if(x == 134217728) return true;\n\
    \        if(x == 268435456) return true;\n        if(x == 536870912) return true;\n\
    \        if(x == 1073741824) return true;\n        if(x == 2147483648) return\
    \ true;\n        if(x == 4294967296) return true;\n        if(x == 8589934592)\
    \ return true;\n        if(x == 17179869", "{\n    if (x == 0)\n        return\
    \ false;\n    if (x == 1)\n        return true;\n    if (n == 0)\n        return\
    \ false;\n    if (n == 1)\n        return true;\n    if (x == n)\n        return\
    \ true;\n    if (x < n)\n        return false;\n    if (x % n != 0)\n        return\
    \ false;\n    return is_simple_power(x / n, n);\n}", "{\n    if(x==1)\n      \
    \  return true;\n    if(n==1)\n        return false;\n    if(x<n)\n        return\
    \ false;\n    if(n==0)\n        return false;\n    if(x==n)\n        return true;\n\
    \    if(x%n!=0)\n        return false;\n    return is_simple_power(x/n,n);\n}",
  "{\n    if (x == 1) return true;\n    if (n == 1) return false;\n    if (x == n)\
    \ return true;\n    if (x < n) return false;\n    if (x % n != 0) return false;\n\
    \    return is_simple_power(x / n, n);\n}", "{\n    if(x == 1)\n        return\
    \ true;\n    if(n == 1)\n        return false;\n    if(x == n)\n        return\
    \ true;\n    if(x < n)\n        return false;\n    if(x % n != 0)\n        return\
    \ false;\n    return is_simple_power(x / n, n);\n}", "{\n    if(x == 1)\n    \
    \    return true;\n    if(n == 1)\n        return false;\n    if(x == n)\n   \
    \     return true;\n    if(x < n)\n        return false;\n    if(x % n != 0)\n\
    \        return false;\n    if(x == n * n)\n        return true;\n    return is_simple_power(x,\
    \ n * n);\n}", "{\n    if(x == 1)\n        return true;\n    else if(x == 0)\n\
    \        return false;\n    else if(n == 1)\n        return false;\n    else if(n\
    \ == 0)\n        return false;\n    else\n    {\n        long y = log(x) / log(n);\n\
    \        if(pow(n, y) == x)\n            return true;\n        else\n        \
    \    return false;\n    }\n}", "{\n    if(x==1) return true;\n    if(x<n) return\
    \ false;\n    if(x%n!=0) return false;\n    return is_simple_power(x/n,n);\n}",
  "{\n    if(x == 1) return true;\n    if(x < n) return false;\n    if(x % n != 0)\
    \ return false;\n    return is_simple_power(x / n, n);\n}", "{\n    if(x == 1)\n\
    \        return true;\n    if(x < n)\n        return false;\n    long y = n;\n\
    \    while(y < x)\n    {\n        y *= n;\n    }\n    return y == x;\n}", "{\n\
    \    long i = 0;\n    long result = 1;\n    while(result <= x)\n    {\n      \
    \  result = n.pow(i);\n        if(result == x)\n            return true;\n   \
    \     i++;\n    }\n    return false;\n}", "{\n    if(x == 1)\n        return true;\n\
    \    if(x == 0)\n        return false;\n    if(n == 1)\n        return false;\n\
    \    if(n == 0)\n        return false;\n    if(x == n)\n        return true;\n\
    \    if(x < n)\n        return false;\n    if(x % n != 0)\n        return false;\n\
    \    return is_simple_power(x / n, n);\n}", "{\n    if(x == 1) return true;\n\
    \    if(x == 0) return false;\n    if(n == 1) return false;\n    if(n == 0) return\
    \ false;\n    if(x < 0) return false;\n    if(n < 0) return false;\n    if(x ==\
    \ n) return true;\n    if(x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}", "{\n    return x == pow(n, cast(int)log(x) / log(n));\n}", "{\n\
    \    if (x == 1) return true;\n    if (n == 1) return false;\n    if (x == n)\
    \ return true;\n    if (x < n) return false;\n    if (x % n != 0) return false;\n\
    \    return is_simple_power(x / n, n);\n}", "{\n    if(x==1) return true;\n  \
    \  if(n==1) return false;\n    if(x==n) return true;\n    if(x<n) return false;\n\
    \    return is_simple_power(x/n,n);\n}", "{\n    if(x == 1) return true;\n   \
    \ if(n == 1) return false;\n    if(x == n) return true;\n    if(x < n) return\
    \ false;\n    if(x % n != 0) return false;\n    return is_simple_power(x / n,\
    \ n);\n}", "{\n    if (x == 1) return true;\n    if (x < n) return false;\n  \
    \  if (x % n != 0) return false;\n    return is_simple_power(x / n, n);\n}", "{\n\
    \    if(x == 1) return true;\n    if(x == 0) return false;\n    if(n == 1) return\
    \ true;\n    if(n == 0) return false;\n    if(x == n) return true;\n    if(n ==\
    \ 2) return x == 4 || x == 8 || x == 16 || x == 32 || x == 64 || x == 128 || x\
    \ == 256 || x == 512 || x == 1024 || x == 2048 || x == 4096 || x == 8192 || x\
    \ == 16384 || x == 32768 || x == 65536 || x == 131072 || x == 262144 || x == 524288\
    \ || x == 1048576 || x == 2097152 || x == 4194304 || x == 8388608 || x == 16777216\
    \ || x == 33554432 || x == 67108864 || x == 134217728 || x == 268435456 || x ==\
    \ 536870912 || x == 1073741824 || x == 2147483648 || x == 4294967296 || x == 8589934592\
    \ || x == 17179869184 || x == 34359738368 || x == 68719476736 || x == 137438953472\
    \ || x == 274877906944 || x == 549755813888 || x == 1099511627776 || x == 2199023255552\
    \ || x == 4398046511104 || x == 8796093022208 || x == 17592186044416 || x == 35184372088832\
    \ || x == 70368744177664 || x == 140737488355328 || x == 281474976710656 || x\
    \ == 562949953421312 || x == 1125899906842624 || x == 2251799813685248 || x ==\
    \ 4503599627370496 || x == 9007199254740992 || x == 18014398509481984 || x ==\
    \ 36028797018963968 || x == 72057594037927936 || x == 144115188075855872 || x\
    \ == 288230376151711744 || x == 576460752303423488 || x == 1152921504606846976\
    \ || x == 2305843009213693952 || x == 46", "{\n    auto i = cast(int)log(x) /\
    \ log(n);\n    return pow(n, i) == x;\n}", "{\n    if(x == 1)\n        return\
    \ true;\n    if(n == 1)\n        return false;\n    if(n == 0)\n        return\
    \ false;\n    if(x == 0)\n        return false;\n    if(x == n)\n        return\
    \ true;\n    if(x < n)\n        return false;\n    if(x % n != 0)\n        return\
    \ false;\n    return is_simple_power(x / n, n);\n}", "{\n    if(x == 1)\n    \
    \    return true;\n    if(x < n)\n        return false;\n    if(x % n != 0)\n\
    \        return false;\n    return is_simple_power(x / n, n);\n}", "{\n    if(x<=0\
    \ || n<=0) return false;\n    if(x==1) return true;\n    if(n==1) return false;\n\
    \    if(x==n) return true;\n    if(x%n!=0) return false;\n    return is_simple_power(x/n,n);\n\
    }", "{\n    if(x==1) return true;\n    if(n==1) return false;\n    if(x==n) return\
    \ true;\n    if(x<n) return false;\n    if(x%n!=0) return false;\n    return is_simple_power(x/n,n);\n\
    }", "{\n    if(x == 1) return true;\n    if(n == 1) return false;\n    if(x ==\
    \ n) return true;\n    if(x < n) return false;\n    if(x % n != 0) return false;\n\
    \    return is_simple_power(x / n, n);\n}", "{\n    long i = 0;\n    long j =\
    \ 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long o = 0;\n   \
    \ long p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long t =\
    \ 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n    long y = 0;\n   \
    \ long z = 0;\n    long aa = 0;\n    long ab = 0;\n    long ac = 0;\n    long\
    \ ad = 0;\n    long ae = 0;\n    long af = 0;\n    long ag = 0;\n    long ah =\
    \ 0;\n    long ai = 0;\n    long aj = 0;\n    long ak = 0;\n    long al = 0;\n\
    \    long am = 0;\n    long an = 0;\n    long ao = 0;\n    long ap = 0;\n    long\
    \ aq = 0;\n    long ar = 0;\n    long as = 0;\n    long at = 0;\n    long au =\
    \ 0;\n    long av = 0;\n    long aw = 0;\n    long ax = 0;\n    long ay = 0;\n\
    \    long az = 0;\n    long ba = 0;\n    long bb = 0;\n    long bc = 0;\n    long\
    \ bd = 0;\n    long be = 0;\n    long bf = 0;\n    long bg = 0;\n    long bh =\
    \ 0;\n    long bi = 0;\n    long bj = 0;\n    long bk = 0;\n    long bl = 0;\n\
    \    long bm = 0;\n    long bn = 0;\n    long bo = 0;\n    long bp = 0;\n    long\
    \ bq = 0;\n    long br = 0;\n    long bs = 0;\n    long bt = 0;\n    long bu =\
    \ 0;\n    long bv = 0;\n    long bw = 0;\n    long bx = 0;\n    long by = 0;\n\
    \    long bz = 0;\n    long ca = 0;\n    long c", "{\n    if (x == 1)\n      \
    \  return true;\n    if (x < n)\n        return false;\n    auto log = log2(x)\
    \ / log2(n);\n    return log == cast(long)log;\n}", "{\n    if (x == 1)\n    \
    \    return true;\n    if (x == 0)\n        return false;\n    if (x < 0)\n  \
    \      return false;\n    if (n == 0)\n        return false;\n    if (n == 1)\n\
    \        return true;\n    if (n < 0)\n        return false;\n    if (x == n)\n\
    \        return true;\n    if (x < n)\n        return false;\n    if (x % n !=\
    \ 0)\n        return false;\n    if (x % n == 0)\n    {\n        return is_simple_power(x\
    \ / n, n);\n    }\n}", "{\n    if(x==1)\n        return true;\n    if(x<n)\n \
    \       return false;\n    if(x%n!=0)\n        return false;\n    return is_simple_power(x/n,n);\n\
    }", "{\n    if(x==1) return true;\n    if(x<n) return false;\n    if(x%n!=0) return\
    \ false;\n    return is_simple_power(x/n,n);\n}", "{\n    if(x == 1)\n       \
    \ return true;\n    if(x == 0)\n        return false;\n    if(n == 1)\n      \
    \  return true;\n    if(n == 0)\n        return false;\n    if(x < 0 || n < 0)\n\
    \        return false;\n    long i = 2;\n    while(i <= x)\n    {\n        if(pow(n,\
    \ i) == x)\n            return true;\n        i++;\n    }\n    return false;\n\
    }", "{\n    if(x == 1) return true;\n    if(n == 1) return false;\n    if(n ==\
    \ 0) return false;\n    if(x == 0) return false;\n    if(x == n) return true;\n\
    \    if(x < n) return false;\n    if(x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}", "{\n    if (x == 1)\n        return true;\n    if (x < 1 || n\
    \ < 1)\n        return false;\n    if (x % n != 0)\n        return false;\n  \
    \  return is_simple_power(x / n, n);\n}", "{\n    if(x == 1)\n        return true;\n\
    \    if(n == 1)\n        return false;\n    if(x == n)\n        return true;\n\
    \    if(x < n)\n        return false;\n    if(x % n != 0)\n        return false;\n\
    \    return is_simple_power(x / n, n);\n}", "{\n    if (x == 1) return true;\n\
    \    if (n == 1) return false;\n    if (x == n) return true;\n    if (x < n) return\
    \ false;\n    if (x % n != 0) return false;\n    return is_simple_power(x / n,\
    \ n);\n}", "{\n    if (x == 1)\n        return true;\n    if (n == 1)\n      \
    \  return false;\n    if (x == n)\n        return true;\n    if (x < n)\n    \
    \    return false;\n    if (x % n != 0)\n        return false;\n    return is_simple_power(x\
    \ / n, n);\n}", "{\n    if(x==1)\n        return true;\n    if(x<n)\n        return\
    \ false;\n    if(x%n!=0)\n        return false;\n    return is_simple_power(x/n,n);\n\
    }", "{\n    // your code here\n    if(x == 1)\n        return true;\n    if(n\
    \ == 1)\n        return false;\n    if(n == 0)\n        return false;\n    if(x\
    \ == 0)\n        return false;\n    if(n == x)\n        return true;\n    if(n\
    \ == -1)\n        return false;\n    if(x == -1)\n        return true;\n    if(n\
    \ == -x)\n        return true;\n    if(x == -n)\n        return true;\n    if(n\
    \ == 2)\n    {\n        if(x == 4)\n            return true;\n        if(x ==\
    \ 8)\n            return true;\n        if(x == 16)\n            return true;\n\
    \        if(x == 32)\n            return true;\n        if(x == 64)\n        \
    \    return true;\n        if(x == 128)\n            return true;\n        if(x\
    \ == 256)\n            return true;\n        if(x == 512)\n            return\
    \ true;\n        if(x == 1024)\n            return true;\n        if(x == 2048)\n\
    \            return true;\n        if(x == 4096)\n            return true;\n \
    \       if(x == 8192)\n            return true;\n        if(x == 16384)\n    \
    \        return true;\n        if(x == 32768)\n            return true;\n    \
    \    if(x == 65536)\n            return true;\n        if(x == 131072)\n     \
    \       return true;\n        if(x == 262144)\n            return true;\n    \
    \    if(x == 524288)\n            return true;\n        if(x == 1048576)\n   \
    \         return true;\n        if(x == 2097152)\n            return true;\n \
    \       if(x == 4194304)\n            return true;\n        if(x == 8388608)\n\
    \            return true;\n        if(x == 16777216)\n            return true;\n\
    \        if(x == 33554432)\n            return true;\n        if(x == 67108864)\n\
    \            return true;\n        if(x == 134217728)\n            return true;\n\
    \        if(x", "{\n    if (x == 0) return false;\n    if (n == 0) return false;\n\
    \    if (x == 1) return true;\n    if (n == 1) return true;\n    if (x == n) return\
    \ true;\n    if (n == 2) return (x & (x - 1)) == 0;\n    if (n == 3) return (x\
    \ == 1) || (x == 3) || (x == 9);\n    if (n == 4) return (x & (x - 1)) == 0;\n\
    \    if (n == 5) return (x == 1) || (x == 5) || (x == 25);\n    if (n == 6) return\
    \ (x == 1) || (x == 6) || (x == 36);\n    if (n == 7) return (x == 1) || (x ==\
    \ 7) || (x == 49);\n    if (n == 8) return (x & (x - 1)) == 0;\n    if (n == 9)\
    \ return (x == 1) || (x == 9) || (x == 81);\n    if (n == 10) return (x == 1)\
    \ || (x == 10) || (x == 100);\n    if (n == 11) return (x == 1) || (x == 11) ||\
    \ (x == 121);\n    if (n == 12) return (x == 1) || (x == 12) || (x == 144);\n\
    \    if (n == 13) return (x == 1) || (x == 13) || (x == 169);\n    if (n == 14)\
    \ return (x == 1) || (x == 14) || (x == 196);\n    if (n == 15) return (x == 1)\
    \ || (x == 15) || (x == 225);\n    if (n == 16) return (x & (x - 1)) == 0;\n \
    \   if (n == 17) return (x == 1) || (x == 17) || (x == 289);\n    if (n == 18)\
    \ return (x == 1) || (x == 18) || (x == 324);\n    if (n == 19) return (x == 1)\
    \ || (x == 19) || (x == 361);\n    if (n == 20) return (x", "{\n    if (x == 1)\
    \ return true;\n    if (x < 1) return false;\n    if (n == 1) return false;\n\
    \    if (n == 0) return false;\n    if (n == x) return true;\n    if (n == -1)\
    \ return false;\n    if (n == -x) return true;\n    if (n < 0) return is_simple_power(x,\
    \ -n);\n    if (n == 2) return isPowerOfTwo(x);\n    if (n == 3) return isPowerOfThree(x);\n\
    \    if (n == 4) return isPowerOfFour(x);\n    if (n == 5) return isPowerOfFive(x);\n\
    \    if (n == 6) return isPowerOfSix(x);\n    if (n == 7) return isPowerOfSeven(x);\n\
    \    if (n == 8) return isPowerOfEight(x);\n    if (n == 9) return isPowerOfNine(x);\n\
    \    if (n == 10) return isPowerOfTen(x);\n    if (n == 11) return isPowerOfEleven(x);\n\
    \    if (n == 12) return isPowerOfTwelve(x);\n    if (n == 13) return isPowerOfThirteen(x);\n\
    \    if (n == 14) return isPowerOfFourteen(x);\n    if (n == 15) return isPowerOfFifteen(x);\n\
    \    if (n == 16) return isPowerOfSixteen(x);\n    if (n == 17) return isPowerOfSeventeen(x);\n\
    \    if (n == 18) return isPowerOfEighteen(x);\n    if (n == 19) return isPowerOfNineteen(x);\n\
    \    if (n == 20) return isPowerOfTwenty(x);\n    if (n == 21) return isPowerOfTwentyOne(x);\n\
    \    if (n == 22) return isPowerOfTwentyTwo(x);\n    if (n == 23) return isPowerOfTwentyThree(x);\n\
    \    if (n == 24) return isPowerOfTwentyFour(x);\n    if (n == 25) return isPowerOfTwentyFive(x);\n\
    \    if (n == 26) return isPowerOf", "{\n    // your code here\n    if(x==0)\n\
    \        return false;\n    if(n==0)\n        return false;\n    if(x==1)\n  \
    \      return true;\n    if(n==1)\n        return true;\n    if(x==n)\n      \
    \  return true;\n    if(x<n)\n        return false;\n    if(x>n)\n    {\n    \
    \    if(x%n!=0)\n            return false;\n        else\n        {\n        \
    \    long temp=x/n;\n            if(temp==n)\n                return true;\n \
    \           else\n                return is_simple_power(temp,n);\n        }\n\
    \    }\n}", "{\n    if (x == 1) return true;\n    if (n == 1) return false;\n\
    \    if (x == n) return true;\n    if (x < n) return false;\n    if (x % n !=\
    \ 0) return false;\n    return is_simple_power(x / n, n);\n}", "{\n    if(x ==\
    \ 1)\n        return true;\n    if(x == n)\n        return true;\n    if(x < n)\n\
    \        return false;\n    if(x % n != 0)\n        return false;\n    return\
    \ is_simple_power(x / n, n);\n}", "{\n    if(x==1)\n        return true;\n   \
    \ if(n==1)\n        return false;\n    if(x==n)\n        return true;\n    if(x<n)\n\
    \        return false;\n    if(x%n!=0)\n        return false;\n    return is_simple_power(x/n,n);\n\
    }", "{\n    if (x == 1) return true;\n    if (x == 0) return false;\n    if (n\
    \ == 1) return false;\n    if (n == 0) return false;\n    if (x == n) return true;\n\
    \    if (x < n) return false;\n    if (x % n != 0) return false;\n    if (x %\
    \ n == 0)\n    {\n        return is_simple_power(x / n, n);\n    }\n    return\
    \ false;\n}", "{\n    if (x == 1)\n        return true;\n    if (n == 1)\n   \
    \     return false;\n    if (x == n)\n        return true;\n    if (x < n)\n \
    \       return false;\n    if (x % n != 0)\n        return false;\n    return\
    \ is_simple_power(x / n, n);\n}", "{\n    if(x == 1)\n        return true;\n \
    \   if(x == n)\n        return true;\n    if(x < n)\n        return false;\n \
    \   if(x % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n\
    }", "{\n    if (x == 1) return true;\n    if (n == 1) return false;\n    if (x\
    \ == n) return true;\n    if (x < n) return false;\n    if (x % n != 0) return\
    \ false;\n    return is_simple_power(x / n, n);\n}", "{\n    long nn = n;\n  \
    \  long xx = x;\n    long i = 0;\n    while(nn < xx)\n    {\n        nn *= n;\n\
    \        i++;\n    }\n    if(nn == xx)\n        return true;\n    else\n     \
    \   return false;\n}", "{\n    if (x == 1)\n        return true;\n    if (x <\
    \ n)\n        return false;\n    if (x == n)\n        return true;\n    if (x\
    \ % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n}",
  "{\n    if(x == 1) return true;\n    if(x == n) return true;\n    if(x < n) return\
    \ false;\n    if(x % n != 0) return false;\n    return is_simple_power(x / n,\
    \ n);\n}", "{\n    if(x == n)\n        return true;\n    if(x < n)\n        return\
    \ false;\n    if(x % n != 0)\n        return false;\n    return is_simple_power(x\
    \ / n, n);\n}", "{\n    if (x == 1)\n        return true;\n    if (x == 0)\n \
    \       return false;\n    if (x < 0)\n        return false;\n    if (n == 0)\n\
    \        return false;\n    if (n == 1)\n        return true;\n    if (n < 0)\n\
    \        return false;\n    if (x == n)\n        return true;\n    if (x < n)\n\
    \        return false;\n    long tmp = n;\n    while (tmp < x)\n    {\n      \
    \  tmp *= n;\n        if (tmp == x)\n            return true;\n    }\n    return\
    \ false;\n}", "{\n    if (x == 1)\n        return true;\n    if (x == 0)\n   \
    \     return false;\n    if (x < 0)\n        return false;\n    if (n == 0)\n\
    \        return false;\n    if (n == 1)\n        return true;\n    if (n < 0)\n\
    \        return false;\n    if (x == n)\n        return true;\n    if (x < n)\n\
    \        return false;\n    if (x % n != 0)\n        return false;\n    if (x\
    \ % n == 0)\n    {\n        return is_simple_power(x / n, n);\n    }\n}", "{\n\
    \    if(x == 1)\n        return true;\n    if(x == n)\n        return true;\n\
    \    if(x < n)\n        return false;\n    if(x % n != 0)\n        return false;\n\
    \    return is_simple_power(x / n, n);\n}", "{\n    if(x == 1) return true;\n\
    \    if(x == n) return true;\n    if(x < n) return false;\n    return is_simple_power(x/n,\
    \ n);\n}", "{\n    long i = 0;\n    while (pow(n, i) <= x)\n    {\n        if\
    \ (pow(n, i) == x)\n            return true;\n        i++;\n    }\n    return\
    \ false;\n}", "{\n    if (x == 1) return true;\n    if (n == 1) return false;\n\
    \    if (x == n) return true;\n    if (n == 0) return false;\n    if (x == 0)\
    \ return false;\n    if (x < 0) return false;\n    if (n < 0) return false;\n\
    \    long i = 2;\n    long result = n;\n    while (result <= x)\n    {\n     \
    \   if (result == x) return true;\n        result = n * result;\n    }\n    return\
    \ false;\n}", "{\n    if(x == 1) return true;\n    if(x == 0) return false;\n\
    \    if(n == 1) return true;\n    if(n == 0) return false;\n    if(x < 0) return\
    \ false;\n    if(n < 0) return false;\n    if(x == n) return true;\n    long y\
    \ = n;\n    while(y < x)\n    {\n        y *= n;\n        if(y == x) return true;\n\
    \    }\n    return false;\n}", "{\n    // your code here\n    if(x==1) return\
    \ true;\n    if(n==1) return false;\n    if(x==n) return true;\n    if(x<n) return\
    \ false;\n    if(x%n!=0) return false;\n    return is_simple_power(x/n,n);\n}",
  "{\n    auto log = log10(x) / log10(n);\n    return log == cast(int)log;\n}", "{\n\
    \    if(x==0) return false;\n    if(n==0) return false;\n    if(x==1) return true;\n\
    \    if(n==1) return true;\n    if(x==n) return true;\n    if(x<n) return false;\n\
    \    if(x%n!=0) return false;\n    if(x==n*n) return true;\n    if(x==n*n*n) return\
    \ true;\n    if(x==n*n*n*n) return true;\n    if(x==n*n*n*n*n) return true;\n\
    \    if(x==n*n*n*n*n*n) return true;\n    if(x==n*n*n*n*n*n*n) return true;\n\
    \    if(x==n*n*n*n*n*n*n*n) return true;\n    if(x==n*n*n*n*n*n*n*n*n) return\
    \ true;\n    if(x==n*n*n*n*n*n*n*n*n*n) return true;\n    if(x==n*n*n*n*n*n*n*n*n*n*n)\
    \ return true;\n    if(x==n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if(x==n*n*n*n*n*n*n*n*n*n*n*n*n)\
    \ return true;\n    if(x==n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if(x==n*n*n*n*n*n*n*n*n*n*n*n*n*n*n)\
    \ return true;\n    if(x==n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if(x==n*n*n*n*n*n*n*n*n*n",
  "{\n    if (x == 1) return true;\n    if (n == 1) return false;\n    if (x == n)\
    \ return true;\n    if (x < n) return false;\n    if (x % n != 0) return false;\n\
    \    return is_simple_power(x / n, n);\n}", "{\n    auto log = log2(x) / log2(n);\n\
    \    return log == cast(long)log;\n}", "{\n    if(x == 1)\n        return true;\n\
    \    if(n == 1)\n        return false;\n    if(x == n)\n        return true;\n\
    \    if(x < n)\n        return false;\n    if(x % n != 0)\n        return false;\n\
    \    return is_simple_power(x / n, n);\n}", "{\n    if(x == 1) return true;\n\
    \    if(x == 0) return false;\n    if(n == 1) return false;\n    if(n == 0) return\
    \ false;\n    if(x == n) return true;\n    if(x < n) return false;\n    if(x %\
    \ n != 0) return false;\n    if(x % n == 0)\n    {\n        long y = x / n;\n\
    \        return is_simple_power(y, n);\n    }\n}", "{\n    // your code here\n\
    \    long y = n;\n    while(y < x)\n    {\n        y *= n;\n    }\n    return\
    \ y == x;\n}", "{\n    if(x == 1)\n        return true;\n    if(x == 0)\n    \
    \    return false;\n    if(n == 1)\n        return false;\n    if(n == 0)\n  \
    \      return false;\n    if(x == n)\n        return true;\n    if(x < n)\n  \
    \      return false;\n    if(x % n != 0)\n        return false;\n    if(n == 2)\n\
    \        return true;\n    if(n == 3)\n        return true;\n    if(n == 5)\n\
    \        return true;\n    if(n == 7)\n        return true;\n    if(n == 11)\n\
    \        return true;\n    if(n == 13)\n        return true;\n    if(n == 17)\n\
    \        return true;\n    if(n == 19)\n        return true;\n    if(n == 23)\n\
    \        return true;\n    if(n == 29)\n        return true;\n    if(n == 31)\n\
    \        return true;\n    if(n == 37)\n        return true;\n    if(n == 41)\n\
    \        return true;\n    if(n == 43)\n        return true;\n    if(n == 47)\n\
    \        return true;\n    if(n == 53)\n        return true;\n    if(n == 59)\n\
    \        return true;\n    if(n == 61)\n        return true;\n    if(n == 67)\n\
    \        return true;\n    if(n == 71)\n        return true;\n    if(n == 73)\n\
    \        return true;\n    if(n == 79)\n        return true;\n    if(n == 83)\n\
    \        return true;\n    if(n == 89)\n        return true;\n    if(n == 97)\n\
    \        return true;\n    if(n == 101)\n        return true;\n    if(n == 103)\n\
    \        return true;\n    if(n == 107)\n        return true;\n    if(n == 109)\n\
    \        return true;\n    if(n == 113)\n        return true;\n    if(n == 127)\n\
    \        return true;\n    if(n == 131)\n        return true;\n", "{\n    if (x\
    \ == 1)\n        return true;\n    if (n == 1)\n        return false;\n    if\
    \ (x == n)\n        return true;\n    if (n == 0)\n        return false;\n   \
    \ if (n == -1)\n        return false;\n    if (x == 0)\n        return false;\n\
    \    if (x < 0)\n        return false;\n    if (n < 0)\n        return false;\n\
    \    if (x % n != 0)\n        return false;\n    if (x == n)\n        return true;\n\
    \    if (x % n == 0)\n    {\n        long a = x / n;\n        if (a % n == 0)\n\
    \        {\n            return is_simple_power(a, n);\n        }\n        else\n\
    \            return false;\n    }\n    return false;\n}", "{\n    if(x==0)\n \
    \       return false;\n    if(x==1)\n        return true;\n    if(n==0)\n    \
    \    return false;\n    if(n==1)\n        return true;\n    if(x<0)\n        return\
    \ false;\n    if(n<0)\n        return false;\n    if(x==n)\n        return true;\n\
    \    if(x>n)\n    {\n        if(x%n!=0)\n            return false;\n        else\n\
    \            return is_simple_power(x/n,n);\n    }\n    else\n        return false;\n\
    }", "{\n    long nn = n;\n    long xx = x;\n    long i = 1;\n    while (xx > nn)\n\
    \    {\n        nn *= n;\n        i++;\n    }\n    if (xx == nn)\n        return\
    \ true;\n    else\n        return false;\n}", "{\n    auto res = log(x) / log(n);\n\
    \    return res == cast(long)res;\n}", "{\n    // your code here\n    if(x==1)\n\
    \        return true;\n    if(x==0)\n        return false;\n    if(n==0)\n   \
    \     return false;\n    if(n==1)\n        return false;\n    if(x<0)\n      \
    \  return false;\n    if(n<0)\n        return false;\n    if(x==n)\n        return\
    \ true;\n    if(x<n)\n        return false;\n    if(x%n!=0)\n        return false;\n\
    \    if(x%n==0)\n    {\n        if(x/n==1)\n            return true;\n       \
    \ else\n            return is_simple_power(x/n,n);\n    }\n}", "{\n    if (x ==\
    \ 1) return true;\n    if (x == n) return true;\n    if (x < n) return false;\n\
    \    if (x % n != 0) return false;\n    return is_simple_power(x / n, n);\n}",
  "{\n    if (x == 1)\n        return true;\n    if (n == 1)\n        return false;\n\
    \    if (x == n)\n        return true;\n    if (x < n)\n        return false;\n\
    \    if (x % n != 0)\n        return false;\n    return is_simple_power(x / n,\
    \ n);\n}", "{\n    auto result = log(x) / log(n);\n    return result == cast(long)result;\n\
    }", "{\n    auto log = log2(x) / log2(n);\n    return log == cast(int)log;\n}",
  "{\n    if (x == 1) return true;\n    if (x == n) return true;\n    if (x < n) return\
    \ false;\n    return is_simple_power(x / n, n);\n}", "{\n    if (x == 0) return\
    \ false;\n    if (n == 0) return false;\n    if (x == 1) return true;\n    if\
    \ (n == 1) return true;\n    if (x == n) return true;\n    if (x == n*n) return\
    \ true;\n    if (x == n*n*n) return true;\n    if (x == n*n*n*n) return true;\n\
    \    if (x == n*n*n*n*n) return true;\n    if (x == n*n*n*n*n*n) return true;\n\
    \    if (x == n*n*n*n*n*n*n) return true;\n    if (x == n*n*n*n*n*n*n*n) return\
    \ true;\n    if (x == n*n*n*n*n*n*n*n*n) return true;\n    if (x == n*n*n*n*n*n*n*n*n*n)\
    \ return true;\n    if (x == n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x ==\
    \ n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x == n*n*n*n*n*n*n*n*n*n*n*n*n)\
    \ return true;\n    if (x == n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if\
    \ (x == n*n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x == n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n)\
    \ return true;\n    if (x == n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n\
    \    if (x == n", "{\n    // your code here\n    if(x == 1)\n        return true;\n\
    \    if(n == 1)\n        return false;\n    if(x == n)\n        return true;\n\
    \    if(x < n)\n        return false;\n    if(x % n != 0)\n        return false;\n\
    \    return is_simple_power(x / n, n);\n}", "{\n    if (x == 1) return true;\n\
    \    if (n == 1) return false;\n    if (x == n) return true;\n    if (x < n) return\
    \ false;\n    if (x % n != 0) return false;\n    return is_simple_power(x / n,\
    \ n);\n}", "{\n    if (x == 1) return true;\n    if (x == n) return true;\n  \
    \  if (x < n) return false;\n    if (x % n != 0) return false;\n    return is_simple_power(x\
    \ / n, n);\n}", "{\n    if(x == 1)\n        return true;\n    if(n == 1)\n   \
    \     return false;\n    if(x == n)\n        return true;\n    if(x < n)\n   \
    \     return false;\n    if(x % n != 0)\n        return false;\n    return is_simple_power(x\
    \ / n, n);\n}", "{\n    if(x == 1)\n        return true;\n    if(x == n)\n   \
    \     return true;\n    if(x < n)\n        return false;\n    if(x % n != 0)\n\
    \        return false;\n    return is_simple_power(x / n, n);\n}", "{\n    if\
    \ (x == 1) return true;\n    if (x < n) return false;\n    if (x == n) return\
    \ true;\n    if (x % n != 0) return false;\n    return is_simple_power(x / n,\
    \ n);\n}", "{\n    if(x==1)\n        return true;\n    if(x%n!=0)\n        return\
    \ false;\n    return is_simple_power(x/n,n);\n}", "{\n    // your code here\n\
    \    if(x==0)\n        return false;\n    if(x==1)\n        return true;\n   \
    \ if(n==0)\n        return false;\n    if(n==1)\n        return true;\n    if(x==n)\n\
    \        return true;\n    long a=0;\n    long b=0;\n    long c=0;\n    long d=0;\n\
    \    long e=0;\n    long f=0;\n    long g=0;\n    long h=0;\n    long i=0;\n \
    \   long j=0;\n    long k=0;\n    long l=0;\n    long m=0;\n    long o=0;\n  \
    \  long p=0;\n    long q=0;\n    long r=0;\n    long s=0;\n    long t=0;\n   \
    \ long u=0;\n    long v=0;\n    long w=0;\n    long y=0;\n    long z=0;\n    long\
    \ aa=0;\n    long ab=0;\n    long ac=0;\n    long ad=0;\n    long ae=0;\n    long\
    \ af=0;\n    long ag=0;\n    long ah=0;\n    long ai=0;\n    long aj=0;\n    long\
    \ ak=0;\n    long al=0;\n    long am=0;\n    long ao=0;\n    long ap=0;\n    long\
    \ aq=0;\n    long ar=0;\n    long as=0;\n    long at=0;\n    long au=0;\n    long\
    \ av=0;\n    long aw=0;\n    long ay=0;\n    long az=0;\n    long aaa=0;\n   \
    \ long aab=0;\n    long aac=0;\n    long aad=0;\n    long aae=0;\n    long aaf=0;\n\
    \    long aag=0;\n    long aah=0;\n    long aai=0;\n    long aaj=0;\n    long\
    \ aak=0;\n    long aal=0;\n", "{\n    // your code here\n    if(x==1)\n      \
    \  return true;\n    if(x==n)\n        return true;\n    if(x<n)\n        return\
    \ false;\n    if(x%n!=0)\n        return false;\n    return is_simple_power(x/n,n);\n\
    }", "{\n    auto result = log(x) / log(n);\n    return result == int(result);\n\
    }", "{\n    if(x == 1) return true;\n    if(x == 0) return false;\n    if(n ==\
    \ 1) return true;\n    if(n == 0) return false;\n    if(x < 0) return false;\n\
    \    if(n < 0) return false;\n    if(x == n) return true;\n    if(x % n != 0)\
    \ return false;\n    return is_simple_power(x / n, n);\n}", "{\n    if(x==1) return\
    \ true;\n    if(x<1) return false;\n    if(n==1) return true;\n    if(n<1) return\
    \ false;\n    long i=2;\n    while(pow(n,i)<=x)\n    {\n        if(pow(n,i)==x)\
    \ return true;\n        i++;\n    }\n    return false;\n}", "{\n    if(x==1)\n\
    \        return true;\n    if(n==1)\n        return false;\n    if(x==n)\n   \
    \     return true;\n    if(x<n)\n        return false;\n    if(x%n!=0)\n     \
    \   return false;\n    return is_simple_power(x/n,n);\n}", "{\n    if (x == 1)\n\
    \        return true;\n    if (x == 0)\n        return false;\n    if (n == 1)\n\
    \        return true;\n    if (n == 0)\n        return false;\n    if (x < 0)\n\
    \        return false;\n    if (n < 0)\n        return false;\n    if (x == n)\n\
    \        return true;\n    if (x < n)\n        return false;\n    if (x % n !=\
    \ 0)\n        return false;\n    return is_simple_power(x / n, n);\n}", "{\n \
    \   return x == pow(n, cast(int)log(x) / log(n));\n}", "{\n    if(x == 1)\n  \
    \      return true;\n    if(x == n)\n        return true;\n    if(x < n)\n   \
    \     return false;\n    if(x % n != 0)\n        return false;\n    return is_simple_power(x\
    \ / n, n);\n}", "{\n    if(x == 1)\n        return true;\n    if(x == n)\n   \
    \     return true;\n    if(x < n)\n        return false;\n    if(x % n != 0)\n\
    \        return false;\n    return is_simple_power(x / n, n);\n}", "{\n    if(x\
    \ == 1)\n        return true;\n    if(n == 1)\n        return false;\n    if(x\
    \ == n)\n        return true;\n    if(x < n)\n        return false;\n    if(x\
    \ % n != 0)\n        return false;\n    return is_simple_power(x / n, n);\n}",
  "{\n    auto result = log(x) / log(n);\n    return result == cast(long)result;\n\
    }", "{\n    if(x == 1) return true;\n    if(n == 1) return false;\n    if(x ==\
    \ n) return true;\n    if(x < n) return false;\n    if(x % n != 0) return false;\n\
    \    return is_simple_power(x / n, n);\n}", "{\n    if(x == 1) return true;\n\
    \    if(x == 0) return false;\n    if(n == 1) return false;\n    if(n == 0) return\
    \ false;\n    if(x == n) return true;\n    if(x < n) return false;\n    if(x %\
    \ n != 0) return false;\n    return is_simple_power(x / n, n);\n}", "{\n    if\
    \ (x == 1) return true;\n    if (n == 1) return false;\n    if (x == n) return\
    \ true;\n    if (n == 0) return false;\n    if (x == 0) return false;\n    if\
    \ (x < 0) return false;\n    if (n < 0) return false;\n    if (x == 2) return\
    \ true;\n    if (n == 2) return false;\n    if (x == 3) return true;\n    if (n\
    \ == 3) return false;\n    if (x == 4) return true;\n    if (n == 4) return false;\n\
    \    if (x == 5) return true;\n    if (n == 5) return false;\n    if (x == 6)\
    \ return true;\n    if (n == 6) return false;\n    if (x == 7) return true;\n\
    \    if (n == 7) return false;\n    if (x == 8) return true;\n    if (n == 8)\
    \ return false;\n    if (x == 9) return true;\n    if (n == 9) return false;\n\
    \    if (x == 10) return true;\n    if (n == 10) return false;\n    if (x == 11)\
    \ return true;\n    if (n == 11) return false;\n    if (x == 12) return true;\n\
    \    if (n == 12) return false;\n    if (x == 13) return true;\n    if (n == 13)\
    \ return false;\n    if (x == 14) return true;\n    if (n == 14) return false;\n\
    \    if (x == 15) return true;\n    if (n == 15) return false;\n    if (x == 16)\
    \ return true;\n    if (n == 16) return false;\n    if (x == 17) return true;\n\
    \    if (n == 17) return false;\n    if (x == 18) return true;\n    if (n == 18)\
    \ return false;\n    if (x == 19) return true;\n    if (n == 19) return false;\n\
    \    if (x == 20) return true;\n    if (n == 20) return false;\n    if (x == 21)\
    \ return true;\n    if (", "{\n    if (x == 0) return false;\n    if (n == 0)\
    \ return false;\n    if (x == 1) return true;\n    if (n == 1) return true;\n\
    \    if (x == n) return true;\n    if (x < n) return false;\n    if (x % n !=\
    \ 0) return false;\n    if (x == n * n) return true;\n    if (x % (n * n) == 0)\
    \ return false;\n    if (x % (n * n) != 0) return true;\n    return false;\n}",
  "{\n    if (x == 0) return false;\n    if (n == 0) return false;\n    if (x == 1)\
    \ return true;\n    if (n == 1) return true;\n    if (x == n) return true;\n \
    \   if (x == n*n) return true;\n    if (x == n*n*n) return true;\n    if (x ==\
    \ n*n*n*n) return true;\n    if (x == n*n*n*n*n) return true;\n    if (x == n*n*n*n*n*n)\
    \ return true;\n    if (x == n*n*n*n*n*n*n) return true;\n    if (x == n*n*n*n*n*n*n*n)\
    \ return true;\n    if (x == n*n*n*n*n*n*n*n*n) return true;\n    if (x == n*n*n*n*n*n*n*n*n*n)\
    \ return true;\n    if (x == n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x ==\
    \ n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x == n*n*n*n*n*n*n*n*n*n*n*n*n)\
    \ return true;\n    if (x == n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if\
    \ (x == n*n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n    if (x == n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n)\
    \ return true;\n    if (x == n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n) return true;\n\
    \    if (x == n", "{\n    if(x == 1)\n        return true;\n    if(x == n)\n \
    \       return true;\n    if(x < n)\n        return false;\n    if(x % n != 0)\n\
    \        return false;\n    return is_simple_power(x / n, n);\n}", "{\n    return\
    \ x == pow(n, cast(int)log(x) / log(n));\n}", "{\n    if (x == 1) return true;\n\
    \    if (n == 1) return false;\n    if (x == n) return true;\n    if (x < n) return\
    \ false;\n    if (x % n != 0) return false;\n    return is_simple_power(x / n,\
    \ n);\n}", "{\n    if(x == 1) return true;\n    if(x == 0) return false;\n   \
    \ if(n == 1) return false;\n    if(n == 0) return false;\n    if(n == x) return\
    \ true;\n    if(n == -1) return true;\n    if(n == -x) return true;\n    if(n\
    \ == 2)\n    {\n        if(x == 2) return true;\n        if(x == 4) return true;\n\
    \        if(x == 8) return true;\n        if(x == 16) return true;\n        if(x\
    \ == 32) return true;\n        if(x == 64) return true;\n        if(x == 128)\
    \ return true;\n        if(x == 256) return true;\n        if(x == 512) return\
    \ true;\n        if(x == 1024) return true;\n        if(x == 2048) return true;\n\
    \        if(x == 4096) return true;\n        if(x == 8192) return true;\n    \
    \    if(x == 16384) return true;\n        if(x == 32768) return true;\n      \
    \  if(x == 65536) return true;\n        if(x == 131072) return true;\n       \
    \ if(x == 262144) return true;\n        if(x == 524288) return true;\n       \
    \ if(x == 1048576) return true;\n        if(x == 2097152) return true;\n     \
    \   if(x == 4194304) return true;\n        if(x == 8388608) return true;\n   \
    \     if(x == 16777216) return true;\n        if(x == 33554432) return true;\n\
    \        if(x == 67108864) return true;\n        if(x == 134217728) return true;\n\
    \        if(x == 268435456) return true;\n        if(x == 536870912) return true;\n\
    \        if(x == 1073741824) return true;\n        if(x == 2147483648) return\
    \ true;\n        if(x == 4294967296) return true;\n        if(x == 8589934592)\
    \ return true;\n        if(x == 1717", "{\n    if (x == 1)\n        return true;\n\
    \    if (x == 0)\n        return false;\n    if (n == 1)\n        return false;\n\
    \    if (n == 0)\n        return false;\n    if (x < 0)\n        return false;\n\
    \    if (n < 0)\n        return false;\n    if (x == n)\n        return true;\n\
    \    if (x % n != 0)\n        return false;\n    return is_simple_power(x / n,\
    \ n);\n}", "{\n    if (x == 1)\n        return true;\n    if (x == 0)\n      \
    \  return false;\n    if (n == 1)\n        return true;\n    if (n == 0)\n   \
    \     return false;\n    if (x < 0)\n        return false;\n    if (n < 0)\n \
    \       return false;\n    if (x == n)\n        return true;\n    if (x % n !=\
    \ 0)\n        return false;\n    return is_simple_power(x / n, n);\n}", "{\n \
    \   long y = x;\n    long z = n;\n    long a = 0;\n    long b = 0;\n    long c\
    \ = 0;\n    long d = 0;\n    long e = 0;\n    long f = 0;\n    long g = 0;\n \
    \   long h = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l\
    \ = 0;\n    long m = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n \
    \   long r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v\
    \ = 0;\n    long w = 0;\n    long x1 = 0;\n    long y1 = 0;\n    long z1 = 0;\n\
    \    long a1 = 0;\n    long b1 = 0;\n    long c1 = 0;\n    long d1 = 0;\n    long\
    \ e1 = 0;\n    long f1 = 0;\n    long g1 = 0;\n    long h1 = 0;\n    long i1 =\
    \ 0;\n    long j1 = 0;\n    long k1 = 0;\n    long l1 = 0;\n    long m1 = 0;\n\
    \    long o1 = 0;\n    long p1 = 0;\n    long q1 = 0;\n    long r1 = 0;\n    long\
    \ s1 = 0;\n    long t1 = 0;\n    long u1 = 0;\n    long v1 = 0;\n    long w1 =\
    \ 0;\n    long x2 = 0;\n    long y2 = 0;\n    long z2 = 0;\n    long a2 = 0;\n\
    \    long b2 = 0;\n    long c2 = 0;\n    long d2 = 0;\n    long e2 = 0;\n    long\
    \ f2 = 0;\n    long g2 = 0;\n    long h2 = 0;\n    long i2 = 0;\n    long j2 =\
    \ 0;\n    long k2 = 0;\n    long l2 = 0;\n    long m2 = 0;\n    long o2 = 0;\n\
    \    long p2 =", "{\n    return x == pow(n, cast(int)log(x) / log(n));\n}", "{\n\
    \    if(x==1) return true;\n    if(x==0) return false;\n    if(n==0) return false;\n\
    \    if(n==1) return true;\n    if(x==n) return true;\n    if(n==2) return isPowerOfTwo(x);\n\
    \    if(n==3) return isPowerOfThree(x);\n    if(n==4) return isPowerOfFour(x);\n\
    \    if(n==5) return isPowerOfFive(x);\n    if(n==6) return isPowerOfSix(x);\n\
    \    if(n==7) return isPowerOfSeven(x);\n    if(n==8) return isPowerOfEight(x);\n\
    \    if(n==9) return isPowerOfNine(x);\n    if(n==10) return isPowerOfTen(x);\n\
    \    if(n==11) return isPowerOfEleven(x);\n    if(n==12) return isPowerOfTwelve(x);\n\
    \    if(n==13) return isPowerOfThirteen(x);\n    if(n==14) return isPowerOfFourteen(x);\n\
    \    if(n==15) return isPowerOfFifteen(x);\n    if(n==16) return isPowerOfSixteen(x);\n\
    \    if(n==17) return isPowerOfSeventeen(x);\n    if(n==18) return isPowerOfEighteen(x);\n\
    \    if(n==19) return isPowerOfNineteen(x);\n    if(n==20) return isPowerOfTwenty(x);\n\
    \    if(n==21) return isPowerOfTwentyOne(x);\n    if(n==22) return isPowerOfTwentyTwo(x);\n\
    \    if(n==23) return isPowerOfTwentyThree(x);\n    if(n==24) return isPowerOfTwentyFour(x);\n\
    \    if(n==25) return isPowerOfTwentyFive(x);\n    if(n==26) return isPowerOfTwentySix(x);\n\
    \    if(n==27) return isPowerOfTwentySeven(x);\n    if(n==28) return isPowerOfTwentyEight(x);\n\
    \    if(n", "{\n    if (x == 1)\n        return true;\n    if (n == 1)\n     \
    \   return false;\n    if (x < n)\n        return false;\n    if (x == n)\n  \
    \      return true;\n    if (x % n != 0)\n        return false;\n    return is_simple_power(x\
    \ / n, n);\n}", "{\n    if (x == 0)\n        return false;\n    if (n == 0)\n\
    \        return false;\n    if (x == 1)\n        return true;\n    if (n == 1)\n\
    \        return true;\n    if (x == n)\n        return true;\n    if (x < n)\n\
    \        return false;\n    long temp = n;\n    while (temp <= x)\n    {\n   \
    \     if (temp == x)\n            return true;\n        temp *= n;\n    }\n  \
    \  return false;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
