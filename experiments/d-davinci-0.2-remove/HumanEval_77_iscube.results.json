{
  "language": "d",
  "name": "HumanEval_77_iscube",
  "results": [
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    return a == pow(cast(long)pow(a, 1.0/3.0), 3);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpj7pnfa92.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428a85]\n??:? void tmpj7pnfa92.__unittest_L15_C1() [0x427da4]\n??:? void tmpj7pnfa92.__modtest() [0x428808]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c853]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b6e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430879]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430805]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6bd]\n??:? runModuleUnitTests [0x42c629]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ed4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    return a == pow(cast(long)pow(a, 1.0/3.0), 3);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpj7pnfa92.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428a85]\n??:? void tmpj7pnfa92.__unittest_L15_C1() [0x427da4]\n??:? void tmpj7pnfa92.__modtest() [0x428808]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c853]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b6e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430879]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430805]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6bd]\n??:? runModuleUnitTests [0x42c629]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ed4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    long b = (long)pow(a, 1.0/3.0);\n    return b*b*b == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpyyjczgus.d(13): Error: C style cast illegal, use `cast(long)pow(a, 1.00000 / 3.00000)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyyjczgus.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    long x = (long)pow(a, 1.0/3.0);\n    return x*x*x == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmppba0rnbv.d(13): Error: C style cast illegal, use `cast(long)pow(a, 1.00000 / 3.00000)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppba0rnbv.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    long b = (long)pow(a, 1.0/3.0);\n    return b*b*b == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpyyjczgus.d(13): Error: C style cast illegal, use `cast(long)pow(a, 1.00000 / 3.00000)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyyjczgus.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    return a == pow(cast(long)pow(a, 1.0/3.0), 3);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpj7pnfa92.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428a85]\n??:? void tmpj7pnfa92.__unittest_L15_C1() [0x427da4]\n??:? void tmpj7pnfa92.__modtest() [0x428808]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c853]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b6e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430879]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430805]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6bd]\n??:? runModuleUnitTests [0x42c629]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ed4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    return a == pow(cast(long)pow(a, 1.0/3.0), 3);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpj7pnfa92.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428a85]\n??:? void tmpj7pnfa92.__unittest_L15_C1() [0x427da4]\n??:? void tmpj7pnfa92.__modtest() [0x428808]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c853]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b6e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430879]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430805]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6bd]\n??:? runModuleUnitTests [0x42c629]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ed4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    return a == pow(cast(long)pow(a, 1.0/3.0), 3);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpj7pnfa92.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428a85]\n??:? void tmpj7pnfa92.__unittest_L15_C1() [0x427da4]\n??:? void tmpj7pnfa92.__modtest() [0x428808]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c853]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b6e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430879]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430805]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6bd]\n??:? runModuleUnitTests [0x42c629]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ed4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    return a == pow(cast(long)pow(a, 1.0/3.0), 3);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpj7pnfa92.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428a85]\n??:? void tmpj7pnfa92.__unittest_L15_C1() [0x427da4]\n??:? void tmpj7pnfa92.__modtest() [0x428808]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c853]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b6e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430879]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430805]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6bd]\n??:? runModuleUnitTests [0x42c629]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ed4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    long b = (long)pow(a, 1.0/3.0);\n    return (long)pow(b, 3) == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpti55ebyy.d(13): Error: C style cast illegal, use `cast(long)pow(a, 1.00000 / 3.00000)`\n/tmp/tmpti55ebyy.d(14): Error: C style cast illegal, use `cast(long)pow(b, 3)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpti55ebyy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    return a == pow(cast(long)pow(a, 1.0/3.0), 3);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpj7pnfa92.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428a85]\n??:? void tmpj7pnfa92.__unittest_L15_C1() [0x427da4]\n??:? void tmpj7pnfa92.__modtest() [0x428808]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c853]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b6e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430879]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430805]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6bd]\n??:? runModuleUnitTests [0x42c629]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ed4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    return a == pow(cast(long)pow(a, 1.0/3.0), 3);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpj7pnfa92.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428a85]\n??:? void tmpj7pnfa92.__unittest_L15_C1() [0x427da4]\n??:? void tmpj7pnfa92.__modtest() [0x428808]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c853]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b6e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430879]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430805]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6bd]\n??:? runModuleUnitTests [0x42c629]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ed4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    long b = (long)pow(a, 1.0/3.0);\n    return b*b*b == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpyyjczgus.d(13): Error: C style cast illegal, use `cast(long)pow(a, 1.00000 / 3.00000)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyyjczgus.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    long b = (long)pow(a, 1.0/3.0);\n    return a == b*b*b;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpp2w3u3k7.d(13): Error: C style cast illegal, use `cast(long)pow(a, 1.00000 / 3.00000)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp2w3u3k7.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    return a == cast(long)pow(cast(double)a, 1.0/3.0);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp65d34sp_.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x42892d]\n??:? void tmp65d34sp_.__unittest_L15_C1() [0x427cf4]\n??:? void tmp65d34sp_.__modtest() [0x4286b0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6fb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b58e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430721]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430bd0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4306ad]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b565]\n??:? runModuleUnitTests [0x42c4d1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428d7c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    long b = (long)pow(a, 1.0/3.0);\n    return a == b*b*b;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpp2w3u3k7.d(13): Error: C style cast illegal, use `cast(long)pow(a, 1.00000 / 3.00000)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp2w3u3k7.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    long b = (long)pow(a, 1.0/3.0);\n    return b*b*b == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpyyjczgus.d(13): Error: C style cast illegal, use `cast(long)pow(a, 1.00000 / 3.00000)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyyjczgus.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    long b = (long)pow(a, 1.0/3.0);\n    return (b*b*b == a);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpiu24hh7w.d(13): Error: C style cast illegal, use `cast(long)pow(a, 1.00000 / 3.00000)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiu24hh7w.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    return a == pow(cast(long)pow(a, 1.0 / 3.0), 3);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpejn23xzw.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428a85]\n??:? void tmpejn23xzw.__unittest_L15_C1() [0x427da4]\n??:? void tmpejn23xzw.__modtest() [0x428808]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c853]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b6e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430879]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430805]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6bd]\n??:? runModuleUnitTests [0x42c629]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ed4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    long x = (long)pow(a, 1.0/3.0);\n    return x*x*x == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmppba0rnbv.d(13): Error: C style cast illegal, use `cast(long)pow(a, 1.00000 / 3.00000)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppba0rnbv.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    long b = (long)pow(a, 1.0/3.0);\n    return b*b*b == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpyyjczgus.d(13): Error: C style cast illegal, use `cast(long)pow(a, 1.00000 / 3.00000)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyyjczgus.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    return a == pow(cast(long)pow(a, 1.0/3.0), 3);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpj7pnfa92.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428a85]\n??:? void tmpj7pnfa92.__unittest_L15_C1() [0x427da4]\n??:? void tmpj7pnfa92.__modtest() [0x428808]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c853]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b6e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430879]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430805]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6bd]\n??:? runModuleUnitTests [0x42c629]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ed4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    double root = pow(a, 1.0/3.0);\n    return root == (long)root;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpfkb9kuq3.d(14): Error: C style cast illegal, use `cast(long)root`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfkb9kuq3.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    return a == pow(cast(long)pow(a, 1.0/3.0), 3);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpj7pnfa92.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428a85]\n??:? void tmpj7pnfa92.__unittest_L15_C1() [0x427da4]\n??:? void tmpj7pnfa92.__modtest() [0x428808]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c853]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b6e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430879]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430805]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6bd]\n??:? runModuleUnitTests [0x42c629]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ed4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    return a == pow(cast(long)pow(a, 1.0 / 3.0), 3);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpejn23xzw.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428a85]\n??:? void tmpejn23xzw.__unittest_L15_C1() [0x427da4]\n??:? void tmpejn23xzw.__modtest() [0x428808]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c853]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b6e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430879]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430805]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6bd]\n??:? runModuleUnitTests [0x42c629]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ed4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    long b = (long)pow(a, 1.0/3.0);\n    return b*b*b == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpyyjczgus.d(13): Error: C style cast illegal, use `cast(long)pow(a, 1.00000 / 3.00000)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyyjczgus.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    long b = (long)pow(a, 1.0/3.0);\n    return a == b*b*b;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpp2w3u3k7.d(13): Error: C style cast illegal, use `cast(long)pow(a, 1.00000 / 3.00000)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp2w3u3k7.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    return a == pow(cast(long)pow(a, 1.0/3.0), 3);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpj7pnfa92.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428a85]\n??:? void tmpj7pnfa92.__unittest_L15_C1() [0x427da4]\n??:? void tmpj7pnfa92.__modtest() [0x428808]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c853]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b6e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430879]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430805]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6bd]\n??:? runModuleUnitTests [0x42c629]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ed4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    return a == cast(long)pow(cast(double)a, 1.0/3.0);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp65d34sp_.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x42892d]\n??:? void tmp65d34sp_.__unittest_L15_C1() [0x427cf4]\n??:? void tmp65d34sp_.__modtest() [0x4286b0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6fb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b58e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430721]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430bd0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4306ad]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b565]\n??:? runModuleUnitTests [0x42c4d1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428d7c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    // your code here\n    return false;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpdx5lmsws.d(20): unittest failure\n----------------\n??:? _d_unittestp [0x427d85]\n??:? void tmpdx5lmsws.__unittest_L16_C1() [0x427a1c]\n??:? void tmpdx5lmsws.__modtest() [0x427b08]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a93e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fad1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff80]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa5d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a915]\n??:? runModuleUnitTests [0x42b881]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    long b = (long)pow(a, 1.0/3.0);\n    return b*b*b == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpyyjczgus.d(13): Error: C style cast illegal, use `cast(long)pow(a, 1.00000 / 3.00000)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyyjczgus.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    long x = (long)pow(a, 1.0/3.0);\n    return x*x*x == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmppba0rnbv.d(13): Error: C style cast illegal, use `cast(long)pow(a, 1.00000 / 3.00000)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppba0rnbv.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    auto b = cast(long)pow(a, 1.0/3.0);\n    return b*b*b == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpbfsb2nbr.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x4289ad]\n??:? void tmpbfsb2nbr.__unittest_L16_C1() [0x427d64]\n??:? void tmpbfsb2nbr.__modtest() [0x428730]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c77b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b60e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c50]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43072d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5e5]\n??:? runModuleUnitTests [0x42c551]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428dfc]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    auto b = cast(long)pow(a, 1.0/3.0);\n    return b*b*b == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpbfsb2nbr.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x4289ad]\n??:? void tmpbfsb2nbr.__unittest_L16_C1() [0x427d64]\n??:? void tmpbfsb2nbr.__modtest() [0x428730]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c77b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b60e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c50]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43072d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5e5]\n??:? runModuleUnitTests [0x42c551]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428dfc]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    long c = (long)pow(a, 1.0/3.0);\n    return c*c*c == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpyv1trfva.d(13): Error: C style cast illegal, use `cast(long)pow(a, 1.00000 / 3.00000)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyv1trfva.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    return a == pow(cast(long)pow(a, 1.0/3.0), 3);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpj7pnfa92.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428a85]\n??:? void tmpj7pnfa92.__unittest_L15_C1() [0x427da4]\n??:? void tmpj7pnfa92.__modtest() [0x428808]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c853]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b6e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430879]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430805]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6bd]\n??:? runModuleUnitTests [0x42c629]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ed4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    return a == pow(cast(long)pow(a, 1.0/3.0), 3);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpj7pnfa92.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428a85]\n??:? void tmpj7pnfa92.__unittest_L15_C1() [0x427da4]\n??:? void tmpj7pnfa92.__modtest() [0x428808]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c853]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b6e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430879]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430805]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6bd]\n??:? runModuleUnitTests [0x42c629]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ed4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    long x = (long)pow(a, 1.0/3.0);\n    return x*x*x == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmppba0rnbv.d(13): Error: C style cast illegal, use `cast(long)pow(a, 1.00000 / 3.00000)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppba0rnbv.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    long b = (long)pow(a, 1.0/3.0);\n    return b*b*b == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpyyjczgus.d(13): Error: C style cast illegal, use `cast(long)pow(a, 1.00000 / 3.00000)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyyjczgus.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    long c = (long)pow(a, 1.0/3.0);\n    return c*c*c == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpyv1trfva.d(13): Error: C style cast illegal, use `cast(long)pow(a, 1.00000 / 3.00000)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyv1trfva.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    long b = (long)pow(a, 1.0/3.0);\n    return b*b*b == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpyyjczgus.d(13): Error: C style cast illegal, use `cast(long)pow(a, 1.00000 / 3.00000)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyyjczgus.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    return a == pow(cast(long)pow(a, 1.0/3.0), 3);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpj7pnfa92.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428a85]\n??:? void tmpj7pnfa92.__unittest_L15_C1() [0x427da4]\n??:? void tmpj7pnfa92.__modtest() [0x428808]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c853]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b6e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430879]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430805]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6bd]\n??:? runModuleUnitTests [0x42c629]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ed4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    long b = (long)pow(a, 1.0/3.0);\n    return (b*b*b == a);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpiu24hh7w.d(13): Error: C style cast illegal, use `cast(long)pow(a, 1.00000 / 3.00000)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiu24hh7w.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    return a == pow(cast(long)pow(a, 1.0/3.0), 3);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpj7pnfa92.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428a85]\n??:? void tmpj7pnfa92.__unittest_L15_C1() [0x427da4]\n??:? void tmpj7pnfa92.__modtest() [0x428808]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c853]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b6e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430879]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430805]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6bd]\n??:? runModuleUnitTests [0x42c629]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ed4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    return a == pow(cast(long)pow(a, 1.0/3.0), 3);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpj7pnfa92.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428a85]\n??:? void tmpj7pnfa92.__unittest_L15_C1() [0x427da4]\n??:? void tmpj7pnfa92.__modtest() [0x428808]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c853]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b6e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430879]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430805]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6bd]\n??:? runModuleUnitTests [0x42c629]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ed4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    long b = (long)pow(a, 1.0/3.0);\n    return a == b*b*b;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpp2w3u3k7.d(13): Error: C style cast illegal, use `cast(long)pow(a, 1.00000 / 3.00000)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp2w3u3k7.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    long b = (long)pow(a, 1.0/3.0);\n    return b*b*b == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpyyjczgus.d(13): Error: C style cast illegal, use `cast(long)pow(a, 1.00000 / 3.00000)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyyjczgus.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    return a == pow(cast(long)pow(a, 1.0 / 3.0), 3);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpejn23xzw.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428a85]\n??:? void tmpejn23xzw.__unittest_L15_C1() [0x427da4]\n??:? void tmpejn23xzw.__modtest() [0x428808]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c853]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b6e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430879]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430805]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6bd]\n??:? runModuleUnitTests [0x42c629]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ed4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    // your code here\n    return false;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpdx5lmsws.d(20): unittest failure\n----------------\n??:? _d_unittestp [0x427d85]\n??:? void tmpdx5lmsws.__unittest_L16_C1() [0x427a1c]\n??:? void tmpdx5lmsws.__modtest() [0x427b08]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a93e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fad1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff80]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa5d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a915]\n??:? runModuleUnitTests [0x42b881]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    long x = (long)pow(a, 1.0/3.0);\n    return x*x*x == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmppba0rnbv.d(13): Error: C style cast illegal, use `cast(long)pow(a, 1.00000 / 3.00000)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppba0rnbv.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    long b = (long)pow(a, 1.0/3.0);\n    return b*b*b == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpyyjczgus.d(13): Error: C style cast illegal, use `cast(long)pow(a, 1.00000 / 3.00000)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyyjczgus.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    return a == pow(cast(long)pow(a, 1.0/3.0), 3);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpj7pnfa92.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428a85]\n??:? void tmpj7pnfa92.__unittest_L15_C1() [0x427da4]\n??:? void tmpj7pnfa92.__modtest() [0x428808]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c853]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b6e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430879]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430805]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6bd]\n??:? runModuleUnitTests [0x42c629]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ed4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    return a == pow(cast(long)pow(a, 1.0/3.0), 3);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpj7pnfa92.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428a85]\n??:? void tmpj7pnfa92.__unittest_L15_C1() [0x427da4]\n??:? void tmpj7pnfa92.__modtest() [0x428808]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c853]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b6e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430879]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430805]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6bd]\n??:? runModuleUnitTests [0x42c629]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ed4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    long i = 0;\n    while (i * i * i < a)\n    {\n        i++;\n    }\n    return i * i * i == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp_7pyp7yw.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x427dc5]\n??:? void tmp_7pyp7yw.__unittest_L20_C1() [0x427a98]\n??:? void tmp_7pyp7yw.__modtest() [0x427b44]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baeb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a97e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb11]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa9d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a955]\n??:? runModuleUnitTests [0x42b8c1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428214]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    return a == pow(cast(long)pow(a, 1.0/3.0), 3);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpj7pnfa92.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428a85]\n??:? void tmpj7pnfa92.__unittest_L15_C1() [0x427da4]\n??:? void tmpj7pnfa92.__modtest() [0x428808]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c853]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b6e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430879]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430805]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6bd]\n??:? runModuleUnitTests [0x42c629]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ed4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    return a == pow(cast(long)pow(a, 1.0/3.0), 3);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpj7pnfa92.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428a85]\n??:? void tmpj7pnfa92.__unittest_L15_C1() [0x427da4]\n??:? void tmpj7pnfa92.__modtest() [0x428808]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c853]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b6e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430879]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430805]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6bd]\n??:? runModuleUnitTests [0x42c629]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ed4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    long b = (long)pow(a, 1.0/3.0);\n    return b*b*b == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpyyjczgus.d(13): Error: C style cast illegal, use `cast(long)pow(a, 1.00000 / 3.00000)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyyjczgus.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    long b = cast(long)pow(a, 1.0/3.0);\n    return b*b*b == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpomecp5db.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x4289ad]\n??:? void tmpomecp5db.__unittest_L16_C1() [0x427d64]\n??:? void tmpomecp5db.__modtest() [0x428730]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c77b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b60e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c50]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43072d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5e5]\n??:? runModuleUnitTests [0x42c551]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428dfc]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    long b = (long)pow(a, 1.0/3.0);\n    return b*b*b == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpyyjczgus.d(13): Error: C style cast illegal, use `cast(long)pow(a, 1.00000 / 3.00000)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyyjczgus.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    long b = (long)pow(a, 1.0/3.0);\n    return b*b*b == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpyyjczgus.d(13): Error: C style cast illegal, use `cast(long)pow(a, 1.00000 / 3.00000)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyyjczgus.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    return a == pow(cast(long)pow(a, 1.0/3.0), 3);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpj7pnfa92.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428a85]\n??:? void tmpj7pnfa92.__unittest_L15_C1() [0x427da4]\n??:? void tmpj7pnfa92.__modtest() [0x428808]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c853]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b6e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430879]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430805]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6bd]\n??:? runModuleUnitTests [0x42c629]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ed4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    return a == pow(cast(long)pow(a, 1.0 / 3.0), 3);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpejn23xzw.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428a85]\n??:? void tmpejn23xzw.__unittest_L15_C1() [0x427da4]\n??:? void tmpejn23xzw.__modtest() [0x428808]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c853]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b6e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430879]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430805]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6bd]\n??:? runModuleUnitTests [0x42c629]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ed4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    return is(typeof(pow(a, 1.0/3)) == int);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp0nbjmrvd.d(19): unittest failure\n----------------\n??:? _d_unittestp [0x427d85]\n??:? void tmp0nbjmrvd.__unittest_L15_C1() [0x427a1c]\n??:? void tmp0nbjmrvd.__modtest() [0x427b08]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a93e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fad1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff80]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa5d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a915]\n??:? runModuleUnitTests [0x42b881]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    return a == pow(cast(long)pow(a, 1.0/3.0), 3);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpj7pnfa92.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428a85]\n??:? void tmpj7pnfa92.__unittest_L15_C1() [0x427da4]\n??:? void tmpj7pnfa92.__modtest() [0x428808]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c853]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b6e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430879]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430805]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6bd]\n??:? runModuleUnitTests [0x42c629]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ed4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    return a == pow(cast(long)pow(a, 1.0/3.0), 3);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpj7pnfa92.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428a85]\n??:? void tmpj7pnfa92.__unittest_L15_C1() [0x427da4]\n??:? void tmpj7pnfa92.__modtest() [0x428808]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c853]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b6e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430879]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430805]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6bd]\n??:? runModuleUnitTests [0x42c629]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ed4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    return a == pow(cast(long)pow(a, 1.0/3.0), 3);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpj7pnfa92.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428a85]\n??:? void tmpj7pnfa92.__unittest_L15_C1() [0x427da4]\n??:? void tmpj7pnfa92.__modtest() [0x428808]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c853]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b6e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430879]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430805]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6bd]\n??:? runModuleUnitTests [0x42c629]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ed4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    return cast(bool)(a == pow(cast(long)(pow(a, 1.0/3.0)), 3));\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpxu84_nsz.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428a85]\n??:? void tmpxu84_nsz.__unittest_L15_C1() [0x427da4]\n??:? void tmpxu84_nsz.__modtest() [0x428808]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c853]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b6e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430879]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430805]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6bd]\n??:? runModuleUnitTests [0x42c629]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ed4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    return a == pow(cast(long)pow(a, 1.0/3.0), 3);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpj7pnfa92.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428a85]\n??:? void tmpj7pnfa92.__unittest_L15_C1() [0x427da4]\n??:? void tmpj7pnfa92.__modtest() [0x428808]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c853]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b6e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430879]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430805]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6bd]\n??:? runModuleUnitTests [0x42c629]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ed4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    return a == pow(cast(long)pow(a, 1.0/3.0), 3);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpj7pnfa92.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428a85]\n??:? void tmpj7pnfa92.__unittest_L15_C1() [0x427da4]\n??:? void tmpj7pnfa92.__modtest() [0x428808]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c853]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b6e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430879]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430805]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6bd]\n??:? runModuleUnitTests [0x42c629]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ed4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    return a == pow(cast(long)pow(a, 1.0/3.0), 3);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpj7pnfa92.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428a85]\n??:? void tmpj7pnfa92.__unittest_L15_C1() [0x427da4]\n??:? void tmpj7pnfa92.__modtest() [0x428808]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c853]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b6e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430879]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430805]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6bd]\n??:? runModuleUnitTests [0x42c629]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ed4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    return a == pow(cast(long)pow(a, 1.0 / 3.0), 3);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpejn23xzw.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428a85]\n??:? void tmpejn23xzw.__unittest_L15_C1() [0x427da4]\n??:? void tmpejn23xzw.__modtest() [0x428808]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c853]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b6e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430879]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430805]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6bd]\n??:? runModuleUnitTests [0x42c629]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ed4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    return a == pow(cast(long)pow(a, 1.0/3.0), 3);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpj7pnfa92.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428a85]\n??:? void tmpj7pnfa92.__unittest_L15_C1() [0x427da4]\n??:? void tmpj7pnfa92.__modtest() [0x428808]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c853]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b6e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430879]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430805]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6bd]\n??:? runModuleUnitTests [0x42c629]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ed4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    return a == pow(cast(long)pow(a, 1.0/3.0), 3);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpj7pnfa92.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428a85]\n??:? void tmpj7pnfa92.__unittest_L15_C1() [0x427da4]\n??:? void tmpj7pnfa92.__modtest() [0x428808]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c853]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b6e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430879]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430805]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6bd]\n??:? runModuleUnitTests [0x42c629]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ed4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    return a == pow(cast(long)pow(a, 1.0/3.0), 3);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpj7pnfa92.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428a85]\n??:? void tmpj7pnfa92.__unittest_L15_C1() [0x427da4]\n??:? void tmpj7pnfa92.__modtest() [0x428808]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c853]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b6e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430879]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430805]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6bd]\n??:? runModuleUnitTests [0x42c629]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ed4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    long b = (long)pow(a, 1.0/3.0);\n    return a == b*b*b;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpp2w3u3k7.d(13): Error: C style cast illegal, use `cast(long)pow(a, 1.00000 / 3.00000)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp2w3u3k7.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    return (cast(long)pow(a, 1.0/3.0))*(cast(long)pow(a, 1.0/3.0))*(cast(long)pow(a, 1.0/3.0)) == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpt_cxznj1.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428a1d]\n??:? void tmpt_cxznj1.__unittest_L15_C1() [0x427dd0]\n??:? void tmpt_cxznj1.__modtest() [0x42879c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c7eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b67e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430811]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430cc0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43079d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b655]\n??:? runModuleUnitTests [0x42c5c1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428e6c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    long b = (long)pow(a, 1.0/3.0);\n    return b*b*b == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpyyjczgus.d(13): Error: C style cast illegal, use `cast(long)pow(a, 1.00000 / 3.00000)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyyjczgus.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    return a == pow(cast(long)pow(a, 1.0/3.0), 3);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpj7pnfa92.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428a85]\n??:? void tmpj7pnfa92.__unittest_L15_C1() [0x427da4]\n??:? void tmpj7pnfa92.__modtest() [0x428808]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c853]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b6e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430879]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430805]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6bd]\n??:? runModuleUnitTests [0x42c629]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ed4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    long b = (long)pow(a, 1.0/3.0);\n    return b*b*b == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpyyjczgus.d(13): Error: C style cast illegal, use `cast(long)pow(a, 1.00000 / 3.00000)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyyjczgus.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    return a == pow(cast(long)pow(a, 1.0 / 3.0), 3);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpejn23xzw.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428a85]\n??:? void tmpejn23xzw.__unittest_L15_C1() [0x427da4]\n??:? void tmpejn23xzw.__modtest() [0x428808]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c853]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b6e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430879]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430805]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6bd]\n??:? runModuleUnitTests [0x42c629]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ed4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    long i = 1;\n    while (i * i * i < a)\n        i++;\n    return i * i * i == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpfk44_lfr.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x427dc5]\n??:? void tmpfk44_lfr.__unittest_L18_C1() [0x427a98]\n??:? void tmpfk44_lfr.__modtest() [0x427b44]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baeb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a97e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb11]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa9d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a955]\n??:? runModuleUnitTests [0x42b8c1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428214]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    // your code here\n    return false;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpdx5lmsws.d(20): unittest failure\n----------------\n??:? _d_unittestp [0x427d85]\n??:? void tmpdx5lmsws.__unittest_L16_C1() [0x427a1c]\n??:? void tmpdx5lmsws.__modtest() [0x427b08]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a93e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fad1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff80]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa5d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a915]\n??:? runModuleUnitTests [0x42b881]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    return a == pow(cast(long)pow(a, 1.0/3.0), 3);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpj7pnfa92.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428a85]\n??:? void tmpj7pnfa92.__unittest_L15_C1() [0x427da4]\n??:? void tmpj7pnfa92.__modtest() [0x428808]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c853]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b6e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430879]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430805]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6bd]\n??:? runModuleUnitTests [0x42c629]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ed4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    return a == pow(cast(long)pow(a, 1.0 / 3.0), 3);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpejn23xzw.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428a85]\n??:? void tmpejn23xzw.__unittest_L15_C1() [0x427da4]\n??:? void tmpejn23xzw.__modtest() [0x428808]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c853]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b6e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430879]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430805]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6bd]\n??:? runModuleUnitTests [0x42c629]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ed4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    auto b = cast(long)pow(a, 1.0/3.0);\n    return b*b*b == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpbfsb2nbr.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x4289ad]\n??:? void tmpbfsb2nbr.__unittest_L16_C1() [0x427d64]\n??:? void tmpbfsb2nbr.__modtest() [0x428730]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c77b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b60e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c50]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43072d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5e5]\n??:? runModuleUnitTests [0x42c551]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428dfc]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    return a == pow(cast(long)pow(a, 1.0/3.0), 3);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpj7pnfa92.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428a85]\n??:? void tmpj7pnfa92.__unittest_L15_C1() [0x427da4]\n??:? void tmpj7pnfa92.__modtest() [0x428808]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c853]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b6e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430879]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430805]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6bd]\n??:? runModuleUnitTests [0x42c629]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ed4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    return a == pow(cast(long)pow(a, 1.0/3.0), 3);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpj7pnfa92.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428a85]\n??:? void tmpj7pnfa92.__unittest_L15_C1() [0x427da4]\n??:? void tmpj7pnfa92.__modtest() [0x428808]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c853]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b6e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430879]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430805]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6bd]\n??:? runModuleUnitTests [0x42c629]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ed4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    return a == pow(cast(long)pow(a, 1.0/3.0), 3);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpj7pnfa92.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428a85]\n??:? void tmpj7pnfa92.__unittest_L15_C1() [0x427da4]\n??:? void tmpj7pnfa92.__modtest() [0x428808]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c853]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b6e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430879]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430805]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6bd]\n??:? runModuleUnitTests [0x42c629]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ed4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    return a == pow(cast(long)pow(a, 1.0/3.0), 3);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpj7pnfa92.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428a85]\n??:? void tmpj7pnfa92.__unittest_L15_C1() [0x427da4]\n??:? void tmpj7pnfa92.__modtest() [0x428808]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c853]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b6e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430879]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430805]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6bd]\n??:? runModuleUnitTests [0x42c629]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ed4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    return a == pow(cast(long)pow(a, 1.0/3.0), 3);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpj7pnfa92.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428a85]\n??:? void tmpj7pnfa92.__unittest_L15_C1() [0x427da4]\n??:? void tmpj7pnfa92.__modtest() [0x428808]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c853]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b6e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430879]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430805]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6bd]\n??:? runModuleUnitTests [0x42c629]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ed4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    long x = (long)pow(a, 1.0/3.0);\n    return x*x*x == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmppba0rnbv.d(13): Error: C style cast illegal, use `cast(long)pow(a, 1.00000 / 3.00000)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppba0rnbv.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    long b = cast(long)pow(a, 1.0/3.0);\n    return b*b*b == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpomecp5db.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x4289ad]\n??:? void tmpomecp5db.__unittest_L16_C1() [0x427d64]\n??:? void tmpomecp5db.__modtest() [0x428730]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c77b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b60e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c50]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43072d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5e5]\n??:? runModuleUnitTests [0x42c551]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428dfc]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    long b = (long)pow(a, 1.0/3.0);\n    return b*b*b == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpyyjczgus.d(13): Error: C style cast illegal, use `cast(long)pow(a, 1.00000 / 3.00000)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyyjczgus.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    return a == pow(cast(long)pow(a, 1.0 / 3.0), 3);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpejn23xzw.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428a85]\n??:? void tmpejn23xzw.__unittest_L15_C1() [0x427da4]\n??:? void tmpejn23xzw.__modtest() [0x428808]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c853]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b6e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430879]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430805]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6bd]\n??:? runModuleUnitTests [0x42c629]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ed4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    return a == pow(cast(long)pow(a, 1.0/3.0), 3);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpj7pnfa92.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428a85]\n??:? void tmpj7pnfa92.__unittest_L15_C1() [0x427da4]\n??:? void tmpj7pnfa92.__modtest() [0x428808]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c853]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b6e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430879]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430805]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6bd]\n??:? runModuleUnitTests [0x42c629]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ed4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    return a == pow(cast(long)pow(a, 1.0/3.0), 3);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpj7pnfa92.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428a85]\n??:? void tmpj7pnfa92.__unittest_L15_C1() [0x427da4]\n??:? void tmpj7pnfa92.__modtest() [0x428808]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c853]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b6e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430879]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430805]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6bd]\n??:? runModuleUnitTests [0x42c629]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ed4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    long b = (long)pow(a, 1.0/3.0);\n    return a == b*b*b;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpp2w3u3k7.d(13): Error: C style cast illegal, use `cast(long)pow(a, 1.00000 / 3.00000)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp2w3u3k7.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    return a == pow(cast(long)pow(a, 1.0/3.0), 3);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpj7pnfa92.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428a85]\n??:? void tmpj7pnfa92.__unittest_L15_C1() [0x427da4]\n??:? void tmpj7pnfa92.__modtest() [0x428808]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c853]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b6e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430879]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430805]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6bd]\n??:? runModuleUnitTests [0x42c629]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ed4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    return a == pow(cast(long)pow(a, 1.0 / 3.0), 3);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpejn23xzw.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428a85]\n??:? void tmpejn23xzw.__unittest_L15_C1() [0x427da4]\n??:? void tmpejn23xzw.__modtest() [0x428808]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c853]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b6e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430879]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430805]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6bd]\n??:? runModuleUnitTests [0x42c629]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ed4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    long i = 1;\n    while (i * i * i < a)\n        i++;\n    return i * i * i == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpfk44_lfr.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x427dc5]\n??:? void tmpfk44_lfr.__unittest_L18_C1() [0x427a98]\n??:? void tmpfk44_lfr.__modtest() [0x427b44]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baeb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a97e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb11]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa9d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a955]\n??:? runModuleUnitTests [0x42b8c1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428214]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    long x = (long)pow(a, 1.0/3.0);\n    return x*x*x == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmppba0rnbv.d(13): Error: C style cast illegal, use `cast(long)pow(a, 1.00000 / 3.00000)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppba0rnbv.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    return a == pow(cast(long)pow(a, 1.0/3.0), 3);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpj7pnfa92.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428a85]\n??:? void tmpj7pnfa92.__unittest_L15_C1() [0x427da4]\n??:? void tmpj7pnfa92.__modtest() [0x428808]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c853]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b6e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430879]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430805]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6bd]\n??:? runModuleUnitTests [0x42c629]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ed4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    long b = (long)pow(a, 1.0/3.0);\n    return a == b*b*b;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpp2w3u3k7.d(13): Error: C style cast illegal, use `cast(long)pow(a, 1.00000 / 3.00000)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp2w3u3k7.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    return a == pow(cast(long)pow(a, 1.0/3.0), 3);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpj7pnfa92.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428a85]\n??:? void tmpj7pnfa92.__unittest_L15_C1() [0x427da4]\n??:? void tmpj7pnfa92.__modtest() [0x428808]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c853]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b6e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430879]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430805]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6bd]\n??:? runModuleUnitTests [0x42c629]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ed4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    return a == cast(long)pow(cast(double)a, 1.0/3.0);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp65d34sp_.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x42892d]\n??:? void tmp65d34sp_.__unittest_L15_C1() [0x427cf4]\n??:? void tmp65d34sp_.__modtest() [0x4286b0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6fb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b58e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430721]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430bd0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4306ad]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b565]\n??:? runModuleUnitTests [0x42c4d1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428d7c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    long b = cast(long)pow(a, 1.0 / 3.0);\n    return b * b * b == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp9fg_rv40.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x4289ad]\n??:? void tmp9fg_rv40.__unittest_L16_C1() [0x427d64]\n??:? void tmp9fg_rv40.__modtest() [0x428730]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c77b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b60e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c50]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43072d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5e5]\n??:? runModuleUnitTests [0x42c551]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428dfc]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    return is(typeof(pow(a, 1.0 / 3.0)) == int);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpw039nnst.d(19): unittest failure\n----------------\n??:? _d_unittestp [0x427d85]\n??:? void tmpw039nnst.__unittest_L15_C1() [0x427a1c]\n??:? void tmpw039nnst.__modtest() [0x427b08]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a93e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fad1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff80]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa5d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a915]\n??:? runModuleUnitTests [0x42b881]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    return a == pow(cast(long)pow(a, 1.0 / 3.0), 3);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpejn23xzw.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428a85]\n??:? void tmpejn23xzw.__unittest_L15_C1() [0x427da4]\n??:? void tmpejn23xzw.__modtest() [0x428808]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c853]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b6e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430879]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430805]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6bd]\n??:? runModuleUnitTests [0x42c629]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ed4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    long b = (long)pow(a, 1.0/3.0);\n    return b*b*b == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpyyjczgus.d(13): Error: C style cast illegal, use `cast(long)pow(a, 1.00000 / 3.00000)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyyjczgus.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    if (a == 0) return true;\n    if (a < 0) return false;\n    long b = (long)pow(a, 1.0/3.0);\n    return b*b*b == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpjovmmwup.d(15): Error: C style cast illegal, use `cast(long)pow(a, 1.00000 / 3.00000)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjovmmwup.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    return a == pow(cast(long)pow(a, 1.0/3.0), 3);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpj7pnfa92.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428a85]\n??:? void tmpj7pnfa92.__unittest_L15_C1() [0x427da4]\n??:? void tmpj7pnfa92.__modtest() [0x428808]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c853]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b6e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430879]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430805]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6bd]\n??:? runModuleUnitTests [0x42c629]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ed4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    return a == pow(cast(long)pow(a, 1.0/3.0), 3);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpj7pnfa92.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428a85]\n??:? void tmpj7pnfa92.__unittest_L15_C1() [0x427da4]\n??:? void tmpj7pnfa92.__modtest() [0x428808]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c853]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b6e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430879]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430805]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6bd]\n??:? runModuleUnitTests [0x42c629]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ed4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    long b = (long)pow(a, 1.0/3.0);\n    return b*b*b == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpyyjczgus.d(13): Error: C style cast illegal, use `cast(long)pow(a, 1.00000 / 3.00000)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyyjczgus.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    return a == cast(long)pow(cast(double)a, 1.0/3.0);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp65d34sp_.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x42892d]\n??:? void tmp65d34sp_.__unittest_L15_C1() [0x427cf4]\n??:? void tmp65d34sp_.__modtest() [0x4286b0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6fb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b58e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430721]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430bd0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4306ad]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b565]\n??:? runModuleUnitTests [0x42c4d1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428d7c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    return a == pow(cast(long)round(pow(a, 1.0/3.0)), 3);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmphbxsasrx.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428b35]\n??:? void tmphbxsasrx.__unittest_L15_C1() [0x427e54]\n??:? void tmphbxsasrx.__modtest() [0x4288b8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c91b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b7ae]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430941]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430df0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4308cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b785]\n??:? runModuleUnitTests [0x42c6f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428f84]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    long i = 0;\n    while (i * i * i < a) \n    {\n        i++;\n    }\n    return i * i * i == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpv1aw48ul.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x427dc5]\n??:? void tmpv1aw48ul.__unittest_L20_C1() [0x427a98]\n??:? void tmpv1aw48ul.__modtest() [0x427b44]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baeb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a97e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb11]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa9d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a955]\n??:? runModuleUnitTests [0x42b8c1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428214]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    long b = (long)pow(a, 1.0/3.0);\n    return b*b*b == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpyyjczgus.d(13): Error: C style cast illegal, use `cast(long)pow(a, 1.00000 / 3.00000)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyyjczgus.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    // your code here\n    return false;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpdx5lmsws.d(20): unittest failure\n----------------\n??:? _d_unittestp [0x427d85]\n??:? void tmpdx5lmsws.__unittest_L16_C1() [0x427a1c]\n??:? void tmpdx5lmsws.__modtest() [0x427b08]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a93e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fad1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff80]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa5d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a915]\n??:? runModuleUnitTests [0x42b881]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    return a == pow(cast(long)pow(a, 1.0 / 3.0), 3);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpejn23xzw.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428a85]\n??:? void tmpejn23xzw.__unittest_L15_C1() [0x427da4]\n??:? void tmpejn23xzw.__modtest() [0x428808]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c853]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b6e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430879]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430805]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6bd]\n??:? runModuleUnitTests [0x42c629]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ed4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    long b = (long)pow(a, 1.0/3.0);\n    return b*b*b == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpyyjczgus.d(13): Error: C style cast illegal, use `cast(long)pow(a, 1.00000 / 3.00000)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyyjczgus.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    return a == pow(cast(long)pow(a, 1.0/3.0), 3);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpj7pnfa92.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428a85]\n??:? void tmpj7pnfa92.__unittest_L15_C1() [0x427da4]\n??:? void tmpj7pnfa92.__modtest() [0x428808]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c853]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b6e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430879]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430805]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6bd]\n??:? runModuleUnitTests [0x42c629]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ed4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    long b = (long)pow(a, 1.0/3.0);\n    return b*b*b == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpyyjczgus.d(13): Error: C style cast illegal, use `cast(long)pow(a, 1.00000 / 3.00000)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyyjczgus.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    long b = round(pow(a, 1.0 / 3.0));\n    return a == b * b * b;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmppslp_f9r.d(13): Error: cannot implicitly convert expression `round(pow(a, 0.333333))` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppslp_f9r.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    // your code here\n    return false;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpdx5lmsws.d(20): unittest failure\n----------------\n??:? _d_unittestp [0x427d85]\n??:? void tmpdx5lmsws.__unittest_L16_C1() [0x427a1c]\n??:? void tmpdx5lmsws.__modtest() [0x427b08]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a93e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fad1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff80]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa5d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a915]\n??:? runModuleUnitTests [0x42b881]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    return a == pow(cast(long)pow(a, 1.0/3.0), 3);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpj7pnfa92.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428a85]\n??:? void tmpj7pnfa92.__unittest_L15_C1() [0x427da4]\n??:? void tmpj7pnfa92.__modtest() [0x428808]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c853]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b6e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430879]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430805]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6bd]\n??:? runModuleUnitTests [0x42c629]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ed4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    return a == pow(cast(long)pow(a, 1.0/3.0), 3);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpj7pnfa92.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428a85]\n??:? void tmpj7pnfa92.__unittest_L15_C1() [0x427da4]\n??:? void tmpj7pnfa92.__modtest() [0x428808]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c853]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b6e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430879]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430805]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6bd]\n??:? runModuleUnitTests [0x42c629]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ed4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    long b = (long)pow(a, 1.0/3.0);\n    return a == b*b*b;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpp2w3u3k7.d(13): Error: C style cast illegal, use `cast(long)pow(a, 1.00000 / 3.00000)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp2w3u3k7.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    return a == pow(cast(long)pow(a, 1.0 / 3.0), 3);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpejn23xzw.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428a85]\n??:? void tmpejn23xzw.__unittest_L15_C1() [0x427da4]\n??:? void tmpejn23xzw.__modtest() [0x428808]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c853]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b6e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430879]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430805]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6bd]\n??:? runModuleUnitTests [0x42c629]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ed4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    return is(typeof(pow(a, 1.0/3)) == int);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp0nbjmrvd.d(19): unittest failure\n----------------\n??:? _d_unittestp [0x427d85]\n??:? void tmp0nbjmrvd.__unittest_L15_C1() [0x427a1c]\n??:? void tmp0nbjmrvd.__modtest() [0x427b08]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a93e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fad1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff80]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa5d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a915]\n??:? runModuleUnitTests [0x42b881]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    // your code here\n    return false;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpdx5lmsws.d(20): unittest failure\n----------------\n??:? _d_unittestp [0x427d85]\n??:? void tmpdx5lmsws.__unittest_L16_C1() [0x427a1c]\n??:? void tmpdx5lmsws.__modtest() [0x427b08]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a93e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fad1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff80]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa5d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a915]\n??:? runModuleUnitTests [0x42b881]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    long b = (long)pow(a, 1.0/3.0);\n    return b*b*b == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpyyjczgus.d(13): Error: C style cast illegal, use `cast(long)pow(a, 1.00000 / 3.00000)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyyjczgus.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    long b = (long)pow(a, 1.0/3.0);\n    return b*b*b == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpyyjczgus.d(13): Error: C style cast illegal, use `cast(long)pow(a, 1.00000 / 3.00000)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyyjczgus.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    long b = (long)pow(a, 1.0/3.0);\n    return pow(b, 3) == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp6usedyn2.d(13): Error: C style cast illegal, use `cast(long)pow(a, 1.00000 / 3.00000)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6usedyn2.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    return a == pow(cast(long)pow(a, 1.0/3.0), 3);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpj7pnfa92.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428a85]\n??:? void tmpj7pnfa92.__unittest_L15_C1() [0x427da4]\n??:? void tmpj7pnfa92.__modtest() [0x428808]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c853]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b6e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430879]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430805]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6bd]\n??:? runModuleUnitTests [0x42c629]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ed4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    return a == pow(cast(long)pow(a, 1.0 / 3.0), 3);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpejn23xzw.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428a85]\n??:? void tmpejn23xzw.__unittest_L15_C1() [0x427da4]\n??:? void tmpejn23xzw.__modtest() [0x428808]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c853]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b6e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430879]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430805]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6bd]\n??:? runModuleUnitTests [0x42c629]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ed4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    long x = (long)pow(a, 1.0/3.0);\n    return x*x*x == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmppba0rnbv.d(13): Error: C style cast illegal, use `cast(long)pow(a, 1.00000 / 3.00000)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppba0rnbv.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    long i = 0;\n    while (i * i * i < a) \n    {\n        i++;\n    }\n    return i * i * i == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpv1aw48ul.d(26): unittest failure\n----------------\n??:? _d_unittestp [0x427dc5]\n??:? void tmpv1aw48ul.__unittest_L20_C1() [0x427a98]\n??:? void tmpv1aw48ul.__modtest() [0x427b44]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baeb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a97e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb11]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa9d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a955]\n??:? runModuleUnitTests [0x42b8c1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428214]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    return (int)pow(a, 1.0/3.0) == pow(a, 1.0/3.0);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp9sxw_4np.d(13): Error: C style cast illegal, use `cast(int)pow(a, 1.00000 / 3.00000)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9sxw_4np.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    long x = cast(long)pow(a, 1.0/3.0);\n    return x*x*x == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpmzcdfvva.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x4289ad]\n??:? void tmpmzcdfvva.__unittest_L16_C1() [0x427d64]\n??:? void tmpmzcdfvva.__modtest() [0x428730]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c77b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b60e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c50]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43072d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5e5]\n??:? runModuleUnitTests [0x42c551]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428dfc]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    return a == pow(cast(long)pow(a, 1.0/3.0), 3);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpj7pnfa92.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428a85]\n??:? void tmpj7pnfa92.__unittest_L15_C1() [0x427da4]\n??:? void tmpj7pnfa92.__modtest() [0x428808]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c853]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b6e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430879]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430805]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6bd]\n??:? runModuleUnitTests [0x42c629]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ed4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    return a == pow(cast(long)pow(a, 1.0/3.0), 3);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpj7pnfa92.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428a85]\n??:? void tmpj7pnfa92.__unittest_L15_C1() [0x427da4]\n??:? void tmpj7pnfa92.__modtest() [0x428808]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c853]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b6e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430879]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430805]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6bd]\n??:? runModuleUnitTests [0x42c629]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ed4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    return is(typeof(a^(1/3)) == long);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpeojdnib0.d(20): unittest failure\n----------------\n??:? _d_unittestp [0x427d85]\n??:? void tmpeojdnib0.__unittest_L15_C1() [0x427a3b]\n??:? void tmpeojdnib0.__modtest() [0x427b08]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a93e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fad1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff80]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa5d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a915]\n??:? runModuleUnitTests [0x42b881]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    long b = (long)pow(a, 1.0/3.0);\n    return b*b*b == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpyyjczgus.d(13): Error: C style cast illegal, use `cast(long)pow(a, 1.00000 / 3.00000)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyyjczgus.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    return a == pow(cast(long)pow(a, 1.0 / 3.0), 3);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpejn23xzw.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428a85]\n??:? void tmpejn23xzw.__unittest_L15_C1() [0x427da4]\n??:? void tmpejn23xzw.__modtest() [0x428808]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c853]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b6e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430879]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430805]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6bd]\n??:? runModuleUnitTests [0x42c629]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ed4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    return a == pow(cast(long)pow(a, 1.0/3.0), 3);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpj7pnfa92.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428a85]\n??:? void tmpj7pnfa92.__unittest_L15_C1() [0x427da4]\n??:? void tmpj7pnfa92.__modtest() [0x428808]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c853]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b6e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430879]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430805]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6bd]\n??:? runModuleUnitTests [0x42c629]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ed4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    return a == pow(cast(long)pow(a, 1.0/3.0), 3);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpj7pnfa92.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428a85]\n??:? void tmpj7pnfa92.__unittest_L15_C1() [0x427da4]\n??:? void tmpj7pnfa92.__modtest() [0x428808]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c853]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b6e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430879]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430805]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6bd]\n??:? runModuleUnitTests [0x42c629]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ed4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    return is(typeof(a^(1/3)) == int);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpm7rwfssj.d(19): unittest failure\n----------------\n??:? _d_unittestp [0x427d85]\n??:? void tmpm7rwfssj.__unittest_L15_C1() [0x427a1c]\n??:? void tmpm7rwfssj.__modtest() [0x427b08]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a93e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fad1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff80]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa5d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a915]\n??:? runModuleUnitTests [0x42b881]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    long n = (long)pow(a, 1.0/3.0);\n    return n*n*n == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpjzyymyol.d(13): Error: C style cast illegal, use `cast(long)pow(a, 1.00000 / 3.00000)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjzyymyol.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    long b = (long)pow(a, 1.0/3.0);\n    return b*b*b == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpyyjczgus.d(13): Error: C style cast illegal, use `cast(long)pow(a, 1.00000 / 3.00000)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyyjczgus.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    auto b = cast(long) pow(a, 1.0/3.0);\n    return b*b*b == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmphgu_52b5.d(22): unittest failure\n----------------\n??:? _d_unittestp [0x4289ad]\n??:? void tmphgu_52b5.__unittest_L16_C1() [0x427d64]\n??:? void tmphgu_52b5.__modtest() [0x428730]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c77b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b60e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c50]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43072d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5e5]\n??:? runModuleUnitTests [0x42c551]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428dfc]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    return is(typeof(a^(1.0/3)) == int);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp_7df2_ql.d(19): unittest failure\n----------------\n??:? _d_unittestp [0x427d85]\n??:? void tmp_7df2_ql.__unittest_L15_C1() [0x427a1c]\n??:? void tmp_7df2_ql.__modtest() [0x427b08]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a93e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fad1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff80]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa5d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a915]\n??:? runModuleUnitTests [0x42b881]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    long b = (long)pow(a, 1.0/3.0);\n    return b*b*b == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpyyjczgus.d(13): Error: C style cast illegal, use `cast(long)pow(a, 1.00000 / 3.00000)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyyjczgus.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    long b = (long)pow(a, 1.0/3.0);\n    return a == b*b*b;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpp2w3u3k7.d(13): Error: C style cast illegal, use `cast(long)pow(a, 1.00000 / 3.00000)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp2w3u3k7.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    return (cast(long)pow(a, 1.0/3.0)) == pow(a, 1.0/3.0);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp20hz0h2z.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x4289cd]\n??:? void tmp20hz0h2z.__unittest_L15_C1() [0x427d80]\n??:? void tmp20hz0h2z.__modtest() [0x42874c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c79b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b62e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307c1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c70]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43074d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b605]\n??:? runModuleUnitTests [0x42c571]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428e1c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    return a == pow(cast(long)pow(a, 1.0/3.0), 3);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpj7pnfa92.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428a85]\n??:? void tmpj7pnfa92.__unittest_L15_C1() [0x427da4]\n??:? void tmpj7pnfa92.__modtest() [0x428808]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c853]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b6e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430879]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430805]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6bd]\n??:? runModuleUnitTests [0x42c629]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ed4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    return a == pow(cast(long)pow(a, 1.0/3.0), 3);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpj7pnfa92.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428a85]\n??:? void tmpj7pnfa92.__unittest_L15_C1() [0x427da4]\n??:? void tmpj7pnfa92.__modtest() [0x428808]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c853]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b6e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430879]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430805]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6bd]\n??:? runModuleUnitTests [0x42c629]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ed4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    return a == pow(cast(long)pow(a, 1.0/3.0), 3);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpj7pnfa92.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428a85]\n??:? void tmpj7pnfa92.__unittest_L15_C1() [0x427da4]\n??:? void tmpj7pnfa92.__modtest() [0x428808]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c853]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b6e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430879]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430805]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6bd]\n??:? runModuleUnitTests [0x42c629]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ed4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    long b = (long)pow(a, 1.0/3.0);\n    return a == b*b*b;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpp2w3u3k7.d(13): Error: C style cast illegal, use `cast(long)pow(a, 1.00000 / 3.00000)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp2w3u3k7.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    long b = (long)pow(a, 1.0/3.0);\n    return b*b*b == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpyyjczgus.d(13): Error: C style cast illegal, use `cast(long)pow(a, 1.00000 / 3.00000)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyyjczgus.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    long b = (long)pow(a, 1.0/3.0);\n    return (b*b*b == a);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpiu24hh7w.d(13): Error: C style cast illegal, use `cast(long)pow(a, 1.00000 / 3.00000)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiu24hh7w.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    return (cast(long)pow(a, 1.0/3.0)) * (cast(long)pow(a, 1.0/3.0)) * (cast(long)pow(a, 1.0/3.0)) == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp55p3idq0.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428a1d]\n??:? void tmp55p3idq0.__unittest_L15_C1() [0x427dd0]\n??:? void tmp55p3idq0.__modtest() [0x42879c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c7eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b67e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430811]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430cc0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43079d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b655]\n??:? runModuleUnitTests [0x42c5c1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428e6c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    long b = (long)pow(a, 1.0/3.0);\n    return b*b*b == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpyyjczgus.d(13): Error: C style cast illegal, use `cast(long)pow(a, 1.00000 / 3.00000)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyyjczgus.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    return a == pow(cast(long)pow(a, 1.0/3.0), 3);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpj7pnfa92.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428a85]\n??:? void tmpj7pnfa92.__unittest_L15_C1() [0x427da4]\n??:? void tmpj7pnfa92.__modtest() [0x428808]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c853]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b6e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430879]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430805]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6bd]\n??:? runModuleUnitTests [0x42c629]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ed4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    long x = (long)pow(a, 1.0/3.0);\n    return x*x*x == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmppba0rnbv.d(13): Error: C style cast illegal, use `cast(long)pow(a, 1.00000 / 3.00000)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppba0rnbv.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    return a == pow(cast(long)pow(a, 1.0 / 3.0), 3);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpejn23xzw.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428a85]\n??:? void tmpejn23xzw.__unittest_L15_C1() [0x427da4]\n??:? void tmpejn23xzw.__modtest() [0x428808]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c853]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b6e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430879]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430805]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6bd]\n??:? runModuleUnitTests [0x42c629]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ed4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    return a == pow(cast(long)pow(a, 1.0/3.0), 3);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpj7pnfa92.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428a85]\n??:? void tmpj7pnfa92.__unittest_L15_C1() [0x427da4]\n??:? void tmpj7pnfa92.__modtest() [0x428808]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c853]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b6e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430879]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430805]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6bd]\n??:? runModuleUnitTests [0x42c629]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ed4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    return a == cast(long)pow(cast(double)a, 1.0/3.0);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp65d34sp_.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x42892d]\n??:? void tmp65d34sp_.__unittest_L15_C1() [0x427cf4]\n??:? void tmp65d34sp_.__modtest() [0x4286b0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6fb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b58e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430721]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430bd0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4306ad]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b565]\n??:? runModuleUnitTests [0x42c4d1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428d7c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    return a == pow(cast(long)pow(a, 1.0 / 3.0), 3);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpejn23xzw.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428a85]\n??:? void tmpejn23xzw.__unittest_L15_C1() [0x427da4]\n??:? void tmpejn23xzw.__modtest() [0x428808]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c853]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b6e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430879]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430805]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6bd]\n??:? runModuleUnitTests [0x42c629]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ed4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    long b = (long)pow(a, 1.0/3.0);\n    return b*b*b == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpyyjczgus.d(13): Error: C style cast illegal, use `cast(long)pow(a, 1.00000 / 3.00000)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyyjczgus.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    long b = (long)pow(a, 1.0/3.0);\n    return (b*b*b == a);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpiu24hh7w.d(13): Error: C style cast illegal, use `cast(long)pow(a, 1.00000 / 3.00000)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiu24hh7w.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    long b = (long)pow(a, 1.0/3.0);\n    return b*b*b == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpyyjczgus.d(13): Error: C style cast illegal, use `cast(long)pow(a, 1.00000 / 3.00000)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyyjczgus.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    return a == pow(cast(long)pow(a, 1.0/3.0), 3);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpj7pnfa92.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428a85]\n??:? void tmpj7pnfa92.__unittest_L15_C1() [0x427da4]\n??:? void tmpj7pnfa92.__modtest() [0x428808]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c853]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b6e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430879]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430805]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6bd]\n??:? runModuleUnitTests [0x42c629]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ed4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    long b = (long)pow(a, 1.0/3.0);\n    return b*b*b == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpyyjczgus.d(13): Error: C style cast illegal, use `cast(long)pow(a, 1.00000 / 3.00000)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyyjczgus.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    return a == pow(cast(long)pow(a, 1.0/3.0), 3);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpj7pnfa92.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428a85]\n??:? void tmpj7pnfa92.__unittest_L15_C1() [0x427da4]\n??:? void tmpj7pnfa92.__modtest() [0x428808]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c853]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b6e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430879]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430805]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6bd]\n??:? runModuleUnitTests [0x42c629]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ed4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    return a == cast(long)pow(cast(double)a, 1.0/3.0);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp65d34sp_.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x42892d]\n??:? void tmp65d34sp_.__unittest_L15_C1() [0x427cf4]\n??:? void tmp65d34sp_.__modtest() [0x4286b0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6fb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b58e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430721]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430bd0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4306ad]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b565]\n??:? runModuleUnitTests [0x42c4d1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428d7c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    return a == (long)pow(a, 1.0/3);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp6d39wtjd.d(13): Error: C style cast illegal, use `cast(long)pow(a, 1.00000 / 3)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6d39wtjd.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    return a == cast(long)pow(cast(double)a, 1.0/3.0);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp65d34sp_.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x42892d]\n??:? void tmp65d34sp_.__unittest_L15_C1() [0x427cf4]\n??:? void tmp65d34sp_.__modtest() [0x4286b0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6fb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b58e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430721]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430bd0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4306ad]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b565]\n??:? runModuleUnitTests [0x42c4d1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428d7c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    return a == pow(cast(long)pow(a, 1.0/3.0), 3);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpj7pnfa92.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428a85]\n??:? void tmpj7pnfa92.__unittest_L15_C1() [0x427da4]\n??:? void tmpj7pnfa92.__modtest() [0x428808]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c853]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b6e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430879]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430805]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6bd]\n??:? runModuleUnitTests [0x42c629]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ed4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    long i = 1;\n    while (i * i * i < a)\n        i++;\n    return i * i * i == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpfk44_lfr.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x427dc5]\n??:? void tmpfk44_lfr.__unittest_L18_C1() [0x427a98]\n??:? void tmpfk44_lfr.__modtest() [0x427b44]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baeb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a97e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb11]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa9d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a955]\n??:? runModuleUnitTests [0x42b8c1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428214]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    return a == cast(long)pow(cast(double)a, 1.0/3.0);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp65d34sp_.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x42892d]\n??:? void tmp65d34sp_.__unittest_L15_C1() [0x427cf4]\n??:? void tmp65d34sp_.__modtest() [0x4286b0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6fb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b58e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430721]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430bd0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4306ad]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b565]\n??:? runModuleUnitTests [0x42c4d1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428d7c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    long x = (long)pow(a, 1.0/3.0);\n    return x*x*x == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmppba0rnbv.d(13): Error: C style cast illegal, use `cast(long)pow(a, 1.00000 / 3.00000)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppba0rnbv.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    return is(typeof(a^(1/3)) == long);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpeojdnib0.d(20): unittest failure\n----------------\n??:? _d_unittestp [0x427d85]\n??:? void tmpeojdnib0.__unittest_L15_C1() [0x427a3b]\n??:? void tmpeojdnib0.__modtest() [0x427b08]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a93e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fad1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff80]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa5d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a915]\n??:? runModuleUnitTests [0x42b881]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    return a == pow(cast(long)pow(a, 1.0/3.0), 3);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpj7pnfa92.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428a85]\n??:? void tmpj7pnfa92.__unittest_L15_C1() [0x427da4]\n??:? void tmpj7pnfa92.__modtest() [0x428808]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c853]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b6e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430879]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430805]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6bd]\n??:? runModuleUnitTests [0x42c629]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ed4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    return a == pow(cast(long)pow(a, 1.0/3.0), 3);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpj7pnfa92.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428a85]\n??:? void tmpj7pnfa92.__unittest_L15_C1() [0x427da4]\n??:? void tmpj7pnfa92.__modtest() [0x428808]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c853]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b6e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430879]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430805]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6bd]\n??:? runModuleUnitTests [0x42c629]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ed4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    long b = (long)pow(a, 1.0/3.0);\n    return a == b*b*b;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpp2w3u3k7.d(13): Error: C style cast illegal, use `cast(long)pow(a, 1.00000 / 3.00000)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp2w3u3k7.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    return is(typeof(cbrt(a)) == int);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpvqca71bf.d(19): unittest failure\n----------------\n??:? _d_unittestp [0x427d85]\n??:? void tmpvqca71bf.__unittest_L15_C1() [0x427a1c]\n??:? void tmpvqca71bf.__modtest() [0x427b08]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a93e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fad1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff80]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa5d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a915]\n??:? runModuleUnitTests [0x42b881]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    return a == pow(cast(long)pow(a, 1.0/3.0), 3);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpj7pnfa92.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428a85]\n??:? void tmpj7pnfa92.__unittest_L15_C1() [0x427da4]\n??:? void tmpj7pnfa92.__modtest() [0x428808]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c853]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b6e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430879]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430805]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6bd]\n??:? runModuleUnitTests [0x42c629]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ed4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    long b = (long)pow(a, 1.0/3.0);\n    return b*b*b == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpyyjczgus.d(13): Error: C style cast illegal, use `cast(long)pow(a, 1.00000 / 3.00000)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyyjczgus.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    long b = (long)pow(a, 1.0/3.0);\n    return b*b*b == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpyyjczgus.d(13): Error: C style cast illegal, use `cast(long)pow(a, 1.00000 / 3.00000)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyyjczgus.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    return a == pow(cast(long)pow(a, 1.0/3.0), 3);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpj7pnfa92.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428a85]\n??:? void tmpj7pnfa92.__unittest_L15_C1() [0x427da4]\n??:? void tmpj7pnfa92.__modtest() [0x428808]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c853]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b6e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430879]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430805]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6bd]\n??:? runModuleUnitTests [0x42c629]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ed4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    long b = (long)pow(a, 1.0/3.0);\n    return a == b*b*b;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpp2w3u3k7.d(13): Error: C style cast illegal, use `cast(long)pow(a, 1.00000 / 3.00000)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp2w3u3k7.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    long b = (long)pow(a, 1.0/3.0);\n    return b*b*b == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpyyjczgus.d(13): Error: C style cast illegal, use `cast(long)pow(a, 1.00000 / 3.00000)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyyjczgus.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    long b = (long)pow(a, 1.0/3.0);\n    return b*b*b == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpyyjczgus.d(13): Error: C style cast illegal, use `cast(long)pow(a, 1.00000 / 3.00000)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyyjczgus.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    return a == pow(cast(long)pow(a, 1.0 / 3.0), 3);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpejn23xzw.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428a85]\n??:? void tmpejn23xzw.__unittest_L15_C1() [0x427da4]\n??:? void tmpejn23xzw.__modtest() [0x428808]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c853]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b6e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430879]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430805]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6bd]\n??:? runModuleUnitTests [0x42c629]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ed4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    return a == pow(cast(long)pow(a, 1.0/3.0), 3);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpj7pnfa92.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428a85]\n??:? void tmpj7pnfa92.__unittest_L15_C1() [0x427da4]\n??:? void tmpj7pnfa92.__modtest() [0x428808]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c853]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b6e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430879]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430805]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6bd]\n??:? runModuleUnitTests [0x42c629]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ed4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    long b = (long)pow(a, 1.0/3.0);\n    return b*b*b == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpyyjczgus.d(13): Error: C style cast illegal, use `cast(long)pow(a, 1.00000 / 3.00000)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyyjczgus.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    return a == pow(cast(long)pow(a, 1.0/3.0), 3);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpj7pnfa92.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428a85]\n??:? void tmpj7pnfa92.__unittest_L15_C1() [0x427da4]\n??:? void tmpj7pnfa92.__modtest() [0x428808]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c853]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b6e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430879]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430805]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6bd]\n??:? runModuleUnitTests [0x42c629]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ed4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    return a == pow(cast(long)pow(a, 1.0/3.0), 3);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpj7pnfa92.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428a85]\n??:? void tmpj7pnfa92.__unittest_L15_C1() [0x427da4]\n??:? void tmpj7pnfa92.__modtest() [0x428808]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c853]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b6e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430879]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430805]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6bd]\n??:? runModuleUnitTests [0x42c629]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ed4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    long b = (long)pow(a, 1.0/3.0);\n    return b*b*b == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpyyjczgus.d(13): Error: C style cast illegal, use `cast(long)pow(a, 1.00000 / 3.00000)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyyjczgus.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163128
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n                            \n*/\nbool iscube(long a) \n{\n    return a == pow(cast(long)pow(a, 1.0/3.0), 3);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpj7pnfa92.d(21): unittest failure\n----------------\n??:? _d_unittestp [0x428a85]\n??:? void tmpj7pnfa92.__unittest_L15_C1() [0x427da4]\n??:? void tmpj7pnfa92.__modtest() [0x428808]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c853]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b6e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430879]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430805]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6bd]\n??:? runModuleUnitTests [0x42c629]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ed4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163128
    }
  ]
}