language: d
name: HumanEval_149_sorted_list_sum
results:
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    string[] result;\n    foreach(string s; lst)\n    {\n        if(s.length\
    \ % 2 == 0)\n        {\n            result ~= s;\n        }\n    }\n    return\
    \ result.sort;\n}\nunittest\n{\n    alias candidate = sorted_list_sum;\n\n   \
    \ assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]);\n    assert(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\",\
    \ \"b\", \"c\", \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbswi6p7_.d(27): Error: no property `sort` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbswi6p7_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    string[] result;\n    foreach(string s; lst)\n    {\n        if(s.length\
    \ % 2 == 0)\n        {\n            result ~= s;\n        }\n    }\n    sort(result);\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = sorted_list_sum;\n\n\
    \    assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]);\n    assert(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\",\
    \ \"b\", \"c\", \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5kfzjguu.d(27): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5kfzjguu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    string[] result;\n    foreach(string s; lst)\n    {\n        if(s.length\
    \ % 2 == 0)\n        {\n            result ~= s;\n        }\n    }\n    sort(result);\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = sorted_list_sum;\n\n\
    \    assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]);\n    assert(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\",\
    \ \"b\", \"c\", \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5kfzjguu.d(27): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5kfzjguu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    string[] result = [];\n    foreach(string s; lst)\n    {\n   \
    \     if(s.length % 2 == 0)\n        {\n            result ~= s;\n        }\n\
    \    }\n    sort(result);\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = sorted_list_sum;\n\n    assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"]);\n    assert(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\"\
    , \"asdf\", \"school\"]);\n    assert(candidate([\"d\", \"b\", \"c\", \"a\"])\
    \ == []);\n    assert(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\"\
    , \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\"\
    , \"au\"]);\n    assert(candidate([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"])\
    \ == []);\n    assert(candidate([\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\"\
    , \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpc8hi2w8k.d(27): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc8hi2w8k.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    string[] result;\n    foreach(string s; lst)\n    {\n        if(s.length\
    \ % 2 == 0)\n        {\n            result ~= s;\n        }\n    }\n    sort(result);\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = sorted_list_sum;\n\n\
    \    assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]);\n    assert(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\",\
    \ \"b\", \"c\", \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5kfzjguu.d(27): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5kfzjguu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    string[] result = [];\n    foreach(string s; lst) \n    {\n  \
    \      if (s.length % 2 == 0) \n        {\n            result ~= s;\n        }\n\
    \    }\n    return result.sort;\n}\nunittest\n{\n    alias candidate = sorted_list_sum;\n\
    \n    assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]);\n    assert(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\",\
    \ \"b\", \"c\", \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpk2u3ngvt.d(27): Error: no property `sort` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk2u3ngvt.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    auto lst_len = lst.length;\n    string[] lst_new;\n    foreach(i;\
    \ 0 .. lst_len)\n    {\n        if(lst[i].length % 2 == 0)\n        {\n      \
    \      lst_new ~= lst[i];\n        }\n    }\n    lst_new.sort;\n    return lst_new;\n\
    }\nunittest\n{\n    alias candidate = sorted_list_sum;\n\n    assert(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]);\n    assert(candidate([\"school\", \"AI\"\
    , \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\",\
    \ \"b\", \"c\", \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu7q5q098.d(28): Error: no property `sort` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu7q5q098.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    string[] result;\n    foreach(string s; lst)\n    {\n        if(s.length\
    \ % 2 == 0)\n        {\n            result ~= s;\n        }\n    }\n    return\
    \ result.sort;\n}\nunittest\n{\n    alias candidate = sorted_list_sum;\n\n   \
    \ assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]);\n    assert(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\",\
    \ \"b\", \"c\", \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbswi6p7_.d(27): Error: no property `sort` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbswi6p7_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    string[] result;\n    foreach(string s; lst)\n    {\n        if(s.length\
    \ % 2 == 0)\n        {\n            result ~= s;\n        }\n    }\n    return\
    \ result.sort;\n}\nunittest\n{\n    alias candidate = sorted_list_sum;\n\n   \
    \ assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]);\n    assert(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\",\
    \ \"b\", \"c\", \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbswi6p7_.d(27): Error: no property `sort` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbswi6p7_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    lst = lst.filter!(a => a.length % 2 == 0).sort!((a, b) => a.length\
    \ - b.length);\n    return lst;\n}\nunittest\n{\n    alias candidate = sorted_list_sum;\n\
    \n    assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]);\n    assert(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\",\
    \ \"b\", \"c\", \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpg2_f83hv.d(19): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg2_f83hv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    string[] result = new string[0];\n    foreach(string s; lst)\n\
    \    {\n        if(s.length % 2 == 0)\n        {\n            result ~= s;\n \
    \       }\n    }\n    sort(result);\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = sorted_list_sum;\n\n    assert(candidate([\"aa\", \"a\", \"aaa\"\
    ]) == [\"aa\"]);\n    assert(candidate([\"school\", \"AI\", \"asdf\", \"b\"])\
    \ == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"d\", \"b\", \"\
    c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"abcd\", \"a\"])\
    \ == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\", \"au\"]) ==\
    \ [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\", \"b\", \"c\"\
    , \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\", \"dd\", \"\
    cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjddyp5j1.d(27): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjddyp5j1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    // your code goes here\n    string[] result;\n    int[] lengths;\n\
    \    foreach(string s; lst)\n    {\n        lengths ~= s.length;\n    }\n    lengths\
    \ = lengths.sort;\n    foreach(int i; lengths)\n    {\n        foreach(string\
    \ s; lst)\n        {\n            if(s.length == i)\n            {\n         \
    \       result ~= s;\n            }\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = sorted_list_sum;\n\n    assert(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]);\n    assert(candidate([\"school\", \"AI\"\
    , \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\",\
    \ \"b\", \"c\", \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9vdq7tne.d(24): Error: cannot append type `ulong` to type `int[]`

    /tmp/tmp9vdq7tne.d(26): Error: no property `sort` for type `int[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9vdq7tne.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    return lst.filter!(a => a.length % 2 == 0).sort!((a, b) => a.length\
    \ - b.length);\n}\nunittest\n{\n    alias candidate = sorted_list_sum;\n\n   \
    \ assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]);\n    assert(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\",\
    \ \"b\", \"c\", \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnkpppfo5.d(19): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnkpppfo5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    string[] result = [];\n    foreach(string s; lst)\n    {\n   \
    \     if(s.length % 2 == 0)\n        {\n            result ~= s;\n        }\n\
    \    }\n    return result.sort;\n}\nunittest\n{\n    alias candidate = sorted_list_sum;\n\
    \n    assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]);\n    assert(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\",\
    \ \"b\", \"c\", \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpn9kw4o06.d(27): Error: no property `sort` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn9kw4o06.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    string[] result;\n    foreach(string s; lst)\n    {\n        if(s.length\
    \ % 2 == 0)\n        {\n            result ~= s;\n        }\n    }\n    return\
    \ result.sort();\n}\nunittest\n{\n    alias candidate = sorted_list_sum;\n\n \
    \   assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]);\n    assert(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\",\
    \ \"b\", \"c\", \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpukf6tzog.d(27): Error: no property `sort` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpukf6tzog.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    string[] result;\n    foreach(string s; lst)\n    {\n        if(s.length\
    \ % 2 == 0)\n        {\n            result ~= s;\n        }\n    }\n    return\
    \ result.sort;\n}\nunittest\n{\n    alias candidate = sorted_list_sum;\n\n   \
    \ assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]);\n    assert(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\",\
    \ \"b\", \"c\", \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbswi6p7_.d(27): Error: no property `sort` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbswi6p7_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    lst = lst.filter!(a => a.length % 2 == 0);\n    lst.sort!((a,\
    \ b) => a.length < b.length || (a.length == b.length && a < b));\n    return lst;\n\
    }\nunittest\n{\n    alias candidate = sorted_list_sum;\n\n    assert(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]);\n    assert(candidate([\"school\", \"AI\"\
    , \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\",\
    \ \"b\", \"c\", \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxajqg17o.d(19): Error: no property `filter` for type `string[]`

    /tmp/tmpxajqg17o.d(20): Error: no property `sort` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxajqg17o.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    string[] result = [];\n    foreach(string s; lst)\n    {\n   \
    \     if(s.length % 2 == 0)\n        {\n            result ~= s;\n        }\n\
    \    }\n    return result.sort;\n}\nunittest\n{\n    alias candidate = sorted_list_sum;\n\
    \n    assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]);\n    assert(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\",\
    \ \"b\", \"c\", \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpn9kw4o06.d(27): Error: no property `sort` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn9kw4o06.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    string[] result = [];\n    foreach(string s; lst)\n    {\n   \
    \     if(s.length % 2 == 0)\n        {\n            result ~= s;\n        }\n\
    \    }\n    return result.sort;\n}\nunittest\n{\n    alias candidate = sorted_list_sum;\n\
    \n    assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]);\n    assert(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\",\
    \ \"b\", \"c\", \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpn9kw4o06.d(27): Error: no property `sort` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn9kw4o06.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    string[] result = [];\n    foreach(string s; lst)\n    {\n   \
    \     if(s.length % 2 == 0)\n        {\n            result ~= s;\n        }\n\
    \    }\n    return result.sort();\n}\nunittest\n{\n    alias candidate = sorted_list_sum;\n\
    \n    assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]);\n    assert(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\",\
    \ \"b\", \"c\", \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_hs22yxl.d(27): Error: no property `sort` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_hs22yxl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    int[] lengths = new int[lst.length];\n    foreach(int i, string\
    \ s; lst)\n    {\n        lengths[i] = s.length;\n    }\n    lengths = lengths.sort();\n\
    \    string[] result = new string[lengths.length];\n    foreach(int i, int l;\
    \ lengths)\n    {\n        foreach(int j, string s; lst)\n        {\n        \
    \    if(s.length == l)\n            {\n                result[i] = s;\n      \
    \          break;\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = sorted_list_sum;\n\n    assert(candidate([\"aa\", \"\
    a\", \"aaa\"]) == [\"aa\"]);\n    assert(candidate([\"school\", \"AI\", \"asdf\"\
    , \"b\"]) == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"d\", \"\
    b\", \"c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"abcd\",\
    \ \"a\"]) == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\", \"\
    dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptakuq5rt.d(22): Error: cannot implicitly convert expression `s.length`
    of type `ulong` to `int`

    /tmp/tmptakuq5rt.d(24): Error: no property `sort` for type `int[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptakuq5rt.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    auto lst2 = lst.dup;\n    lst2.removeIf!(a => a.length % 2 !=\
    \ 0);\n    lst2.sort;\n    return lst2;\n}\nunittest\n{\n    alias candidate =\
    \ sorted_list_sum;\n\n    assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"\
    ]);\n    assert(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"\
    asdf\", \"school\"]);\n    assert(candidate([\"d\", \"b\", \"c\", \"a\"]) == []);\n\
    \    assert(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"\
    ]);\n    assert(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"\
    ]);\n    assert(candidate([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == []);\n\
    \    assert(candidate([\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\"\
    , \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbe0dcj9l.d(20): Error: no property `removeIf` for type `string[]`

    /tmp/tmpbe0dcj9l.d(21): Error: no property `sort` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbe0dcj9l.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    string[] result;\n    foreach(string s; lst)\n    {\n        if(s.length\
    \ % 2 == 0)\n        {\n            result ~= s;\n        }\n    }\n    return\
    \ result.sort;\n}\nunittest\n{\n    alias candidate = sorted_list_sum;\n\n   \
    \ assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]);\n    assert(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\",\
    \ \"b\", \"c\", \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbswi6p7_.d(27): Error: no property `sort` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbswi6p7_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    string[] result = [];\n    foreach(string s; lst)\n    {\n   \
    \     if(s.length % 2 == 0)\n        {\n            result ~= s;\n        }\n\
    \    }\n    return result.sort();\n}\nunittest\n{\n    alias candidate = sorted_list_sum;\n\
    \n    assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]);\n    assert(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\",\
    \ \"b\", \"c\", \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_hs22yxl.d(27): Error: no property `sort` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_hs22yxl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    string[] result = [];\n    foreach(string s; lst)\n    {\n   \
    \     if(s.length % 2 == 0)\n        {\n            result ~= s;\n        }\n\
    \    }\n    return result.sort;\n}\nunittest\n{\n    alias candidate = sorted_list_sum;\n\
    \n    assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]);\n    assert(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\",\
    \ \"b\", \"c\", \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpn9kw4o06.d(27): Error: no property `sort` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn9kw4o06.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    string[] result;\n    foreach(string s; lst)\n    {\n        if(s.length\
    \ % 2 == 0)\n        {\n            result ~= s;\n        }\n    }\n    sort(result);\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = sorted_list_sum;\n\n\
    \    assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]);\n    assert(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\",\
    \ \"b\", \"c\", \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5kfzjguu.d(27): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5kfzjguu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    auto lst2 = lst.dup;\n    lst2.removeIf!(a => a.length % 2 !=\
    \ 0);\n    lst2.sort;\n    return lst2;\n}\nunittest\n{\n    alias candidate =\
    \ sorted_list_sum;\n\n    assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"\
    ]);\n    assert(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"\
    asdf\", \"school\"]);\n    assert(candidate([\"d\", \"b\", \"c\", \"a\"]) == []);\n\
    \    assert(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"\
    ]);\n    assert(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"\
    ]);\n    assert(candidate([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == []);\n\
    \    assert(candidate([\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\"\
    , \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbe0dcj9l.d(20): Error: no property `removeIf` for type `string[]`

    /tmp/tmpbe0dcj9l.d(21): Error: no property `sort` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbe0dcj9l.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    string[] result;\n    foreach(string s; lst)\n    {\n        if(s.length\
    \ % 2 == 0)\n        {\n            result ~= s;\n        }\n    }\n    sort(result);\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = sorted_list_sum;\n\n\
    \    assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]);\n    assert(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\",\
    \ \"b\", \"c\", \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5kfzjguu.d(27): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5kfzjguu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    string[] result;\n    foreach(string s; lst)\n    {\n        if(s.length\
    \ % 2 == 0)\n        {\n            result ~= s;\n        }\n    }\n    return\
    \ result.sort;\n}\nunittest\n{\n    alias candidate = sorted_list_sum;\n\n   \
    \ assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]);\n    assert(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\",\
    \ \"b\", \"c\", \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbswi6p7_.d(27): Error: no property `sort` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbswi6p7_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    string[] result = new string[0];\n    foreach(string s; lst)\n\
    \    {\n        if(s.length % 2 == 0)\n        {\n            result ~= s;\n \
    \       }\n    }\n    sort(result);\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = sorted_list_sum;\n\n    assert(candidate([\"aa\", \"a\", \"aaa\"\
    ]) == [\"aa\"]);\n    assert(candidate([\"school\", \"AI\", \"asdf\", \"b\"])\
    \ == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"d\", \"b\", \"\
    c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"abcd\", \"a\"])\
    \ == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\", \"au\"]) ==\
    \ [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\", \"b\", \"c\"\
    , \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\", \"dd\", \"\
    cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjddyp5j1.d(27): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjddyp5j1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    string[] res = new string[0];\n    foreach(string s; lst)\n  \
    \  {\n        if(s.length % 2 == 0)\n        {\n            res ~= s;\n      \
    \  }\n    }\n    return res.sort();\n}\nunittest\n{\n    alias candidate = sorted_list_sum;\n\
    \n    assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]);\n    assert(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\",\
    \ \"b\", \"c\", \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpykeheumk.d(27): Error: no property `sort` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpykeheumk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    string[] result = [];\n    foreach(string s; lst)\n    {\n   \
    \     if(s.length % 2 == 0)\n        {\n            result ~= s;\n        }\n\
    \    }\n    sort(result);\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = sorted_list_sum;\n\n    assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"]);\n    assert(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\"\
    , \"asdf\", \"school\"]);\n    assert(candidate([\"d\", \"b\", \"c\", \"a\"])\
    \ == []);\n    assert(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\"\
    , \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\"\
    , \"au\"]);\n    assert(candidate([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"])\
    \ == []);\n    assert(candidate([\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\"\
    , \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpc8hi2w8k.d(27): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc8hi2w8k.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    string[] result;\n    foreach(string s; lst)\n    {\n        if(s.length\
    \ % 2 == 0)\n        {\n            result ~= s;\n        }\n    }\n    return\
    \ result.sort();\n}\nunittest\n{\n    alias candidate = sorted_list_sum;\n\n \
    \   assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]);\n    assert(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\",\
    \ \"b\", \"c\", \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpukf6tzog.d(27): Error: no property `sort` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpukf6tzog.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    string[] result;\n    foreach(string s; lst)\n    {\n        if(s.length\
    \ % 2 == 0)\n        {\n            result ~= s;\n        }\n    }\n    return\
    \ result.sort;\n}\nunittest\n{\n    alias candidate = sorted_list_sum;\n\n   \
    \ assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]);\n    assert(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\",\
    \ \"b\", \"c\", \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbswi6p7_.d(27): Error: no property `sort` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbswi6p7_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    string[] result = new string[0];\n    foreach(string s; lst)\n\
    \    {\n        if(s.length % 2 == 0)\n        {\n            result ~= s;\n \
    \       }\n    }\n    sort(result);\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = sorted_list_sum;\n\n    assert(candidate([\"aa\", \"a\", \"aaa\"\
    ]) == [\"aa\"]);\n    assert(candidate([\"school\", \"AI\", \"asdf\", \"b\"])\
    \ == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"d\", \"b\", \"\
    c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"abcd\", \"a\"])\
    \ == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\", \"au\"]) ==\
    \ [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\", \"b\", \"c\"\
    , \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\", \"dd\", \"\
    cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjddyp5j1.d(27): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjddyp5j1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    lst = lst.filter!(a => a.length % 2 == 0);\n    lst.sort;\n  \
    \  return lst;\n}\nunittest\n{\n    alias candidate = sorted_list_sum;\n\n   \
    \ assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]);\n    assert(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\",\
    \ \"b\", \"c\", \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2zv320nj.d(19): Error: no property `filter` for type `string[]`

    /tmp/tmp2zv320nj.d(20): Error: no property `sort` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2zv320nj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    string[] result;\n    foreach(string s; lst)\n    {\n        if(s.length\
    \ % 2 == 0)\n        {\n            result ~= s;\n        }\n    }\n    sort(result);\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = sorted_list_sum;\n\n\
    \    assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]);\n    assert(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\",\
    \ \"b\", \"c\", \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5kfzjguu.d(27): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5kfzjguu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    string[] result;\n    foreach(string s; lst)\n    {\n        if(s.length\
    \ % 2 == 0)\n        {\n            result ~= s;\n        }\n    }\n    return\
    \ result.sort;\n}\nunittest\n{\n    alias candidate = sorted_list_sum;\n\n   \
    \ assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]);\n    assert(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\",\
    \ \"b\", \"c\", \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbswi6p7_.d(27): Error: no property `sort` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbswi6p7_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    string[] result;\n    foreach(string s; lst)\n    {\n        if(s.length\
    \ % 2 == 0)\n        {\n            result ~= s;\n        }\n    }\n    return\
    \ sort(result);\n}\nunittest\n{\n    alias candidate = sorted_list_sum;\n\n  \
    \  assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]);\n    assert(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\",\
    \ \"b\", \"c\", \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfnxjorgs.d(27): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfnxjorgs.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    string[] new_list = [];\n    foreach(string s; lst)\n    {\n \
    \       if(s.length % 2 == 0)\n        {\n            new_list ~= s;\n       \
    \ }\n    }\n    new_list.sort();\n    return new_list;\n}\nunittest\n{\n    alias\
    \ candidate = sorted_list_sum;\n\n    assert(candidate([\"aa\", \"a\", \"aaa\"\
    ]) == [\"aa\"]);\n    assert(candidate([\"school\", \"AI\", \"asdf\", \"b\"])\
    \ == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"d\", \"b\", \"\
    c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"abcd\", \"a\"])\
    \ == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\", \"au\"]) ==\
    \ [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\", \"b\", \"c\"\
    , \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\", \"dd\", \"\
    cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpruamh8n9.d(27): Error: no property `sort` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpruamh8n9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    string[] result;\n    foreach(string s; lst)\n    {\n        if(s.length\
    \ % 2 == 0)\n        {\n            result ~= s;\n        }\n    }\n    sort(result);\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = sorted_list_sum;\n\n\
    \    assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]);\n    assert(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\",\
    \ \"b\", \"c\", \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5kfzjguu.d(27): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5kfzjguu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    string[] result = lst.dup;\n    result.removeIf!(a => a.length\
    \ % 2 == 1);\n    result.sort!((a, b) => a.length - b.length);\n    return result;\n\
    }\nunittest\n{\n    alias candidate = sorted_list_sum;\n\n    assert(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]);\n    assert(candidate([\"school\", \"AI\"\
    , \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\",\
    \ \"b\", \"c\", \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbvdtha_y.d(20): Error: no property `removeIf` for type `string[]`

    /tmp/tmpbvdtha_y.d(21): Error: no property `sort` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbvdtha_y.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    int[] lengths = lst.map!(a => a.length);\n    int[] lengths_sorted\
    \ = lengths.sort();\n    int[] lengths_sorted_unique = lengths_sorted.uniq;\n\
    \    string[] result = new string[];\n    foreach(int i; lengths_sorted_unique)\n\
    \    {\n        foreach(string j; lst)\n        {\n            if(j.length ==\
    \ i)\n            {\n                result ~= j;\n            }\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = sorted_list_sum;\n\
    \n    assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]);\n    assert(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\",\
    \ \"b\", \"c\", \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0jpgq7kc.d(19): Error: no property `map` for type `string[]`

    /tmp/tmp0jpgq7kc.d(20): Error: no property `sort` for type `int[]`

    /tmp/tmp0jpgq7kc.d(21): Error: no property `uniq` for type `int[]`

    /tmp/tmp0jpgq7kc.d(22): Error: new can only create structs, dynamic arrays or
    class objects, not `string[]`''s

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0jpgq7kc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    string[] result;\n    foreach(string s; lst)\n    {\n        if(s.length\
    \ % 2 == 0)\n        {\n            result ~= s;\n        }\n    }\n    return\
    \ result.sort;\n}\nunittest\n{\n    alias candidate = sorted_list_sum;\n\n   \
    \ assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]);\n    assert(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\",\
    \ \"b\", \"c\", \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbswi6p7_.d(27): Error: no property `sort` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbswi6p7_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    string[] result;\n    foreach(string s; lst) \n    {\n       \
    \ if(s.length % 2 == 0) \n        {\n            result ~= s;\n        }\n   \
    \ }\n    return result.sort;\n}\nunittest\n{\n    alias candidate = sorted_list_sum;\n\
    \n    assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]);\n    assert(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\",\
    \ \"b\", \"c\", \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp97tkf2c6.d(27): Error: no property `sort` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp97tkf2c6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    string[] result = new string[0];\n    foreach(string s; lst)\n\
    \    {\n        if(s.length % 2 == 0)\n        {\n            result ~= s;\n \
    \       }\n    }\n    return result.sort;\n}\nunittest\n{\n    alias candidate\
    \ = sorted_list_sum;\n\n    assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"]);\n    assert(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\"\
    , \"asdf\", \"school\"]);\n    assert(candidate([\"d\", \"b\", \"c\", \"a\"])\
    \ == []);\n    assert(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\"\
    , \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\"\
    , \"au\"]);\n    assert(candidate([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"])\
    \ == []);\n    assert(candidate([\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\"\
    , \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpefow89sp.d(27): Error: no property `sort` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpefow89sp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    lst = lst.filter!(a => a.length % 2 == 0).sort!((a, b) => a.length\
    \ < b.length || a.length == b.length && a < b);\n    return lst;\n}\nunittest\n\
    {\n    alias candidate = sorted_list_sum;\n\n    assert(candidate([\"aa\", \"\
    a\", \"aaa\"]) == [\"aa\"]);\n    assert(candidate([\"school\", \"AI\", \"asdf\"\
    , \"b\"]) == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"d\", \"\
    b\", \"c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"abcd\",\
    \ \"a\"]) == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\", \"\
    dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmghb8g3z.d(19): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmghb8g3z.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    string[] res;\n    foreach(i; lst)\n    {\n        if(i.length\
    \ % 2 == 0)\n        {\n            res ~= i;\n        }\n    }\n    res.sort!((a,\
    \ b) => a.length < b.length || (a.length == b.length && a < b));\n    return res;\n\
    }\nunittest\n{\n    alias candidate = sorted_list_sum;\n\n    assert(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]);\n    assert(candidate([\"school\", \"AI\"\
    , \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\",\
    \ \"b\", \"c\", \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0ckprvqm.d(27): Error: no property `sort` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0ckprvqm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    string[] result;\n    foreach(string s; lst)\n    {\n        if(s.length\
    \ % 2 == 0)\n        {\n            result ~= s;\n        }\n    }\n    sort(result);\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = sorted_list_sum;\n\n\
    \    assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]);\n    assert(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\",\
    \ \"b\", \"c\", \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5kfzjguu.d(27): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5kfzjguu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    string[] result = [];\n    foreach(string s; lst)\n    {\n   \
    \     if(s.length % 2 == 0)\n        {\n            result ~= s;\n        }\n\
    \    }\n    return result.sort();\n}\nunittest\n{\n    alias candidate = sorted_list_sum;\n\
    \n    assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]);\n    assert(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\",\
    \ \"b\", \"c\", \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_hs22yxl.d(27): Error: no property `sort` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_hs22yxl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    auto lst_len = lst.length;\n    auto lst_len_odd = lst_len % 2;\n\
    \    auto lst_len_half = lst_len / 2;\n    auto lst_len_half_odd = lst_len_half\
    \ % 2;\n    auto lst_len_half_half = lst_len_half / 2;\n    auto lst_len_half_half_odd\
    \ = lst_len_half_half % 2;\n    auto lst_len_half_half_half = lst_len_half_half\
    \ / 2;\n    auto lst_len_half_half_half_odd = lst_len_half_half_half % 2;\n  \
    \  auto lst_len_half_half_half_half = lst_len_half_half_half / 2;\n    auto lst_len_half_half_half_half_odd\
    \ = lst_len_half_half_half_half % 2;\n    auto lst_len_half_half_half_half_half\
    \ = lst_len_half_half_half_half / 2;\n    auto lst_len_half_half_half_half_half_odd\
    \ = lst_len_half_half_half_half_half % 2;\n    auto lst_len_half_half_half_half_half_half\
    \ = lst_len_half_half_half_half_half / 2;\n    auto lst_len_half_half_half_half_half_half_odd\
    \ = lst_len_half_half_half_half_half_half % 2;\n    auto lst_len_half_half_half_half_half_half_half\
    \ = lst_len_half_half_half_half_half_half / 2;\n    auto lst_len_half_half_half_half_half_half_half_odd\
    \ = lst_len_half_half_half_half_half_half_half % 2;\n    auto lst_len_half_half_half_half_half_half_half_half\
    \ = lst_len_half_half_half_half_half_half_half / 2;\n\nunittest\n{\n    alias\
    \ candidate = sorted_list_sum;\n\n    assert(candidate([\"aa\", \"a\", \"aaa\"\
    ]) == [\"aa\"]);\n    assert(candidate([\"school\", \"AI\", \"asdf\", \"b\"])\
    \ == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"d\", \"b\", \"\
    c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"abcd\", \"a\"])\
    \ == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\", \"au\"]) ==\
    \ [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\", \"b\", \"c\"\
    , \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\", \"dd\", \"\
    cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5ssn4dtn.d(37): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5ssn4dtn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    string[] result = [];\n    foreach(string s; lst) \n    {\n  \
    \      if(s.length % 2 == 0) \n        {\n            result ~= s;\n        }\n\
    \    }\n    sort(result);\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = sorted_list_sum;\n\n    assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"]);\n    assert(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\"\
    , \"asdf\", \"school\"]);\n    assert(candidate([\"d\", \"b\", \"c\", \"a\"])\
    \ == []);\n    assert(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\"\
    , \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\"\
    , \"au\"]);\n    assert(candidate([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"])\
    \ == []);\n    assert(candidate([\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\"\
    , \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpys2tykt0.d(27): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpys2tykt0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    string[] result;\n    foreach(i; lst)\n    {\n        if(i.length\
    \ % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return\
    \ result.sort();\n}\nunittest\n{\n    alias candidate = sorted_list_sum;\n\n \
    \   assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]);\n    assert(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\",\
    \ \"b\", \"c\", \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4q9uuqg7.d(27): Error: no property `sort` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4q9uuqg7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    string[] res;\n    foreach(string s; lst)\n    {\n        if(s.length\
    \ % 2 == 0)\n        {\n            res ~= s;\n        }\n    }\n    return res.sort();\n\
    }\nunittest\n{\n    alias candidate = sorted_list_sum;\n\n    assert(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]);\n    assert(candidate([\"school\", \"AI\"\
    , \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\",\
    \ \"b\", \"c\", \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6tbatd9v.d(27): Error: no property `sort` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6tbatd9v.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    string[] result;\n    foreach(string s; lst)\n    {\n        if(s.length\
    \ % 2 == 0)\n        {\n            result ~= s;\n        }\n    }\n    sort(result);\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = sorted_list_sum;\n\n\
    \    assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]);\n    assert(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\",\
    \ \"b\", \"c\", \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5kfzjguu.d(27): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5kfzjguu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    string[] result = [];\n    foreach(string s; lst)\n    {\n   \
    \     if(s.length % 2 == 0)\n        {\n            result ~= s;\n        }\n\
    \    }\n    return result.sort();\n}\nunittest\n{\n    alias candidate = sorted_list_sum;\n\
    \n    assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]);\n    assert(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\",\
    \ \"b\", \"c\", \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_hs22yxl.d(27): Error: no property `sort` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_hs22yxl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    string[] result = [];\n    foreach(string s; lst)\n    {\n   \
    \     if(s.length % 2 == 0)\n        {\n            result ~= s;\n        }\n\
    \    }\n    return result.sort();\n}\nunittest\n{\n    alias candidate = sorted_list_sum;\n\
    \n    assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]);\n    assert(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\",\
    \ \"b\", \"c\", \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_hs22yxl.d(27): Error: no property `sort` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_hs22yxl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    string[] result = [];\n    foreach(string s; lst)\n    {\n   \
    \     if(s.length % 2 == 0)\n        {\n            result ~= s;\n        }\n\
    \    }\n    sort(result);\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = sorted_list_sum;\n\n    assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"]);\n    assert(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\"\
    , \"asdf\", \"school\"]);\n    assert(candidate([\"d\", \"b\", \"c\", \"a\"])\
    \ == []);\n    assert(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\"\
    , \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\"\
    , \"au\"]);\n    assert(candidate([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"])\
    \ == []);\n    assert(candidate([\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\"\
    , \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpc8hi2w8k.d(27): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc8hi2w8k.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    string[] result = new string[0];\n    foreach(string s; lst)\n\
    \    {\n        if(s.length % 2 == 0)\n        {\n            result ~= s;\n \
    \       }\n    }\n    return result.sort;\n}\nunittest\n{\n    alias candidate\
    \ = sorted_list_sum;\n\n    assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"]);\n    assert(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\"\
    , \"asdf\", \"school\"]);\n    assert(candidate([\"d\", \"b\", \"c\", \"a\"])\
    \ == []);\n    assert(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\"\
    , \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\"\
    , \"au\"]);\n    assert(candidate([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"])\
    \ == []);\n    assert(candidate([\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\"\
    , \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpefow89sp.d(27): Error: no property `sort` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpefow89sp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    string[] temp = new string[0];\n    foreach(string s; lst) \n\
    \    {\n        if(s.length % 2 == 0) \n        {\n            temp ~= s;\n  \
    \      }\n    }\n    temp.sort;\n    return temp;\n}\nunittest\n{\n    alias candidate\
    \ = sorted_list_sum;\n\n    assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"]);\n    assert(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\"\
    , \"asdf\", \"school\"]);\n    assert(candidate([\"d\", \"b\", \"c\", \"a\"])\
    \ == []);\n    assert(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\"\
    , \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\"\
    , \"au\"]);\n    assert(candidate([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"])\
    \ == []);\n    assert(candidate([\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\"\
    , \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnj5qvrab.d(27): Error: no property `sort` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnj5qvrab.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    string[] result;\n    foreach(string s; lst)\n    {\n        if(s.length\
    \ % 2 == 0)\n        {\n            result ~= s;\n        }\n    }\n    sort(result);\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = sorted_list_sum;\n\n\
    \    assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]);\n    assert(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\",\
    \ \"b\", \"c\", \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5kfzjguu.d(27): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5kfzjguu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    string[] result;\n    foreach(string s; lst)\n    {\n        if(s.length\
    \ % 2 == 0)\n        {\n            result ~= s;\n        }\n    }\n    return\
    \ result.sort;\n}\nunittest\n{\n    alias candidate = sorted_list_sum;\n\n   \
    \ assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]);\n    assert(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\",\
    \ \"b\", \"c\", \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbswi6p7_.d(27): Error: no property `sort` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbswi6p7_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    string[] res = new string[0];\n    foreach(string s; lst)\n  \
    \  {\n        if(s.length % 2 == 0)\n        {\n            res ~= s;\n      \
    \  }\n    }\n    sort(res);\n    return res;\n}\nunittest\n{\n    alias candidate\
    \ = sorted_list_sum;\n\n    assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"]);\n    assert(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\"\
    , \"asdf\", \"school\"]);\n    assert(candidate([\"d\", \"b\", \"c\", \"a\"])\
    \ == []);\n    assert(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\"\
    , \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\"\
    , \"au\"]);\n    assert(candidate([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"])\
    \ == []);\n    assert(candidate([\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\"\
    , \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1lnzot6v.d(27): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1lnzot6v.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    string[] res;\n    foreach(string s; lst)\n    {\n        if(s.length\
    \ % 2 == 0)\n        {\n            res ~= s;\n        }\n    }\n    res.sort;\n\
    \    return res;\n}\nunittest\n{\n    alias candidate = sorted_list_sum;\n\n \
    \   assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]);\n    assert(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\",\
    \ \"b\", \"c\", \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpuyich2k5.d(27): Error: no property `sort` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuyich2k5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    string[] result;\n    foreach(i; lst)\n    {\n        if(i.length\
    \ % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    sort(result);\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = sorted_list_sum;\n\n\
    \    assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]);\n    assert(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\",\
    \ \"b\", \"c\", \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpecn5prrx.d(27): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpecn5prrx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    string[] result;\n    foreach(string s; lst)\n    {\n        if(s.length\
    \ % 2 == 0)\n        {\n            result ~= s;\n        }\n    }\n    return\
    \ result.sort();\n}\nunittest\n{\n    alias candidate = sorted_list_sum;\n\n \
    \   assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]);\n    assert(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\",\
    \ \"b\", \"c\", \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpukf6tzog.d(27): Error: no property `sort` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpukf6tzog.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    string[] result;\n    foreach(string s; lst)\n    {\n        if(s.length\
    \ % 2 == 0)\n        {\n            result ~= s;\n        }\n    }\n    sort(result);\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = sorted_list_sum;\n\n\
    \    assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]);\n    assert(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\",\
    \ \"b\", \"c\", \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5kfzjguu.d(27): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5kfzjguu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    string[] result = new string[0];\n    foreach(string str; lst)\n\
    \    {\n        if(str.length % 2 == 0)\n        {\n            result ~= str;\n\
    \        }\n    }\n    sort(result);\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = sorted_list_sum;\n\n    assert(candidate([\"aa\", \"a\", \"\
    aaa\"]) == [\"aa\"]);\n    assert(candidate([\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"d\", \"b\"\
    , \"c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"abcd\", \"\
    a\"]) == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\", \"au\"\
    ]) == [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\", \"b\", \"\
    c\", \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnjrrn54f.d(27): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnjrrn54f.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    string[] result = [];\n    foreach(string s; lst)\n    {\n   \
    \     if(s.length % 2 == 0)\n        {\n            result ~= s;\n        }\n\
    \    }\n    sort(result);\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = sorted_list_sum;\n\n    assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"]);\n    assert(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\"\
    , \"asdf\", \"school\"]);\n    assert(candidate([\"d\", \"b\", \"c\", \"a\"])\
    \ == []);\n    assert(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\"\
    , \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\"\
    , \"au\"]);\n    assert(candidate([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"])\
    \ == []);\n    assert(candidate([\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\"\
    , \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpc8hi2w8k.d(27): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc8hi2w8k.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    string[] result = [];\n    foreach(string s; lst)\n    {\n   \
    \     if(s.length % 2 == 0)\n        {\n            result ~= s;\n        }\n\
    \    }\n    sort(result);\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = sorted_list_sum;\n\n    assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"]);\n    assert(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\"\
    , \"asdf\", \"school\"]);\n    assert(candidate([\"d\", \"b\", \"c\", \"a\"])\
    \ == []);\n    assert(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\"\
    , \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\"\
    , \"au\"]);\n    assert(candidate([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"])\
    \ == []);\n    assert(candidate([\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\"\
    , \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpc8hi2w8k.d(27): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc8hi2w8k.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    string[] result;\n    foreach(string s; lst)\n    {\n        if(s.length\
    \ % 2 == 0)\n        {\n            result ~= s;\n        }\n    }\n    sort(result);\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = sorted_list_sum;\n\n\
    \    assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]);\n    assert(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\",\
    \ \"b\", \"c\", \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5kfzjguu.d(27): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5kfzjguu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    string[] result;\n    foreach(string s; lst)\n    {\n        if(s.length\
    \ % 2 == 0)\n        {\n            result ~= s;\n        }\n    }\n    return\
    \ result.sort;\n}\nunittest\n{\n    alias candidate = sorted_list_sum;\n\n   \
    \ assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]);\n    assert(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\",\
    \ \"b\", \"c\", \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbswi6p7_.d(27): Error: no property `sort` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbswi6p7_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    lst = lst.filter!(a => a.length % 2 == 0);\n    lst.sort!((a,\
    \ b) => a.length < b.length);\n    return lst;\n}\nunittest\n{\n    alias candidate\
    \ = sorted_list_sum;\n\n    assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"]);\n    assert(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\"\
    , \"asdf\", \"school\"]);\n    assert(candidate([\"d\", \"b\", \"c\", \"a\"])\
    \ == []);\n    assert(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\"\
    , \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\"\
    , \"au\"]);\n    assert(candidate([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"])\
    \ == []);\n    assert(candidate([\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\"\
    , \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphmk54vzp.d(19): Error: no property `filter` for type `string[]`

    /tmp/tmphmk54vzp.d(20): Error: no property `sort` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphmk54vzp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    auto result = lst.filter!(a => a.length % 2 == 0).sort!((a, b)\
    \ => a.length < b.length || (a.length == b.length && a < b));\n    return result;\n\
    }\nunittest\n{\n    alias candidate = sorted_list_sum;\n\n    assert(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]);\n    assert(candidate([\"school\", \"AI\"\
    , \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\",\
    \ \"b\", \"c\", \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgabeft8k.d(19): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgabeft8k.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    string[] result;\n    foreach(string s; lst)\n    {\n        if(s.length\
    \ % 2 == 0)\n        {\n            result ~= s;\n        }\n    }\n    return\
    \ result.sort;\n}\nunittest\n{\n    alias candidate = sorted_list_sum;\n\n   \
    \ assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]);\n    assert(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\",\
    \ \"b\", \"c\", \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbswi6p7_.d(27): Error: no property `sort` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbswi6p7_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    string[] result;\n    foreach(string s; lst)\n    {\n        if(s.length\
    \ % 2 == 0)\n        {\n            result ~= s;\n        }\n    }\n    sort(result);\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = sorted_list_sum;\n\n\
    \    assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]);\n    assert(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\",\
    \ \"b\", \"c\", \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5kfzjguu.d(27): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5kfzjguu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    string[] result;\n    foreach(string s; lst)\n    {\n        if(s.length\
    \ % 2 == 0)\n        {\n            result ~= s;\n        }\n    }\n    return\
    \ result.sort;\n}\nunittest\n{\n    alias candidate = sorted_list_sum;\n\n   \
    \ assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]);\n    assert(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\",\
    \ \"b\", \"c\", \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbswi6p7_.d(27): Error: no property `sort` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbswi6p7_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    string[] result;\n    foreach(string s; lst)\n    {\n        if(s.length\
    \ % 2 == 0)\n        {\n            result ~= s;\n        }\n    }\n    sort(result);\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = sorted_list_sum;\n\n\
    \    assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]);\n    assert(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\",\
    \ \"b\", \"c\", \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5kfzjguu.d(27): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5kfzjguu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    string[] result = [];\n    foreach(string s; lst)\n    {\n   \
    \     if(s.length % 2 == 0)\n        {\n            result ~= s;\n        }\n\
    \    }\n    sort(result);\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = sorted_list_sum;\n\n    assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"]);\n    assert(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\"\
    , \"asdf\", \"school\"]);\n    assert(candidate([\"d\", \"b\", \"c\", \"a\"])\
    \ == []);\n    assert(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\"\
    , \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\"\
    , \"au\"]);\n    assert(candidate([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"])\
    \ == []);\n    assert(candidate([\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\"\
    , \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpc8hi2w8k.d(27): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc8hi2w8k.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    string[] result;\n    foreach(string i; lst)\n    {\n        if(i.length\
    \ % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    sort(result);\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = sorted_list_sum;\n\n\
    \    assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]);\n    assert(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\",\
    \ \"b\", \"c\", \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppp297w7w.d(27): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppp297w7w.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    string[] result = new string[0];\n    foreach(string s; lst)\n\
    \    {\n        if(s.length % 2 == 0)\n        {\n            result ~= s;\n \
    \       }\n    }\n    sort(result);\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = sorted_list_sum;\n\n    assert(candidate([\"aa\", \"a\", \"aaa\"\
    ]) == [\"aa\"]);\n    assert(candidate([\"school\", \"AI\", \"asdf\", \"b\"])\
    \ == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"d\", \"b\", \"\
    c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"abcd\", \"a\"])\
    \ == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\", \"au\"]) ==\
    \ [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\", \"b\", \"c\"\
    , \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\", \"dd\", \"\
    cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjddyp5j1.d(27): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjddyp5j1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    string[] result;\n    foreach(string s; lst)\n    {\n        if(s.length\
    \ % 2 == 0)\n        {\n            result ~= s;\n        }\n    }\n    return\
    \ result.sort;\n}\nunittest\n{\n    alias candidate = sorted_list_sum;\n\n   \
    \ assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]);\n    assert(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\",\
    \ \"b\", \"c\", \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbswi6p7_.d(27): Error: no property `sort` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbswi6p7_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    string[] result = new string[];\n    foreach(string s; lst)\n\
    \    {\n        if(s.length % 2 == 0)\n        {\n            result ~= s;\n \
    \       }\n    }\n    sort(result);\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = sorted_list_sum;\n\n    assert(candidate([\"aa\", \"a\", \"aaa\"\
    ]) == [\"aa\"]);\n    assert(candidate([\"school\", \"AI\", \"asdf\", \"b\"])\
    \ == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"d\", \"b\", \"\
    c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"abcd\", \"a\"])\
    \ == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\", \"au\"]) ==\
    \ [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\", \"b\", \"c\"\
    , \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\", \"dd\", \"\
    cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpm7s61k5n.d(19): Error: new can only create structs, dynamic arrays
    or class objects, not `string[]`''s

    /tmp/tmpm7s61k5n.d(27): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpm7s61k5n.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    string[] res;\n    foreach(string s; lst)\n    {\n        if(s.length\
    \ % 2 == 0)\n        {\n            res ~= s;\n        }\n    }\n    res.sort;\n\
    \    return res;\n}\nunittest\n{\n    alias candidate = sorted_list_sum;\n\n \
    \   assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]);\n    assert(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\",\
    \ \"b\", \"c\", \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpuyich2k5.d(27): Error: no property `sort` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuyich2k5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    string[] result;\n    foreach(string s; lst)\n    {\n        if(s.length\
    \ % 2 == 0)\n        {\n            result ~= s;\n        }\n    }\n    return\
    \ result.sort;\n}\nunittest\n{\n    alias candidate = sorted_list_sum;\n\n   \
    \ assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]);\n    assert(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\",\
    \ \"b\", \"c\", \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbswi6p7_.d(27): Error: no property `sort` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbswi6p7_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    string[] res;\n    foreach(string s; lst)\n    {\n        if(s.length\
    \ % 2 == 0)\n        {\n            res ~= s;\n        }\n    }\n    res.sort;\n\
    \    return res;\n}\nunittest\n{\n    alias candidate = sorted_list_sum;\n\n \
    \   assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]);\n    assert(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\",\
    \ \"b\", \"c\", \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpuyich2k5.d(27): Error: no property `sort` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuyich2k5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    string[] result;\n    foreach(string s; lst)\n    {\n        if(s.length\
    \ % 2 == 0)\n        {\n            result ~= s;\n        }\n    }\n    return\
    \ result.sort;\n}\nunittest\n{\n    alias candidate = sorted_list_sum;\n\n   \
    \ assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]);\n    assert(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\",\
    \ \"b\", \"c\", \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbswi6p7_.d(27): Error: no property `sort` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbswi6p7_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    string[] result;\n    foreach(string s; lst)\n    {\n        if(s.length\
    \ % 2 == 0)\n        {\n            result ~= s;\n        }\n    }\n    return\
    \ result.sort;\n}\nunittest\n{\n    alias candidate = sorted_list_sum;\n\n   \
    \ assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]);\n    assert(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\",\
    \ \"b\", \"c\", \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbswi6p7_.d(27): Error: no property `sort` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbswi6p7_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    string[] result = [];\n    foreach(string s; lst)\n    {\n   \
    \     if(s.length % 2 == 0)\n        {\n            result ~= s;\n        }\n\
    \    }\n    sort(result);\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = sorted_list_sum;\n\n    assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"]);\n    assert(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\"\
    , \"asdf\", \"school\"]);\n    assert(candidate([\"d\", \"b\", \"c\", \"a\"])\
    \ == []);\n    assert(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\"\
    , \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\"\
    , \"au\"]);\n    assert(candidate([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"])\
    \ == []);\n    assert(candidate([\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\"\
    , \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpc8hi2w8k.d(27): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc8hi2w8k.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    lst = lst.filter!(a => a.length % 2 == 0).sort!(a => a.length).array();\n\
    \    return lst;\n}\nunittest\n{\n    alias candidate = sorted_list_sum;\n\n \
    \   assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]);\n    assert(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\",\
    \ \"b\", \"c\", \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmposznkmxv.d(19): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmposznkmxv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    string[] result;\n    foreach(string s; lst)\n    {\n        if(s.length\
    \ % 2 == 0)\n        {\n            result ~= s;\n        }\n    }\n    sort(result);\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = sorted_list_sum;\n\n\
    \    assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]);\n    assert(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\",\
    \ \"b\", \"c\", \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5kfzjguu.d(27): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5kfzjguu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    string[] result;\n    foreach(string s; lst)\n    {\n        if(s.length\
    \ % 2 == 0)\n        {\n            result ~= s;\n        }\n    }\n    sort(result);\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = sorted_list_sum;\n\n\
    \    assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]);\n    assert(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\",\
    \ \"b\", \"c\", \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5kfzjguu.d(27): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5kfzjguu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    string[] res;\n    foreach(string s; lst)\n    {\n        if(s.length\
    \ % 2 == 0)\n        {\n            res ~= s;\n        }\n    }\n    return res.sort;\n\
    }\nunittest\n{\n    alias candidate = sorted_list_sum;\n\n    assert(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]);\n    assert(candidate([\"school\", \"AI\"\
    , \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\",\
    \ \"b\", \"c\", \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4yo9xhc5.d(27): Error: no property `sort` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4yo9xhc5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    string[] result;\n    foreach(string s; lst)\n    {\n        if(s.length\
    \ % 2 == 0)\n        {\n            result ~= s;\n        }\n    }\n    return\
    \ result.sort;\n}\nunittest\n{\n    alias candidate = sorted_list_sum;\n\n   \
    \ assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]);\n    assert(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\",\
    \ \"b\", \"c\", \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbswi6p7_.d(27): Error: no property `sort` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbswi6p7_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    string[] result;\n    foreach(string s; lst)\n    {\n        if(s.length\
    \ % 2 == 0)\n        {\n            result ~= s;\n        }\n    }\n    return\
    \ result.sort;\n}\nunittest\n{\n    alias candidate = sorted_list_sum;\n\n   \
    \ assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]);\n    assert(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\",\
    \ \"b\", \"c\", \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbswi6p7_.d(27): Error: no property `sort` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbswi6p7_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    string[] result;\n    foreach(string s; lst)\n    {\n        if(s.length\
    \ % 2 == 0)\n        {\n            result ~= s;\n        }\n    }\n    return\
    \ result.sort();\n}\nunittest\n{\n    alias candidate = sorted_list_sum;\n\n \
    \   assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]);\n    assert(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\",\
    \ \"b\", \"c\", \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpukf6tzog.d(27): Error: no property `sort` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpukf6tzog.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    string[] result = new string[0];\n    foreach(string s; lst)\n\
    \    {\n        if(s.length % 2 == 0)\n        {\n            result ~= s;\n \
    \       }\n    }\n    return result.sort;\n}\nunittest\n{\n    alias candidate\
    \ = sorted_list_sum;\n\n    assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"]);\n    assert(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\"\
    , \"asdf\", \"school\"]);\n    assert(candidate([\"d\", \"b\", \"c\", \"a\"])\
    \ == []);\n    assert(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\"\
    , \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\"\
    , \"au\"]);\n    assert(candidate([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"])\
    \ == []);\n    assert(candidate([\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\"\
    , \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpefow89sp.d(27): Error: no property `sort` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpefow89sp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    string[] new_list = new string[0];\n    foreach(string s; lst)\n\
    \    {\n        if(s.length % 2 == 0)\n        {\n            new_list ~= s;\n\
    \        }\n    }\n    new_list.sort;\n    return new_list;\n}\nunittest\n{\n\
    \    alias candidate = sorted_list_sum;\n\n    assert(candidate([\"aa\", \"a\"\
    , \"aaa\"]) == [\"aa\"]);\n    assert(candidate([\"school\", \"AI\", \"asdf\"\
    , \"b\"]) == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"d\", \"\
    b\", \"c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"abcd\",\
    \ \"a\"]) == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\", \"\
    dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxbhvlodh.d(27): Error: no property `sort` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxbhvlodh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    string[] res = new string[0];\n    foreach(string s; lst)\n  \
    \  {\n        if(s.length % 2 == 0)\n        {\n            res ~= s;\n      \
    \  }\n    }\n    res.sort!((a, b) => a.length < b.length || (a.length == b.length\
    \ && a < b));\n    return res;\n}\nunittest\n{\n    alias candidate = sorted_list_sum;\n\
    \n    assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]);\n    assert(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\",\
    \ \"b\", \"c\", \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphityunei.d(27): Error: no property `sort` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphityunei.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    string[] result;\n    foreach(string s; lst)\n    {\n        if(s.length\
    \ % 2 == 0)\n        {\n            result ~= s;\n        }\n    }\n    return\
    \ result.sort;\n}\nunittest\n{\n    alias candidate = sorted_list_sum;\n\n   \
    \ assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]);\n    assert(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\",\
    \ \"b\", \"c\", \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbswi6p7_.d(27): Error: no property `sort` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbswi6p7_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    string[] result = new string[0];\n    foreach(string word; lst)\n\
    \    {\n        if(word.length % 2 == 0)\n        {\n            result ~= word;\n\
    \        }\n    }\n    return result.sort();\n}\nunittest\n{\n    alias candidate\
    \ = sorted_list_sum;\n\n    assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"]);\n    assert(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\"\
    , \"asdf\", \"school\"]);\n    assert(candidate([\"d\", \"b\", \"c\", \"a\"])\
    \ == []);\n    assert(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\"\
    , \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\"\
    , \"au\"]);\n    assert(candidate([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"])\
    \ == []);\n    assert(candidate([\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\"\
    , \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_b_9i74f.d(27): Error: no property `sort` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_b_9i74f.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    string[] result;\n    foreach(string s; lst)\n    {\n        if(s.length\
    \ % 2 == 0)\n        {\n            result ~= s;\n        }\n    }\n    return\
    \ result.sort();\n}\nunittest\n{\n    alias candidate = sorted_list_sum;\n\n \
    \   assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]);\n    assert(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\",\
    \ \"b\", \"c\", \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpukf6tzog.d(27): Error: no property `sort` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpukf6tzog.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    string[] result = [];\n    foreach(string s; lst)\n    {\n   \
    \     if (s.length % 2 == 0)\n        {\n            result ~= s;\n        }\n\
    \    }\n    return result.sort();\n}\nunittest\n{\n    alias candidate = sorted_list_sum;\n\
    \n    assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]);\n    assert(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\",\
    \ \"b\", \"c\", \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzu3x0c17.d(27): Error: no property `sort` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzu3x0c17.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    auto lst2 = lst.dup;\n    lst2.removeIf!(a => a.length % 2 !=\
    \ 0);\n    lst2.sort!((a, b) => a.length - b.length);\n    return lst2;\n}\nunittest\n\
    {\n    alias candidate = sorted_list_sum;\n\n    assert(candidate([\"aa\", \"\
    a\", \"aaa\"]) == [\"aa\"]);\n    assert(candidate([\"school\", \"AI\", \"asdf\"\
    , \"b\"]) == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"d\", \"\
    b\", \"c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"abcd\",\
    \ \"a\"]) == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\", \"\
    dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7oyztff1.d(20): Error: no property `removeIf` for type `string[]`

    /tmp/tmp7oyztff1.d(21): Error: no property `sort` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7oyztff1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    string[] result;\n    foreach(string s; lst)\n    {\n        if(s.length\
    \ % 2 == 0)\n        {\n            result ~= s;\n        }\n    }\n    sort(result);\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = sorted_list_sum;\n\n\
    \    assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]);\n    assert(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\",\
    \ \"b\", \"c\", \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5kfzjguu.d(27): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5kfzjguu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    string[] result;\n    foreach(string s; lst)\n    {\n        if(s.length\
    \ % 2 == 0)\n        {\n            result ~= s;\n        }\n    }\n    sort(result);\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = sorted_list_sum;\n\n\
    \    assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]);\n    assert(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\",\
    \ \"b\", \"c\", \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5kfzjguu.d(27): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5kfzjguu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    string[] result;\n    foreach(string s; lst)\n    {\n        if(s.length\
    \ % 2 == 0)\n        {\n            result ~= s;\n        }\n    }\n    sort(result);\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = sorted_list_sum;\n\n\
    \    assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]);\n    assert(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\",\
    \ \"b\", \"c\", \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5kfzjguu.d(27): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5kfzjguu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    string[] result = new string[0];\n    foreach(string s; lst)\n\
    \    {\n        if (s.length % 2 == 0)\n        {\n            result ~= s;\n\
    \        }\n    }\n    return result.sort;\n}\nunittest\n{\n    alias candidate\
    \ = sorted_list_sum;\n\n    assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"]);\n    assert(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\"\
    , \"asdf\", \"school\"]);\n    assert(candidate([\"d\", \"b\", \"c\", \"a\"])\
    \ == []);\n    assert(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\"\
    , \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\"\
    , \"au\"]);\n    assert(candidate([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"])\
    \ == []);\n    assert(candidate([\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\"\
    , \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa7cbfo0m.d(27): Error: no property `sort` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa7cbfo0m.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    string[] result;\n    foreach(string s; lst)\n    {\n        if(s.length\
    \ % 2 == 0)\n        {\n            result ~= s;\n        }\n    }\n    return\
    \ result.sort;\n}\nunittest\n{\n    alias candidate = sorted_list_sum;\n\n   \
    \ assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]);\n    assert(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\",\
    \ \"b\", \"c\", \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbswi6p7_.d(27): Error: no property `sort` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbswi6p7_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    string[] result;\n    foreach(string s; lst)\n    {\n        if(s.length\
    \ % 2 == 0)\n        {\n            result ~= s;\n        }\n    }\n    sort(result);\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = sorted_list_sum;\n\n\
    \    assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]);\n    assert(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\",\
    \ \"b\", \"c\", \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5kfzjguu.d(27): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5kfzjguu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    string[] result;\n    foreach(string s; lst)\n    {\n        if(s.length\
    \ % 2 == 0)\n        {\n            result ~= s;\n        }\n    }\n    sort(result);\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = sorted_list_sum;\n\n\
    \    assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]);\n    assert(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\",\
    \ \"b\", \"c\", \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5kfzjguu.d(27): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5kfzjguu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    string[] result;\n    foreach(string s; lst)\n    {\n        if(s.length\
    \ % 2 == 0)\n        {\n            result ~= s;\n        }\n    }\n    return\
    \ result.sort;\n}\nunittest\n{\n    alias candidate = sorted_list_sum;\n\n   \
    \ assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]);\n    assert(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\",\
    \ \"b\", \"c\", \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbswi6p7_.d(27): Error: no property `sort` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbswi6p7_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    string[] result = [];\n    foreach(string s; lst)\n    {\n   \
    \     if(s.length % 2 == 0)\n        {\n            result ~= s;\n        }\n\
    \    }\n    sort(result);\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = sorted_list_sum;\n\n    assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"]);\n    assert(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\"\
    , \"asdf\", \"school\"]);\n    assert(candidate([\"d\", \"b\", \"c\", \"a\"])\
    \ == []);\n    assert(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\"\
    , \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\"\
    , \"au\"]);\n    assert(candidate([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"])\
    \ == []);\n    assert(candidate([\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\"\
    , \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpc8hi2w8k.d(27): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc8hi2w8k.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    string[] result = new string[0];\n    foreach(string s; lst)\n\
    \    {\n        if(s.length % 2 == 0)\n        {\n            result ~= s;\n \
    \       }\n    }\n    return result.sort;\n}\nunittest\n{\n    alias candidate\
    \ = sorted_list_sum;\n\n    assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"]);\n    assert(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\"\
    , \"asdf\", \"school\"]);\n    assert(candidate([\"d\", \"b\", \"c\", \"a\"])\
    \ == []);\n    assert(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\"\
    , \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\"\
    , \"au\"]);\n    assert(candidate([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"])\
    \ == []);\n    assert(candidate([\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\"\
    , \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpefow89sp.d(27): Error: no property `sort` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpefow89sp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    string[] result = [];\n    foreach(string s; lst) \n    {\n  \
    \      if(s.length % 2 == 0) \n        {\n            result ~= s;\n        }\n\
    \    }\n    return result.sort;\n}\nunittest\n{\n    alias candidate = sorted_list_sum;\n\
    \n    assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]);\n    assert(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\",\
    \ \"b\", \"c\", \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplwogp6a0.d(27): Error: no property `sort` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplwogp6a0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    auto lst_len = lst.length;\n    auto lst_len_even = lst_len.even;\n\
    \    string[] lst_even;\n    string[] lst_odd;\n    string[] lst_even_sorted;\n\
    \    string[] lst_odd_sorted;\n    string[] lst_sorted;\n    if (lst_len_even)\n\
    \    {\n        lst_even = lst[0 .. lst_len / 2];\n        lst_odd = lst[lst_len\
    \ / 2 .. lst_len];\n    }\n    else\n    {\n        lst_even = lst[0 .. lst_len\
    \ / 2];\n        lst_odd = lst[lst_len / 2 + 1 .. lst_len];\n    }\n    lst_even_sorted\
    \ = lst_even.sort;\n    lst_odd_sorted = lst_odd.sort;\n    lst_sorted = lst_even_sorted\
    \ ~ lst_odd_sorted;\n    return lst_sorted;\n}\nunittest\n{\n    alias candidate\
    \ = sorted_list_sum;\n\n    assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"]);\n    assert(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\"\
    , \"asdf\", \"school\"]);\n    assert(candidate([\"d\", \"b\", \"c\", \"a\"])\
    \ == []);\n    assert(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\"\
    , \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\"\
    , \"au\"]);\n    assert(candidate([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"])\
    \ == []);\n    assert(candidate([\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\"\
    , \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpd0qz84s_.d(20): Error: no property `even` for type `ulong`

    /tmp/tmpd0qz84s_.d(36): Error: no property `sort` for type `string[]`

    /tmp/tmpd0qz84s_.d(37): Error: no property `sort` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd0qz84s_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    string[] res = new string[0];\n    foreach(string s; lst)\n  \
    \  {\n        if(s.length % 2 == 0)\n        {\n            res ~= s;\n      \
    \  }\n    }\n    res.sort;\n    return res;\n}\nunittest\n{\n    alias candidate\
    \ = sorted_list_sum;\n\n    assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"]);\n    assert(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\"\
    , \"asdf\", \"school\"]);\n    assert(candidate([\"d\", \"b\", \"c\", \"a\"])\
    \ == []);\n    assert(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\"\
    , \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\"\
    , \"au\"]);\n    assert(candidate([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"])\
    \ == []);\n    assert(candidate([\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\"\
    , \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9fy8s9m1.d(27): Error: no property `sort` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9fy8s9m1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163137
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    string[] result;\n    foreach(string s; lst)\n    {\n        if(s.length\
    \ % 2 == 0)\n        {\n            result ~= s;\n        }\n    }\n    sort(result);\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = sorted_list_sum;\n\n\
    \    assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]);\n    assert(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\",\
    \ \"b\", \"c\", \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5kfzjguu.d(27): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5kfzjguu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    string[] res;\n    foreach(string s; lst)\n    {\n        if(s.length\
    \ % 2 == 0)\n        {\n            res ~= s;\n        }\n    }\n    return res.sort;\n\
    }\nunittest\n{\n    alias candidate = sorted_list_sum;\n\n    assert(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]);\n    assert(candidate([\"school\", \"AI\"\
    , \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\",\
    \ \"b\", \"c\", \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4yo9xhc5.d(27): Error: no property `sort` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4yo9xhc5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    lst = lst.filter!(a => a.length % 2 == 0).sort!((a, b) => a.length\
    \ < b.length || (a.length == b.length && a < b));\n    return lst;\n}\nunittest\n\
    {\n    alias candidate = sorted_list_sum;\n\n    assert(candidate([\"aa\", \"\
    a\", \"aaa\"]) == [\"aa\"]);\n    assert(candidate([\"school\", \"AI\", \"asdf\"\
    , \"b\"]) == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"d\", \"\
    b\", \"c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"abcd\",\
    \ \"a\"]) == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\", \"\
    dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8ql99ytf.d(19): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8ql99ytf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    string[] result;\n    foreach(string s; lst)\n    {\n        if(s.length\
    \ % 2 == 0)\n        {\n            result ~= s;\n        }\n    }\n    sort(result);\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = sorted_list_sum;\n\n\
    \    assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]);\n    assert(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\",\
    \ \"b\", \"c\", \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5kfzjguu.d(27): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5kfzjguu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    string[] result = [];\n    foreach(string s; lst)\n    {\n   \
    \     if(s.length % 2 == 0)\n        {\n            result ~= s;\n        }\n\
    \    }\n    sort(result);\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = sorted_list_sum;\n\n    assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"]);\n    assert(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\"\
    , \"asdf\", \"school\"]);\n    assert(candidate([\"d\", \"b\", \"c\", \"a\"])\
    \ == []);\n    assert(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\"\
    , \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\"\
    , \"au\"]);\n    assert(candidate([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"])\
    \ == []);\n    assert(candidate([\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\"\
    , \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpc8hi2w8k.d(27): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc8hi2w8k.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    string[] res = new string[0];\n    foreach(string s; lst)\n  \
    \  {\n        if(s.length % 2 == 0)\n        {\n            res ~= s;\n      \
    \  }\n    }\n    res.sort;\n    return res;\n}\nunittest\n{\n    alias candidate\
    \ = sorted_list_sum;\n\n    assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"]);\n    assert(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\"\
    , \"asdf\", \"school\"]);\n    assert(candidate([\"d\", \"b\", \"c\", \"a\"])\
    \ == []);\n    assert(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\"\
    , \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\"\
    , \"au\"]);\n    assert(candidate([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"])\
    \ == []);\n    assert(candidate([\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\"\
    , \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9fy8s9m1.d(27): Error: no property `sort` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9fy8s9m1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163137
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    string[] result;\n    foreach(string s; lst)\n    {\n        if(s.length\
    \ % 2 == 0)\n        {\n            result ~= s;\n        }\n    }\n    sort(result);\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = sorted_list_sum;\n\n\
    \    assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]);\n    assert(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\",\
    \ \"b\", \"c\", \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5kfzjguu.d(27): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5kfzjguu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    lst = lst.filter!(a => a.length % 2 == 0).sort!((a, b) => a.length\
    \ < b.length || (a.length == b.length && a < b));\n    return lst;\n}\nunittest\n\
    {\n    alias candidate = sorted_list_sum;\n\n    assert(candidate([\"aa\", \"\
    a\", \"aaa\"]) == [\"aa\"]);\n    assert(candidate([\"school\", \"AI\", \"asdf\"\
    , \"b\"]) == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"d\", \"\
    b\", \"c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"abcd\",\
    \ \"a\"]) == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\", \"\
    dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8ql99ytf.d(19): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8ql99ytf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    lst = lst.filter!(a => a.length % 2 == 0).sort!((a, b) => a.length\
    \ < b.length);\n    return lst;\n}\nunittest\n{\n    alias candidate = sorted_list_sum;\n\
    \n    assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]);\n    assert(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\",\
    \ \"b\", \"c\", \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnndlwars.d(19): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnndlwars.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    string[] result;\n    foreach(i; lst)\n    {\n        if(i.length\
    \ % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    sort(result);\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = sorted_list_sum;\n\n\
    \    assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]);\n    assert(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\",\
    \ \"b\", \"c\", \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpecn5prrx.d(27): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpecn5prrx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    string[] result = [];\n    foreach(string s; lst)\n    {\n   \
    \     if(s.length % 2 == 0)\n        {\n            result ~= s;\n        }\n\
    \    }\n    result.sort;\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = sorted_list_sum;\n\n    assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"]);\n    assert(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\"\
    , \"asdf\", \"school\"]);\n    assert(candidate([\"d\", \"b\", \"c\", \"a\"])\
    \ == []);\n    assert(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\"\
    , \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\"\
    , \"au\"]);\n    assert(candidate([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"])\
    \ == []);\n    assert(candidate([\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\"\
    , \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjui935eg.d(27): Error: no property `sort` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjui935eg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163137
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    lst = lst.filter!(a => a.length % 2 == 0);\n    lst.sort;\n  \
    \  return lst;\n}\nunittest\n{\n    alias candidate = sorted_list_sum;\n\n   \
    \ assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]);\n    assert(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\",\
    \ \"b\", \"c\", \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2zv320nj.d(19): Error: no property `filter` for type `string[]`

    /tmp/tmp2zv320nj.d(20): Error: no property `sort` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2zv320nj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    string[] result = [];\n    foreach(string s; lst)\n    {\n   \
    \     if(s.length % 2 == 0)\n        {\n            result ~= s;\n        }\n\
    \    }\n    return result.sort;\n}\nunittest\n{\n    alias candidate = sorted_list_sum;\n\
    \n    assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]);\n    assert(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\",\
    \ \"b\", \"c\", \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpn9kw4o06.d(27): Error: no property `sort` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn9kw4o06.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    string[] result = [];\n    foreach(string s; lst)\n    {\n   \
    \     if(s.length % 2 == 0)\n        {\n            result ~= s;\n        }\n\
    \    }\n    sort(result);\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = sorted_list_sum;\n\n    assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"]);\n    assert(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\"\
    , \"asdf\", \"school\"]);\n    assert(candidate([\"d\", \"b\", \"c\", \"a\"])\
    \ == []);\n    assert(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\"\
    , \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\"\
    , \"au\"]);\n    assert(candidate([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"])\
    \ == []);\n    assert(candidate([\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\"\
    , \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpc8hi2w8k.d(27): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc8hi2w8k.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    string[] result = [];\n    foreach(string s; lst) \n    {\n  \
    \      if(s.length % 2 == 0) \n        {\n            result ~= s;\n        }\n\
    \    }\n    sort(result);\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = sorted_list_sum;\n\n    assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"]);\n    assert(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\"\
    , \"asdf\", \"school\"]);\n    assert(candidate([\"d\", \"b\", \"c\", \"a\"])\
    \ == []);\n    assert(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\"\
    , \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\"\
    , \"au\"]);\n    assert(candidate([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"])\
    \ == []);\n    assert(candidate([\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\"\
    , \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpys2tykt0.d(27): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpys2tykt0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    lst = lst.filter!(a => a.length % 2 == 0).sort!((a, b) => a.length\
    \ - b.length);\n    return lst;\n}\nunittest\n{\n    alias candidate = sorted_list_sum;\n\
    \n    assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]);\n    assert(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\",\
    \ \"b\", \"c\", \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpg2_f83hv.d(19): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg2_f83hv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    string[] result = [];\n    foreach(string s; lst)\n    {\n   \
    \     if(s.length % 2 == 0)\n        {\n            result ~= s;\n        }\n\
    \    }\n    return result.sort;\n}\nunittest\n{\n    alias candidate = sorted_list_sum;\n\
    \n    assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]);\n    assert(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\",\
    \ \"b\", \"c\", \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpn9kw4o06.d(27): Error: no property `sort` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn9kw4o06.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    auto lst2 = lst.dup;\n    lst2.removeIf!(a => a.length % 2 ==\
    \ 1);\n    lst2.sort!((a, b) => a.length < b.length || (a.length == b.length &&\
    \ a < b));\n    return lst2;\n}\nunittest\n{\n    alias candidate = sorted_list_sum;\n\
    \n    assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]);\n    assert(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\",\
    \ \"b\", \"c\", \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpk6asptym.d(20): Error: no property `removeIf` for type `string[]`

    /tmp/tmpk6asptym.d(21): Error: no property `sort` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk6asptym.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163137
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    string[] result = new string[0];\n    foreach(string s; lst)\n\
    \    {\n        if(s.length % 2 == 0)\n        {\n            result ~= s;\n \
    \       }\n    }\n    return result.sort;\n}\nunittest\n{\n    alias candidate\
    \ = sorted_list_sum;\n\n    assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"]);\n    assert(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\"\
    , \"asdf\", \"school\"]);\n    assert(candidate([\"d\", \"b\", \"c\", \"a\"])\
    \ == []);\n    assert(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\"\
    , \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\"\
    , \"au\"]);\n    assert(candidate([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"])\
    \ == []);\n    assert(candidate([\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\"\
    , \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpefow89sp.d(27): Error: no property `sort` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpefow89sp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    string[] result = new string[0];\n    foreach(string s; lst)\n\
    \    {\n        if(s.length % 2 == 0)\n        {\n            result ~= s;\n \
    \       }\n    }\n    return result.sort;\n}\nunittest\n{\n    alias candidate\
    \ = sorted_list_sum;\n\n    assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"]);\n    assert(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\"\
    , \"asdf\", \"school\"]);\n    assert(candidate([\"d\", \"b\", \"c\", \"a\"])\
    \ == []);\n    assert(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\"\
    , \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\"\
    , \"au\"]);\n    assert(candidate([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"])\
    \ == []);\n    assert(candidate([\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\"\
    , \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpefow89sp.d(27): Error: no property `sort` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpefow89sp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    string[] result = [];\n    foreach(string s; lst)\n    {\n   \
    \     if(s.length % 2 == 0)\n        {\n            result ~= s;\n        }\n\
    \    }\n    return result.sort;\n}\nunittest\n{\n    alias candidate = sorted_list_sum;\n\
    \n    assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]);\n    assert(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\",\
    \ \"b\", \"c\", \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpn9kw4o06.d(27): Error: no property `sort` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn9kw4o06.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    string[] result = [];\n    foreach(string s; lst)\n    {\n   \
    \     if(s.length % 2 == 0)\n        {\n            result ~= s;\n        }\n\
    \    }\n    return result.sort;\n}\nunittest\n{\n    alias candidate = sorted_list_sum;\n\
    \n    assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]);\n    assert(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\",\
    \ \"b\", \"c\", \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpn9kw4o06.d(27): Error: no property `sort` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn9kw4o06.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    string[] result = new string[0];\n    foreach(string s; lst)\n\
    \    {\n        if(s.length % 2 == 0)\n        {\n            result ~= s;\n \
    \       }\n    }\n    return result.sort;\n}\nunittest\n{\n    alias candidate\
    \ = sorted_list_sum;\n\n    assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"]);\n    assert(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\"\
    , \"asdf\", \"school\"]);\n    assert(candidate([\"d\", \"b\", \"c\", \"a\"])\
    \ == []);\n    assert(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\"\
    , \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\"\
    , \"au\"]);\n    assert(candidate([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"])\
    \ == []);\n    assert(candidate([\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\"\
    , \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpefow89sp.d(27): Error: no property `sort` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpefow89sp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    lst = lst.filter!(a => a.length % 2 == 0).sort!((a, b) => a.length\
    \ < b.length || (a.length == b.length && a < b));\n    return lst;\n}\nunittest\n\
    {\n    alias candidate = sorted_list_sum;\n\n    assert(candidate([\"aa\", \"\
    a\", \"aaa\"]) == [\"aa\"]);\n    assert(candidate([\"school\", \"AI\", \"asdf\"\
    , \"b\"]) == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"d\", \"\
    b\", \"c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"abcd\",\
    \ \"a\"]) == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\", \"\
    dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8ql99ytf.d(19): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8ql99ytf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    string[] res = new string[0];\n    foreach(string s; lst)\n  \
    \  {\n        if(s.length % 2 == 0)\n        {\n            res ~= s;\n      \
    \  }\n    }\n    res.sort;\n    return res;\n}\nunittest\n{\n    alias candidate\
    \ = sorted_list_sum;\n\n    assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"]);\n    assert(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\"\
    , \"asdf\", \"school\"]);\n    assert(candidate([\"d\", \"b\", \"c\", \"a\"])\
    \ == []);\n    assert(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\"\
    , \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\"\
    , \"au\"]);\n    assert(candidate([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"])\
    \ == []);\n    assert(candidate([\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\"\
    , \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9fy8s9m1.d(27): Error: no property `sort` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9fy8s9m1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163137
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    string[] result = [];\n    foreach(string s; lst)\n    {\n   \
    \     if(s.length % 2 == 0)\n        {\n            result ~= s;\n        }\n\
    \    }\n    return result.sort;\n}\nunittest\n{\n    alias candidate = sorted_list_sum;\n\
    \n    assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]);\n    assert(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\",\
    \ \"b\", \"c\", \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpn9kw4o06.d(27): Error: no property `sort` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn9kw4o06.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    string[] result;\n    foreach(string s; lst)\n    {\n        if(s.length\
    \ % 2 == 0)\n        {\n            result ~= s;\n        }\n    }\n    sort(result);\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = sorted_list_sum;\n\n\
    \    assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]);\n    assert(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\",\
    \ \"b\", \"c\", \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5kfzjguu.d(27): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5kfzjguu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    string[] result = [];\n    foreach(string s; lst) \n    {\n  \
    \      if(s.length % 2 == 0) \n        {\n            result ~= s;\n        }\n\
    \    }\n    return result.sort();\n}\nunittest\n{\n    alias candidate = sorted_list_sum;\n\
    \n    assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]);\n    assert(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\",\
    \ \"b\", \"c\", \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp67mfx26_.d(27): Error: no property `sort` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp67mfx26_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163137
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    string[] result = [];\n    foreach(string s; lst)\n    {\n   \
    \     if(s.length % 2 == 0)\n        {\n            result ~= s;\n        }\n\
    \    }\n    return result.sort;\n}\nunittest\n{\n    alias candidate = sorted_list_sum;\n\
    \n    assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]);\n    assert(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\",\
    \ \"b\", \"c\", \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpn9kw4o06.d(27): Error: no property `sort` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn9kw4o06.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    string[] result;\n    foreach(string s; lst)\n    {\n        if(s.length\
    \ % 2 == 0)\n        {\n            result ~= s;\n        }\n    }\n    return\
    \ result.sort;\n}\nunittest\n{\n    alias candidate = sorted_list_sum;\n\n   \
    \ assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]);\n    assert(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\",\
    \ \"b\", \"c\", \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbswi6p7_.d(27): Error: no property `sort` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbswi6p7_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    string[] result;\n    foreach(string s; lst)\n    {\n        if(s.length\
    \ % 2 == 0)\n        {\n            result ~= s;\n        }\n    }\n    return\
    \ result.sort();\n}\nunittest\n{\n    alias candidate = sorted_list_sum;\n\n \
    \   assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]);\n    assert(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\",\
    \ \"b\", \"c\", \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpukf6tzog.d(27): Error: no property `sort` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpukf6tzog.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    string[] result;\n    foreach(i; lst)\n    {\n        if(i.length\
    \ % 2 == 0)\n        {\n            result ~= i;\n        }\n    }\n    return\
    \ result.sort;\n}\nunittest\n{\n    alias candidate = sorted_list_sum;\n\n   \
    \ assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]);\n    assert(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\",\
    \ \"b\", \"c\", \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjsminonj.d(27): Error: no property `sort` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjsminonj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163137
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    string[] result = [];\n    foreach(string s; lst)\n    {\n   \
    \     if(s.length % 2 == 0)\n        {\n            result ~= s;\n        }\n\
    \    }\n    return result.sort();\n}\nunittest\n{\n    alias candidate = sorted_list_sum;\n\
    \n    assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]);\n    assert(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\",\
    \ \"b\", \"c\", \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_hs22yxl.d(27): Error: no property `sort` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_hs22yxl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    string[] result;\n    foreach(string s; lst)\n    {\n        if(s.length\
    \ % 2 == 0)\n        {\n            result ~= s;\n        }\n    }\n    sort(result);\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = sorted_list_sum;\n\n\
    \    assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]);\n    assert(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\",\
    \ \"b\", \"c\", \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5kfzjguu.d(27): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5kfzjguu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    string[] result = [];\n    foreach(string s; lst)\n    {\n   \
    \     if(s.length % 2 == 0)\n        {\n            result ~= s;\n        }\n\
    \    }\n    sort(result);\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = sorted_list_sum;\n\n    assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"]);\n    assert(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\"\
    , \"asdf\", \"school\"]);\n    assert(candidate([\"d\", \"b\", \"c\", \"a\"])\
    \ == []);\n    assert(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\"\
    , \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\"\
    , \"au\"]);\n    assert(candidate([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"])\
    \ == []);\n    assert(candidate([\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\"\
    , \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpc8hi2w8k.d(27): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc8hi2w8k.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    string[] res = [];\n    foreach(string s; lst)\n    {\n      \
    \  if(s.length % 2 == 0)\n        {\n            res ~= s;\n        }\n    }\n\
    \    res.sort;\n    return res;\n}\nunittest\n{\n    alias candidate = sorted_list_sum;\n\
    \n    assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]);\n    assert(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\",\
    \ \"b\", \"c\", \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpt1wyxsc3.d(27): Error: no property `sort` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt1wyxsc3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163137
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    lst = lst.filter!(a => a.length % 2 == 0).sort!((a, b) => a.length\
    \ - b.length);\n    return lst;\n}\nunittest\n{\n    alias candidate = sorted_list_sum;\n\
    \n    assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]);\n    assert(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\",\
    \ \"b\", \"c\", \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpg2_f83hv.d(19): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg2_f83hv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    string[] result = [];\n    foreach(string s; lst)\n    {\n   \
    \     if (s.length % 2 == 0)\n        {\n            result ~= s;\n        }\n\
    \    }\n    return result.sort;\n}\nunittest\n{\n    alias candidate = sorted_list_sum;\n\
    \n    assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]);\n    assert(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\",\
    \ \"b\", \"c\", \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6d34b4f_.d(27): Error: no property `sort` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6d34b4f_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163137
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    int[] lengths = new int[lst.length];\n    int[] indexes = new\
    \ int[lst.length];\n    int[] indexes_sorted = new int[lst.length];\n    string[]\
    \ result = new string[lst.length];\n    int j = 0;\n    foreach(i, item; lst)\n\
    \    {\n        lengths[i] = item.length;\n        indexes[i] = i;\n    }\n  \
    \  indexes_sorted = sort(indexes, (a, b) => lengths[a] < lengths[b]);\n    foreach(i,\
    \ item; indexes_sorted)\n    {\n        if(lengths[item] % 2 == 0)\n        {\n\
    \            result[j] = lst[item];\n            j++;\n        }\n    }\n    return\
    \ result[0..j];\n}\nunittest\n{\n    alias candidate = sorted_list_sum;\n\n  \
    \  assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]);\n    assert(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\",\
    \ \"b\", \"c\", \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqfy0juvq.d(26): Error: cannot implicitly convert expression `item.length`
    of type `ulong` to `int`

    /tmp/tmpqfy0juvq.d(27): Error: cannot implicitly convert expression `i` of type
    `ulong` to `int`

    /tmp/tmpqfy0juvq.d(29): Error: undefined identifier `sort`, did you mean function
    `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqfy0juvq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163137
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    string[] res;\n    foreach(string s; lst)\n    {\n        if(s.length\
    \ % 2 == 0)\n        {\n            res ~= s;\n        }\n    }\n    return res.sort;\n\
    }\nunittest\n{\n    alias candidate = sorted_list_sum;\n\n    assert(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]);\n    assert(candidate([\"school\", \"AI\"\
    , \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\",\
    \ \"b\", \"c\", \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4yo9xhc5.d(27): Error: no property `sort` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4yo9xhc5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    string[] result = [];\n    foreach(string s; lst)\n    {\n   \
    \     if(s.length % 2 == 0)\n        {\n            result ~= s;\n        }\n\
    \    }\n    return result.sort();\n}\nunittest\n{\n    alias candidate = sorted_list_sum;\n\
    \n    assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]);\n    assert(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\",\
    \ \"b\", \"c\", \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_hs22yxl.d(27): Error: no property `sort` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_hs22yxl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    string[] res = lst.dup;\n    res.removeIf!(a => a.length % 2 !=\
    \ 0);\n    res.sort!((a, b) => a.length < b.length);\n    return res;\n}\nunittest\n\
    {\n    alias candidate = sorted_list_sum;\n\n    assert(candidate([\"aa\", \"\
    a\", \"aaa\"]) == [\"aa\"]);\n    assert(candidate([\"school\", \"AI\", \"asdf\"\
    , \"b\"]) == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"d\", \"\
    b\", \"c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"abcd\",\
    \ \"a\"]) == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\", \"\
    dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdh7jnyw9.d(20): Error: no property `removeIf` for type `string[]`

    /tmp/tmpdh7jnyw9.d(21): Error: no property `sort` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdh7jnyw9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163137
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    string[] res;\n    foreach(i; lst)\n    {\n        if(i.length\
    \ % 2 == 0)\n        {\n            res ~= i;\n        }\n    }\n    res.sort;\n\
    \    return res;\n}\nunittest\n{\n    alias candidate = sorted_list_sum;\n\n \
    \   assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]);\n    assert(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\",\
    \ \"b\", \"c\", \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp67_xslws.d(27): Error: no property `sort` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp67_xslws.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163137
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    string[] result = new string[0];\n    foreach(string s; lst)\n\
    \    {\n        if(s.length % 2 == 0)\n        {\n            result ~= s;\n \
    \       }\n    }\n    sort(result);\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = sorted_list_sum;\n\n    assert(candidate([\"aa\", \"a\", \"aaa\"\
    ]) == [\"aa\"]);\n    assert(candidate([\"school\", \"AI\", \"asdf\", \"b\"])\
    \ == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"d\", \"b\", \"\
    c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"abcd\", \"a\"])\
    \ == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\", \"au\"]) ==\
    \ [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\", \"b\", \"c\"\
    , \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\", \"dd\", \"\
    cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjddyp5j1.d(27): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjddyp5j1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    lst = lst.filter!(a => a.length % 2 == 0).sort!((a, b) => a.length\
    \ - b.length);\n    return lst;\n}\nunittest\n{\n    alias candidate = sorted_list_sum;\n\
    \n    assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]);\n    assert(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\",\
    \ \"b\", \"c\", \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpg2_f83hv.d(19): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg2_f83hv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    string[] result;\n    foreach(string s; lst)\n    {\n        if(s.length\
    \ % 2 == 0)\n        {\n            result ~= s;\n        }\n    }\n    sort(result);\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = sorted_list_sum;\n\n\
    \    assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]);\n    assert(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\",\
    \ \"b\", \"c\", \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5kfzjguu.d(27): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5kfzjguu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    string[] result = [];\n    foreach(string s; lst)\n    {\n   \
    \     if(s.length % 2 == 0)\n        {\n            result ~= s;\n        }\n\
    \    }\n    return result.sort;\n}\nunittest\n{\n    alias candidate = sorted_list_sum;\n\
    \n    assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]);\n    assert(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\",\
    \ \"b\", \"c\", \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpn9kw4o06.d(27): Error: no property `sort` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn9kw4o06.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    string[] new_lst;\n    foreach(string i; lst)\n    {\n       \
    \ if(i.length % 2 == 0)\n        {\n            new_lst ~= i;\n        }\n   \
    \ }\n    new_lst.sort;\n    return new_lst;\n}\nunittest\n{\n    alias candidate\
    \ = sorted_list_sum;\n\n    assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"]);\n    assert(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\"\
    , \"asdf\", \"school\"]);\n    assert(candidate([\"d\", \"b\", \"c\", \"a\"])\
    \ == []);\n    assert(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\"\
    , \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\"\
    , \"au\"]);\n    assert(candidate([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"])\
    \ == []);\n    assert(candidate([\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\"\
    , \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfasnuk7a.d(27): Error: no property `sort` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfasnuk7a.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163137
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    string[] result = [];\n    foreach(string s; lst)\n    {\n   \
    \     if(s.length % 2 == 0)\n        {\n            result ~= s;\n        }\n\
    \    }\n    return result.sort();\n}\nunittest\n{\n    alias candidate = sorted_list_sum;\n\
    \n    assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]);\n    assert(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\",\
    \ \"b\", \"c\", \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_hs22yxl.d(27): Error: no property `sort` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_hs22yxl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    string[] ret;\n    foreach(string s; lst)\n    {\n        if(s.length\
    \ % 2 == 0)\n        {\n            ret ~= s;\n        }\n    }\n    ret.sort;\n\
    \    return ret;\n}\nunittest\n{\n    alias candidate = sorted_list_sum;\n\n \
    \   assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]);\n    assert(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\",\
    \ \"b\", \"c\", \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0k51m4qa.d(27): Error: no property `sort` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0k51m4qa.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163137
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    string[] result;\n    foreach(string s; lst)\n    {\n        if(s.length\
    \ % 2 == 0)\n        {\n            result ~= s;\n        }\n    }\n    return\
    \ result.sort;\n}\nunittest\n{\n    alias candidate = sorted_list_sum;\n\n   \
    \ assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]);\n    assert(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\",\
    \ \"b\", \"c\", \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbswi6p7_.d(27): Error: no property `sort` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbswi6p7_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    string[] result = [];\n    foreach(string s; lst) \n    {\n  \
    \      if(s.length % 2 == 0) \n        {\n            result ~= s;\n        }\n\
    \    }\n    sort(result);\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = sorted_list_sum;\n\n    assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"]);\n    assert(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\"\
    , \"asdf\", \"school\"]);\n    assert(candidate([\"d\", \"b\", \"c\", \"a\"])\
    \ == []);\n    assert(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\"\
    , \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\"\
    , \"au\"]);\n    assert(candidate([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"])\
    \ == []);\n    assert(candidate([\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\"\
    , \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpys2tykt0.d(27): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpys2tykt0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    string[] result = new string[0];\n    foreach(string s; lst)\n\
    \    {\n        if(s.length % 2 == 0)\n        {\n            result ~= s;\n \
    \       }\n    }\n    sort(result);\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = sorted_list_sum;\n\n    assert(candidate([\"aa\", \"a\", \"aaa\"\
    ]) == [\"aa\"]);\n    assert(candidate([\"school\", \"AI\", \"asdf\", \"b\"])\
    \ == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"d\", \"b\", \"\
    c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"abcd\", \"a\"])\
    \ == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\", \"au\"]) ==\
    \ [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\", \"b\", \"c\"\
    , \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\", \"dd\", \"\
    cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjddyp5j1.d(27): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjddyp5j1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    string[] result = [];\n    foreach(string s; lst)\n    {\n   \
    \     if(s.length % 2 == 0)\n        {\n            result ~= s;\n        }\n\
    \    }\n    return result.sort();\n}\nunittest\n{\n    alias candidate = sorted_list_sum;\n\
    \n    assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]);\n    assert(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\",\
    \ \"b\", \"c\", \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_hs22yxl.d(27): Error: no property `sort` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_hs22yxl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    string[] result = new string[0];\n    foreach(string i; lst)\n\
    \    {\n        if(i.length % 2 == 0)\n        {\n            result ~= i;\n \
    \       }\n    }\n    return result.sort;\n}\nunittest\n{\n    alias candidate\
    \ = sorted_list_sum;\n\n    assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"]);\n    assert(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\"\
    , \"asdf\", \"school\"]);\n    assert(candidate([\"d\", \"b\", \"c\", \"a\"])\
    \ == []);\n    assert(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\"\
    , \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\"\
    , \"au\"]);\n    assert(candidate([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"])\
    \ == []);\n    assert(candidate([\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\"\
    , \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxlj0g53f.d(27): Error: no property `sort` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxlj0g53f.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163137
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    string[] result = [];\n    foreach(string s; lst)\n    {\n   \
    \     if(s.length % 2 == 0)\n        {\n            result ~= s;\n        }\n\
    \    }\n    return result.sort();\n}\nunittest\n{\n    alias candidate = sorted_list_sum;\n\
    \n    assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]);\n    assert(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\",\
    \ \"b\", \"c\", \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_hs22yxl.d(27): Error: no property `sort` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_hs22yxl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    string[] result;\n    foreach(string s; lst)\n    {\n        if(s.length\
    \ % 2 == 0)\n        {\n            result ~= s;\n        }\n    }\n    return\
    \ result.sort;\n}\nunittest\n{\n    alias candidate = sorted_list_sum;\n\n   \
    \ assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]);\n    assert(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\",\
    \ \"b\", \"c\", \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbswi6p7_.d(27): Error: no property `sort` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbswi6p7_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    string[] result = [];\n    foreach(string s; lst)\n    {\n   \
    \     if(s.length % 2 == 0)\n        {\n            result ~= s;\n        }\n\
    \    }\n    return result.sort();\n}\nunittest\n{\n    alias candidate = sorted_list_sum;\n\
    \n    assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]);\n    assert(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\",\
    \ \"b\", \"c\", \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_hs22yxl.d(27): Error: no property `sort` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_hs22yxl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    string[] result = new string[0];\n    foreach(string s; lst)\n\
    \    {\n        if(s.length % 2 == 0)\n        {\n            result ~= s;\n \
    \       }\n    }\n    sort(result);\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = sorted_list_sum;\n\n    assert(candidate([\"aa\", \"a\", \"aaa\"\
    ]) == [\"aa\"]);\n    assert(candidate([\"school\", \"AI\", \"asdf\", \"b\"])\
    \ == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"d\", \"b\", \"\
    c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"abcd\", \"a\"])\
    \ == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\", \"au\"]) ==\
    \ [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\", \"b\", \"c\"\
    , \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\", \"dd\", \"\
    cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjddyp5j1.d(27): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjddyp5j1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    auto ret = new string[];\n    foreach(i; lst)\n    {\n       \
    \ if(i.length % 2 == 0)\n        {\n            ret ~= i;\n        }\n    }\n\
    \    ret.sort;\n    return ret;\n}\nunittest\n{\n    alias candidate = sorted_list_sum;\n\
    \n    assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]);\n    assert(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\",\
    \ \"b\", \"c\", \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptuq8snsb.d(19): Error: new can only create structs, dynamic arrays
    or class objects, not `string[]`''s

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptuq8snsb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163137
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    lst = lst.filter!(a => a.length % 2 == 0).sort!((a, b) => a.length\
    \ < b.length).sort!((a, b) => a < b);\n    return lst;\n}\nunittest\n{\n    alias\
    \ candidate = sorted_list_sum;\n\n    assert(candidate([\"aa\", \"a\", \"aaa\"\
    ]) == [\"aa\"]);\n    assert(candidate([\"school\", \"AI\", \"asdf\", \"b\"])\
    \ == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"d\", \"b\", \"\
    c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"abcd\", \"a\"])\
    \ == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\", \"au\"]) ==\
    \ [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\", \"b\", \"c\"\
    , \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\", \"dd\", \"\
    cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4r8935ok.d(19): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4r8935ok.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163137
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    string[] result;\n    foreach(string s; lst)\n    {\n        if(s.length\
    \ % 2 == 0)\n        {\n            result ~= s;\n        }\n    }\n    return\
    \ result.sort;\n}\nunittest\n{\n    alias candidate = sorted_list_sum;\n\n   \
    \ assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]);\n    assert(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\",\
    \ \"b\", \"c\", \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbswi6p7_.d(27): Error: no property `sort` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbswi6p7_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    string[] res;\n    foreach(i; lst) \n    {\n        if(i.length\
    \ % 2 == 0) \n        {\n            res ~= i;\n        }\n    }\n    return res.sort();\n\
    }\nunittest\n{\n    alias candidate = sorted_list_sum;\n\n    assert(candidate([\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"]);\n    assert(candidate([\"school\", \"AI\"\
    , \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\",\
    \ \"b\", \"c\", \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5muvocj0.d(27): Error: no property `sort` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5muvocj0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163137
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    string[] result = [];\n    foreach(string s; lst)\n    {\n   \
    \     if(s.length % 2 == 0)\n        {\n            result ~= s;\n        }\n\
    \    }\n    return result.sort;\n}\nunittest\n{\n    alias candidate = sorted_list_sum;\n\
    \n    assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]);\n    assert(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\",\
    \ \"b\", \"c\", \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpn9kw4o06.d(27): Error: no property `sort` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn9kw4o06.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    string[] res;\n    foreach(string s; lst)\n    {\n        if(s.length\
    \ % 2 == 0)\n        {\n            res ~= s;\n        }\n    }\n    res.sort;\n\
    \    return res;\n}\nunittest\n{\n    alias candidate = sorted_list_sum;\n\n \
    \   assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]);\n    assert(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\",\
    \ \"b\", \"c\", \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpuyich2k5.d(27): Error: no property `sort` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuyich2k5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    int[] lengths = lst.map!(a => a.length);\n    int[] lengths_sorted\
    \ = lengths.dup.sort;\n    int[] lengths_sorted_unique = lengths_sorted.dup.uniq;\n\
    \    string[] lst_sorted = new string[];\n    foreach(int i; 0..lengths_sorted_unique.length)\n\
    \    {\n        foreach(string j; lst)\n        {\n            if(j.length ==\
    \ lengths_sorted_unique[i])\n            {\n                lst_sorted ~= j;\n\
    \            }\n        }\n    }\n    return lst_sorted;\n}\nunittest\n{\n   \
    \ alias candidate = sorted_list_sum;\n\n    assert(candidate([\"aa\", \"a\", \"\
    aaa\"]) == [\"aa\"]);\n    assert(candidate([\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"d\", \"b\"\
    , \"c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"abcd\", \"\
    a\"]) == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\", \"au\"\
    ]) == [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\", \"b\", \"\
    c\", \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0vcszn94.d(19): Error: no property `map` for type `string[]`

    /tmp/tmp0vcszn94.d(20): Error: no property `sort` for type `int[]`

    /tmp/tmp0vcszn94.d(21): Error: no property `uniq` for type `int[]`

    /tmp/tmp0vcszn94.d(22): Error: new can only create structs, dynamic arrays or
    class objects, not `string[]`''s

    /tmp/tmp0vcszn94.d(23): Error: cannot implicitly convert expression `lengths_sorted_unique.length`
    of type `ulong` to `int`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0vcszn94.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163137
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    // write your code here\n    string[] result;\n    foreach(i;\
    \ lst)\n    {\n        if(i.length % 2 == 0)\n        {\n            result ~=\
    \ i;\n        }\n    }\n    sort(result);\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = sorted_list_sum;\n\n    assert(candidate([\"aa\", \"a\"\
    , \"aaa\"]) == [\"aa\"]);\n    assert(candidate([\"school\", \"AI\", \"asdf\"\
    , \"b\"]) == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"d\", \"\
    b\", \"c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"abcd\",\
    \ \"a\"]) == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\", \"\
    dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4t69v2bc.d(28): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4t69v2bc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163137
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    string[] result;\n    foreach(string s; lst)\n    {\n        if(s.length\
    \ % 2 == 0)\n        {\n            result ~= s;\n        }\n    }\n    return\
    \ result.sort;\n}\nunittest\n{\n    alias candidate = sorted_list_sum;\n\n   \
    \ assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]);\n    assert(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\",\
    \ \"b\", \"c\", \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbswi6p7_.d(27): Error: no property `sort` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbswi6p7_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    string[] result = [];\n    foreach(string s; lst)\n    {\n   \
    \     if(s.length % 2 == 0)\n        {\n            result ~= s;\n        }\n\
    \    }\n    return result.sort();\n}\nunittest\n{\n    alias candidate = sorted_list_sum;\n\
    \n    assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]);\n    assert(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\",\
    \ \"b\", \"c\", \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_hs22yxl.d(27): Error: no property `sort` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_hs22yxl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    auto lst_new = lst.dup;\n    lst_new.removeIf!(a => a.length %\
    \ 2 == 1);\n    lst_new.sort;\n    return lst_new;\n}\nunittest\n{\n    alias\
    \ candidate = sorted_list_sum;\n\n    assert(candidate([\"aa\", \"a\", \"aaa\"\
    ]) == [\"aa\"]);\n    assert(candidate([\"school\", \"AI\", \"asdf\", \"b\"])\
    \ == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"d\", \"b\", \"\
    c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"abcd\", \"a\"])\
    \ == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\", \"au\"]) ==\
    \ [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\", \"b\", \"c\"\
    , \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\", \"dd\", \"\
    cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0tu901u_.d(20): Error: no property `removeIf` for type `string[]`

    /tmp/tmp0tu901u_.d(21): Error: no property `sort` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0tu901u_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163137
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    lst = lst.filter!(a => a.length % 2 == 0);\n    lst.sort!((a,\
    \ b) => a.length - b.length);\n    return lst;\n}\nunittest\n{\n    alias candidate\
    \ = sorted_list_sum;\n\n    assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"]);\n    assert(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\"\
    , \"asdf\", \"school\"]);\n    assert(candidate([\"d\", \"b\", \"c\", \"a\"])\
    \ == []);\n    assert(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\"\
    , \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\"\
    , \"au\"]);\n    assert(candidate([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"])\
    \ == []);\n    assert(candidate([\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\"\
    , \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0fu29vc_.d(19): Error: no property `filter` for type `string[]`

    /tmp/tmp0fu29vc_.d(20): Error: no property `sort` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0fu29vc_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163137
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    string[] result = new string[0];\n    foreach(string s; lst)\n\
    \    {\n        if(s.length % 2 == 0)\n        {\n            result ~= s;\n \
    \       }\n    }\n    sort(result);\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = sorted_list_sum;\n\n    assert(candidate([\"aa\", \"a\", \"aaa\"\
    ]) == [\"aa\"]);\n    assert(candidate([\"school\", \"AI\", \"asdf\", \"b\"])\
    \ == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"d\", \"b\", \"\
    c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"abcd\", \"a\"])\
    \ == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\", \"au\"]) ==\
    \ [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\", \"b\", \"c\"\
    , \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\", \"dd\", \"\
    cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjddyp5j1.d(27): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjddyp5j1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    string[] result;\n    foreach(string s; lst) \n    {\n       \
    \ if(s.length % 2 == 0) \n        {\n            result ~= s;\n        }\n   \
    \ }\n    return result.sort;\n}\nunittest\n{\n    alias candidate = sorted_list_sum;\n\
    \n    assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]);\n    assert(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\",\
    \ \"b\", \"c\", \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp97tkf2c6.d(27): Error: no property `sort` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp97tkf2c6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    string[] res;\n    foreach(string str; lst)\n    {\n        if(str.length\
    \ % 2 == 0)\n        {\n            res ~= str;\n        }\n    }\n    res.sort;\n\
    \    return res;\n}\nunittest\n{\n    alias candidate = sorted_list_sum;\n\n \
    \   assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]);\n    assert(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\",\
    \ \"b\", \"c\", \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgimtao81.d(27): Error: no property `sort` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgimtao81.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163137
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    string[] result = [];\n    foreach(string s; lst)\n    {\n   \
    \     if(s.length % 2 == 0)\n        {\n            result ~= s;\n        }\n\
    \    }\n    sort(result);\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = sorted_list_sum;\n\n    assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"\
    aa\"]);\n    assert(candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\"\
    , \"asdf\", \"school\"]);\n    assert(candidate([\"d\", \"b\", \"c\", \"a\"])\
    \ == []);\n    assert(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\"\
    , \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\"\
    , \"au\"]);\n    assert(candidate([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"])\
    \ == []);\n    assert(candidate([\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\"\
    , \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpc8hi2w8k.d(27): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc8hi2w8k.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    string[] result;\n    foreach(string s; lst)\n    {\n        if(s.length\
    \ % 2 == 0)\n        {\n            result ~= s;\n        }\n    }\n    sort(result);\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = sorted_list_sum;\n\n\
    \    assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]);\n    assert(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\",\
    \ \"b\", \"c\", \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5kfzjguu.d(27): Error: undefined identifier `sort`, did you mean
    function `sqrt`?

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5kfzjguu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    auto lst_length = lst.length;\n    string[] result;\n    foreach(i;\
    \ 0 .. lst_length)\n    {\n        if(lst[i].length % 2 == 0)\n        {\n   \
    \         result ~= lst[i];\n        }\n    }\n    return result.sort;\n}\nunittest\n\
    {\n    alias candidate = sorted_list_sum;\n\n    assert(candidate([\"aa\", \"\
    a\", \"aaa\"]) == [\"aa\"]);\n    assert(candidate([\"school\", \"AI\", \"asdf\"\
    , \"b\"]) == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"d\", \"\
    b\", \"c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"abcd\",\
    \ \"a\"]) == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\", \"\
    au\"]) == [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\", \"\
    dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3xfkv2tj.d(28): Error: no property `sort` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3xfkv2tj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163137
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    string[] result;\n    foreach(string s; lst)\n    {\n        if(s.length\
    \ % 2 == 0)\n        {\n            result ~= s;\n        }\n    }\n    return\
    \ result.sort;\n}\nunittest\n{\n    alias candidate = sorted_list_sum;\n\n   \
    \ assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]);\n    assert(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\",\
    \ \"b\", \"c\", \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbswi6p7_.d(27): Error: no property `sort` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbswi6p7_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    lst = lst.filter!(a => a.length % 2 == 0).sort!((a, b) => a.length\
    \ - b.length);\n    return lst;\n}\nunittest\n{\n    alias candidate = sorted_list_sum;\n\
    \n    assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]);\n    assert(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\",\
    \ \"b\", \"c\", \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpg2_f83hv.d(19): Error: no property `filter` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg2_f83hv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    string[] result;\n    foreach(string s; lst)\n    {\n        if(s.length\
    \ % 2 == 0)\n        {\n            result ~= s;\n        }\n    }\n    return\
    \ result.sort;\n}\nunittest\n{\n    alias candidate = sorted_list_sum;\n\n   \
    \ assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]);\n    assert(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\",\
    \ \"b\", \"c\", \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbswi6p7_.d(27): Error: no property `sort` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbswi6p7_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    string[] result;\n    foreach(string s; lst)\n    {\n        if(s.length\
    \ % 2 == 0)\n        {\n            result ~= s;\n        }\n    }\n    return\
    \ result.sort;\n}\nunittest\n{\n    alias candidate = sorted_list_sum;\n\n   \
    \ assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]);\n    assert(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\",\
    \ \"b\", \"c\", \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbswi6p7_.d(27): Error: no property `sort` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbswi6p7_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    string[] result = [];\n    foreach(string s; lst)\n    {\n   \
    \     if(s.length % 2 == 0)\n        {\n            result ~= s;\n        }\n\
    \    }\n    return result.sort;\n}\nunittest\n{\n    alias candidate = sorted_list_sum;\n\
    \n    assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]);\n    assert(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\",\
    \ \"b\", \"c\", \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpn9kw4o06.d(27): Error: no property `sort` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn9kw4o06.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\nWrite a function that accepts\
    \ a list of strings as a parameter,\n    deletes the strings that have odd lengths\
    \ from it,\n    and returns the resulted list with a sorted order,\n    The list\
    \ is always a list of strings and never an array of numbers,\n    and it may contain\
    \ duplicates.\n    The order of the list should be ascending by length of each\
    \ word, and you\n    should return the list sorted by that rule.\n    If two words\
    \ have the same length, sort the list alphabetically.\n    The function should\
    \ return a list of strings in sorted order.\n    You may assume that all words\
    \ will have the same length.\n    For example:\n            \n*/\nstring[] sorted_list_sum(string[]\
    \ lst) \n{\n    string[] result;\n    foreach(string s; lst)\n    {\n        if(s.length\
    \ % 2 == 0)\n        {\n            result ~= s;\n        }\n    }\n    return\
    \ result.sort;\n}\nunittest\n{\n    alias candidate = sorted_list_sum;\n\n   \
    \ assert(candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]);\n    assert(candidate([\"\
    school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]);\n    assert(candidate([\"\
    d\", \"b\", \"c\", \"a\"]) == []);\n    assert(candidate([\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"]);\n    assert(candidate([\"AI\", \"ai\"\
    , \"au\"]) == [\"AI\", \"ai\", \"au\"]);\n    assert(candidate([\"a\", \"b\",\
    \ \"b\", \"c\", \"c\", \"a\"]) == []);\n    assert(candidate([\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpbswi6p7_.d(27): Error: no property `sort` for type `string[]`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbswi6p7_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163136
