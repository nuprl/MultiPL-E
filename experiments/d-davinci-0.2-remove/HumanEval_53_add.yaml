name: HumanEval_53_add
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\nAdd two numbers x and y\n   \
  \         \n*/\nlong add(long x, long y) \n"
tests: "unittest\n{\n    alias candidate = add;\n\n    assert(candidate(0L, 1L) ==\
  \ 1L);\n    assert(candidate(1L, 0L) == 1L);\n    assert(candidate(2L, 3L) == 5L);\n\
  \    assert(candidate(5L, 7L) == 12L);\n    assert(candidate(7L, 5L) == 12L);\n\
  }\nvoid main(){}"
completions: ["{\n    long carry;\n    while (y != 0) \n    {\n        carry = x &\
    \ y;\n        x = x ^ y;\n        y = carry << 1;\n    }\n    return x;\n}", "{\
    \ \n    // Iterate till there is no carry  \n    while (y != 0) \n    { \n   \
    \     // carry now contains common set bits of x and y \n        long carry =\
    \ x & y;  \n  \n        // Sum of bits of x and y where at least one of the bits\
    \ is not set \n        x = x ^ y; \n  \n        // Carry is shifted by one so\
    \ that adding it to x gives the required sum \n        y = carry << 1; \n    }\
    \ \n    return x; \n} ", "{\n    long carry;\n    while (y != 0) \n    {\n   \
    \     carry = x & y;\n        x = x ^ y;\n        y = carry << 1;\n    }\n   \
    \ return x;\n}", "{\n    long carry;\n    while (y != 0) \n    {\n        carry\
    \ = x & y;\n        x = x ^ y;\n        y = carry << 1;\n    }\n    return x;\n\
    }", "{\n    long carry;\n    while (y != 0) \n    {\n        carry = x & y;\n\
    \        x = x ^ y;\n        y = carry << 1;\n    }\n    return x;\n}", "{\n \
    \   long carry;\n    while (y != 0) \n    {\n        carry = x & y;\n        x\
    \ = x ^ y;\n        y = carry << 1;\n    }\n    return x;\n}\n/*\nMultiply two\
    \ numbers x and y\n            \n*/\nlong multiply(long x, long y) \n{\n    long\
    \ result = 0;\n    while (y != 0) \n    {\n        if ((y & 1) != 0) \n      \
    \  {\n            result = add(result, x);\n        }\n        x <<= 1;\n    \
    \    y >>= 1;\n    }\n    return result;\n}\n/*\nDivide two numbers x and y\n\
    \            \n*/\nlong divide(long x, long y) \n{\n    long result = 0;\n   \
    \ int power = 32;\n    long yPower = y << power;\n    while (x >= y) \n    {\n\
    \        while (yPower > x) \n        {\n            yPower >>= 1;\n         \
    \   --power;\n        }\n        result += 1L << power;\n        x -= yPower;\n\
    \    }\n    return result;\n}\n/*\nSubtract two numbers x and y\n            \n\
    */\nlong subtract(long x, long y) \n{\n    return add(x, add(~y, 1));\n}\n/*\n\
    Find the absolute value of a number x\n            \n*/\nlong abs(long x) \n{\n\
    \    long mask = x >> 63;\n    return (x + mask) ^ mask;\n}\n/*\nFind the maximum\
    \ of two numbers x and y\n            \n*/\nlong max(long x, long y) \n{\n   \
    \ return x - ((x - y) & ((x - y) >> 63));\n}\n/*\nFind the minimum of two numbers\
    \ x and y\n            \n*/\nlong min(long x, long y) \n{\n    return y + ((x\
    \ - y) & ((x - y) >> 63));\n}\n/*\nFind the sign of a number x\n            \n\
    */\nlong sign(long x) \n{\n    return flip((x >> 63) & 1);\n}\n/*\nFind the square\
    \ root of a number x\n            ", "{ \n    // Iterate till there is no carry\
    \  \n    while (y != 0) \n    { \n        // carry now contains common set bits\
    \ of x and y \n        long carry = x & y;  \n  \n        // Sum of bits of x\
    \ and y where at least one of the bits is not set \n        x = x ^ y; \n  \n\
    \        // Carry is shifted by one so that adding it to x gives the required\
    \ sum \n        y = carry << 1; \n    } \n    return x; \n} ", "{ \n    // Iterate\
    \ till there is no carry  \n    while (y != 0) \n    { \n        // carry now\
    \ contains common set bits of x and y \n        long carry = x & y;  \n  \n  \
    \      // Sum of bits of x and y where at least one of the bits is not set \n\
    \        x = x ^ y; \n  \n        // Carry is shifted by one so that adding it\
    \ to x gives the required sum \n        y = carry << 1; \n    } \n    return x;\
    \ \n} ", "{ \n    // Iterate till there is no carry  \n    while (y != 0) \n \
    \   { \n        // carry now contains common set bits of x and y \n        long\
    \ carry = x & y;  \n  \n        // Sum of bits of x and y where at least one of\
    \ the bits is not set \n        x = x ^ y; \n  \n        // Carry is shifted by\
    \ one so that adding it to x gives the required sum \n        y = carry << 1;\
    \ \n    } \n    return x; \n} ", "{\n    long carry;\n    while (y != 0) \n  \
    \  {\n        carry = x & y;\n        x = x ^ y;\n        y = carry << 1;\n  \
    \  }\n    return x;\n}", "{\n    long carry;\n    while (y != 0) \n    {\n   \
    \     carry = x & y;\n        x = x ^ y;\n        y = carry << 1;\n    }\n   \
    \ return x;\n}", "{ \n    // Iterate till there is no carry  \n    while (y !=\
    \ 0) \n    { \n        // carry now contains common set bits of x and y \n   \
    \     long carry = x & y;  \n  \n        // Sum of bits of x and y where at least\
    \ one of the bits is not set \n        x = x ^ y; \n  \n        // Carry is shifted\
    \ by one so that adding it to x gives the required sum \n        y = carry <<\
    \ 1; \n    } \n    return x; \n} ", "{ \n    // Iterate till there is no carry\
    \  \n    while (y != 0) \n    { \n        // carry now contains common set bits\
    \ of x and y \n        long carry = x & y;  \n  \n        // Sum of bits of x\
    \ and y where at least one of the bits is not set \n        x = x ^ y; \n  \n\
    \        // Carry is shifted by one so that adding it to x gives the required\
    \ sum \n        y = carry << 1; \n    } \n    return x; \n} ", "{ \n    // Iterate\
    \ till there is no carry  \n    while (y != 0) \n    { \n        // carry now\
    \ contains common set bits of x and y \n        long carry = x & y;  \n  \n  \
    \      // Sum of bits of x and y where at least one of the bits is not set \n\
    \        x = x ^ y; \n  \n        // Carry is shifted by one so that adding it\
    \ to x gives the required sum \n        y = carry << 1; \n    } \n    return x;\
    \ \n} ", "{\n    long carry;\n    while (y != 0)\n    {\n        carry = x & y;\n\
    \        x = x ^ y;\n        y = carry << 1;\n    }\n    return x;\n}", "{\n \
    \   long carry;\n    while (y != 0) \n    {\n        carry = x & y;\n        x\
    \ = x ^ y;\n        y = carry << 1;\n    }\n    return x;\n}", "{ \n    // Iterate\
    \ till there is no carry  \n    while (y != 0) \n    { \n        // carry now\
    \ contains common set bits of x and y \n        long carry = x & y;  \n  \n  \
    \      // Sum of bits of x and y where at least one of the bits is not set \n\
    \        x = x ^ y; \n  \n        // Carry is shifted by one so that adding it\
    \ to x gives the required sum \n        y = carry << 1; \n    } \n    return x;\
    \ \n} ", "{\n    if (y == 0)\n        return x;\n    return add(x ^ y, (x & y)\
    \ << 1);\n}", "{ \n    long carry; \n    while (y != 0) \n    { \n        carry\
    \ = x & y; \n        x = x ^ y; \n        y = carry << 1; \n    } \n    return\
    \ x; \n} ", "{\n    long carry;\n    while (y != 0) \n    {\n        carry = x\
    \ & y;\n        x = x ^ y;\n        y = carry << 1;\n    }\n    return x;\n}",
  "{ \n    // Iterate till there is no carry  \n    while (y != 0) \n    { \n    \
    \    // carry now contains common set bits of x and y \n        long carry = x\
    \ & y;  \n  \n        // Sum of bits of x and y where at least one of the bits\
    \ is not set \n        x = x ^ y; \n  \n        // Carry is shifted by one so\
    \ that adding it to x gives the required sum \n        y = carry << 1; \n    }\
    \ \n    return x; \n} ", "{\n    long carry;\n    while (y != 0)\n    {\n    \
    \    carry = x & y;\n        x = x ^ y;\n        y = carry << 1;\n    }\n    return\
    \ x;\n}\n/*\nSubtract two numbers x and y\n            \n*/\nlong sub(long x,\
    \ long y) \n{\n    return add(x, add(~y, 1));\n}\n/*\nMultiply two numbers x and\
    \ y\n            \n*/\nlong mul(long x, long y) \n{\n    long result = 0;\n  \
    \  while (y != 0)\n    {\n        if ((y & 1) != 0)\n            result = add(result,\
    \ x);\n        x <<= 1;\n        y >>= 1;\n    }\n    return result;\n}\n/*\n\
    Divide two numbers x and y\n            \n*/\nlong div(long x, long y) \n{\n \
    \   long result = 0;\n    long power = 32;\n    long yPower = y << power;\n  \
    \  while (x >= y)\n    {\n        while (yPower > x)\n        {\n            yPower\
    \ >>= 1;\n            --power;\n        }\n        result += 1 << power;\n   \
    \     x -= yPower;\n    }\n    return result;\n}\n/*\nModulo two numbers x and\
    \ y\n            \n*/\nlong mod(long x, long y) \n{\n    long result = 0;\n  \
    \  long power = 32;\n    long yPower = y << power;\n    while (x >= y)\n    {\n\
    \        while (yPower > x)\n        {\n            yPower >>= 1;\n          \
    \  --power;\n        }\n        result += 1 << power;\n        x -= yPower;\n\
    \    }\n    return x;\n}\n/*\nPower of two numbers x and y\n            \n*/\n\
    long pow(long x, long y) \n{\n    long result = 1;\n    while (y != 0)\n    {\n\
    \        if ((y & 1) != 0)\n            result = mul(result, x);\n        x =\
    \ mul(x, x);\n        y >>= 1;\n    }\n    return result;\n}\n/*", "{\n    long\
    \ carry;\n    while (y != 0) \n    {\n        carry = x & y;\n        x = x ^\
    \ y;\n        y = carry << 1;\n    }\n    return x;\n}", "{ \n    // Iterate till\
    \ there is no carry  \n    while (y != 0) \n    { \n        // carry now contains\
    \ common set bits of x and y \n        long carry = x & y;  \n  \n        // Sum\
    \ of bits of x and y where at least one of the bits is not set \n        x = x\
    \ ^ y; \n  \n        // Carry is shifted by one so that adding it to x gives the\
    \ required sum \n        y = carry << 1; \n    } \n    return x; \n} \n/*\nSubtract\
    \ two numbers x and y\n            \n*/\nlong subtract(long x, long y) \n{ \n\
    \    // Iterate till there is no carry \n    while (y != 0) \n    { \n       \
    \ // borrow contains common set bits of y and unset \n        // bits of x \n\
    \        long borrow = (~x) & y; \n  \n        // Subtraction of bits of x and\
    \ y where at least \n        // one of the bits is not set \n        x = x ^ y;\
    \ \n  \n        // Borrow is shifted by one so that subtracting it from \n   \
    \     // x gives the required sum \n        y = borrow << 1; \n    } \n    return\
    \ x; \n} \n/*\nMultiply two numbers x and y\n            \n*/\nlong multiply(long\
    \ x, long y) \n{ \n    // Initialize result \n    long res = 0; \n  \n    // Add\
    \ x one by one \n    while (y > 0) \n    { \n        // If y is odd, add x to\
    \ result \n        if ((y & 1) == 1) \n            res = add(res, x); \n  \n \
    \       // n is multiplied by 2 \n        x = x << 1; \n  \n        // y is halved\
    \ \n        y = y >> 1; \n    } \n    return res; \n} \n/*\nDivide two numbers\
    \ x and y\n            \n*/\nlong divide(long x, long y) \n{ \n    // Initialize\
    \ result \n    long res = 0; \n      \n    // Update x if it is more than or  ",
  "{\n    long carry;\n    while (y != 0) \n    {\n        carry = x & y;\n      \
    \  x = x ^ y;\n        y = carry << 1;\n    }\n    return x;\n}", "{ \n    //\
    \ Iterate till there is no carry  \n    while (y != 0) \n    { \n        // carry\
    \ now contains common set bits of x and y \n        long carry = x & y;  \n  \n\
    \        // Sum of bits of x and y where at least one of the bits is not set \n\
    \        x = x ^ y; \n  \n        // Carry is shifted by one so that adding it\
    \ to x gives the required sum \n        y = carry << 1; \n    } \n    return x;\
    \ \n} ", "{ \n    // Iterate till there is no carry  \n    while (y != 0) \n \
    \   { \n        // carry now contains common set bits of x and y \n        long\
    \ carry = x & y;  \n  \n        // Sum of bits of x and y where at least one of\
    \ the bits is not set \n        x = x ^ y; \n  \n        // Carry is shifted by\
    \ one so that adding it to x gives the required sum \n        y = carry << 1;\
    \ \n    } \n    return x; \n} ", "{\n    // Iterate till there is no carry  \n\
    \    while (y != 0) \n    {\n        // carry now contains common set bits of\
    \ x and y\n        long carry = x & y;  \n  \n        // Sum of bits of x and\
    \ y where at least one of the bits is not set\n        x = x ^ y; \n  \n     \
    \   // Carry is shifted by one so that adding it to x gives the required sum\n\
    \        y = carry << 1;\n    }\n    return x;\n}", "{\n    long carry;\n    while\
    \ (y != 0) \n    {\n        carry = x & y;\n        x = x ^ y;\n        y = carry\
    \ << 1;\n    }\n    return x;\n}", "{\n    // Iterate till there is no carry \
    \ \n    while (y != 0) \n    {\n        // carry now contains common set bits\
    \ of x and y\n        long carry = x & y;  \n  \n        // Sum of bits of x and\
    \ y where at least one of the bits is not set\n        x = x ^ y; \n  \n     \
    \   // Carry is shifted by one so that adding it to x gives the required sum\n\
    \        y = carry << 1;\n    }\n    return x;\n}", "{ \n    // Iterate till there\
    \ is no carry  \n    while (y != 0) \n    { \n        // carry now contains common\
    \ set bits of x and y \n        long carry = x & y;  \n  \n        // Sum of bits\
    \ of x and y where at least one of the bits is not set \n        x = x ^ y; \n\
    \  \n        // Carry is shifted by one so that adding it to x gives the required\
    \ sum \n        y = carry << 1; \n    } \n    return x; \n} \n/*\nSubtract two\
    \ numbers x and y\n            \n*/\nlong sub(long x, long y) \n{ \n    // Iterate\
    \ till there is no carry \n    while (y != 0) \n    { \n        // borrow contains\
    \ common set bits of y and unset \n        // bits of x \n        long borrow\
    \ = (~x) & y; \n  \n        // Subtraction of bits of x and y where at least \n\
    \        // one of the bits is not set \n        x = x ^ y; \n  \n        // Borrow\
    \ is shifted by one so that subtracting it from \n        // x gives the required\
    \ sum \n        y = borrow << 1; \n    } \n    return x; \n} \n/*\nMultiply two\
    \ numbers x and y\n            \n*/\nlong mul(long x, long y) \n{ \n    long res\
    \ = 0; // Initialize result \n  \n    // One by one multiply n with individual\
    \ bits of x \n    while (y > 0) \n    { \n        // If y is odd, add x to result\
    \ \n        if (y & 1) \n            res = add(res, x); \n  \n        // n is\
    \ multiplied by 2 \n        x = x << 1; \n  \n        // y is halved \n      \
    \  y = y >> 1; \n    } \n    return res; \n} \n/*\nDivide two numbers x and y\n\
    \            \n*/\nlong div(long x, long y) \n{ \n    // Calculate sign of divisor\
    \ i.e., sign will be negative \n    // only if either one of them is negative",
  "{\n    long carry;\n    while (y != 0) \n    {\n        carry = x & y;\n      \
    \  x = x ^ y;\n        y = carry << 1;\n    }\n    return x;\n}", "{\n    long\
    \ carry;\n    while (y != 0) \n    {\n        carry = x & y;\n        x = x ^\
    \ y;\n        y = carry << 1;\n    }\n    return x;\n}", "{ \n    // Iterate till\
    \ there is no carry  \n    while (y != 0) \n    { \n        // carry now contains\
    \ common set bits of x and y \n        long carry = x & y;  \n  \n        // Sum\
    \ of bits of x and y where at least one of the bits is not set \n        x = x\
    \ ^ y; \n  \n        // Carry is shifted by one so that adding it to x gives the\
    \ required sum \n        y = carry << 1; \n    } \n    return x; \n} \n/*\nSubtract\
    \ two numbers x and y\n            \n*/\nlong subtract(long x, long y) \n{ \n\
    \    // Iterate till there is no carry \n    while (y != 0) \n    { \n       \
    \ // borrow contains common set bits of y and unset \n        // bits of x \n\
    \        long borrow = (~x) & y; \n  \n        // Subtraction of bits of x and\
    \ y where at least \n        // one of the bits is not set \n        x = x ^ y;\
    \ \n  \n        // Borrow is shifted by one so that subtracting it from \n   \
    \     // x gives the required sum \n        y = borrow << 1; \n    } \n    return\
    \ x; \n} \n/*\nMultiply two numbers x and y\n            \n*/\nlong multiply(long\
    \ x, long y) \n{ \n    // Initialize result \n    long res = 0; \n  \n    // Add\
    \ x one by one \n    while (y > 0) \n    { \n        // If y is odd, add x to\
    \ result \n        if ((y & 1) == 1) \n            res = add(res, x); \n  \n \
    \       // n is multiplied by 2 \n        x = x << 1; \n  \n        // Change\
    \ y to y / 2 \n        y = y >> 1; \n    } \n    return res; \n} \n/*\nDivide\
    \ two numbers x and y\n            \n*/\nlong divide(long x, long y) \n{ \n  \
    \  // Initialize result \n    long res = 0; \n      \n    // Update x if it is\
    \ more than", "{\n    long carry;\n    while (y != 0) \n    {\n        carry =\
    \ x & y;\n        x = x ^ y;\n        y = carry << 1;\n    }\n    return x;\n}",
  "{\n    long carry;\n    while (y != 0)\n    {\n        carry = x & y;\n       \
    \ x = x ^ y;\n        y = carry << 1;\n    }\n    return x;\n}", "{ \n    // Iterate\
    \ till there is no carry  \n    while (y != 0) \n    { \n        // carry now\
    \ contains common set bits of x and y \n        long carry = x & y;  \n  \n  \
    \      // Sum of bits of x and y where at least one of the bits is not set \n\
    \        x = x ^ y; \n  \n        // Carry is shifted by one so that adding it\
    \ to x gives the required sum \n        y = carry << 1; \n    } \n    return x;\
    \ \n} ", "{\n    long carry;\n    while (y != 0) \n    {\n        carry = x &\
    \ y;\n        x = x ^ y;\n        y = carry << 1;\n    }\n    return x;\n}", "{\n\
    \    long carry;\n    while (y != 0) \n    {\n        carry = x & y;\n       \
    \ x = x ^ y;\n        y = carry << 1;\n    }\n    return x;\n}", "{ \n    // Iterate\
    \ till there is no carry  \n    while (y != 0) \n    { \n        // carry now\
    \ contains common set bits of x and y \n        long carry = x & y;  \n  \n  \
    \      // Sum of bits of x and y where at least one of the bits is not set \n\
    \        x = x ^ y; \n  \n        // Carry is shifted by one so that adding it\
    \ to x gives the required sum \n        y = carry << 1; \n    } \n    return x;\
    \ \n} ", "{\n    long carry;\n    while (y != 0) \n    {\n        carry = x &\
    \ y;\n        x = x ^ y;\n        y = carry << 1;\n    }\n    return x;\n}", "{\
    \ \n    // Iterate till there is no carry  \n    while (y != 0) \n    { \n   \
    \     // carry now contains common set bits of x and y \n        long carry =\
    \ x & y;  \n  \n        // Sum of bits of x and y where at least one of the bits\
    \ is not set \n        x = x ^ y; \n  \n        // Carry is shifted by one so\
    \ that adding it to x gives the required sum \n        y = carry << 1; \n    }\
    \ \n    return x; \n} \n/*\nSubtract two numbers x and y\n            \n*/\nlong\
    \ sub(long x, long y) \n{ \n    // Iterate till there is no carry \n    while\
    \ (y != 0) \n    { \n        // borrow contains common set bits of y and unset\
    \ \n        // bits of x \n        long borrow = (~x) & y; \n  \n        // Subtraction\
    \ of bits of x and y where at least \n        // one of the bits is not set \n\
    \        x = x ^ y; \n  \n        // Borrow is shifted by one so that subtracting\
    \ it from \n        // x gives the required sum \n        y = borrow << 1; \n\
    \    } \n    return x; \n} \n/*\nMultiply two numbers x and y\n            \n\
    */\nlong mul(long x, long y) \n{ \n    long res = 0; // Initialize result \n \
    \ \n    // One by one multiply n with individual bits of x \n    while (y > 0)\
    \ \n    { \n        // If y is odd, add x to result \n        if (y & 1) \n  \
    \          res = add(res, x); \n  \n        // n is multiplied by 2 \n       \
    \ x = x << 1; \n  \n        // y is halved \n        y = y >> 1;  // or y = y/2\
    \ \n    } \n    return res; \n} \n/*\nDivide two numbers x and y\n           \
    \ \n*/\nlong div(long x, long y) \n{ \n    // Calculate sign of divisor i.e.,\
    \ sign will be negative \n    //", "{ \n    // Iterate till there is no carry\
    \  \n    while (y != 0) \n    { \n        // carry now contains common set bits\
    \ of x and y \n        long carry = x & y;  \n  \n        // Sum of bits of x\
    \ and y where at least one of the bits is not set \n        x = x ^ y; \n  \n\
    \        // Carry is shifted by one so that adding it to x gives the required\
    \ sum \n        y = carry << 1; \n    } \n    return x; \n} \n/*\nSubtract two\
    \ numbers x and y\n            \n*/\nlong subtract(long x, long y) \n{ \n    //\
    \ Iterate till there is no carry \n    while (y != 0) \n    { \n        // borrow\
    \ contains common set bits of y and unset \n        // bits of x \n        long\
    \ borrow = (~x) & y; \n  \n        // Subtraction of bits of x and y where at\
    \ least \n        // one of the bits is not set \n        x = x ^ y; \n  \n  \
    \      // Borrow is shifted by one so that subtracting it from \n        // x\
    \ gives the required sum \n        y = borrow << 1; \n    } \n    return x; \n\
    } \n/*\nMultiply two numbers x and y\n            \n*/\nlong multiply(long x,\
    \ long y) \n{ \n    // Initialize result \n    long res = 0; \n  \n    // Add\
    \ x one by one \n    while (y > 0) \n    { \n        // If y is odd, add x to\
    \ result \n        if ((y & 1) > 0) \n            res = add(res, x); \n  \n  \
    \      // n is multiplied by 2 \n        x = x << 1; \n  \n        // Change y\
    \ to y / 2 \n        y = y >> 1; \n    } \n    return res; \n} \n/*\nDivide two\
    \ numbers x and y\n            \n*/\nlong divide(long x, long y) \n{ \n    //\
    \ Initialize result \n    long res = 0; \n      \n    // Initialize negative flag\
    \ \n   ", "{ \n    // Iterate till there is no carry  \n    while (y != 0) \n\
    \    { \n        // carry now contains common set bits of x and y \n        long\
    \ carry = x & y;  \n  \n        // Sum of bits of x and y where at least one of\
    \ the bits is not set \n        x = x ^ y; \n  \n        // Carry is shifted by\
    \ one so that adding it to x gives the required sum \n        y = carry << 1;\
    \ \n    } \n    return x; \n} ", "{\n    long carry;\n    while (y != 0) \n  \
    \  {\n        carry = x & y;\n        x = x ^ y;\n        y = carry << 1;\n  \
    \  }\n    return x;\n}", "{\n    long carry;\n    while (y != 0) \n    {\n   \
    \     carry = x & y;\n        x = x ^ y;\n        y = carry << 1;\n    }\n   \
    \ return x;\n}", "{ \n    // Iterate till there is no carry  \n    while (y !=\
    \ 0) \n    { \n        // carry now contains common set bits of x and y \n   \
    \     long carry = x & y;  \n  \n        // Sum of bits of x and y where at least\
    \ one of the bits is not set \n        x = x ^ y; \n  \n        // Carry is shifted\
    \ by one so that adding it to x gives the required sum \n        y = carry <<\
    \ 1; \n    } \n    return x; \n} ", "{ \n    // Iterate till there is no carry\
    \  \n    while (y != 0) \n    { \n        // carry now contains common set bits\
    \ of x and y \n        long carry = x & y;  \n  \n        // Sum of bits of x\
    \ and y where at least one of the bits is not set \n        x = x ^ y; \n  \n\
    \        // Carry is shifted by one so that adding it to x gives the required\
    \ sum \n        y = carry << 1; \n    } \n    return x; \n} ", "{ \n    // Iterate\
    \ till there is no carry  \n    while (y != 0) \n    { \n        // carry now\
    \ contains common set bits of x and y \n        long carry = x & y;  \n  \n  \
    \      // Sum of bits of x and y where at least one of the bits is not set \n\
    \        x = x ^ y; \n  \n        // Carry is shifted by one so that adding it\
    \ to x gives the required sum \n        y = carry << 1; \n    } \n    return x;\
    \ \n} \n/*\nSubtract two numbers x and y\n            \n*/\nlong subtract(long\
    \ x, long y) \n{ \n    // Iterate till there is no carry \n    while (y != 0)\
    \ \n    { \n        // borrow contains common set bits of y and unset \n     \
    \   // bits of x \n        long borrow = (~x) & y; \n  \n        // Subtraction\
    \ of bits of x and y where at least \n        // one of the bits is not set \n\
    \        x = x ^ y; \n  \n        // Borrow is shifted by one so that subtracting\
    \ it from \n        // x gives the required sum \n        y = borrow << 1; \n\
    \    } \n    return x; \n} \n/*\nMultiply two numbers x and y\n            \n\
    */\nlong multiply(long x, long y) \n{ \n    long res = 0; // Initialize result\
    \ \n  \n    // One by one multiply n with individual bits of x \n    while (y\
    \ > 0) \n    { \n        // If y is odd, add x to result \n        if (y & 1)\
    \ \n            res = add(res, x); \n  \n        // n is multiplied by 2 \n  \
    \      x = x << 1; \n  \n        // y is halved \n        y = y >> 1; \n    }\
    \ \n    return res; \n} \n/*\nDivide two numbers x and y\n            \n*/\nlong\
    \ divide(long x, long y) \n{ \n    // Calculate sign of divisor i.e., sign will\
    \ be negative \n    // only if either one of them is negative", "{\n    long carry;\n\
    \    while (y != 0)\n    {\n        carry = x & y;\n        x = x ^ y;\n     \
    \   y = carry << 1;\n    }\n    return x;\n}", "{\n    long carry;\n    while\
    \ (y != 0) \n    {\n        carry = x & y;\n        x = x ^ y;\n        y = carry\
    \ << 1;\n    }\n    return x;\n}", "{ \n    // Iterate till there is no carry\
    \  \n    while (y != 0) \n    { \n        // carry now contains common set bits\
    \ of x and y \n        long carry = x & y;  \n  \n        // Sum of bits of x\
    \ and y where at least one of the bits is not set \n        x = x ^ y; \n  \n\
    \        // Carry is shifted by one so that adding it to x gives the required\
    \ sum \n        y = carry << 1; \n    } \n    return x; \n} \n/*\nSubtract two\
    \ numbers x and y\n            \n*/\nlong subtract(long x, long y) \n{ \n    //\
    \ Iterate till there is no carry \n    while (y != 0) \n    { \n        // borrow\
    \ contains common set bits of y and unset \n        // bits of x \n        long\
    \ borrow = (~x) & y; \n  \n        // Subtraction of bits of x and y where at\
    \ least \n        // one of the bits is not set \n        x = x ^ y; \n  \n  \
    \      // Borrow is shifted by one so that subtracting it from \n        // x\
    \ gives the required sum \n        y = borrow << 1; \n    } \n    return x; \n\
    } \n/*\nMultiply two numbers x and y\n            \n*/\nlong multiply(long x,\
    \ long y) \n{ \n    long res = 0; // Initialize result \n  \n    // One by one\
    \ multiply n with individual bits of x \n    while (y > 0) \n    { \n        //\
    \ If y is odd, add x to result \n        if (y & 1) \n            res = add(res,\
    \ x); \n  \n        // n is multiplied by 2 \n        x = x << 1; \n  \n     \
    \   // y is halved \n        y = y >> 1; \n    } \n    return res; \n} \n/*\n\
    Divide two numbers x and y\n            \n*/\nlong divide(long x, long y) \n{\
    \ \n    // Calculate sign of divisor i.e., sign will be negative \n    // only\
    \ if either one of them is negative", "{ \n    // Iterate till there is no carry\
    \  \n    while (y != 0) \n    { \n        // carry now contains common set bits\
    \ of x and y \n        long carry = x & y;  \n  \n        // Sum of bits of x\
    \ and y where at least one of the bits is not set \n        x = x ^ y; \n  \n\
    \        // Carry is shifted by one so that adding it to x gives the required\
    \ sum \n        y = carry << 1; \n    } \n    return x; \n} \n/*\nSubtract two\
    \ numbers x and y\n            \n*/\nlong subtract(long x, long y) \n{ \n    //\
    \ Iterate till there is no carry \n    while (y != 0) \n    { \n        // borrow\
    \ contains common set bits of y and unset \n        // bits of x \n        long\
    \ borrow = (~x) & y; \n  \n        // Subtraction of bits of x and y where at\
    \ least \n        // one of the bits is not set \n        x = x ^ y; \n  \n  \
    \      // Borrow is shifted by one so that subtracting it from \n        // x\
    \ gives the required sum \n        y = borrow << 1; \n    } \n    return x; \n\
    } \n/*\nMultiply two numbers x and y\n            \n*/\nlong multiply(long x,\
    \ long y) \n{ \n    long res = 0; // Initialize result \n  \n    // One by one\
    \ multiply n with individual bits of x \n    while (y > 0) \n    { \n        //\
    \ If y is odd, add x to result \n        if (y & 1) \n            res = add(res,\
    \ x); \n  \n        // n is multiplied by 2 \n        x = x << 1; \n  \n     \
    \   // y is halved \n        y = y >> 1; \n    } \n    return res; \n} \n/*\n\
    Divide two numbers x and y\n            \n*/\nlong divide(long x, long y) \n{\
    \ \n    // Calculate sign of divisor i.e., sign will be negative \n    // only\
    \ if either one of them is negative", "{ \n    // Iterate till there is no carry\
    \  \n    while (y != 0) \n    { \n        // carry now contains common set bits\
    \ of x and y \n        long carry = x & y;  \n  \n        // Sum of bits of x\
    \ and y where at least one of the bits is not set \n        x = x ^ y; \n  \n\
    \        // Carry is shifted by one so that adding it to x gives the required\
    \ sum \n        y = carry << 1; \n    } \n    return x; \n} ", "{ \n    // Iterate\
    \ till there is no carry  \n    while (y != 0) \n    { \n        // carry now\
    \ contains common set bits of x and y \n        long carry = x & y;  \n  \n  \
    \      // Sum of bits of x and y where at least one of the bits is not set \n\
    \        x = x ^ y; \n  \n        // Carry is shifted by one so that adding it\
    \ to x gives the required sum \n        y = carry << 1; \n    } \n    return x;\
    \ \n} ", "{ \n    // Iterate till there is no carry  \n    while (y != 0) \n \
    \   { \n        // carry now contains common set bits of x and y \n        long\
    \ carry = x & y;  \n  \n        // Sum of bits of x and y where at least one of\
    \ the bits is not set \n        x = x ^ y; \n  \n        // Carry is shifted by\
    \ one so that adding it to x gives the required sum \n        y = carry << 1;\
    \ \n    } \n    return x; \n} ", "{\n    long carry;\n    while (y != 0) \n  \
    \  {\n        carry = x & y;\n        x = x ^ y;\n        y = carry << 1;\n  \
    \  }\n    return x;\n}", "{\n    long carry;\n    while (y != 0) \n    {\n   \
    \     carry = x & y;\n        x = x ^ y;\n        y = carry << 1;\n    }\n   \
    \ return x;\n}", "{ \n    // Iterate till there is no carry  \n    while (y !=\
    \ 0) \n    { \n        // carry now contains common set bits of x and y \n   \
    \     long carry = x & y;  \n  \n        // Sum of bits of x and y where at least\
    \ one of the bits is not set \n        x = x ^ y; \n  \n        // Carry is shifted\
    \ by one so that adding it to x gives the required sum \n        y = carry <<\
    \ 1; \n    } \n    return x; \n} \n/*\nSubtract two numbers x and y\n        \
    \    \n*/\nlong subtract(long x, long y) \n{ \n    // Iterate till there is no\
    \ carry \n    while (y != 0) \n    { \n        // borrow contains common set bits\
    \ of y and unset \n        // bits of x \n        long borrow = (~x) & y; \n \
    \ \n        // Subtraction of bits of x and y where at least \n        // one\
    \ of the bits is not set \n        x = x ^ y; \n  \n        // Borrow is shifted\
    \ by one so that subtracting it from \n        // x gives the required sum \n\
    \        y = borrow << 1; \n    } \n    return x; \n} \n/*\nMultiply two numbers\
    \ x and y\n            \n*/\nlong multiply(long x, long y) \n{ \n    // Initialize\
    \ result \n    long res = 0; \n  \n    // One by one multiply n with individual\
    \ bits of x \n    while (y > 0) \n    { \n        // If y is odd, add x to result\
    \ \n        if ((y & 1) > 0) \n            res = add(res, x); \n  \n        //\
    \ n is multiplied by 2 \n        x = x << 1; \n  \n        // Update y \n    \
    \    y = y >> 1;  // or y = y/2 \n    } \n    return res; \n} \n/*\nDivide two\
    \ numbers x and y\n            \n*/\nlong divide(long x, long y) \n{ \n    //\
    \ Initialize result \n    long res = 0; \n      \n", "{\n    long carry;\n   \
    \ while (y != 0)\n    {\n        carry = x & y;\n        x = x ^ y;\n        y\
    \ = carry << 1;\n    }\n    return x;\n}", "{ \n    // Iterate till there is no\
    \ carry  \n    while (y != 0) \n    { \n        // carry now contains common set\
    \ bits of x and y \n        long carry = x & y;  \n  \n        // Sum of bits\
    \ of x and y where at least one of the bits is not set \n        x = x ^ y; \n\
    \  \n        // Carry is shifted by one so that adding it to x gives the required\
    \ sum \n        y = carry << 1; \n    } \n    return x; \n} \n/*\nSubtract two\
    \ numbers x and y\n            \n*/\nlong sub(long x, long y) \n{ \n    // Iterate\
    \ till there is no carry \n    while (y != 0) \n    { \n        // borrow contains\
    \ common set bits of y and unset \n        // bits of x \n        long borrow\
    \ = (~x) & y; \n  \n        // Subtraction of bits of x and y where at least \n\
    \        // one of the bits is not set \n        x = x ^ y; \n  \n        // Borrow\
    \ is shifted by one so that subtracting it from \n        // x gives the required\
    \ sum \n        y = borrow << 1; \n    } \n    return x; \n} \n/*\nMultiply two\
    \ numbers x and y\n            \n*/\nlong mul(long x, long y) \n{ \n    long res\
    \ = 0; // Initialize result \n  \n    // One by one multiply n with individual\
    \ bits of x \n    while (y > 0) \n    { \n        // If y is odd, add x to result\
    \ \n        if (y & 1) \n            res = add(res, x); \n  \n        // n is\
    \ multiplied by 2 \n        x = x << 1; \n  \n        // y is halved \n      \
    \  y = y >> 1; \n    } \n    return res; \n} \n/*\nDivide two numbers x and y\n\
    \            \n*/\nlong div(long x, long y) \n{ \n    // Calculate sign of divisor\
    \ i.e., sign will be negative \n    // only if either one of them is negative",
  "{\n    long carry;\n    while (y != 0) \n    {\n        carry = x & y;\n      \
    \  x = x ^ y;\n        y = carry << 1;\n    }\n    return x;\n}", "{\n    return\
    \ x + y;\n}", "{\n    long carry;\n    while (y != 0) \n    {\n        carry =\
    \ x & y;\n        x = x ^ y;\n        y = carry << 1;\n    }\n    return x;\n}",
  "{\n    long carry;\n    while (y != 0) \n    {\n        carry = x & y;\n      \
    \  x = x ^ y;\n        y = carry << 1;\n    }\n    return x;\n}", "{ \n    //\
    \ Iterate till there is no carry  \n    while (y != 0) \n    { \n        // carry\
    \ now contains common set bits of x and y \n        long carry = x & y;  \n  \n\
    \        // Sum of bits of x and y where at least one of the bits is not set \n\
    \        x = x ^ y; \n  \n        // Carry is shifted by one so that adding it\
    \ to x gives the required sum \n        y = carry << 1; \n    } \n    return x;\
    \ \n} ", "{\n    long carry;\n    while (y != 0)\n    {\n        carry = x & y;\n\
    \        x = x ^ y;\n        y = carry << 1;\n    }\n    return x;\n}", "{\n \
    \   long carry;\n    while (y != 0) \n    {\n        carry = x & y;\n        x\
    \ = x ^ y;\n        y = carry << 1;\n    }\n    return x;\n}", "{ \n    // Iterate\
    \ till there is no carry  \n    while (y != 0) \n    { \n        // carry now\
    \ contains common set bits of x and y \n        long carry = x & y;  \n  \n  \
    \      // Sum of bits of x and y where at least one of the bits is not set \n\
    \        x = x ^ y; \n  \n        // Carry is shifted by one so that adding it\
    \ to x gives the required sum \n        y = carry << 1; \n    } \n    return x;\
    \ \n} ", "{ \n    // Iterate till there is no carry  \n    while (y != 0) \n \
    \   { \n        // carry now contains common set bits of x and y \n        long\
    \ carry = x & y;  \n  \n        // Sum of bits of x and y where at least one of\
    \ the bits is not set \n        x = x ^ y; \n  \n        // Carry is shifted by\
    \ one so that adding it to x gives the required sum \n        y = carry << 1;\
    \ \n    } \n    return x; \n} ", "{\n    long carry;\n    while (y != 0) \n  \
    \  {\n        carry = x & y;\n        x = x ^ y;\n        y = carry << 1;\n  \
    \  }\n    return x;\n}\n/*\nMultiply two numbers x and y\n            \n*/\nlong\
    \ multiply(long x, long y) \n{\n    long result = 0;\n    while (y != 0) \n  \
    \  {\n        if ((y & 1) != 0) \n        {\n            result = add(result,\
    \ x);\n        }\n        x <<= 1;\n        y >>= 1;\n    }\n    return result;\n\
    }\n/*\nDivide two numbers x and y\n            \n*/\nlong divide(long x, long\
    \ y) \n{\n    long result = 0;\n    long power = 32;\n    long yPower = y << power;\n\
    \    while (x >= y) \n    {\n        while (yPower > x) \n        {\n        \
    \    yPower >>= 1;\n            --power;\n        }\n        result += 1 << power;\n\
    \        x -= yPower;\n    }\n    return result;\n}\n/*\nSubtract two numbers\
    \ x and y\n            \n*/\nlong subtract(long x, long y) \n{\n    return add(x,\
    \ add(~y, 1));\n}\n/*\nFind the absolute value of a number x\n            \n*/\n\
    long abs(long x) \n{\n    long mask = x >> 63;\n    return (x + mask) ^ mask;\n\
    }\n/*\nFind the maximum of two numbers x and y\n            \n*/\nlong max(long\
    \ x, long y) \n{\n    return x - ((x - y) & ((x - y) >> 63));\n}\n/*\nFind the\
    \ minimum of two numbers x and y\n            \n*/\nlong min(long x, long y) \n\
    {\n    return y + ((x - y) & ((x - y) >> 63));\n}\n/*\nFind the sign of a number\
    \ x\n            \n*/\nlong sign(long x) \n{\n    return flip((x >> 63) & 1);\n\
    }\n/*\nFind the square root of a number x\n            \n", "{ \n    // Iterate\
    \ till there is no carry  \n    while (y != 0) \n    { \n        // carry now\
    \ contains common set bits of x and y \n        long carry = x & y;  \n  \n  \
    \      // Sum of bits of x and y where at least one of the bits is not set \n\
    \        x = x ^ y; \n  \n        // Carry is shifted by one so that adding it\
    \ to x gives the required sum \n        y = carry << 1; \n    } \n    return x;\
    \ \n} \n/*\nSubtract two numbers x and y\n            \n*/\nlong sub(long x, long\
    \ y) \n{ \n    // Iterate till there is no carry \n    while (y != 0) \n    {\
    \ \n        // borrow contains common set bits of y and unset \n        // bits\
    \ of x \n        long borrow = (~x) & y; \n  \n        // Subtraction of bits\
    \ of x and y where at least \n        // one of the bits is not set \n       \
    \ x = x ^ y; \n  \n        // Borrow is shifted by one so that subtracting it\
    \ from \n        // x gives the required sum \n        y = borrow << 1; \n   \
    \ } \n    return x; \n} \n/*\nMultiply two numbers x and y\n            \n*/\n\
    long mul(long x, long y) \n{ \n    long res = 0; // Initialize result \n  \n \
    \   // One by one multiply n with individual bits of x \n    while (y > 0) \n\
    \    { \n        // If y is odd, add x to result \n        if (y & 1) \n     \
    \       res = add(res, x); \n  \n        // n is multiplied by 2 \n        x =\
    \ x << 1; \n  \n        // y is halved \n        y = y >> 1; \n    } \n    return\
    \ res; \n} \n/*\nDivide two numbers x and y\n            \n*/\nlong div(long x,\
    \ long y) \n{ \n    // Calculate sign of divisor i.e., sign will be negative \n\
    \    // only if either one of them is negative", "{\n    long carry;\n    while\
    \ (y != 0) \n    {\n        carry = x & y;\n        x = x ^ y;\n        y = carry\
    \ << 1;\n    }\n    return x;\n}", "{\n    long carry;\n    while (y != 0)\n \
    \   {\n        carry = x & y;\n        x = x ^ y;\n        y = carry << 1;\n \
    \   }\n    return x;\n}", "{ \n    // Iterate till there is no carry  \n    while\
    \ (y != 0) \n    { \n        // carry now contains common set bits of x and y\
    \ \n        long carry = x & y;  \n  \n        // Sum of bits of x and y where\
    \ at least one of the bits is not set \n        x = x ^ y; \n  \n        // Carry\
    \ is shifted by one so that adding it to x gives the required sum \n        y\
    \ = carry << 1; \n    } \n    return x; \n} ", "{\n    long carry;\n    while\
    \ (y != 0) \n    {\n        carry = x & y;\n        x = x ^ y;\n        y = carry\
    \ << 1;\n    }\n    return x;\n}", "{ \n    // Iterate till there is no carry\
    \  \n    while (y != 0) \n    { \n        // carry now contains common set bits\
    \ of x and y \n        long carry = x & y;  \n  \n        // Sum of bits of x\
    \ and y where at least one of the bits is not set \n        x = x ^ y; \n  \n\
    \        // Carry is shifted by one so that adding it to x gives the required\
    \ sum \n        y = carry << 1; \n    } \n    return x; \n} ", "{ \n    // Iterate\
    \ till there is no carry  \n    while (y != 0) \n    { \n        // carry now\
    \ contains common set bits of x and y \n        long carry = x & y;  \n  \n  \
    \      // Sum of bits of x and y where at least one of the bits is not set \n\
    \        x = x ^ y; \n  \n        // Carry is shifted by one so that adding it\
    \ to x gives the required sum \n        y = carry << 1; \n    } \n    return x;\
    \ \n} ", "{\n    long carry;\n    while (y != 0) \n    {\n        carry = x &\
    \ y;\n        x = x ^ y;\n        y = carry << 1;\n    }\n    return x;\n}", "{\n\
    \    long carry;\n    while (y != 0) \n    {\n        carry = x & y;\n       \
    \ x = x ^ y;\n        y = carry << 1;\n    }\n    return x;\n}\n/*\nSubtract two\
    \ numbers x and y\n            \n*/\nlong sub(long x, long y) \n{\n    return\
    \ add(x, add(~y, 1));\n}\n/*\nMultiply two numbers x and y\n            \n*/\n\
    long mul(long x, long y) \n{\n    long result = 0;\n    while (y != 0) \n    {\n\
    \        if ((y & 1) != 0) \n        {\n            result = add(result, x);\n\
    \        }\n        x <<= 1;\n        y >>= 1;\n    }\n    return result;\n}\n\
    /*\nDivide two numbers x and y\n            \n*/\nlong div(long x, long y) \n\
    {\n    long result = 0;\n    int i;\n    for (i = 31; i >= 0; i = sub(i, 1)) \n\
    \    {\n        if ((x >> i) >= y) \n        {\n            result |= 1 << i;\n\
    \            x = sub(x, y << i);\n        }\n    }\n    return result;\n}\n/*\n\
    Modulo two numbers x and y\n            \n*/\nlong mod(long x, long y) \n{\n \
    \   long result = 0;\n    int i;\n    for (i = 31; i >= 0; i = sub(i, 1)) \n \
    \   {\n        if ((x >> i) >= y) \n        {\n            x = sub(x, y << i);\n\
    \        }\n    }\n    return x;\n}\n/*\nPower of two numbers x and y\n      \
    \      \n*/\nlong pow(long x, long y) \n{\n    long result = 1;\n    while (y\
    \ != 0) \n    {\n        if ((y & 1) != 0) \n        {\n            result = mul(result,\
    \ x);\n        }\n        x = mul(x, x);\n        y >>= 1;\n    }\n    return\
    \ result;\n}", "{\n    // Iterate till there is no carry  \n    while (y != 0)\
    \ \n    {\n        // carry now contains common set bits of x and y\n        long\
    \ carry = x & y;  \n  \n        // Sum of bits of x and y where at least one of\
    \ the bits is not set\n        x = x ^ y; \n  \n        // Carry is shifted by\
    \ one so that adding it to x gives the required sum\n        y = carry << 1;\n\
    \    }\n    return x;\n}", "{\n    long carry;\n    while (y != 0) \n    {\n \
    \       carry = x & y;\n        x = x ^ y;\n        y = carry << 1;\n    }\n \
    \   return x;\n}", "{\n    // Iterate till there is no carry  \n    while (y !=\
    \ 0) \n    {\n        // carry now contains common set bits of x and y\n     \
    \   long carry = x & y;  \n  \n        // Sum of bits of x and y where at least\
    \ one of the bits is not set\n        x = x ^ y; \n  \n        // Carry is shifted\
    \ by one so that adding it to x gives the required sum\n        y = carry << 1;\n\
    \    }\n    return x;\n}\n/*\nSubtract two numbers x and y\n            \n*/\n\
    long sub(long x, long y) \n{\n    // Iterate till there is no carry  \n    while\
    \ (y != 0) \n    {\n        // borrow contains common set bits of y and unset\n\
    \        // bits of x\n        long borrow = (~x) & y; \n  \n        // Subtraction\
    \ of bits of x and y where at least\n        // one of the bits is not set\n \
    \       x = x ^ y; \n  \n        // Borrow is shifted by one so that subtracting\
    \ it from\n        // x gives the required sum\n        y = borrow << 1;\n   \
    \ }\n    return x;\n}\n/*\nMultiply two numbers x and y\n            \n*/\nlong\
    \ mul(long x, long y) \n{\n    long res = 0;  // Initialize result\n  \n    //\
    \ One by one multiply n with individual bits of x\n    while (y > 0) \n    {\n\
    \        // If y is odd, add x to result\n        if (y & 1)\n            res\
    \ = add(res, x);\n  \n        // n is multiplied by 2\n        x = x << 1;\n \
    \       y = y >> 1;  // y is halved\n    }\n    return res;\n}\n/*\nDivide two\
    \ numbers x and y\n            \n*/\nlong div(long x, long y) \n{\n    // Calculate\
    \ sign of divisor i.e., sign will be negative\n    // only if either one of them\
    \ is negative otherwise it\n    // will be positive\n    long sign = ((x < 0)\
    \ ^ (y < 0)) ? -1 : 1;\n  \n    // Update both divis", "{\n    long carry;\n \
    \   while (y != 0)\n    {\n        carry = x & y;\n        x = x ^ y;\n      \
    \  y = carry << 1;\n    }\n    return x;\n}", "{\n    long carry;\n    while (y\
    \ != 0) \n    {\n        carry = x & y;\n        x = x ^ y;\n        y = carry\
    \ << 1;\n    }\n    return x;\n}", "{\n    long carry;\n    while (y != 0) \n\
    \    {\n        carry = x & y;\n        x = x ^ y;\n        y = carry << 1;\n\
    \    }\n    return x;\n}", "{\n    long carry;\n    while (y != 0) \n    {\n \
    \       carry = x & y;\n        x = x ^ y;\n        y = carry << 1;\n    }\n \
    \   return x;\n}", "{\n    if (y == 0)\n        return x;\n    else\n        return\
    \ add(x ^ y, (x & y) << 1);\n}", "{ \n    // Iterate till there is no carry  \n\
    \    while (y != 0) \n    { \n        // carry now contains common set bits of\
    \ x and y \n        long carry = x & y;  \n  \n        // Sum of bits of x and\
    \ y where at least one of the bits is not set \n        x = x ^ y; \n  \n    \
    \    // Carry is shifted by one so that adding it to x gives the required sum\
    \ \n        y = carry << 1; \n    } \n    return x; \n} ", "{\n    // Iterate\
    \ till there is no carry  \n    while (y != 0) \n    {\n        // carry now contains\
    \ common set bits of x and y\n        long carry = x & y;  \n  \n        // Sum\
    \ of bits of x and y where at least one of the bits is not set\n        x = x\
    \ ^ y; \n  \n        // Carry is shifted by one so that adding it to x gives the\
    \ required sum\n        y = carry << 1;\n    }\n    return x;\n}", "{ \n    //\
    \ Iterate till there is no carry  \n    while (y != 0) \n    { \n        // carry\
    \ now contains common set bits of x and y \n        long carry = x & y;  \n  \n\
    \        // Sum of bits of x and y where at least one of the bits is not set \n\
    \        x = x ^ y; \n  \n        // Carry is shifted by one so that adding it\
    \ to x gives the required sum \n        y = carry << 1; \n    } \n    return x;\
    \ \n} ", "{\n    long carry;\n    while (y != 0) \n    {\n        carry = x &\
    \ y;\n        x = x ^ y;\n        y = carry << 1;\n    }\n    return x;\n}", "{\n\
    \    // Iterate till there is no carry  \n    while (y != 0)\n    {\n        //\
    \ carry now contains common set bits of x and y\n        long carry = x & y; \
    \ \n \n        // Sum of bits of x and y where at least one of the bits is not\
    \ set\n        x = x ^ y; \n \n        // Carry is shifted by one so that adding\
    \ it to x gives the required sum\n        y = carry << 1;\n    }\n    return x;\n\
    }", "{\n    if (y == 0)\n        return x;\n    return add(x ^ y, (x & y) << 1);\n\
    }", "{ \n    // Iterate till there is no carry  \n    while (y != 0) \n    { \n\
    \        // carry now contains common set bits of x and y \n        long carry\
    \ = x & y;  \n  \n        // Sum of bits of x and y where at least one of the\
    \ bits is not set \n        x = x ^ y; \n  \n        // Carry is shifted by one\
    \ so that adding it to x gives the required sum \n        y = carry << 1; \n \
    \   } \n    return x; \n} ", "{ \n    // Iterate till there is no carry  \n  \
    \  while (y != 0) \n    { \n        // carry now contains common set bits of x\
    \ and y \n        long carry = x & y;  \n  \n        // Sum of bits of x and y\
    \ where at least one of the bits is not set \n        x = x ^ y; \n  \n      \
    \  // Carry is shifted by one so that adding it to x gives the required sum \n\
    \        y = carry << 1; \n    } \n    return x; \n} \n/*\nSubtract two numbers\
    \ x and y\n            \n*/\nlong sub(long x, long y) \n{ \n    // Iterate till\
    \ there is no carry \n    while (y != 0) \n    { \n        // borrow contains\
    \ common set bits of y and unset \n        // bits of x \n        long borrow\
    \ = (~x) & y; \n  \n        // Subtraction of bits of x and y where at least \n\
    \        // one of the bits is not set \n        x = x ^ y; \n  \n        // Borrow\
    \ is shifted by one so that subtracting it from \n        // x gives the required\
    \ sum \n        y = borrow << 1; \n    } \n    return x; \n} \n/*\nMultiply two\
    \ numbers x and y\n            \n*/\nlong mul(long x, long y) \n{ \n    long res\
    \ = 0; // Initialize result \n  \n    // One by one multiply n with individual\
    \ bits of x \n    while (y > 0) \n    { \n        // If y is odd, add x to result\
    \ \n        if (y & 1) \n            res = add(res, x); \n  \n        // n is\
    \ multiplied by 2 \n        x = x << 1; \n  \n        // y is halved \n      \
    \  y = y >> 1; \n    } \n    return res; \n} \n/*\nDivide two numbers x and y\n\
    \            \n*/\nlong div(long x, long y) \n{ \n    // Calculate sign of divisor\
    \ i.e., sign will be negative \n    // only if either one of them is negative",
  "{ \n    // Iterate till there is no carry  \n    while (y != 0) \n    { \n    \
    \    // carry now contains common set bits of x and y \n        long carry = x\
    \ & y;  \n  \n        // Sum of bits of x and y where at least one of the bits\
    \ is not set \n        x = x ^ y; \n  \n        // Carry is shifted by one so\
    \ that adding it to x gives the required sum \n        y = carry << 1; \n    }\
    \ \n    return x; \n} ", "{\n    long carry;\n    while (y != 0) \n    {\n   \
    \     carry = x & y;\n        x = x ^ y;\n        y = carry << 1;\n    }\n   \
    \ return x;\n}", "{\n    long carry;\n    while (y != 0)\n    {\n        carry\
    \ = x & y;\n        x = x ^ y;\n        y = carry << 1;\n    }\n    return x;\n\
    }", "{ \n    // Iterate till there is no carry  \n    while (y != 0) \n    { \n\
    \        // carry now contains common set bits of x and y \n        long carry\
    \ = x & y;  \n  \n        // Sum of bits of x and y where at least one of the\
    \ bits is not set \n        x = x ^ y; \n  \n        // Carry is shifted by one\
    \ so that adding it to x gives the required sum \n        y = carry << 1; \n \
    \   } \n    return x; \n} ", "{ \n    // Iterate till there is no carry  \n  \
    \  while (y != 0) \n    { \n        // carry now contains common set bits of x\
    \ and y \n        long carry = x & y;  \n  \n        // Sum of bits of x and y\
    \ where at least one of the bits is not set \n        x = x ^ y; \n  \n      \
    \  // Carry is shifted by one so that adding it to x gives the required sum \n\
    \        y = carry << 1; \n    } \n    return x; \n} ", "{\n    // Iterate till\
    \ there is no carry  \n    while (y != 0) \n    {\n        // carry now contains\
    \ common set bits of x and y\n        long carry = x & y;  \n  \n        // Sum\
    \ of bits of x and y where at least one of the bits is not set\n        x = x\
    \ ^ y; \n  \n        // Carry is shifted by one so that adding it to x gives the\
    \ required sum\n        y = carry << 1;\n    }\n    return x;\n}", "{ \n    //\
    \ Iterate till there is no carry  \n    while (y != 0) \n    { \n        // carry\
    \ now contains common set bits of x and y \n        long carry = x & y;  \n  \n\
    \        // Sum of bits of x and y where at least one of the bits is not set \n\
    \        x = x ^ y; \n  \n        // Carry is shifted by one so that adding it\
    \ to x gives the required sum \n        y = carry << 1; \n    } \n    return x;\
    \ \n} ", "{\n    long carry;\n    while (y != 0)\n    {\n        carry = x & y;\n\
    \        x = x ^ y;\n        y = carry << 1;\n    }\n    return x;\n}", "{\n \
    \   // Iterate till there is no carry  \n    while (y != 0) \n    {\n        //\
    \ carry now contains common set bits of x and y\n        long carry = x & y; \
    \ \n  \n        // Sum of bits of x and y where at least one of the bits is not\
    \ set\n        x = x ^ y; \n  \n        // Carry is shifted by one so that adding\
    \ it to x gives the required sum\n        y = carry << 1;\n    }\n    return x;\n\
    }\n/*\nSubtract two numbers x and y\n            \n*/\nlong subtract(long x, long\
    \ y) \n{\n    // Iterate till there is no carry  \n    while (y != 0) \n    {\n\
    \        // borrow contains common set bits of y and unset\n        // bits of\
    \ x\n        long borrow = (~x) & y;\n  \n        // Subtraction of bits of x\
    \ and y where at least\n        // one of the bits is not set\n        x = x ^\
    \ y;\n  \n        // Borrow is shifted by one so that subtracting it from\n  \
    \      // x gives the required sum\n        y = borrow << 1;\n    }\n    return\
    \ x;\n}\n/*\nMultiply two numbers x and y\n            \n*/\nlong multiply(long\
    \ x, long y) \n{\n    long res = 0;  // Initialize result\n  \n    // One by one\
    \ multiply n with individual bits of x\n    while (y > 0) \n    {\n        //\
    \ If y is odd, add x to result\n        if ((y & 1) > 0)\n            res = add(res,\
    \ x);\n  \n        // n is multiplied by 2\n        x = x << 1;\n        y = y\
    \ >> 1;  // y is halved\n    }\n    return res;\n}\n/*\nDivide two numbers x and\
    \ y\n            \n*/\nlong divide(long x, long y) \n{\n    // Calculate sign\
    \ of divisor i.e., sign will be negative only if either one of them is negative\
    \ otherwise it will be positive\n    long sign = ((x < 0) ^ (y < 0)) ? -1 : 1;\n\
    \  \n    // Update both divisor and dividend positive\n", "{\n    long carry;\n\
    \    while (y != 0) \n    {\n        carry = x & y;\n        x = x ^ y;\n    \
    \    y = carry << 1;\n    }\n    return x;\n}", "{\n    long carry;\n    while\
    \ (y != 0) \n    {\n        carry = x & y;  \n        x = x ^ y; \n        y =\
    \ carry << 1;\n    }\n    return x;\n}", "{ \n    // Iterate till there is no\
    \ carry  \n    while (y != 0) \n    { \n        // carry now contains common set\
    \ bits of x and y \n        long carry = x & y;  \n  \n        // Sum of bits\
    \ of x and y where at least one of the bits is not set \n        x = x ^ y; \n\
    \  \n        // Carry is shifted by one so that adding it to x gives the required\
    \ sum \n        y = carry << 1; \n    } \n    return x; \n} ", "{\n    // Iterate\
    \ till there is no carry  \n    while (y != 0) \n    {\n        // carry now contains\
    \ common set bits of x and y\n        long carry = x & y;  \n  \n        // Sum\
    \ of bits of x and y where at least one of the bits is not set\n        x = x\
    \ ^ y; \n  \n        // Carry is shifted by one so that adding it to x gives the\
    \ required sum\n        y = carry << 1;\n    }\n    return x;\n}", "{\n    long\
    \ carry;\n    while (y != 0) \n    {\n        carry = x & y;\n        x = x ^\
    \ y;\n        y = carry << 1;\n    }\n    return x;\n}", "{ \n    // Iterate till\
    \ there is no carry  \n    while (y != 0) \n    { \n        // carry now contains\
    \ common set bits of x and y \n        long carry = x & y;  \n  \n        // Sum\
    \ of bits of x and y where at least one of the bits is not set \n        x = x\
    \ ^ y; \n  \n        // Carry is shifted by one so that adding it to x gives the\
    \ required sum \n        y = carry << 1; \n    } \n    return x; \n} ", "{\n \
    \   long carry;\n    while (y != 0)\n    {\n        carry = x & y;\n        x\
    \ = x ^ y;\n        y = carry << 1;\n    }\n    return x;\n}", "{\n    long carry;\n\
    \    while (y != 0) \n    {\n        carry = x & y;\n        x = x ^ y;\n    \
    \    y = carry << 1;\n    }\n    return x;\n}", "{ \n    // Iterate till there\
    \ is no carry  \n    while (y != 0) \n    { \n        // carry now contains common\
    \ set bits of x and y \n        long carry = x & y;   \n  \n        // Sum of\
    \ bits of x and y where at least one of the bits is not set \n        x = x ^\
    \ y; \n  \n        // Carry is shifted by one so that adding it to x gives the\
    \ required sum \n        y = carry << 1; \n    } \n    return x; \n} ", "{ \n\
    \    // Iterate till there is no carry  \n    while (y != 0) \n    { \n      \
    \  // carry now contains common set bits of x and y \n        long carry = x &\
    \ y;  \n  \n        // Sum of bits of x and y where at least one of the bits is\
    \ not set \n        x = x ^ y; \n  \n        // Carry is shifted by one so that\
    \ adding it to x gives the required sum \n        y = carry << 1; \n    } \n \
    \   return x; \n} ", "{\n    long carry;\n    while (y != 0) \n    {\n       \
    \ carry = x & y;\n        x = x ^ y;\n        y = carry << 1;\n    }\n    return\
    \ x;\n}", "{ \n    // Iterate till there is no carry  \n    while (y != 0) \n\
    \    { \n        // carry now contains common set bits of x and y \n        long\
    \ carry = x & y;  \n  \n        // Sum of bits of x and y where at least one of\
    \ the bits is not set \n        x = x ^ y; \n  \n        // Carry is shifted by\
    \ one so that adding it to x gives the required sum \n        y = carry << 1;\
    \ \n    } \n    return x; \n} \n/*\nSubtract two numbers x and y\n           \
    \ \n*/\nlong sub(long x, long y) \n{ \n    // Iterate till there is no carry \n\
    \    while (y != 0) \n    { \n        // borrow contains common set bits of y\
    \ and unset \n        // bits of x \n        long borrow = (~x) & y; \n  \n  \
    \      // Subtraction of bits of x and y where at least \n        // one of the\
    \ bits is not set \n        x = x ^ y; \n  \n        // Borrow is shifted by one\
    \ so that subtracting it from \n        // x gives the required sum \n       \
    \ y = borrow << 1; \n    } \n    return x; \n} \n/*\nMultiply two numbers x and\
    \ y\n            \n*/\nlong mul(long x, long y) \n{ \n    long res = 0; // Initialize\
    \ result \n  \n    // One by one multiply n with individual bits of x \n    while\
    \ (y > 0) \n    { \n        // If y is odd, add x to result \n        if (y &\
    \ 1) \n            res = add(res, x); \n  \n        // n is multiplied by 2 \n\
    \        x = x << 1; \n  \n        // y is halved \n        y = y >> 1; \n   \
    \ } \n    return res; \n} \n/*\nDivide two numbers x and y\n            \n*/\n\
    long div(long x, long y) \n{ \n    // Calculate sign of divisor i.e., sign will\
    \ be negative \n    // only if either one of them is negative", "{\n    long carry;\n\
    \    while (y != 0) \n    {\n        carry = x & y;\n        x = x ^ y;\n    \
    \    y = carry << 1;\n    }\n    return x;\n}", "{\n    long carry;\n    while\
    \ (y != 0)\n    {\n        carry = x & y;\n        x = x ^ y;\n        y = carry\
    \ << 1;\n    }\n    return x;\n}", "{\n    if (y == 0)\n        return x;\n  \
    \  else\n        return add(x ^ y, (x & y) << 1);\n}", "{ \n    // Iterate till\
    \ there is no carry  \n    while (y != 0) \n    { \n        // carry now contains\
    \ common set bits of x and y \n        long carry = x & y;  \n  \n        // Sum\
    \ of bits of x and y where at least one of the bits is not set \n        x = x\
    \ ^ y; \n  \n        // Carry is shifted by one so that adding it to x gives the\
    \ required sum \n        y = carry << 1; \n    } \n    return x; \n} ", "{\n \
    \   long carry;\n    while (y != 0) \n    {\n        carry = x & y;\n        x\
    \ = x ^ y;\n        y = carry << 1;\n    }\n    return x;\n}", "{ \n    // Iterate\
    \ till there is no carry  \n    while (y != 0) \n    { \n        // carry now\
    \ contains common set bits of x and y \n        long carry = x & y;  \n  \n  \
    \      // Sum of bits of x and y where at least one of the bits is not set \n\
    \        x = x ^ y; \n  \n        // Carry is shifted by one so that adding it\
    \ to x gives the required sum \n        y = carry << 1; \n    } \n    return x;\
    \ \n} ", "{ \n    // Iterate till there is no carry  \n    while (y != 0) \n \
    \   { \n        // carry now contains common set bits of x and y \n        long\
    \ carry = x & y;  \n  \n        // Sum of bits of x and y where at least one of\
    \ the bits is not set \n        x = x ^ y; \n  \n        // Carry is shifted by\
    \ one so that adding it to x gives the required sum \n        y = carry << 1;\
    \ \n    } \n    return x; \n} \n/*\nSubtract two numbers x and y\n           \
    \ \n*/\nlong sub(long x, long y) \n{ \n    // Iterate till there is no carry \n\
    \    while (y != 0) \n    { \n        // borrow contains common set bits of y\
    \ and unset \n        // bits of x \n        long borrow = (~x) & y; \n  \n  \
    \      // Subtraction of bits of x and y where at least \n        // one of the\
    \ bits is not set \n        x = x ^ y; \n  \n        // Borrow is shifted by one\
    \ so that subtracting it from \n        // x gives the required sum \n       \
    \ y = borrow << 1; \n    } \n    return x; \n} \n/*\nMultiply two numbers x and\
    \ y\n            \n*/\nlong mul(long x, long y) \n{ \n    long res = 0; // Initialize\
    \ result \n  \n    // One by one multiply n with individual bits of x \n    while\
    \ (y > 0) \n    { \n        // If y is odd, add x to result \n        if (y &\
    \ 1) \n            res = add(res, x); \n  \n        // n is multiplied by 2 \n\
    \        x = x << 1; \n  \n        // y is halved \n        y = y >> 1; \n   \
    \ } \n    return res; \n} \n/*\nDivide two numbers x and y\n            \n*/\n\
    long div(long x, long y) \n{ \n    // Calculate sign of divisor i.e., \n    //\
    \ sign will be negative only iff \n    // either", "{ \n    // Iterate till there\
    \ is no carry  \n    while (y != 0) \n    { \n        // carry now contains common\
    \ set bits of x and y \n        long carry = x & y;  \n  \n        // Sum of bits\
    \ of x and y where at least one of the bits is not set \n        x = x ^ y; \n\
    \  \n        // Carry is shifted by one so that adding it to x gives the required\
    \ sum \n        y = carry << 1; \n    } \n    return x; \n} ", "{\n    long carry;\n\
    \    while (y != 0) \n    {\n        carry = x & y;\n        x = x ^ y;\n    \
    \    y = carry << 1;\n    }\n    return x;\n}", "{ \n    // Iterate till there\
    \ is no carry  \n    while (y != 0) \n    { \n        // carry now contains common\
    \ set bits of x and y \n        long carry = x & y;  \n  \n        // Sum of bits\
    \ of x and y where at least one of the bits is not set \n        x = x ^ y; \n\
    \  \n        // Carry is shifted by one so that adding it to x gives the required\
    \ sum \n        y = carry << 1; \n    } \n    return x; \n} ", "{ \n    // Iterate\
    \ till there is no carry  \n    while (y != 0) \n    { \n        // carry now\
    \ contains common set bits of x and y \n        long carry = x & y;  \n  \n  \
    \      // Sum of bits of x and y where at least one of the bits is not set \n\
    \        x = x ^ y; \n  \n        // Carry is shifted by one so that adding it\
    \ to x gives the required sum \n        y = carry << 1; \n    } \n    return x;\
    \ \n} ", "{\n    long carry;\n    while (y != 0) \n    {\n        carry = x &\
    \ y;\n        x = x ^ y;\n        y = carry << 1;\n    }\n    return x;\n}", "{\
    \ \n    // Iterate till there is no carry  \n    while (y != 0) \n    { \n   \
    \     // carry now contains common set bits of x and y \n        long carry =\
    \ x & y;  \n  \n        // Sum of bits of x and y where at least one of the bits\
    \ is not set \n        x = x ^ y; \n  \n        // Carry is shifted by one so\
    \ that adding it to x gives the required sum \n        y = carry << 1; \n    }\
    \ \n    return x; \n} \n/*\nSubtract two numbers x and y\n            \n*/\nlong\
    \ subtract(long x, long y) \n{ \n    // Iterate till there is no carry \n    while\
    \ (y != 0) \n    { \n        // borrow contains common set bits of y and unset\
    \ \n        // bits of x \n        long borrow = (~x) & y; \n  \n        // Subtraction\
    \ of bits of x and y where at least \n        // one of the bits is not set \n\
    \        x = x ^ y; \n  \n        // Borrow is shifted by one so that subtracting\
    \ it from \n        // x gives the required sum \n        y = borrow << 1; \n\
    \    } \n    return x; \n} \n/*\nMultiply two numbers x and y\n            \n\
    */\nlong multiply(long x, long y) \n{ \n    // Initialize result \n    long res\
    \ = 0; \n  \n    // One by one multiply n with individual bits of x \n    while\
    \ (y > 0) \n    { \n        // If y is odd, add x to result \n        if ((y &\
    \ 1) > 0) \n            res = add(res, x); \n  \n        // n is multiplied by\
    \ 2 \n        x = x << 1; \n  \n        // y is halved \n        y = y >> 1; \n\
    \    } \n    return res; \n} \n/*\nDivide two numbers x and y\n            \n\
    */\nlong divide(long x, long y) \n{ \n    // Initialize result \n    long res\
    \ = 0; \n      \n    // Update x if it", "{\n    long carry;\n    while (y !=\
    \ 0) \n    {\n        carry = x & y;\n        x = x ^ y;\n        y = carry <<\
    \ 1;\n    }\n    return x;\n}", "{ \n    // Iterate till there is no carry  \n\
    \    while (y != 0) \n    { \n        // carry now contains common set bits of\
    \ x and y \n        long carry = x & y;  \n  \n        // Sum of bits of x and\
    \ y where at least one of the bits is not set \n        x = x ^ y; \n  \n    \
    \    // Carry is shifted by one so that adding it to x gives the required sum\
    \ \n        y = carry << 1; \n    } \n    return x; \n} \n/*\nSubtract two numbers\
    \ x and y\n            \n*/\nlong sub(long x, long y) \n{ \n    // Iterate till\
    \ there is no carry \n    while (y != 0) \n    { \n        // borrow contains\
    \ common set bits of y and unset \n        // bits of x \n        long borrow\
    \ = (~x) & y; \n  \n        // Subtraction of bits of x and y where at least \n\
    \        // one of the bits is not set \n        x = x ^ y; \n  \n        // Borrow\
    \ is shifted by one so that subtracting it from \n        // x gives the required\
    \ sum \n        y = borrow << 1; \n    } \n    return x; \n} ", "{\n    long carry;\n\
    \    while (y != 0) \n    {\n        carry = x & y;\n        x = x ^ y;\n    \
    \    y = carry << 1;\n    }\n    return x;\n}", "{\n    long carry;\n    while\
    \ (y != 0) \n    {\n        carry = x & y;\n        x = x ^ y;\n        y = carry\
    \ << 1;\n    }\n    return x;\n}", "{\n    long carry;\n    while (y != 0) \n\
    \    {\n        carry = x & y;\n        x = x ^ y;\n        y = carry << 1;\n\
    \    }\n    return x;\n}", "{\n    long carry;\n    while (y != 0)\n    {\n  \
    \      carry = x & y;  \n        x = x ^ y; \n        y = carry << 1;\n    }\n\
    \    return x;\n}", "{\n    long carry;\n    while (y != 0)\n    {\n        carry\
    \ = x & y;\n        x = x ^ y;\n        y = carry << 1;\n    }\n    return x;\n\
    }", "{\n    while (y != 0) \n    {\n        long carry = x & y;\n        x = x\
    \ ^ y;\n        y = carry << 1;\n    }\n    return x;\n}\n/*\nMultiply two numbers\
    \ x and y\n            \n*/\nlong multiply(long x, long y) \n{\n    long result\
    \ = 0;\n    while (y != 0) \n    {\n        if ((y & 1) != 0) \n        {\n  \
    \          result = add(result, x);\n        }\n        x <<= 1;\n        y >>=\
    \ 1;\n    }\n    return result;\n}\n/*\nDivide two numbers x and y\n         \
    \   \n*/\nlong divide(long x, long y) \n{\n    long result = 0;\n    int power\
    \ = 32;\n    long yPower = y << power;\n    while (x >= y) \n    {\n        while\
    \ (yPower > x) \n        {\n            yPower >>= 1;\n            --power;\n\
    \        }\n        result += 1L << power;\n        x -= yPower;\n    }\n    return\
    \ result;\n}\n/*\nSubtract two numbers x and y\n            \n*/\nlong subtract(long\
    \ x, long y) \n{\n    return add(x, add(~y, 1));\n}\n/*\nFind the absolute value\
    \ of a number x\n            \n*/\nlong abs(long x) \n{\n    long y = x >> 63;\n\
    \    return (x ^ y) - y;\n}\n/*\nFind the minimum of two numbers x and y\n   \
    \         \n*/\nlong min(long x, long y) \n{\n    return y & ((x - y) >> 63) |\
    \ x & (~(x - y) >> 63);\n}\n/*\nFind the maximum of two numbers x and y\n    \
    \        \n*/\nlong max(long x, long y) \n{\n    return x & ((x - y) >> 63) |\
    \ y & (~(x - y) >> 63);\n}\n/*\nFind the square root of a number x\n         \
    \   \n*/\nlong sqrt(long x) \n{\n    if (x < 0) \n    {\n        return -1", "{\n\
    \    // Iterate till there is no carry  \n    while (y != 0) \n    {\n       \
    \ // carry now contains common set bits of x and y\n        long carry = x & y;\
    \  \n  \n        // Sum of bits of x and y where at least one of the bits is not\
    \ set\n        x = x ^ y; \n  \n        // Carry is shifted by one so that adding\
    \ it to x gives the required sum\n        y = carry << 1;\n    }\n    return x;\n\
    }", "{ \n    // Iterate till there is no carry  \n    while (y != 0) \n    { \n\
    \        // carry now contains common set bits of x and y \n        long carry\
    \ = x & y;  \n  \n        // Sum of bits of x and y where at least one of the\
    \ bits is not set \n        x = x ^ y; \n  \n        // Carry is shifted by one\
    \ so that adding it to x gives the required sum \n        y = carry << 1; \n \
    \   } \n    return x; \n} \n/*\nSubtract two numbers x and y\n            \n*/\n\
    long subtract(long x, long y) \n{ \n    // Iterate till there is no carry \n \
    \   while (y != 0) \n    { \n        // borrow contains common set bits of y and\
    \ unset \n        // bits of x \n        long borrow = (~x) & y; \n  \n      \
    \  // Subtraction of bits of x and y where at least \n        // one of the bits\
    \ is not set \n        x = x ^ y; \n  \n        // Borrow is shifted by one so\
    \ that subtracting it from \n        // x gives the required sum \n        y =\
    \ borrow << 1; \n    } \n    return x; \n} \n/*\nMultiply two numbers x and y\n\
    \            \n*/\nlong multiply(long x, long y) \n{ \n    long res = 0; // Initialize\
    \ result \n  \n    // One by one multiply n with individual bits of x \n    while\
    \ (y > 0) \n    { \n        // If y is odd, add x to result \n        if (y &\
    \ 1) \n            res = add(res, x); \n  \n        // n is multiplied by 2 \n\
    \        x = x << 1; \n  \n        // y is halved \n        y = y >> 1; \n   \
    \ } \n    return res; \n} \n/*\nDivide two numbers x and y\n            \n*/\n\
    long divide(long x, long y) \n{ \n    // Calculate sign of divisor i.e., sign\
    \ will be negative \n    // only if either one of them is negative", "{\n    //\
    \ Iterate till there is no carry  \n    while (y != 0) \n    {\n        // carry\
    \ now contains common set bits of x and y\n        long carry = x & y;  \n  \n\
    \        // Sum of bits of x and y where at least one of the bits is not set\n\
    \        x = x ^ y; \n  \n        // Carry is shifted by one so that adding it\
    \ to x gives the required sum\n        y = carry << 1;\n    }\n    return x;\n\
    }", "{\n    long carry;\n    while (y != 0) \n    {\n        carry = x & y;\n\
    \        x = x ^ y;\n        y = carry << 1;\n    }\n    return x;\n}", "{ \n\
    \    // Iterate till there is no carry  \n    while (y != 0) \n    { \n      \
    \  // carry now contains common set bits of x and y \n        long carry = x &\
    \ y;  \n  \n        // Sum of bits of x and y where at least one of the bits is\
    \ not set \n        x = x ^ y; \n  \n        // Carry is shifted by one so that\
    \ adding it to x gives the required sum \n        y = carry << 1; \n    } \n \
    \   return x; \n} ", "{\n    long carry;\n    while (y != 0) \n    {\n       \
    \ carry = x & y;\n        x = x ^ y;\n        y = carry << 1;\n    }\n    return\
    \ x;\n}", "{ \n    // Iterate till there is no carry  \n    while (y != 0) \n\
    \    { \n        // carry now contains common set bits of x and y \n        long\
    \ carry = x & y;  \n  \n        // Sum of bits of x and y where at least one of\
    \ the bits is not set \n        x = x ^ y; \n  \n        // Carry is shifted by\
    \ one so that adding it to x gives the required sum \n        y = carry << 1;\
    \ \n    } \n    return x; \n} ", "{\n    long carry;\n    while (y != 0) \n  \
    \  {\n        carry = x & y;\n        x = x ^ y;\n        y = carry << 1;\n  \
    \  }\n    return x;\n}", "{\n    long carry;\n    while (y != 0) \n    {\n   \
    \     carry = x & y;\n        x = x ^ y;\n        y = carry << 1;\n    }\n   \
    \ return x;\n}", "{ \n    // Iterate till there is no carry  \n    while (y !=\
    \ 0) \n    { \n        // carry now contains common set bits of x and y \n   \
    \     long carry = x & y;  \n  \n        // Sum of bits of x and y where at least\
    \ one of the bits is not set \n        x = x ^ y; \n  \n        // Carry is shifted\
    \ by one so that adding it to x gives the required sum \n        y = carry <<\
    \ 1; \n    } \n    return x; \n} ", "{\n    long carry;\n    while (y != 0)\n\
    \    {\n        carry = x & y;\n        x = x ^ y;\n        y = carry << 1;\n\
    \    }\n    return x;\n}", "{ \n    // Iterate till there is no carry  \n    while\
    \ (y != 0) \n    { \n        // carry now contains common set bits of x and y\
    \ \n        long carry = x & y;  \n  \n        // Sum of bits of x and y where\
    \ at least one of the bits is not set \n        x = x ^ y; \n  \n        // Carry\
    \ is shifted by one so that adding it to x gives the required sum \n        y\
    \ = carry << 1; \n    } \n    return x; \n} ", "{ \n    // Iterate till there\
    \ is no carry  \n    while (y != 0) \n    { \n        // carry now contains common\
    \ set bits of x and y \n        long carry = x & y;  \n  \n        // Sum of bits\
    \ of x and y where at least one of the bits is not set \n        x = x ^ y; \n\
    \  \n        // Carry is shifted by one so that adding it to x gives the required\
    \ sum \n        y = carry << 1; \n    } \n    return x; \n} ", "{ \n    // Iterate\
    \ till there is no carry  \n    while (y != 0) \n    { \n        // carry now\
    \ contains common set bits of x and y \n        long carry = x & y;  \n  \n  \
    \      // Sum of bits of x and y where at least one of the bits is not set \n\
    \        x = x ^ y; \n  \n        // Carry is shifted by one so that adding it\
    \ to x gives the required sum \n        y = carry << 1; \n    } \n    return x;\
    \ \n} ", "{\n    if (y == 0)\n        return x;\n    return add(x ^ y, (x & y)\
    \ << 1);\n}", "{ \n    // Iterate till there is no carry  \n    while (y != 0)\
    \ \n    { \n        // carry now contains common set bits of x and y \n      \
    \  long carry = x & y;  \n  \n        // Sum of bits of x and y where at least\
    \ one of the bits is not set \n        x = x ^ y; \n  \n        // Carry is shifted\
    \ by one so that adding it to x gives the required sum \n        y = carry <<\
    \ 1; \n    } \n    return x; \n} \n/*\nSubtract two numbers x and y\n        \
    \    \n*/\nlong sub(long x, long y) \n{ \n    // Iterate till there is no carry\
    \ \n    while (y != 0) \n    { \n        // borrow contains common set bits of\
    \ y and unset \n        // bits of x \n        long borrow = (~x) & y; \n  \n\
    \        // Subtraction of bits of x and y where at least \n        // one of\
    \ the bits is not set \n        x = x ^ y; \n  \n        // Borrow is shifted\
    \ by one so that subtracting it from \n        // x gives the required sum \n\
    \        y = borrow << 1; \n    } \n    return x; \n} \n/*\nMultiply two numbers\
    \ x and y\n            \n*/\nlong mul(long x, long y) \n{ \n    long res = 0;\
    \ // Initialize result \n  \n    // One by one multiply n with individual bits\
    \ of x \n    while (y > 0) \n    { \n        // If y is odd, add x to result \n\
    \        if (y & 1) \n            res = add(res, x); \n  \n        // n is multiplied\
    \ by 2 \n        x = x << 1; \n  \n        // y is halved \n        y = y >> 1;\
    \  // or y = y/2 \n    } \n    return res; \n} \n/*\nDivide two numbers x and\
    \ y\n            \n*/\nlong div(long x, long y) \n{ \n    // Calculate sign of\
    \ divisor i.e., sign will be negative \n    //", "{ \n    // Iterate till there\
    \ is no carry  \n    while (y != 0) \n    { \n        // carry now contains common\
    \ set bits of x and y \n        long carry = x & y;  \n  \n        // Sum of bits\
    \ of x and y where at least one of the bits is not set \n        x = x ^ y; \n\
    \  \n        // Carry is shifted by one so that adding it to x gives the required\
    \ sum \n        y = carry << 1; \n    } \n    return x; \n} ", "{\n    long carry;\n\
    \    while (y != 0) \n    {\n        carry = x & y;\n        x = x ^ y;\n    \
    \    y = carry << 1;\n    }\n    return x;\n}", "{\n    long carry;\n    while\
    \ (y != 0) \n    {\n        carry = x & y;\n        x = x ^ y;\n        y = carry\
    \ << 1;\n    }\n    return x;\n}", "{\n    long carry;\n    while (y != 0)\n \
    \   {\n        carry = x & y;\n        x = x ^ y;\n        y = carry << 1;\n \
    \   }\n    return x;\n}", "{ \n    // Iterate till there is no carry  \n    while\
    \ (y != 0) \n    { \n        // carry now contains common set bits of x and y\
    \ \n        long carry = x & y;  \n  \n        // Sum of bits of x and y where\
    \ at least one of the bits is not set \n        x = x ^ y; \n  \n        // Carry\
    \ is shifted by one so that adding it to x gives the required sum \n        y\
    \ = carry << 1; \n    } \n    return x; \n} ", "{\n    long carry;\n    while\
    \ (y != 0) \n    {\n        carry = x & y;\n        x = x ^ y;\n        y = carry\
    \ << 1;\n    }\n    return x;\n}", "{\n    long carry;\n    while (y != 0)\n \
    \   {\n        carry = x & y;\n        x = x ^ y;\n        y = carry << 1;\n \
    \   }\n    return x;\n}\n/*\nSubtract two numbers x and y\n            \n*/\n\
    long sub(long x, long y) \n{\n    return add(x, add(~y, 1));\n}\n/*\nMultiply\
    \ two numbers x and y\n            \n*/\nlong mul(long x, long y) \n{\n    long\
    \ result = 0;\n    while (y != 0)\n    {\n        if ((y & 1) != 0)\n        \
    \    result = add(result, x);\n        x <<= 1;\n        y >>= 1;\n    }\n   \
    \ return result;\n}\n/*\nDivide two numbers x and y\n            \n*/\nlong div(long\
    \ x, long y) \n{\n    long result = 0;\n    int i;\n    for (i = 31; i >= 0; i\
    \ = sub(i, 1))\n    {\n        if ((x >> i) >= y)\n        {\n            result\
    \ |= 1 << i;\n            x = sub(x, y << i);\n        }\n    }\n    return result;\n\
    }\n/*\nModulo two numbers x and y\n            \n*/\nlong mod(long x, long y)\
    \ \n{\n    long result = 0;\n    int i;\n    for (i = 31; i >= 0; i = sub(i, 1))\n\
    \    {\n        if ((x >> i) >= y)\n        {\n            result |= 1 << i;\n\
    \            x = sub(x, y << i);\n        }\n    }\n    return x;\n}\n/*\nFind\
    \ the absolute value of x\n            \n*/\nlong abs(long x) \n{\n    if (x <\
    \ 0)\n        return sub(0, x);\n    return x;\n}\n/*\nFind the minimum of x and\
    \ y\n            \n*/\nlong min(long x, long y) \n{\n    if (x < y)\n        return\
    \ x;\n    return y;\n}\n/*\nFind the maximum of x and y\n", "{ \n    // Iterate\
    \ till there is no carry  \n    while (y != 0) \n    { \n        // carry now\
    \ contains common set bits of x and y \n        long carry = x & y;  \n  \n  \
    \      // Sum of bits of x and y where at least one of the bits is not set \n\
    \        x = x ^ y; \n  \n        // Carry is shifted by one so that adding it\
    \ to x gives the required sum \n        y = carry << 1; \n    } \n    return x;\
    \ \n} ", "{ \n    // Iterate till there is no carry  \n    while (y != 0) \n \
    \   { \n        // carry now contains common set bits of x and y \n        long\
    \ carry = x & y;  \n  \n        // Sum of bits of x and y where at least one of\
    \ the bits is not set \n        x = x ^ y; \n  \n        // Carry is shifted by\
    \ one so that adding it to x gives the required sum \n        y = carry << 1;\
    \ \n    } \n    return x; \n} ", "{ \n    // Iterate till there is no carry  \n\
    \    while (y != 0) \n    { \n        // carry now contains common set bits of\
    \ x and y \n        long carry = x & y;  \n  \n        // Sum of bits of x and\
    \ y where at least one of the bits is not set \n        x = x ^ y; \n  \n    \
    \    // Carry is shifted by one so that adding it to x gives the required sum\
    \ \n        y = carry << 1; \n    } \n    return x; \n} ", "{ \n    // Iterate\
    \ till there is no carry  \n    while (y != 0) \n    { \n        // carry now\
    \ contains common set bits of x and y \n        long carry = x & y;  \n  \n  \
    \      // Sum of bits of x and y where at least one of the bits is not set \n\
    \        x = x ^ y; \n  \n        // Carry is shifted by one so that adding it\
    \ to x gives the required sum \n        y = carry << 1; \n    } \n    return x;\
    \ \n} \n/*\nSubtract two numbers x and y\n            \n*/\nlong sub(long x, long\
    \ y) \n{ \n    // Iterate till there is no carry \n    while (y != 0) \n    {\
    \ \n        // borrow contains common set bits of y and unset \n        // bits\
    \ of x \n        long borrow = (~x) & y; \n  \n        // Subtraction of bits\
    \ of x and y where at least \n        // one of the bits is not set \n       \
    \ x = x ^ y; \n  \n        // Borrow is shifted by one so that subtracting it\
    \ from \n        // x gives the required sum \n        y = borrow << 1; \n   \
    \ } \n    return x; \n} \n/*\nMultiply two numbers x and y\n            \n*/\n\
    long mul(long x, long y) \n{ \n    long res = 0; // Initialize result \n  \n \
    \   // One by one multiply n with individual bits of x \n    while (y > 0) \n\
    \    { \n        // If y is odd, add x to result \n        if (y & 1) \n     \
    \       res = add(res, x); \n  \n        // n is multiplied by 2 \n        x =\
    \ x << 1; \n  \n        // y is halved \n        y = y >> 1; \n    } \n    return\
    \ res; \n} \n/*\nDivide two numbers x and y\n            \n*/\nlong div(long x,\
    \ long y) \n{ \n    // Calculate sign of divisor i.e., sign will be negative \n\
    \    // only if either one of them is negative", "{\n    // Iterate till there\
    \ is no carry  \n    while (y != 0) \n    {\n        // carry now contains common\
    \ set bits of x and y\n        long carry = x & y;  \n  \n        // Sum of bits\
    \ of x and y where at least one of the bits is not set\n        x = x ^ y; \n\
    \  \n        // Carry is shifted by one so that adding it to x gives the required\
    \ sum\n        y = carry << 1;\n    }\n    return x;\n}", "{\n    long carry;\n\
    \    while (y != 0) \n    {\n        carry = x & y;  \n        x = x ^ y; \n \
    \       y = carry << 1;\n    }\n    return x;\n}", "{ \n    // Iterate till there\
    \ is no carry  \n    while (y != 0) \n    { \n        // carry now contains common\
    \ set bits of x and y \n        long carry = x & y;  \n  \n        // Sum of bits\
    \ of x and y where at least one of the bits is not set \n        x = x ^ y; \n\
    \  \n        // Carry is shifted by one so that adding it to x gives the required\
    \ sum \n        y = carry << 1; \n    } \n    return x; \n} \n/*\nSubtract two\
    \ numbers x and y\n            \n*/\nlong sub(long x, long y) \n{ \n    // Iterate\
    \ till there is no carry \n    while (y != 0) \n    { \n        // borrow contains\
    \ common set bits of y and unset \n        // bits of x \n        long borrow\
    \ = (~x) & y; \n  \n        // Subtraction of bits of x and y where at least \n\
    \        // one of the bits is not set \n        x = x ^ y; \n  \n        // Borrow\
    \ is shifted by one so that subtracting it from \n        // x gives the required\
    \ sum \n        y = borrow << 1; \n    } \n    return x; \n} \n/*\nMultiply two\
    \ numbers x and y\n            \n*/\nlong mul(long x, long y) \n{ \n    long res\
    \ = 0; // Initialize result \n  \n    // One by one multiply n with individual\
    \ bits of x \n    while (y > 0) \n    { \n        // If y is odd, add x to result\
    \ \n        if (y & 1) \n            res = add(res, x); \n  \n        // n is\
    \ multiplied by 2 \n        x = x << 1; \n  \n        // y is halved \n      \
    \  y = y >> 1; \n    } \n    return res; \n} \n/*\nDivide two numbers x and y\n\
    \            \n*/\nlong div(long x, long y) \n{ \n    // Calculate sign of divisor\
    \ i.e., sign will be negative \n    // only if either one of them is negative",
  "{\n    while (y != 0) \n    {\n        long carry = x & y;\n        x = x ^ y;\n\
    \        y = carry << 1;\n    }\n    return x;\n}\n/*\nSubtract two numbers x\
    \ and y\n            \n*/\nlong subtract(long x, long y) \n{\n    return add(x,\
    \ add(~y, 1));\n}\n/*\nMultiply two numbers x and y\n            \n*/\nlong multiply(long\
    \ x, long y) \n{\n    long result = 0;\n    while (y != 0) \n    {\n        if\
    \ ((y & 1) != 0) \n        {\n            result = add(result, x);\n        }\n\
    \        x <<= 1;\n        y >>= 1;\n    }\n    return result;\n}\n/*\nDivide\
    \ two numbers x and y\n            \n*/\nlong divide(long x, long y) \n{\n   \
    \ long result = 0;\n    int power = 32;\n    long yPower = y << power;\n    while\
    \ (x >= y) \n    {\n        while (yPower > x) \n        {\n            yPower\
    \ >>= 1;\n            --power;\n        }\n        result += 1L << power;\n  \
    \      x -= yPower;\n    }\n    return result;\n}\n/*\nModulo two numbers x and\
    \ y\n            \n*/\nlong modulo(long x, long y) \n{\n    long result = 0;\n\
    \    int power = 32;\n    long yPower = y << power;\n    while (x >= y) \n   \
    \ {\n        while (yPower > x) \n        {\n            yPower >>= 1;\n     \
    \       --power;\n        }\n        x -= yPower;\n    }\n    return x;\n}\n/*\n\
    Negate a number x\n            \n*/\nlong negate(long x) \n{\n    return add(~x,\
    \ 1);\n}\n/*\nAbsolute value of a number x\n            \n*/\nlong abs(long x)\
    \ \n{\n    long mask = x >> 63;\n    return (x + mask) ^ mask;\n}\n/*\nMinimum\
    \ of two numbers x and y\n            ", "{\n    // Iterate till there is no carry\
    \  \n    while (y != 0) \n    {\n        // carry now contains common set bits\
    \ of x and y\n        long carry = x & y;  \n  \n        // Sum of bits of x and\
    \ y where at least one of the bits is not set\n        x = x ^ y; \n  \n     \
    \   // Carry is shifted by one so that adding it to x gives the required sum\n\
    \        y = carry << 1;\n    }\n    return x;\n}", "{ \n    // Iterate till there\
    \ is no carry  \n    while (y != 0) \n    { \n        // carry now contains common\
    \ set bits of x and y \n        long carry = x & y;  \n  \n        // Sum of bits\
    \ of x and y where at least one of the bits is not set \n        x = x ^ y; \n\
    \  \n        // Carry is shifted by one so that adding it to x gives the required\
    \ sum \n        y = carry << 1; \n    } \n    return x; \n} ", "{ \n    // Iterate\
    \ till there is no carry  \n    while (y != 0) \n    { \n        // carry now\
    \ contains common set bits of x and y \n        long carry = x & y;  \n  \n  \
    \      // Sum of bits of x and y where at least one of the bits is not set \n\
    \        x = x ^ y; \n  \n        // Carry is shifted by one so that adding it\
    \ to x gives the required sum \n        y = carry << 1; \n    } \n    return x;\
    \ \n} ", "{\n    long carry;\n    while (y != 0) \n    {\n        carry = x &\
    \ y;\n        x = x ^ y;\n        y = carry << 1;\n    }\n    return x;\n}\n/*\n\
    Subtract two numbers x and y\n            \n*/\nlong sub(long x, long y) \n{\n\
    \    return add(x, add(~y, 1));\n}\n/*\nMultiply two numbers x and y\n       \
    \     \n*/\nlong mul(long x, long y) \n{\n    long result = 0;\n    while (y !=\
    \ 0) \n    {\n        if ((y & 1) != 0) \n        {\n            result = add(result,\
    \ x);\n        }\n        x <<= 1;\n        y >>= 1;\n    }\n    return result;\n\
    }\n/*\nDivide two numbers x and y\n            \n*/\nlong div(long x, long y)\
    \ \n{\n    long result = 0;\n    int power = 32;\n    long yPower = y << power;\n\
    \    while (x >= y) \n    {\n        while (yPower > x) \n        {\n        \
    \    yPower >>= 1;\n            --power;\n        }\n        result += 1 << power;\n\
    \        x -= yPower;\n    }\n    return result;\n}\n/*\nModulo two numbers x\
    \ and y\n            \n*/\nlong mod(long x, long y) \n{\n    long result = 0;\n\
    \    int power = 32;\n    long yPower = y << power;\n    while (x >= y) \n   \
    \ {\n        while (yPower > x) \n        {\n            yPower >>= 1;\n     \
    \       --power;\n        }\n        result += 1 << power;\n        x -= yPower;\n\
    \    }\n    return x;\n}\n/*\nNegate a number x\n            \n*/\nlong neg(long\
    \ x) \n{\n    return add(~x, 1);\n}\n/*\nAbsolute value of a number x\n      \
    \      \n*/\nlong abs(long x) \n{\n    if (x < 0) \n    {\n        return neg(x);\n\
    \    }\n   ", "{\n    // Iterate till there is no carry  \n    while (y != 0)\
    \ \n    {\n        // carry now contains common set bits of x and y\n        long\
    \ carry = x & y;  \n  \n        // Sum of bits of x and y where at least one of\
    \ the bits is not set\n        x = x ^ y; \n  \n        // Carry is shifted by\
    \ one so that adding it to x gives the required sum\n        y = carry << 1;\n\
    \    }\n    return x;\n}", "{\n    long carry;\n    while (y != 0)\n    {\n  \
    \      carry = x & y;\n        x = x ^ y;\n        y = carry << 1;\n    }\n  \
    \  return x;\n}\n/*\nSubtract two numbers x and y\n            \n*/\nlong sub(long\
    \ x, long y) \n{\n    return add(x, add(~y, 1));\n}\n/*\nMultiply two numbers\
    \ x and y\n            \n*/\nlong mul(long x, long y) \n{\n    long result = 0;\n\
    \    while (y != 0)\n    {\n        if ((y & 1) != 0)\n            result = add(result,\
    \ x);\n        x <<= 1;\n        y >>= 1;\n    }\n    return result;\n}\n/*\n\
    Divide two numbers x and y\n            \n*/\nlong div(long x, long y) \n{\n \
    \   long result = 0;\n    int i;\n    for (i = 31; i >= 0; i = sub(i, 1))\n  \
    \  {\n        if ((x >> i) >= y)\n        {\n            result |= 1 << i;\n \
    \           x = sub(x, y << i);\n        }\n    }\n    return result;\n}\n/*\n\
    Modulo two numbers x and y\n            \n*/\nlong mod(long x, long y) \n{\n \
    \   long result = 0;\n    int i;\n    for (i = 31; i >= 0; i = sub(i, 1))\n  \
    \  {\n        if ((x >> i) >= y)\n        {\n            result |= 1 << i;\n \
    \           x = sub(x, y << i);\n        }\n    }\n    return x;\n}\n/*\nPower\
    \ function\n            \n*/\nlong pow(long x, long y) \n{\n    long result =\
    \ 1;\n    while (y != 0)\n    {\n        if ((y & 1) != 0)\n            result\
    \ = mul(result, x);\n        x = mul(x, x);\n        y >>= 1;\n    }\n    return\
    \ result;\n}\n/*\nFactorial function\n            \n*/\nlong fact(long x)", "{\n\
    \    long carry;\n    while (y != 0) \n    {\n        carry = x & y;\n       \
    \ x = x ^ y;\n        y = carry << 1;\n    }\n    return x;\n}", "{ \n    // Iterate\
    \ till there is no carry  \n    while (y != 0) \n    { \n        // carry now\
    \ contains common set bits of x and y \n        long carry = x & y;  \n  \n  \
    \      // Sum of bits of x and y where at least one of the bits is not set \n\
    \        x = x ^ y; \n  \n        // Carry is shifted by one so that adding it\
    \ to x gives the required sum \n        y = carry << 1; \n    } \n    return x;\
    \ \n} ", "{ \n    // Iterate till there is no carry  \n    while (y != 0) \n \
    \   { \n        // carry now contains common set bits of x and y \n        long\
    \ carry = x & y;  \n  \n        // Sum of bits of x and y where at least one of\
    \ the bits is not set \n        x = x ^ y; \n  \n        // Carry is shifted by\
    \ one so that adding it to x gives the required sum \n        y = carry << 1;\
    \ \n    } \n    return x; \n} ", "{ \n    // Iterate till there is no carry  \n\
    \    while (y != 0) \n    { \n        // carry now contains common set bits of\
    \ x and y \n        long carry = x & y;  \n  \n        // Sum of bits of x and\
    \ y where at least one of the bits is not set \n        x = x ^ y; \n  \n    \
    \    // Carry is shifted by one so that adding it to x gives the required sum\
    \ \n        y = carry << 1; \n    } \n    return x; \n} \n/*\nSubtract two numbers\
    \ x and y\n            \n*/\nlong subtract(long x, long y) \n{ \n    // Iterate\
    \ till there is no carry \n    while (y != 0) \n    { \n        // borrow contains\
    \ common set bits of y and unset \n        // bits of x \n        long borrow\
    \ = (~x) & y; \n  \n        // Subtraction of bits of x and y where at least \n\
    \        // one of the bits is not set \n        x = x ^ y; \n  \n        // Borrow\
    \ is shifted by one so that subtracting it from \n        // x gives the required\
    \ sum \n        y = borrow << 1; \n    } \n    return x; \n} \n/*\nMultiply two\
    \ numbers x and y\n            \n*/\nlong multiply(long x, long y) \n{ \n    long\
    \ res = 0; // Initialize result \n  \n    // One by one multiply n with individual\
    \ bits of x \n    while (y > 0) \n    { \n        // If y is odd, add x to result\
    \ \n        if (y & 1) \n            res = add(res, x); \n  \n        // n is\
    \ multiplied by 2 \n        x = x << 1; \n  \n        // y is halved \n      \
    \  y = y >> 1; \n    } \n    return res; \n} \n/*\nDivide two numbers x and y\n\
    \            \n*/\nlong divide(long x, long y) \n{ \n    // Calculate sign of\
    \ divisor i.e., sign will be negative \n    // only if either one of them is negative",
  "{\n    long carry;\n    while (y != 0) \n    {\n        carry = x & y;\n      \
    \  x = x ^ y;\n        y = carry << 1;\n    }\n    return x;\n}", "{ \n    //\
    \ Iterate till there is no carry  \n    while (y != 0) \n    { \n        // carry\
    \ now contains common set bits of x and y \n        long carry = x & y;  \n  \n\
    \        // Sum of bits of x and y where at least one of the bits is not set \n\
    \        x = x ^ y; \n  \n        // Carry is shifted by one so that adding it\
    \ to x gives the required sum \n        y = carry << 1; \n    } \n    return x;\
    \ \n} ", "{ \n    // Iterate till there is no carry  \n    while (y != 0) \n \
    \   { \n        // carry now contains common set bits of x and y \n        long\
    \ carry = x & y;  \n  \n        // Sum of bits of x and y where at least one of\
    \ the bits is not set \n        x = x ^ y; \n  \n        // Carry is shifted by\
    \ one so that adding it to x gives the required sum \n        y = carry << 1;\
    \ \n    } \n    return x; \n} ", "{\n    long carry;\n    while (y != 0) \n  \
    \  {\n        carry = x & y;\n        x = x ^ y;\n        y = carry << 1;\n  \
    \  }\n    return x;\n}", "{ \n    // Iterate till there is no carry  \n    while\
    \ (y != 0) \n    { \n        // carry now contains common set bits of x and y\
    \ \n        long carry = x & y;  \n  \n        // Sum of bits of x and y where\
    \ at least one of the bits is not set \n        x = x ^ y; \n  \n        // Carry\
    \ is shifted by one so that adding it to x gives the required sum \n        y\
    \ = carry << 1; \n    } \n    return x; \n} ", "{\n    if (y == 0)\n        return\
    \ x;\n    else\n        return add(x ^ y, (x & y) << 1);\n}", "{ \n    // Iterate\
    \ till there is no carry  \n    while (y != 0) \n    { \n        // carry now\
    \ contains common set bits of x and y \n        long carry = x & y;  \n  \n  \
    \      // Sum of bits of x and y where at least one of the bits is not set \n\
    \        x = x ^ y; \n  \n        // Carry is shifted by one so that adding it\
    \ to x gives the required sum \n        y = carry << 1; \n    } \n    return x;\
    \ \n} ", "{ \n    long carry; \n    while (y != 0) \n    { \n        carry = x\
    \ & y; \n        x = x ^ y; \n        y = carry << 1; \n    } \n    return x;\
    \ \n} ", "{\n    // Iterate till there is no carry  \n    while (y != 0) \n  \
    \  {\n        // carry now contains common set bits of x and y\n        long carry\
    \ = x & y;  \n  \n        // Sum of bits of x and y where at least one of the\
    \ bits is not set\n        x = x ^ y; \n  \n        // Carry is shifted by one\
    \ so that adding it to x gives the required sum\n        y = carry << 1;\n   \
    \ }\n    return x;\n}", "{\n    // Iterate till there is no carry  \n    while\
    \ (y != 0) \n    {\n        // carry now contains common set bits of x and y\n\
    \        long carry = x & y;  \n  \n        // Sum of bits of x and y where at\
    \ least one of the bits is not set\n        x = x ^ y; \n  \n        // Carry\
    \ is shifted by one so that adding it to x gives the required sum\n        y =\
    \ carry << 1;\n    }\n    return x;\n}", "{\n    long carry;\n    while (y !=\
    \ 0) \n    {\n        carry = x & y;\n        x = x ^ y;\n        y = carry <<\
    \ 1;\n    }\n    return x;\n}", "{\n    long carry;\n    while (y != 0) \n   \
    \ {\n        carry = x & y;\n        x = x ^ y;\n        y = carry << 1;\n   \
    \ }\n    return x;\n}", "{\n    long carry;\n    while (y != 0)\n    {\n     \
    \   carry = x & y;\n        x = x ^ y;\n        y = carry << 1;\n    }\n    return\
    \ x;\n}", "{\n    while (y != 0)\n    {\n        long carry = x & y;  \n     \
    \   x = x ^ y; \n        y = carry << 1;\n    }\n    return x;\n}", "{ \n    //\
    \ Iterate till there is no carry  \n    while (y != 0) \n    { \n        // carry\
    \ now contains common set bits of x and y \n        long carry = x & y;  \n  \n\
    \        // Sum of bits of x and y where at least one of the bits is not set \n\
    \        x = x ^ y; \n  \n        // Carry is shifted by one so that adding it\
    \ to x gives the required sum \n        y = carry << 1; \n    } \n    return x;\
    \ \n} ", "{\n    long carry;\n    while (y != 0) \n    {\n        carry = x &\
    \ y;\n        x = x ^ y;\n        y = carry << 1;\n    }\n    return x;\n}", "{\
    \ \n    // Iterate till there is no carry  \n    while (y != 0) \n    { \n   \
    \     // carry now contains common set bits of x and y \n        long carry =\
    \ x & y;  \n  \n        // Sum of bits of x and y where at least one of the bits\
    \ is not set \n        x = x ^ y; \n  \n        // Carry is shifted by one so\
    \ that adding it to x gives the required sum \n        y = carry << 1; \n    }\
    \ \n    return x; \n} ", "{ \n    // Iterate till there is no carry  \n    while\
    \ (y != 0) \n    { \n        // carry now contains common set bits of x and y\
    \ \n        long carry = x & y;  \n  \n        // Sum of bits of x and y where\
    \ at least one of the bits is not set \n        x = x ^ y; \n  \n        // Carry\
    \ is shifted by one so that adding it to x gives the required sum \n        y\
    \ = carry << 1; \n    } \n    return x; \n} ", "{\n    long carry;\n    while\
    \ (y != 0) \n    {\n        carry = x & y;\n        x = x ^ y;\n        y = carry\
    \ << 1;\n    }\n    return x;\n}", "{ \n    // Iterate till there is no carry\
    \  \n    while (y != 0) \n    { \n        // carry now contains common set bits\
    \ of x and y \n        long carry = x & y;  \n  \n        // Sum of bits of x\
    \ and y where at least one of the bits is not set \n        x = x ^ y; \n  \n\
    \        // Carry is shifted by one so that adding it to x gives the required\
    \ sum \n        y = carry << 1; \n    } \n    return x; \n} ", "{\n    long carry;\n\
    \    while (y != 0)\n    {\n        carry = x & y;\n        x = x ^ y;\n     \
    \   y = carry << 1;\n    }\n    return x;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
