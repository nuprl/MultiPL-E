name: HumanEval_157_right_angle_triangle
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\n\n    Given the lengths of the\
  \ three sides of a triangle. Return True if the three\n    sides form a right-angled\
  \ triangle, False otherwise.\n    A right-angled triangle is a triangle in which\
  \ one angle is right angle or \n    90 degree.\n    Example:\n            \n*/\n\
  bool right_angle_triangle(long a, long b, long c) \n"
tests: "unittest\n{\n    alias candidate = right_angle_triangle;\n\n    assert(candidate(3L,\
  \ 4L, 5L) == true);\n    assert(candidate(1L, 2L, 3L) == false);\n    assert(candidate(10L,\
  \ 6L, 8L) == true);\n    assert(candidate(2L, 2L, 2L) == false);\n    assert(candidate(7L,\
  \ 24L, 25L) == true);\n    assert(candidate(10L, 5L, 7L) == false);\n    assert(candidate(5L,\
  \ 12L, 13L) == true);\n    assert(candidate(15L, 8L, 17L) == true);\n    assert(candidate(48L,\
  \ 55L, 73L) == true);\n    assert(candidate(1L, 1L, 1L) == false);\n    assert(candidate(2L,\
  \ 2L, 10L) == false);\n}\nvoid main(){}"
completions: ["{\n    return (a > 0 && b > 0 && c > 0) && (a*a + b*b == c*c || a*a\
    \ + c*c == b*b || b*b + c*c == a*a);\n}", "{\n    return (a > 0 && b > 0 && c\
    \ > 0) && (a * a + b * b == c * c || a * a + c * c == b * b || b * b + c * c ==\
    \ a * a);\n}", "{\n    // return (a*a + b*b == c*c) || (a*a + c*c == b*b) || (b*b\
    \ + c*c == a*a);\n    return (a*a + b*b == c*c) || (a*a + c*c == b*b) || (b*b\
    \ + c*c == a*a);\n}", "{\n    // Check if the triangle is right-angled\n    if\
    \ (a == 0 || b == 0 || c == 0)\n        return false;\n    if (a < 0 || b < 0\
    \ || c < 0)\n        return false;\n    if (a == b && b == c)\n        return\
    \ false;\n    if (a == b || b == c || a == c)\n        return false;\n    if (a\
    \ > b && a > c)\n        return (a * a == b * b + c * c);\n    if (b > a && b\
    \ > c)\n        return (b * b == a * a + c * c);\n    if (c > a && c > b)\n  \
    \      return (c * c == a * a + b * b);\n    return false;\n}", "{\n    long max\
    \ = max(a, max(b, c));\n    long min = min(a, min(b, c));\n    long mid = a +\
    \ b + c - max - min;\n    return max * max == min * min + mid * mid;\n}", "{\n\
    \    enum side { a_side, b_side, c_side } longest_side;\n    long longest_length;\n\
    \    long a_squared, b_squared, c_squared;\n    long a_plus_b, a_plus_c, b_plus_c;\n\
    \    long a_minus_b, a_minus_c, b_minus_c;\n    long a_times_b, a_times_c, b_times_c;\n\
    \    long a_div_b, a_div_c, b_div_c;\n    long a_mod_b, a_mod_c, b_mod_c;\n  \
    \  long a_pow_b, a_pow_c, b_pow_c;\n    long a_log_b, a_log_c, b_log_c;\n    long\
    \ a_and_b, a_and_c, b_and_c;\n    long a_or_b, a_or_c, b_or_c;\n    long a_xor_b,\
    \ a_xor_c, b_xor_c;\n    long a_lshift_b, a_lshift_c, b_lshift_c;\n    long a_rshift_b,\
    \ a_rshift_c, b_rshift_c;\n    long a_eq_b, a_eq_c, b_eq_c;\n    long a_ne_b,\
    \ a_ne_c, b_ne_c;\n    long a_lt_b, a_lt_c, b_lt_c;\n    long a_le_b, a_le_c,\
    \ b_le_c;\n    long a_gt_b, a_gt_c, b_gt_c;\n    long a_ge_b, a_ge_c, b_ge_c;\n\
    \    long a_assign_b, a_assign_c, b_assign_c;\n    long a_add_assign_b, a_add_assign_c,\
    \ b_add_assign_c;\n    long a_sub_assign_b, a_sub_assign_c", "{\n    return (a\
    \ * a + b * b == c * c) || (a * a + c * c == b * b) || (b * b + c * c == a * a);\n\
    }", "{\n    return (a > 0 && b > 0 && c > 0) && (a * a + b * b == c * c || a *\
    \ a + c * c == b * b || b * b + c * c == a * a);\n}", "{\n    // TODO: implement\n\
    \    return false;\n}", "{\n    // TODO: Implement your solution here\n    return\
    \ false;\n}", "{\n    return (a * a + b * b == c * c) || (a * a + c * c == b *\
    \ b) || (b * b + c * c == a * a);\n}", "{\n    return a * a + b * b == c * c;\n\
    }", "{\n    return (a > 0 && b > 0 && c > 0 && a + b > c && a + c > b && b + c\
    \ > a) &&\n           (a * a + b * b == c * c || a * a + c * c == b * b || b *\
    \ b + c * c == a * a);\n}\n/*\n    Example:\n        right_angle_triangle(3, 4,\
    \ 5) == True\n        right_angle_triangle(4, 3, 5) == True\n        right_angle_triangle(4,\
    \ 5, 3) == True\n        right_angle_triangle(5, 4, 3) == True\n        right_angle_triangle(5,\
    \ 3, 4) == True\n        right_angle_triangle(3, 5, 4) == True\n        right_angle_triangle(3,\
    \ 4, 6) == False\n        right_angle_triangle(4, 3, 6) == False\n        right_angle_triangle(4,\
    \ 6, 3) == False\n        right_angle_triangle(6, 4, 3) == False\n        right_angle_triangle(6,\
    \ 3, 4) == False\n        right_angle_triangle(3, 6, 4) == False\n        right_angle_triangle(3,\
    \ 4, -5) == False\n        right_angle_triangle(4, 3, -5) == False\n        right_angle_triangle(4,\
    \ -5, 3) == False\n        right_angle_triangle(-5, 4, 3) == False\n        right_angle_triangle(-5,\
    \ 3, 4) == False\n        right_angle_triangle(3, -5, 4) == False\n        right_angle_triangle(0,\
    \ 4, 3) == False\n        right_angle_triangle(4, 0, 3) == False\n        right_angle_triangle(4,\
    \ 3, 0) == False\n        right_angle_triangle(0, 0, 0) == False\n        right_angle_triangle(3,\
    \ 4, 5) == True\n        right_angle_triangle(4, 3, 5) == True\n        right_angle_triangle(4,\
    \ 5, 3) ==", "{\n    return (a * a + b * b == c * c) || (a * a + c * c == b *\
    \ b) || (b * b + c * c == a * a);\n}", "{\n    if (a == 0 || b == 0 || c == 0)\n\
    \        return false;\n    if (a == b && b == c)\n        return false;\n   \
    \ if (a == b || b == c || a == c)\n        return true;\n    if (a > b && a >\
    \ c)\n        return a * a == b * b + c * c;\n    if (b > a && b > c)\n      \
    \  return b * b == a * a + c * c;\n    if (c > a && c > b)\n        return c *\
    \ c == a * a + b * b;\n    return false;\n}", "{\n    return (a * a + b * b ==\
    \ c * c) || (a * a + c * c == b * b) || (b * b + c * c == a * a);\n}", "{\n  \
    \  // your code here\n    return false;\n}", "{\n    return (a * a + b * b ==\
    \ c * c) || (a * a + c * c == b * b) || (b * b + c * c == a * a);\n}", "{\n  \
    \  long max = max(a, max(b, c));\n    long min = min(a, min(b, c));\n    long\
    \ sum = a + b + c;\n    return (sum - max - min) * (sum - max - min) + min * min\
    \ == max * max;\n}", "{\n    return (a > 0 && b > 0 && c > 0) && (a * a + b *\
    \ b == c * c || a * a + c * c == b * b || b * b + c * c == a * a);\n}", "{\n \
    \   return (a * a + b * b == c * c) || (a * a + c * c == b * b) || (b * b + c\
    \ * c == a * a);\n}", "{\n    if (a == 0 || b == 0 || c == 0)\n        return\
    \ false;\n    long max = max(a, max(b, c));\n    long sum = a + b + c;\n    return\
    \ (max * max) == (sum - max) * (sum - max);\n}", "{\n    return (a*a + b*b ==\
    \ c*c) || (a*a + c*c == b*b) || (b*b + c*c == a*a);\n}", "{\n    //return a*a\
    \ + b*b == c*c;\n    return a*a + b*b == c*c || a*a + c*c == b*b || b*b + c*c\
    \ == a*a;\n}", "{\n    auto sides = tuple(a, b, c);\n    auto max_side = max(sides);\n\
    \    auto sides_without_max = sides.remove(max_side);\n    return max_side * max_side\
    \ == sides_without_max[0] * sides_without_max[0] + sides_without_max[1] * sides_without_max[1];\n\
    }", "{\n    return (a*a + b*b == c*c) || (a*a + c*c == b*b) || (b*b + c*c == a*a);\n\
    }", "{\n    //return (a*a + b*b == c*c) || (a*a + c*c == b*b) || (b*b + c*c ==\
    \ a*a);\n    return (a*a + b*b == c*c) || (a*a + c*c == b*b) || (b*b + c*c ==\
    \ a*a);\n}", "{\n    return (a*a + b*b == c*c) || (a*a + c*c == b*b) || (b*b +\
    \ c*c == a*a);\n}", "{\n    long max = max(a, max(b, c));\n    long min = min(a,\
    \ min(b, c));\n    long mid = a + b + c - max - min;\n    return max * max ==\
    \ mid * mid + min * min;\n}", "{\n    auto sides = tuple(a, b, c);\n    auto max_side\
    \ = max(sides);\n    auto sum_of_other_sides = sum(sides) - max_side;\n    return\
    \ max_side * max_side == sum_of_other_sides * sum_of_other_sides;\n}", "{\n  \
    \  return (a * a + b * b == c * c) || (a * a + c * c == b * b) || (b * b + c *\
    \ c == a * a);\n}", "{\n    return (a > 0 && b > 0 && c > 0) && (a*a + b*b ==\
    \ c*c || a*a + c*c == b*b || b*b + c*c == a*a);\n}", "{\n    return (a * a + b\
    \ * b == c * c) || (a * a + c * c == b * b) || (b * b + c * c == a * a);\n}",
  "{\n    long[] sides = [a, b, c];\n    sort(sides);\n    return pow(sides[0], 2)\
    \ + pow(sides[1], 2) == pow(sides[2], 2);\n}", "{\n    return (a * a + b * b ==\
    \ c * c) || (a * a + c * c == b * b) || (b * b + c * c == a * a);\n}", "{\n  \
    \  // TODO: Write your code here\n    return false;\n}", "{\n    if(a == 0 ||\
    \ b == 0 || c == 0)\n        return false;\n    long max = max(a, b, c);\n   \
    \ long sum = a + b + c;\n    long min = min(a, b, c);\n    if(max * max == sum\
    \ * sum - 2 * min * min)\n        return true;\n    return false;\n}", "{\n  \
    \  //return a*a + b*b == c*c;\n    return a*a + b*b == c*c || a*a + c*c == b*b\
    \ || b*b + c*c == a*a;\n}", "{\n    auto sides = tuple(a, b, c);\n    auto max_side\
    \ = max(sides);\n    auto sum_of_other_sides = sum(sides) - max_side;\n    return\
    \ max_side * max_side == sum_of_other_sides * sum_of_other_sides;\n}", "{\n  \
    \  // check if the triangle is right-angled\n    if (a == 0 || b == 0 || c ==\
    \ 0)\n        return false;\n    if (a < 0 || b < 0 || c < 0)\n        return\
    \ false;\n    if (a == b && b == c)\n        return false;\n    if (a == b ||\
    \ b == c || a == c)\n        return false;\n    if (a * a + b * b == c * c)\n\
    \        return true;\n    if (a * a + c * c == b * b)\n        return true;\n\
    \    if (b * b + c * c == a * a)\n        return true;\n    return false;\n}",
  "{\n    return a * a + b * b == c * c || a * a + c * c == b * b || b * b + c * c\
    \ == a * a;\n}", "{\n    //return a*a + b*b == c*c;\n    return (a*a + b*b ==\
    \ c*c) || (a*a + c*c == b*b) || (b*b + c*c == a*a);\n}", "{\n    long[] sides\
    \ = [a, b, c];\n    sort(sides);\n    return sides[0] * sides[0] + sides[1] *\
    \ sides[1] == sides[2] * sides[2];\n}", "{\n    return (a * a + b * b == c * c)\
    \ || (a * a + c * c == b * b) || (b * b + c * c == a * a);\n}", "{\n    auto sides\
    \ = tuple(a, b, c);\n    auto max_side = max(sides);\n    auto sum_of_other_sides\
    \ = sum(sides) - max_side;\n    return max_side * max_side == sum_of_other_sides\
    \ * sum_of_other_sides;\n}", "{\n    return (a * a + b * b == c * c) || (a * a\
    \ + c * c == b * b) || (b * b + c * c == a * a);\n}", "{\n    long max = max(a,\
    \ max(b, c));\n    long min = min(a, min(b, c));\n    long mid = a + b + c - max\
    \ - min;\n    return max * max == min * min + mid * mid;\n}", "{\n    auto sides\
    \ = tuple(a, b, c);\n    auto max_side = max(sides);\n    auto other_sides = sides.filter!(x\
    \ => x != max_side);\n    return max_side * max_side == other_sides[0] * other_sides[0]\
    \ + other_sides[1] * other_sides[1];\n}", "{\n    auto sides = tuple(a, b, c);\n\
    \    auto max_side = max(a, b, c);\n    auto sum_of_other_sides = a + b + c -\
    \ max_side;\n    return max_side * max_side == sum_of_other_sides * sum_of_other_sides;\n\
    }", "{\n    return (a * a + b * b == c * c) || (a * a + c * c == b * b) || (b\
    \ * b + c * c == a * a);\n}", "{\n    return (a * a + b * b == c * c) || (a *\
    \ a + c * c == b * b) || (b * b + c * c == a * a);\n}", "{\n    return a * a +\
    \ b * b == c * c;\n}", "{\n    return a*a + b*b == c*c;\n}", "{\n    return (a\
    \ * a + b * b == c * c) || (a * a + c * c == b * b) || (b * b + c * c == a * a);\n\
    }", "{\n    return (a * a + b * b == c * c) || (a * a + c * c == b * b) || (b\
    \ * b + c * c == a * a);\n}", "{\n    return (a > 0 && b > 0 && c > 0) && (a *\
    \ a + b * b == c * c || a * a + c * c == b * b || b * b + c * c == a * a);\n}",
  "{\n    return (a * a + b * b == c * c) || (a * a + c * c == b * b) || (b * b +\
    \ c * c == a * a);\n}", "{\n    long[] sides = [a, b, c];\n    sort(sides);\n\
    \    return sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2];\n\
    }", "{\n    long max = max(a, max(b, c));\n    long min = min(a, min(b, c));\n\
    \    long mid = a + b + c - max - min;\n    return max * max == mid * mid + min\
    \ * min;\n}", "{\n    return (a * a + b * b == c * c) || (a * a + c * c == b *\
    \ b) || (b * b + c * c == a * a);\n}", "{\n    long max = max(a, max(b, c));\n\
    \    long min = min(a, min(b, c));\n    long mid = a + b + c - max - min;\n  \
    \  return max * max == mid * mid + min * min;\n}", "{\n    return a * a + b *\
    \ b == c * c || a * a + c * c == b * b || b * b + c * c == a * a;\n}", "{\n  \
    \  auto sides = [a, b, c];\n    auto max = maxElement(sides);\n    auto sum =\
    \ a + b + c;\n    return max * max == a * a + b * b + c * c - max * max;\n}",
  "{\n    return (a * a + b * b == c * c) || (a * a + c * c == b * b) || (b * b +\
    \ c * c == a * a);\n}", "{\n    return (a * a + b * b == c * c) || (a * a + c\
    \ * c == b * b) || (b * b + c * c == a * a);\n}", "{\n    //return (a*a + b*b\
    \ == c*c) || (a*a + c*c == b*b) || (b*b + c*c == a*a);\n    return (a*a + b*b\
    \ == c*c) || (a*a + c*c == b*b) || (b*b + c*c == a*a);\n}", "{\n    return (a\
    \ * a + b * b == c * c) || (a * a + c * c == b * b) || (b * b + c * c == a * a);\n\
    }", "{\n    // TODO: implement this function\n    return true;\n}", "{\n    return\
    \ (a*a + b*b == c*c) || (a*a + c*c == b*b) || (b*b + c*c == a*a);\n}", "{\n  \
    \  // If a^2 + b^2 = c^2, then it is a right-angled triangle.\n    return (a *\
    \ a + b * b == c * c) || (a * a + c * c == b * b) || (b * b + c * c == a * a);\n\
    }", "{\n    return (a * a + b * b == c * c) || (a * a + c * c == b * b) || (b\
    \ * b + c * c == a * a);\n}", "{\n    return (a * a + b * b == c * c) || (a *\
    \ a + c * c == b * b) || (b * b + c * c == a * a);\n}", "{\n    return (a * a\
    \ + b * b == c * c) || (a * a + c * c == b * b) || (b * b + c * c == a * a);\n\
    }", "{\n    return (a*a + b*b == c*c) || (a*a + c*c == b*b) || (b*b + c*c == a*a);\n\
    }", "{\n    if (a == 0 || b == 0 || c == 0)\n        return false;\n    if (a\
    \ < 0 || b < 0 || c < 0)\n        return false;\n    if (a == b && b == c)\n \
    \       return false;\n    if (a == b || b == c || a == c)\n        return true;\n\
    \    if (a > b && a > c)\n        return a * a == b * b + c * c;\n    if (b >\
    \ a && b > c)\n        return b * b == a * a + c * c;\n    if (c > a && c > b)\n\
    \        return c * c == a * a + b * b;\n    return false;\n}", "{\n    return\
    \ (a * a + b * b == c * c) || (a * a + c * c == b * b) || (b * b + c * c == a\
    \ * a);\n}", "{\n    long max = max(a, max(b, c));\n    long min = min(a, min(b,\
    \ c));\n    long mid = a + b + c - max - min;\n    return max * max == mid * mid\
    \ + min * min;\n}", "{\n    return (a * a + b * b == c * c) || (a * a + c * c\
    \ == b * b) || (b * b + c * c == a * a);\n}", "{\n    return (a * a + b * b ==\
    \ c * c) || (a * a + c * c == b * b) || (b * b + c * c == a * a);\n}", "{\n  \
    \  return (a * a + b * b == c * c) || (a * a + c * c == b * b) || (b * b + c *\
    \ c == a * a);\n}", "{\n    return (a * a + b * b == c * c) || (a * a + c * c\
    \ == b * b) || (b * b + c * c == a * a);\n}", "{\n    return (a * a + b * b ==\
    \ c * c) || (a * a + c * c == b * b) || (b * b + c * c == a * a);\n}", "{\n  \
    \  // your code here\n    return (a*a + b*b == c*c) || (a*a + c*c == b*b) || (b*b\
    \ + c*c == a*a);\n}", "{\n    return (a * a + b * b == c * c) || (a * a + c *\
    \ c == b * b) || (b * b + c * c == a * a);\n}", "{\n    return (a*a + b*b == c*c)\
    \ || (a*a + c*c == b*b) || (b*b + c*c == a*a);\n}", "{\n    // a^2 + b^2 = c^2\n\
    \    return (a*a + b*b == c*c) || (a*a + c*c == b*b) || (b*b + c*c == a*a);\n}",
  "{\n    return a * a + b * b == c * c;\n}", "{\n    // TODO: Implement this function\n\
    \    return false;\n}", "{\n    long[] sides = [a, b, c];\n    sort(sides);\n\
    \    long a2 = sides[0] * sides[0];\n    long b2 = sides[1] * sides[1];\n    long\
    \ c2 = sides[2] * sides[2];\n    return a2 + b2 == c2;\n}", "{\n    // a^2 + b^2\
    \ = c^2\n    return (a * a + b * b == c * c) || (a * a + c * c == b * b) || (b\
    \ * b + c * c == a * a);\n}", "{\n    return (a > 0 && b > 0 && c > 0) && (a *\
    \ a + b * b == c * c || a * a + c * c == b * b || b * b + c * c == a * a);\n}",
  "{\n    return (a*a + b*b == c*c) || (a*a + c*c == b*b) || (b*b + c*c == a*a);\n\
    }", "{\n    long max = max(a, max(b, c));\n    long min = min(a, min(b, c));\n\
    \    long mid = a + b + c - max - min;\n    return max * max == min * min + mid\
    \ * mid;\n}", "{\n    //return a*a + b*b == c*c;\n    return a*a + b*b == c*c\
    \ || a*a + c*c == b*b || b*b + c*c == a*a;\n}", "{\n    if (a == 0 || b == 0 ||\
    \ c == 0)\n        return false;\n    if (a == b && b == c)\n        return false;\n\
    \    if (a == b || b == c || a == c)\n        return true;\n    if (a > b && a\
    \ > c)\n        return a * a == b * b + c * c;\n    if (b > a && b > c)\n    \
    \    return b * b == a * a + c * c;\n    if (c > a && c > b)\n        return c\
    \ * c == a * a + b * b;\n    return false;\n}", "{\n    if (a == 0 || b == 0 ||\
    \ c == 0)\n        return false;\n    if (a == b && b == c)\n        return false;\n\
    \    if (a == b || b == c || a == c)\n        return true;\n    if (a > b && a\
    \ > c)\n        return a * a == b * b + c * c;\n    if (b > a && b > c)\n    \
    \    return b * b == a * a + c * c;\n    if (c > a && c > b)\n        return c\
    \ * c == a * a + b * b;\n    return false;\n}", "{\n    return a * a + b * b ==\
    \ c * c;\n}", "{\n    return (a * a + b * b == c * c) || (a * a + c * c == b *\
    \ b) || (b * b + c * c == a * a);\n}", "{\n    if (a == 0 || b == 0 || c == 0)\n\
    \        return false;\n    if (a < 0 || b < 0 || c < 0)\n        return false;\n\
    \    if (a == b && b == c)\n        return false;\n    if (a == b || b == c ||\
    \ a == c)\n        return true;\n    if (a > b && a > c)\n        return a * a\
    \ == b * b + c * c;\n    if (b > a && b > c)\n        return b * b == a * a +\
    \ c * c;\n    if (c > a && c > b)\n        return c * c == a * a + b * b;\n  \
    \  return false;\n}", "{\n    return a*a + b*b == c*c;\n}", "{\n    return (a\
    \ * a + b * b == c * c) || (a * a + c * c == b * b) || (b * b + c * c == a * a);\n\
    }", "{\n    return (a*a + b*b == c*c) || (a*a + c*c == b*b) || (b*b + c*c == a*a);\n\
    }", "{\n    return (a * a + b * b == c * c) || (a * a + c * c == b * b) || (b\
    \ * b + c * c == a * a);\n}", "{\n    return (a > 0 && b > 0 && c > 0) && (a *\
    \ a + b * b == c * c || a * a + c * c == b * b || b * b + c * c == a * a);\n}",
  "{\n    return (a*a + b*b == c*c) || (a*a + c*c == b*b) || (b*b + c*c == a*a);\n\
    }", "{\n    // TODO: Write your code here\n    return false;\n}", "{\n    return\
    \ (a*a + b*b == c*c) || (a*a + c*c == b*b) || (b*b + c*c == a*a);\n}", "{\n  \
    \  long[] sides = [a, b, c];\n    sort(sides);\n    return pow(sides[0], 2) +\
    \ pow(sides[1], 2) == pow(sides[2], 2);\n}", "{\n    return (a * a + b * b ==\
    \ c * c) || (a * a + c * c == b * b) || (b * b + c * c == a * a);\n}", "{\n  \
    \  return (a * a + b * b == c * c) || (a * a + c * c == b * b) || (b * b + c *\
    \ c == a * a);\n}", "{\n    // write your code here\n    return (a * a + b * b\
    \ == c * c) || (a * a + c * c == b * b) || (b * b + c * c == a * a);\n}", "{\n\
    \    return (a > 0 && b > 0 && c > 0) && \n           (a * a + b * b == c * c\
    \ || \n            a * a + c * c == b * b || \n            b * b + c * c == a\
    \ * a);\n}", "{\n    if(a <= 0 || b <= 0 || c <= 0)\n        return false;\n \
    \   if(a == b && b == c)\n        return false;\n    if(a == b || b == c || a\
    \ == c)\n        return true;\n    if(a > b && a > c)\n        return a * a ==\
    \ b * b + c * c;\n    if(b > a && b > c)\n        return b * b == a * a + c *\
    \ c;\n    if(c > a && c > b)\n        return c * c == a * a + b * b;\n    return\
    \ false;\n}", "{\n    // Check if a, b, c are positive\n    if (a <= 0 || b <=\
    \ 0 || c <= 0)\n        return false;\n    // Check if a, b, c are integers\n\
    \    if (a != cast(long)a || b != cast(long)b || c != cast(long)c)\n        return\
    \ false;\n    // Check if a, b, c are sides of a triangle\n    if (a + b <= c\
    \ || a + c <= b || b + c <= a)\n        return false;\n    // Check if a, b, c\
    \ form a right-angled triangle\n    if (a * a + b * b == c * c || a * a + c *\
    \ c == b * b || b * b + c * c == a * a)\n        return true;\n    return false;\n\
    }", "{\n    return (a * a + b * b == c * c) || (a * a + c * c == b * b) || (b\
    \ * b + c * c == a * a);\n}", "{\n    // TODO: implement\n    return false;\n}",
  "{\n    return a * a + b * b == c * c;\n}", "{\n    return (a * a + b * b == c *\
    \ c) || (a * a + c * c == b * b) || (b * b + c * c == a * a);\n}", "{\n    return\
    \ (a*a + b*b == c*c) || (a*a + c*c == b*b) || (b*b + c*c == a*a);\n}", "{\n  \
    \  return (a*a + b*b == c*c) || (a*a + c*c == b*b) || (b*b + c*c == a*a);\n}",
  "{\n    return (a * a + b * b == c * c) || (a * a + c * c == b * b) || (b * b +\
    \ c * c == a * a);\n}", "{\n    // check if a, b, c are positive\n    if (a <=\
    \ 0 || b <= 0 || c <= 0)\n        return false;\n    \n    // check if a, b, c\
    \ are integers\n    if (a != cast(long)a || b != cast(long)b || c != cast(long)c)\n\
    \        return false;\n    \n    // check if a, b, c are the sides of a triangle\n\
    \    if (a + b <= c || a + c <= b || b + c <= a)\n        return false;\n    \n\
    \    // check if a, b, c form a right-angled triangle\n    if (a * a + b * b ==\
    \ c * c || a * a + c * c == b * b || b * b + c * c == a * a)\n        return true;\n\
    \    else\n        return false;\n}", "{\n    return (a*a + b*b == c*c) || (a*a\
    \ + c*c == b*b) || (b*b + c*c == a*a);\n}", "{\n    return (a * a + b * b == c\
    \ * c) || (a * a + c * c == b * b) || (b * b + c * c == a * a);\n}", "{\n    return\
    \ (a * a + b * b == c * c) || (a * a + c * c == b * b) || (b * b + c * c == a\
    \ * a);\n}", "{\n    if (a == 0 || b == 0 || c == 0)\n        return false;\n\
    \    if (a == b && b == c)\n        return false;\n    if (a == b || b == c ||\
    \ a == c)\n        return true;\n    long max = max(a, max(b, c));\n    long min\
    \ = min(a, min(b, c));\n    long mid = a + b + c - max - min;\n    return max\
    \ * max == min * min + mid * mid;\n}", "{\n    return (a * a + b * b == c * c)\
    \ || (a * a + c * c == b * b) || (b * b + c * c == a * a);\n}", "{\n    return\
    \ (a > 0 && b > 0 && c > 0) && (a*a + b*b == c*c || a*a + c*c == b*b || b*b +\
    \ c*c == a*a);\n}", "{\n    return (a * a + b * b == c * c) || (a * a + c * c\
    \ == b * b) || (b * b + c * c == a * a);\n}", "{\n    auto sides = tuple(a, b,\
    \ c);\n    sort(sides);\n    return pow(sides[0], 2) + pow(sides[1], 2) == pow(sides[2],\
    \ 2);\n}", "{\n    // sort the sides in ascending order\n    auto sides = tuple(a,\
    \ b, c).sort();\n    // Pythagorean theorem\n    return sides[0] * sides[0] +\
    \ sides[1] * sides[1] == sides[2] * sides[2];\n}", "{\n    // TODO: implement\n\
    \    return false;\n}", "{\n    // your code here\n    auto sides = tuple(a, b,\
    \ c);\n    auto max_side = max(sides);\n    auto other_sides = sides.filter!(x\
    \ => x != max_side);\n    return max_side * max_side == other_sides[0] * other_sides[0]\
    \ + other_sides[1] * other_sides[1];\n}", "{\n    long[] sides = [a, b, c];\n\
    \    sort(sides);\n    return sides[0] * sides[0] + sides[1] * sides[1] == sides[2]\
    \ * sides[2];\n}", "{\n    //return (a*a + b*b == c*c);\n    return (a*a + b*b\
    \ == c*c) || (a*a + c*c == b*b) || (b*b + c*c == a*a);\n}", "{\n    return (a*a\
    \ + b*b == c*c) || (a*a + c*c == b*b) || (b*b + c*c == a*a);\n}", "{\n    return\
    \ (a > 0 && b > 0 && c > 0) && (a*a + b*b == c*c || a*a + c*c == b*b || b*b +\
    \ c*c == a*a);\n}", "{\n    auto sides = tuple(a, b, c);\n    auto max = maxElement(sides);\n\
    \    auto sum = sum(sides);\n    return (sum - max) > max;\n}", "{\n    // Use\
    \ Pythagorean theorem to check if the triangle is right-angled.\n    // The theorem\
    \ states that:\n    // In a right-angled triangle, the square of the hypotenuse\
    \ is equal to the sum of the squares of the other two sides.\n    // a^2 + b^2\
    \ = c^2\n    // c^2 - a^2 - b^2 = 0\n    // c^2 - a^2 - b^2 == 0\n    // c^2 ==\
    \ a^2 + b^2\n    // c == sqrt(a^2 + b^2)\n    // c == sqrt(pow(a, 2) + pow(b,\
    \ 2))\n    // c == sqrt(pow(a, 2) + pow(b, 2))\n    // c == sqrt(pow(a, 2) + pow(b,\
    \ 2))\n    // c == sqrt(pow(a, 2) + pow(b, 2))\n    // c == sqrt(pow(a, 2) + pow(b,\
    \ 2))\n    // c == sqrt(pow(a, 2) + pow(b, 2))\n    // c == sqrt(pow(a, 2) + pow(b,\
    \ 2))\n    // c == sqrt(pow(a, 2) + pow(b, 2))\n    // c == sqrt(pow(a, 2) + pow(b,\
    \ 2))\n    // c == sqrt(pow(a, 2) + pow(b, 2))\n    // c == sqrt(pow(a, 2) + pow(b,\
    \ 2))\n    // c == sqrt(pow(a, 2) + pow(b, 2))\n    // c == sqrt(pow(a, 2) + pow(b,\
    \ 2))\n    // c == sqrt(pow(a, 2) + pow(b, 2))\n    // c == sqrt(pow(a, 2) + pow(b,\
    \ 2))\n    // c == sqrt(pow(a, 2) + pow(b, 2))\n    // c == sqrt(pow(a, 2) + pow(b,\
    \ 2))\n    //", "{\n    auto sides = tuple(a, b, c);\n    auto max_side = max(sides);\n\
    \    auto other_sides = sides.filter!(x => x != max_side);\n    return max_side\
    \ * max_side == other_sides[0] * other_sides[0] + other_sides[1] * other_sides[1];\n\
    }", "{\n    // TODO: Implement me\n    return false;\n}", "{\n    // a^2 + b^2\
    \ = c^2\n    return (a * a + b * b == c * c) || (b * b + c * c == a * a) || (c\
    \ * c + a * a == b * b);\n}", "{\n    return (a * a + b * b == c * c) || (a *\
    \ a + c * c == b * b) || (b * b + c * c == a * a);\n}", "{\n    return (a * a\
    \ + b * b == c * c) || (a * a + c * c == b * b) || (b * b + c * c == a * a);\n\
    }", "{\n    return (a * a + b * b == c * c) || (a * a + c * c == b * b) || (b\
    \ * b + c * c == a * a);\n}", "{\n    auto sides = [a, b, c];\n    auto max_side\
    \ = max(a, max(b, c));\n    auto sum_of_other_sides = reduce!((x, y) => x + y)(sides);\n\
    \    return max_side * max_side == sum_of_other_sides - max_side * max_side;\n\
    }", "{\n    auto sides = tuple(a, b, c);\n    auto max_side = max(sides);\n  \
    \  auto sum_of_other_sides = sum(sides) - max_side;\n    return max_side * max_side\
    \ == sum_of_other_sides * sum_of_other_sides;\n}", "{\n    auto sides = tuple(a,\
    \ b, c);\n    auto max = maxElement(sides);\n    auto sum = reduce!((a, b) =>\
    \ a + b)(sides);\n    return max * max == sum - max * max;\n}", "{\n    return\
    \ (a*a + b*b == c*c) || (a*a + c*c == b*b) || (b*b + c*c == a*a);\n}", "{\n  \
    \  long max = max(a, max(b, c));\n    long sum = a + b + c;\n    return (max *\
    \ max) == (sum - max) * (sum - max);\n}", "{\n    // TODO: implement\n    return\
    \ false;\n}", "{\n    return (a * a + b * b == c * c) || (a * a + c * c == b *\
    \ b) || (b * b + c * c == a * a);\n}", "{\n    auto sides = tuple(a, b, c);\n\
    \    auto max_side = max(sides);\n    auto other_sides = sides.filter!(x => x\
    \ != max_side);\n    return max_side * max_side == other_sides[0] * other_sides[0]\
    \ + other_sides[1] * other_sides[1];\n}", "{\n    return (a * a + b * b == c *\
    \ c) || (a * a + c * c == b * b) || (b * b + c * c == a * a);\n}", "{\n    return\
    \ (a * a + b * b == c * c) || (a * a + c * c == b * b) || (b * b + c * c == a\
    \ * a);\n}", "{\n    return (a * a + b * b == c * c) || (a * a + c * c == b *\
    \ b) || (b * b + c * c == a * a);\n}", "{\n    return (a * a + b * b == c * c)\
    \ || (a * a + c * c == b * b) || (b * b + c * c == a * a);\n}", "{\n    return\
    \ a * a + b * b == c * c;\n}", "{\n    return (a*a + b*b == c*c) || (a*a + c*c\
    \ == b*b) || (b*b + c*c == a*a);\n}", "{\n    // TODO: Implement your solution\
    \ here\n    return false;\n}", "{\n    return (a > 0 && b > 0 && c > 0 && a *\
    \ a + b * b == c * c);\n}", "{\n    return (a * a + b * b == c * c) || (a * a\
    \ + c * c == b * b) || (b * b + c * c == a * a);\n}", "{\n    return (a * a +\
    \ b * b == c * c) || (a * a + c * c == b * b) || (b * b + c * c == a * a);\n}",
  "{\n    return (a > 0 && b > 0 && c > 0) && (a * a + b * b == c * c || a * a + c\
    \ * c == b * b || b * b + c * c == a * a);\n}", "{\n    return a * a + b * b ==\
    \ c * c;\n}", "{\n    return (a * a + b * b == c * c) || (a * a + c * c == b *\
    \ b) || (b * b + c * c == a * a);\n}", "{\n    long[] sides = [a, b, c];\n   \
    \ sort(sides);\n    return sides[0] * sides[0] + sides[1] * sides[1] == sides[2]\
    \ * sides[2];\n}", "{\n    return (a * a + b * b == c * c) || (a * a + c * c ==\
    \ b * b) || (b * b + c * c == a * a);\n}", "{\n    return (a * a + b * b == c\
    \ * c) || (a * a + c * c == b * b) || (b * b + c * c == a * a);\n}", "{\n    return\
    \ (a > 0 && b > 0 && c > 0) && (a * a + b * b == c * c || a * a + c * c == b *\
    \ b || b * b + c * c == a * a);\n}", "{\n    return (a * a + b * b == c * c) ||\
    \ (a * a + c * c == b * b) || (b * b + c * c == a * a);\n}", "{\n    if (a ==\
    \ 0 || b == 0 || c == 0)\n        return false;\n    long max = max(a, max(b,\
    \ c));\n    long min = min(a, min(b, c));\n    long mid = a + b + c - max - min;\n\
    \    return max * max == mid * mid + min * min;\n}", "{\n    // if a^2 + b^2 =\
    \ c^2 then it is a right angle triangle\n    return (a * a + b * b == c * c);\n\
    }", "{\n    auto sides = tuple(a, b, c);\n    sort(sides);\n    return sides[0]\
    \ * sides[0] + sides[1] * sides[1] == sides[2] * sides[2];\n}", "{\n    return\
    \ (a > 0 && b > 0 && c > 0) && (a * a + b * b == c * c || a * a + c * c == b *\
    \ b || b * b + c * c == a * a);\n}", "{\n    long[] sides = [a, b, c];\n    sort(sides);\n\
    \    return pow(sides[0], 2) + pow(sides[1], 2) == pow(sides[2], 2);\n}", "{\n\
    \    return (a * a + b * b == c * c) || (a * a + c * c == b * b) || (b * b + c\
    \ * c == a * a);\n}", "{\n    return (a * a + b * b == c * c) || (a * a + c *\
    \ c == b * b) || (b * b + c * c == a * a);\n}", "{\n    // Write your code here\n\
    \    // return true if the three sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or 90 degree.\n    // Example:\n    //     Input: a = 3, b = 4, c = 5\n    //\
    \     Output: True\n    //     Explanation:\n    //     The triangle with sides\
    \ 3, 4, 5 is a right-angled triangle.\n    //     Input: a = 3, b = 4, c = 6\n\
    \    //     Output: False\n    //     Explanation:\n    //     The triangle with\
    \ sides 3, 4, 6 is not a right-angled triangle.\n    //     Input: a = 3, b =\
    \ 4, c = 7\n    //     Output: False\n    //     Explanation:\n    //     The\
    \ triangle with sides 3, 4, 7 is not a right-angled triangle.\n    //     Input:\
    \ a = 3, b = 4, c = 8\n    //     Output: False\n    //     Explanation:\n   \
    \ //     The triangle with sides 3, 4, 8 is not a right-angled triangle.\n   \
    \ //     Input: a = 3, b = 4, c = 9\n    //     Output: False\n    //     Explanation:\n\
    \    //     The triangle with sides 3, 4, 9 is not a right-angled triangle.\n\
    \    //     Input: a = 3, b = 4, c = 10\n    //     Output: False\n    //    \
    \ Explanation:\n    //     The triangle with sides 3, 4, 10 is not a right-angled\
    \ triangle.\n    //     Input: a = 3, b = 4, c = 11\n    //     Output: False\n\
    \    //     Explanation:\n    //     The triangle with sides 3, 4, 11 is not a\
    \ right-angled triangle.\n    //     Input: a = 3, b = 4, c = 12\n    //     Output:\
    \ False\n    //     Explanation:\n    //     The triangle with sides 3, 4, 12\
    \ is not a right-angled triangle.\n    //     Input: a = 3, b = 4, c = 13\n  \
    \  //     Output: False\n    //     Explanation:\n    //     The triangle with\
    \ sides 3, 4", "{\n    return (a*a + b*b == c*c) || (a*a + c*c == b*b) || (b*b\
    \ + c*c == a*a);\n}", "{\n    // The longest side of the triangle is always less\
    \ than the sum of the other two sides\n    // The longest side of the triangle\
    \ is always greater than the difference of the other two sides\n    // The longest\
    \ side of the triangle is always greater than the other two sides\n    // The\
    \ longest side of the triangle is always greater than the square root of the sum\
    \ of the squares of the other two sides\n    // The longest side of the triangle\
    \ is always greater than the square root of the difference of the squares of the\
    \ other two sides\n    // The longest side of the triangle is always greater than\
    \ the square root of the sum of the squares of the other two sides\n    // The\
    \ longest side of the triangle is always greater than the square root of the difference\
    \ of the squares of the other two sides\n    // The longest side of the triangle\
    \ is always greater than the square root of the sum of the squares of the other\
    \ two sides\n    // The longest side of the triangle is always greater than the\
    \ square root of the difference of the squares of the other two sides\n    //\
    \ The longest side of the triangle is always greater than the square root of the\
    \ sum of the squares of the other two sides\n    // The longest side of the triangle\
    \ is always greater than the square root of the difference of the squares of the\
    \ other two sides\n    // The longest side of the triangle is always greater than\
    \ the square root of the sum of the squares of the other two sides\n    // The\
    \ longest side of the triangle is always greater than the square root of the difference\
    \ of the squares of the other two sides\n    // The longest side of the triangle\
    \ is always greater than the square root of the sum of the squares of the other\
    \ two sides\n    // The longest side of the triangle is always greater than the\
    \ square root of the difference of the squares of the other two sides\n    //\
    \ The longest side of the triangle is always greater than the square root of the\
    \ sum of the squares of the other two sides\n    // The longest side of the triangle\
    \ is always greater than the square root of the difference of the squares of the\
    \ other two sides\n    // The longest side of the triangle is always greater than\
    \ the square root of the sum of the squares of the other two sides\n    // The\
    \ longest side of the triangle is always greater than the square root of the difference\
    \ of the squares of the other two sides\n    // The longest side of the triangle\
    \ is always greater than the square root of the sum of the", "{\n    return (a*a\
    \ + b*b == c*c) || (a*a + c*c == b*b) || (b*b + c*c == a*a);\n}", "{\n    //return\
    \ a*a + b*b == c*c;\n    return a*a + b*b == c*c || a*a + c*c == b*b || b*b +\
    \ c*c == a*a;\n}", "{\n    return (a*a + b*b == c*c) || (a*a + c*c == b*b) ||\
    \ (b*b + c*c == a*a);\n}", "{\n    return (a * a + b * b == c * c) || (a * a +\
    \ c * c == b * b) || (b * b + c * c == a * a);\n}", "{\n    return (a * a + b\
    \ * b == c * c) || (a * a + c * c == b * b) || (b * b + c * c == a * a);\n}",
  "{\n    // TODO: implement\n    return false;\n}", "{\n    // TODO: implement\n\
    \    return false;\n}", "{\n    //return a * a + b * b == c * c;\n    return a\
    \ * a + b * b == c * c || a * a + c * c == b * b || b * b + c * c == a * a;\n}",
  "{\n    return (a * a + b * b == c * c) || (a * a + c * c == b * b) || (b * b +\
    \ c * c == a * a);\n}", "{\n    auto sides = [a, b, c].sort();\n    return pow(sides[0],\
    \ 2) + pow(sides[1], 2) == pow(sides[2], 2);\n}", "{\n    auto sides = tuple(a,\
    \ b, c);\n    auto max = maxElement(sides);\n    auto sum = reduce!((a, b) =>\
    \ a + b)(sides);\n    return max * max == sum - max * max;\n}", "{\n    return\
    \ (a*a + b*b == c*c) || (a*a + c*c == b*b) || (b*b + c*c == a*a);\n}", "{\n  \
    \  // your code here\n    return (a*a + b*b == c*c) || (a*a + c*c == b*b) || (b*b\
    \ + c*c == a*a);\n}", "{\n    auto sides = tuple(a, b, c);\n    return sides.max\
    \ == sides.min + sides.middle;\n}", "{\n    // TODO: implement\n    return false;\n\
    }", "{\n    return (a * a + b * b == c * c) || (a * a + c * c == b * b) || (b\
    \ * b + c * c == a * a);\n}", "{\n    return (a * a + b * b == c * c) || (a *\
    \ a + c * c == b * b) || (b * b + c * c == a * a);\n}", "{\n    auto sides = tuple(a,\
    \ b, c);\n    return (sides[0] * sides[0] + sides[1] * sides[1] == sides[2] *\
    \ sides[2]) ||\n           (sides[0] * sides[0] + sides[2] * sides[2] == sides[1]\
    \ * sides[1]) ||\n           (sides[1] * sides[1] + sides[2] * sides[2] == sides[0]\
    \ * sides[0]);\n}", "{\n    long[] arr = [a, b, c];\n    sort(arr);\n    return\
    \ arr[0] * arr[0] + arr[1] * arr[1] == arr[2] * arr[2];\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
