language: d
name: HumanEval_6_parse_nested_parens
results:
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long max_depth = 0;\n    long current_depth = 0;\n    foreach(c;\
    \ paren_string)\n    {\n        if(c == '(')\n        {\n            current_depth++;\n\
    \            max_depth = max(max_depth, current_depth);\n        }\n        else\
    \ if(c == ')')\n        {\n            current_depth--;\n        }\n        else\
    \ if(c == ' ')\n        {\n            result ~= max_depth;\n            max_depth\
    \ = 0;\n            current_depth = 0;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnzoptv3z.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    int max_depth = 0;\n    int current_depth = 0;\n    foreach(paren;\
    \ paren_string)\n    {\n        if(paren == '(')\n        {\n            current_depth++;\n\
    \            max_depth = max(max_depth, current_depth);\n        }\n        else\
    \ if(paren == ')')\n        {\n            current_depth--;\n        }\n     \
    \   else\n        {\n            result ~= max_depth;\n            max_depth =\
    \ 0;\n            current_depth = 0;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpshw4pksz.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    int i = 0;\n    int max_depth = 0;\n    int depth = 0;\n    foreach(c;\
    \ paren_string)\n    {\n        if(c == '(')\n        {\n            depth++;\n\
    \            max_depth = max(max_depth, depth);\n        }\n        else if(c\
    \ == ')')\n        {\n            depth--;\n        }\n        else if(c == '\
    \ ')\n        {\n            result ~= max_depth;\n            max_depth = 0;\n\
    \            depth = 0;\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"(()()) ((()))\
    \ () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (()) ((()))\
    \ (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\")\
    \ == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyr5bkol1.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result = new long[paren_string.length];\n    int i = 0;\n    foreach(paren;\
    \ paren_string.split(\" \")) \n    {\n        int max_nesting = 0;\n        int\
    \ nesting = 0;\n        foreach(c; paren) \n        {\n            if(c == '(')\
    \ \n            {\n                ++nesting;\n                max_nesting = max(max_nesting,\
    \ nesting);\n            }\n            else if(c == ')') \n            {\n  \
    \              --nesting;\n            }\n        }\n        result[i++] = max_nesting;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = parse_nested_parens;\n\
    \n    assert(candidate(\"(()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n\
    \    assert(candidate(\"() (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n   \
    \ assert(candidate(\"(()(())((())))\") == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpafjmfue2.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long max_depth = 0;\n    long depth = 0;\n    foreach(c; paren_string)\n\
    \    {\n        if(c == '(')\n        {\n            depth++;\n            max_depth\
    \ = max(max_depth, depth);\n        }\n        else if(c == ')')\n        {\n\
    \            depth--;\n        }\n        else if(c == ' ')\n        {\n     \
    \       result ~= max_depth;\n            max_depth = 0;\n            depth =\
    \ 0;\n        }\n    }\n    result ~= max_depth;\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"(()())\
    \ ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (())\
    \ ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3pi3ol54.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n  \
    \  int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n\
    \    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n\
    \    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int aa =\
    \ 0;\n    int ab = 0;\n    int ac = 0;\n    int ad = 0;\n    int ae = 0;\n   \
    \ int af = 0;\n    int ag = 0;\n    int ah = 0;\n    int ai = 0;\n    int aj =\
    \ 0;\n    int ak = 0;\n    int al = 0;\n    int am = 0;\n    int an = 0;\n   \
    \ int ao = 0;\n    int ap = 0;\n    int aq = 0;\n    int ar = 0;\n    int as =\
    \ 0;\n    int at = 0;\n    int au = 0;\n    int av = 0;\n    int aw = 0;\n   \
    \ int ax = 0;\n    int ay = 0;\n    int az = 0;\n    int ba = 0;\n    int bb =\
    \ 0;\n    int bc = 0;\n    int bd = 0;\n    int be = 0;\n    int bf = 0;\n   \
    \ int bg = 0;\n    int bh = 0;\n    int bi = 0;\n    int bj = 0;\n    int bk =\
    \ 0;\n    int bl = 0;\n    int bm = 0;\n    int bn = 0;\n    int bo = 0;\n   \
    \ int bp = 0;\n    int bq = 0;\n    int br = 0;\n    int bs = 0;\n    int bt =\
    \ 0;\n    int bu = 0;\n    int bv = 0;\n    int bw = 0;\n    int bx = 0;\n   \
    \ int by = 0\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpila08q30.d(82): Error: semicolon expected, not \''unittest\''\n/tmp/tmpila08q30.d(82):
    Error: found \''unittest\'' instead of statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpila08q30.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long max_depth = 0;\n    long current_depth = 0;\n    foreach(ch;\
    \ paren_string) \n    {\n        if(ch == '(') \n        {\n            current_depth++;\n\
    \            max_depth = max(max_depth, current_depth);\n        }\n        else\
    \ if(ch == ')') \n        {\n            current_depth--;\n        }\n       \
    \ else if(ch == ' ') \n        {\n            result ~= max_depth;\n         \
    \   max_depth = 0;\n            current_depth = 0;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcnnlc5jm.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long max_nesting_level = 0;\n    long current_nesting_level = 0;\n\
    \    foreach(paren; paren_string)\n    {\n        if(paren == '(')\n        {\n\
    \            current_nesting_level++;\n            max_nesting_level = max(max_nesting_level,\
    \ current_nesting_level);\n        }\n        else if(paren == ')')\n        {\n\
    \            current_nesting_level--;\n        }\n        else\n        {\n  \
    \          result ~= max_nesting_level;\n            max_nesting_level = 0;\n\
    \            current_nesting_level = 0;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3zo856ko.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int len = paren_string.length;\n\
    \    int max_depth = 0;\n    int depth = 0;\n    int start = 0;\n    int end =\
    \ 0;\n    bool in_paren = false;\n    foreach(c; paren_string)\n    {\n      \
    \  if(c == '(')\n        {\n            if(!in_paren)\n            {\n       \
    \         start = i;\n                in_paren = true;\n            }\n      \
    \      depth++;\n            if(depth > max_depth)\n            {\n          \
    \      max_depth = depth;\n            }\n        }\n        else if(c == ')')\n\
    \        {\n            depth--;\n            if(depth == 0)\n            {\n\
    \                end = i;\n                in_paren = false;\n               \
    \ result ~= max_depth;\n                max_depth = 0;\n            }\n      \
    \  }\n        i++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = parse_nested_parens;\n\n    assert(candidate(\"(()()) ((())) () ((())()())\"\
    ) == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (()) ((())) (((())))\") ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\") == [4L]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpso8b80ex.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long[] temp;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n\
    \    int m = 0;\n    int n = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n\
    \    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n\
    \    int x = 0;\n    int y = 0;\n    int z = 0;\n    int aa = 0;\n    int bb =\
    \ 0;\n    int cc = 0;\n    int dd = 0;\n    int ee = 0;\n    int ff = 0;\n   \
    \ int gg = 0;\n    int hh = 0;\n    int ii = 0;\n    int jj = 0;\n    int kk =\
    \ 0;\n    int ll = 0;\n    int mm = 0;\n    int nn = 0;\n    int oo = 0;\n   \
    \ int pp = 0;\n    int qq = 0;\n    int rr = 0;\n    int ss = 0;\n    int tt =\
    \ 0;\n    int uu = 0;\n    int vv = 0;\n    int ww = 0;\n    int xx = 0;\n   \
    \ int yy = 0;\n    int zz = 0;\n    int aaa = 0;\n    int bbb = 0;\n    int ccc\
    \ = 0;\n    int ddd = 0;\n    int eee = 0;\n    int fff = 0;\n    int ggg = 0;\n\
    \    int hhh = 0;\n    int iii = 0;\n    int jjj = 0;\n    int kkk = 0;\n    int\
    \ lll = 0;\n    int mmm = 0;\n    int nnn = 0;\n    int ooo = 0;\n    int ppp\
    \ = 0;\n    int qqq = 0;\n    int rrr = 0;\n    int sss = 0;\n    int ttt = 0;\n\
    \    int uuu = 0;\n    int vvv = 0;\n    int www = 0;\n    int xxx\nunittest\n\
    {\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"(()())\
    \ ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (())\
    \ ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmppaqzoyzv.d(80): Error: semicolon expected, not \''unittest\''\n/tmp/tmppaqzoyzv.d(80):
    Error: found \''unittest\'' instead of statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmppaqzoyzv.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long[] max_depth;\n    long[] current_depth;\n    long[] max_depth_index;\n\
    \    long[] current_depth_index;\n    long[] current_index;\n    long[] max_index;\n\
    \    long[] current_group;\n    long[] max_group;\n    long[] group_index;\n \
    \   long[] group_depth;\n    long[] group_max_depth;\n    long[] group_max_depth_index;\n\
    \    long[] group_max_index;\n    long[] group_current_index;\n    long[] group_current_depth;\n\
    \    long[] group_current_depth_index;\n    long[] group_current_group;\n    long[]\
    \ group_max_group;\n    long[] group_group_index;\n    long[] group_group_depth;\n\
    \    long[] group_group_max_depth;\n    long[] group_group_max_depth_index;\n\
    \    long[] group_group_max_index;\n    long[] group_group_current_index;\n  \
    \  long[] group_group_current_depth;\n    long[] group_group_current_depth_index;\n\
    \    long[] group_group_current_group;\n    long[] group_group_max_group;\n  \
    \  long[] group_group_group_index;\n    long[] group_group_group_depth;\n    long[]\
    \ group_group_group_max_depth;\n    long[] group_group_group_max_depth_index;\n\
    \    long[] group_group_group_max_index;\n    long[] group_group_group_current_index;\n\
    \    long[] group_group_group_current_depth;\n    long[] group_group_group_current_depth_index;\n\
    \    long[] group_group_group_current_group;\n    long[] group_group_group_max_group;\n\
    \    long[] group_group_group_group_index;\n    long[] group_group_group_group_depth;\n\
    \    long[] group_group_group_group_max_depth;\n    long[] group_group_group_group_max_depth_index;\n\
    \    long[] group_group_group_group_max_\nunittest\n{\n    alias candidate = parse_nested_parens;\n\
    \n    assert(candidate(\"(()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n\
    \    assert(candidate(\"() (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n   \
    \ assert(candidate(\"(()(())((())))\") == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnzqasblk.d(56): Error: semicolon expected, not \''unittest\''\n/tmp/tmpnzqasblk.d(56):
    Error: found \''unittest\'' instead of statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpnzqasblk.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long[] paren_count;\n    long[] paren_depth;\n    long[] paren_depth_max;\n\
    \    long[] paren_depth_max_index;\n    long[] paren_depth_max_index_count;\n\
    \    long[] paren_depth_max_index_count_max;\n    long[] paren_depth_max_index_count_max_index;\n\
    \    long[] paren_depth_max_index_count_max_index_count;\n    long[] paren_depth_max_index_count_max_index_count_max;\n\
    \    long[] paren_depth_max_index_count_max_index_count_max_index;\n    long[]\
    \ paren_depth_max_index_count_max_index_count_max_index_count;\n    long[] paren_depth_max_index_count_max_index_count_max_index_count_max;\n\
    \    long[] paren_depth_max_index_count_max_index_count_max_index_count_max_index;\n\
    \    long[] paren_depth_max_index_count_max_index_count_max_index_count_max_index_count;\n\
    \    long[] paren_depth_max_index_count_max_index_count_max_index_count_max_index_count_max;\n\
    \    long[] paren_depth_max_index_count_max_index_count_max_index_count_max_index_count_max_index;\n\
    \    long[] paren_depth_max_index_count_max_index_count_max_index_count_max_index_count_max_index_count;\n\
    \    long[] paren_depth_max_index_count_max_index_count_max_index_count_max_index_count_max_index_count_max;\n\
    \    long[] paren_depth_max_index_count_max_index_count_max_index_count_max_index_count_max_index_count_max_index;\n\
    \    long[] paren_depth_max_index_count_max_index_count_max_index_count_\nunittest\n\
    {\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"(()())\
    \ ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (())\
    \ ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpdii4to67.d(33): Error: semicolon expected, not \''unittest\''\n/tmp/tmpdii4to67.d(33):
    Error: found \''unittest\'' instead of statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpdii4to67.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result = new long[];\n    int max_depth = 0;\n    int depth = 0;\n    foreach(paren;\
    \ paren_string)\n    {\n        if(paren == '(')\n        {\n            depth++;\n\
    \            max_depth = max(max_depth, depth);\n        }\n        else if(paren\
    \ == ')')\n        {\n            depth--;\n        }\n        else\n        {\n\
    \            result ~= max_depth;\n            max_depth = 0;\n            depth\
    \ = 0;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = parse_nested_parens;\n\n    assert(candidate(\"(()()) ((())) () ((())()())\"\
    ) == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (()) ((())) (((())))\") ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\") == [4L]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_l27coys.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long[] paren_stack;\n    long[] paren_count;\n    long[] paren_level;\n\
    \    long[] paren_level_count;\n    long[] paren_level_index;\n    long[] paren_level_index_count;\n\
    \    long[] paren_level_index_index;\n    long[] paren_level_index_index_count;\n\
    \    long[] paren_level_index_index_index;\n    long[] paren_level_index_index_index_count;\n\
    \    long[] paren_level_index_index_index_index;\n    long[] paren_level_index_index_index_index_count;\n\
    \    long[] paren_level_index_index_index_index_index;\n    long[] paren_level_index_index_index_index_index_count;\n\
    \    long[] paren_level_index_index_index_index_index_index;\n    long[] paren_level_index_index_index_index_index_index_count;\n\
    \    long[] paren_level_index_index_index_index_index_index_index;\n    long[]\
    \ paren_level_index_index_index_index_index_index_index_count;\n    long[] paren_level_index_index_index_index_index_index_index_index;\n\
    \    long[] paren_level_index_index_index_index_index_index_index_index_count;\n\
    \    long[] paren_level_index_index_index_index_index_index_index_index_index;\n\
    \    long[] paren_level_index_index_index_index_index_index_index_index_index_count;\n\
    \    long[] paren_level_index_index_index_index_index_index_index_index_index_index;\n\
    \    long[] paren_level_index_index_index_index_index_index_index_index_index_index_count;\n\
    \    long[] paren_level_index_index_index_index_index_index_index_index_index_index_index;\n\
    \    long[] paren_level_index_index_index_\nunittest\n{\n    alias candidate =\
    \ parse_nested_parens;\n\n    assert(candidate(\"(()()) ((())) () ((())()())\"\
    ) == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (()) ((())) (((())))\") ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\") == [4L]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp2_95mql9.d(39): Error: semicolon expected, not \''unittest\''\n/tmp/tmp2_95mql9.d(39):
    Error: found \''unittest\'' instead of statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmp2_95mql9.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    int max_depth = 0;\n    int depth = 0;\n    foreach(c; paren_string)\n\
    \    {\n        if(c == '(')\n        {\n            depth++;\n            max_depth\
    \ = max(max_depth, depth);\n        }\n        else if(c == ')')\n        {\n\
    \            depth--;\n        }\n        else if(c == ' ')\n        {\n     \
    \       result ~= max_depth;\n            max_depth = 0;\n            depth =\
    \ 0;\n        }\n    }\n    result ~= max_depth;\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"(()())\
    \ ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (())\
    \ ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpowh85s6n.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long max_depth = 0;\n    long depth = 0;\n    foreach(c; paren_string)\
    \ \n    {\n        if (c == '(') \n        {\n            depth++;\n         \
    \   max_depth = max(max_depth, depth);\n        } \n        else if (c == ')')\
    \ \n        {\n            depth--;\n        } \n        else if (c == ' ') \n\
    \        {\n            result ~= max_depth;\n            max_depth = 0;\n   \
    \         depth = 0;\n        }\n    }\n    return result;\n}\nunittest\n{\n \
    \   alias candidate = parse_nested_parens;\n\n    assert(candidate(\"(()()) ((()))\
    \ () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (()) ((()))\
    \ (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\")\
    \ == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp93j63jyw.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long max_depth = 0;\n    long depth = 0;\n    foreach(c; paren_string)\
    \ \n    {\n        if (c == '(') \n        {\n            depth++;\n         \
    \   max_depth = max(max_depth, depth);\n        } \n        else if (c == ')')\
    \ \n        {\n            depth--;\n        } \n        else if (c == ' ') \n\
    \        {\n            result ~= max_depth;\n            max_depth = 0;\n   \
    \         depth = 0;\n        }\n    }\n    return result;\n}\nunittest\n{\n \
    \   alias candidate = parse_nested_parens;\n\n    assert(candidate(\"(()()) ((()))\
    \ () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (()) ((()))\
    \ (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\")\
    \ == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp93j63jyw.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    int max_depth = 0;\n    int depth = 0;\n    foreach(c; paren_string)\n\
    \    {\n        if(c == '(')\n        {\n            depth++;\n            max_depth\
    \ = max(max_depth, depth);\n        }\n        else if(c == ')')\n        {\n\
    \            depth--;\n        }\n        else if(c == ' ')\n        {\n     \
    \       result ~= max_depth;\n            max_depth = 0;\n            depth =\
    \ 0;\n        }\n    }\n    result ~= max_depth;\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"(()())\
    \ ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (())\
    \ ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpowh85s6n.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    int i = 0;\n    int max_nest_level = 0;\n    int nest_level = 0;\n\
    \    foreach(char c; paren_string)\n    {\n        if(c == '(')\n        {\n \
    \           nest_level++;\n            max_nest_level = max(max_nest_level, nest_level);\n\
    \        }\n        else if(c == ')')\n        {\n            nest_level--;\n\
    \        }\n        else if(c == ' ')\n        {\n            result ~= max_nest_level;\n\
    \            max_nest_level = 0;\n            nest_level = 0;\n        }\n   \
    \ }\n    return result;\n}\nunittest\n{\n    alias candidate = parse_nested_parens;\n\
    \n    assert(candidate(\"(()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n\
    \    assert(candidate(\"() (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n   \
    \ assert(candidate(\"(()(())((())))\") == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi5j6qvhv.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long[] paren_counts;\n    long[] paren_counts_max;\n    long[]\
    \ paren_counts_min;\n    long[] paren_counts_max_index;\n    long[] paren_counts_min_index;\n\
    \    long[] paren_counts_max_index_final;\n    long[] paren_counts_min_index_final;\n\
    \    long[] paren_counts_max_final;\n    long[] paren_counts_min_final;\n    long[]\
    \ paren_counts_final;\n    long[] paren_counts_final_index;\n    long[] paren_counts_final_index_final;\n\
    \    long[] paren_counts_final_final;\n    long[] paren_counts_final_final_index;\n\
    \    long[] paren_counts_final_final_index_final;\n    long[] paren_counts_final_final_final;\n\
    \    long[] paren_counts_final_final_final_index;\n    long[] paren_counts_final_final_final_index_final;\n\
    \    long[] paren_counts_final_final_final_final;\n    long[] paren_counts_final_final_final_final_index;\n\
    \    long[] paren_counts_final_final_final_final_index_final;\n    long[] paren_counts_final_final_final_final_final;\n\
    \    long[] paren_counts_final_final_final_final_final_index;\n    long[] paren_counts_final_final_final_final_final_index_final;\n\
    \    long[] paren_counts_final_final_final_final_final_final;\n    long[] paren_counts_final_final_final_final_final_final_index;\n\
    \    long[] paren_counts_final_final_final_final_final_final_index_final;\n  \
    \  long[] paren_counts_final_final_final_final_final_final_final;\n    long[]\
    \ paren_counts_final_final_final_\nunittest\n{\n    alias candidate = parse_nested_parens;\n\
    \n    assert(candidate(\"(()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n\
    \    assert(candidate(\"() (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n   \
    \ assert(candidate(\"(()(())((())))\") == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpgdnt6xli.d(42): Error: semicolon expected, not \''unittest\''\n/tmp/tmpgdnt6xli.d(42):
    Error: found \''unittest\'' instead of statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpgdnt6xli.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long[] stack;\n    long current_level = 0;\n    long max_level\
    \ = 0;\n    foreach(c; paren_string)\n    {\n        if(c == '(')\n        {\n\
    \            stack ~= current_level;\n            current_level++;\n         \
    \   max_level = max(max_level, current_level);\n        }\n        else if(c ==\
    \ ')')\n        {\n            if(stack.length == 0)\n            {\n        \
    \        throw new Exception(\"Invalid input\");\n            }\n            stack.popBack();\n\
    \            current_level = stack.length == 0 ? 0 : stack[$-1] + 1;\n       \
    \ }\n        else if(c == ' ')\n        {\n            result ~= max_level;\n\
    \            max_level = 0;\n        }\n        else\n        {\n            throw\
    \ new Exception(\"Invalid input\");\n        }\n    }\n    result ~= max_level;\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = parse_nested_parens;\n\
    \n    assert(candidate(\"(()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n\
    \    assert(candidate(\"() (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n   \
    \ assert(candidate(\"(()(())((())))\") == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_mbidsyz.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long current_level = 0;\n    long max_level = 0;\n    foreach(c;\
    \ paren_string) \n    {\n        if (c == '(') \n        {\n            current_level++;\n\
    \            max_level = max(max_level, current_level);\n        }\n        else\
    \ if (c == ')') \n        {\n            current_level--;\n        }\n       \
    \ else if (c == ' ') \n        {\n            result ~= max_level;\n         \
    \   max_level = 0;\n            current_level = 0;\n        }\n    }\n    result\
    \ ~= max_level;\n    return result;\n}\nunittest\n{\n    alias candidate = parse_nested_parens;\n\
    \n    assert(candidate(\"(()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n\
    \    assert(candidate(\"() (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n   \
    \ assert(candidate(\"(()(())((())))\") == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvf6e_3sm.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result = new long[paren_string.length];\n    int index = 0;\n    foreach(paren_group;\
    \ paren_string.split(\" \"))\n    {\n        int max_depth = 0;\n        int depth\
    \ = 0;\n        foreach(paren; paren_group)\n        {\n            if(paren ==\
    \ '(')\n            {\n                depth++;\n                max_depth = max(max_depth,\
    \ depth);\n            }\n            else if(paren == ')')\n            {\n \
    \               depth--;\n            }\n        }\n        result[index++] =\
    \ max_depth;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate =\
    \ parse_nested_parens;\n\n    assert(candidate(\"(()()) ((())) () ((())()())\"\
    ) == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (()) ((())) (((())))\") ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\") == [4L]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxm_7c_pk.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long max_depth = 0;\n    long current_depth = 0;\n    foreach(c;\
    \ paren_string)\n    {\n        if(c == '(')\n        {\n            current_depth++;\n\
    \            max_depth = max(max_depth, current_depth);\n        }\n        else\
    \ if(c == ')')\n        {\n            current_depth--;\n        }\n        else\
    \ if(c == ' ')\n        {\n            result ~= max_depth;\n            max_depth\
    \ = 0;\n            current_depth = 0;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnzoptv3z.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long max_depth = 0;\n    long current_depth = 0;\n    foreach(c;\
    \ paren_string)\n    {\n        if(c == '(')\n        {\n            current_depth++;\n\
    \            max_depth = max(max_depth, current_depth);\n        }\n        else\
    \ if(c == ')')\n        {\n            current_depth--;\n        }\n        else\
    \ if(c == ' ')\n        {\n            result ~= max_depth;\n            max_depth\
    \ = 0;\n            current_depth = 0;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnzoptv3z.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    int current_level = 0;\n    int max_level = 0;\n    foreach(char\
    \ c; paren_string)\n    {\n        if(c == '(')\n        {\n            current_level++;\n\
    \            max_level = max(max_level, current_level);\n        }\n        else\
    \ if(c == ')')\n        {\n            current_level--;\n        }\n        else\
    \ if(c == ' ')\n        {\n            result ~= max_level;\n            max_level\
    \ = 0;\n            current_level = 0;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdu7ajjlv.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int max_nesting\
    \ = 0;\n    int curr_nesting = 0;\n    int curr_paren_count = 0;\n    int curr_paren_count_max\
    \ = 0;\n    int curr_paren_count_min = 0;\n    int curr_paren_count_min_index\
    \ = 0;\n    int curr_paren_count_max_index = 0;\n    int curr_paren_count_min_index_prev\
    \ = 0;\n    int curr_paren_count_max_index_prev = 0;\n    int curr_paren_count_min_index_prev_prev\
    \ = 0;\n    int curr_paren_count_max_index_prev_prev = 0;\n    int curr_paren_count_min_index_prev_prev_prev\
    \ = 0;\n    int curr_paren_count_max_index_prev_prev_prev = 0;\n    int curr_paren_count_min_index_prev_prev_prev_prev\
    \ = 0;\n    int curr_paren_count_max_index_prev_prev_prev_prev = 0;\n    int curr_paren_count_min_index_prev_prev_prev_prev_prev\
    \ = 0;\n    int curr_paren_count_max_index_prev_prev_prev_prev_prev = 0;\n   \
    \ int curr_paren_count_min_index_prev_prev_prev_prev_prev_prev = 0;\n    int curr_paren_count_max_index_prev_prev_prev_prev_prev_prev\
    \ = 0;\n    int curr_paren_count_min_index_prev_prev_prev_prev_prev_prev_prev\
    \ = 0;\n    int curr_paren_count_max_index_prev_prev_prev_prev_prev_prev_prev\
    \ = 0;\n    int curr_paren_count_min_index_prev_prev_prev_prev_prev_prev_prev_prev\
    \ = 0;\n    int curr_paren_count_max_index_prev_prev_prev_prev_\nunittest\n{\n\
    \    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"(()()) ((()))\
    \ () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (()) ((()))\
    \ (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\")\
    \ == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptat9es7j.d(39): Error: semicolon expected, not \''unittest\''\n/tmp/tmptat9es7j.d(39):
    Error: found \''unittest\'' instead of statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmptat9es7j.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long[] stack;\n    long current_level;\n    long max_level;\n \
    \   long i;\n    long j;\n    long k;\n    long l;\n    long m;\n    long n;\n\
    \    long o;\n    long p;\n    long q;\n    long r;\n    long s;\n    long t;\n\
    \    long u;\n    long v;\n    long w;\n    long x;\n    long y;\n    long z;\n\
    \    long aa;\n    long ab;\n    long ac;\n    long ad;\n    long ae;\n    long\
    \ af;\n    long ag;\n    long ah;\n    long ai;\n    long aj;\n    long ak;\n\
    \    long al;\n    long am;\n    long an;\n    long ao;\n    long ap;\n    long\
    \ aq;\n    long ar;\n    long as;\n    long at;\n    long au;\n    long av;\n\
    \    long aw;\n    long ax;\n    long ay;\n    long az;\n    long ba;\n    long\
    \ bb;\n    long bc;\n    long bd;\n    long be;\n    long bf;\n    long bg;\n\
    \    long bh;\n    long bi;\n    long bj;\n    long bk;\n    long bl;\n    long\
    \ bm;\n    long bn;\n    long bo;\n    long bp;\n    long bq;\n    long br;\n\
    \    long bs;\n    long bt;\n    long bu;\n    long bv;\n    long bw;\n    long\
    \ bx;\n    long by;\n    long bz;\n    long ca;\n    long cb;\n    long cc;\n\
    \    long cd;\n    long ce;\n    long cf;\n    long cg;\n    long ch;\n    long\
    \ ci;\n    long cj;\n    long ck;\n    long cl;\n    long cm;\n    long cn;\n\
    \    long co;\n    long cp;\n    long cq;\n    long cr;\n    long cs;\n    long\
    \ ct;\n    long\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n \
    \   assert(candidate(\"(()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n\
    \    assert(candidate(\"() (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n   \
    \ assert(candidate(\"(()(())((())))\") == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpz4c8e8b_.d(107): Error: no identifier for declarator long\n/tmp/tmpz4c8e8b_.d(107):
    Error: found \''unittest\'' instead of statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpz4c8e8b_.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long max_depth = 0;\n    long depth = 0;\n    foreach(c; paren_string)\
    \ \n    {\n        if (c == '(') \n        {\n            depth++;\n         \
    \   max_depth = max(max_depth, depth);\n        } \n        else if (c == ')')\
    \ \n        {\n            depth--;\n        } \n        else if (c == ' ') \n\
    \        {\n            result ~= max_depth;\n            max_depth = 0;\n   \
    \         depth = 0;\n        }\n    }\n    return result;\n}\nunittest\n{\n \
    \   alias candidate = parse_nested_parens;\n\n    assert(candidate(\"(()()) ((()))\
    \ () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (()) ((()))\
    \ (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\")\
    \ == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp93j63jyw.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int max_nesting_level\
    \ = 0;\n    int nesting_level = 0;\n    int len = paren_string.length;\n    char[]\
    \ paren_array = paren_string.dup;\n    while (i < len)\n    {\n        if (paren_array[i]\
    \ == '(')\n        {\n            nesting_level++;\n            if (nesting_level\
    \ > max_nesting_level)\n            {\n                max_nesting_level = nesting_level;\n\
    \            }\n        }\n        else if (paren_array[i] == ')')\n        {\n\
    \            nesting_level--;\n        }\n        else if (paren_array[i] == '\
    \ ')\n        {\n            result[j] = max_nesting_level;\n            max_nesting_level\
    \ = 0;\n            nesting_level = 0;\n            j++;\n        }\n        i++;\n\
    \    }\n    result[j] = max_nesting_level;\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"(()())\
    \ ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (())\
    \ ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb96gmbuj.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long[] paren_count;\n    long[] paren_depth;\n    long[] paren_depth_max;\n\
    \    long[] paren_depth_max_index;\n    long[] paren_depth_max_index_prev;\n \
    \   long[] paren_depth_max_index_prev_prev;\n    long[] paren_depth_max_index_prev_prev_prev;\n\
    \    long[] paren_depth_max_index_prev_prev_prev_prev;\n    long[] paren_depth_max_index_prev_prev_prev_prev_prev;\n\
    \    long[] paren_depth_max_index_prev_prev_prev_prev_prev_prev;\n    long[] paren_depth_max_index_prev_prev_prev_prev_prev_prev_prev;\n\
    \    long[] paren_depth_max_index_prev_prev_prev_prev_prev_prev_prev_prev;\n \
    \   long[] paren_depth_max_index_prev_prev_prev_prev_prev_prev_prev_prev_prev;\n\
    \    long[] paren_depth_max_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev;\n\
    \    long[] paren_depth_max_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev;\n\
    \    long[] paren_depth_max_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev;\n\
    \    long[] paren_depth_max_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev;\n\
    \    long[] paren_depth_max_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev;\n\
    \    long[] paren_depth_max_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev;\n\
    \    long[] paren_depth_max_index_prev_prev_prev_prev_prev_prev_prev_\nunittest\n\
    {\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"(()())\
    \ ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (())\
    \ ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpw3cpqojl.d(33): Error: semicolon expected, not \''unittest\''\n/tmp/tmpw3cpqojl.d(33):
    Error: found \''unittest\'' instead of statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpw3cpqojl.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long[] stack;\n    long max_depth = 0;\n    long depth = 0;\n \
    \   foreach(c; paren_string)\n    {\n        if(c == '(')\n        {\n       \
    \     stack ~= depth;\n            depth++;\n            max_depth = max(max_depth,\
    \ depth);\n        }\n        else if(c == ')')\n        {\n            if(stack.length\
    \ == 0)\n            {\n                throw new Exception(\"Invalid input\"\
    );\n            }\n            depth = stack[$-1];\n            stack = stack[0..$-1];\n\
    \        }\n        else if(c == ' ')\n        {\n            result ~= max_depth;\n\
    \            max_depth = 0;\n            depth = 0;\n        }\n        else\n\
    \        {\n            throw new Exception(\"Invalid input\");\n        }\n \
    \   }\n    result ~= max_depth;\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = parse_nested_parens;\n\n    assert(candidate(\"(()()) ((())) ()\
    \ ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (()) ((())) (((())))\"\
    ) == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\") == [4L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1xgxorwy.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long max_depth = 0;\n    long current_depth = 0;\n    foreach(c;\
    \ paren_string) \n    {\n        if(c == '(') \n        {\n            current_depth++;\n\
    \            max_depth = max(max_depth, current_depth);\n        }\n        else\
    \ if(c == ')') \n        {\n            current_depth--;\n        }\n        else\
    \ if(c == ' ') \n        {\n            result ~= max_depth;\n            max_depth\
    \ = 0;\n            current_depth = 0;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7hjkkoee.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    int max_depth = 0;\n    int depth = 0;\n    foreach(c; paren_string)\n\
    \    {\n        if(c == '(')\n        {\n            depth++;\n            max_depth\
    \ = max(max_depth, depth);\n        }\n        else if(c == ')')\n        {\n\
    \            depth--;\n        }\n        else if(c == ' ')\n        {\n     \
    \       result ~= max_depth;\n            max_depth = 0;\n            depth =\
    \ 0;\n        }\n    }\n    result ~= max_depth;\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"(()())\
    \ ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (())\
    \ ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpowh85s6n.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    int max_depth = 0;\n    int current_depth = 0;\n    foreach(c;\
    \ paren_string)\n    {\n        if(c == '(')\n        {\n            current_depth++;\n\
    \            max_depth = max(max_depth, current_depth);\n        }\n        else\
    \ if(c == ')')\n        {\n            current_depth--;\n        }\n        else\
    \ if(c == ' ')\n        {\n            result ~= max_depth;\n            max_depth\
    \ = 0;\n            current_depth = 0;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjg6heqgn.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    result.length = paren_string.count(' ') + 1;\n    long i = 0;\n\
    \    long j = 0;\n    long k = 0;\n    long max_depth = 0;\n    long depth = 0;\n\
    \    while (i < paren_string.length)\n    {\n        if (paren_string[i] == '(')\n\
    \        {\n            depth++;\n            if (depth > max_depth)\n       \
    \     {\n                max_depth = depth;\n            }\n        }\n      \
    \  else if (paren_string[i] == ')')\n        {\n            depth--;\n       \
    \ }\n        else if (paren_string[i] == ' ')\n        {\n            result[j]\
    \ = max_depth;\n            j++;\n            max_depth = 0;\n            depth\
    \ = 0;\n        }\n        i++;\n    }\n    result[j] = max_depth;\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpm1i51evs.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long max_depth = 0;\n    long depth = 0;\n    foreach(c; paren_string)\
    \ \n    {\n        if (c == '(') \n        {\n            depth++;\n         \
    \   max_depth = max(max_depth, depth);\n        } \n        else if (c == ')')\
    \ \n        {\n            depth--;\n        } \n        else if (c == ' ') \n\
    \        {\n            result ~= max_depth;\n            max_depth = 0;\n   \
    \         depth = 0;\n        }\n    }\n    return result;\n}\nunittest\n{\n \
    \   alias candidate = parse_nested_parens;\n\n    assert(candidate(\"(()()) ((()))\
    \ () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (()) ((()))\
    \ (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\")\
    \ == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp93j63jyw.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long max_depth = 0;\n    long depth = 0;\n    foreach(c; paren_string)\n\
    \    {\n        if(c == '(')\n        {\n            depth++;\n            max_depth\
    \ = max(max_depth, depth);\n        }\n        else if(c == ')')\n        {\n\
    \            depth--;\n        }\n        else if(c == ' ')\n        {\n     \
    \       result ~= max_depth;\n            max_depth = 0;\n            depth =\
    \ 0;\n        }\n    }\n    result ~= max_depth;\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"(()())\
    \ ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (())\
    \ ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3pi3ol54.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result = new long[paren_string.length];\n    long[] stack = new long[paren_string.length];\n\
    \    long stack_top = 0;\n    long max_depth = 0;\n    long depth = 0;\n    long\
    \ i = 0;\n    long j = 0;\n    foreach(c; paren_string)\n    {\n        if(c ==\
    \ '(')\n        {\n            stack[stack_top++] = i;\n            depth++;\n\
    \            max_depth = max(max_depth, depth);\n        }\n        else if(c\
    \ == ')')\n        {\n            stack_top--;\n            depth--;\n       \
    \ }\n        else if(c == ' ')\n        {\n            result[j++] = max_depth;\n\
    \            max_depth = 0;\n            depth = 0;\n        }\n        i++;\n\
    \    }\n    result[j++] = max_depth;\n    return result[0..j];\n}\nunittest\n\
    {\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"(()())\
    \ ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (())\
    \ ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6aiwpuau.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long[] stack;\n    long max_depth = 0;\n    long depth = 0;\n \
    \   foreach(c; paren_string)\n    {\n        if(c == '(')\n        {\n       \
    \     depth++;\n            max_depth = max(max_depth, depth);\n        }\n  \
    \      else if(c == ')')\n        {\n            depth--;\n        }\n       \
    \ else if(c == ' ')\n        {\n            result ~= max_depth;\n           \
    \ max_depth = 0;\n            depth = 0;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprsn52hm1.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    int i;\n    int len = paren_string.length;\n    int count = 0;\n\
    \    int max_count = 0;\n    for (i = 0; i < len; i++) \n    {\n        if (paren_string[i]\
    \ == '(') \n        {\n            count++;\n            if (count > max_count)\
    \ \n            {\n                max_count = count;\n            }\n       \
    \ } \n        else if (paren_string[i] == ')') \n        {\n            count--;\n\
    \        }\n    }\n    result ~= max_count;\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"(()())\
    \ ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (())\
    \ ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpww18rm4_.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    int max_depth = 0;\n    int depth = 0;\n    foreach(c; paren_string)\n\
    \    {\n        if(c == '(')\n        {\n            depth++;\n            max_depth\
    \ = max(max_depth, depth);\n        }\n        else if(c == ')')\n        {\n\
    \            depth--;\n        }\n        else if(c == ' ')\n        {\n     \
    \       result ~= max_depth;\n            max_depth = 0;\n            depth =\
    \ 0;\n        }\n    }\n    result ~= max_depth;\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"(()())\
    \ ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (())\
    \ ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpowh85s6n.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    int max_depth = 0;\n    int depth = 0;\n    foreach(ch; paren_string)\
    \ \n    {\n        if(ch == '(') \n        {\n            depth++;\n         \
    \   max_depth = max(max_depth, depth);\n        } \n        else if(ch == ')')\
    \ \n        {\n            depth--;\n        }\n    }\n    result ~= max_depth;\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = parse_nested_parens;\n\
    \n    assert(candidate(\"(()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n\
    \    assert(candidate(\"() (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n   \
    \ assert(candidate(\"(()(())((())))\") == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7nxswm0l.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long[] stack;\n    long max_depth;\n    long depth;\n    long i;\n\
    \    long j;\n    long k;\n    long start;\n    long end;\n    long len;\n   \
    \ long[] paren_count;\n    long[] paren_depth;\n    long[] paren_start;\n    long[]\
    \ paren_end;\n    long[] paren_len;\n    long[] paren_max_depth;\n    long[] paren_depth_count;\n\
    \    long[] paren_depth_start;\n    long[] paren_depth_end;\n    long[] paren_depth_len;\n\
    \    long[] paren_depth_max_depth;\n    long[] paren_depth_depth_count;\n    long[]\
    \ paren_depth_depth_start;\n    long[] paren_depth_depth_end;\n    long[] paren_depth_depth_len;\n\
    \    long[] paren_depth_depth_max_depth;\n    long[] paren_depth_depth_depth_count;\n\
    \    long[] paren_depth_depth_depth_start;\n    long[] paren_depth_depth_depth_end;\n\
    \    long[] paren_depth_depth_depth_len;\n    long[] paren_depth_depth_depth_max_depth;\n\
    \    long[] paren_depth_depth_depth_depth_count;\n    long[] paren_depth_depth_depth_depth_start;\n\
    \    long[] paren_depth_depth_depth_depth_end;\n    long[] paren_depth_depth_depth_depth_len;\n\
    \    long[] paren_depth_depth_depth_depth_max_depth;\n    long[] paren_depth_depth_depth_depth_depth_count;\n\
    \    long[] paren_depth_depth_depth_depth_depth_start;\n    long[] paren_depth_depth_depth_depth_depth_end;\n\
    \    long[] paren_depth_depth_depth_depth_depth_len;\n    long[] paren_depth_depth_depth_depth_depth_max_depth;\n\
    \    long[] paren_depth_depth_depth_depth_\nunittest\n{\n    alias candidate =\
    \ parse_nested_parens;\n\n    assert(candidate(\"(()()) ((())) () ((())()())\"\
    ) == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (()) ((())) (((())))\") ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\") == [4L]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp2frqsjbi.d(54): Error: semicolon expected, not \''unittest\''\n/tmp/tmp2frqsjbi.d(54):
    Error: found \''unittest\'' instead of statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmp2frqsjbi.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long[] temp;\n    long[] temp2;\n    long[] temp3;\n    long[]\
    \ temp4;\n    long[] temp5;\n    long[] temp6;\n    long[] temp7;\n    long[]\
    \ temp8;\n    long[] temp9;\n    long[] temp10;\n    long[] temp11;\n    long[]\
    \ temp12;\n    long[] temp13;\n    long[] temp14;\n    long[] temp15;\n    long[]\
    \ temp16;\n    long[] temp17;\n    long[] temp18;\n    long[] temp19;\n    long[]\
    \ temp20;\n    long[] temp21;\n    long[] temp22;\n    long[] temp23;\n    long[]\
    \ temp24;\n    long[] temp25;\n    long[] temp26;\n    long[] temp27;\n    long[]\
    \ temp28;\n    long[] temp29;\n    long[] temp30;\n    long[] temp31;\n    long[]\
    \ temp32;\n    long[] temp33;\n    long[] temp34;\n    long[] temp35;\n    long[]\
    \ temp36;\n    long[] temp37;\n    long[] temp38;\n    long[] temp39;\n    long[]\
    \ temp40;\n    long[] temp41;\n    long[] temp42;\n    long[] temp43;\n    long[]\
    \ temp44;\n    long[] temp45;\n    long[] temp46;\n    long[] temp47;\n    long[]\
    \ temp48;\n    long[] temp49;\n    long[] temp50;\n    long[] temp51;\n    long[]\
    \ temp52;\n    long[] temp53;\n    long[] temp54;\n    long[] temp55;\n    long[]\
    \ temp56;\n    long[] temp57;\n    long[] temp58;\n    long[] temp59;\n    long[]\
    \ temp60;\n    long[] temp61;\n    long[] temp62;\n    long[] temp63;\n    long[]\
    \ temp64;\n    long[] temp65;\n    long[] temp66;\n    long[] temp67;\n    long[]\
    \ temp68;\n    long[] temp69;\n    long[] temp70;\n    long[] temp71;\n    long[]\
    \ temp72;\n\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpfj7qlk81.d(86): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfj7qlk81.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int max_depth =\
    \ 0;\n    int depth = 0;\n    int max_index = 0;\n    int max_depth_index = 0;\n\
    \    int max_depth_index_start = 0;\n    int max_depth_index_end = 0;\n    int\
    \ max_depth_index_start_temp = 0;\n    int max_depth_index_end_temp = 0;\n   \
    \ int max_depth_index_start_temp_2 = 0;\n    int max_depth_index_end_temp_2 =\
    \ 0;\n    int max_depth_index_start_temp_3 = 0;\n    int max_depth_index_end_temp_3\
    \ = 0;\n    int max_depth_index_start_temp_4 = 0;\n    int max_depth_index_end_temp_4\
    \ = 0;\n    int max_depth_index_start_temp_5 = 0;\n    int max_depth_index_end_temp_5\
    \ = 0;\n    int max_depth_index_start_temp_6 = 0;\n    int max_depth_index_end_temp_6\
    \ = 0;\n    int max_depth_index_start_temp_7 = 0;\n    int max_depth_index_end_temp_7\
    \ = 0;\n    int max_depth_index_start_temp_8 = 0;\n    int max_depth_index_end_temp_8\
    \ = 0;\n    int max_depth_index_start_temp_9 = 0;\n    int max_depth_index_end_temp_9\
    \ = 0;\n    int max_depth_index_start_temp_10 = 0;\n    int max_depth_index_end_temp_10\
    \ = 0;\n    int max_depth_index_start_temp_11 = 0;\n    int max_depth_index_end_temp_11\
    \ = 0;\n    int max_depth_index_start_temp_12 = 0;\n    int max_depth_index_end_temp_12\
    \ = 0;\n    int max_depth_index_start_temp_13 = 0;\nunittest\n{\n    alias candidate\
    \ = parse_nested_parens;\n\n    assert(candidate(\"(()()) ((())) () ((())()())\"\
    ) == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (()) ((())) (((())))\") ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\") == [4L]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpffotgcgz.d(47): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpffotgcgz.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long[] stack;\n    long max_depth;\n    long depth;\n    long i;\n\
    \    long j;\n    long k;\n    long len;\n    long len_paren_string;\n    long\
    \ len_stack;\n    long len_result;\n    long len_result_prev;\n    long len_result_curr;\n\
    \    long len_result_next;\n    long len_result_next_next;\n    long len_result_next_next_next;\n\
    \    long len_result_next_next_next_next;\n    long len_result_next_next_next_next_next;\n\
    \    long len_result_next_next_next_next_next_next;\n    long len_result_next_next_next_next_next_next_next;\n\
    \    long len_result_next_next_next_next_next_next_next_next;\n    long len_result_next_next_next_next_next_next_next_next_next;\n\
    \    long len_result_next_next_next_next_next_next_next_next_next_next;\n    long\
    \ len_result_next_next_next_next_next_next_next_next_next_next_next;\n    long\
    \ len_result_next_next_next_next_next_next_next_next_next_next_next_next;\n  \
    \  long len_result_next_next_next_next_next_next_next_next_next_next_next_next_next;\n\
    \    long len_result_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n\
    \    long len_result_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n\
    \    long len_result_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next;\n\
    \    long len_result_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next\n\
    unittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp554cm837.d(42): Error: semicolon expected, not \''unittest\''\n/tmp/tmp554cm837.d(42):
    Error: found \''unittest\'' instead of statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmp554cm837.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    int current_level = 0;\n    int max_level = 0;\n    foreach(c;\
    \ paren_string)\n    {\n        if(c == '(')\n        {\n            current_level++;\n\
    \            max_level = max(max_level, current_level);\n        }\n        else\
    \ if(c == ')')\n        {\n            current_level--;\n        }\n        else\
    \ if(c == ' ')\n        {\n            result ~= max_level;\n            max_level\
    \ = 0;\n            current_level = 0;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp11capodx.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long[] stack;\n    long max_depth = 0;\n    long depth = 0;\n \
    \   foreach(c; paren_string)\n    {\n        if(c == '(')\n        {\n       \
    \     depth++;\n            if(depth > max_depth)\n                max_depth =\
    \ depth;\n        }\n        else if(c == ')')\n        {\n            depth--;\n\
    \        }\n        else if(c == ' ')\n        {\n            result ~= max_depth;\n\
    \            max_depth = 0;\n            depth = 0;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyh93m0fa.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result = new long[paren_string.length];\n    long result_index = 0;\n    long\
    \ max_depth = 0;\n    long depth = 0;\n    foreach(c; paren_string)\n    {\n \
    \       if(c == '(')\n        {\n            depth++;\n            max_depth =\
    \ max(max_depth, depth);\n        }\n        else if(c == ')')\n        {\n  \
    \          depth--;\n        }\n        else if(c == ' ')\n        {\n       \
    \     result[result_index++] = max_depth;\n            max_depth = 0;\n      \
    \      depth = 0;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = parse_nested_parens;\n\n    assert(candidate(\"(()()) ((())) ()\
    \ ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (()) ((())) (((())))\"\
    ) == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\") == [4L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp711mkw65.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    int current_level = 0;\n    int max_level = 0;\n    foreach(char\
    \ c; paren_string)\n    {\n        if(c == '(')\n        {\n            current_level++;\n\
    \            max_level = max(max_level, current_level);\n        }\n        else\
    \ if(c == ')')\n        {\n            current_level--;\n        }\n        else\
    \ if(c == ' ')\n        {\n            result ~= max_level;\n            max_level\
    \ = 0;\n            current_level = 0;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdu7ajjlv.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long[] paren_counts;\n    long[] paren_counts_max;\n    long[]\
    \ paren_counts_min;\n    long[] paren_counts_max_index;\n    long[] paren_counts_min_index;\n\
    \    long[] paren_counts_max_index_temp;\n    long[] paren_counts_min_index_temp;\n\
    \    long[] paren_counts_max_index_temp_temp;\n    long[] paren_counts_min_index_temp_temp;\n\
    \    long[] paren_counts_max_index_temp_temp_temp;\n    long[] paren_counts_min_index_temp_temp_temp;\n\
    \    long[] paren_counts_max_index_temp_temp_temp_temp;\n    long[] paren_counts_min_index_temp_temp_temp_temp;\n\
    \    long[] paren_counts_max_index_temp_temp_temp_temp_temp;\n    long[] paren_counts_min_index_temp_temp_temp_temp_temp;\n\
    \    long[] paren_counts_max_index_temp_temp_temp_temp_temp_temp;\n    long[]\
    \ paren_counts_min_index_temp_temp_temp_temp_temp_temp;\n    long[] paren_counts_max_index_temp_temp_temp_temp_temp_temp_temp;\n\
    \    long[] paren_counts_min_index_temp_temp_temp_temp_temp_temp_temp;\n    long[]\
    \ paren_counts_max_index_temp_temp_temp_temp_temp_temp_temp_temp;\n    long[]\
    \ paren_counts_min_index_temp_temp_temp_temp_temp_temp_temp_temp;\n    long[]\
    \ paren_counts_max_index_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n    long[]\
    \ paren_counts_min_index_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n    long[]\
    \ paren_counts_\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n \
    \   assert(candidate(\"(()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n\
    \    assert(candidate(\"() (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n   \
    \ assert(candidate(\"(()(())((())))\") == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp2qlda78i.d(37): Error: semicolon expected, not \''unittest\''\n/tmp/tmp2qlda78i.d(37):
    Error: found \''unittest\'' instead of statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmp2qlda78i.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    foreach(paren_group; paren_string.split(\" \"))\n    {\n      \
    \  long max_depth = 0;\n        long depth = 0;\n        foreach(paren; paren_group)\n\
    \        {\n            if(paren == '(')\n            {\n                depth++;\n\
    \                max_depth = max(max_depth, depth);\n            }\n         \
    \   else\n            {\n                depth--;\n            }\n        }\n\
    \        result ~= max_depth;\n    }\n    return result;\n}\nunittest\n{\n   \
    \ alias candidate = parse_nested_parens;\n\n    assert(candidate(\"(()()) ((()))\
    \ () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (()) ((()))\
    \ (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\")\
    \ == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxwn8x_rj.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long[] paren_count;\n    long[] paren_count_max;\n    long[] paren_count_max_index;\n\
    \    long[] paren_count_max_index_temp;\n    long[] paren_count_max_index_temp_temp;\n\
    \    long[] paren_count_max_index_temp_temp_temp;\n    long[] paren_count_max_index_temp_temp_temp_temp;\n\
    \    long[] paren_count_max_index_temp_temp_temp_temp_temp;\n    long[] paren_count_max_index_temp_temp_temp_temp_temp_temp;\n\
    \    long[] paren_count_max_index_temp_temp_temp_temp_temp_temp_temp;\n    long[]\
    \ paren_count_max_index_temp_temp_temp_temp_temp_temp_temp_temp;\n    long[] paren_count_max_index_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \    long[] paren_count_max_index_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \    long[] paren_count_max_index_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \    long[] paren_count_max_index_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \    long[] paren_count_max_index_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \    long[] paren_count_max_index_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \    long[] paren_count_max_index_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \    long[] paren_count_max_index_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\n\
    unittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpq9u35jep.d(32): Error: semicolon expected, not \''unittest\''\n/tmp/tmpq9u35jep.d(32):
    Error: found \''unittest\'' instead of statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpq9u35jep.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long max_depth = 0;\n    long curr_depth = 0;\n    foreach(c; paren_string)\
    \ \n    {\n        if(c == '(') \n        {\n            curr_depth++;\n     \
    \       max_depth = max(max_depth, curr_depth);\n        }\n        else if(c\
    \ == ')') \n        {\n            curr_depth--;\n        }\n        else if(c\
    \ == ' ') \n        {\n            result ~= max_depth;\n            max_depth\
    \ = 0;\n            curr_depth = 0;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprfy586dv.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long[] paren_count;\n    long[] paren_depth;\n    long[] paren_max_depth;\n\
    \    long[] paren_max_depth_index;\n    long[] paren_max_depth_count;\n    long[]\
    \ paren_max_depth_index_count;\n    long[] paren_max_depth_index_count_max;\n\
    \    long[] paren_max_depth_index_count_max_index;\n    long[] paren_max_depth_index_count_max_index_count;\n\
    \    long[] paren_max_depth_index_count_max_index_count_max;\n    long[] paren_max_depth_index_count_max_index_count_max_index;\n\
    \    long[] paren_max_depth_index_count_max_index_count_max_index_count;\n   \
    \ long[] paren_max_depth_index_count_max_index_count_max_index_count_max;\n  \
    \  long[] paren_max_depth_index_count_max_index_count_max_index_count_max_index;\n\
    \    long[] paren_max_depth_index_count_max_index_count_max_index_count_max_index_count;\n\
    \    long[] paren_max_depth_index_count_max_index_count_max_index_count_max_index_count_max;\n\
    \    long[] paren_max_depth_index_count_max_index_count_max_index_count_max_index_count_max_index;\n\
    \    long[] paren_max_depth_index_count_max_index_count_max_index_count_max_index_count_max_index_count;\n\
    \    long[] paren_max_depth_index_count_max_index_count_max_index_count_max_index_count_max_index_count_max;\n\
    \    long[] paren_max_depth_index_count_max_index_count_max_index_count_max_index_count_max_index_count_max_index;\n\
    \    long[] paren_max_depth_index_count\nunittest\n{\n    alias candidate = parse_nested_parens;\n\
    \n    assert(candidate(\"(()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n\
    \    assert(candidate(\"() (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n   \
    \ assert(candidate(\"(()(())((())))\") == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp94fn883f.d(34): Error: semicolon expected, not \''unittest\''\n/tmp/tmp94fn883f.d(34):
    Error: found \''unittest\'' instead of statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmp94fn883f.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    int max_nesting = 0;\n    int curr_nesting = 0;\n    foreach(c;\
    \ paren_string)\n    {\n        if(c == '(')\n        {\n            curr_nesting++;\n\
    \            max_nesting = max(max_nesting, curr_nesting);\n        }\n      \
    \  else if(c == ')')\n        {\n            curr_nesting--;\n        }\n    \
    \    else if(c == ' ')\n        {\n            result ~= max_nesting;\n      \
    \      max_nesting = 0;\n            curr_nesting = 0;\n        }\n    }\n   \
    \ result ~= max_nesting;\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = parse_nested_parens;\n\n    assert(candidate(\"(()()) ((())) () ((())()())\"\
    ) == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (()) ((())) (((())))\") ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\") == [4L]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa14nk6on.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    int i = 0;\n    int n = paren_string.length;\n    while (i < n)\n\
    \    {\n        int j = i;\n        int level = 0;\n        int max_level = 0;\n\
    \        while (j < n && paren_string[j] != ' ')\n        {\n            if (paren_string[j]\
    \ == '(')\n                level++;\n            else if (paren_string[j] == ')')\n\
    \                level--;\n            max_level = max(max_level, level);\n  \
    \          j++;\n        }\n        result ~= max_level;\n        i = j + 1;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = parse_nested_parens;\n\
    \n    assert(candidate(\"(()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n\
    \    assert(candidate(\"() (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n   \
    \ assert(candidate(\"(()(())((())))\") == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyhbwpxl8.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long[] stack;\n    long max_depth = 0;\n    long depth = 0;\n \
    \   foreach(c; paren_string)\n    {\n        if(c == '(')\n        {\n       \
    \     depth++;\n            if(depth > max_depth)\n                max_depth =\
    \ depth;\n        }\n        else if(c == ')')\n        {\n            depth--;\n\
    \            if(depth < 0)\n                throw new Exception(\"Invalid paren\
    \ string\");\n        }\n        else if(c == ' ')\n        {\n            if(depth\
    \ != 0)\n                throw new Exception(\"Invalid paren string\");\n    \
    \        result ~= max_depth;\n            max_depth = 0;\n        }\n       \
    \ else\n            throw new Exception(\"Invalid paren string\");\n    }\n  \
    \  if(depth != 0)\n        throw new Exception(\"Invalid paren string\");\n  \
    \  result ~= max_depth;\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = parse_nested_parens;\n\n    assert(candidate(\"(()()) ((())) () ((())()())\"\
    ) == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (()) ((())) (((())))\") ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\") == [4L]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5jk1oe8l.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result = new long[];\n    long[] paren_count = new long[];\n    long[] paren_level\
    \ = new long[];\n    long[] paren_level_max = new long[];\n    long[] paren_level_max_index\
    \ = new long[];\n    long[] paren_level_max_count = new long[];\n    long[] paren_level_max_count_index\
    \ = new long[];\n    long[] paren_level_max_count_index_max = new long[];\n  \
    \  long[] paren_level_max_count_index_max_index = new long[];\n    long[] paren_level_max_count_index_max_index_max\
    \ = new long[];\n    long[] paren_level_max_count_index_max_index_max_index =\
    \ new long[];\n    long[] paren_level_max_count_index_max_index_max_index_max\
    \ = new long[];\n    long[] paren_level_max_count_index_max_index_max_index_max_index\
    \ = new long[];\n    long[] paren_level_max_count_index_max_index_max_index_max_index_max\
    \ = new long[];\n    long[] paren_level_max_count_index_max_index_max_index_max_index_max_index\
    \ = new long[];\n    long[] paren_level_max_count_index_max_index_max_index_max_index_max_index_max\
    \ = new long[];\n    long[] paren_level_max_count_index_max_index_max_index_max_index_max_index_max_index\
    \ = new long[];\n    long[] paren_level_max_count_index_max_index_max_index_max_index_max_index_max_index_max\
    \ = new long[];\n    long[] paren_level_max_count_index_max_index_max_index_max_index_max_index_max_index_max_index\
    \ = new long[];\n    long[] paren_level_max_count_index_max_count_index_max\n\
    unittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpgc_5qb6w.d(32): Error: semicolon expected, not \''unittest\''\n/tmp/tmpgc_5qb6w.d(32):
    Error: found \''unittest\'' instead of statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpgc_5qb6w.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n  \
    \  int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n\
    \    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n\
    \    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int aa =\
    \ 0;\n    int ab = 0;\n    int ac = 0;\n    int ad = 0;\n    int ae = 0;\n   \
    \ int af = 0;\n    int ag = 0;\n    int ah = 0;\n    int ai = 0;\n    int aj =\
    \ 0;\n    int ak = 0;\n    int al = 0;\n    int am = 0;\n    int an = 0;\n   \
    \ int ao = 0;\n    int ap = 0;\n    int aq = 0;\n    int ar = 0;\n    int as =\
    \ 0;\n    int at = 0;\n    int au = 0;\n    int av = 0;\n    int aw = 0;\n   \
    \ int ax = 0;\n    int ay = 0;\n    int az = 0;\n    int ba = 0;\n    int bb =\
    \ 0;\n    int bc = 0;\n    int bd = 0;\n    int be = 0;\n    int bf = 0;\n   \
    \ int bg = 0;\n    int bh = 0;\n    int bi = 0;\n    int bj = 0;\n    int bk =\
    \ 0;\n    int bl = 0;\n    int bm = 0;\n    int bn = 0;\n    int bo = 0;\n   \
    \ int bp = 0;\n    int bq = 0;\n    int br = 0;\n    int bs = 0;\n    int bt =\
    \ 0;\n    int bu = 0;\n    int bv = 0;\n    int bw = 0;\n    int bx = 0;\n   \
    \ int by = 0\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpila08q30.d(82): Error: semicolon expected, not \''unittest\''\n/tmp/tmpila08q30.d(82):
    Error: found \''unittest\'' instead of statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpila08q30.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long max_level = 0;\n    long level = 0;\n    foreach(c; paren_string)\n\
    \    {\n        if(c == '(')\n        {\n            level++;\n            max_level\
    \ = max(max_level, level);\n        }\n        else if(c == ')')\n        {\n\
    \            level--;\n        }\n        else if(c == ' ')\n        {\n     \
    \       result ~= max_level;\n            max_level = 0;\n            level =\
    \ 0;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = parse_nested_parens;\n\n    assert(candidate(\"(()()) ((())) () ((())()())\"\
    ) == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (()) ((())) (((())))\") ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\") == [4L]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz4xmttuy.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long[] temp;\n    long[] temp2;\n    long[] temp3;\n    long[]\
    \ temp4;\n    long[] temp5;\n    long[] temp6;\n    long[] temp7;\n    long[]\
    \ temp8;\n    long[] temp9;\n    long[] temp10;\n    long[] temp11;\n    long[]\
    \ temp12;\n    long[] temp13;\n    long[] temp14;\n    long[] temp15;\n    long[]\
    \ temp16;\n    long[] temp17;\n    long[] temp18;\n    long[] temp19;\n    long[]\
    \ temp20;\n    long[] temp21;\n    long[] temp22;\n    long[] temp23;\n    long[]\
    \ temp24;\n    long[] temp25;\n    long[] temp26;\n    long[] temp27;\n    long[]\
    \ temp28;\n    long[] temp29;\n    long[] temp30;\n    long[] temp31;\n    long[]\
    \ temp32;\n    long[] temp33;\n    long[] temp34;\n    long[] temp35;\n    long[]\
    \ temp36;\n    long[] temp37;\n    long[] temp38;\n    long[] temp39;\n    long[]\
    \ temp40;\n    long[] temp41;\n    long[] temp42;\n    long[] temp43;\n    long[]\
    \ temp44;\n    long[] temp45;\n    long[] temp46;\n    long[] temp47;\n    long[]\
    \ temp48;\n    long[] temp49;\n    long[] temp50;\n    long[] temp51;\n    long[]\
    \ temp52;\n    long[] temp53;\n    long[] temp54;\n    long[] temp55;\n    long[]\
    \ temp56;\n    long[] temp57;\n    long[] temp58;\n    long[] temp59;\n    long[]\
    \ temp60;\n    long[] temp61;\n    long[] temp62;\n    long[] temp63;\n    long[]\
    \ temp64;\n    long[] temp65;\n    long[] temp66;\n    long[] temp67;\n    long[]\
    \ temp68;\n    long[] temp69;\n    long[] temp70;\n    long[] temp71;\n    long[]\
    \ temp72;\n\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpfj7qlk81.d(86): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfj7qlk81.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long[] stack;\n    long current_level = 0;\n    long max_level\
    \ = 0;\n    foreach(c; paren_string)\n    {\n        if(c == '(')\n        {\n\
    \            stack ~= current_level;\n            current_level++;\n         \
    \   max_level = max(max_level, current_level);\n        }\n        else if(c ==\
    \ ')')\n        {\n            if(stack.length == 0)\n            {\n        \
    \        return [0];\n            }\n            current_level = stack[$-1];\n\
    \            stack = stack[0..$-1];\n        }\n    }\n    if(stack.length !=\
    \ 0)\n    {\n        return [0];\n    }\n    return [max_level];\n}\nunittest\n\
    {\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"(()())\
    \ ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (())\
    \ ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvu_ghzco.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    int current_level = 0;\n    int max_level = 0;\n    foreach(char\
    \ c; paren_string)\n    {\n        if(c == '(')\n        {\n            current_level++;\n\
    \            max_level = max(max_level, current_level);\n        }\n        else\
    \ if(c == ')')\n        {\n            current_level--;\n        }\n        else\
    \ if(c == ' ')\n        {\n            result ~= max_level;\n            max_level\
    \ = 0;\n            current_level = 0;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdu7ajjlv.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long[] stack;\n    long[] max_stack;\n    long max_depth = 0;\n\
    \    long depth = 0;\n    foreach(c; paren_string)\n    {\n        if(c == '(')\n\
    \        {\n            stack ~= 1;\n            depth++;\n            if(depth\
    \ > max_depth)\n            {\n                max_depth = depth;\n          \
    \      max_stack = stack;\n            }\n        }\n        else if(c == ')')\n\
    \        {\n            stack ~= -1;\n            depth--;\n        }\n      \
    \  else\n        {\n            result ~= max_depth;\n            stack = [];\n\
    \            max_stack = [];\n            depth = 0;\n            max_depth =\
    \ 0;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = parse_nested_parens;\n\n    assert(candidate(\"(()()) ((())) () ((())()())\"\
    ) == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (()) ((())) (((())))\") ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\") == [4L]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplaxmck7j.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long[] stack;\n    long max_depth = 0;\n    long depth = 0;\n \
    \   foreach(c; paren_string)\n    {\n        if(c == '(')\n        {\n       \
    \     stack ~= c;\n            depth++;\n            max_depth = max(max_depth,\
    \ depth);\n        }\n        else if(c == ')')\n        {\n            if(stack.length\
    \ == 0)\n            {\n                throw new Exception(\"Invalid string\"\
    );\n            }\n            stack.popBack();\n            depth--;\n      \
    \  }\n        else if(c == ' ')\n        {\n            if(stack.length != 0)\n\
    \            {\n                throw new Exception(\"Invalid string\");\n   \
    \         }\n            result ~= max_depth;\n            max_depth = 0;\n  \
    \          depth = 0;\n        }\n        else\n        {\n            throw new\
    \ Exception(\"Invalid string\");\n        }\n    }\n    if(stack.length != 0)\n\
    \    {\n        throw new Exception(\"Invalid string\");\n    }\n    result ~=\
    \ max_depth;\n    return result;\n}\nunittest\n{\n    alias candidate = parse_nested_parens;\n\
    \n    assert(candidate(\"(()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n\
    \    assert(candidate(\"() (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n   \
    \ assert(candidate(\"(()(())((())))\") == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_b2pce7m.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long[] stack;\n    long[] max_stack;\n    long max_depth = 0;\n\
    \    long depth = 0;\n    foreach(c; paren_string)\n    {\n        if(c == '(')\n\
    \        {\n            stack ~= 1;\n            depth++;\n            if(depth\
    \ > max_depth)\n            {\n                max_depth = depth;\n          \
    \      max_stack = stack;\n            }\n        }\n        else if(c == ')')\n\
    \        {\n            stack ~= -1;\n            depth--;\n        }\n      \
    \  else if(c == ' ')\n        {\n            result ~= max_depth;\n          \
    \  stack = [];\n            max_stack = [];\n            max_depth = 0;\n    \
    \        depth = 0;\n        }\n    }\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = parse_nested_parens;\n\n    assert(candidate(\"(()()) ((()))\
    \ () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (()) ((()))\
    \ (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\")\
    \ == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1zh98ax6.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long max_nesting_level = 0;\n    long current_nesting_level = 0;\n\
    \    foreach(char c; paren_string)\n    {\n        if(c == '(')\n        {\n \
    \           current_nesting_level++;\n            max_nesting_level = max(max_nesting_level,\
    \ current_nesting_level);\n        }\n        else if(c == ')')\n        {\n \
    \           current_nesting_level--;\n        }\n        else if(c == ' ')\n \
    \       {\n            result ~= max_nesting_level;\n            max_nesting_level\
    \ = 0;\n            current_nesting_level = 0;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1u1n8ngi.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long[] paren_counts;\n    long[] paren_counts_max;\n    long[]\
    \ paren_counts_min;\n    long[] paren_counts_max_index;\n    long[] paren_counts_min_index;\n\
    \    long[] paren_counts_max_index_temp;\n    long[] paren_counts_min_index_temp;\n\
    \    long[] paren_counts_max_temp;\n    long[] paren_counts_min_temp;\n    long[]\
    \ paren_counts_temp;\n    long[] paren_counts_temp_index;\n    long[] paren_counts_temp_index_temp;\n\
    \    long[] paren_counts_temp_temp;\n    long[] paren_counts_temp_temp_index;\n\
    \    long[] paren_counts_temp_temp_index_temp;\n    long[] paren_counts_temp_temp_temp;\n\
    \    long[] paren_counts_temp_temp_temp_index;\n    long[] paren_counts_temp_temp_temp_index_temp;\n\
    \    long[] paren_counts_temp_temp_temp_temp;\n    long[] paren_counts_temp_temp_temp_temp_index;\n\
    \    long[] paren_counts_temp_temp_temp_temp_index_temp;\n    long[] paren_counts_temp_temp_temp_temp_temp;\n\
    \    long[] paren_counts_temp_temp_temp_temp_temp_index;\n    long[] paren_counts_temp_temp_temp_temp_temp_index_temp;\n\
    \    long[] paren_counts_temp_temp_temp_temp_temp_temp;\n    long[] paren_counts_temp_temp_temp_temp_temp_temp_index;\n\
    \    long[] paren_counts_temp_temp_temp_temp_temp_temp_index_temp;\n    long[]\
    \ paren_counts_temp_temp_temp_temp_temp_temp_temp;\n    long[] paren_counts_temp_temp_temp_\n\
    unittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4xb36q87.d(42): Error: semicolon expected, not \''unittest\''\n/tmp/tmp4xb36q87.d(42):
    Error: found \''unittest\'' instead of statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmp4xb36q87.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long max_nesting = 0;\n    long current_nesting = 0;\n    foreach(c;\
    \ paren_string)\n    {\n        if(c == '(')\n        {\n            current_nesting++;\n\
    \            max_nesting = max(max_nesting, current_nesting);\n        }\n   \
    \     else if(c == ')')\n        {\n            current_nesting--;\n        }\n\
    \        else if(c == ' ')\n        {\n            result ~= max_nesting;\n  \
    \          max_nesting = 0;\n            current_nesting = 0;\n        }\n   \
    \ }\n    return result;\n}\nunittest\n{\n    alias candidate = parse_nested_parens;\n\
    \n    assert(candidate(\"(()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n\
    \    assert(candidate(\"() (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n   \
    \ assert(candidate(\"(()(())((())))\") == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0enumut6.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long[] paren_stack;\n    long[] paren_count;\n    long[] paren_max;\n\
    \    long[] paren_max_index;\n    long[] paren_max_count;\n    long[] paren_max_count_index;\n\
    \    long[] paren_max_count_index_max;\n    long[] paren_max_count_index_max_index;\n\
    \    long[] paren_max_count_index_max_index_max;\n    long[] paren_max_count_index_max_index_max_index;\n\
    \    long[] paren_max_count_index_max_index_max_index_max;\n    long[] paren_max_count_index_max_index_max_index_max_index;\n\
    \    long[] paren_max_count_index_max_index_max_index_max_index_max;\n    long[]\
    \ paren_max_count_index_max_index_max_index_max_index_max_index;\n    long[] paren_max_count_index_max_index_max_index_max_index_max_index_max;\n\
    \    long[] paren_max_count_index_max_index_max_index_max_index_max_index_max_index;\n\
    \    long[] paren_max_count_index_max_index_max_index_max_index_max_index_max_index_max;\n\
    \    long[] paren_max_count_index_max_index_max_index_max_index_max_index_max_index_max_index;\n\
    \    long[] paren_max_count_index_max_index_max_index_max_index_max_index_max_index_max_index_max;\n\
    \    long[] paren_max_count_index_max_index_max_index_max_index_max_index_max_index_max_index_max_index;\n\
    \    long[] paren_max_count_index_max_index_max_index_max_index_max_index_max_index_max_index_max_index_max;\n\
    \    long[] paren_\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n\
    \    assert(candidate(\"(()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n\
    \    assert(candidate(\"() (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n   \
    \ assert(candidate(\"(()(())((())))\") == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpn_p7v2u4.d(35): Error: semicolon expected, not \''unittest\''\n/tmp/tmpn_p7v2u4.d(35):
    Error: found \''unittest\'' instead of statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpn_p7v2u4.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long max_depth = 0;\n    long depth = 0;\n    foreach(c; paren_string)\n\
    \    {\n        if(c == '(')\n        {\n            depth++;\n            max_depth\
    \ = max(max_depth, depth);\n        }\n        else if(c == ')')\n        {\n\
    \            depth--;\n        }\n        else if(c == ' ')\n        {\n     \
    \       result ~= max_depth;\n            max_depth = 0;\n            depth =\
    \ 0;\n        }\n    }\n    result ~= max_depth;\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"(()())\
    \ ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (())\
    \ ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3pi3ol54.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long max_depth = 0;\n    long depth = 0;\n    foreach(c; paren_string)\
    \ \n    {\n        if (c == '(') \n        {\n            depth++;\n         \
    \   max_depth = max(max_depth, depth);\n        }\n        else if (c == ')')\
    \ \n        {\n            depth--;\n        }\n        else if (c == ' ') \n\
    \        {\n            result ~= max_depth;\n            max_depth = 0;\n   \
    \         depth = 0;\n        }\n    }\n    result ~= max_depth;\n    return result;\n\
    }\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpeqxo_cis.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long[] temp;\n    long[] temp2;\n    long[] temp3;\n    long[]\
    \ temp4;\n    long[] temp5;\n    long[] temp6;\n    long[] temp7;\n    long[]\
    \ temp8;\n    long[] temp9;\n    long[] temp10;\n    long[] temp11;\n    long[]\
    \ temp12;\n    long[] temp13;\n    long[] temp14;\n    long[] temp15;\n    long[]\
    \ temp16;\n    long[] temp17;\n    long[] temp18;\n    long[] temp19;\n    long[]\
    \ temp20;\n    long[] temp21;\n    long[] temp22;\n    long[] temp23;\n    long[]\
    \ temp24;\n    long[] temp25;\n    long[] temp26;\n    long[] temp27;\n    long[]\
    \ temp28;\n    long[] temp29;\n    long[] temp30;\n    long[] temp31;\n    long[]\
    \ temp32;\n    long[] temp33;\n    long[] temp34;\n    long[] temp35;\n    long[]\
    \ temp36;\n    long[] temp37;\n    long[] temp38;\n    long[] temp39;\n    long[]\
    \ temp40;\n    long[] temp41;\n    long[] temp42;\n    long[] temp43;\n    long[]\
    \ temp44;\n    long[] temp45;\n    long[] temp46;\n    long[] temp47;\n    long[]\
    \ temp48;\n    long[] temp49;\n    long[] temp50;\n    long[] temp51;\n    long[]\
    \ temp52;\n    long[] temp53;\n    long[] temp54;\n    long[] temp55;\n    long[]\
    \ temp56;\n    long[] temp57;\n    long[] temp58;\n    long[] temp59;\n    long[]\
    \ temp60;\n    long[] temp61;\n    long[] temp62;\n    long[] temp63;\n    long[]\
    \ temp64;\n    long[] temp65;\n    long[] temp66;\n    long[] temp67;\n    long[]\
    \ temp68;\n    long[] temp69;\n    long[] temp70;\n    long[] temp71;\n    long[]\
    \ temp72;\n\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpfj7qlk81.d(86): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfj7qlk81.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long max_depth = 0;\n    long current_depth = 0;\n    foreach(c;\
    \ paren_string) \n    {\n        if(c == '(') \n        {\n            current_depth++;\n\
    \            max_depth = max(max_depth, current_depth);\n        }\n        else\
    \ if(c == ')') \n        {\n            current_depth--;\n        }\n        else\
    \ if(c == ' ') \n        {\n            result ~= max_depth;\n            max_depth\
    \ = 0;\n            current_depth = 0;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7hjkkoee.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long[] stack;\n    long current_max = 0;\n    long max_so_far =\
    \ 0;\n    foreach(ch; paren_string)\n    {\n        if(ch == '(')\n        {\n\
    \            stack ~= 1;\n            current_max += 1;\n            max_so_far\
    \ = max(max_so_far, current_max);\n        }\n        else if(ch == ')')\n   \
    \     {\n            stack ~= -1;\n            current_max -= 1;\n        }\n\
    \        else if(ch == ' ')\n        {\n            result ~= max_so_far;\n  \
    \          max_so_far = 0;\n            current_max = 0;\n        }\n    }\n \
    \   return result;\n}\nunittest\n{\n    alias candidate = parse_nested_parens;\n\
    \n    assert(candidate(\"(()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n\
    \    assert(candidate(\"() (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n   \
    \ assert(candidate(\"(()(())((())))\") == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj79hqo60.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int max_level =\
    \ 0;\n    int level = 0;\n    int len = paren_string.length;\n    while (i < len)\n\
    \    {\n        if (paren_string[i] == '(')\n        {\n            level++;\n\
    \            if (level > max_level)\n            {\n                max_level\
    \ = level;\n            }\n        }\n        else if (paren_string[i] == ')')\n\
    \        {\n            level--;\n        }\n        else if (paren_string[i]\
    \ == ' ')\n        {\n            result ~= max_level;\n            max_level\
    \ = 0;\n            level = 0;\n        }\n        i++;\n    }\n    result ~=\
    \ max_level;\n    return result;\n}\nunittest\n{\n    alias candidate = parse_nested_parens;\n\
    \n    assert(candidate(\"(()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n\
    \    assert(candidate(\"() (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n   \
    \ assert(candidate(\"(()(())((())))\") == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc4suer75.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    int max_level = 0;\n    int cur_level = 0;\n    foreach(c; paren_string)\n\
    \    {\n        if(c == '(')\n        {\n            cur_level++;\n          \
    \  max_level = max(max_level, cur_level);\n        }\n        else if(c == ')')\n\
    \        {\n            cur_level--;\n        }\n        else if(c == ' ')\n \
    \       {\n            result ~= max_level;\n            max_level = 0;\n    \
    \        cur_level = 0;\n        }\n    }\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"(()()) ((()))\
    \ () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (()) ((()))\
    \ (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\")\
    \ == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpottemlrx.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long[] stack;\n    long max_depth;\n    long depth;\n    long i;\n\
    \    long j;\n    long k;\n    long n;\n    long m;\n    long len;\n    long start;\n\
    \    long end;\n    long start_index;\n    long end_index;\n    long[] temp;\n\
    \    long[] temp2;\n    long[] temp3;\n    long[] temp4;\n    long[] temp5;\n\
    \    long[] temp6;\n    long[] temp7;\n    long[] temp8;\n    long[] temp9;\n\
    \    long[] temp10;\n    long[] temp11;\n    long[] temp12;\n    long[] temp13;\n\
    \    long[] temp14;\n    long[] temp15;\n    long[] temp16;\n    long[] temp17;\n\
    \    long[] temp18;\n    long[] temp19;\n    long[] temp20;\n    long[] temp21;\n\
    \    long[] temp22;\n    long[] temp23;\n    long[] temp24;\n    long[] temp25;\n\
    \    long[] temp26;\n    long[] temp27;\n    long[] temp28;\n    long[] temp29;\n\
    \    long[] temp30;\n    long[] temp31;\n    long[] temp32;\n    long[] temp33;\n\
    \    long[] temp34;\n    long[] temp35;\n    long[] temp36;\n    long[] temp37;\n\
    \    long[] temp38;\n    long[] temp39;\n    long[] temp40;\n    long[] temp41;\n\
    \    long[] temp42;\n    long[] temp43;\n    long[] temp44;\n    long[] temp45;\n\
    \    long[] temp46;\n    long[] temp47;\n    long[] temp48;\n    long[] temp49;\n\
    \    long[] temp50;\n    long[] temp51;\n    long[] temp52;\n    long[] temp53;\n\
    \    long[] temp54;\n    long[] temp55;\n    long[] temp56;\n    long[] temp57;\n\
    \    long[] temp58;\n    long[] temp59;\n    long[] temp60;\n    long[] temp61;\n\
    \    long[] temp62\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n\
    \    assert(candidate(\"(()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n\
    \    assert(candidate(\"() (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n   \
    \ assert(candidate(\"(()(())((())))\") == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0f2e1ekm.d(88): Error: semicolon expected, not \''unittest\''\n/tmp/tmp0f2e1ekm.d(88):
    Error: found \''unittest\'' instead of statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmp0f2e1ekm.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    int max_level = 0;\n    int level = 0;\n    foreach(c; paren_string)\
    \ \n    {\n        if (c == '(') \n        {\n            level++;\n         \
    \   max_level = max(max_level, level);\n        }\n        else if (c == ')')\
    \ \n        {\n            level--;\n        }\n        else if (c == ' ') \n\
    \        {\n            result ~= max_level;\n            max_level = 0;\n   \
    \         level = 0;\n        }\n    }\n    return result;\n}\nunittest\n{\n \
    \   alias candidate = parse_nested_parens;\n\n    assert(candidate(\"(()()) ((()))\
    \ () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (()) ((()))\
    \ (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\")\
    \ == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprbu0lgm2.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long max_depth = 0;\n    long current_depth = 0;\n    foreach(c;\
    \ paren_string)\n    {\n        if(c == '(')\n        {\n            current_depth++;\n\
    \            max_depth = max(max_depth, current_depth);\n        }\n        else\
    \ if(c == ')')\n        {\n            current_depth--;\n        }\n        else\
    \ if(c == ' ')\n        {\n            result ~= max_depth;\n            max_depth\
    \ = 0;\n            current_depth = 0;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnzoptv3z.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    int current_level = 0;\n    int max_level = 0;\n    foreach(c;\
    \ paren_string)\n    {\n        if(c == '(')\n        {\n            current_level++;\n\
    \            max_level = max(max_level, current_level);\n        }\n        else\
    \ if(c == ')')\n        {\n            current_level--;\n        }\n        else\
    \ if(c == ' ')\n        {\n            result ~= max_level;\n            max_level\
    \ = 0;\n            current_level = 0;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp11capodx.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    int current_level = 0;\n    int max_level = 0;\n    foreach(ch;\
    \ paren_string)\n    {\n        if(ch == '(')\n        {\n            current_level++;\n\
    \            max_level = max(max_level, current_level);\n        }\n        else\
    \ if(ch == ')')\n        {\n            current_level--;\n        }\n        else\
    \ if(ch == ' ')\n        {\n            result ~= max_level;\n            max_level\
    \ = 0;\n            current_level = 0;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp66083xu7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result = new long[paren_string.length];\n    long[] stack = new long[paren_string.length];\n\
    \    long stack_index = 0;\n    long max_depth = 0;\n    long depth = 0;\n   \
    \ long result_index = 0;\n    foreach(i, c; paren_string)\n    {\n        if(c\
    \ == '(')\n        {\n            stack[stack_index] = depth;\n            stack_index++;\n\
    \            depth++;\n            max_depth = max(max_depth, depth);\n      \
    \  }\n        else if(c == ')')\n        {\n            stack_index--;\n     \
    \       depth = stack[stack_index];\n        }\n        else if(c == ' ')\n  \
    \      {\n            result[result_index] = max_depth;\n            result_index++;\n\
    \            max_depth = 0;\n            depth = 0;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzpglei_y.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long[] paren_count;\n    long[] paren_level;\n    long[] paren_level_max;\n\
    \    long[] paren_level_max_index;\n    long[] paren_level_max_index_count;\n\
    \    long[] paren_level_max_index_count_max;\n    long[] paren_level_max_index_count_max_index;\n\
    \    long[] paren_level_max_index_count_max_index_count;\n    long[] paren_level_max_index_count_max_index_count_max;\n\
    \    long[] paren_level_max_index_count_max_index_count_max_index;\n    long[]\
    \ paren_level_max_index_count_max_index_count_max_index_count;\n    long[] paren_level_max_index_count_max_index_count_max_index_count_max;\n\
    \    long[] paren_level_max_index_count_max_index_count_max_index_count_max_index;\n\
    \    long[] paren_level_max_index_count_max_index_count_max_index_count_max_index_count;\n\
    \    long[] paren_level_max_index_count_max_index_count_max_index_count_max_index_count_max;\n\
    \    long[] paren_level_max_index_count_max_index_count_max_index_count_max_index_count_max_index;\n\
    \    long[] paren_level_max_index_count_max_index_count_max_index_count_max_index_count_max_index_count;\n\
    \    long[] paren_level_max_index_count_max_index_count_max_index_count_max_index_count_max_index_count_max;\n\
    \    long[] paren_level_max_index_count_max_index_count_max_index_count_max_index_count_max_index_count_max_index;\n\
    \    long[] paren_level_max_index_count_max_index_count_max_index_count_\nunittest\n\
    {\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"(()())\
    \ ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (())\
    \ ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpy_7p_zgv.d(33): Error: semicolon expected, not \''unittest\''\n/tmp/tmpy_7p_zgv.d(33):
    Error: found \''unittest\'' instead of statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpy_7p_zgv.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    int[] paren_stack;\n    int[] paren_level;\n    int max_level =\
    \ 0;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int len = paren_string.length;\n\
    \    int num_parens = 0;\n    int num_groups = 0;\n    int group_start = 0;\n\
    \    int group_end = 0;\n    int group_len = 0;\n    int group_level = 0;\n  \
    \  int group_max_level = 0;\n    int group_max_level_index = 0;\n    int group_max_level_start\
    \ = 0;\n    int group_max_level_end = 0;\n    int group_max_level_len = 0;\n \
    \   int group_max_level_start_index = 0;\n    int group_max_level_end_index =\
    \ 0;\n    int group_max_level_len_index = 0;\n    int group_max_level_start_index_index\
    \ = 0;\n    int group_max_level_end_index_index = 0;\n    int group_max_level_len_index_index\
    \ = 0;\n    int group_max_level_start_index_index_index = 0;\n    int group_max_level_end_index_index_index\
    \ = 0;\n    int group_max_level_len_index_index_index = 0;\n    int group_max_level_start_index_index_index_index\
    \ = 0;\n    int group_max_level_end_index_index_index_index = 0;\n    int group_max_level_len_index_index_index_index\
    \ = 0;\n    int group_max_level_start_index_index_index_index_index = 0;\n   \
    \ int group_max_level_end_index_index_index_index_index = 0;\n    int group_max_level_len_index_index_index_index_index\
    \ = 0;\n    int group_max_level_start_index_index_index_index_index_index = 0;\n\
    \    int group_max_level_end_index_index_index\nunittest\n{\n    alias candidate\
    \ = parse_nested_parens;\n\n    assert(candidate(\"(()()) ((())) () ((())()())\"\
    ) == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (()) ((())) (((())))\") ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\") == [4L]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpyaabwqh8.d(48): Error: semicolon expected, not \''unittest\''\n/tmp/tmpyaabwqh8.d(48):
    Error: found \''unittest\'' instead of statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpyaabwqh8.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long[] paren_count;\n    long[] paren_depth;\n    long[] paren_depth_max;\n\
    \    long[] paren_depth_max_index;\n    long[] paren_depth_max_index_count;\n\
    \    long[] paren_depth_max_index_count_max;\n    long[] paren_depth_max_index_count_max_index;\n\
    \    long[] paren_depth_max_index_count_max_index_count;\n    long[] paren_depth_max_index_count_max_index_count_max;\n\
    \    long[] paren_depth_max_index_count_max_index_count_max_index;\n    long[]\
    \ paren_depth_max_index_count_max_index_count_max_index_count;\n    long[] paren_depth_max_index_count_max_index_count_max_index_count_max;\n\
    \    long[] paren_depth_max_index_count_max_index_count_max_index_count_max_index;\n\
    \    long[] paren_depth_max_index_count_max_index_count_max_index_count_max_index_count;\n\
    \    long[] paren_depth_max_index_count_max_index_count_max_index_count_max_index_count_max;\n\
    \    long[] paren_depth_max_index_count_max_index_count_max_index_count_max_index_count_max_index;\n\
    \    long[] paren_depth_max_index_count_max_index_count_max_index_count_max_index_count_max_index_count;\n\
    \    long[] paren_depth_max_index_count_max_index_count_max_index_count_max_index_count_max_index_count_max;\n\
    \    long[] paren_depth_max_index_count_max_index_count_max_index_count_max_index_count_max_index_count_max_index;\n\
    \    long[] paren_depth_max_index_count_max_index_count_max_index_count_\nunittest\n\
    {\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"(()())\
    \ ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (())\
    \ ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpdii4to67.d(33): Error: semicolon expected, not \''unittest\''\n/tmp/tmpdii4to67.d(33):
    Error: found \''unittest\'' instead of statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpdii4to67.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long[] stack;\n    int stack_top = 0;\n    int max_depth = 0;\n\
    \    int depth = 0;\n    int i = 0;\n    int j = 0;\n    int len = paren_string.length;\n\
    \    int num_parens = 0;\n    int num_groups = 0;\n    int group_start = 0;\n\
    \    int group_end = 0;\n    int group_len = 0;\n    int group_parens = 0;\n \
    \   int group_depth = 0;\n    char c;\n    int[] group_paren_counts;\n    int[]\
    \ group_paren_depths;\n    int group_paren_counts_len = 0;\n    int group_paren_depths_len\
    \ = 0;\n    int group_paren_counts_top = 0;\n    int group_paren_depths_top =\
    \ 0;\n    int group_paren_counts_max = 0;\n    int group_paren_depths_max = 0;\n\
    \    int group_paren_counts_depth = 0;\n    int group_paren_depths_depth = 0;\n\
    \    int group_paren_counts_depth_max = 0;\n    int group_paren_depths_depth_max\
    \ = 0;\n    int group_paren_counts_depth_top = 0;\n    int group_paren_depths_depth_top\
    \ = 0;\n    int group_paren_counts_depth_len = 0;\n    int group_paren_depths_depth_len\
    \ = 0;\n    int group_paren_counts_depth_count = 0;\n    int group_paren_depths_depth_count\
    \ = 0;\n    int group_paren_counts_depth_count_max = 0;\n    int group_paren_depths_depth_count_max\
    \ = 0;\n    int group_paren_counts_depth_count_top = 0;\n    int group_paren_depths_depth_count_top\
    \ = 0;\n    int group_paren_counts_depth_count_len = 0;\n    int group_paren_depths_depth_count_len\
    \ = 0;\n    int group_paren_\nunittest\n{\n    alias candidate = parse_nested_parens;\n\
    \n    assert(candidate(\"(()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n\
    \    assert(candidate(\"() (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n   \
    \ assert(candidate(\"(()(())((())))\") == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpec0hj43h.d(53): Error: semicolon expected, not \''unittest\''\n/tmp/tmpec0hj43h.d(53):
    Error: found \''unittest\'' instead of statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpec0hj43h.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    int max_depth = 0;\n    int depth = 0;\n    foreach(c; paren_string)\n\
    \    {\n        if(c == '(')\n        {\n            depth++;\n            max_depth\
    \ = max(max_depth, depth);\n        }\n        else if(c == ')')\n        {\n\
    \            depth--;\n        }\n        else if(c == ' ')\n        {\n     \
    \       result ~= max_depth;\n            max_depth = 0;\n            depth =\
    \ 0;\n        }\n    }\n    result ~= max_depth;\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"(()())\
    \ ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (())\
    \ ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpowh85s6n.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    int i = 0;\n    int max_depth = 0;\n    int depth = 0;\n    foreach(c;\
    \ paren_string)\n    {\n        if(c == '(')\n        {\n            depth++;\n\
    \            if(depth > max_depth)\n            {\n                max_depth =\
    \ depth;\n            }\n        }\n        else if(c == ')')\n        {\n   \
    \         depth--;\n        }\n        else if(c == ' ')\n        {\n        \
    \    result ~= max_depth;\n            max_depth = 0;\n            depth = 0;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = parse_nested_parens;\n\
    \n    assert(candidate(\"(()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n\
    \    assert(candidate(\"() (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n   \
    \ assert(candidate(\"(()(())((())))\") == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcwo291o5.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    int max_depth = 0;\n    int depth = 0;\n    foreach(c; paren_string)\n\
    \    {\n        if(c == '(')\n        {\n            depth++;\n            max_depth\
    \ = max(max_depth, depth);\n        }\n        else if(c == ')')\n        {\n\
    \            depth--;\n        }\n        else if(c == ' ')\n        {\n     \
    \       result ~= max_depth;\n            max_depth = 0;\n            depth =\
    \ 0;\n        }\n    }\n    result ~= max_depth;\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"(()())\
    \ ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (())\
    \ ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpowh85s6n.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long[] temp;\n    long[] temp2;\n    long[] temp3;\n    long[]\
    \ temp4;\n    long[] temp5;\n    long[] temp6;\n    long[] temp7;\n    long[]\
    \ temp8;\n    long[] temp9;\n    long[] temp10;\n    long[] temp11;\n    long[]\
    \ temp12;\n    long[] temp13;\n    long[] temp14;\n    long[] temp15;\n    long[]\
    \ temp16;\n    long[] temp17;\n    long[] temp18;\n    long[] temp19;\n    long[]\
    \ temp20;\n    long[] temp21;\n    long[] temp22;\n    long[] temp23;\n    long[]\
    \ temp24;\n    long[] temp25;\n    long[] temp26;\n    long[] temp27;\n    long[]\
    \ temp28;\n    long[] temp29;\n    long[] temp30;\n    long[] temp31;\n    long[]\
    \ temp32;\n    long[] temp33;\n    long[] temp34;\n    long[] temp35;\n    long[]\
    \ temp36;\n    long[] temp37;\n    long[] temp38;\n    long[] temp39;\n    long[]\
    \ temp40;\n    long[] temp41;\n    long[] temp42;\n    long[] temp43;\n    long[]\
    \ temp44;\n    long[] temp45;\n    long[] temp46;\n    long[] temp47;\n    long[]\
    \ temp48;\n    long[] temp49;\n    long[] temp50;\n    long[] temp51;\n    long[]\
    \ temp52;\n    long[] temp53;\n    long[] temp54;\n    long[] temp55;\n    long[]\
    \ temp56;\n    long[] temp57;\n    long[] temp58;\n    long[] temp59;\n    long[]\
    \ temp60;\n    long[] temp61;\n    long[] temp62;\n    long[] temp63;\n    long[]\
    \ temp64;\n    long[] temp65;\n    long[] temp66;\n    long[] temp67;\n    long[]\
    \ temp68;\n    long[] temp69;\n    long[] temp70;\n    long[] temp71;\n    long[]\
    \ temp72;\n\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpfj7qlk81.d(86): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfj7qlk81.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    int max_depth = 0;\n    int current_depth = 0;\n    foreach(c;\
    \ paren_string) \n    {\n        if(c == '(') \n        {\n            current_depth++;\n\
    \            max_depth = max(max_depth, current_depth);\n        }\n        else\
    \ if(c == ')') \n        {\n            current_depth--;\n        }\n        else\
    \ if(c == ' ') \n        {\n            result ~= max_depth;\n            max_depth\
    \ = 0;\n            current_depth = 0;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu52ggfrs.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long[] paren_count;\n    long[] paren_level;\n    long[] paren_level_max;\n\
    \    long[] paren_level_min;\n    long[] paren_level_max_index;\n    long[] paren_level_min_index;\n\
    \    long[] paren_level_max_index_temp;\n    long[] paren_level_min_index_temp;\n\
    \    long[] paren_level_max_index_temp_temp;\n    long[] paren_level_min_index_temp_temp;\n\
    \    long[] paren_level_max_index_temp_temp_temp;\n    long[] paren_level_min_index_temp_temp_temp;\n\
    \    long[] paren_level_max_index_temp_temp_temp_temp;\n    long[] paren_level_min_index_temp_temp_temp_temp;\n\
    \    long[] paren_level_max_index_temp_temp_temp_temp_temp;\n    long[] paren_level_min_index_temp_temp_temp_temp_temp;\n\
    \    long[] paren_level_max_index_temp_temp_temp_temp_temp_temp;\n    long[] paren_level_min_index_temp_temp_temp_temp_temp_temp;\n\
    \    long[] paren_level_max_index_temp_temp_temp_temp_temp_temp_temp;\n    long[]\
    \ paren_level_min_index_temp_temp_temp_temp_temp_temp_temp;\n    long[] paren_level_max_index_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \    long[] paren_level_min_index_temp_temp_temp_temp_temp_temp_temp_temp;\n \
    \   long[] paren_level_max_index_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \    long[] paren_level_min_index_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \    long[] paren_level_max_index_temp_temp_temp_temp_temp_temp\nunittest\n{\n\
    \    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"(()()) ((()))\
    \ () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (()) ((()))\
    \ (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\")\
    \ == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp6x1zf367.d(38): Error: semicolon expected, not \''unittest\''\n/tmp/tmp6x1zf367.d(38):
    Error: found \''unittest\'' instead of statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmp6x1zf367.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long max_depth = 0;\n    long current_depth = 0;\n    foreach(c;\
    \ paren_string) \n    {\n        if(c == '(') \n        {\n            current_depth++;\n\
    \            max_depth = max(max_depth, current_depth);\n        }\n        else\
    \ if(c == ')') \n        {\n            current_depth--;\n        }\n        else\
    \ if(c == ' ') \n        {\n            result ~= max_depth;\n            max_depth\
    \ = 0;\n            current_depth = 0;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7hjkkoee.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    int max_depth = 0;\n    int depth = 0;\n    foreach(ch; paren_string)\n\
    \    {\n        if(ch == '(')\n        {\n            depth++;\n            max_depth\
    \ = max(max_depth, depth);\n        }\n        else if(ch == ')')\n        {\n\
    \            depth--;\n        }\n        else if(ch == ' ')\n        {\n    \
    \        result ~= max_depth;\n            max_depth = 0;\n            depth =\
    \ 0;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = parse_nested_parens;\n\n    assert(candidate(\"(()()) ((())) () ((())()())\"\
    ) == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (()) ((())) (((())))\") ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\") == [4L]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjqvvd9sq.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result = new long[paren_string.length];\n    long[] stack = new long[paren_string.length];\n\
    \    long stack_top = 0;\n    long max_depth = 0;\n    long depth = 0;\n    long\
    \ i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n\
    \    long n = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long\
    \ r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n\
    \    long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long\
    \ aa = 0;\n    long ab = 0;\n    long ac = 0;\n    long ad = 0;\n    long ae =\
    \ 0;\n    long af = 0;\n    long ag = 0;\n    long ah = 0;\n    long ai = 0;\n\
    \    long aj = 0;\n    long ak = 0;\n    long al = 0;\n    long am = 0;\n    long\
    \ an = 0;\n    long ao = 0;\n    long ap = 0;\n    long aq = 0;\n    long ar =\
    \ 0;\n    long as = 0;\n    long at = 0;\n    long au = 0;\n    long av = 0;\n\
    \    long aw = 0;\n    long ax = 0;\n    long ay = 0;\n    long az = 0;\n    long\
    \ ba = 0;\n    long bb = 0;\n    long bc = 0;\n    long bd = 0;\n    long be =\
    \ 0;\n    long bf = 0;\n    long bg = 0;\n    long bh = 0;\n    long bi = 0;\n\
    \    long bj = 0;\n    long bk = 0;\n    long bl = 0;\n    long bm = 0;\n    long\
    \ bn = 0;\n    long bo = 0;\n    long bp = 0;\n    long bq = 0;\n    long br =\
    \ 0;\n    long b\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n\
    \    assert(candidate(\"(()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n\
    \    assert(candidate(\"() (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n   \
    \ assert(candidate(\"(()(())((())))\") == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprmk_gccl.d(80): Error: semicolon expected, not \''unittest\''\n/tmp/tmprmk_gccl.d(80):
    Error: found \''unittest\'' instead of statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmprmk_gccl.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    foreach(paren_group; paren_string.split(\" \"))\n    {\n      \
    \  long max_nesting = 0;\n        long current_nesting = 0;\n        foreach(paren;\
    \ paren_group)\n        {\n            if(paren == '(')\n            {\n     \
    \           current_nesting++;\n                max_nesting = max(max_nesting,\
    \ current_nesting);\n            }\n            else if(paren == ')')\n      \
    \      {\n                current_nesting--;\n            }\n        }\n     \
    \   result ~= max_nesting;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = parse_nested_parens;\n\n    assert(candidate(\"(()()) ((())) ()\
    \ ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (()) ((())) (((())))\"\
    ) == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\") == [4L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplj79bp4w.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long max_depth = 0;\n    long current_depth = 0;\n    foreach(c;\
    \ paren_string)\n    {\n        if(c == '(')\n        {\n            current_depth++;\n\
    \            max_depth = max(max_depth, current_depth);\n        }\n        else\
    \ if(c == ')')\n        {\n            current_depth--;\n        }\n        else\
    \ if(c == ' ')\n        {\n            result ~= max_depth;\n            max_depth\
    \ = 0;\n            current_depth = 0;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnzoptv3z.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long[] stack;\n    long[] max_stack;\n    long max_depth = 0;\n\
    \    long depth = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long\
    \ l = 0;\n    long len = paren_string.length;\n    char c;\n    foreach(c; paren_string)\n\
    \    {\n        if(c == '(')\n        {\n            depth++;\n            stack\
    \ ~= depth;\n            if(depth > max_depth)\n            {\n              \
    \  max_depth = depth;\n            }\n        }\n        else if(c == ')')\n \
    \       {\n            stack ~= depth;\n            depth--;\n        }\n    \
    \    else if(c == ' ')\n        {\n            if(max_depth > 0)\n           \
    \ {\n                result ~= max_depth;\n                max_depth = 0;\n  \
    \          }\n            stack = [];\n            depth = 0;\n        }\n   \
    \ }\n    if(max_depth > 0)\n    {\n        result ~= max_depth;\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbnoivd8q.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    int current_level = 0;\n    int max_level = 0;\n    foreach(c;\
    \ paren_string)\n    {\n        if(c == '(')\n        {\n            current_level++;\n\
    \            max_level = max(max_level, current_level);\n        }\n        else\
    \ if(c == ')')\n        {\n            current_level--;\n        }\n        else\
    \ if(c == ' ')\n        {\n            result ~= max_level;\n            max_level\
    \ = 0;\n            current_level = 0;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp11capodx.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    int max_depth = 0;\n    int depth = 0;\n    foreach(c; paren_string)\
    \ \n    {\n        if (c == '(') \n        {\n            depth++;\n         \
    \   max_depth = max(max_depth, depth);\n        }\n        else if (c == ')')\
    \ \n        {\n            depth--;\n        }\n        else if (c == ' ') \n\
    \        {\n            result ~= max_depth;\n            max_depth = 0;\n   \
    \         depth = 0;\n        }\n    }\n    return result;\n}\nunittest\n{\n \
    \   alias candidate = parse_nested_parens;\n\n    assert(candidate(\"(()()) ((()))\
    \ () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (()) ((()))\
    \ (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\")\
    \ == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc7ipvkk5.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long[] stack;\n    long max_depth;\n    long current_depth;\n \
    \   long i;\n    long j;\n    long k;\n    long l;\n    long m;\n    long n;\n\
    \    long o;\n    long p;\n    long q;\n    long r;\n    long s;\n    long t;\n\
    \    long u;\n    long v;\n    long w;\n    long x;\n    long y;\n    long z;\n\
    \    long aa;\n    long ab;\n    long ac;\n    long ad;\n    long ae;\n    long\
    \ af;\n    long ag;\n    long ah;\n    long ai;\n    long aj;\n    long ak;\n\
    \    long al;\n    long am;\n    long an;\n    long ao;\n    long ap;\n    long\
    \ aq;\n    long ar;\n    long as;\n    long at;\n    long au;\n    long av;\n\
    \    long aw;\n    long ax;\n    long ay;\n    long az;\n    long ba;\n    long\
    \ bb;\n    long bc;\n    long bd;\n    long be;\n    long bf;\n    long bg;\n\
    \    long bh;\n    long bi;\n    long bj;\n    long bk;\n    long bl;\n    long\
    \ bm;\n    long bn;\n    long bo;\n    long bp;\n    long bq;\n    long br;\n\
    \    long bs;\n    long bt;\n    long bu;\n    long bv;\n    long bw;\n    long\
    \ bx;\n    long by;\n    long bz;\n    long ca;\n    long cb;\n    long cc;\n\
    \    long cd;\n    long ce;\n    long cf;\n    long cg;\n    long ch;\n    long\
    \ ci;\n    long cj;\n    long ck;\n    long cl;\n    long cm;\n    long cn;\n\
    \    long co;\n    long cp;\n    long cq;\n    long cr;\n    long cs;\n    long\
    \ ct;\n    long\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n \
    \   assert(candidate(\"(()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n\
    \    assert(candidate(\"() (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n   \
    \ assert(candidate(\"(()(())((())))\") == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmph10qq407.d(107): Error: no identifier for declarator long\n/tmp/tmph10qq407.d(107):
    Error: found \''unittest\'' instead of statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmph10qq407.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long[] stack;\n    long current_level;\n    long max_level;\n \
    \   long i;\n    long j;\n    long k;\n    long n;\n    long m;\n    long p;\n\
    \    long q;\n    long r;\n    long s;\n    long t;\n    long u;\n    long v;\n\
    \    long w;\n    long x;\n    long y;\n    long z;\n    long a;\n    long b;\n\
    \    long c;\n    long d;\n    long e;\n    long f;\n    long g;\n    long h;\n\
    \    long ii;\n    long jj;\n    long kk;\n    long ll;\n    long mm;\n    long\
    \ nn;\n    long oo;\n    long pp;\n    long qq;\n    long rr;\n    long ss;\n\
    \    long tt;\n    long uu;\n    long vv;\n    long ww;\n    long xx;\n    long\
    \ yy;\n    long zz;\n    long aa;\n    long bb;\n    long cc;\n    long dd;\n\
    \    long ee;\n    long ff;\n    long gg;\n    long hh;\n    long iii;\n    long\
    \ jjj;\n    long kkk;\n    long lll;\n    long mmm;\n    long nnn;\n    long ooo;\n\
    \    long ppp;\n    long qqq;\n    long rrr;\n    long sss;\n    long ttt;\n \
    \   long uuu;\n    long vvv;\n    long www;\n    long xxx;\n    long yyy;\n  \
    \  long zzz;\n    long aaaa;\n    long bbbb;\n    long cccc;\n    long dddd;\n\
    \    long eeee;\n    long ffff;\n    long gggg;\n    long hhhh;\n    long iiii;\n\
    \    long jjjj;\n    long kkkk;\n    long llll;\n    long mmmm;\n    long nnnn;\n\
    \    long oooo;\n    long pppp;\n    long qqqq\nunittest\n{\n    alias candidate\
    \ = parse_nested_parens;\n\n    assert(candidate(\"(()()) ((())) () ((())()())\"\
    ) == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (()) ((())) (((())))\") ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\") == [4L]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpml397weq.d(101): Error: semicolon expected, not \''unittest\''\n/tmp/tmpml397weq.d(101):
    Error: found \''unittest\'' instead of statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpml397weq.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result = new long[paren_string.length];\n    long max_depth = 0;\n    long depth\
    \ = 0;\n    foreach(i, c; paren_string)\n    {\n        if(c == '(')\n       \
    \ {\n            depth++;\n            max_depth = max(max_depth, depth);\n  \
    \      }\n        else if(c == ')')\n        {\n            depth--;\n       \
    \ }\n        else if(c == ' ')\n        {\n            result[i] = max_depth;\n\
    \            max_depth = 0;\n            depth = 0;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpodaqaz0d.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result = new long[paren_string.length];\n    int i = 0;\n    foreach(paren_group;\
    \ paren_string.split(\" \")) \n    {\n        int max_depth = 0;\n        int\
    \ current_depth = 0;\n        foreach(paren; paren_group) \n        {\n      \
    \      if(paren == '(') \n            {\n                current_depth++;\n  \
    \              max_depth = max(max_depth, current_depth);\n            } \n  \
    \          else if(paren == ')') \n            {\n                current_depth--;\n\
    \            }\n        }\n        result[i] = max_depth;\n        i++;\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = parse_nested_parens;\n\
    \n    assert(candidate(\"(()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n\
    \    assert(candidate(\"() (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n   \
    \ assert(candidate(\"(()(())((())))\") == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2pgp2_0d.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long[] stack;\n    long max_depth = 0;\n    long current_depth\
    \ = 0;\n    foreach(paren; paren_string)\n    {\n        if(paren == '(')\n  \
    \      {\n            current_depth++;\n            max_depth = max(max_depth,\
    \ current_depth);\n        }\n        else if(paren == ')')\n        {\n     \
    \       current_depth--;\n        }\n        else if(paren == ' ')\n        {\n\
    \            result ~= max_depth;\n            max_depth = 0;\n            current_depth\
    \ = 0;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = parse_nested_parens;\n\n    assert(candidate(\"(()()) ((())) () ((())()())\"\
    ) == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (()) ((())) (((())))\") ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\") == [4L]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0melcwsm.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    int max_depth = 0;\n    int depth = 0;\n    foreach(c; paren_string)\n\
    \    {\n        if(c == '(')\n        {\n            depth++;\n            max_depth\
    \ = max(max_depth, depth);\n        }\n        else if(c == ')')\n        {\n\
    \            depth--;\n        }\n        else if(c == ' ')\n        {\n     \
    \       result ~= max_depth;\n            max_depth = 0;\n            depth =\
    \ 0;\n        }\n    }\n    result ~= max_depth;\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"(()())\
    \ ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (())\
    \ ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpowh85s6n.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long[] paren_stack;\n    long[] paren_count;\n    long[] paren_max_count;\n\
    \    long[] paren_max_count_index;\n    long[] paren_max_count_index_stack;\n\
    \    long[] paren_max_count_index_stack_count;\n    long[] paren_max_count_index_stack_count_max;\n\
    \    long[] paren_max_count_index_stack_count_max_index;\n    long[] paren_max_count_index_stack_count_max_index_stack;\n\
    \    long[] paren_max_count_index_stack_count_max_index_stack_count;\n    long[]\
    \ paren_max_count_index_stack_count_max_index_stack_count_max;\n    long[] paren_max_count_index_stack_count_max_index_stack_count_max_index;\n\
    \    long[] paren_max_count_index_stack_count_max_index_stack_count_max_index_stack;\n\
    \    long[] paren_max_count_index_stack_count_max_index_stack_count_max_index_stack_count;\n\
    \    long[] paren_max_count_index_stack_count_max_index_stack_count_max_index_stack_count_max;\n\
    \    long[] paren_max_count_index_stack_count_max_index_stack_count_max_index_stack_count_max_index;\n\
    \    long[] paren_max_count_index_stack_count_max_index_stack_count_max_index_stack_count_max_index_stack;\n\
    \    long[] paren_max_count_index_stack_count_max_index_stack_count_max_index_stack_count_max_index_stack_count;\n\
    \    long[] paren_max_count_index_stack_count_max_index_stack_count_max_index_stack_count_max_index_stack_count_max;\n\
    \    long[] paren_max_count_index_stack_count_max_index_stack_count_max_\nunittest\n\
    {\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"(()())\
    \ ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (())\
    \ ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnqap8u2f.d(33): Error: semicolon expected, not \''unittest\''\n/tmp/tmpnqap8u2f.d(33):
    Error: found \''unittest\'' instead of statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpnqap8u2f.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    int max_depth = 0;\n    int depth = 0;\n    foreach(c; paren_string)\
    \ \n    {\n        if (c == '(') \n        {\n            depth++;\n         \
    \   max_depth = max(max_depth, depth);\n        } \n        else if (c == ')')\
    \ \n        {\n            depth--;\n        }\n    }\n    result ~= max_depth;\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = parse_nested_parens;\n\
    \n    assert(candidate(\"(()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n\
    \    assert(candidate(\"() (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n   \
    \ assert(candidate(\"(()(())((())))\") == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpij0yyn4u.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long[] stack;\n    long[] temp;\n    long[] temp2;\n    long[]\
    \ temp3;\n    long[] temp4;\n    long[] temp5;\n    long[] temp6;\n    long[]\
    \ temp7;\n    long[] temp8;\n    long[] temp9;\n    long[] temp10;\n    long[]\
    \ temp11;\n    long[] temp12;\n    long[] temp13;\n    long[] temp14;\n    long[]\
    \ temp15;\n    long[] temp16;\n    long[] temp17;\n    long[] temp18;\n    long[]\
    \ temp19;\n    long[] temp20;\n    long[] temp21;\n    long[] temp22;\n    long[]\
    \ temp23;\n    long[] temp24;\n    long[] temp25;\n    long[] temp26;\n    long[]\
    \ temp27;\n    long[] temp28;\n    long[] temp29;\n    long[] temp30;\n    long[]\
    \ temp31;\n    long[] temp32;\n    long[] temp33;\n    long[] temp34;\n    long[]\
    \ temp35;\n    long[] temp36;\n    long[] temp37;\n    long[] temp38;\n    long[]\
    \ temp39;\n    long[] temp40;\n    long[] temp41;\n    long[] temp42;\n    long[]\
    \ temp43;\n    long[] temp44;\n    long[] temp45;\n    long[] temp46;\n    long[]\
    \ temp47;\n    long[] temp48;\n    long[] temp49;\n    long[] temp50;\n    long[]\
    \ temp51;\n    long[] temp52;\n    long[] temp53;\n    long[] temp54;\n    long[]\
    \ temp55;\n    long[] temp56;\n    long[] temp57;\n    long[] temp58;\n    long[]\
    \ temp59;\n    long[] temp60;\n    long[] temp61;\n    long[] temp62;\n    long[]\
    \ temp63;\n    long[] temp64;\n    long[] temp65;\n    long[] temp66;\n    long[]\
    \ temp67;\n    long[] temp68;\n    long[] temp69;\n    long[] temp70;\n    long[]\
    \ temp71;\n   \nunittest\n{\n    alias candidate = parse_nested_parens;\n\n  \
    \  assert(candidate(\"(()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n \
    \   assert(candidate(\"() (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"\
    (()(())((())))\") == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpczleptsp.d(86): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpczleptsp.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    int max_level = 0;\n    int level = 0;\n    foreach(c; paren_string)\n\
    \    {\n        if(c == '(')\n        {\n            level++;\n            max_level\
    \ = max(max_level, level);\n        }\n        else if(c == ')')\n        {\n\
    \            level--;\n        }\n        else if(c == ' ')\n        {\n     \
    \       result ~= max_level;\n            max_level = 0;\n            level =\
    \ 0;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = parse_nested_parens;\n\n    assert(candidate(\"(()()) ((())) () ((())()())\"\
    ) == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (()) ((())) (((())))\") ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\") == [4L]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplwggz9t5.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long[] temp;\n    long[] temp_result;\n    long[] temp_result2;\n\
    \    long[] temp_result3;\n    long[] temp_result4;\n    long[] temp_result5;\n\
    \    long[] temp_result6;\n    long[] temp_result7;\n    long[] temp_result8;\n\
    \    long[] temp_result9;\n    long[] temp_result10;\n    long[] temp_result11;\n\
    \    long[] temp_result12;\n    long[] temp_result13;\n    long[] temp_result14;\n\
    \    long[] temp_result15;\n    long[] temp_result16;\n    long[] temp_result17;\n\
    \    long[] temp_result18;\n    long[] temp_result19;\n    long[] temp_result20;\n\
    \    long[] temp_result21;\n    long[] temp_result22;\n    long[] temp_result23;\n\
    \    long[] temp_result24;\n    long[] temp_result25;\n    long[] temp_result26;\n\
    \    long[] temp_result27;\n    long[] temp_result28;\n    long[] temp_result29;\n\
    \    long[] temp_result30;\n    long[] temp_result31;\n    long[] temp_result32;\n\
    \    long[] temp_result33;\n    long[] temp_result34;\n    long[] temp_result35;\n\
    \    long[] temp_result36;\n    long[] temp_result37;\n    long[] temp_result38;\n\
    \    long[] temp_result39;\n    long[] temp_result40;\n    long[] temp_result41;\n\
    \    long[] temp_result42;\n    long[] temp_result43;\n    long[] temp_result44;\n\
    \    long[] temp_result45;\n    long[] temp_result46;\n    long[] temp_result47;\n\
    \    long[] temp_result48;\n    long[] temp_result49;\n    long[] temp_result50;\n\
    \    long[] temp_result51;\n    long[] temp_result52;\n    long[] temp_result53;\n\
    \    long[] temp_result54;\n    long[] temp_result55;\n    long[]\nunittest\n\
    {\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"(()())\
    \ ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (())\
    \ ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_hp1z2wa.d(70): Error: no identifier for declarator long[]\n/tmp/tmp_hp1z2wa.d(70):
    Error: found \''unittest\'' instead of statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmp_hp1z2wa.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long max_depth = 0;\n    long current_depth = 0;\n    foreach(c;\
    \ paren_string)\n    {\n        if(c == '(')\n        {\n            current_depth++;\n\
    \            max_depth = max(max_depth, current_depth);\n        }\n        else\
    \ if(c == ')')\n        {\n            current_depth--;\n        }\n        else\
    \ if(c == ' ')\n        {\n            result ~= max_depth;\n            max_depth\
    \ = 0;\n            current_depth = 0;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnzoptv3z.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    int max_nesting = 0;\n    int current_nesting = 0;\n    foreach(paren;\
    \ paren_string)\n    {\n        if(paren == '(')\n        {\n            current_nesting++;\n\
    \            max_nesting = max(max_nesting, current_nesting);\n        }\n   \
    \     else if(paren == ')')\n        {\n            current_nesting--;\n     \
    \   }\n        else\n        {\n            result ~= max_nesting;\n         \
    \   max_nesting = 0;\n            current_nesting = 0;\n        }\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = parse_nested_parens;\n\
    \n    assert(candidate(\"(()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n\
    \    assert(candidate(\"() (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n   \
    \ assert(candidate(\"(()(())((())))\") == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnuu7k7yb.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    foreach(paren_group; paren_string.split(\" \"))\n    {\n      \
    \  long max_depth = 0;\n        long depth = 0;\n        foreach(paren; paren_group)\n\
    \        {\n            if(paren == '(')\n            {\n                depth++;\n\
    \                max_depth = max(max_depth, depth);\n            }\n         \
    \   else if(paren == ')')\n            {\n                depth--;\n         \
    \   }\n        }\n        result ~= max_depth;\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu_9fsio3.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long max_level = 0;\n    long level = 0;\n    foreach(char c; paren_string)\n\
    \    {\n        if(c == '(')\n        {\n            level++;\n            max_level\
    \ = max(max_level, level);\n        }\n        else if(c == ')')\n        {\n\
    \            level--;\n        }\n        else if(c == ' ')\n        {\n     \
    \       result ~= max_level;\n            max_level = 0;\n            level =\
    \ 0;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = parse_nested_parens;\n\n    assert(candidate(\"(()()) ((())) () ((())()())\"\
    ) == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (()) ((())) (((())))\") ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\") == [4L]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgokr2p67.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result = new long[paren_string.length];\n    long[] stack = new long[paren_string.length];\n\
    \    long stack_top = 0;\n    long max_depth = 0;\n    long depth = 0;\n    long\
    \ i = 0;\n    foreach(c; paren_string)\n    {\n        if(c == '(')\n        {\n\
    \            stack[stack_top++] = i;\n            depth++;\n            max_depth\
    \ = max(max_depth, depth);\n        }\n        else if(c == ')')\n        {\n\
    \            result[stack[--stack_top]] = depth;\n            depth--;\n     \
    \   }\n        i++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = parse_nested_parens;\n\n    assert(candidate(\"(()()) ((())) () ((())()())\"\
    ) == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (()) ((())) (((())))\") ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\") == [4L]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3nvn4e4f.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long max_depth = 0;\n    long current_depth = 0;\n    foreach(c;\
    \ paren_string)\n    {\n        if(c == '(')\n        {\n            current_depth++;\n\
    \            max_depth = max(max_depth, current_depth);\n        }\n        else\
    \ if(c == ')')\n        {\n            current_depth--;\n        }\n        else\
    \ if(c == ' ')\n        {\n            result ~= max_depth;\n            max_depth\
    \ = 0;\n            current_depth = 0;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnzoptv3z.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long[] stack;\n    long current_depth;\n    long max_depth;\n \
    \   long i;\n    long j;\n    long k;\n    long len;\n    long len2;\n    long\
    \ len3;\n    long len4;\n    string[] paren_groups;\n    string paren_group;\n\
    \    string[] paren_group_split;\n    string[] paren_group_split_parens;\n   \
    \ string paren_group_split_paren;\n    string[] paren_group_split_paren_split;\n\
    \    string paren_group_split_paren_split_paren;\n    string[] paren_group_split_paren_split_paren_split;\n\
    \    string paren_group_split_paren_split_paren_split_paren;\n    string[] paren_group_split_paren_split_paren_split_paren_split;\n\
    \    string paren_group_split_paren_split_paren_split_paren_split_paren;\n   \
    \ string[] paren_group_split_paren_split_paren_split_paren_split_paren_split;\n\
    \    string paren_group_split_paren_split_paren_split_paren_split_paren_split_paren;\n\
    \    string[] paren_group_split_paren_split_paren_split_paren_split_paren_split_paren_split;\n\
    \    string paren_group_split_paren_split_paren_split_paren_split_paren_split_paren_split_paren;\n\
    \    string[] paren_group_split_paren_split_paren_split_paren_split_paren_split_paren_split_paren_split;\n\
    \    string paren_group_split_paren_split_paren_split_paren_split_paren_split_paren_split_paren_split_paren;\n\
    \    string[] paren_group_split_paren_split_paren_split_paren_split_paren_split_paren_split_paren_split_paren_split;\n\
    \    string paren_group_split_paren_split_paren_split_paren_split_paren_split_paren_split_paren_split_paren_split_paren;\n\
    \    string[] paren_\nunittest\n{\n    alias candidate = parse_nested_parens;\n\
    \n    assert(candidate(\"(()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n\
    \    assert(candidate(\"() (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n   \
    \ assert(candidate(\"(()(())((())))\") == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqwlfo17y.d(42): Error: found \''paren_\'' when expecting \'';\''
    following statement\n/tmp/tmpqwlfo17y.d(43): Error: found \''unittest\'' instead
    of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqwlfo17y.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long[] stack;\n    long max_depth = 0;\n    long current_depth\
    \ = 0;\n    foreach(c; paren_string) \n    {\n        if(c == '(') \n        {\n\
    \            stack ~= current_depth;\n            current_depth++;\n         \
    \   max_depth = max(max_depth, current_depth);\n        }\n        else if(c ==\
    \ ')') \n        {\n            current_depth = stack.pop;\n        }\n      \
    \  else if(c == ' ') \n        {\n            result ~= max_depth;\n         \
    \   max_depth = 0;\n            current_depth = 0;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnrzpao_l.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long[] stack;\n    long current_level = 0;\n    foreach(c; paren_string)\n\
    \    {\n        if(c == '(')\n        {\n            stack ~= current_level;\n\
    \            current_level++;\n        }\n        else if(c == ')')\n        {\n\
    \            result ~= current_level;\n            current_level = stack.pop;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = parse_nested_parens;\n\
    \n    assert(candidate(\"(()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n\
    \    assert(candidate(\"() (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n   \
    \ assert(candidate(\"(()(())((())))\") == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp48jod2sv.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long max_depth = 0;\n    long depth = 0;\n    foreach(c; paren_string)\
    \ \n    {\n        if (c == '(') \n        {\n            depth++;\n         \
    \   max_depth = max(max_depth, depth);\n        } \n        else if (c == ')')\
    \ \n        {\n            depth--;\n        } \n        else if (c == ' ') \n\
    \        {\n            result ~= max_depth;\n            max_depth = 0;\n   \
    \         depth = 0;\n        }\n    }\n    return result;\n}\nunittest\n{\n \
    \   alias candidate = parse_nested_parens;\n\n    assert(candidate(\"(()()) ((()))\
    \ () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (()) ((()))\
    \ (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\")\
    \ == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp93j63jyw.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long[] temp;\n    long[] temp2;\n    long[] temp3;\n    long[]\
    \ temp4;\n    long[] temp5;\n    long[] temp6;\n    long[] temp7;\n    long[]\
    \ temp8;\n    long[] temp9;\n    long[] temp10;\n    long[] temp11;\n    long[]\
    \ temp12;\n    long[] temp13;\n    long[] temp14;\n    long[] temp15;\n    long[]\
    \ temp16;\n    long[] temp17;\n    long[] temp18;\n    long[] temp19;\n    long[]\
    \ temp20;\n    long[] temp21;\n    long[] temp22;\n    long[] temp23;\n    long[]\
    \ temp24;\n    long[] temp25;\n    long[] temp26;\n    long[] temp27;\n    long[]\
    \ temp28;\n    long[] temp29;\n    long[] temp30;\n    long[] temp31;\n    long[]\
    \ temp32;\n    long[] temp33;\n    long[] temp34;\n    long[] temp35;\n    long[]\
    \ temp36;\n    long[] temp37;\n    long[] temp38;\n    long[] temp39;\n    long[]\
    \ temp40;\n    long[] temp41;\n    long[] temp42;\n    long[] temp43;\n    long[]\
    \ temp44;\n    long[] temp45;\n    long[] temp46;\n    long[] temp47;\n    long[]\
    \ temp48;\n    long[] temp49;\n    long[] temp50;\n    long[] temp51;\n    long[]\
    \ temp52;\n    long[] temp53;\n    long[] temp54;\n    long[] temp55;\n    long[]\
    \ temp56;\n    long[] temp57;\n    long[] temp58;\n    long[] temp59;\n    long[]\
    \ temp60;\n    long[] temp61;\n    long[] temp62;\n    long[] temp63;\n    long[]\
    \ temp64;\n    long[] temp65;\n    long[] temp66;\n    long[] temp67;\n    long[]\
    \ temp68;\n    long[] temp69;\n    long[] temp70;\n    long[] temp71;\n    long[]\
    \ temp72;\n\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpfj7qlk81.d(86): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfj7qlk81.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ paren_levels = new long[paren_string.length];\n    long paren_level = 0;\n \
    \   long paren_index = 0;\n    foreach(c; paren_string)\n    {\n        if(c ==\
    \ '(')\n        {\n            paren_level++;\n        }\n        else if(c ==\
    \ ')')\n        {\n            paren_level--;\n        }\n        else if(c ==\
    \ ' ')\n        {\n            paren_levels[paren_index] = paren_level;\n    \
    \        paren_index++;\n        }\n    }\n    return paren_levels;\n}\nunittest\n\
    {\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"(()())\
    \ ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (())\
    \ ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp06v3wsdi.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result = new long[paren_string.length];\n    long max_nesting = 0;\n    long\
    \ curr_nesting = 0;\n    foreach(i, paren; paren_string)\n    {\n        if(paren\
    \ == '(')\n        {\n            curr_nesting++;\n            max_nesting = max(max_nesting,\
    \ curr_nesting);\n        }\n        else if(paren == ')')\n        {\n      \
    \      result[i] = curr_nesting;\n            curr_nesting--;\n        }\n   \
    \ }\n    return result;\n}\nunittest\n{\n    alias candidate = parse_nested_parens;\n\
    \n    assert(candidate(\"(()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n\
    \    assert(candidate(\"() (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n   \
    \ assert(candidate(\"(()(())((())))\") == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmvou7ayv.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long[] temp;\n    long[] temp_result;\n    long[] temp_result_2;\n\
    \    long[] temp_result_3;\n    long[] temp_result_4;\n    long[] temp_result_5;\n\
    \    long[] temp_result_6;\n    long[] temp_result_7;\n    long[] temp_result_8;\n\
    \    long[] temp_result_9;\n    long[] temp_result_10;\n    long[] temp_result_11;\n\
    \    long[] temp_result_12;\n    long[] temp_result_13;\n    long[] temp_result_14;\n\
    \    long[] temp_result_15;\n    long[] temp_result_16;\n    long[] temp_result_17;\n\
    \    long[] temp_result_18;\n    long[] temp_result_19;\n    long[] temp_result_20;\n\
    \    long[] temp_result_21;\n    long[] temp_result_22;\n    long[] temp_result_23;\n\
    \    long[] temp_result_24;\n    long[] temp_result_25;\n    long[] temp_result_26;\n\
    \    long[] temp_result_27;\n    long[] temp_result_28;\n    long[] temp_result_29;\n\
    \    long[] temp_result_30;\n    long[] temp_result_31;\n    long[] temp_result_32;\n\
    \    long[] temp_result_33;\n    long[] temp_result_34;\n    long[] temp_result_35;\n\
    \    long[] temp_result_36;\n    long[] temp_result_37;\n    long[] temp_result_38;\n\
    \    long[] temp_result_39;\n    long[] temp_result_40;\n    long[] temp_result_41;\n\
    \    long[] temp_result_42;\n    long[] temp_result_43;\n    long[] temp_result_44;\n\
    \    long[] temp_result_45;\n    long[] temp_result_46;\n    long[] temp_result_47;\n\
    \    long[] temp_result_48;\n    long[] temp_result_49;\n    long[] temp_result_50;\n\
    unittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpz0kyg1vv.d(64): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz0kyg1vv.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    int max_level = 0;\n    int level = 0;\n    foreach(c; paren_string)\n\
    \    {\n        if(c == '(')\n        {\n            level++;\n            max_level\
    \ = max(max_level, level);\n        }\n        else if(c == ')')\n        {\n\
    \            level--;\n        }\n        else if(c == ' ')\n        {\n     \
    \       result ~= max_level;\n            max_level = 0;\n            level =\
    \ 0;\n        }\n    }\n    result ~= max_level;\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"(()())\
    \ ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (())\
    \ ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5rkbhjz1.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long max_depth = 0;\n    long depth = 0;\n    foreach(c; paren_string)\
    \ \n    {\n        if (c == '(') \n        {\n            depth++;\n         \
    \   max_depth = max(max_depth, depth);\n        } \n        else if (c == ')')\
    \ \n        {\n            depth--;\n        } \n        else if (c == ' ') \n\
    \        {\n            result ~= max_depth;\n            max_depth = 0;\n   \
    \         depth = 0;\n        }\n    }\n    result ~= max_depth;\n    return result;\n\
    }\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmps7z9nqyb.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int max_depth =\
    \ 0;\n    int depth = 0;\n    int len = paren_string.length;\n    while (i < len)\n\
    \    {\n        if (paren_string[i] == '(')\n        {\n            depth++;\n\
    \            max_depth = max(max_depth, depth);\n        }\n        else if (paren_string[i]\
    \ == ')')\n        {\n            depth--;\n        }\n        else if (paren_string[i]\
    \ == ' ')\n        {\n            result[j++] = max_depth;\n            max_depth\
    \ = 0;\n            depth = 0;\n        }\n        i++;\n    }\n    result[j++]\
    \ = max_depth;\n    return result[0..j];\n}\nunittest\n{\n    alias candidate\
    \ = parse_nested_parens;\n\n    assert(candidate(\"(()()) ((())) () ((())()())\"\
    ) == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (()) ((())) (((())))\") ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\") == [4L]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjmdxz2_k.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    int current_level = 0;\n    int max_level = 0;\n    foreach(c;\
    \ paren_string)\n    {\n        if(c == '(')\n        {\n            current_level++;\n\
    \            max_level = max(max_level, current_level);\n        }\n        else\
    \ if(c == ')')\n        {\n            current_level--;\n        }\n        else\
    \ if(c == ' ')\n        {\n            result ~= max_level;\n            max_level\
    \ = 0;\n            current_level = 0;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp11capodx.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    foreach(paren_group; paren_string.split(\" \"))\n    {\n      \
    \  long max_depth = 0;\n        long depth = 0;\n        foreach(paren; paren_group)\n\
    \        {\n            if(paren == '(')\n            {\n                depth++;\n\
    \                max_depth = max(max_depth, depth);\n            }\n         \
    \   else if(paren == ')')\n            {\n                depth--;\n         \
    \   }\n        }\n        result ~= max_depth;\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu_9fsio3.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long max_depth = 0;\n    long current_depth = 0;\n    foreach(c;\
    \ paren_string)\n    {\n        if(c == '(')\n        {\n            current_depth++;\n\
    \            max_depth = max(max_depth, current_depth);\n        }\n        else\
    \ if(c == ')')\n        {\n            current_depth--;\n        }\n        else\
    \ if(c == ' ')\n        {\n            result ~= max_depth;\n            max_depth\
    \ = 0;\n            current_depth = 0;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnzoptv3z.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    int i;\n    int j;\n    int k;\n    int l;\n    int m;\n    int\
    \ n;\n    int o;\n    int p;\n    int q;\n    int r;\n    int s;\n    int t;\n\
    \    int u;\n    int v;\n    int w;\n    int x;\n    int y;\n    int z;\n    int\
    \ aa;\n    int bb;\n    int cc;\n    int dd;\n    int ee;\n    int ff;\n    int\
    \ gg;\n    int hh;\n    int ii;\n    int jj;\n    int kk;\n    int ll;\n    int\
    \ mm;\n    int nn;\n    int oo;\n    int pp;\n    int qq;\n    int rr;\n    int\
    \ ss;\n    int tt;\n    int uu;\n    int vv;\n    int ww;\n    int xx;\n    int\
    \ yy;\n    int zz;\n    int aaa;\n    int bbb;\n    int ccc;\n    int ddd;\n \
    \   int eee;\n    int fff;\n    int ggg;\n    int hhh;\n    int iii;\n    int\
    \ jjj;\n    int kkk;\n    int lll;\n    int mmm;\n    int nnn;\n    int ooo;\n\
    \    int ppp;\n    int qqq;\n    int rrr;\n    int sss;\n    int ttt;\n    int\
    \ uuu;\n    int vvv;\n    int www;\n    int xxx;\n    int yyy;\n    int zzz;\n\
    \    int aaaa;\n    int bbbb;\n    int cccc;\n    int dddd;\n    int eeee;\n \
    \   int ffff;\n    int gggg;\n    int hhhh;\n    int iiii;\n    int jjjj;\n  \
    \  int kkkk;\n    int llll;\n    int mmmm;\n    int nnnn;\n    int oooo;\n   \
    \ int pppp;\n    int qqqq;\n\nunittest\n{\n    alias candidate = parse_nested_parens;\n\
    \n    assert(candidate(\"(()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n\
    \    assert(candidate(\"() (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n   \
    \ assert(candidate(\"(()(())((())))\") == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpj6ueup03.d(101): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj6ueup03.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long max_depth = 0;\n    long current_depth = 0;\n    foreach(c;\
    \ paren_string)\n    {\n        if(c == '(')\n        {\n            current_depth++;\n\
    \            max_depth = max(max_depth, current_depth);\n        }\n        else\
    \ if(c == ')')\n        {\n            current_depth--;\n        }\n        else\
    \ if(c == ' ')\n        {\n            result ~= max_depth;\n            max_depth\
    \ = 0;\n            current_depth = 0;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnzoptv3z.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    int current_level = 0;\n    int max_level = 0;\n    foreach(ch;\
    \ paren_string)\n    {\n        if(ch == '(')\n        {\n            current_level++;\n\
    \            max_level = max(max_level, current_level);\n        }\n        else\
    \ if(ch == ')')\n        {\n            current_level--;\n        }\n        else\
    \ if(ch == ' ')\n        {\n            result ~= max_level;\n            max_level\
    \ = 0;\n            current_level = 0;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp66083xu7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    int max_depth = 0;\n    int depth = 0;\n    foreach(c; paren_string)\n\
    \    {\n        if(c == '(')\n        {\n            depth++;\n            max_depth\
    \ = max(max_depth, depth);\n        }\n        else if(c == ')')\n        {\n\
    \            depth--;\n        }\n        else if(c == ' ')\n        {\n     \
    \       result ~= max_depth;\n            max_depth = 0;\n            depth =\
    \ 0;\n        }\n    }\n    result ~= max_depth;\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"(()())\
    \ ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (())\
    \ ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpowh85s6n.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    foreach(paren_group; paren_string.split(\" \")) \n    {\n     \
    \   long max_depth = 0;\n        long current_depth = 0;\n        foreach(paren;\
    \ paren_group) \n        {\n            if(paren == '(') \n            {\n   \
    \             current_depth++;\n                max_depth = max(max_depth, current_depth);\n\
    \            } \n            else if(paren == ')') \n            {\n         \
    \       current_depth--;\n            }\n        }\n        result ~= max_depth;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = parse_nested_parens;\n\
    \n    assert(candidate(\"(()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n\
    \    assert(candidate(\"() (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n   \
    \ assert(candidate(\"(()(())((())))\") == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe5i1e2_2.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long[] temp_result;\n    long[] temp_result2;\n    long[] temp_result3;\n\
    \    long[] temp_result4;\n    long[] temp_result5;\n    long[] temp_result6;\n\
    \    long[] temp_result7;\n    long[] temp_result8;\n    long[] temp_result9;\n\
    \    long[] temp_result10;\n    long[] temp_result11;\n    long[] temp_result12;\n\
    \    long[] temp_result13;\n    long[] temp_result14;\n    long[] temp_result15;\n\
    \    long[] temp_result16;\n    long[] temp_result17;\n    long[] temp_result18;\n\
    \    long[] temp_result19;\n    long[] temp_result20;\n    long[] temp_result21;\n\
    \    long[] temp_result22;\n    long[] temp_result23;\n    long[] temp_result24;\n\
    \    long[] temp_result25;\n    long[] temp_result26;\n    long[] temp_result27;\n\
    \    long[] temp_result28;\n    long[] temp_result29;\n    long[] temp_result30;\n\
    \    long[] temp_result31;\n    long[] temp_result32;\n    long[] temp_result33;\n\
    \    long[] temp_result34;\n    long[] temp_result35;\n    long[] temp_result36;\n\
    \    long[] temp_result37;\n    long[] temp_result38;\n    long[] temp_result39;\n\
    \    long[] temp_result40;\n    long[] temp_result41;\n    long[] temp_result42;\n\
    \    long[] temp_result43;\n    long[] temp_result44;\n    long[] temp_result45;\n\
    \    long[] temp_result46;\n    long[] temp_result47;\n    long[] temp_result48;\n\
    \    long[] temp_result49;\n    long[] temp_result50;\n    long[] temp_result51;\n\
    \    long[] temp_result52;\n    long[] temp_result53;\n    long[] temp_result54;\n\
    \    long[] temp_result55;\n    long[] temp_result56;\n\nunittest\n{\n    alias\
    \ candidate = parse_nested_parens;\n\n    assert(candidate(\"(()()) ((())) ()\
    \ ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (()) ((())) (((())))\"\
    ) == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\") == [4L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0nzqpcbh.d(70): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0nzqpcbh.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    int max_depth = 0;\n    int depth = 0;\n    foreach(c; paren_string)\n\
    \    {\n        if(c == '(')\n        {\n            depth++;\n            max_depth\
    \ = max(max_depth, depth);\n        }\n        else if(c == ')')\n        {\n\
    \            depth--;\n        }\n        else if(c == ' ')\n        {\n     \
    \       result ~= max_depth;\n            max_depth = 0;\n            depth =\
    \ 0;\n        }\n    }\n    result ~= max_depth;\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"(()())\
    \ ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (())\
    \ ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpowh85s6n.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    int paren_count = 0;\n    int max_paren_count = 0;\n    foreach(c;\
    \ paren_string)\n    {\n        if(c == '(')\n        {\n            paren_count++;\n\
    \            max_paren_count = max(paren_count, max_paren_count);\n        }\n\
    \        else if(c == ')')\n        {\n            paren_count--;\n        }\n\
    \        else if(c == ' ')\n        {\n            result ~= max_paren_count;\n\
    \            max_paren_count = 0;\n            paren_count = 0;\n        }\n \
    \   }\n    result ~= max_paren_count;\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = parse_nested_parens;\n\n    assert(candidate(\"(()()) ((()))\
    \ () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (()) ((()))\
    \ (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\")\
    \ == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpho2ru_9h.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    int max_depth = 0;\n    int depth = 0;\n    foreach(c; paren_string)\
    \ \n    {\n        if (c == '(') \n        {\n            depth++;\n         \
    \   max_depth = max(max_depth, depth);\n        }\n        else if (c == ')')\
    \ \n        {\n            depth--;\n        }\n        else if (c == ' ') \n\
    \        {\n            result ~= max_depth;\n            max_depth = 0;\n   \
    \         depth = 0;\n        }\n    }\n    return result;\n}\nunittest\n{\n \
    \   alias candidate = parse_nested_parens;\n\n    assert(candidate(\"(()()) ((()))\
    \ () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (()) ((()))\
    \ (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\")\
    \ == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc7ipvkk5.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long[] paren_count;\n    long[] paren_depth;\n    long[] paren_depth_max;\n\
    \    long[] paren_depth_max_index;\n    long[] paren_depth_max_index_start;\n\
    \    long[] paren_depth_max_index_end;\n    long[] paren_depth_max_index_start_end;\n\
    \    long[] paren_depth_max_index_start_end_depth;\n    long[] paren_depth_max_index_start_end_depth_str;\n\
    \    long[] paren_depth_max_index_start_end_depth_str_max;\n    long[] paren_depth_max_index_start_end_depth_str_max_index;\n\
    \    long[] paren_depth_max_index_start_end_depth_str_max_index_start;\n    long[]\
    \ paren_depth_max_index_start_end_depth_str_max_index_start_end;\n    long[] paren_depth_max_index_start_end_depth_str_max_index_start_end_depth;\n\
    \    long[] paren_depth_max_index_start_end_depth_str_max_index_start_end_depth_str;\n\
    \    long[] paren_depth_max_index_start_end_depth_str_max_index_start_end_depth_str_max;\n\
    \    long[] paren_depth_max_index_start_end_depth_str_max_index_start_end_depth_str_max_index;\n\
    \    long[] paren_depth_max_index_start_end_depth_str_max_index_start_end_depth_str_max_index_start;\n\
    \    long[] paren_depth_max_index_start_end_depth_str_max_index_start_end_depth_str_max_index_start_end;\n\
    \    long[] paren_depth_max_index_start_end_depth_str_max_index_start_end_depth_str_max_index_start_end_depth;\n\
    \    long[] paren_depth_max_index\nunittest\n{\n    alias candidate = parse_nested_parens;\n\
    \n    assert(candidate(\"(()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n\
    \    assert(candidate(\"() (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n   \
    \ assert(candidate(\"(()(())((())))\") == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptswtebn3.d(34): Error: semicolon expected, not \''unittest\''\n/tmp/tmptswtebn3.d(34):
    Error: found \''unittest\'' instead of statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmptswtebn3.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long max_depth = 0;\n    long current_depth = 0;\n    foreach(c;\
    \ paren_string)\n    {\n        if(c == '(')\n        {\n            current_depth++;\n\
    \            max_depth = max(max_depth, current_depth);\n        }\n        else\
    \ if(c == ')')\n        {\n            current_depth--;\n        }\n        else\
    \ if(c == ' ')\n        {\n            result ~= max_depth;\n            max_depth\
    \ = 0;\n            current_depth = 0;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnzoptv3z.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long current_level = 0;\n    long max_level = 0;\n    foreach(paren;\
    \ paren_string)\n    {\n        if(paren == '(')\n        {\n            current_level++;\n\
    \            max_level = max(max_level, current_level);\n        }\n        else\
    \ if(paren == ')')\n        {\n            current_level--;\n        }\n     \
    \   else\n        {\n            result ~= max_level;\n            max_level =\
    \ 0;\n            current_level = 0;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyqhuh5wj.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long[] stack;\n    long[] temp;\n    long max_depth = 0;\n    long\
    \ depth = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l =\
    \ 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n    long p = 0;\n   \
    \ long q = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n    long u =\
    \ 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n   \
    \ long z = 0;\n    long aa = 0;\n    long bb = 0;\n    long cc = 0;\n    long\
    \ dd = 0;\n    long ee = 0;\n    long ff = 0;\n    long gg = 0;\n    long hh =\
    \ 0;\n    long ii = 0;\n    long jj = 0;\n    long kk = 0;\n    long ll = 0;\n\
    \    long mm = 0;\n    long nn = 0;\n    long oo = 0;\n    long pp = 0;\n    long\
    \ qq = 0;\n    long rr = 0;\n    long ss = 0;\n    long tt = 0;\n    long uu =\
    \ 0;\n    long vv = 0;\n    long ww = 0;\n    long xx = 0;\n    long yy = 0;\n\
    \    long zz = 0;\n    long aaa = 0;\n    long bbb = 0;\n    long ccc = 0;\n \
    \   long ddd = 0;\n    long eee = 0;\n    long fff = 0;\n    long ggg = 0;\n \
    \   long hhh = 0;\n    long iii = 0;\n    long jjj = 0;\n    long kkk = 0;\n \
    \   long lll = 0;\n    long mmm = 0;\n    long nnn = 0;\n    long ooo = 0;\n \
    \   long ppp = 0;\n    long qqq = 0;\n    long rrr = 0;\n    long sss = 0;\nunittest\n\
    {\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"(()())\
    \ ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (())\
    \ ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmps609fojv.d(80): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmps609fojv.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long[] stack;\n    long max_depth = 0;\n    long depth = 0;\n \
    \   foreach(c; paren_string)\n    {\n        if(c == '(')\n        {\n       \
    \     depth++;\n            max_depth = max(max_depth, depth);\n        }\n  \
    \      else if(c == ')')\n        {\n            depth--;\n        }\n       \
    \ else if(c == ' ')\n        {\n            result ~= max_depth;\n           \
    \ max_depth = 0;\n            depth = 0;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprsn52hm1.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long max_depth = 0;\n    long current_depth = 0;\n    foreach(c;\
    \ paren_string)\n    {\n        if(c == '(')\n        {\n            current_depth++;\n\
    \            max_depth = max(max_depth, current_depth);\n        }\n        else\
    \ if(c == ')')\n        {\n            current_depth--;\n        }\n        else\
    \ if(c == ' ')\n        {\n            result ~= max_depth;\n            max_depth\
    \ = 0;\n            current_depth = 0;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnzoptv3z.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    foreach(paren_group; paren_string.split(\" \"))\n    {\n      \
    \  long max_depth = 0;\n        long current_depth = 0;\n        foreach(paren;\
    \ paren_group)\n        {\n            if(paren == '(')\n            {\n     \
    \           current_depth++;\n                max_depth = max(max_depth, current_depth);\n\
    \            }\n            else if(paren == ')')\n            {\n           \
    \     current_depth--;\n            }\n        }\n        result ~= max_depth;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = parse_nested_parens;\n\
    \n    assert(candidate(\"(()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n\
    \    assert(candidate(\"() (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n   \
    \ assert(candidate(\"(()(())((())))\") == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdm3myilz.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long[] temp;\n    int i;\n    int j;\n    int k;\n    int l;\n\
    \    int m;\n    int n;\n    int o;\n    int p;\n    int q;\n    int r;\n    int\
    \ s;\n    int t;\n    int u;\n    int v;\n    int w;\n    int x;\n    int y;\n\
    \    int z;\n    int aa;\n    int bb;\n    int cc;\n    int dd;\n    int ee;\n\
    \    int ff;\n    int gg;\n    int hh;\n    int ii;\n    int jj;\n    int kk;\n\
    \    int ll;\n    int mm;\n    int nn;\n    int oo;\n    int pp;\n    int qq;\n\
    \    int rr;\n    int ss;\n    int tt;\n    int uu;\n    int vv;\n    int ww;\n\
    \    int xx;\n    int yy;\n    int zz;\n    int aaa;\n    int bbb;\n    int ccc;\n\
    \    int ddd;\n    int eee;\n    int fff;\n    int ggg;\n    int hhh;\n    int\
    \ iii;\n    int jjj;\n    int kkk;\n    int lll;\n    int mmm;\n    int nnn;\n\
    \    int ooo;\n    int ppp;\n    int qqq;\n    int rrr;\n    int sss;\n    int\
    \ ttt;\n    int uuu;\n    int vvv;\n    int www;\n    int xxx;\n    int yyy;\n\
    \    int zzz;\n    int aaaa;\n    int bbbb;\n    int cccc;\n    int dddd;\n  \
    \  int eeee;\n    int ffff;\n    int gggg;\n    int hhhh;\n    int iiii;\n   \
    \ int jjjj;\n    int kkkk;\n    int llll;\n    int mmmm;\n    int nnnn;\n    int\
    \ oooo;\n    int pppp;\n   \nunittest\n{\n    alias candidate = parse_nested_parens;\n\
    \n    assert(candidate(\"(()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n\
    \    assert(candidate(\"() (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n   \
    \ assert(candidate(\"(()(())((())))\") == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpiu9a43au.d(101): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiu9a43au.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long max_depth = 0;\n    long depth = 0;\n    foreach(c; paren_string)\
    \ \n    {\n        if (c == '(') \n        {\n            depth++;\n         \
    \   max_depth = max(max_depth, depth);\n        } \n        else if (c == ')')\
    \ \n        {\n            depth--;\n        } \n        else if (c == ' ') \n\
    \        {\n            result ~= max_depth;\n            max_depth = 0;\n   \
    \         depth = 0;\n        }\n    }\n    return result;\n}\nunittest\n{\n \
    \   alias candidate = parse_nested_parens;\n\n    assert(candidate(\"(()()) ((()))\
    \ () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (()) ((()))\
    \ (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\")\
    \ == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp93j63jyw.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long[] current_level;\n    long[] next_level;\n    long[] temp;\n\
    \    long[] temp_level;\n    long[] temp_result;\n    long[] temp_current_level;\n\
    \    long[] temp_next_level;\n    long[] temp_temp;\n    long[] temp_temp_level;\n\
    \    long[] temp_temp_result;\n    long[] temp_temp_current_level;\n    long[]\
    \ temp_temp_next_level;\n    long[] temp_temp_temp;\n    long[] temp_temp_temp_level;\n\
    \    long[] temp_temp_temp_result;\n    long[] temp_temp_temp_current_level;\n\
    \    long[] temp_temp_temp_next_level;\n    long[] temp_temp_temp_temp;\n    long[]\
    \ temp_temp_temp_temp_level;\n    long[] temp_temp_temp_temp_result;\n    long[]\
    \ temp_temp_temp_temp_current_level;\n    long[] temp_temp_temp_temp_next_level;\n\
    \    long[] temp_temp_temp_temp_temp;\n    long[] temp_temp_temp_temp_temp_level;\n\
    \    long[] temp_temp_temp_temp_temp_result;\n    long[] temp_temp_temp_temp_temp_current_level;\n\
    \    long[] temp_temp_temp_temp_temp_next_level;\n    long[] temp_temp_temp_temp_temp_temp;\n\
    \    long[] temp_temp_temp_temp_temp_temp_level;\n    long[] temp_temp_temp_temp_temp_temp_result;\n\
    \    long[] temp_temp_temp_temp_temp_temp_current_level;\n    long[] temp_temp_temp_temp_temp_temp_next_level;\n\
    \    long[] temp_temp_temp_temp_temp_temp_temp;\n    long[] temp_temp_temp_temp_temp_temp_temp_level;\n\
    \    long[] temp_temp_temp_temp_temp_temp_temp_result;\n    long[] temp_temp_temp_temp_temp_temp_temp_current_level;\n\
    \    long[] temp_\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n\
    \    assert(candidate(\"(()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n\
    \    assert(candidate(\"() (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n   \
    \ assert(candidate(\"(()(())((())))\") == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpf7_tq6c9.d(50): Error: semicolon expected, not \''unittest\''\n/tmp/tmpf7_tq6c9.d(50):
    Error: found \''unittest\'' instead of statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpf7_tq6c9.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result = new long[paren_string.length];\n    long max_depth = 0;\n    long depth\
    \ = 0;\n    foreach(i, c; paren_string)\n    {\n        if(c == '(')\n       \
    \ {\n            depth++;\n            max_depth = max(max_depth, depth);\n  \
    \      }\n        else if(c == ')')\n        {\n            depth--;\n       \
    \ }\n        else if(c == ' ')\n        {\n            result[i] = max_depth;\n\
    \            max_depth = 0;\n            depth = 0;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpodaqaz0d.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long max_depth = 0;\n    long current_depth = 0;\n    foreach(c;\
    \ paren_string) \n    {\n        if(c == '(') \n        {\n            current_depth++;\n\
    \            max_depth = max(max_depth, current_depth);\n        }\n        else\
    \ if(c == ')') \n        {\n            current_depth--;\n        }\n        else\
    \ if(c == ' ') \n        {\n            result ~= max_depth;\n            max_depth\
    \ = 0;\n            current_depth = 0;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7hjkkoee.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    int[] paren_count;\n    int max_depth = 0;\n    int current_depth\
    \ = 0;\n    int current_paren_count = 0;\n    int i = 0;\n    foreach(c; paren_string)\n\
    \    {\n        if(c == '(')\n        {\n            current_depth++;\n      \
    \      current_paren_count++;\n            if(current_depth > max_depth)\n   \
    \         {\n                max_depth = current_depth;\n            }\n     \
    \   }\n        else if(c == ')')\n        {\n            current_depth--;\n  \
    \          current_paren_count++;\n        }\n        else if(c == ' ')\n    \
    \    {\n            paren_count ~= current_paren_count;\n            current_paren_count\
    \ = 0;\n        }\n        else\n        {\n            assert(false);\n     \
    \   }\n    }\n    paren_count ~= current_paren_count;\n    result = new long[max_depth];\n\
    \    foreach(paren_count_for_group; paren_count)\n    {\n        result[paren_count_for_group\
    \ / 2 - 1]++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = parse_nested_parens;\n\n    assert(candidate(\"(()()) ((())) () ((())()())\"\
    ) == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (()) ((())) (((())))\") ==\
    \ [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\") == [4L]);\n}\n\
    void main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1vywnz35.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long[] stack;\n    long max_depth = 0;\n    long depth = 0;\n \
    \   foreach(c; paren_string)\n    {\n        if(c == '(')\n        {\n       \
    \     depth++;\n            max_depth = max(max_depth, depth);\n        }\n  \
    \      else if(c == ')')\n        {\n            depth--;\n        }\n       \
    \ else if(c == ' ')\n        {\n            result ~= max_depth;\n           \
    \ max_depth = 0;\n            depth = 0;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprsn52hm1.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result = new long[paren_string.length];\n    long[] stack = new long[paren_string.length];\n\
    \    long stack_top = 0;\n    long max_depth = 0;\n    long depth = 0;\n    long\
    \ i = 0;\n    foreach(c; paren_string)\n    {\n        if(c == '(')\n        {\n\
    \            stack[stack_top++] = i;\n            depth++;\n            max_depth\
    \ = max(max_depth, depth);\n        }\n        else if(c == ')')\n        {\n\
    \            stack_top--;\n            depth--;\n        }\n        else\n   \
    \     {\n            result[stack[stack_top - 1]] = max_depth;\n            max_depth\
    \ = 0;\n            depth = 0;\n        }\n        i++;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo9b9qwfa.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    foreach(paren_group; paren_string.split(\" \"))\n    {\n      \
    \  long max_nesting = 0;\n        long current_nesting = 0;\n        foreach(paren;\
    \ paren_group)\n        {\n            if(paren == '(')\n            {\n     \
    \           current_nesting++;\n                max_nesting = max(max_nesting,\
    \ current_nesting);\n            }\n            else if(paren == ')')\n      \
    \      {\n                current_nesting--;\n            }\n        }\n     \
    \   result ~= max_nesting;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = parse_nested_parens;\n\n    assert(candidate(\"(()()) ((())) ()\
    \ ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (()) ((())) (((())))\"\
    ) == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\") == [4L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplj79bp4w.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long max_nesting = 0;\n    long nesting = 0;\n    foreach(paren;\
    \ paren_string)\n    {\n        if(paren == '(')\n        {\n            nesting++;\n\
    \            max_nesting = max(max_nesting, nesting);\n        }\n        else\
    \ if(paren == ')')\n        {\n            nesting--;\n        }\n        else\n\
    \        {\n            result ~= max_nesting;\n            max_nesting = 0;\n\
    \            nesting = 0;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"(()())\
    \ ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (())\
    \ ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqwrku4ju.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long current_level = 0;\n    long max_level = 0;\n    foreach(c;\
    \ paren_string) \n    {\n        if(c == '(') \n        {\n            current_level++;\n\
    \            max_level = max(max_level, current_level);\n        }\n        else\
    \ if(c == ')') \n        {\n            current_level--;\n        }\n        else\
    \ if(c == ' ') \n        {\n            result ~= max_level;\n            max_level\
    \ = 0;\n            current_level = 0;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkn20voyp.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long[] temp;\n    int i;\n    int j;\n    int k;\n    int l;\n\
    \    int m;\n    int n;\n    int o;\n    int p;\n    int q;\n    int r;\n    int\
    \ s;\n    int t;\n    int u;\n    int v;\n    int w;\n    int x;\n    int y;\n\
    \    int z;\n    int aa;\n    int bb;\n    int cc;\n    int dd;\n    int ee;\n\
    \    int ff;\n    int gg;\n    int hh;\n    int ii;\n    int jj;\n    int kk;\n\
    \    int ll;\n    int mm;\n    int nn;\n    int oo;\n    int pp;\n    int qq;\n\
    \    int rr;\n    int ss;\n    int tt;\n    int uu;\n    int vv;\n    int ww;\n\
    \    int xx;\n    int yy;\n    int zz;\n    int aaa;\n    int bbb;\n    int ccc;\n\
    \    int ddd;\n    int eee;\n    int fff;\n    int ggg;\n    int hhh;\n    int\
    \ iii;\n    int jjj;\n    int kkk;\n    int lll;\n    int mmm;\n    int nnn;\n\
    \    int ooo;\n    int ppp;\n    int qqq;\n    int rrr;\n    int sss;\n    int\
    \ ttt;\n    int uuu;\n    int vvv;\n    int www;\n    int xxx;\n    int yyy;\n\
    \    int zzz;\n    int aaaa;\n    int bbbb;\n    int cccc;\n    int dddd;\n  \
    \  int eeee;\n    int ffff;\n    int gggg;\n    int hhhh;\n    int iiii;\n   \
    \ int jjjj;\n    int kkkk;\n    int llll;\n    int mmmm;\n    int nnnn;\n    int\
    \ oooo;\n    int pppp;\n   \nunittest\n{\n    alias candidate = parse_nested_parens;\n\
    \n    assert(candidate(\"(()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n\
    \    assert(candidate(\"() (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n   \
    \ assert(candidate(\"(()(())((())))\") == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpiu9a43au.d(101): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiu9a43au.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long[] temp;\n    long[] temp2;\n    long[] temp3;\n    long[]\
    \ temp4;\n    long[] temp5;\n    long[] temp6;\n    long[] temp7;\n    long[]\
    \ temp8;\n    long[] temp9;\n    long[] temp10;\n    long[] temp11;\n    long[]\
    \ temp12;\n    long[] temp13;\n    long[] temp14;\n    long[] temp15;\n    long[]\
    \ temp16;\n    long[] temp17;\n    long[] temp18;\n    long[] temp19;\n    long[]\
    \ temp20;\n    long[] temp21;\n    long[] temp22;\n    long[] temp23;\n    long[]\
    \ temp24;\n    long[] temp25;\n    long[] temp26;\n    long[] temp27;\n    long[]\
    \ temp28;\n    long[] temp29;\n    long[] temp30;\n    long[] temp31;\n    long[]\
    \ temp32;\n    long[] temp33;\n    long[] temp34;\n    long[] temp35;\n    long[]\
    \ temp36;\n    long[] temp37;\n    long[] temp38;\n    long[] temp39;\n    long[]\
    \ temp40;\n    long[] temp41;\n    long[] temp42;\n    long[] temp43;\n    long[]\
    \ temp44;\n    long[] temp45;\n    long[] temp46;\n    long[] temp47;\n    long[]\
    \ temp48;\n    long[] temp49;\n    long[] temp50;\n    long[] temp51;\n    long[]\
    \ temp52;\n    long[] temp53;\n    long[] temp54;\n    long[] temp55;\n    long[]\
    \ temp56;\n    long[] temp57;\n    long[] temp58;\n    long[] temp59;\n    long[]\
    \ temp60;\n    long[] temp61;\n    long[] temp62;\n    long[] temp63;\n    long[]\
    \ temp64;\n    long[] temp65;\n    long[] temp66;\n    long[] temp67;\n    long[]\
    \ temp68;\n    long[] temp69;\n    long[] temp70;\n    long[] temp71;\n    long[]\
    \ temp72;\n\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpfj7qlk81.d(86): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfj7qlk81.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    int start_index = 0;\n    int end_index = 0;\n    int paren_count\
    \ = 0;\n    int max_paren_count = 0;\n    foreach(c; paren_string)\n    {\n  \
    \      if(c == '(')\n        {\n            paren_count++;\n            if(paren_count\
    \ > max_paren_count)\n            {\n                max_paren_count = paren_count;\n\
    \            }\n        }\n        else if(c == ')')\n        {\n            paren_count--;\n\
    \        }\n        else if(c == ' ')\n        {\n            end_index = start_index\
    \ + 1;\n            result ~= max_paren_count;\n            max_paren_count =\
    \ 0;\n            start_index = end_index;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpua62maxp.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    foreach(paren_group; paren_string.split(\" \"))\n    {\n      \
    \  long max_nesting = 0;\n        long current_nesting = 0;\n        foreach(paren;\
    \ paren_group)\n        {\n            if(paren == '(')\n            {\n     \
    \           current_nesting++;\n                max_nesting = max(max_nesting,\
    \ current_nesting);\n            }\n            else if(paren == ')')\n      \
    \      {\n                current_nesting--;\n            }\n        }\n     \
    \   result ~= max_nesting;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = parse_nested_parens;\n\n    assert(candidate(\"(()()) ((())) ()\
    \ ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (()) ((())) (((())))\"\
    ) == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\") == [4L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplj79bp4w.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long max_depth = 0;\n    long current_depth = 0;\n    foreach(c;\
    \ paren_string)\n    {\n        if(c == '(')\n        {\n            current_depth++;\n\
    \            max_depth = max(max_depth, current_depth);\n        }\n        else\
    \ if(c == ')')\n        {\n            current_depth--;\n        }\n        else\
    \ if(c == ' ')\n        {\n            result ~= max_depth;\n            max_depth\
    \ = 0;\n            current_depth = 0;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnzoptv3z.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long max_depth = 0;\n    long current_depth = 0;\n    foreach(c;\
    \ paren_string)\n    {\n        if(c == '(')\n        {\n            current_depth++;\n\
    \            max_depth = max(max_depth, current_depth);\n        }\n        else\
    \ if(c == ')')\n        {\n            current_depth--;\n        }\n        else\
    \ if(c == ' ')\n        {\n            result ~= max_depth;\n            max_depth\
    \ = 0;\n            current_depth = 0;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnzoptv3z.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long[] stack;\n    long max_depth = 0;\n    long depth = 0;\n \
    \   foreach(paren; paren_string)\n    {\n        if(paren == '(')\n        {\n\
    \            depth++;\n            max_depth = max(max_depth, depth);\n      \
    \  }\n        else if(paren == ')')\n        {\n            depth--;\n       \
    \ }\n        else\n        {\n            result ~= max_depth;\n            max_depth\
    \ = 0;\n            depth = 0;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"(()())\
    \ ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (())\
    \ ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp05od778w.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long[] stack;\n    long max_depth = 0;\n    long depth = 0;\n \
    \   foreach(paren; paren_string)\n    {\n        if(paren == '(')\n        {\n\
    \            depth++;\n            max_depth = max(max_depth, depth);\n      \
    \  }\n        else\n        {\n            depth--;\n        }\n    }\n    return\
    \ [max_depth, depth];\n}\nunittest\n{\n    alias candidate = parse_nested_parens;\n\
    \n    assert(candidate(\"(()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n\
    \    assert(candidate(\"() (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n   \
    \ assert(candidate(\"(()(())((())))\") == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqwzqqs6s.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    int i = 0;\n    int j = 0;\n    int max_depth = 0;\n    int depth\
    \ = 0;\n    while (i < paren_string.length)\n    {\n        if (paren_string[i]\
    \ == '(')\n        {\n            depth++;\n            max_depth = max(max_depth,\
    \ depth);\n        }\n        else if (paren_string[i] == ')')\n        {\n  \
    \          depth--;\n        }\n        else if (paren_string[i] == ' ')\n   \
    \     {\n            result ~= max_depth;\n            max_depth = 0;\n      \
    \      depth = 0;\n        }\n        i++;\n    }\n    result ~= max_depth;\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = parse_nested_parens;\n\
    \n    assert(candidate(\"(()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n\
    \    assert(candidate(\"() (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n   \
    \ assert(candidate(\"(()(())((())))\") == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5h8q0hk4.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long current_level = 0;\n    long max_level = 0;\n    foreach(c;\
    \ paren_string)\n    {\n        if(c == '(')\n        {\n            current_level++;\n\
    \            max_level = max(max_level, current_level);\n        }\n        else\
    \ if(c == ')')\n        {\n            current_level--;\n        }\n        else\
    \ if(c == ' ')\n        {\n            result ~= max_level;\n            max_level\
    \ = 0;\n            current_level = 0;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd5x_a2a7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long max_depth = 0;\n    long current_depth = 0;\n    foreach(c;\
    \ paren_string)\n    {\n        if(c == '(')\n        {\n            current_depth++;\n\
    \            max_depth = max(max_depth, current_depth);\n        }\n        else\
    \ if(c == ')')\n        {\n            current_depth--;\n        }\n        else\
    \ if(c == ' ')\n        {\n            result ~= max_depth;\n            max_depth\
    \ = 0;\n            current_depth = 0;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnzoptv3z.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long[] temp;\n    long max_depth = 0;\n    long depth = 0;\n  \
    \  long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n    long len\
    \ = paren_string.length;\n    bool in_paren = false;\n    while (i < len)\n  \
    \  {\n        if (paren_string[i] == '(')\n        {\n            in_paren = true;\n\
    \            depth++;\n            if (depth > max_depth)\n            {\n   \
    \             max_depth = depth;\n            }\n        }\n        else if (paren_string[i]\
    \ == ')')\n        {\n            depth--;\n        }\n        else if (paren_string[i]\
    \ == ' ')\n        {\n            if (in_paren)\n            {\n             \
    \   in_paren = false;\n                depth = 0;\n            }\n        }\n\
    \        i++;\n    }\n    result = new long[max_depth];\n    depth = 0;\n    in_paren\
    \ = false;\n    i = 0;\n    while (i < len)\n    {\n        if (paren_string[i]\
    \ == '(')\n        {\n            in_paren = true;\n            depth++;\n   \
    \         if (depth > max_depth)\n            {\n                max_depth = depth;\n\
    \            }\n        }\n        else if (paren_string[i] == ')')\n        {\n\
    \            depth--;\n        }\n        else if (paren_string[i] == ' ')\n \
    \       {\n            if (in_paren)\n            {\n                in_paren\
    \ = false;\n                depth = 0;\n            }\n        }\n        i++;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = parse_nested_parens;\n\
    \n    assert(candidate(\"(()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n\
    \    assert(candidate(\"() (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n   \
    \ assert(candidate(\"(()(())((())))\") == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbck4eze6.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    int max_depth = 0;\n    int depth = 0;\n    foreach(c; paren_string)\n\
    \    {\n        if(c == '(')\n        {\n            depth++;\n            max_depth\
    \ = max(max_depth, depth);\n        }\n        else if(c == ')')\n        {\n\
    \            depth--;\n        }\n        else if(c == ' ')\n        {\n     \
    \       result ~= max_depth;\n            max_depth = 0;\n            depth =\
    \ 0;\n        }\n    }\n    result ~= max_depth;\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"(()())\
    \ ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (())\
    \ ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpowh85s6n.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long[] stack;\n    long max_depth;\n    long depth;\n    long i;\n\
    \    long j;\n    long len;\n    long len2;\n    long[] temp;\n    long[] temp2;\n\
    \    long[] temp3;\n    long[] temp4;\n    long[] temp5;\n    long[] temp6;\n\
    \    long[] temp7;\n    long[] temp8;\n    long[] temp9;\n    long[] temp10;\n\
    \    long[] temp11;\n    long[] temp12;\n    long[] temp13;\n    long[] temp14;\n\
    \    long[] temp15;\n    long[] temp16;\n    long[] temp17;\n    long[] temp18;\n\
    \    long[] temp19;\n    long[] temp20;\n    long[] temp21;\n    long[] temp22;\n\
    \    long[] temp23;\n    long[] temp24;\n    long[] temp25;\n    long[] temp26;\n\
    \    long[] temp27;\n    long[] temp28;\n    long[] temp29;\n    long[] temp30;\n\
    \    long[] temp31;\n    long[] temp32;\n    long[] temp33;\n    long[] temp34;\n\
    \    long[] temp35;\n    long[] temp36;\n    long[] temp37;\n    long[] temp38;\n\
    \    long[] temp39;\n    long[] temp40;\n    long[] temp41;\n    long[] temp42;\n\
    \    long[] temp43;\n    long[] temp44;\n    long[] temp45;\n    long[] temp46;\n\
    \    long[] temp47;\n    long[] temp48;\n    long[] temp49;\n    long[] temp50;\n\
    \    long[] temp51;\n    long[] temp52;\n    long[] temp53;\n    long[] temp54;\n\
    \    long[] temp55;\n    long[] temp56;\n    long[] temp57;\n    long[] temp58;\n\
    \    long[] temp59;\n    long[] temp60;\n    long[] temp61;\n    long[] temp62;\n\
    \    long[] temp63;\n    long[] temp64;\n    long[] temp65;\n    long[] temp66;\n\
    \    long[]\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpuzjzxahd.d(87): Error: no identifier for declarator long[]\n/tmp/tmpuzjzxahd.d(87):
    Error: found \''unittest\'' instead of statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpuzjzxahd.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long[] paren_stack;\n    long max_depth;\n    long depth;\n   \
    \ long i;\n    long j;\n    long k;\n    long len;\n    long len2;\n    long len3;\n\
    \    long len4;\n    long len5;\n    long len6;\n    long len7;\n    long len8;\n\
    \    long len9;\n    long len10;\n    long len11;\n    long len12;\n    long len13;\n\
    \    long len14;\n    long len15;\n    long len16;\n    long len17;\n    long\
    \ len18;\n    long len19;\n    long len20;\n    long len21;\n    long len22;\n\
    \    long len23;\n    long len24;\n    long len25;\n    long len26;\n    long\
    \ len27;\n    long len28;\n    long len29;\n    long len30;\n    long len31;\n\
    \    long len32;\n    long len33;\n    long len34;\n    long len35;\n    long\
    \ len36;\n    long len37;\n    long len38;\n    long len39;\n    long len40;\n\
    \    long len41;\n    long len42;\n    long len43;\n    long len44;\n    long\
    \ len45;\n    long len46;\n    long len47;\n    long len48;\n    long len49;\n\
    \    long len50;\n    long len51;\n    long len52;\n    long len53;\n    long\
    \ len54;\n    long len55;\n    long len56;\n    long len57;\n    long len58;\n\
    \    long len59;\n    long len60;\n    long len61;\n    long len62;\n    long\
    \ len63;\n    long len64;\n    long len65;\n    long len66;\n    long len67;\n\
    \    long len68;\n    long len69;\n    long len70;\n    long len71;\n    long\
    \ len72;\n    long len73;\n    long len74;\n    long len75;\n    long len76;\n\
    \    long len77;\n    long len78;\n\nunittest\n{\n    alias candidate = parse_nested_parens;\n\
    \n    assert(candidate(\"(()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n\
    \    assert(candidate(\"() (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n   \
    \ assert(candidate(\"(()(())((())))\") == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpcje_gi0k.d(98): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcje_gi0k.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long[] stack;\n    long[] temp;\n    long i;\n    long j;\n   \
    \ long k;\n    long len;\n    long max;\n    long num_parens;\n    long num_groups;\n\
    \    long num_levels;\n    long num_levels_temp;\n    long num_levels_temp_max;\n\
    \    long num_levels_temp_max_prev;\n    long num_levels_temp_max_prev_prev;\n\
    \    long num_levels_temp_max_prev_prev_prev;\n    long num_levels_temp_max_prev_prev_prev_prev;\n\
    \    long num_levels_temp_max_prev_prev_prev_prev_prev;\n    long num_levels_temp_max_prev_prev_prev_prev_prev_prev;\n\
    \    long num_levels_temp_max_prev_prev_prev_prev_prev_prev_prev;\n    long num_levels_temp_max_prev_prev_prev_prev_prev_prev_prev_prev;\n\
    \    long num_levels_temp_max_prev_prev_prev_prev_prev_prev_prev_prev_prev;\n\
    \    long num_levels_temp_max_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev;\n\
    \    long num_levels_temp_max_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev;\n\
    \    long num_levels_temp_max_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev;\n\
    \    long num_levels_temp_max_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev;\n\
    \    long num_levels_temp_max_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev;\n\
    \    long num_levels_temp_max_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev;\n\
    \    long num_levels_temp_max_prev_prev_prev_prev_prev\nunittest\n{\n    alias\
    \ candidate = parse_nested_parens;\n\n    assert(candidate(\"(()()) ((())) ()\
    \ ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (()) ((())) (((())))\"\
    ) == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\") == [4L]);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpedcnz3cf.d(41): Error: semicolon expected, not \''unittest\''\n/tmp/tmpedcnz3cf.d(41):
    Error: found \''unittest\'' instead of statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpedcnz3cf.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long[] stack;\n    long max_depth = 0;\n    long depth = 0;\n \
    \   foreach(c; paren_string)\n    {\n        if(c == '(')\n        {\n       \
    \     depth++;\n            max_depth = max(max_depth, depth);\n        }\n  \
    \      else if(c == ')')\n        {\n            depth--;\n        }\n       \
    \ else if(c == ' ')\n        {\n            result ~= max_depth;\n           \
    \ max_depth = 0;\n            depth = 0;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprsn52hm1.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long max_depth = 0;\n    long current_depth = 0;\n    foreach(c;\
    \ paren_string)\n    {\n        if(c == '(')\n        {\n            current_depth++;\n\
    \            max_depth = max(max_depth, current_depth);\n        }\n        else\
    \ if(c == ')')\n        {\n            current_depth--;\n        }\n        else\
    \ if(c == ' ')\n        {\n            result ~= max_depth;\n            max_depth\
    \ = 0;\n            current_depth = 0;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnzoptv3z.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result = new long[];\n    long[] paren_count = new long[];\n    long[] max_paren_count\
    \ = new long[];\n    long[] max_paren_count_index = new long[];\n    long[] max_paren_count_index_index\
    \ = new long[];\n    long[] max_paren_count_index_index_index = new long[];\n\
    \    long[] max_paren_count_index_index_index_index = new long[];\n    long[]\
    \ max_paren_count_index_index_index_index_index = new long[];\n    long[] max_paren_count_index_index_index_index_index_index\
    \ = new long[];\n    long[] max_paren_count_index_index_index_index_index_index_index\
    \ = new long[];\n    long[] max_paren_count_index_index_index_index_index_index_index_index\
    \ = new long[];\n    long[] max_paren_count_index_index_index_index_index_index_index_index_index\
    \ = new long[];\n    long[] max_paren_count_index_index_index_index_index_index_index_index_index_index\
    \ = new long[];\n    long[] max_paren_count_index_index_index_index_index_index_index_index_index_index_index\
    \ = new long[];\n    long[] max_paren_count_index_index_index_index_index_index_index_index_index_index_index_index\
    \ = new long[];\n    long[] max_paren_count_index_index_index_index_index_index_index_index_index_index_index_index_index\
    \ = new long[];\n    long[] max_paren_count_index_index_index_index_index_index_index_index_index_index_index_index_index_index\
    \ = new long[];\n    long[] max_paren_count_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index\
    \ = new long[];\n    long[] max_paren_count_index_index_index_index_index_index_index\n\
    unittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpv5f8h5jm.d(31): Error: semicolon expected, not \''unittest\''\n/tmp/tmpv5f8h5jm.d(31):
    Error: found \''unittest\'' instead of statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpv5f8h5jm.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    int max_depth = 0;\n    int depth = 0;\n    foreach(c; paren_string)\n\
    \    {\n        if(c == '(')\n        {\n            depth++;\n            max_depth\
    \ = max(max_depth, depth);\n        }\n        else if(c == ')')\n        {\n\
    \            depth--;\n        }\n        else if(c == ' ')\n        {\n     \
    \       result ~= max_depth;\n            max_depth = 0;\n            depth =\
    \ 0;\n        }\n    }\n    result ~= max_depth;\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"(()())\
    \ ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (())\
    \ ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpowh85s6n.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long max_depth = 0;\n    long current_depth = 0;\n    foreach(c;\
    \ paren_string) \n    {\n        if(c == '(') \n        {\n            current_depth++;\n\
    \            max_depth = max(max_depth, current_depth);\n        }\n        else\
    \ if(c == ')') \n        {\n            current_depth--;\n        }\n        else\
    \ if(c == ' ') \n        {\n            result ~= max_depth;\n            max_depth\
    \ = 0;\n            current_depth = 0;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7hjkkoee.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long max_depth = 0;\n    long current_depth = 0;\n    foreach(c;\
    \ paren_string)\n    {\n        if(c == '(')\n        {\n            current_depth++;\n\
    \            max_depth = max(max_depth, current_depth);\n        }\n        else\
    \ if(c == ')')\n        {\n            current_depth--;\n        }\n        else\
    \ if(c == ' ')\n        {\n            result ~= max_depth;\n            max_depth\
    \ = 0;\n            current_depth = 0;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnzoptv3z.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long[] temp;\n    long[] temp2;\n    long[] temp3;\n    long[]\
    \ temp4;\n    long[] temp5;\n    long[] temp6;\n    long[] temp7;\n    long[]\
    \ temp8;\n    long[] temp9;\n    long[] temp10;\n    long[] temp11;\n    long[]\
    \ temp12;\n    long[] temp13;\n    long[] temp14;\n    long[] temp15;\n    long[]\
    \ temp16;\n    long[] temp17;\n    long[] temp18;\n    long[] temp19;\n    long[]\
    \ temp20;\n    long[] temp21;\n    long[] temp22;\n    long[] temp23;\n    long[]\
    \ temp24;\n    long[] temp25;\n    long[] temp26;\n    long[] temp27;\n    long[]\
    \ temp28;\n    long[] temp29;\n    long[] temp30;\n    long[] temp31;\n    long[]\
    \ temp32;\n    long[] temp33;\n    long[] temp34;\n    long[] temp35;\n    long[]\
    \ temp36;\n    long[] temp37;\n    long[] temp38;\n    long[] temp39;\n    long[]\
    \ temp40;\n    long[] temp41;\n    long[] temp42;\n    long[] temp43;\n    long[]\
    \ temp44;\n    long[] temp45;\n    long[] temp46;\n    long[] temp47;\n    long[]\
    \ temp48;\n    long[] temp49;\n    long[] temp50;\n    long[] temp51;\n    long[]\
    \ temp52;\n    long[] temp53;\n    long[] temp54;\n    long[] temp55;\n    long[]\
    \ temp56;\n    long[] temp57;\n    long[] temp58;\n    long[] temp59;\n    long[]\
    \ temp60;\n    long[] temp61;\n    long[] temp62;\n    long[] temp63;\n    long[]\
    \ temp64;\n    long[] temp65;\n    long[] temp66;\n    long[] temp67;\n    long[]\
    \ temp68;\n    long[] temp69;\n    long[] temp70;\n    long[] temp71;\n    long[]\
    \ temp72;\n\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpfj7qlk81.d(86): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfj7qlk81.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long max_depth = 0;\n    long depth = 0;\n    foreach(c; paren_string)\n\
    \    {\n        if(c == '(')\n        {\n            depth++;\n            max_depth\
    \ = max(max_depth, depth);\n        }\n        else if(c == ')')\n        {\n\
    \            depth--;\n        }\n        else if(c == ' ')\n        {\n     \
    \       result ~= max_depth;\n            max_depth = 0;\n            depth =\
    \ 0;\n        }\n    }\n    result ~= max_depth;\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"(()())\
    \ ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (())\
    \ ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3pi3ol54.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    int i = 0;\n    foreach(paren_group; paren_string.split(\" \"))\n\
    \    {\n        int max_depth = 0;\n        int depth = 0;\n        foreach(paren;\
    \ paren_group)\n        {\n            if(paren == '(')\n            {\n     \
    \           depth++;\n                max_depth = max(max_depth, depth);\n   \
    \         }\n            else if(paren == ')')\n            {\n              \
    \  depth--;\n            }\n        }\n        result ~= max_depth;\n    }\n \
    \   return result;\n}\nunittest\n{\n    alias candidate = parse_nested_parens;\n\
    \n    assert(candidate(\"(()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n\
    \    assert(candidate(\"() (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n   \
    \ assert(candidate(\"(()(())((())))\") == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp777gh42o.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    foreach(paren_group; paren_string.split(\" \"))\n    {\n      \
    \  long max_nesting = 0;\n        long nesting_level = 0;\n        foreach(paren;\
    \ paren_group)\n        {\n            if(paren == '(')\n            {\n     \
    \           nesting_level++;\n                max_nesting = max(max_nesting, nesting_level);\n\
    \            }\n            else if(paren == ')')\n            {\n           \
    \     nesting_level--;\n            }\n        }\n        result ~= max_nesting;\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = parse_nested_parens;\n\
    \n    assert(candidate(\"(()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n\
    \    assert(candidate(\"() (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n   \
    \ assert(candidate(\"(()(())((())))\") == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt835q5fn.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long[] paren_count;\n    long[] paren_count_max;\n    long[] paren_count_max_index;\n\
    \    long[] paren_count_max_index_temp;\n    long[] paren_count_max_index_temp_temp;\n\
    \    long[] paren_count_max_index_temp_temp_temp;\n    long[] paren_count_max_index_temp_temp_temp_temp;\n\
    \    long[] paren_count_max_index_temp_temp_temp_temp_temp;\n    long[] paren_count_max_index_temp_temp_temp_temp_temp_temp;\n\
    \    long[] paren_count_max_index_temp_temp_temp_temp_temp_temp_temp;\n    long[]\
    \ paren_count_max_index_temp_temp_temp_temp_temp_temp_temp_temp;\n    long[] paren_count_max_index_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \    long[] paren_count_max_index_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \    long[] paren_count_max_index_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \    long[] paren_count_max_index_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \    long[] paren_count_max_index_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \    long[] paren_count_max_index_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \    long[] paren_count_max_index_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp;\n\
    \    long[] paren_count_max_index_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\n\
    unittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpq9u35jep.d(32): Error: semicolon expected, not \''unittest\''\n/tmp/tmpq9u35jep.d(32):
    Error: found \''unittest\'' instead of statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpq9u35jep.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long[] paren_count;\n    long[] paren_count_max;\n    long[] paren_count_min;\n\
    \    long[] paren_count_max_index;\n    long[] paren_count_min_index;\n    long[]\
    \ paren_count_max_index_start;\n    long[] paren_count_max_index_end;\n    long[]\
    \ paren_count_min_index_start;\n    long[] paren_count_min_index_end;\n    long[]\
    \ paren_count_max_index_start_start;\n    long[] paren_count_max_index_start_end;\n\
    \    long[] paren_count_max_index_end_start;\n    long[] paren_count_max_index_end_end;\n\
    \    long[] paren_count_min_index_start_start;\n    long[] paren_count_min_index_start_end;\n\
    \    long[] paren_count_min_index_end_start;\n    long[] paren_count_min_index_end_end;\n\
    \    long[] paren_count_max_index_start_start_start;\n    long[] paren_count_max_index_start_start_end;\n\
    \    long[] paren_count_max_index_start_end_start;\n    long[] paren_count_max_index_start_end_end;\n\
    \    long[] paren_count_max_index_end_start_start;\n    long[] paren_count_max_index_end_start_end;\n\
    \    long[] paren_count_max_index_end_end_start;\n    long[] paren_count_max_index_end_end_end;\n\
    \    long[] paren_count_min_index_start_start_start;\n    long[] paren_count_min_index_start_start_end;\n\
    \    long[] paren_count_min_index_start_end_start;\n    long[] paren_count_min_index_start_end_end;\n\
    \    long[] paren_count_min_index_end_start_start;\n    long[]\nunittest\n{\n\
    \    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"(()()) ((()))\
    \ () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (()) ((()))\
    \ (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\")\
    \ == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbtk70gdx.d(44): Error: no identifier for declarator long[]\n/tmp/tmpbtk70gdx.d(44):
    Error: found \''unittest\'' instead of statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpbtk70gdx.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long[] stack;\n    long current_level = 0;\n    long max_level\
    \ = 0;\n    foreach(ch; paren_string)\n    {\n        if(ch == '(')\n        {\n\
    \            stack ~= current_level;\n            current_level++;\n         \
    \   max_level = max(max_level, current_level);\n        }\n        else if(ch\
    \ == ')')\n        {\n            stack.pop;\n            current_level = stack.length\
    \ ? stack[$-1] : 0;\n        }\n        else if(ch == ' ')\n        {\n      \
    \      result ~= max_level;\n            max_level = 0;\n        }\n    }\n  \
    \  return result;\n}\nunittest\n{\n    alias candidate = parse_nested_parens;\n\
    \n    assert(candidate(\"(()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n\
    \    assert(candidate(\"() (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n   \
    \ assert(candidate(\"(()(())((())))\") == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc782v7og.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long max_depth = 0;\n    long current_depth = 0;\n    foreach(ch;\
    \ paren_string)\n    {\n        if(ch == '(')\n        {\n            current_depth++;\n\
    \            max_depth = max(max_depth, current_depth);\n        }\n        else\
    \ if(ch == ')')\n        {\n            current_depth--;\n        }\n        else\
    \ if(ch == ' ')\n        {\n            result ~= max_depth;\n            max_depth\
    \ = 0;\n            current_depth = 0;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6rzm4vpd.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    int max_depth = 0;\n    int current_depth = 0;\n    foreach(char\
    \ c; paren_string)\n    {\n        if(c == '(')\n        {\n            current_depth++;\n\
    \            max_depth = max(max_depth, current_depth);\n        }\n        else\
    \ if(c == ')')\n        {\n            current_depth--;\n        }\n        else\
    \ if(c == ' ')\n        {\n            result ~= max_depth;\n            max_depth\
    \ = 0;\n            current_depth = 0;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxm8zjblj.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    int max_depth = 0;\n    int depth = 0;\n    foreach(c; paren_string)\n\
    \    {\n        if(c == '(')\n        {\n            depth++;\n            max_depth\
    \ = max(max_depth, depth);\n        }\n        else if(c == ')')\n        {\n\
    \            depth--;\n        }\n        else if(c == ' ')\n        {\n     \
    \       result ~= max_depth;\n            max_depth = 0;\n            depth =\
    \ 0;\n        }\n    }\n    result ~= max_depth;\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"(()())\
    \ ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (())\
    \ ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpowh85s6n.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result = new long[paren_string.length];\n    long[] stack = new long[paren_string.length];\n\
    \    long stack_top = 0;\n    long max_depth = 0;\n    long depth = 0;\n    long\
    \ result_index = 0;\n    foreach(i, c; paren_string)\n    {\n        if(c == '(')\n\
    \        {\n            stack[stack_top++] = i;\n            depth++;\n      \
    \      max_depth = max(max_depth, depth);\n        }\n        else if(c == ')')\n\
    \        {\n            stack_top--;\n            if(stack_top == 0)\n       \
    \     {\n                result[result_index++] = max_depth;\n               \
    \ max_depth = 0;\n                depth = 0;\n            }\n            else\n\
    \            {\n                depth--;\n            }\n        }\n    }\n  \
    \  return result[0..result_index];\n}\nunittest\n{\n    alias candidate = parse_nested_parens;\n\
    \n    assert(candidate(\"(()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n\
    \    assert(candidate(\"() (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n   \
    \ assert(candidate(\"(()(())((())))\") == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0jqlo087.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long[] stack;\n    long current_level = 0;\n    foreach(c; paren_string)\n\
    \    {\n        if(c == '(')\n        {\n            stack ~= current_level;\n\
    \            current_level++;\n        }\n        else if(c == ')')\n        {\n\
    \            result ~= current_level;\n            current_level = stack.pop;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = parse_nested_parens;\n\
    \n    assert(candidate(\"(()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n\
    \    assert(candidate(\"() (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n   \
    \ assert(candidate(\"(()(())((())))\") == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp48jod2sv.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result = new long[paren_string.length];\n    long max_depth = 0;\n    long current_depth\
    \ = 0;\n    foreach(i, c; paren_string)\n    {\n        if(c == '(')\n       \
    \ {\n            current_depth++;\n            max_depth = max(max_depth, current_depth);\n\
    \        }\n        else if(c == ')')\n        {\n            result[i] = current_depth;\n\
    \            current_depth--;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"(()())\
    \ ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"() (())\
    \ ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp18vmg_hz.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long[] temp;\n    long[] temp2;\n    long[] temp3;\n    long[]\
    \ temp4;\n    long[] temp5;\n    long[] temp6;\n    long[] temp7;\n    long[]\
    \ temp8;\n    long[] temp9;\n    long[] temp10;\n    long[] temp11;\n    long[]\
    \ temp12;\n    long[] temp13;\n    long[] temp14;\n    long[] temp15;\n    long[]\
    \ temp16;\n    long[] temp17;\n    long[] temp18;\n    long[] temp19;\n    long[]\
    \ temp20;\n    long[] temp21;\n    long[] temp22;\n    long[] temp23;\n    long[]\
    \ temp24;\n    long[] temp25;\n    long[] temp26;\n    long[] temp27;\n    long[]\
    \ temp28;\n    long[] temp29;\n    long[] temp30;\n    long[] temp31;\n    long[]\
    \ temp32;\n    long[] temp33;\n    long[] temp34;\n    long[] temp35;\n    long[]\
    \ temp36;\n    long[] temp37;\n    long[] temp38;\n    long[] temp39;\n    long[]\
    \ temp40;\n    long[] temp41;\n    long[] temp42;\n    long[] temp43;\n    long[]\
    \ temp44;\n    long[] temp45;\n    long[] temp46;\n    long[] temp47;\n    long[]\
    \ temp48;\n    long[] temp49;\n    long[] temp50;\n    long[] temp51;\n    long[]\
    \ temp52;\n    long[] temp53;\n    long[] temp54;\n    long[] temp55;\n    long[]\
    \ temp56;\n    long[] temp57;\n    long[] temp58;\n    long[] temp59;\n    long[]\
    \ temp60;\n    long[] temp61;\n    long[] temp62;\n    long[] temp63;\n    long[]\
    \ temp64;\n    long[] temp65;\n    long[] temp66;\n    long[] temp67;\n    long[]\
    \ temp68;\n    long[] temp69;\n    long[] temp70;\n    long[] temp71;\n    long[]\
    \ temp72;\n\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpfj7qlk81.d(86): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfj7qlk81.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long max_depth = 0;\n    long current_depth = 0;\n    foreach(c;\
    \ paren_string)\n    {\n        if(c == '(')\n        {\n            current_depth++;\n\
    \            max_depth = max(max_depth, current_depth);\n        }\n        else\
    \ if(c == ')')\n        {\n            current_depth--;\n        }\n        else\
    \ if(c == ' ')\n        {\n            result ~= max_depth;\n            max_depth\
    \ = 0;\n            current_depth = 0;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = parse_nested_parens;\n\n    assert(candidate(\"\
    (()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n    assert(candidate(\"\
    () (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n    assert(candidate(\"(()(())((())))\"\
    ) == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnzoptv3z.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long max_nesting = 0;\n    long current_nesting = 0;\n    foreach(c;\
    \ paren_string)\n    {\n        if(c == '(')\n        {\n            current_nesting++;\n\
    \            max_nesting = max(max_nesting, current_nesting);\n        }\n   \
    \     else if(c == ')')\n        {\n            current_nesting--;\n        }\n\
    \        else if(c == ' ')\n        {\n            result ~= max_nesting;\n  \
    \          max_nesting = 0;\n            current_nesting = 0;\n        }\n   \
    \ }\n    return result;\n}\nunittest\n{\n    alias candidate = parse_nested_parens;\n\
    \n    assert(candidate(\"(()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n\
    \    assert(candidate(\"() (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n   \
    \ assert(candidate(\"(()(())((())))\") == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0enumut6.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
- exit_code: 1
  program: "import std.typecons;\nimport std.math;\n/*\n Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    \    For each of the group, output the deepest level of nesting of parentheses.\n\
    \    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\
    \        \n*/\nlong[] parse_nested_parens(string paren_string) \n{\n    long[]\
    \ result;\n    long[] stack;\n    long max_depth = 0;\n    long depth = 0;\n \
    \   foreach(c; paren_string) \n    {\n        if(c == '(') \n        {\n     \
    \       stack ~= depth;\n            depth++;\n            max_depth = max(max_depth,\
    \ depth);\n        }\n        else if(c == ')') \n        {\n            if(stack.length\
    \ == 0) \n            {\n                throw new Exception(\"Invalid input\"\
    );\n            }\n            depth = stack.pop;\n        }\n        else if(c\
    \ == ' ') \n        {\n            result ~= max_depth;\n            max_depth\
    \ = 0;\n            depth = 0;\n        }\n        else \n        {\n        \
    \    throw new Exception(\"Invalid input\");\n        }\n    }\n    result ~=\
    \ max_depth;\n    return result;\n}\nunittest\n{\n    alias candidate = parse_nested_parens;\n\
    \n    assert(candidate(\"(()()) ((())) () ((())()())\") == [2L, 3L, 1L, 3L]);\n\
    \    assert(candidate(\"() (()) ((())) (((())))\") == [1L, 2L, 3L, 4L]);\n   \
    \ assert(candidate(\"(()(())((())))\") == [4L]);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo0l52gye.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660014222
