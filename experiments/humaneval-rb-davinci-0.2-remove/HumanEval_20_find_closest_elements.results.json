{
  "language": "rb",
  "name": "HumanEval_20_find_closest_elements",
  "results": [
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_pair = [numbers[0], numbers[1]]\n  closest_difference = numbers[1] - numbers[0]\n  numbers.each_with_index do |number, index|\n    next if index == 0\n    difference = numbers[index] - numbers[index - 1]\n    if difference < closest_difference\n      closest_pair = [numbers[index - 1], numbers[index]]\n      closest_difference = difference\n    end\n  end\n  closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp7s1o8d5z\nStarted\n.\nFinished in 0.000469805 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2128.54 tests/s, 10642.71 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799080
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_diff = numbers[1] - numbers[0]\n  closest_pair = [numbers[0], numbers[1]]\n  numbers.each_with_index do |num, i|\n    next if i == numbers.length - 1\n    if numbers[i + 1] - num < closest_diff\n      closest_diff = numbers[i + 1] - num\n      closest_pair = [num, numbers[i + 1]]\n    end\n  end\n  closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp0zn7z63x\nStarted\n.\nFinished in 0.000465908 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2146.35 tests/s, 10731.73 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799080
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_diff = numbers[1] - numbers[0]\n  closest_elements = [numbers[0], numbers[1]]\n  numbers.each_with_index do |number, index|\n    next if index == 0\n    diff = number - numbers[index - 1]\n    if diff < closest_diff\n      closest_diff = diff\n      closest_elements = [numbers[index - 1], number]\n    end\n  end\n  closest_elements\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp7z3mxvn9\nStarted\n.\nFinished in 0.000443487 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2254.86 tests/s, 11274.29 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799080
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  # TODO: Return the two numbers that are closest to each other\n  numbers.sort!\n  closest_numbers = []\n  closest_difference = numbers[1] - numbers[0]\n  numbers.each_with_index do |number, index|\n    if index < numbers.length - 1\n      difference = numbers[index + 1] - number\n      if difference < closest_difference\n        closest_difference = difference\n        closest_numbers = [number, numbers[index + 1]]\n      end\n    end\n  end\n  closest_numbers\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpv_xyicna\nStarted\n.\nFinished in 0.000447047 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2236.90 tests/s, 11184.51 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799080
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_diff = numbers[1] - numbers[0]\n  closest_pair = [numbers[0], numbers[1]]\n  numbers.each_with_index do |num, i|\n    next if i == 0\n    if (num - numbers[i - 1]) < closest_diff\n      closest_diff = num - numbers[i - 1]\n      closest_pair = [numbers[i - 1], num]\n    end\n  end\n  closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpsg0_ofyc\nStarted\n.\nFinished in 0.000464437 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2153.14 tests/s, 10765.72 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799080
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  smallest_difference = numbers[1] - numbers[0]\n  closest_elements = [numbers[0], numbers[1]]\n  numbers.each_with_index do |number, index|\n    next if index == 0\n    difference = numbers[index] - numbers[index - 1]\n    if difference < smallest_difference\n      smallest_difference = difference\n      closest_elements = [numbers[index - 1], numbers[index]]\n    end\n  end\n  closest_elements\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp3f520ggk\nStarted\n.\nFinished in 0.000463775 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2156.22 tests/s, 10781.09 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799080
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_diff = numbers[1] - numbers[0]\n  closest_pair = [numbers[0], numbers[1]]\n  numbers.each_with_index do |number, index|\n    next if index == 0\n    diff = number - numbers[index - 1]\n    if diff < closest_diff\n      closest_diff = diff\n      closest_pair = [numbers[index - 1], number]\n    end\n  end\n  closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp5q_h4_76\nStarted\n.\nFinished in 0.000455328 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2196.22 tests/s, 10981.09 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799080
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_pair = [numbers[0], numbers[1]]\n  closest_difference = (numbers[1] - numbers[0]).abs\n  numbers.each_with_index do |num, index|\n    next if index == 0\n    difference = (num - numbers[index - 1]).abs\n    if difference < closest_difference\n      closest_pair = [numbers[index - 1], num]\n      closest_difference = difference\n    end\n  end\n  closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpjhfzn_sb\nStarted\n.\nFinished in 0.000450733 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2218.61 tests/s, 11093.04 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799080
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_elements = [numbers[0], numbers[1]]\n  closest_difference = numbers[1] - numbers[0]\n  for i in 0..numbers.length - 2\n    for j in i + 1..numbers.length - 1\n      if numbers[j] - numbers[i] < closest_difference\n        closest_difference = numbers[j] - numbers[i]\n        closest_elements = [numbers[i], numbers[j]]\n      end\n    end\n  end\n  return closest_elements\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp8v90zse0\nStarted\n.\nFinished in 0.000512196 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1952.38 tests/s, 9761.89 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799080
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_diff = numbers[1] - numbers[0]\n  closest_pair = [numbers[0], numbers[1]]\n  for i in 0..numbers.length-2\n    diff = numbers[i+1] - numbers[i]\n    if diff < closest_diff\n      closest_diff = diff\n      closest_pair = [numbers[i], numbers[i+1]]\n    end\n  end\n  return closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpr8g18trs\nStarted\n.\nFinished in 0.000459822 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2174.75 tests/s, 10873.77 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799080
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_pair = [numbers[0], numbers[1]]\n  closest_difference = (numbers[1] - numbers[0]).abs\n  numbers.each_with_index do |number, index|\n    next if index == 0\n    difference = (numbers[index] - numbers[index - 1]).abs\n    if difference < closest_difference\n      closest_pair = [numbers[index - 1], numbers[index]]\n      closest_difference = difference\n    end\n  end\n  closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpqf144fbg\nStarted\n.\nFinished in 0.000465245 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2149.41 tests/s, 10747.03 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799080
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_pair = [numbers[0], numbers[1]]\n  closest_distance = (numbers[1] - numbers[0]).abs\n  numbers.each_with_index do |number, index|\n    next if index == 0\n    if (number - numbers[index - 1]).abs < closest_distance\n      closest_distance = (number - numbers[index - 1]).abs\n      closest_pair = [numbers[index - 1], number]\n    end\n  end\n  closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpa7im_tgm\nStarted\n.\nFinished in 0.000472478 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2116.50 tests/s, 10582.50 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799080
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_diff = numbers[1] - numbers[0]\n  closest_pair = [numbers[0], numbers[1]]\n  numbers.each_with_index do |num, i|\n    next if i == numbers.length - 1\n    if numbers[i + 1] - num < closest_diff\n      closest_diff = numbers[i + 1] - num\n      closest_pair = [num, numbers[i + 1]]\n    end\n  end\n  closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp0zn7z63x\nStarted\n.\nFinished in 0.000465908 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2146.35 tests/s, 10731.73 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799080
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  # TODO: Return the two numbers that are closest to each other\n  numbers.sort!\n  closest_elements = []\n  closest_difference = numbers[1] - numbers[0]\n  numbers.each_with_index do |number, index|\n    if index < numbers.length - 1\n      difference = numbers[index + 1] - number\n      if difference < closest_difference\n        closest_difference = difference\n        closest_elements = [number, numbers[index + 1]]\n      end\n    end\n  end\n  closest_elements\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpp3jjwtyz\nStarted\n.\nFinished in 0.000624507 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1601.26 tests/s, 8006.32 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799080
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  min_diff = numbers[1] - numbers[0]\n  min_pair = [numbers[0], numbers[1]]\n  for i in 1..numbers.length-2\n    diff = numbers[i+1] - numbers[i]\n    if diff < min_diff\n      min_diff = diff\n      min_pair = [numbers[i], numbers[i+1]]\n    end\n  end\n  return min_pair\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp8e9_ocm7\nStarted\n.\nFinished in 0.000594738 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1681.41 tests/s, 8407.06 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799080
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_pair = [numbers[0], numbers[1]]\n  closest_difference = (numbers[1] - numbers[0]).abs\n  numbers.each_with_index do |num, index|\n    next if index == 0\n    if (num - numbers[index - 1]).abs < closest_difference\n      closest_pair = [numbers[index - 1], num]\n      closest_difference = (num - numbers[index - 1]).abs\n    end\n  end\n  closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp0ot0bliy\nStarted\n.\nFinished in 0.000458101 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2182.92 tests/s, 10914.62 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799080
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_pair = [numbers[0], numbers[1]]\n  closest_difference = (numbers[1] - numbers[0]).abs\n  numbers.each_with_index do |number, index|\n    next if index == 0\n    difference = (numbers[index] - numbers[index - 1]).abs\n    if difference < closest_difference\n      closest_pair = [numbers[index - 1], numbers[index]]\n      closest_difference = difference\n    end\n  end\n  closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpqf144fbg\nStarted\n.\nFinished in 0.000465245 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2149.41 tests/s, 10747.03 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799080
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_elements = [numbers[0], numbers[1]]\n  closest_difference = numbers[1] - numbers[0]\n  numbers.each_with_index do |number, index|\n    next if index == 0\n    difference = number - numbers[index - 1]\n    if difference < closest_difference\n      closest_difference = difference\n      closest_elements = [numbers[index - 1], number]\n    end\n  end\n  closest_elements\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmptmsqv3o1\nStarted\n.\nFinished in 0.000447999 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2232.15 tests/s, 11160.74 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799080
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_pair = [numbers[0], numbers[1]]\n  closest_difference = numbers[1] - numbers[0]\n  for i in 0..numbers.length - 2\n    for j in i + 1..numbers.length - 1\n      if numbers[j] - numbers[i] < closest_difference\n        closest_pair = [numbers[i], numbers[j]]\n        closest_difference = numbers[j] - numbers[i]\n      end\n    end\n  end\n  closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp9gv6otof\nStarted\n.\nFinished in 0.000470229 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2126.62 tests/s, 10633.12 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799080
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  # TODO: Implement this method\n  numbers.sort!\n  closest_elements = []\n  closest_difference = numbers[1] - numbers[0]\n  numbers.each_with_index do |number, index|\n    if index < numbers.length - 1\n      difference = numbers[index + 1] - number\n      if difference < closest_difference\n        closest_difference = difference\n        closest_elements = [number, numbers[index + 1]]\n      end\n    end\n  end\n  closest_elements\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpbgocdu1d\nStarted\n.\nFinished in 0.000455682 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2194.51 tests/s, 10972.56 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799080
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_diff = numbers[1] - numbers[0]\n  closest_pair = [numbers[0], numbers[1]]\n  numbers.each_with_index do |num, i|\n    if i < numbers.length - 1\n      if numbers[i + 1] - num < closest_diff\n        closest_diff = numbers[i + 1] - num\n        closest_pair = [num, numbers[i + 1]]\n      end\n    end\n  end\n  closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpgi1vh551\nStarted\n.\nFinished in 0.000463812 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2156.05 tests/s, 10780.23 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799080
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_diff = numbers[1] - numbers[0]\n  closest_pair = [numbers[0], numbers[1]]\n  numbers.each_with_index do |num, i|\n    next if i == numbers.length - 1\n    diff = numbers[i + 1] - num\n    if diff < closest_diff\n      closest_diff = diff\n      closest_pair = [num, numbers[i + 1]]\n    end\n  end\n  closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp8qw57an8\nStarted\n.\nFinished in 0.000458637 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2180.37 tests/s, 10901.87 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799080
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_pair = [numbers[0], numbers[1]]\n  closest_difference = (numbers[1] - numbers[0]).abs\n  (0..numbers.length - 2).each do |i|\n    difference = (numbers[i + 1] - numbers[i]).abs\n    if difference < closest_difference\n      closest_pair = [numbers[i], numbers[i + 1]]\n      closest_difference = difference\n    end\n  end\n  closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpnnc8tewe\nStarted\n.\nFinished in 0.000461555 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2166.59 tests/s, 10832.95 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799080
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_elements = [numbers[0], numbers[1]]\n  closest_distance = numbers[1] - numbers[0]\n  numbers.each_with_index do |number, index|\n    next if index == 0\n    if number - numbers[index - 1] < closest_distance\n      closest_distance = number - numbers[index - 1]\n      closest_elements = [numbers[index - 1], number]\n    end\n  end\n  closest_elements\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp_8t8ja0k\nStarted\n.\nFinished in 0.000465659 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2147.49 tests/s, 10737.47 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799080
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_pair = [numbers[0], numbers[1]]\n  closest_distance = numbers[1] - numbers[0]\n  numbers.each_with_index do |number, index|\n    next if index == 0\n    if (number - numbers[index - 1]) < closest_distance\n      closest_pair = [numbers[index - 1], number]\n      closest_distance = number - numbers[index - 1]\n    end\n  end\n  closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpwmo58zw4\nStarted\n.\nFinished in 0.000435464 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2296.40 tests/s, 11482.01 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799080
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_diff = numbers[1] - numbers[0]\n  closest_elements = [numbers[0], numbers[1]]\n  numbers.each_with_index do |num, index|\n    next if index == 0\n    if (num - numbers[index - 1]) < closest_diff\n      closest_diff = num - numbers[index - 1]\n      closest_elements = [numbers[index - 1], num]\n    end\n  end\n  closest_elements\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpmzaq9orr\nStarted\n.\nFinished in 0.000467563 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2138.75 tests/s, 10693.75 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799080
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_pair = [numbers[0], numbers[1]]\n  closest_difference = (numbers[1] - numbers[0]).abs\n  numbers.each_with_index do |num, index|\n    next if index == 0\n    if (num - numbers[index - 1]).abs < closest_difference\n      closest_pair = [numbers[index - 1], num]\n      closest_difference = (num - numbers[index - 1]).abs\n    end\n  end\n  closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp0ot0bliy\nStarted\n.\nFinished in 0.000458101 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2182.92 tests/s, 10914.62 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799080
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  smallest_difference = numbers[1] - numbers[0]\n  closest_elements = [numbers[0], numbers[1]]\n  numbers.each_with_index do |number, index|\n    next if index == 0\n    difference = numbers[index] - numbers[index - 1]\n    if difference < smallest_difference\n      smallest_difference = difference\n      closest_elements = [numbers[index - 1], numbers[index]]\n    end\n  end\n  closest_elements\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp3f520ggk\nStarted\n.\nFinished in 0.000463775 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2156.22 tests/s, 10781.09 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799080
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_diff = numbers[1] - numbers[0]\n  closest_pair = [numbers[0], numbers[1]]\n  numbers.each_with_index do |num, index|\n    next if index == 0\n    if (num - numbers[index - 1]) < closest_diff\n      closest_diff = num - numbers[index - 1]\n      closest_pair = [numbers[index - 1], num]\n    end\n  end\n  closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpepq24r5r\nStarted\n.\nFinished in 0.000491451 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2034.79 tests/s, 10173.95 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799080
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_elements = [numbers[0], numbers[1]]\n  closest_distance = numbers[1] - numbers[0]\n  numbers.each_with_index do |number, index|\n    next if index == 0\n    if number - numbers[index - 1] < closest_distance\n      closest_distance = number - numbers[index - 1]\n      closest_elements = [numbers[index - 1], number]\n    end\n  end\n  closest_elements\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp_8t8ja0k\nStarted\n.\nFinished in 0.000465659 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2147.49 tests/s, 10737.47 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799080
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_pair = [numbers[0], numbers[1]]\n  closest_distance = (numbers[1] - numbers[0]).abs\n  numbers.each_with_index do |number, index|\n    next if index == 0\n    if (number - numbers[index - 1]).abs < closest_distance\n      closest_distance = (number - numbers[index - 1]).abs\n      closest_pair = [numbers[index - 1], number]\n    end\n  end\n  closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpa7im_tgm\nStarted\n.\nFinished in 0.000472478 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2116.50 tests/s, 10582.50 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799080
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_pair = [numbers[0], numbers[1]]\n  closest_difference = numbers[1] - numbers[0]\n  numbers.each_with_index do |number, index|\n    next if index == 0\n    difference = number - numbers[index - 1]\n    if difference < closest_difference\n      closest_pair = [numbers[index - 1], number]\n      closest_difference = difference\n    end\n  end\n  closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp4556mno6\nStarted\n.\nFinished in 0.000448348 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2230.41 tests/s, 11152.05 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799080
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  # TODO: Implement this method\n  numbers.sort!\n  closest_elements = []\n  closest_elements << numbers[0] << numbers[1]\n  numbers.each_with_index do |number, index|\n    if index < numbers.length - 1\n      if (number - numbers[index + 1]).abs < (closest_elements[0] - closest_elements[1]).abs\n        closest_elements[0] = number\n        closest_elements[1] = numbers[index + 1]\n      end\n    end\n  end\n  closest_elements\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpygsm_8g3\nStarted\n.\nFinished in 0.000466023 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2145.82 tests/s, 10729.08 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799080
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_diff = numbers[1] - numbers[0]\n  closest_pair = [numbers[0], numbers[1]]\n  numbers.each_with_index do |num, i|\n    next if i == numbers.length - 1\n    diff = numbers[i + 1] - num\n    if diff < closest_diff\n      closest_diff = diff\n      closest_pair = [num, numbers[i + 1]]\n    end\n  end\n  closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp8qw57an8\nStarted\n.\nFinished in 0.000458637 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2180.37 tests/s, 10901.87 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799080
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_pair = [numbers[0], numbers[1]]\n  closest_difference = numbers[1] - numbers[0]\n  numbers.each_with_index do |n, i|\n    next if i == 0\n    if (n - numbers[i - 1]) < closest_difference\n      closest_pair = [numbers[i - 1], n]\n      closest_difference = n - numbers[i - 1]\n    end\n  end\n  closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmphwf1f8s4\nStarted\n.\nFinished in 0.000461226 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2168.13 tests/s, 10840.67 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799080
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_pair = [numbers[0], numbers[1]]\n  closest_distance = (numbers[1] - numbers[0]).abs\n  numbers.each_with_index do |num, index|\n    next if index == 0\n    if (num - numbers[index - 1]).abs < closest_distance\n      closest_pair = [numbers[index - 1], num]\n      closest_distance = (num - numbers[index - 1]).abs\n    end\n  end\n  closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp0js923l_\nStarted\n.\nFinished in 0.000489236 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2044.00 tests/s, 10220.02 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799080
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_elements = [numbers[0], numbers[1]]\n  closest_difference = numbers[1] - numbers[0]\n  numbers.each_with_index do |number, index|\n    next if index == 0\n    if numbers[index] - numbers[index - 1] < closest_difference\n      closest_difference = numbers[index] - numbers[index - 1]\n      closest_elements = [numbers[index - 1], numbers[index]]\n    end\n  end\n  closest_elements\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpcu5bbsip\nStarted\n.\nFinished in 0.000463987 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2155.23 tests/s, 10776.16 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799080
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_pair = [numbers[0], numbers[1]]\n  closest_difference = numbers[1] - numbers[0]\n  numbers.each_with_index do |number, index|\n    next if index == 0\n    if (numbers[index] - numbers[index - 1]) < closest_difference\n      closest_pair = [numbers[index - 1], numbers[index]]\n      closest_difference = numbers[index] - numbers[index - 1]\n    end\n  end\n  closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp0qeutok5\nStarted\n.\nFinished in 0.000451831 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2213.22 tests/s, 11066.08 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799080
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_diff = numbers[1] - numbers[0]\n  closest_elements = [numbers[0], numbers[1]]\n  numbers.each_with_index do |number, index|\n    next if index == 0\n    diff = number - numbers[index - 1]\n    if diff < closest_diff\n      closest_diff = diff\n      closest_elements = [numbers[index - 1], number]\n    end\n  end\n  closest_elements\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp7z3mxvn9\nStarted\n.\nFinished in 0.000443487 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2254.86 tests/s, 11274.29 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799080
    },
    {
      "exit_code": 1,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.combination(2).min_by { |a, b| (a - b).abs }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpcjy9lsx5\nStarted\nF\n===============================================================================\nFailure: test_find_closest_elements(TestHumanEval)\n/tmp/tmpcjy9lsx5.rb:11:in `test_find_closest_elements'\n      8:   def test_find_closest_elements\n      9:     candidate = method(:find_closest_elements)\n     10:     assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n  => 11:     assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n     12:     assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n     13:     assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n     14:     assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n<[5.0, 5.9]> expected but was\n<[5.9, 5.0]>\n\ndiff:\n? [5.0, 5.9]\n?    9    0 \n?    ?    ? \n===============================================================================\n\nFinished in 0.007730283 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n129.36 tests/s, 258.72 assertions/s\n",
      "timestamp": 1659799080
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_diff = numbers[1] - numbers[0]\n  closest_pair = [numbers[0], numbers[1]]\n  numbers.each_with_index do |num, index|\n    next if index == 0\n    diff = num - numbers[index - 1]\n    if diff < closest_diff\n      closest_diff = diff\n      closest_pair = [numbers[index - 1], num]\n    end\n  end\n  closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpi7nv8lty\nStarted\n.\nFinished in 0.000456995 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2188.21 tests/s, 10941.04 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799080
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_pair = [numbers[0], numbers[1]]\n  closest_distance = (numbers[1] - numbers[0]).abs\n  numbers.each_with_index do |num, index|\n    next if index == 0\n    if (num - numbers[index - 1]).abs < closest_distance\n      closest_pair = [numbers[index - 1], num]\n      closest_distance = (num - numbers[index - 1]).abs\n    end\n  end\n  closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp0js923l_\nStarted\n.\nFinished in 0.000489236 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2044.00 tests/s, 10220.02 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799080
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_pair = [numbers[0], numbers[1]]\n  closest_distance = (numbers[1] - numbers[0]).abs\n  numbers.each_with_index do |n, i|\n    next if i == 0\n    if (numbers[i] - numbers[i - 1]).abs < closest_distance\n      closest_pair = [numbers[i - 1], numbers[i]]\n      closest_distance = (numbers[i] - numbers[i - 1]).abs\n    end\n  end\n  closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpzqye1vly\nStarted\n.\nFinished in 0.000510434 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1959.12 tests/s, 9795.59 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799080
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  min_diff = numbers[1] - numbers[0]\n  min_pair = [numbers[0], numbers[1]]\n  numbers.each_with_index do |num, index|\n    next if index == 0\n    diff = num - numbers[index - 1]\n    if diff < min_diff\n      min_diff = diff\n      min_pair = [numbers[index - 1], num]\n    end\n  end\n  min_pair\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpn_11eau5\nStarted\n.\nFinished in 0.000444685 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2248.78 tests/s, 11243.91 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799080
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_pair = [numbers[0], numbers[1]]\n  closest_difference = numbers[1] - numbers[0]\n  numbers.each_with_index do |number, index|\n    next if index == 0\n    difference = number - numbers[index - 1]\n    if difference < closest_difference\n      closest_pair = [numbers[index - 1], number]\n      closest_difference = difference\n    end\n  end\n  closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp4556mno6\nStarted\n.\nFinished in 0.000448348 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2230.41 tests/s, 11152.05 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799080
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_diff = numbers[1] - numbers[0]\n  closest_pair = [numbers[0], numbers[1]]\n  numbers.each_with_index do |num, index|\n    next if index == 0\n    if (num - numbers[index - 1]) < closest_diff\n      closest_diff = num - numbers[index - 1]\n      closest_pair = [numbers[index - 1], num]\n    end\n  end\n  closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpepq24r5r\nStarted\n.\nFinished in 0.000491451 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2034.79 tests/s, 10173.95 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799080
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  min_diff = numbers[1] - numbers[0]\n  min_pair = [numbers[0], numbers[1]]\n  numbers.each_with_index do |num, i|\n    next if i == numbers.length - 1\n    diff = numbers[i + 1] - num\n    if diff < min_diff\n      min_diff = diff\n      min_pair = [num, numbers[i + 1]]\n    end\n  end\n  min_pair\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpe_o1630_\nStarted\n.\nFinished in 0.00049752 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2009.97 tests/s, 10049.85 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799080
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_pair = [numbers[0], numbers[1]]\n  closest_difference = (numbers[1] - numbers[0]).abs\n  numbers.each_with_index do |number, index|\n    next if index == 0\n    difference = (numbers[index] - numbers[index - 1]).abs\n    if difference < closest_difference\n      closest_pair = [numbers[index - 1], numbers[index]]\n      closest_difference = difference\n    end\n  end\n  closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpqf144fbg\nStarted\n.\nFinished in 0.000465245 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2149.41 tests/s, 10747.03 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799080
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_elements = [numbers[0], numbers[1]]\n  closest_difference = numbers[1] - numbers[0]\n  numbers.each_with_index do |number, index|\n    next if index == 0\n    difference = number - numbers[index - 1]\n    if difference < closest_difference\n      closest_difference = difference\n      closest_elements = [numbers[index - 1], number]\n    end\n  end\n  closest_elements\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmptmsqv3o1\nStarted\n.\nFinished in 0.000447999 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2232.15 tests/s, 11160.74 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799080
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_diff = numbers[1] - numbers[0]\n  closest_pair = [numbers[0], numbers[1]]\n  numbers.each_with_index do |number, index|\n    next if index == 0\n    diff = numbers[index] - numbers[index - 1]\n    if diff < closest_diff\n      closest_diff = diff\n      closest_pair = [numbers[index - 1], numbers[index]]\n    end\n  end\n  closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp9c25mr0p\nStarted\n.\nFinished in 0.000473367 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2112.53 tests/s, 10562.63 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799080
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_diff = numbers[1] - numbers[0]\n  closest_numbers = [numbers[0], numbers[1]]\n  numbers.each_with_index do |num, index|\n    next if index == 0\n    if (num - numbers[index - 1]) < closest_diff\n      closest_diff = num - numbers[index - 1]\n      closest_numbers = [numbers[index - 1], num]\n    end\n  end\n  closest_numbers\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpgeyzizvk\nStarted\n.\nFinished in 0.000972263 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1028.53 tests/s, 5142.64 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799080
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_diff = numbers[1] - numbers[0]\n  closest_pair = [numbers[0], numbers[1]]\n  numbers.each_with_index do |num, i|\n    next if i == 0\n    if num - numbers[i - 1] < closest_diff\n      closest_diff = num - numbers[i - 1]\n      closest_pair = [numbers[i - 1], num]\n    end\n  end\n  closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpb7zdd5_f\nStarted\n.\nFinished in 0.000486654 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2054.85 tests/s, 10274.24 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799080
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_pair = [numbers[0], numbers[1]]\n  closest_difference = numbers[1] - numbers[0]\n  numbers.each_with_index do |number, index|\n    next if index == 0\n    difference = numbers[index] - numbers[index - 1]\n    if difference < closest_difference\n      closest_pair = [numbers[index - 1], numbers[index]]\n      closest_difference = difference\n    end\n  end\n  closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp7s1o8d5z\nStarted\n.\nFinished in 0.000469805 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2128.54 tests/s, 10642.71 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799080
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_diff = numbers[1] - numbers[0]\n  closest_pair = [numbers[0], numbers[1]]\n  numbers.each_with_index do |num, index|\n    next if index == 0\n    diff = num - numbers[index - 1]\n    if diff < closest_diff\n      closest_diff = diff\n      closest_pair = [numbers[index - 1], num]\n    end\n  end\n  closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpi7nv8lty\nStarted\n.\nFinished in 0.000456995 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2188.21 tests/s, 10941.04 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799080
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_pair = [numbers[0], numbers[1]]\n  closest_distance = (numbers[1] - numbers[0]).abs\n  numbers.each_with_index do |num, i|\n    next if i == 0\n    if (num - numbers[i - 1]).abs < closest_distance\n      closest_pair = [numbers[i - 1], num]\n      closest_distance = (num - numbers[i - 1]).abs\n    end\n  end\n  closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmphv3x_yzc\nStarted\n.\nFinished in 0.000485541 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2059.56 tests/s, 10297.79 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799080
    },
    {
      "exit_code": 1,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.combination(2).min_by { |a, b| (a - b).abs }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmpcjy9lsx5\nStarted\nF\n===============================================================================\nFailure: test_find_closest_elements(TestHumanEval)\n/tmp/tmpcjy9lsx5.rb:11:in `test_find_closest_elements'\n      8:   def test_find_closest_elements\n      9:     candidate = method(:find_closest_elements)\n     10:     assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n  => 11:     assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n     12:     assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n     13:     assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n     14:     assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n<[5.0, 5.9]> expected but was\n<[5.9, 5.0]>\n\ndiff:\n? [5.0, 5.9]\n?    9    0 \n?    ?    ? \n===============================================================================\n\nFinished in 0.007730283 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n129.36 tests/s, 258.72 assertions/s\n",
      "timestamp": 1659799080
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_pair = [numbers[0], numbers[1]]\n  closest_difference = numbers[1] - numbers[0]\n  numbers.each_with_index do |number, index|\n    next if index == 0\n    if (number - numbers[index - 1]) < closest_difference\n      closest_pair = [numbers[index - 1], number]\n      closest_difference = number - numbers[index - 1]\n    end\n  end\n  closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmph1vh0j7k\nStarted\n.\nFinished in 0.0005067 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1973.55 tests/s, 9867.77 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799080
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_pair = [numbers[0], numbers[1]]\n  closest_difference = (numbers[1] - numbers[0]).abs\n  numbers.each_with_index do |number, index|\n    next if index == 0\n    difference = (numbers[index] - numbers[index - 1]).abs\n    if difference < closest_difference\n      closest_pair = [numbers[index - 1], numbers[index]]\n      closest_difference = difference\n    end\n  end\n  closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpqf144fbg\nStarted\n.\nFinished in 0.000465245 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2149.41 tests/s, 10747.03 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799080
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_numbers = [numbers[0], numbers[1]]\n  closest_difference = numbers[1] - numbers[0]\n  numbers.each_with_index do |number, index|\n    next if index == 0\n    difference = number - numbers[index - 1]\n    if difference < closest_difference\n      closest_difference = difference\n      closest_numbers = [numbers[index - 1], number]\n    end\n  end\n  closest_numbers\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmprlo_72f3\nStarted\n.\nFinished in 0.000451074 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2216.93 tests/s, 11084.66 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799080
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  # TODO: implement this method\n  numbers.sort!\n  closest_elements = []\n  closest_difference = numbers[1] - numbers[0]\n  numbers.each_with_index do |number, index|\n    if index < numbers.length - 1\n      if numbers[index + 1] - number < closest_difference\n        closest_difference = numbers[index + 1] - number\n        closest_elements = [number, numbers[index + 1]]\n      end\n    end\n  end\n  closest_elements\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmphobcug6r\nStarted\n.\nFinished in 0.000474183 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2108.89 tests/s, 10544.45 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799080
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  min_diff = numbers[1] - numbers[0]\n  closest_elements = [numbers[0], numbers[1]]\n  (1..numbers.length - 2).each do |i|\n    diff = numbers[i + 1] - numbers[i]\n    if diff < min_diff\n      min_diff = diff\n      closest_elements = [numbers[i], numbers[i + 1]]\n    end\n  end\n  closest_elements\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp5erx3q_7\nStarted\n.\nFinished in 0.000474813 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2106.09 tests/s, 10530.46 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799080
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_diff = numbers[1] - numbers[0]\n  closest_pair = [numbers[0], numbers[1]]\n  numbers.each_with_index do |num, index|\n    next if index == 0\n    diff = num - numbers[index - 1]\n    if diff < closest_diff\n      closest_diff = diff\n      closest_pair = [numbers[index - 1], num]\n    end\n  end\n  closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpi7nv8lty\nStarted\n.\nFinished in 0.000456995 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2188.21 tests/s, 10941.04 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799080
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_pair = [numbers[0], numbers[1]]\n  closest_difference = (numbers[1] - numbers[0]).abs\n  numbers.each_with_index do |number, index|\n    next if index == 0\n    if (number - numbers[index - 1]).abs < closest_difference\n      closest_pair = [numbers[index - 1], number]\n      closest_difference = (number - numbers[index - 1]).abs\n    end\n  end\n  closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpgkm5dk55\nStarted\n.\nFinished in 0.000527592 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1895.40 tests/s, 9477.02 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799080
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  # TODO: implement this method\n  numbers.sort!\n  min_diff = numbers[1] - numbers[0]\n  min_pair = [numbers[0], numbers[1]]\n  numbers.each_with_index do |number, index|\n    next if index == 0\n    if numbers[index] - numbers[index - 1] < min_diff\n      min_diff = numbers[index] - numbers[index - 1]\n      min_pair = [numbers[index - 1], numbers[index]]\n    end\n  end\n  min_pair\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpq5f3qfn6\nStarted\n.\nFinished in 0.000529221 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1889.57 tests/s, 9447.85 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799080
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_pair = [numbers[0], numbers[1]]\n  closest_distance = numbers[1] - numbers[0]\n  numbers.each_with_index do |number, index|\n    next if index == 0\n    if (number - numbers[index - 1]) < closest_distance\n      closest_pair = [numbers[index - 1], number]\n      closest_distance = number - numbers[index - 1]\n    end\n  end\n  closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpwmo58zw4\nStarted\n.\nFinished in 0.000435464 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2296.40 tests/s, 11482.01 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799080
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_pair = [numbers[0], numbers[1]]\n  closest_difference = (numbers[1] - numbers[0]).abs\n  numbers.each_with_index do |number, index|\n    next if index == 0\n    difference = (numbers[index] - numbers[index - 1]).abs\n    if difference < closest_difference\n      closest_pair = [numbers[index - 1], numbers[index]]\n      closest_difference = difference\n    end\n  end\n  closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpqf144fbg\nStarted\n.\nFinished in 0.000465245 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2149.41 tests/s, 10747.03 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799080
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_elements = [numbers[0], numbers[1]]\n  closest_difference = numbers[1] - numbers[0]\n  numbers.each_with_index do |number, index|\n    next if index == 0\n    difference = number - numbers[index - 1]\n    if difference < closest_difference\n      closest_difference = difference\n      closest_elements = [numbers[index - 1], number]\n    end\n  end\n  closest_elements\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmptmsqv3o1\nStarted\n.\nFinished in 0.000447999 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2232.15 tests/s, 11160.74 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799080
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_diff = numbers[1] - numbers[0]\n  closest_pair = [numbers[0], numbers[1]]\n  numbers.each_with_index do |num, index|\n    next if index == 0\n    if (num - numbers[index - 1]) < closest_diff\n      closest_diff = num - numbers[index - 1]\n      closest_pair = [numbers[index - 1], num]\n    end\n  end\n  closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpepq24r5r\nStarted\n.\nFinished in 0.000491451 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2034.79 tests/s, 10173.95 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799080
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_diff = numbers[1] - numbers[0]\n  closest_pair = [numbers[0], numbers[1]]\n  numbers.each_with_index do |number, index|\n    next if index == 0\n    if (number - numbers[index - 1]) < closest_diff\n      closest_diff = number - numbers[index - 1]\n      closest_pair = [numbers[index - 1], number]\n    end\n  end\n  closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpmqe16v6r\nStarted\n.\nFinished in 0.000453738 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2203.92 tests/s, 11019.58 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799080
    },
    {
      "exit_code": 1,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  # TODO: return the two numbers that are closest to each other\n  numbers.combination(2).min_by { |a, b| (a - b).abs }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmp_8vzy97y\nStarted\nF\n===============================================================================\nFailure: test_find_closest_elements(TestHumanEval)\n/tmp/tmp_8vzy97y.rb:12:in `test_find_closest_elements'\n      9:   def test_find_closest_elements\n     10:     candidate = method(:find_closest_elements)\n     11:     assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n  => 12:     assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n     13:     assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n     14:     assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n     15:     assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n<[5.0, 5.9]> expected but was\n<[5.9, 5.0]>\n\ndiff:\n? [5.0, 5.9]\n?    9    0 \n?    ?    ? \n===============================================================================\n\nFinished in 0.008042716 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n124.34 tests/s, 248.67 assertions/s\n",
      "timestamp": 1659799081
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_diff = numbers[1] - numbers[0]\n  closest_elements = [numbers[0], numbers[1]]\n  numbers.each_with_index do |num, i|\n    next if i == 0\n    diff = num - numbers[i - 1]\n    if diff < closest_diff\n      closest_diff = diff\n      closest_elements = [numbers[i - 1], num]\n    end\n  end\n  closest_elements\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpydued6n1\nStarted\n.\nFinished in 0.000441572 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2264.64 tests/s, 11323.18 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799080
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_pair = [numbers[0], numbers[1]]\n  closest_difference = (numbers[1] - numbers[0]).abs\n  numbers.each_with_index do |number, index|\n    next if index == 0\n    difference = (numbers[index] - numbers[index - 1]).abs\n    if difference < closest_difference\n      closest_pair = [numbers[index - 1], numbers[index]]\n      closest_difference = difference\n    end\n  end\n  closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpqf144fbg\nStarted\n.\nFinished in 0.000465245 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2149.41 tests/s, 10747.03 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799080
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_diff = numbers[1] - numbers[0]\n  closest_pair = [numbers[0], numbers[1]]\n  for i in 0..numbers.length-2\n    if numbers[i+1] - numbers[i] < closest_diff\n      closest_diff = numbers[i+1] - numbers[i]\n      closest_pair = [numbers[i], numbers[i+1]]\n    end\n  end\n  return closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpciu5g4hm\nStarted\n.\nFinished in 0.000459518 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2176.19 tests/s, 10880.97 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799080
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_pair = [numbers[0], numbers[1]]\n  closest_distance = (numbers[1] - numbers[0]).abs\n  numbers.each_with_index do |number, index|\n    next if index == 0\n    if (number - numbers[index - 1]).abs < closest_distance\n      closest_distance = (number - numbers[index - 1]).abs\n      closest_pair = [numbers[index - 1], number]\n    end\n  end\n  closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpa7im_tgm\nStarted\n.\nFinished in 0.000472478 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2116.50 tests/s, 10582.50 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799080
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_diff = numbers[1] - numbers[0]\n  closest_pair = [numbers[0], numbers[1]]\n  numbers.each_with_index do |num, index|\n    next if index == 0\n    if (num - numbers[index - 1]) < closest_diff\n      closest_diff = num - numbers[index - 1]\n      closest_pair = [numbers[index - 1], num]\n    end\n  end\n  closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpepq24r5r\nStarted\n.\nFinished in 0.000491451 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2034.79 tests/s, 10173.95 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799080
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_pair = [numbers[0], numbers[1]]\n  closest_distance = numbers[1] - numbers[0]\n  numbers.each_with_index do |num, index|\n    if index < numbers.length - 1\n      if numbers[index + 1] - num < closest_distance\n        closest_pair = [num, numbers[index + 1]]\n        closest_distance = numbers[index + 1] - num\n      end\n    end\n  end\n  closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpcysz3lgr\nStarted\n.\nFinished in 0.00050281 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1988.82 tests/s, 9944.11 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799081
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_diff = numbers[1] - numbers[0]\n  closest_elements = [numbers[0], numbers[1]]\n  numbers.each_with_index do |number, index|\n    next if index == 0\n    diff = number - numbers[index - 1]\n    if diff < closest_diff\n      closest_diff = diff\n      closest_elements = [numbers[index - 1], number]\n    end\n  end\n  closest_elements\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp7z3mxvn9\nStarted\n.\nFinished in 0.000443487 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2254.86 tests/s, 11274.29 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799080
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_pair = [numbers[0], numbers[1]]\n  closest_difference = numbers[1] - numbers[0]\n  numbers.each_with_index do |num, index|\n    next if index == 0\n    if (num - numbers[index - 1]) < closest_difference\n      closest_pair = [numbers[index - 1], num]\n      closest_difference = num - numbers[index - 1]\n    end\n  end\n  closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpe7ea57s5\nStarted\n.\nFinished in 0.000478835 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2088.40 tests/s, 10442.01 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799081
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_pair = [numbers[0], numbers[1]]\n  closest_distance = (numbers[1] - numbers[0]).abs\n  numbers.each_with_index do |num, i|\n    next if i == numbers.length - 1\n    if (numbers[i + 1] - num).abs < closest_distance\n      closest_pair = [num, numbers[i + 1]]\n      closest_distance = (numbers[i + 1] - num).abs\n    end\n  end\n  closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpvjqv1s2t\nStarted\n.\nFinished in 0.00051489 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1942.16 tests/s, 9710.81 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799081
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_elements = [numbers[0], numbers[1]]\n  closest_difference = numbers[1] - numbers[0]\n  numbers.each_with_index do |number, index|\n    if index == numbers.length - 1\n      break\n    end\n    if numbers[index + 1] - number < closest_difference\n      closest_difference = numbers[index + 1] - number\n      closest_elements = [number, numbers[index + 1]]\n    end\n  end\n  closest_elements\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpu1iqxbda\nStarted\n.\nFinished in 0.000475369 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2103.63 tests/s, 10518.14 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799081
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  # TODO: Return the two numbers that are closest to each other\n  numbers.sort!\n  closest_elements = []\n  closest_difference = numbers[1] - numbers[0]\n  numbers.each_with_index do |number, index|\n    if index < numbers.length - 1\n      if numbers[index + 1] - number < closest_difference\n        closest_difference = numbers[index + 1] - number\n        closest_elements = [number, numbers[index + 1]]\n      end\n    end\n  end\n  closest_elements\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpww8n95pi\nStarted\n.\nFinished in 0.000476666 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2097.91 tests/s, 10489.53 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799081
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_diff = numbers[1] - numbers[0]\n  closest_pair = [numbers[0], numbers[1]]\n  numbers.each_with_index do |num, i|\n    next if i == 0\n    diff = num - numbers[i - 1]\n    if diff < closest_diff\n      closest_diff = diff\n      closest_pair = [numbers[i - 1], num]\n    end\n  end\n  closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmprpsfnu_p\nStarted\n.\nFinished in 0.000450293 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2220.78 tests/s, 11103.88 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799081
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_pair = [numbers[0], numbers[1]]\n  closest_difference = (numbers[1] - numbers[0]).abs\n  numbers.each_with_index do |number, index|\n    next if index == 0\n    difference = (numbers[index] - numbers[index - 1]).abs\n    if difference < closest_difference\n      closest_pair = [numbers[index - 1], numbers[index]]\n      closest_difference = difference\n    end\n  end\n  closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpqf144fbg\nStarted\n.\nFinished in 0.000465245 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2149.41 tests/s, 10747.03 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799080
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_diff = numbers[1] - numbers[0]\n  closest_pair = [numbers[0], numbers[1]]\n  numbers.each_with_index do |num, index|\n    next if index == 0\n    diff = num - numbers[index - 1]\n    if diff < closest_diff\n      closest_diff = diff\n      closest_pair = [numbers[index - 1], num]\n    end\n  end\n  closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpi7nv8lty\nStarted\n.\nFinished in 0.000456995 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2188.21 tests/s, 10941.04 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799080
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_pair = [numbers[0], numbers[1]]\n  closest_difference = numbers[1] - numbers[0]\n  numbers.each_with_index do |number, index|\n    next if index == 0\n    if (number - numbers[index - 1]) < closest_difference\n      closest_pair = [numbers[index - 1], number]\n      closest_difference = number - numbers[index - 1]\n    end\n  end\n  closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmph1vh0j7k\nStarted\n.\nFinished in 0.0005067 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1973.55 tests/s, 9867.77 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799080
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_elements = [numbers[0], numbers[1]]\n  closest_difference = numbers[1] - numbers[0]\n  numbers.each_with_index do |number, index|\n    next if index == 0\n    difference = number - numbers[index - 1]\n    if difference < closest_difference\n      closest_difference = difference\n      closest_elements = [numbers[index - 1], number]\n    end\n  end\n  closest_elements\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmptmsqv3o1\nStarted\n.\nFinished in 0.000447999 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2232.15 tests/s, 11160.74 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799080
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_pair = [numbers[0], numbers[1]]\n  closest_difference = numbers[1] - numbers[0]\n  numbers.each_with_index do |num, index|\n    next if index == 0\n    difference = num - numbers[index - 1]\n    if difference < closest_difference\n      closest_pair = [numbers[index - 1], num]\n      closest_difference = difference\n    end\n  end\n  closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmplum1i93y\nStarted\n.\nFinished in 0.000470232 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2126.61 tests/s, 10633.05 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799081
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_elements = [numbers[0], numbers[1]]\n  closest_difference = numbers[1] - numbers[0]\n  (numbers.length - 1).times do |i|\n    if numbers[i + 1] - numbers[i] < closest_difference\n      closest_difference = numbers[i + 1] - numbers[i]\n      closest_elements = [numbers[i], numbers[i + 1]]\n    end\n  end\n  closest_elements\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpe8jo5pz_\nStarted\n.\nFinished in 0.000441994 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2262.47 tests/s, 11312.37 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799081
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_pair = [numbers[0], numbers[1]]\n  closest_difference = numbers[1] - numbers[0]\n  (0..numbers.length - 2).each do |i|\n    if numbers[i + 1] - numbers[i] < closest_difference\n      closest_pair = [numbers[i], numbers[i + 1]]\n      closest_difference = numbers[i + 1] - numbers[i]\n    end\n  end\n  closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpi15g82b9\nStarted\n.\nFinished in 0.000613928 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1628.86 tests/s, 8144.28 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799081
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_pair = [numbers[0], numbers[1]]\n  closest_difference = numbers[1] - numbers[0]\n  numbers.each_with_index do |number, index|\n    next if index == 0\n    difference = numbers[index] - numbers[index - 1]\n    if difference < closest_difference\n      closest_pair = [numbers[index - 1], numbers[index]]\n      closest_difference = difference\n    end\n  end\n  closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp7s1o8d5z\nStarted\n.\nFinished in 0.000469805 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2128.54 tests/s, 10642.71 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799080
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  # TODO: implement this method\n  numbers.sort!\n  closest_elements = []\n  closest_difference = numbers[1] - numbers[0]\n  numbers.each_with_index do |number, index|\n    if index < numbers.length - 1\n      difference = numbers[index + 1] - number\n      if difference < closest_difference\n        closest_difference = difference\n        closest_elements = [number, numbers[index + 1]]\n      end\n    end\n  end\n  closest_elements\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp9vzrx50g\nStarted\n.\nFinished in 0.00042516 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2352.06 tests/s, 11760.28 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799081
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_diff = numbers[1] - numbers[0]\n  closest_pair = [numbers[0], numbers[1]]\n  numbers.each_with_index do |num, i|\n    if i < numbers.length - 1\n      diff = numbers[i + 1] - num\n      if diff < closest_diff\n        closest_diff = diff\n        closest_pair = [num, numbers[i + 1]]\n      end\n    end\n  end\n  closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp3y40o9bd\nStarted\n.\nFinished in 0.000514101 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1945.14 tests/s, 9725.72 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799081
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_diff = numbers[1] - numbers[0]\n  closest_pair = [numbers[0], numbers[1]]\n  numbers.each_with_index do |num, index|\n    next if index == 0\n    if (num - numbers[index - 1]) < closest_diff\n      closest_diff = num - numbers[index - 1]\n      closest_pair = [numbers[index - 1], num]\n    end\n  end\n  closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpepq24r5r\nStarted\n.\nFinished in 0.000491451 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2034.79 tests/s, 10173.95 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799080
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_diff = numbers[1] - numbers[0]\n  closest_elements = [numbers[0], numbers[1]]\n  for i in 0..numbers.length-2\n    if numbers[i+1] - numbers[i] < closest_diff\n      closest_diff = numbers[i+1] - numbers[i]\n      closest_elements = [numbers[i], numbers[i+1]]\n    end\n  end\n  return closest_elements\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp5hxy6avu\nStarted\n.\nFinished in 0.000697652 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1433.38 tests/s, 7166.90 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799081
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  min_diff = numbers[1] - numbers[0]\n  min_pair = [numbers[0], numbers[1]]\n  (1..numbers.length-2).each do |i|\n    if numbers[i+1] - numbers[i] < min_diff\n      min_diff = numbers[i+1] - numbers[i]\n      min_pair = [numbers[i], numbers[i+1]]\n    end\n  end\n  min_pair\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpy_s8mcre\nStarted\n.\nFinished in 0.000514703 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1942.87 tests/s, 9714.34 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799081
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_numbers = []\n  closest_difference = numbers[1] - numbers[0]\n  numbers.each_with_index do |number, index|\n    next if index == numbers.length - 1\n    difference = numbers[index + 1] - number\n    if difference < closest_difference\n      closest_difference = difference\n      closest_numbers = [number, numbers[index + 1]]\n    end\n  end\n  closest_numbers\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpwv8hm2h7\nStarted\n.\nFinished in 0.000504774 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1981.08 tests/s, 9905.42 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799081
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_pair = [numbers[0], numbers[1]]\n  closest_difference = (numbers[1] - numbers[0]).abs\n  numbers.each_with_index do |number, index|\n    next if index == 0\n    difference = (numbers[index] - numbers[index - 1]).abs\n    if difference < closest_difference\n      closest_pair = [numbers[index - 1], numbers[index]]\n      closest_difference = difference\n    end\n  end\n  closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpqf144fbg\nStarted\n.\nFinished in 0.000465245 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2149.41 tests/s, 10747.03 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799080
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_pair = [numbers[0], numbers[1]]\n  closest_difference = numbers[1] - numbers[0]\n  numbers.each_with_index do |number, index|\n    next if index == 0\n    difference = number - numbers[index - 1]\n    if difference < closest_difference\n      closest_pair = [numbers[index - 1], number]\n      closest_difference = difference\n    end\n  end\n  closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp4556mno6\nStarted\n.\nFinished in 0.000448348 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2230.41 tests/s, 11152.05 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799080
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_pair = [numbers[0], numbers[1]]\n  closest_distance = (numbers[1] - numbers[0]).abs\n  numbers.each_with_index do |number, index|\n    next if index == 0\n    distance = (number - numbers[index - 1]).abs\n    if distance < closest_distance\n      closest_distance = distance\n      closest_pair = [numbers[index - 1], number]\n    end\n  end\n  closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp2vb9k0q_\nStarted\n.\nFinished in 0.00044081 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2268.55 tests/s, 11342.76 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799081
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_pair = [numbers[0], numbers[1]]\n  closest_distance = (numbers[1] - numbers[0]).abs\n  numbers.each_with_index do |num, index|\n    next if index == 0\n    if (num - numbers[index - 1]).abs < closest_distance\n      closest_distance = (num - numbers[index - 1]).abs\n      closest_pair = [numbers[index - 1], num]\n    end\n  end\n  closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpjgmyblhx\nStarted\n.\nFinished in 0.000571106 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1750.99 tests/s, 8754.94 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799081
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_diff = numbers[1] - numbers[0]\n  closest_elements = [numbers[0], numbers[1]]\n  numbers.each_with_index do |number, index|\n    next if index == 0\n    if numbers[index] - numbers[index - 1] < closest_diff\n      closest_diff = numbers[index] - numbers[index - 1]\n      closest_elements = [numbers[index - 1], numbers[index]]\n    end\n  end\n  closest_elements\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmppph6_56r\nStarted\n.\nFinished in 0.000466926 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2141.67 tests/s, 10708.33 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799081
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_diff = numbers[1] - numbers[0]\n  closest_pair = [numbers[0], numbers[1]]\n  numbers.each_with_index do |num, i|\n    next if i == 0\n    if numbers[i] - numbers[i - 1] < closest_diff\n      closest_diff = numbers[i] - numbers[i - 1]\n      closest_pair = [numbers[i - 1], numbers[i]]\n    end\n  end\n  closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpptw9mh9z\nStarted\n.\nFinished in 0.000518113 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1930.08 tests/s, 9650.40 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799081
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_pair = [numbers[0], numbers[1]]\n  closest_difference = numbers[1] - numbers[0]\n  numbers.each_with_index do |number, index|\n    next if index == 0\n    if (number - numbers[index - 1]) < closest_difference\n      closest_pair = [numbers[index - 1], number]\n      closest_difference = number - numbers[index - 1]\n    end\n  end\n  closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmph1vh0j7k\nStarted\n.\nFinished in 0.0005067 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1973.55 tests/s, 9867.77 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799080
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_pair = [numbers[0], numbers[1]]\n  closest_distance = (numbers[1] - numbers[0]).abs\n  numbers.each_with_index do |num, index|\n    next if index == 0\n    if (num - numbers[index - 1]).abs < closest_distance\n      closest_distance = (num - numbers[index - 1]).abs\n      closest_pair = [numbers[index - 1], num]\n    end\n  end\n  closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpjgmyblhx\nStarted\n.\nFinished in 0.000571106 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1750.99 tests/s, 8754.94 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799081
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_pair = [numbers[0], numbers[1]]\n  closest_difference = numbers[1] - numbers[0]\n  for i in 1..numbers.length-2\n    difference = numbers[i+1] - numbers[i]\n    if difference < closest_difference\n      closest_pair = [numbers[i], numbers[i+1]]\n      closest_difference = difference\n    end\n  end\n  return closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmptqktqxvo\nStarted\n.\nFinished in 0.000639631 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1563.40 tests/s, 7817.01 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799081
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_pair = [numbers[0], numbers[1]]\n  closest_distance = numbers[1] - numbers[0]\n  numbers.each_with_index do |num, i|\n    next if i == 0\n    if num - numbers[i - 1] < closest_distance\n      closest_pair = [numbers[i - 1], num]\n      closest_distance = num - numbers[i - 1]\n    end\n  end\n  closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpymjqryt1\nStarted\n.\nFinished in 0.000426537 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2344.46 tests/s, 11722.31 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799081
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_pair = [numbers[0], numbers[1]]\n  closest_distance = (numbers[1] - numbers[0]).abs\n  numbers.each_with_index do |number, index|\n    next if index == 0\n    if (number - numbers[index - 1]).abs < closest_distance\n      closest_distance = (number - numbers[index - 1]).abs\n      closest_pair = [numbers[index - 1], number]\n    end\n  end\n  closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpa7im_tgm\nStarted\n.\nFinished in 0.000472478 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2116.50 tests/s, 10582.50 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799080
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_pair = [numbers[0], numbers[1]]\n  closest_distance = numbers[1] - numbers[0]\n  numbers.each_with_index do |number, index|\n    next if index == 0\n    distance = number - numbers[index - 1]\n    if distance < closest_distance\n      closest_distance = distance\n      closest_pair = [numbers[index - 1], number]\n    end\n  end\n  closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpysmgp3ka\nStarted\n.\nFinished in 0.000488794 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2045.85 tests/s, 10229.26 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799081
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_pair = [numbers[0], numbers[1]]\n  closest_distance = numbers[1] - numbers[0]\n  numbers.each_with_index do |n, i|\n    next if i == 0\n    if numbers[i] - numbers[i - 1] < closest_distance\n      closest_pair = [numbers[i - 1], numbers[i]]\n      closest_distance = numbers[i] - numbers[i - 1]\n    end\n  end\n  closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpgjs1_xm0\nStarted\n.\nFinished in 0.000452424 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2210.32 tests/s, 11051.58 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799081
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_diff = numbers[1] - numbers[0]\n  closest_pair = [numbers[0], numbers[1]]\n  numbers.each_with_index do |num, index|\n    next if index == numbers.length - 1\n    if numbers[index + 1] - num < closest_diff\n      closest_diff = numbers[index + 1] - num\n      closest_pair = [num, numbers[index + 1]]\n    end\n  end\n  closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpxvzctvtm\nStarted\n.\nFinished in 0.000465128 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2149.95 tests/s, 10749.73 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799081
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_diff = numbers[1] - numbers[0]\n  closest_pair = [numbers[0], numbers[1]]\n  numbers.each_with_index do |num, index|\n    next if index == 0\n    if (num - numbers[index - 1]) < closest_diff\n      closest_diff = num - numbers[index - 1]\n      closest_pair = [numbers[index - 1], num]\n    end\n  end\n  closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpepq24r5r\nStarted\n.\nFinished in 0.000491451 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2034.79 tests/s, 10173.95 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799080
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_diff = numbers[1] - numbers[0]\n  closest_elements = [numbers[0], numbers[1]]\n  numbers.each_with_index do |number, index|\n    next if index == 0\n    diff = number - numbers[index - 1]\n    if diff < closest_diff\n      closest_diff = diff\n      closest_elements = [numbers[index - 1], number]\n    end\n  end\n  closest_elements\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp7z3mxvn9\nStarted\n.\nFinished in 0.000443487 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2254.86 tests/s, 11274.29 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799080
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_diff = numbers[1] - numbers[0]\n  closest_elements = [numbers[0], numbers[1]]\n  numbers.each_with_index do |num, index|\n    next if index == 0\n    diff = num - numbers[index - 1]\n    if diff < closest_diff\n      closest_diff = diff\n      closest_elements = [numbers[index - 1], num]\n    end\n  end\n  closest_elements\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp3miz61ez\nStarted\n.\nFinished in 0.000529781 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1887.57 tests/s, 9437.86 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799081
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_pair = [numbers[0], numbers[1]]\n  closest_difference = numbers[1] - numbers[0]\n  numbers.each_with_index do |number, index|\n    next if index == 0\n    difference = numbers[index] - numbers[index - 1]\n    if difference < closest_difference\n      closest_pair = [numbers[index - 1], numbers[index]]\n      closest_difference = difference\n    end\n  end\n  closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp7s1o8d5z\nStarted\n.\nFinished in 0.000469805 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2128.54 tests/s, 10642.71 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799080
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  # TODO: implement this method\n  numbers.sort!\n  closest_elements = []\n  closest_elements << numbers[0]\n  closest_elements << numbers[1]\n  i = 0\n  while i < numbers.length - 1\n    if (numbers[i+1] - numbers[i]) < (closest_elements[1] - closest_elements[0])\n      closest_elements[0] = numbers[i]\n      closest_elements[1] = numbers[i+1]\n    end\n    i += 1\n  end\n  closest_elements\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpz5knuhcw\nStarted\n.\nFinished in 0.000444196 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2251.26 tests/s, 11256.29 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799081
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_pair = [numbers[0], numbers[1]]\n  closest_distance = numbers[1] - numbers[0]\n  numbers.each_with_index do |number, index|\n    next if index == 0\n    if (number - numbers[index - 1]) < closest_distance\n      closest_pair = [numbers[index - 1], number]\n      closest_distance = number - numbers[index - 1]\n    end\n  end\n  closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpwmo58zw4\nStarted\n.\nFinished in 0.000435464 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2296.40 tests/s, 11482.01 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799080
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_diff = numbers[1] - numbers[0]\n  closest_pair = [numbers[0], numbers[1]]\n  numbers.each_with_index do |num, index|\n    if index < numbers.length - 1\n      diff = numbers[index + 1] - num\n      if diff < closest_diff\n        closest_diff = diff\n        closest_pair = [num, numbers[index + 1]]\n      end\n    end\n  end\n  closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpuqqtz6td\nStarted\n.\nFinished in 0.000513212 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1948.51 tests/s, 9742.56 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799081
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_pair = [numbers[0], numbers[1]]\n  closest_difference = (numbers[1] - numbers[0]).abs\n  numbers.each_with_index do |number, index|\n    next if index == 0\n    difference = (numbers[index] - numbers[index - 1]).abs\n    if difference < closest_difference\n      closest_pair = [numbers[index - 1], numbers[index]]\n      closest_difference = difference\n    end\n  end\n  closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpqf144fbg\nStarted\n.\nFinished in 0.000465245 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2149.41 tests/s, 10747.03 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799080
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_pair = [numbers[0], numbers[1]]\n  closest_difference = numbers[1] - numbers[0]\n  numbers.each_with_index do |number, index|\n    next if index == 0\n    if (number - numbers[index - 1]) < closest_difference\n      closest_pair = [numbers[index - 1], number]\n      closest_difference = number - numbers[index - 1]\n    end\n  end\n  closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmph1vh0j7k\nStarted\n.\nFinished in 0.0005067 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1973.55 tests/s, 9867.77 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799080
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_pair = [numbers[0], numbers[1]]\n  closest_distance = numbers[1] - numbers[0]\n  numbers.each_with_index do |num, index|\n    next if index == 0\n    if num - numbers[index - 1] < closest_distance\n      closest_pair = [numbers[index - 1], num]\n      closest_distance = num - numbers[index - 1]\n    end\n  end\n  closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpjvjxc6ao\nStarted\n.\nFinished in 0.000481363 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2077.43 tests/s, 10387.17 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799081
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_elements = [numbers[0], numbers[1]]\n  closest_difference = numbers[1] - numbers[0]\n  numbers.each_with_index do |number, index|\n    next if index == 0\n    difference = number - numbers[index - 1]\n    if difference < closest_difference\n      closest_difference = difference\n      closest_elements = [numbers[index - 1], number]\n    end\n  end\n  closest_elements\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmptmsqv3o1\nStarted\n.\nFinished in 0.000447999 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2232.15 tests/s, 11160.74 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799080
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_pair = [numbers[0], numbers[1]]\n  closest_distance = numbers[1] - numbers[0]\n  numbers.each_with_index do |number, index|\n    next if index == 0\n    if (number - numbers[index - 1]) < closest_distance\n      closest_pair = [numbers[index - 1], number]\n      closest_distance = number - numbers[index - 1]\n    end\n  end\n  closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpwmo58zw4\nStarted\n.\nFinished in 0.000435464 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2296.40 tests/s, 11482.01 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799080
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_diff = numbers[1] - numbers[0]\n  closest_elements = [numbers[0], numbers[1]]\n  numbers.each_with_index do |number, index|\n    next if index == 0\n    diff = number - numbers[index - 1]\n    if diff < closest_diff\n      closest_diff = diff\n      closest_elements = [numbers[index - 1], number]\n    end\n  end\n  closest_elements\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp7z3mxvn9\nStarted\n.\nFinished in 0.000443487 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2254.86 tests/s, 11274.29 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799080
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_numbers = [numbers[0], numbers[1]]\n  closest_difference = numbers[1] - numbers[0]\n  numbers.each_with_index do |number, index|\n    next if index == 0\n    difference = number - numbers[index - 1]\n    if difference < closest_difference\n      closest_difference = difference\n      closest_numbers = [numbers[index - 1], number]\n    end\n  end\n  closest_numbers\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmprlo_72f3\nStarted\n.\nFinished in 0.000451074 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2216.93 tests/s, 11084.66 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799080
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_pair = [numbers[0], numbers[1]]\n  closest_difference = (numbers[1] - numbers[0]).abs\n  numbers.each_with_index do |number, index|\n    next if index == 0\n    difference = (numbers[index] - numbers[index - 1]).abs\n    if difference < closest_difference\n      closest_pair = [numbers[index - 1], numbers[index]]\n      closest_difference = difference\n    end\n  end\n  closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpqf144fbg\nStarted\n.\nFinished in 0.000465245 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2149.41 tests/s, 10747.03 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799080
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_pair = [numbers[0], numbers[1]]\n  closest_difference = numbers[1] - numbers[0]\n  (0..numbers.length - 2).each do |i|\n    if (numbers[i + 1] - numbers[i]) < closest_difference\n      closest_pair = [numbers[i], numbers[i + 1]]\n      closest_difference = numbers[i + 1] - numbers[i]\n    end\n  end\n  closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpdzt7np20\nStarted\n.\nFinished in 0.000468069 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2136.44 tests/s, 10682.19 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799081
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_diff = numbers[1] - numbers[0]\n  closest_numbers = [numbers[0], numbers[1]]\n  numbers.each_with_index do |num, i|\n    next if i == 0\n    diff = num - numbers[i - 1]\n    if diff < closest_diff\n      closest_diff = diff\n      closest_numbers = [numbers[i - 1], num]\n    end\n  end\n  closest_numbers\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpnmdif895\nStarted\n.\nFinished in 0.000448894 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2227.70 tests/s, 11138.49 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799081
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_elements = [numbers[0], numbers[1]]\n  closest_difference = numbers[1] - numbers[0]\n  numbers.each_with_index do |number, index|\n    next if index == 0\n    difference = number - numbers[index - 1]\n    if difference < closest_difference\n      closest_difference = difference\n      closest_elements = [numbers[index - 1], number]\n    end\n  end\n  closest_elements\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmptmsqv3o1\nStarted\n.\nFinished in 0.000447999 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2232.15 tests/s, 11160.74 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799080
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  # TODO: implement this method\n  numbers.sort!\n  closest_elements = []\n  closest_elements << numbers[0]\n  closest_elements << numbers[1]\n  closest_difference = closest_elements[1] - closest_elements[0]\n  numbers.each_with_index do |number, index|\n    if index < numbers.length - 1\n      difference = numbers[index + 1] - number\n      if difference < closest_difference\n        closest_elements = []\n        closest_elements << number\n        closest_elements << numbers[index + 1]\n        closest_difference = difference\n      end\n    end\n  end\n  closest_elements\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpnzdxepjh\nStarted\n.\nFinished in 0.000447722 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2233.53 tests/s, 11167.64 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799081
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_pair = [numbers[0], numbers[1]]\n  closest_difference = numbers[1] - numbers[0]\n  numbers.each_with_index do |number, index|\n    next if index == 0\n    difference = numbers[index] - numbers[index - 1]\n    if difference < closest_difference\n      closest_pair = [numbers[index - 1], numbers[index]]\n      closest_difference = difference\n    end\n  end\n  closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp7s1o8d5z\nStarted\n.\nFinished in 0.000469805 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2128.54 tests/s, 10642.71 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799080
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_pair = [numbers[0], numbers[1]]\n  closest_difference = (numbers[1] - numbers[0]).abs\n  numbers.each_with_index do |number, index|\n    next if index == 0\n    difference = (numbers[index] - numbers[index - 1]).abs\n    if difference < closest_difference\n      closest_pair = [numbers[index - 1], numbers[index]]\n      closest_difference = difference\n    end\n  end\n  closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpqf144fbg\nStarted\n.\nFinished in 0.000465245 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2149.41 tests/s, 10747.03 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799080
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_pair = [numbers[0], numbers[1]]\n  closest_distance = numbers[1] - numbers[0]\n  numbers.each_with_index do |number, index|\n    next if index == 0\n    distance = number - numbers[index - 1]\n    if distance < closest_distance\n      closest_distance = distance\n      closest_pair = [numbers[index - 1], number]\n    end\n  end\n  closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpysmgp3ka\nStarted\n.\nFinished in 0.000488794 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2045.85 tests/s, 10229.26 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799081
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_elements = [numbers[0], numbers[1]]\n  closest_difference = numbers[1] - numbers[0]\n  numbers.each_with_index do |num, index|\n    if index < numbers.length - 1\n      difference = numbers[index + 1] - num\n      if difference < closest_difference\n        closest_difference = difference\n        closest_elements = [num, numbers[index + 1]]\n      end\n    end\n  end\n  closest_elements\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpnny68qd7\nStarted\n.\nFinished in 0.000475657 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2102.36 tests/s, 10511.78 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799081
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_pair = [numbers[0], numbers[1]]\n  closest_difference = numbers[1] - numbers[0]\n  numbers.each_with_index do |number, index|\n    next if index == 0\n    difference = numbers[index] - numbers[index - 1]\n    if difference < closest_difference\n      closest_pair = [numbers[index - 1], numbers[index]]\n      closest_difference = difference\n    end\n  end\n  closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp7s1o8d5z\nStarted\n.\nFinished in 0.000469805 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2128.54 tests/s, 10642.71 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799080
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_pair = [numbers[0], numbers[1]]\n  closest_difference = (numbers[1] - numbers[0]).abs\n  numbers.each_with_index do |number, index|\n    next if index == 0\n    difference = (numbers[index] - numbers[index - 1]).abs\n    if difference < closest_difference\n      closest_pair = [numbers[index - 1], numbers[index]]\n      closest_difference = difference\n    end\n  end\n  closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpqf144fbg\nStarted\n.\nFinished in 0.000465245 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2149.41 tests/s, 10747.03 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799080
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_elements = [numbers[0], numbers[1]]\n  closest_difference = numbers[1] - numbers[0]\n  numbers.each_with_index do |number, index|\n    next if index == 0\n    difference = number - numbers[index - 1]\n    if difference < closest_difference\n      closest_difference = difference\n      closest_elements = [numbers[index - 1], number]\n    end\n  end\n  closest_elements\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmptmsqv3o1\nStarted\n.\nFinished in 0.000447999 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2232.15 tests/s, 11160.74 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799080
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_pair = [numbers[0], numbers[1]]\n  closest_distance = numbers[1] - numbers[0]\n  numbers.each_with_index do |number, index|\n    next if index == 0\n    if number - numbers[index - 1] < closest_distance\n      closest_pair = [numbers[index - 1], number]\n      closest_distance = number - numbers[index - 1]\n    end\n  end\n  closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp58z6lxm0\nStarted\n.\nFinished in 0.000464868 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2151.15 tests/s, 10755.74 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799081
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_diff = numbers[1] - numbers[0]\n  closest_pair = [numbers[0], numbers[1]]\n  for i in 0..numbers.length-2\n    if numbers[i+1] - numbers[i] < closest_diff\n      closest_diff = numbers[i+1] - numbers[i]\n      closest_pair = [numbers[i], numbers[i+1]]\n    end\n  end\n  return closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpciu5g4hm\nStarted\n.\nFinished in 0.000459518 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2176.19 tests/s, 10880.97 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799080
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_diff = numbers[1] - numbers[0]\n  closest_pair = [numbers[0], numbers[1]]\n  numbers.each_with_index do |num, i|\n    next if i == numbers.length - 1\n    if numbers[i + 1] - num < closest_diff\n      closest_diff = numbers[i + 1] - num\n      closest_pair = [num, numbers[i + 1]]\n    end\n  end\n  closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp0zn7z63x\nStarted\n.\nFinished in 0.000465908 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2146.35 tests/s, 10731.73 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799080
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  # TODO: Return the two numbers that are closest to each other\n  numbers.sort!\n  closest_elements = [numbers[0], numbers[1]]\n  closest_difference = numbers[1] - numbers[0]\n  numbers.each_with_index do |number, index|\n    next if index == 0\n    difference = number - numbers[index - 1]\n    if difference < closest_difference\n      closest_difference = difference\n      closest_elements = [numbers[index - 1], number]\n    end\n  end\n  closest_elements\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpm5jbcsoe\nStarted\n.\nFinished in 0.000453476 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2205.19 tests/s, 11025.94 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799081
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_diff = numbers[1] - numbers[0]\n  closest_pair = [numbers[0], numbers[1]]\n  numbers.each_with_index do |num, index|\n    next if index == 0\n    if (num - numbers[index - 1]) < closest_diff\n      closest_diff = num - numbers[index - 1]\n      closest_pair = [numbers[index - 1], num]\n    end\n  end\n  closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpepq24r5r\nStarted\n.\nFinished in 0.000491451 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2034.79 tests/s, 10173.95 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799080
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_diff = numbers[1] - numbers[0]\n  closest_elements = [numbers[0], numbers[1]]\n  numbers.each_with_index do |num, index|\n    next if index == 0\n    diff = num - numbers[index - 1]\n    if diff < closest_diff\n      closest_diff = diff\n      closest_elements = [numbers[index - 1], num]\n    end\n  end\n  closest_elements\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp3miz61ez\nStarted\n.\nFinished in 0.000529781 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1887.57 tests/s, 9437.86 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799081
    },
    {
      "exit_code": 1,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  # TODO: return the two numbers that are closest to each other\n  numbers.combination(2).min_by { |a, b| (a - b).abs }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "Loaded suite /tmp/tmp_8vzy97y\nStarted\nF\n===============================================================================\nFailure: test_find_closest_elements(TestHumanEval)\n/tmp/tmp_8vzy97y.rb:12:in `test_find_closest_elements'\n      9:   def test_find_closest_elements\n     10:     candidate = method(:find_closest_elements)\n     11:     assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n  => 12:     assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n     13:     assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n     14:     assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n     15:     assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n<[5.0, 5.9]> expected but was\n<[5.9, 5.0]>\n\ndiff:\n? [5.0, 5.9]\n?    9    0 \n?    ?    ? \n===============================================================================\n\nFinished in 0.008042716 seconds.\n-------------------------------------------------------------------------------\n1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n0% passed\n-------------------------------------------------------------------------------\n124.34 tests/s, 248.67 assertions/s\n",
      "timestamp": 1659799081
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_diff = numbers[1] - numbers[0]\n  closest_pair = [numbers[0], numbers[1]]\n  numbers.each_with_index do |num, index|\n    next if index == 0\n    if (num - numbers[index - 1]) < closest_diff\n      closest_diff = num - numbers[index - 1]\n      closest_pair = [numbers[index - 1], num]\n    end\n  end\n  closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpepq24r5r\nStarted\n.\nFinished in 0.000491451 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2034.79 tests/s, 10173.95 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799080
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_pair = [numbers[0], numbers[1]]\n  closest_distance = numbers[1] - numbers[0]\n  numbers.each_with_index do |number, index|\n    next if index == 0\n    distance = number - numbers[index - 1]\n    if distance < closest_distance\n      closest_distance = distance\n      closest_pair = [numbers[index - 1], number]\n    end\n  end\n  closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpysmgp3ka\nStarted\n.\nFinished in 0.000488794 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2045.85 tests/s, 10229.26 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799081
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_pair = [numbers[0], numbers[1]]\n  closest_difference = numbers[1] - numbers[0]\n  numbers.each_with_index do |number, index|\n    next if index == 0\n    difference = numbers[index] - numbers[index - 1]\n    if difference < closest_difference\n      closest_pair = [numbers[index - 1], numbers[index]]\n      closest_difference = difference\n    end\n  end\n  closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp7s1o8d5z\nStarted\n.\nFinished in 0.000469805 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2128.54 tests/s, 10642.71 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799080
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  smallest_difference = numbers[1] - numbers[0]\n  closest_elements = [numbers[0], numbers[1]]\n  numbers.each_with_index do |number, index|\n    next if index == 0\n    difference = numbers[index] - numbers[index - 1]\n    if difference < smallest_difference\n      smallest_difference = difference\n      closest_elements = [numbers[index - 1], numbers[index]]\n    end\n  end\n  closest_elements\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp3f520ggk\nStarted\n.\nFinished in 0.000463775 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2156.22 tests/s, 10781.09 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799080
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_elements = [numbers[0], numbers[1]]\n  closest_difference = numbers[1] - numbers[0]\n  numbers.each_with_index do |number, index|\n    next if index == 0\n    difference = number - numbers[index - 1]\n    if difference < closest_difference\n      closest_difference = difference\n      closest_elements = [numbers[index - 1], number]\n    end\n  end\n  closest_elements\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmptmsqv3o1\nStarted\n.\nFinished in 0.000447999 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2232.15 tests/s, 11160.74 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799080
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_pair = [numbers[0], numbers[1]]\n  closest_difference = numbers[1] - numbers[0]\n  numbers.each_with_index do |number, index|\n    next if index == 0\n    difference = number - numbers[index - 1]\n    if difference < closest_difference\n      closest_pair = [numbers[index - 1], number]\n      closest_difference = difference\n    end\n  end\n  closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp4556mno6\nStarted\n.\nFinished in 0.000448348 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2230.41 tests/s, 11152.05 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799080
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_pair = [numbers[0], numbers[1]]\n  closest_distance = numbers[1] - numbers[0]\n  numbers.each_with_index do |number, index|\n    next if index == 0\n    if (number - numbers[index - 1]) < closest_distance\n      closest_pair = [numbers[index - 1], number]\n      closest_distance = number - numbers[index - 1]\n    end\n  end\n  closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpwmo58zw4\nStarted\n.\nFinished in 0.000435464 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2296.40 tests/s, 11482.01 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799080
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_pair = [numbers[0], numbers[1]]\n  closest_difference = numbers[1] - numbers[0]\n  numbers.each_with_index do |number, index|\n    next if index == 0\n    difference = numbers[index] - numbers[index - 1]\n    if difference < closest_difference\n      closest_pair = [numbers[index - 1], numbers[index]]\n      closest_difference = difference\n    end\n  end\n  closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp7s1o8d5z\nStarted\n.\nFinished in 0.000469805 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2128.54 tests/s, 10642.71 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799080
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_pair = [numbers[0], numbers[1]]\n  closest_difference = (numbers[1] - numbers[0]).abs\n  numbers.each_with_index do |n, i|\n    next if i == 0\n    if (numbers[i] - numbers[i - 1]).abs < closest_difference\n      closest_pair = [numbers[i - 1], numbers[i]]\n      closest_difference = (numbers[i] - numbers[i - 1]).abs\n    end\n  end\n  closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpampsysep\nStarted\n.\nFinished in 0.000629319 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1589.02 tests/s, 7945.10 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799081
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_pair = [numbers[0], numbers[1]]\n  closest_distance = numbers[1] - numbers[0]\n  numbers.each_with_index do |num, i|\n    next if i == 0\n    if num - numbers[i - 1] < closest_distance\n      closest_pair = [numbers[i - 1], num]\n      closest_distance = num - numbers[i - 1]\n    end\n  end\n  closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpymjqryt1\nStarted\n.\nFinished in 0.000426537 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2344.46 tests/s, 11722.31 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799081
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_pair = [numbers[0], numbers[1]]\n  closest_difference = (numbers[1] - numbers[0]).abs\n  numbers.each_with_index do |number, index|\n    next if index == 0\n    difference = (numbers[index] - numbers[index - 1]).abs\n    if difference < closest_difference\n      closest_pair = [numbers[index - 1], numbers[index]]\n      closest_difference = difference\n    end\n  end\n  closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpqf144fbg\nStarted\n.\nFinished in 0.000465245 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2149.41 tests/s, 10747.03 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799080
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_diff = numbers[1] - numbers[0]\n  closest_pair = [numbers[0], numbers[1]]\n  numbers.each_with_index do |num, index|\n    next if index == 0\n    if num - numbers[index - 1] < closest_diff\n      closest_diff = num - numbers[index - 1]\n      closest_pair = [numbers[index - 1], num]\n    end\n  end\n  closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpol8qoicu\nStarted\n.\nFinished in 0.000855601 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1168.77 tests/s, 5843.85 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799081
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_diff = numbers[1] - numbers[0]\n  closest_pair = [numbers[0], numbers[1]]\n  numbers.each_with_index do |num, i|\n    if i == numbers.length - 1\n      break\n    end\n    if numbers[i + 1] - num < closest_diff\n      closest_diff = numbers[i + 1] - num\n      closest_pair = [num, numbers[i + 1]]\n    end\n  end\n  closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp7qry83vc\nStarted\n.\nFinished in 0.000495486 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2018.22 tests/s, 10091.10 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799081
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_diff = numbers[1] - numbers[0]\n  closest_elements = [numbers[0], numbers[1]]\n  for i in 0..numbers.length-2\n    diff = numbers[i+1] - numbers[i]\n    if diff < closest_diff\n      closest_diff = diff\n      closest_elements = [numbers[i], numbers[i+1]]\n    end\n  end\n  return closest_elements\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp2mtvmdsa\nStarted\n.\nFinished in 0.00073929 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1352.65 tests/s, 6763.25 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799081
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_pair = [numbers[0], numbers[1]]\n  closest_distance = (numbers[1] - numbers[0]).abs\n  numbers.each_with_index do |num, index|\n    next if index == 0\n    if (num - numbers[index - 1]).abs < closest_distance\n      closest_distance = (num - numbers[index - 1]).abs\n      closest_pair = [numbers[index - 1], num]\n    end\n  end\n  closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpjgmyblhx\nStarted\n.\nFinished in 0.000571106 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1750.99 tests/s, 8754.94 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799081
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_pair = [numbers[0], numbers[1]]\n  closest_distance = numbers[1] - numbers[0]\n  numbers.each_with_index do |number, index|\n    next if index == 0\n    if (numbers[index] - numbers[index - 1]) < closest_distance\n      closest_pair = [numbers[index - 1], numbers[index]]\n      closest_distance = numbers[index] - numbers[index - 1]\n    end\n  end\n  closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmphzeta52f\nStarted\n.\nFinished in 0.000452572 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2209.59 tests/s, 11047.97 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799081
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_numbers = [numbers[0], numbers[1]]\n  closest_difference = numbers[1] - numbers[0]\n  numbers.each_with_index do |number, index|\n    next if index == 0\n    if (number - numbers[index - 1]) < closest_difference\n      closest_numbers = [numbers[index - 1], number]\n      closest_difference = number - numbers[index - 1]\n    end\n  end\n  closest_numbers\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmptw6cexj2\nStarted\n.\nFinished in 0.000633043 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1579.67 tests/s, 7898.36 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799081
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_pair = [numbers[0], numbers[1]]\n  closest_difference = numbers[1] - numbers[0]\n  numbers.each_with_index do |num, index|\n    next if index == 0\n    if (num - numbers[index - 1]) < closest_difference\n      closest_pair = [numbers[index - 1], num]\n      closest_difference = num - numbers[index - 1]\n    end\n  end\n  closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpe7ea57s5\nStarted\n.\nFinished in 0.000478835 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2088.40 tests/s, 10442.01 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799081
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  # TODO: return the two numbers that are closest to each other\n  numbers.sort!\n  closest_diff = numbers[1] - numbers[0]\n  closest_numbers = [numbers[0], numbers[1]]\n  numbers.each_with_index do |number, index|\n    next if index == numbers.length - 1\n    diff = numbers[index + 1] - number\n    if diff < closest_diff\n      closest_diff = diff\n      closest_numbers = [number, numbers[index + 1]]\n    end\n  end\n  closest_numbers\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp7atbmyqr\nStarted\n.\nFinished in 0.00045696 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2188.38 tests/s, 10941.88 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799081
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  # TODO: return the two numbers that are closest to each other\n  numbers.sort!\n  closest_pair = [numbers[0], numbers[1]]\n  closest_diff = numbers[1] - numbers[0]\n  numbers.each_with_index do |number, index|\n    next if index == 0\n    if (number - numbers[index - 1]) < closest_diff\n      closest_pair = [numbers[index - 1], number]\n      closest_diff = number - numbers[index - 1]\n    end\n  end\n  closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpk5r_z869\nStarted\n.\nFinished in 0.000487619 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2050.78 tests/s, 10253.91 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799081
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_pair = [numbers[0], numbers[1]]\n  closest_distance = (numbers[1] - numbers[0]).abs\n  numbers.each_with_index do |number, index|\n    next if index == 0\n    if (number - numbers[index - 1]).abs < closest_distance\n      closest_distance = (number - numbers[index - 1]).abs\n      closest_pair = [numbers[index - 1], number]\n    end\n  end\n  closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpa7im_tgm\nStarted\n.\nFinished in 0.000472478 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2116.50 tests/s, 10582.50 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799080
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_pair = [numbers[0], numbers[1]]\n  closest_distance = (numbers[1] - numbers[0]).abs\n  numbers.each_with_index do |num, index|\n    next if index == 0\n    if (num - numbers[index - 1]).abs < closest_distance\n      closest_pair = [numbers[index - 1], num]\n      closest_distance = (num - numbers[index - 1]).abs\n    end\n  end\n  closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp0js923l_\nStarted\n.\nFinished in 0.000489236 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2044.00 tests/s, 10220.02 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799080
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  # TODO: return the two numbers that are closest to each other\n  numbers.sort!\n  closest_elements = []\n  closest_difference = numbers[1] - numbers[0]\n  numbers.each_with_index do |number, index|\n    if index < numbers.length - 1\n      difference = numbers[index + 1] - number\n      if difference < closest_difference\n        closest_difference = difference\n        closest_elements = [number, numbers[index + 1]]\n      end\n    end\n  end\n  closest_elements\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpwlkeu5t1\nStarted\n.\nFinished in 0.000510628 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1958.37 tests/s, 9791.86 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799081
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_diff = numbers[1] - numbers[0]\n  closest_numbers = [numbers[0], numbers[1]]\n  numbers.each_with_index do |number, index|\n    next if index == 0\n    diff = number - numbers[index - 1]\n    if diff < closest_diff\n      closest_diff = diff\n      closest_numbers = [numbers[index - 1], number]\n    end\n  end\n  closest_numbers\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp4chm6d6n\nStarted\n.\nFinished in 0.00049723 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2011.14 tests/s, 10055.71 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799081
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  # TODO: return the two closest elements in the array\n  numbers.sort!\n  min = numbers[1] - numbers[0]\n  result = [numbers[0], numbers[1]]\n  numbers.each_with_index do |number, index|\n    if index < numbers.length - 1\n      if numbers[index + 1] - number < min\n        min = numbers[index + 1] - number\n        result = [number, numbers[index + 1]]\n      end\n    end\n  end\n  result\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpy6qe3ea9\nStarted\n.\nFinished in 0.000428411 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2334.21 tests/s, 11671.04 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799081
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_diff = numbers[1] - numbers[0]\n  closest_pair = [numbers[0], numbers[1]]\n  for i in 0..numbers.length-2\n    if numbers[i+1] - numbers[i] < closest_diff\n      closest_diff = numbers[i+1] - numbers[i]\n      closest_pair = [numbers[i], numbers[i+1]]\n    end\n  end\n  return closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpciu5g4hm\nStarted\n.\nFinished in 0.000459518 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2176.19 tests/s, 10880.97 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799080
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  # TODO: Return the two numbers that are closest to each other\n  numbers.sort!\n  closest_pair = [numbers[0], numbers[1]]\n  closest_distance = (numbers[1] - numbers[0]).abs\n  numbers.each_with_index do |number, index|\n    next if index == 0\n    if (number - numbers[index - 1]).abs < closest_distance\n      closest_pair = [numbers[index - 1], number]\n      closest_distance = (number - numbers[index - 1]).abs\n    end\n  end\n  closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpo7wohane\nStarted\n.\nFinished in 0.000410102 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2438.42 tests/s, 12192.09 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799081
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_pair = [numbers[0], numbers[1]]\n  closest_difference = numbers[1] - numbers[0]\n  numbers.each_with_index do |number, index|\n    next if index == 0\n    difference = numbers[index] - numbers[index - 1]\n    if difference < closest_difference\n      closest_pair = [numbers[index - 1], numbers[index]]\n      closest_difference = difference\n    end\n  end\n  closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp7s1o8d5z\nStarted\n.\nFinished in 0.000469805 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2128.54 tests/s, 10642.71 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799080
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_pair = [numbers[0], numbers[1]]\n  closest_difference = (numbers[1] - numbers[0]).abs\n  numbers.each_with_index do |number, index|\n    next if index == 0\n    difference = (numbers[index] - numbers[index - 1]).abs\n    if difference < closest_difference\n      closest_pair = [numbers[index - 1], numbers[index]]\n      closest_difference = difference\n    end\n  end\n  closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpqf144fbg\nStarted\n.\nFinished in 0.000465245 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2149.41 tests/s, 10747.03 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799080
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_diff = numbers[1] - numbers[0]\n  closest_pair = [numbers[0], numbers[1]]\n  numbers.each_with_index do |num, index|\n    next if index == 0\n    diff = num - numbers[index - 1]\n    if diff < closest_diff\n      closest_diff = diff\n      closest_pair = [numbers[index - 1], num]\n    end\n  end\n  closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpi7nv8lty\nStarted\n.\nFinished in 0.000456995 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2188.21 tests/s, 10941.04 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799080
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_pair = [numbers[0], numbers[1]]\n  closest_distance = (numbers[1] - numbers[0]).abs\n  numbers.each_with_index do |num, i|\n    next if i == 0\n    if (num - numbers[i - 1]).abs < closest_distance\n      closest_pair = [numbers[i - 1], num]\n      closest_distance = (num - numbers[i - 1]).abs\n    end\n  end\n  closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmphv3x_yzc\nStarted\n.\nFinished in 0.000485541 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2059.56 tests/s, 10297.79 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799080
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_pair = [numbers[0], numbers[1]]\n  closest_difference = (numbers[1] - numbers[0]).abs\n  numbers.each_with_index do |number, index|\n    next if index == 0\n    difference = (numbers[index] - numbers[index - 1]).abs\n    if difference < closest_difference\n      closest_pair = [numbers[index - 1], numbers[index]]\n      closest_difference = difference\n    end\n  end\n  closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpqf144fbg\nStarted\n.\nFinished in 0.000465245 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2149.41 tests/s, 10747.03 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799080
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_diff = numbers[1] - numbers[0]\n  closest_pair = [numbers[0], numbers[1]]\n  numbers.each_with_index do |number, index|\n    next if index == numbers.length - 1\n    diff = numbers[index + 1] - number\n    if diff < closest_diff\n      closest_diff = diff\n      closest_pair = [number, numbers[index + 1]]\n    end\n  end\n  closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpxl5ccq1g\nStarted\n.\nFinished in 0.000418917 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2387.11 tests/s, 11935.54 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799081
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_pair = [numbers[0], numbers[1]]\n  closest_difference = numbers[1] - numbers[0]\n  numbers.each_with_index do |number, index|\n    next if index == 0\n    difference = number - numbers[index - 1]\n    if difference < closest_difference\n      closest_pair = [numbers[index - 1], number]\n      closest_difference = difference\n    end\n  end\n  closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp4556mno6\nStarted\n.\nFinished in 0.000448348 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2230.41 tests/s, 11152.05 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799080
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_pair = [numbers[0], numbers[1]]\n  closest_difference = (numbers[1] - numbers[0]).abs\n  numbers.each_with_index do |number, index|\n    next if index == 0\n    difference = (numbers[index] - numbers[index - 1]).abs\n    if difference < closest_difference\n      closest_pair = [numbers[index - 1], numbers[index]]\n      closest_difference = difference\n    end\n  end\n  closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpqf144fbg\nStarted\n.\nFinished in 0.000465245 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2149.41 tests/s, 10747.03 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799080
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_pair = [numbers[0], numbers[1]]\n  closest_difference = numbers[1] - numbers[0]\n  numbers.each_with_index do |number, index|\n    next if index == 0\n    difference = number - numbers[index - 1]\n    if difference < closest_difference\n      closest_pair = [numbers[index - 1], number]\n      closest_difference = difference\n    end\n  end\n  closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp4556mno6\nStarted\n.\nFinished in 0.000448348 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2230.41 tests/s, 11152.05 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799080
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_distance = numbers[1] - numbers[0]\n  closest_elements = [numbers[0], numbers[1]]\n  for i in 0..numbers.length-2\n    if numbers[i+1] - numbers[i] < closest_distance\n      closest_distance = numbers[i+1] - numbers[i]\n      closest_elements = [numbers[i], numbers[i+1]]\n    end\n  end\n  return closest_elements\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpn_np73p0\nStarted\n.\nFinished in 0.0004492 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2226.18 tests/s, 11130.90 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799081
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_diff = numbers[1] - numbers[0]\n  closest_pair = [numbers[0], numbers[1]]\n  numbers.each_with_index do |num, i|\n    next if i == 0\n    if (num - numbers[i - 1]) < closest_diff\n      closest_diff = num - numbers[i - 1]\n      closest_pair = [numbers[i - 1], num]\n    end\n  end\n  closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpsg0_ofyc\nStarted\n.\nFinished in 0.000464437 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2153.14 tests/s, 10765.72 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799080
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_diff = numbers[1] - numbers[0]\n  closest_pair = [numbers[0], numbers[1]]\n  numbers.each_with_index do |num, i|\n    next if i == numbers.length - 1\n    diff = numbers[i + 1] - num\n    if diff < closest_diff\n      closest_diff = diff\n      closest_pair = [num, numbers[i + 1]]\n    end\n  end\n  closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp8qw57an8\nStarted\n.\nFinished in 0.000458637 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2180.37 tests/s, 10901.87 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799080
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  # TODO: return the two numbers that are closest to each other\n  numbers.sort!\n  closest_diff = numbers[1] - numbers[0]\n  closest_elements = [numbers[0], numbers[1]]\n  numbers.each_with_index do |number, index|\n    next if index == 0\n    if (number - numbers[index - 1]) < closest_diff\n      closest_diff = number - numbers[index - 1]\n      closest_elements = [numbers[index - 1], number]\n    end\n  end\n  closest_elements\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp3c_kxgdz\nStarted\n.\nFinished in 0.000425312 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2351.22 tests/s, 11756.08 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799081
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_pair = [numbers[0], numbers[1]]\n  closest_difference = (numbers[1] - numbers[0]).abs\n  numbers.each_with_index do |number, index|\n    next if index == 0\n    difference = (numbers[index] - numbers[index - 1]).abs\n    if difference < closest_difference\n      closest_pair = [numbers[index - 1], numbers[index]]\n      closest_difference = difference\n    end\n  end\n  closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpqf144fbg\nStarted\n.\nFinished in 0.000465245 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2149.41 tests/s, 10747.03 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799080
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_elements = [numbers[0], numbers[1]]\n  closest_difference = numbers[1] - numbers[0]\n  numbers.each_with_index do |number, index|\n    next if index == 0\n    difference = number - numbers[index - 1]\n    if difference < closest_difference\n      closest_difference = difference\n      closest_elements = [numbers[index - 1], number]\n    end\n  end\n  closest_elements\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmptmsqv3o1\nStarted\n.\nFinished in 0.000447999 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2232.15 tests/s, 11160.74 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799080
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_pair = [numbers[0], numbers[1]]\n  closest_distance = numbers[1] - numbers[0]\n  numbers.each_with_index do |number, index|\n    next if index == 0\n    if (number - numbers[index - 1]) < closest_distance\n      closest_pair = [numbers[index - 1], number]\n      closest_distance = number - numbers[index - 1]\n    end\n  end\n  closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpwmo58zw4\nStarted\n.\nFinished in 0.000435464 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2296.40 tests/s, 11482.01 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799080
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_diff = numbers[1] - numbers[0]\n  closest_pair = [numbers[0], numbers[1]]\n  numbers.each_with_index do |num, index|\n    next if index == 0\n    diff = num - numbers[index - 1]\n    if diff < closest_diff\n      closest_diff = diff\n      closest_pair = [numbers[index - 1], num]\n    end\n  end\n  closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpi7nv8lty\nStarted\n.\nFinished in 0.000456995 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2188.21 tests/s, 10941.04 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799080
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_pair = [numbers[0], numbers[1]]\n  closest_difference = numbers[1] - numbers[0]\n  numbers.each_with_index do |number, index|\n    next if index == 0\n    difference = numbers[index] - numbers[index - 1]\n    if difference < closest_difference\n      closest_pair = [numbers[index - 1], numbers[index]]\n      closest_difference = difference\n    end\n  end\n  closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp7s1o8d5z\nStarted\n.\nFinished in 0.000469805 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2128.54 tests/s, 10642.71 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799080
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_pair = [numbers[0], numbers[1]]\n  closest_difference = numbers[1] - numbers[0]\n  numbers.each_with_index do |number, index|\n    next if index == 0\n    difference = numbers[index] - numbers[index - 1]\n    if difference < closest_difference\n      closest_pair = [numbers[index - 1], numbers[index]]\n      closest_difference = difference\n    end\n  end\n  closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmp7s1o8d5z\nStarted\n.\nFinished in 0.000469805 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2128.54 tests/s, 10642.71 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799080
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_elements = [numbers[0], numbers[1]]\n  closest_difference = numbers[1] - numbers[0]\n  numbers.each_with_index do |number, index|\n    next if index == 0\n    difference = number - numbers[index - 1]\n    if difference < closest_difference\n      closest_difference = difference\n      closest_elements = [numbers[index - 1], number]\n    end\n  end\n  closest_elements\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmptmsqv3o1\nStarted\n.\nFinished in 0.000447999 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2232.15 tests/s, 11160.74 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799080
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_pair = [numbers[0], numbers[1]]\n  closest_distance = numbers[1] - numbers[0]\n  numbers.each_with_index do |number, index|\n    next if index == 0\n    if (number - numbers[index - 1]) < closest_distance\n      closest_pair = [numbers[index - 1], number]\n      closest_distance = number - numbers[index - 1]\n    end\n  end\n  closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpwmo58zw4\nStarted\n.\nFinished in 0.000435464 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2296.40 tests/s, 11482.01 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799080
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_pair = [numbers[0], numbers[1]]\n  closest_difference = numbers[1] - numbers[0]\n  numbers.each_with_index do |n, i|\n    next if i == 0\n    difference = n - numbers[i - 1]\n    if difference < closest_difference\n      closest_pair = [numbers[i - 1], n]\n      closest_difference = difference\n    end\n  end\n  closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpovombu8h\nStarted\n.\nFinished in 0.000420688 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2377.06 tests/s, 11885.29 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799081
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_pair = [numbers[0], numbers[1]]\n  closest_pair_distance = numbers[1] - numbers[0]\n  numbers.each_with_index do |number, index|\n    next if index == 0\n    if (number - numbers[index - 1]) < closest_pair_distance\n      closest_pair = [numbers[index - 1], number]\n      closest_pair_distance = number - numbers[index - 1]\n    end\n  end\n  closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpg4fdfgr8\nStarted\n.\nFinished in 0.000407122 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2456.27 tests/s, 12281.33 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799081
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_pair = [numbers[0], numbers[1]]\n  closest_difference = numbers[1] - numbers[0]\n  (0..numbers.length - 2).each do |i|\n    if numbers[i + 1] - numbers[i] < closest_difference\n      closest_pair = [numbers[i], numbers[i + 1]]\n      closest_difference = numbers[i + 1] - numbers[i]\n    end\n  end\n  closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpi15g82b9\nStarted\n.\nFinished in 0.000613928 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n1628.86 tests/s, 8144.28 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799081
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_diff = numbers[1] - numbers[0]\n  closest_pair = [numbers[0], numbers[1]]\n  numbers.each_with_index do |num, index|\n    next if index == 0\n    diff = num - numbers[index - 1]\n    if diff < closest_diff\n      closest_diff = diff\n      closest_pair = [numbers[index - 1], num]\n    end\n  end\n  closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpi7nv8lty\nStarted\n.\nFinished in 0.000456995 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2188.21 tests/s, 10941.04 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799080
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_elements = [numbers[0], numbers[1]]\n  closest_difference = numbers[1] - numbers[0]\n  numbers.each_with_index do |num, index|\n    next if index == 0\n    if (num - numbers[index - 1]) < closest_difference\n      closest_elements = [numbers[index - 1], num]\n      closest_difference = num - numbers[index - 1]\n    end\n  end\n  closest_elements\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpyj4q_ufx\nStarted\n.\nFinished in 0.000423436 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2361.63 tests/s, 11808.16 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799081
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_diff = numbers[1] - numbers[0]\n  closest_pair = [numbers[0], numbers[1]]\n  numbers.each_with_index do |number, index|\n    next if index == 0\n    if (number - numbers[index - 1]) < closest_diff\n      closest_diff = number - numbers[index - 1]\n      closest_pair = [numbers[index - 1], number]\n    end\n  end\n  closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpmqe16v6r\nStarted\n.\nFinished in 0.000453738 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2203.92 tests/s, 11019.58 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799080
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_diff = numbers[1] - numbers[0]\n  closest_pair = [numbers[0], numbers[1]]\n  (1..numbers.length - 1).each do |i|\n    diff = numbers[i] - numbers[i - 1]\n    if diff < closest_diff\n      closest_diff = diff\n      closest_pair = [numbers[i - 1], numbers[i]]\n    end\n  end\n  closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpt70bzett\nStarted\n.\nFinished in 0.000444881 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2247.79 tests/s, 11238.96 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799081
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_pair = [numbers[0], numbers[1]]\n  closest_difference = (numbers[1] - numbers[0]).abs\n  numbers.each_with_index do |num, index|\n    next if index == 0\n    difference = (num - numbers[index - 1]).abs\n    if difference < closest_difference\n      closest_pair = [numbers[index - 1], num]\n      closest_difference = difference\n    end\n  end\n  closest_pair\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmpjhfzn_sb\nStarted\n.\nFinished in 0.000450733 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2218.61 tests/s, 11093.04 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799080
    },
    {
      "exit_code": 0,
      "program": "# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\ndef find_closest_elements(numbers)\n  numbers.sort!\n  closest_elements = [numbers[0], numbers[1]]\n  closest_difference = numbers[1] - numbers[0]\n  numbers.each_with_index do |number, index|\n    next if index == 0\n    difference = number - numbers[index - 1]\n    if difference < closest_difference\n      closest_difference = difference\n      closest_elements = [numbers[index - 1], number]\n    end\n  end\n  closest_elements\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_find_closest_elements\n    candidate = method(:find_closest_elements)\n    assert_equal([3.9, 4.0], candidate.call([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]))\n    assert_equal([5.0, 5.9], candidate.call([1.0, 2.0, 5.9, 4.0, 5.0]))\n    assert_equal([2.0, 2.2], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\n    assert_equal([2.0, 2.0], candidate.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))\n    assert_equal([2.2, 3.1], candidate.call([1.1, 2.2, 3.1, 4.1, 5.1]))\n  end\nend\n",
      "status": "OK",
      "stderr": "Loaded suite /tmp/tmptmsqv3o1\nStarted\n.\nFinished in 0.000447999 seconds.\n-------------------------------------------------------------------------------\n1 tests, 5 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n100% passed\n-------------------------------------------------------------------------------\n2232.15 tests/s, 11160.74 assertions/s\n",
      "stdout": "",
      "timestamp": 1659799080
    }
  ]
}