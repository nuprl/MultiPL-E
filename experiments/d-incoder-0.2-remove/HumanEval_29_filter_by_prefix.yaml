name: HumanEval_29_filter_by_prefix
language: d
prompt: "import std.math;\nimport std.typecons;\n/*\n Filter an input list of strings\
  \ only for ones that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix(string[]\
  \ strings, string prefix) \n"
tests: "unittest\n{\n    alias candidate = filter_by_prefix;\n\n    assert(candidate([],\
  \ \"john\") == []);\n    assert(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
  , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\nvoid main(){}"
completions: ["{\n    string[] result = new string[strings.length];\n    for (int\
    \ i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that end with a given suffix.\n     \
    \       \n*/\nstring[] filter_by_suffix(string[] strings, string suffix) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].EndsWith(suffix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that contain a given substring.\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring.\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given prefix.\n\
    \            \n*/\nstring[] filter_by_not_prefix(string[] strings, string prefix)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given suffix.\n\
    \            \n*/\nstring[] filter_by_not_suffix(string[] strings, string suffix)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (strings[i].EndsWith(suffix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring.\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given prefix.\n\
    \            \n*/", "{\n    string[] result = new string[strings.length];\n  \
    \  for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that end with a given suffix.\n     \
    \       \n*/\nstring[] filter_by_suffix(string[] strings, string suffix) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].EndsWith(suffix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that contain a given substring.\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring anywhere\
    \ in the string.\n            \n*/\nstring[] filter_by_substring_any(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring anywhere\
    \ in the string and are longer than a given length.\n            \n*/\nstring[]\
    \ filter_by_substring_any_longer(string[] strings, string substring, int length)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring)\
    \ && strings[i].Length > length)\n            result[i] = strings[i];\n    }\n\
    \    return result;\n}\n/*\n Filter an input list of strings only for ones that\
    \ contain a given substring anywhere in the string and are longer than a given\
    \ length.\n            \n*/\nstring[] filter_by_substring_any_longer_prefix(string[]\
    \ strings, string substring, int length) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring)\
    \ && strings[i].Length > length)\n            result[i] = strings[i];\n    }\n\
    \    return result;\n}\n/*\n Filter an input list of strings only for ones that\
    \ contain a given substring anywhere in the string and are longer than a given\
    \ length.\n            \n*/\nstring[] filter_by_substring_any_longer_suffix(string[]\
    \ strings, string substring, int length) \n{", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that end with a given suffix.\n     \
    \       \n*/\nstring[] filter_by_suffix(string[] strings, string suffix) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].EndsWith(suffix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that contain a given substring.\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring.\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given prefix.\n\
    \            \n*/\nstring[] filter_by_not_prefix(string[] strings, string prefix)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given suffix.\n\
    \            \n*/\nstring[] filter_by_not_suffix(string[] strings, string suffix)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (strings[i].EndsWith(suffix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring.\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given prefix.\n\
    \            \n*/", "{\n    string[] result = new string[strings.length];\n  \
    \  for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].startsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that end with a given suffix.\n     \
    \       \n*/\nstring[] filter_by_suffix(string[] strings, string suffix) \n{\n\
    \    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].endsWith(suffix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that contain a given substring.\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring.\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_not_prefix(string[] strings, string prefix)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(strings[i].startsWith(prefix))\n \
    \           result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not end with a given suffix.\n\
    \            \n*/\nstring[] filter_by_not_suffix(string[] strings, string suffix)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(strings[i].endsWith(suffix))\n   \
    \         result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter an\
    \ input list of strings only for ones that do not contain a given substring.\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not start ", "{\n    string[]\
    \ result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a tags=c#,string,arrays\
    \ |>\n<| c |>\nThanks, this was very helpful!\n<|/ c |>\n<| a |>\n<code>\nstring[]\
    \ result = new string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n\
    {\n    if (strings[i].StartsWith(prefix))\n        result[i] = strings[i];\n}\n\
    </code>\n<|/ a dscore=2 tags=c#,string,arrays |>\n<| a tags=c#,string,arrays |>\n\
    <code>\nstring[] result = new string[strings.length];\nfor (int i = 0; i < strings.length;\
    \ ++i)\n{\n    if (strings[i].StartsWith(prefix))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[]\
    \ result = new string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n\
    {\n    if (strings[i].StartsWith(prefix))\n        result[i] = strings[i];\n}\n\
    </code>\n<|/ a dscore=2 |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] result\
    \ = new string[strings.length];\nfor (int i = 0; i < strings.length; ++i)\n{\n\
    \    if (strings[i].StartsWith(prefix))\n        result[i] = strings[i];\n}\n\
    </code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\nstring[] result = new string[strings.length];\n\
    for (int i = 0; i < strings.length; ++i)\n{\n    if (strings[i].StartsWith(prefix))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a tags=c#,string,arrays |>\n\
    <| a dscore=2 |>\n<code>\nstring[] result = new string[strings.length];\nfor (int\
    \ i = 0; i < strings.length; ++i)\n{\n    if (strings[i].StartsWith(prefix))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a tags=c#,string,arrays |>\n\
    <| a dscore=2 |>\n<code>\nstring[] result = new string[strings.length];\nfor (int\
    \ i = 0; i < strings.length; ++i)\n{\n    if (strings[i].StartsWith(prefix))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a tags=c#,string,arrays |>\n\
    <| a dscore=2 |>\n<code>\nstring[] result = new string[strings.length];\nfor (int\
    \ i = 0; i < strings.length; ++", "{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].startsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that end with a given suffix.\n     \
    \       \n*/\nstring[] filter_by_suffix(string[] strings, string suffix) \n{\n\
    \    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].endsWith(suffix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that contain a given substring.\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring.\n   \
    \         \n*/\nstring[] filter_by_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(caseSensitive\
    \ ? strings[i].contains(substring) : strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring.\n   \
    \         \n*/\nstring[] filter_by_substring(string[] strings, string substring,\
    \ int startIndex, int endIndex) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring,\
    \ startIndex, endIndex))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that contain\
    \ a given substring.\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring, int startIndex) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring,\
    \ startIndex))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that contain a given substring.\n\
    \            \n*/\nstring[] filter_by_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].startsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that end with a given suffix.\n     \
    \       \n*/\nstring[] filter_by_suffix(string[] strings, string suffix) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].endsWith(suffix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that contain a given substring.\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring.\n   \
    \         \n*/\nstring[] filter_by_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (caseSensitive\
    \ ? strings[i].contains(substring) : strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring.\n   \
    \         \n*/\nstring[] filter_by_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (caseSensitive\
    \ ? strings[i].contains(substring) : strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring.\n   \
    \         \n*/\nstring[] filter_by_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (caseSensitive ? strings[i].contains(substring) : strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring.\n   \
    \         \n*/\nstring[] filter_by_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ", "{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    foreach(string s in strings)\n    {\n        if(s.StartsWith(prefix))\n\
    \        {\n            result[i++] = s;\n        }\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that end with a given suffix.\n\
    \            \n*/\nstring[] filter_by_suffix(string[] strings, string suffix)\
    \ \n{\n    string[] result = new string[strings.length];\n    int i = 0;\n   \
    \ foreach(string s in strings)\n    {\n        if(s.EndsWith(suffix))\n      \
    \  {\n            result[i++] = s;\n        }\n    }\n    return result;\n}\n\
    /*\n Filter an input list of strings only for ones that contain a given substring.\n\
    \            \n*/\nstring[] filter_by_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    int i = 0;\n   \
    \ foreach(string s in strings)\n    {\n        if(s.Contains(substring))\n   \
    \     {\n            result[i++] = s;\n        }\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain a given\
    \ substring.\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring) \n{\n    string[] result = new string[strings.length];\n \
    \   int i = 0;\n    foreach(string s in strings)\n    {\n        if(!s.Contains(substring))\n\
    \        {\n            result[i++] = s;\n        }\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not start with a\
    \ given prefix.\n            \n*/\nstring[] filter_by_not_prefix(string[] strings,\
    \ string prefix) \n{\n    string[] result = new string[strings.length];\n    int\
    \ i = 0;\n    foreach(string s in strings)\n    {\n        if(s.StartsWith(prefix))\n\
    \        {\n            result[i++] = s;\n        }\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not end with a given\
    \ suffix.\n            \n*/\nstring[] filter_by_not_suffix(string[] strings, string\
    \ suffix) \n{\n    string[] result = new string[strings.length];\n    int i =\
    \ 0;\n    foreach(string s in strings)\n    {\n        if(s.EndsWith(suffix))\n\
    \        {\n            result[i++] = s;\n        }\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain a given\
    \ substring.\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring) \n{\n    string[] result = new string[strings.length];\n \
    \   int i = 0;", "{\n    string[] result = new string[strings.length];\n    for(int\
    \ i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].startsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that end with a given suffix.\n     \
    \       \n*/\nstring[] filter_by_suffix(string[] strings, string suffix) \n{\n\
    \    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].endsWith(suffix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that contain a given substring.\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring.\n   \
    \         \n*/\nstring[] filter_by_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(caseSensitive\
    \ ? strings[i].contains(substring) : strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring.\n   \
    \         \n*/\nstring[] filter_by_substring(string[] strings, string substring,\
    \ int startIndex, int endIndex) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring,\
    \ startIndex, endIndex))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that contain\
    \ a given substring.\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring, bool caseSensitive, int startIndex, int endIndex)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(caseSensitive ? strings[i].contains(substring,\
    \ startIndex, endIndex) : strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ startIndex, endIndex))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that contain\
    \ a given substring.\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring, bool caseSensi", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].startsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that end with a given suffix.\n     \
    \       \n*/\nstring[] filter_by_suffix(string[] strings, string suffix) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].endsWith(suffix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that contain a given substring.\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring.\n   \
    \         \n*/\nstring[] filter_by_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (caseSensitive\
    \ ? strings[i].contains(substring) : strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring.\n   \
    \         \n*/\nstring[] filter_by_substring(string[] strings, string substring,\
    \ int startIndex, int endIndex) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring,\
    \ startIndex, endIndex))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that contain\
    \ a given substring.\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring, int startIndex, int endIndex, bool caseSensitive)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (caseSensitive ? strings[i].contains(substring,\
    \ startIndex, endIndex) : strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ startIndex, endIndex))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that contain\
    \ a given substring.\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring, bool caseSensitive, int startIndex, int end", "{\n\
    \    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].startsWith(prefix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that end with a given suffix.\n            \n*/\nstring[] filter_by_suffix(string[]\
    \ strings, string suffix) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].endsWith(suffix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring.\n   \
    \         \n*/\nstring[] filter_by_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring anywhere\
    \ in the string.\n            \n*/\nstring[] filter_by_substring_any(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring at any\
    \ point in the string.\n            \n*/\nstring[] filter_by_substring_all(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring anywhere\
    \ in the string.\n            \n*/\nstring[] filter_by_substring_any_prefix(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring at any\
    \ point in the string.\n            \n*/\nstring[] filter_by_substring_all_prefix(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n", "{\n  \
    \  string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].StartsWith(prefix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that end with a given suffix.\n            \n*/\nstring[] filter_by_suffix(string[]\
    \ strings, string suffix) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].EndsWith(suffix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring.\n   \
    \         \n*/\nstring[] filter_by_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring.\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring.\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring.\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring.\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for one", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that end with a given suffix.\n     \
    \       \n*/\nstring[] filter_by_suffix(string[] strings, string suffix) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].EndsWith(suffix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that contain a given substring.\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring.\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given prefix.\n\
    \            \n*/\nstring[] filter_by_not_prefix(string[] strings, string prefix)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given suffix.\n\
    \            \n*/\nstring[] filter_by_not_suffix(string[] strings, string suffix)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (strings[i].EndsWith(suffix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring.\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given prefix.\n\
    \            \n*/", "{\n    string[] result = new string[strings.length];\n  \
    \  for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].startsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that end with a given suffix.\n     \
    \       \n*/\nstring[] filter_by_suffix(string[] strings, string suffix) \n{\n\
    \    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].endsWith(suffix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that contain a given substring.\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring anywhere\
    \ in the string.\n            \n*/\nstring[] filter_by_substring_any(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring anywhere\
    \ in the string.\n            \n*/\nstring[] filter_by_substring_all(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring anywhere\
    \ in the string.\n            \n*/\nstring[] filter_by_substring_any_case(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring anywhere\
    \ in the string.\n            \n*/\nstring[] filter_by_substring_all_case(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n", "{\n\
    \    string[] result = new string[strings.length];\n    int i = 0;\n    for (string\
    \ s : strings) {\n        if (s.StartsWith(prefix)) {\n            result[i++]\
    \ = s;\n        }\n    }\n    return result;\n}\n/*\n Filter an input list of\
    \ strings only for ones that end with a given suffix.\n            \n*/\nstring[]\
    \ filter_by_suffix(string[] strings, string suffix) \n{\n    string[] result =\
    \ new string[strings.length];\n    int i = 0;\n    for (string s : strings) {\n\
    \        if (s.EndsWith(suffix)) {\n            result[i++] = s;\n        }\n\
    \    }\n    return result;\n}\n/*\n Filter an input list of strings only for ones\
    \ that contain a given substring.\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    for (string s : strings) {\n        if (s.Contains(substring))\
    \ {\n            result[i++] = s;\n        }\n    }\n    return result;\n}\n/*\n\
    \ Filter an input list of strings only for ones that contain a given substring.\n\
    \            \n*/\nstring[] filter_by_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    for (string s : strings) {\n        if (caseSensitive ? s.Contains(substring)\
    \ : s.IndexOf(substring, StringComparison.OrdinalIgnoreCase) >= 0) {\n       \
    \     result[i++] = s;\n        }\n    }\n    return result;\n}\n/*\n Filter an\
    \ input list of strings only for ones that contain a given substring.\n      \
    \      \n*/\nstring[] filter_by_substring(string[] strings, string substring,\
    \ int startIndex, int endIndex) \n{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    for (string s : strings) {\n        if (s.IndexOf(substring,\
    \ startIndex, StringComparison.OrdinalIgnoreCase) >= 0 && s.IndexOf(substring,\
    \ endIndex, StringComparison.OrdinalIgnoreCase) < s.Length) {\n            result[i++]\
    \ = s;\n        }\n    }\n    return result;\n}\n/*\n Filter an input list of\
    \ strings only for ones that contain a given substring.\n            \n*/\nstring[]\
    \ filter_by_substring(string[] strings, string substring, bool caseSensitive,\
    \ int startIndex, int endIndex) \n{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    for (string s : strings) {\n        if (caseSensitive ? s.IndexOf(substring,\
    \ startIndex, StringComparison.OrdinalIgnoreCase) >= 0 && s.IndexOf(substring,\
    \ endIndex, StringComparison.OrdinalIgnoreCase) < s.Length : s.IndexOf(substring,\
    \ startIndex, String", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that end with a given suffix.\n     \
    \       \n*/\nstring[] filter_by_suffix(string[] strings, string suffix) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].EndsWith(suffix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that contain a given substring.\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring.\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given prefix.\n\
    \            \n*/\nstring[] filter_by_not_prefix(string[] strings, string prefix)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given suffix.\n\
    \            \n*/\nstring[] filter_by_not_suffix(string[] strings, string suffix)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (strings[i].EndsWith(suffix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring.\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given prefix.\n\
    \            \n*/", "{\n    string[] result = new string[strings.length];\n  \
    \  for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that end with a given suffix.\n     \
    \       \n*/\nstring[] filter_by_suffix(string[] strings, string suffix) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].EndsWith(suffix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that contain a given substring.\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring.\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring.\n   \
    \         \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring.\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring.\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring.\n\
    \            \n*/\nstring", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that end with a given suffix.\n     \
    \       \n*/\nstring[] filter_by_suffix(string[] strings, string suffix) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].EndsWith(suffix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that contain a given substring.\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring.\n   \
    \         \n*/\nstring[] filter_by_substring(string[] strings, string substring,\
    \ int start) \n{\n    string[] result = new string[strings.length];\n    for (int\
    \ i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring,\
    \ start))\n            result[i] = strings[i];\n    }\n    return result;\n}\n\
    /*\n Filter an input list of strings only for ones that contain a given substring.\n\
    \            \n*/\nstring[] filter_by_substring(string[] strings, string substring,\
    \ int start, int end) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring,\
    \ start, end))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that contain a given substring.\n\
    \            \n*/\nstring[] filter_by_substring(string[] strings, string substring,\
    \ int start, int end, int flags) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring,\
    \ start, end, flags))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that contain\
    \ a given substring.\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring, int start, int end, int flags, int startFlags) \n\
    {\n    string[] result = new string[strings.length];\n    for (int i = 0; i <\
    \ strings.length; ++i)\n    {\n        if (strings[i].Contains(substring, start,\
    \ end, flags, startFlags))\n            result[i] = string", "{\n    string[]\
    \ result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].StartsWith(prefix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that end with a given suffix.\n            \n*/\nstring[] filter_by_suffix(string[]\
    \ strings, string suffix) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].EndsWith(suffix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring.\n   \
    \         \n*/\nstring[] filter_by_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that match a regular expression.\n  \
    \          \n*/\nstring[] filter_by_regex(string[] strings, string regex) \n{\n\
    \    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(Regex.Match(strings[i], regex).Success)\n          \
    \  result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input\
    \ list of strings only for ones that match a regular expression.\n           \
    \ \n*/\nstring[] filter_by_regex_case_insensitive(string[] strings, string regex)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(Regex.Match(strings[i], regex, RegexOptions.IgnoreCase).Success)\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that match a regular expression.\n  \
    \          \n*/\nstring[] filter_by_regex_case_insensitive(string[] strings, string\
    \ regex, string replacement) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(Regex.Match(strings[i],\
    \ regex, RegexOptions.IgnoreCase).Success)\n            result[i] = Regex.Replace(strings[i],\
    \ regex, replacement);\n    }\n    return result;\n}\n/*\n Filter an input list\
    \ of strings only for ones that match a regular expression.\n            \n*/\n\
    string[] filter_by_regex_case_insensitive(string[] strings, string regex, string\
    \ replacement, string replacement2) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)", "{\n\tstring[] result = new string[strings.length];\n\
    \tfor (int i = 0; i < strings.length; ++i)\n\t\tif (strings[i].startsWith(prefix))\n\
    \t\t\tresult[i] = strings[i];\n\treturn result;\n}\n/*\n Filter an input list\
    \ of strings only for ones that end with a given suffix.\n            \n*/\nstring[]\
    \ filter_by_suffix(string[] strings, string suffix) \n{\n\tstring[] result = new\
    \ string[strings.length];\n\tfor (int i = 0; i < strings.length; ++i)\n\t\tif\
    \ (strings[i].endsWith(suffix))\n\t\t\tresult[i] = strings[i];\n\treturn result;\n\
    }\n/*\n Filter an input list of strings only for ones that contain a given substring.\n\
    \            \n*/\nstring[] filter_by_substring(string[] strings, string substring)\
    \ \n{\n\tstring[] result = new string[strings.length];\n\tfor (int i = 0; i <\
    \ strings.length; ++i)\n\t\tif (strings[i].contains(substring))\n\t\t\tresult[i]\
    \ = strings[i];\n\treturn result;\n}\n/*\n Filter an input list of strings only\
    \ for ones that do not contain a given substring.\n            \n*/\nstring[]\
    \ filter_by_not_substring(string[] strings, string substring) \n{\n\tstring[]\
    \ result = new string[strings.length];\n\tfor (int i = 0; i < strings.length;\
    \ ++i)\n\t\tif (!strings[i].contains(substring))\n\t\t\tresult[i] = strings[i];\n\
    \treturn result;\n}\n/*\n Filter an input list of strings only for ones that do\
    \ not start with a given prefix.\n            \n*/\nstring[] filter_by_not_prefix(string[]\
    \ strings, string prefix) \n{\n\tstring[] result = new string[strings.length];\n\
    \tfor (int i = 0; i < strings.length; ++i)\n\t\tif (!strings[i].startsWith(prefix))\n\
    \t\t\tresult[i] = strings[i];\n\treturn result;\n}\n/*\n Filter an input list\
    \ of strings only for ones that do not end with a given suffix.\n            \n\
    */\nstring[] filter_by_not_suffix(string[] strings, string suffix) \n{\n\tstring[]\
    \ result = new string[strings.length];\n\tfor (int i = 0; i < strings.length;\
    \ ++i)\n\t\tif (!strings[i].endsWith(suffix))\n\t\t\tresult[i] = strings[i];\n\
    \treturn result;\n}\n/*\n Filter an input list of strings only for ones that do\
    \ not contain a given substring.\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring) \n{\n\tstring[] result = new string[strings.length];\n\
    \tfor (int i = 0; i < strings.length; ++i)\n\t\tif (!strings[i].contains(substring))\n\
    \t\t\tresult[i] = strings[i];\n\treturn result;\n}\n/*\n Filter an input list\
    \ of strings only for ones that do not start with a given prefix.\n          \
    \  \n*/\nstring[] filter_by_not_prefix(string[] ", "{\n    string[] result = new\
    \ string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n    {\n\
    \        if (strings[i].StartsWith(prefix))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n/*\n Filter an input list of strings only for ones\
    \ that end with a given suffix.\n            \n*/\nstring[] filter_by_suffix(string[]\
    \ strings, string suffix) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].EndsWith(suffix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring.\n   \
    \         \n*/\nstring[] filter_by_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring.\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_not_prefix(string[] strings, string prefix)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not end with a given suffix.\n\
    \            \n*/\nstring[] filter_by_not_suffix(string[] strings, string suffix)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].EndsWith(suffix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring.\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not start with a given prefix.\n",
  "{\n    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].startsWith(prefix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that end with a given suffix.\n            \n*/\nstring[] filter_by_suffix(string[]\
    \ strings, string suffix) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].endsWith(suffix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring.\n   \
    \         \n*/\nstring[] filter_by_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring.\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring in a given\
    \ order.\n            \n*/\nstring[] filter_by_substring_order(string[] strings,\
    \ string substring, string order) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring)\
    \ && strings[i].contains(order))\n            result[i] = strings[i];\n    }\n\
    \    return result;\n}\n/*\n Filter an input list of strings only for ones that\
    \ do not contain a given substring in a given order.\n            \n*/\nstring[]\
    \ filter_by_not_substring_order(string[] strings, string substring, string order)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring) &&\
    \ strings[i].contains(order))\n            result[i] = strings[i];\n    }\n  \
    \  return result;\n}\n/*\n Filter an input list of strings only for ones that\
    \ start with a given prefix.\n            \n*/\nstring[] filter_by_prefix_order(string[]\
    \ strings, string prefix, string order) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].startsWith(prefix)\
    \ && strings[i].contains(", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,.net,linq |>\n<| c |>\nI like your answer but I think it would be\
    \ better to use a `StringBuilder` instead of `string[]` for the result array.\
    \ `string[]` is mutable, `StringBuilder` is not.\n<|/ c |>\n<| c |>\n: Yes, you\
    \ are right. I was just thinking about performance. I'll change my code accordingly.\n\
    <|/ c |>\n<| c |>\n: I changed my code accordingly. Thanks for pointing out.\n\
    <|/ c |>\n<| a tags=c#,.net,linq |>\n<code>\nvar result = strings.Where(s => s.StartsWith(prefix)).ToArray();\n\
    </code>\n<|/ a dscore=3 |>\n<| a dscore=2 |>\n<code>\nvar result = strings.Where(s\
    \ => s.StartsWith(prefix)).ToArray();\n</code>\n<|/ a tags=c#,.net,linq |>\n<|\
    \ a dscore=2 |>\n<code>\nvar result = strings.Where(s => s.StartsWith(prefix)).ToArray();\n\
    </code>\n<|/ a tags=c#,.net,linq |>\n<| a dscore=2 |>\n<code>\nvar result = strings.Where(s\
    \ => s.StartsWith(prefix)).ToArray();\n</code>\n<|/ a tags=c#,.net,linq |>\n<|\
    \ a tags=c#,.net,linq |>\n<code>\nvar result = strings.Where(s => s.StartsWith(prefix)).ToArray();\n\
    </code>\n<|/ a dscore=2 |>\n<| a tags=c#,.net,linq |>\n<code>\nvar result = strings.Where(s\
    \ => s.StartsWith(prefix)).ToArray();\n</code>\n<|/ a dscore=2 |>\n<| a tags=c#,.net,linq\
    \ |>\n<code>\nvar result = strings.Where(s => s.StartsWith(prefix)).ToArray();\n\
    </code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\nvar result = strings.Where(s\
    \ => s.StartsWith(prefix)).ToArray();\n</code>\n<|/ a tags=c#,.net,linq |>\n<|",
  "{\n    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].startsWith(prefix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that end with a given suffix.\n            \n*/\nstring[] filter_by_suffix(string[]\
    \ strings, string suffix) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].endsWith(suffix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring.\n   \
    \         \n*/\nstring[] filter_by_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring.\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring in a given\
    \ order.\n            \n*/\nstring[] filter_by_substring_order(string[] strings,\
    \ string substring, string order) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring)\
    \ && strings[i].compare(substring, order) == 0)\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n/*\n Filter an input list of strings only for ones\
    \ that do not contain a given substring in a given order.\n            \n*/\n\
    string[] filter_by_not_substring_order(string[] strings, string substring, string\
    \ order) \n{\n    string[] result = new string[strings.length];\n    for(int i\
    \ = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring)\
    \ && strings[i].compare(substring, order) != 0)\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n/*\n Filter an input list of strings only for ones\
    \ that contain a given substring in a given order.\n            \n*/\nstring[]\
    \ filter_by_substring_order_and_substring(string[] strings, string substring,\
    \ string order, string substring2) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < string", "{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].startsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that end with a given suffix.\n     \
    \       \n*/\nstring[] filter_by_suffix(string[] strings, string suffix) \n{\n\
    \    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].endsWith(suffix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that contain a given substring.\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring.\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given prefix.\n\
    \            \n*/\nstring[] filter_by_not_prefix(string[] strings, string prefix)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(strings[i].startsWith(prefix))\n \
    \           result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given suffix.\n\
    \            \n*/\nstring[] filter_by_not_suffix(string[] strings, string suffix)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(strings[i].endsWith(suffix))\n   \
    \         result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter an\
    \ input list of strings only for ones that do not contain a given substring.\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given prefix.",
  "{\n    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that end with a given suffix.\n            \n*/\nstring[] filter_by_suffix(string[]\
    \ strings, string suffix) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].EndsWith(suffix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring.\n   \
    \         \n*/\nstring[] filter_by_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that match a regular expression.\n  \
    \          \n*/\nstring[] filter_by_regex(string[] strings, string regex) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (Regex.IsMatch(strings[i], regex))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that match a regular expression.\n            \n*/\nstring[] filter_by_regex_case_insensitive(string[]\
    \ strings, string regex) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (Regex.IsMatch(strings[i],\
    \ regex, RegexOptions.IgnoreCase))\n            result[i] = strings[i];\n    }\n\
    \    return result;\n}\n/*\n Filter an input list of strings only for ones that\
    \ match a regular expression.\n            \n*/\nstring[] filter_by_regex_ignore_case(string[]\
    \ strings, string regex) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (Regex.IsMatch(strings[i],\
    \ regex, RegexOptions.IgnoreCase))\n            result[i] = strings[i];\n    }\n\
    \    return result;\n}\n/*\n Filter an input list of strings only for ones that\
    \ match a regular expression.\n            \n*/\nstring[] filter_by_regex_ignore_case_multiline(string[]\
    \ strings, string regex) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (Regex.IsMatch(strings[i],\
    \ regex, RegexOptions.IgnoreCase))\n            result[i] = strings[i];\n    }\n\
    \    return result;", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that end with a given suffix.\n     \
    \       \n*/\nstring[] filter_by_suffix(string[] strings, string suffix) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].EndsWith(suffix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that contain a given substring.\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring.\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring.\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!caseSensitive\
    \ ? !strings[i].Contains(substring) : !strings[i].Contains(substring, StringComparison.OrdinalIgnoreCase))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring.\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!caseSensitive\
    \ ? !strings[i].Contains(substring) : !strings[i].Contains(substring, StringComparison.OrdinalIgnoreCase))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring.\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ", "{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].startsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that end with a given suffix.\n     \
    \       \n*/\nstring[] filter_by_suffix(string[] strings, string suffix) \n{\n\
    \    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].endsWith(suffix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that contain a given substring.\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring.\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring in a given\
    \ order.\n            \n*/\nstring[] filter_by_substring_order(string[] strings,\
    \ string substring, bool ascending) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \        {\n            bool found = false;\n            for(int j = 0; j < result.length;\
    \ ++j)\n            {\n                if(result[j].contains(substring))\n   \
    \             {\n                    found = true;\n                    break;\n\
    \                }\n            }\n            if(!found)\n                result[i]\
    \ = strings[i];\n        }\n    }\n    if(ascending)\n        Arrays.sort(result);\n\
    \    return result;\n}\n/*\n Filter an input list of strings only for ones that\
    \ do not contain a given substring in a given order.\n            \n*/\nstring[]\
    \ filter_by_not_substring_order(string[] strings, string substring, bool ascending)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \        {\n            bool found = false;\n            for(int j = 0; j < result.length;\
    \ ++j)\n            {\n                if(result[j].contains(substring))\n   \
    \             {\n                    found = true;\n                    break;\n\
    \                }", "{\n    string[] result = new string[strings.length];\n \
    \   for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].startsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that end with a given suffix.\n     \
    \       \n*/\nstring[] filter_by_suffix(string[] strings, string suffix) \n{\n\
    \    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].endsWith(suffix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that contain a given substring.\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring.\n   \
    \         \n*/\nstring[] filter_by_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(caseSensitive\
    \ ? strings[i].contains(substring) : strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring.\n   \
    \         \n*/\nstring[] filter_by_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(caseSensitive\
    \ ? strings[i].contains(substring) : strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that contain a given substring.\n\
    \            \n*/\nstring[] filter_by_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n    string[] result\
    \ = new string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n\
    \    {\n        if(caseSensitive ? strings[i].contains(substring) : strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ ignoreCase, ignoreCase))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that contain\
    \ a given substring.\n            \n*/\nstring[] filter", "{\n\tstring[] result\
    \ = new string[strings.length];\n\tfor (int i = 0; i < strings.length; ++i)\n\t\
    \tif (strings[i].startsWith(prefix))\n\t\t\tresult[i] = strings[i];\n\treturn\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that end with\
    \ a given suffix.\n            \n*/\nstring[] filter_by_suffix(string[] strings,\
    \ string suffix) \n{\n\tstring[] result = new string[strings.length];\n\tfor (int\
    \ i = 0; i < strings.length; ++i)\n\t\tif (strings[i].endsWith(suffix))\n\t\t\t\
    result[i] = strings[i];\n\treturn result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that contain a given substring.\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n\tstring[] result = new string[strings.length];\n\
    \tfor (int i = 0; i < strings.length; ++i)\n\t\tif (strings[i].contains(substring))\n\
    \t\t\tresult[i] = strings[i];\n\treturn result;\n}\n/*\n Filter an input list\
    \ of strings only for ones that do not contain a given substring.\n          \
    \  \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n\tstring[] result = new string[strings.length];\n\tfor (int i = 0; i <\
    \ strings.length; ++i)\n\t\tif (!strings[i].contains(substring))\n\t\t\tresult[i]\
    \ = strings[i];\n\treturn result;\n}\n/*\n Filter an input list of strings only\
    \ for ones that do not start with a given prefix.\n            \n*/\nstring[]\
    \ filter_by_not_prefix(string[] strings, string prefix) \n{\n\tstring[] result\
    \ = new string[strings.length];\n\tfor (int i = 0; i < strings.length; ++i)\n\t\
    \tif (!strings[i].startsWith(prefix))\n\t\t\tresult[i] = strings[i];\n\treturn\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not end\
    \ with a given suffix.\n            \n*/\nstring[] filter_by_not_suffix(string[]\
    \ strings, string suffix) \n{\n\tstring[] result = new string[strings.length];\n\
    \tfor (int i = 0; i < strings.length; ++i)\n\t\tif (!strings[i].endsWith(suffix))\n\
    \t\t\tresult[i] = strings[i];\n\treturn result;\n}\n/*\n Filter an input list\
    \ of strings only for ones that do not contain a given substring.\n          \
    \  \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n\tstring[] result = new string[strings.length];\n\tfor (int i = 0; i <\
    \ strings.length; ++i)\n\t\tif (!strings[i].contains(substring))\n\t\t\tresult[i]\
    \ = strings[i];\n\treturn result;\n}\n/*\n Filter an input list of strings only\
    \ for ones that do not start with a given prefix.\n            \n*/\nstring[]\
    \ filter_by_not_prefix(string[] ", "{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].startsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that end with a given suffix.\n     \
    \       \n*/\nstring[] filter_by_suffix(string[] strings, string suffix) \n{\n\
    \    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].endsWith(suffix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that contain a given substring.\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that match a regular expression.\n  \
    \          \n*/\nstring[] filter_by_regex(string[] strings, string regex) \n{\n\
    \    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].matches(regex))\n            result[i] =\
    \ strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that match a regular expression.\n            \n*/\nstring[] filter_by_regex_case(string[]\
    \ strings, string regex) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].matches(regex,\
    \ RegexOption.IGNORE_CASE))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that match a\
    \ regular expression.\n            \n*/\nstring[] filter_by_regex_case_insensitive(string[]\
    \ strings, string regex) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].matches(regex,\
    \ RegexOption.IGNORE_CASE_INSENSITIVE))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n/*\n Filter an input list of strings only for ones\
    \ that match a regular expression.\n            \n*/\nstring[] filter_by_regex_case_insensitive(string[]\
    \ strings, string regex, int flags) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].matches(regex,\
    \ flags))\n            result[i] = strings[i];\n    }\n    return result;\n}",
  "{\n\tstring[] result = new string[strings.length];\n\tfor (int i = 0; i < strings.length;\
    \ ++i)\n\t{\n\t\tif (strings[i].StartsWith(prefix))\n\t\t{\n\t\t\tresult[i] =\
    \ strings[i];\n\t\t}\n\t}\n\treturn result;\n}", "{\n\tstring[] result = new string[strings.length];\n\
    \tfor (int i = 0; i < strings.length; ++i)\n\t\tif (strings[i].startsWith(prefix))\n\
    \t\t\tresult[i] = strings[i];\n\treturn result;\n}\n/*\n Filter an input list\
    \ of strings only for ones that end with a given suffix.\n            \n*/\nstring[]\
    \ filter_by_suffix(string[] strings, string suffix) \n{\n\tstring[] result = new\
    \ string[strings.length];\n\tfor (int i = 0; i < strings.length; ++i)\n\t\tif\
    \ (strings[i].endsWith(suffix))\n\t\t\tresult[i] = strings[i];\n\treturn result;\n\
    }\n/*\n Filter an input list of strings only for ones that contain a given substring.\n\
    \            \n*/\nstring[] filter_by_substring(string[] strings, string substring)\
    \ \n{\n\tstring[] result = new string[strings.length];\n\tfor (int i = 0; i <\
    \ strings.length; ++i)\n\t\tif (strings[i].contains(substring))\n\t\t\tresult[i]\
    \ = strings[i];\n\treturn result;\n}\n/*\n Filter an input list of strings only\
    \ for ones that match a regular expression.\n            \n*/\nstring[] filter_by_regex(string[]\
    \ strings, string regex) \n{\n\tstring[] result = new string[strings.length];\n\
    \tfor (int i = 0; i < strings.length; ++i)\n\t\tif (strings[i].matches(regex))\n\
    \t\t\tresult[i] = strings[i];\n\treturn result;\n}\n/*\n Filter an input list\
    \ of strings only for ones that match a regular expression.\n            \n*/\n\
    string[] filter_by_regex_case_insensitive(string[] strings, string regex) \n{\n\
    \tstring[] result = new string[strings.length];\n\tfor (int i = 0; i < strings.length;\
    \ ++i)\n\t\tif (strings[i].matches(regex, RegexOptions.IgnoreCase))\n\t\t\tresult[i]\
    \ = strings[i];\n\treturn result;\n}\n/*\n Filter an input list of strings only\
    \ for ones that match a regular expression.\n            \n*/\nstring[] filter_by_regex_not_case_insensitive(string[]\
    \ strings, string regex) \n{\n\tstring[] result = new string[strings.length];\n\
    \tfor (int i = 0; i < strings.length; ++i)\n\t\tif (!strings[i].matches(regex,\
    \ RegexOptions.IgnoreCase))\n\t\t\tresult[i] = strings[i];\n\treturn result;\n\
    }\n/*\n Filter an input list of strings only for ones that match a regular expression.\n\
    \            \n*/\nstring[] filter_by_regex_not_case_insensitive(string[] strings,\
    \ string regex, RegexOptions options) \n{\n\tstring[] result = new string[strings.length];\n\
    \tfor (int i = 0; i < strings.length; ++i)\n\t\tif (!strings[i].matches(regex,\
    \ options))\n\t\t\tresult[i] = strings[i];\n\treturn result;\n}\n/*\n Filter an\
    \ input list of strings only for ones that match a regular expression.", "{\n\
    \    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].StartsWith(prefix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that end with a given suffix.\n            \n*/\nstring[] filter_by_suffix(string[]\
    \ strings, string suffix) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].EndsWith(suffix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring.\n   \
    \         \n*/\nstring[] filter_by_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring.\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring anywhere\
    \ in the string.\n            \n*/\nstring[] filter_by_contains_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].Contains(substring,\
    \ StringComparison.OrdinalIgnoreCase))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n/*\n Filter an input list of strings only for ones\
    \ that do not contain a given substring anywhere in the string.\n            \n\
    */\nstring[] filter_by_not_contains_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].Contains(substring, StringComparison.OrdinalIgnoreCase))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring at the\
    \ start of the string.\n            \n*/\nstring[] filter_by_contains_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].Contains(substring, ",
  "{\n\tstring[] result = new string[strings.length];\n\tfor (int i = 0; i < strings.length;\
    \ ++i)\n\t{\n\t\tif (strings[i].StartsWith(prefix))\n\t\t\tresult[i] = strings[i];\n\
    \t}\n\treturn result;\n}", "{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    foreach(string s in strings)\n    {\n        if(s.StartsWith(prefix))\n\
    \        {\n            result[i++] = s;\n        }\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that end with a given suffix.\n\
    \            \n*/\nstring[] filter_by_suffix(string[] strings, string suffix)\
    \ \n{\n    string[] result = new string[strings.length];\n    int i = 0;\n   \
    \ foreach(string s in strings)\n    {\n        if(s.EndsWith(suffix))\n      \
    \  {\n            result[i++] = s;\n        }\n    }\n    return result;\n}\n\
    /*\n Filter an input list of strings only for ones that contain a given substring.\n\
    \            \n*/\nstring[] filter_by_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    int i = 0;\n   \
    \ foreach(string s in strings)\n    {\n        if(s.Contains(substring))\n   \
    \     {\n            result[i++] = s;\n        }\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain a given\
    \ substring.\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring) \n{\n    string[] result = new string[strings.length];\n \
    \   int i = 0;\n    foreach(string s in strings)\n    {\n        if(!s.Contains(substring))\n\
    \        {\n            result[i++] = s;\n        }\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain a given\
    \ prefix.\n            \n*/\nstring[] filter_by_not_prefix(string[] strings, string\
    \ prefix) \n{\n    string[] result = new string[strings.length];\n    int i =\
    \ 0;\n    foreach(string s in strings)\n    {\n        if(s.StartsWith(prefix))\n\
    \        {\n            result[i++] = s;\n        }\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain a given\
    \ suffix.\n            \n*/\nstring[] filter_by_not_suffix(string[] strings, string\
    \ suffix) \n{\n    string[] result = new string[strings.length];\n    int i =\
    \ 0;\n    foreach(string s in strings)\n    {\n        if(s.EndsWith(suffix))\n\
    \        {\n            result[i++] = s;\n        }\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain a given\
    \ substring.\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring) \n{\n    string[] result = new string[strings.length];\n \
    \   int i = 0;\n    ", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that end with a given suffix.\n     \
    \       \n*/\nstring[] filter_by_suffix(string[] strings, string suffix) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].EndsWith(suffix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that contain a given substring.\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring.\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given prefix.\n\
    \            \n*/\nstring[] filter_by_not_prefix(string[] strings, string prefix)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given suffix.\n\
    \            \n*/\nstring[] filter_by_not_suffix(string[] strings, string suffix)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (strings[i].EndsWith(suffix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring.\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given prefix.\n\
    \            \n*/", "{\n    string[] result = new string[strings.length];\n  \
    \  for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that end with a given suffix.\n     \
    \       \n*/\nstring[] filter_by_suffix(string[] strings, string suffix) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].EndsWith(suffix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that contain a given substring.\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring.\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given prefix.\n\
    \            \n*/\nstring[] filter_by_not_prefix(string[] strings, string prefix)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given suffix.\n\
    \            \n*/\nstring[] filter_by_not_suffix(string[] strings, string suffix)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (strings[i].EndsWith(suffix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring.\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given prefix.\n\
    \            \n*/", "{\n    string[] result = new string[strings.length];\n  \
    \  for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that end with a given suffix.\n     \
    \       \n*/\nstring[] filter_by_suffix(string[] strings, string suffix) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].EndsWith(suffix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that contain a given substring.\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that match a regular expression.\n  \
    \          \n*/\nstring[] filter_by_regex(string[] strings, string regex) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].Matches(regex))\n            result[i] =\
    \ strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that match a regular expression.\n            \n*/\nstring[] filter_by_regex_case_insensitive(string[]\
    \ strings, string regex) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Matches(regex,\
    \ RegexOptions.IgnoreCase))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that match a\
    \ regular expression.\n            \n*/\nstring[] filter_by_regex_case_sensitive(string[]\
    \ strings, string regex) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Matches(regex,\
    \ RegexOptions.IgnoreCase))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that match a\
    \ regular expression.\n            \n*/\nstring[] filter_by_regex_not_case_sensitive(string[]\
    \ strings, string regex) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Matches(regex,\
    \ RegexOptions.IgnoreCase))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input ", "{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that end with a given suffix.\n     \
    \       \n*/\nstring[] filter_by_suffix(string[] strings, string suffix) \n{\n\
    \    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].EndsWith(suffix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that contain a given substring.\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring.\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring anywhere\
    \ in the string.\n            \n*/\nstring[] filter_by_contains_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].Contains(substring,\
    \ StringComparison.OrdinalIgnoreCase))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n/*\n Filter an input list of strings only for ones\
    \ that do not contain a given substring anywhere in the string.\n            \n\
    */\nstring[] filter_by_not_contains_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].Contains(substring, StringComparison.OrdinalIgnoreCase))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring\
    \ anywhere in the string.\n            \n*/\nstring[] filter_by_contains_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].Contains(",
  "{\n    string[] result = new string[strings.length];\n    int i = 0;\n    foreach(string\
    \ s in strings)\n    {\n        if(s.StartsWith(prefix))\n        {\n        \
    \    result[i++] = s;\n        }\n    }\n    return result;\n}\n</code>\n<|/ a\
    \ tags=c#,linq,.net,string |>\n<| c |>\nI like your answer but I think it would\
    \ be better to use a `StringBuilder` instead of `string[]` since it seems like\
    \ the OP wants to mutate the original array.\n<|/ c |>\n<| c |>\n: I agree, `StringBuilder`\
    \ would be better. I'll update my answer.\n<|/ c |>\n<| c |>\n: I updated my answer\
    \ to show how to use `StringBuilder` instead of `string[]`.\n<|/ c |>\n<| a tags=c#,linq,.net,string\
    \ |>\n<code>\nstring[] result = strings.Where(s => s.StartsWith(prefix)).ToArray();\n\
    </code>\n<|/ a dscore=2 |>\n<| a tags=c#,linq,.net,string |>\n<code>\nstring[]\
    \ result = strings.Where(s => s.StartsWith(prefix)).ToArray();\n</code>\n<|/ a\
    \ dscore=2 |>\n<| a dscore=2 |>\n<code>\nstring[] result = strings.Where(s =>\
    \ s.StartsWith(prefix)).ToArray();\n</code>\n<|/ a tags=c#,linq,.net,string |>\n\
    <| a tags=c#,linq,.net,string |>\n<code>\nstring[] result = strings.Where(s =>\
    \ s.StartsWith(prefix)).ToArray();\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2\
    \ |>\n<code>\nstring[] result = strings.Where(s => s.StartsWith(prefix)).ToArray();\n\
    </code>\n<|/ a tags=c#,linq,.net,string |>\n<| a dscore=1 |>\n<code>\nstring[]\
    \ result = strings.Where(s => s.StartsWith(prefix)).ToArray();\n</code>\n<|/ a\
    \ tags=c#,linq,.net,string |>\n<| a tags=c#,linq,.net,string |>\n<code>\nstring[]\
    \ result = strings.Where(s => s.StartsWith(prefix)).ToArray();\n</code>\n<|/ a\
    \ dscore=1 |>\n<| a dscore=1 |>\n<code>\nstring[] result = strings.Where(s =>\
    \ s.StartsWith(prefix", "{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that end with a given suffix.\n     \
    \       \n*/\nstring[] filter_by_suffix(string[] strings, string suffix) \n{\n\
    \    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].EndsWith(suffix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that contain a given substring.\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring.\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring in a given\
    \ order.\n            \n*/\nstring[] filter_by_substring_in_order(string[] strings,\
    \ string substring, bool in_order) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].Contains(substring)\
    \ && in_order)\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain a given\
    \ substring in a given order.\n            \n*/\nstring[] filter_by_not_substring_in_order(string[]\
    \ strings, string substring, bool in_order) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].Contains(substring)\
    \ && in_order)\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that contain a given substring\
    \ in a given order.\n            \n*/\nstring[] filter_by_substring_in_order_and_prefix(string[]\
    \ strings, string substring, bool in_order) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(string", "{\n\
    \    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].startsWith(prefix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that end with a given suffix.\n            \n*/\nstring[] filter_by_suffix(string[]\
    \ strings, string suffix) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].endsWith(suffix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring.\n   \
    \         \n*/\nstring[] filter_by_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring anywhere\
    \ in the string.\n            \n*/\nstring[] filter_by_substring_any(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring anywhere\
    \ in the string.\n            \n*/\nstring[] filter_by_substring_all(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring anywhere\
    \ in the string.\n            \n*/\nstring[] filter_by_substring_any_case(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring anywhere\
    \ in the string.\n            \n*/\nstring[] filter_by_substring_all_case(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n", "{\n\
    \    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].startsWith(prefix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that end with a given suffix.\n            \n*/\nstring[] filter_by_suffix(string[]\
    \ strings, string suffix) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].endsWith(suffix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring.\n   \
    \         \n*/\nstring[] filter_by_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring.\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given prefix.\n\
    \            \n*/\nstring[] filter_by_not_prefix(string[] strings, string prefix)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(strings[i].startsWith(prefix))\n \
    \           result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given suffix.\n\
    \            \n*/\nstring[] filter_by_not_suffix(string[] strings, string suffix)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(strings[i].endsWith(suffix))\n   \
    \         result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter an\
    \ input list of strings only for ones that do not contain a given substring.\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given prefix.",
  "{\n    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that end with a given suffix.\n            \n*/\nstring[] filter_by_suffix(string[]\
    \ strings, string suffix) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].EndsWith(suffix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring.\n   \
    \         \n*/\nstring[] filter_by_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring.\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_not_prefix(string[] strings, string prefix)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not end with a given suffix.\n\
    \            \n*/\nstring[] filter_by_not_suffix(string[] strings, string suffix)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (strings[i].EndsWith(suffix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring.\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not start with a given prefix.\n",
  "{\n    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].startsWith(prefix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that end with a given suffix.\n            \n*/\nstring[] filter_by_suffix(string[]\
    \ strings, string suffix) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].endsWith(suffix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring.\n   \
    \         \n*/\nstring[] filter_by_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring.\n   \
    \         \n*/\nstring[] filter_by_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(caseSensitive\
    \ ? strings[i].contains(substring) : strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring.\n   \
    \         \n*/\nstring[] filter_by_substring(string[] strings, string substring,\
    \ int startIndex, bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(caseSensitive\
    \ ? strings[i].contains(substring, startIndex) : strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ startIndex))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that contain a given substring.\n\
    \            \n*/\nstring[] filter_by_substring(string[] strings, string substring,\
    \ int startIndex, int endIndex, bool caseSensitive) \n{\n    string[] result =\
    \ new string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n \
    \   {\n        if(caseSensitive ? strings[i].contains(substring, startIndex, endIndex)\
    \ : strings[i].toLowerCase().contains(substring.toLowerCase(), startIndex, endIndex))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring.\n   \
    \         \n*/", "{\n    string[] result = new string[strings.length];\n    for\
    \ (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that end with a given suffix.\n     \
    \       \n*/\nstring[] filter_by_suffix(string[] strings, string suffix) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].EndsWith(suffix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that contain a given substring.\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring.\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_not_prefix(string[] strings, string prefix)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not end with a given suffix.\n\
    \            \n*/\nstring[] filter_by_not_suffix(string[] strings, string suffix)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].EndsWith(suffix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring.\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not start with a given prefix.\n",
  "{\n    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].startsWith(prefix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that end with a given suffix.\n            \n*/\nstring[] filter_by_suffix(string[]\
    \ strings, string suffix) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].endsWith(suffix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring.\n   \
    \         \n*/\nstring[] filter_by_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring.\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring.\n   \
    \         \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring.\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring.\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring.\n\
    \            \n*/\nstring[] filter_by_not_substring(string", "{\n    string[]\
    \ result = new string[strings.length];\n    int i = 0;\n    foreach(string s in\
    \ strings)\n    {\n        if(s.StartsWith(prefix))\n        {\n            result[i++]\
    \ = s;\n        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n\
    <| c |>\nThanks for your answer. I was hoping to avoid having to use LINQ, but\
    \ I guess that's not really an option.\n<|/ c |>\n<| c |>\nI added a non-LINQ\
    \ version to my answer.\n<|/ c |>\n<| c |>\nThanks for your answer. I was hoping\
    \ to avoid having to use LINQ, but I guess that's not really an option.\n<|/ c\
    \ |>\n<| c |>\nI added a non-LINQ version to my answer.\n<|/ c |>\n<| a tags=c#,string,arrays\
    \ |>\n<code>\nstring[] strings = new string[] { \"abc\", \"def\", \"ghi\", \"\
    jkl\" };\nstring prefix = \"def\";\nstring[] result = strings.Where(s => s.StartsWith(prefix)).ToArray();\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nstring[] strings = new string[]\
    \ { \"abc\", \"def\", \"ghi\", \"jkl\" };\nstring prefix = \"def\";\nstring[]\
    \ result = strings.Where(s => s.StartsWith(prefix)).ToArray();\n</code>\n<|/ a\
    \ tags=c#,string,arrays |>\n<| a dscore=1 |>\n<code>\nstring[] strings = new string[]\
    \ { \"abc\", \"def\", \"ghi\", \"jkl\" };\nstring prefix = \"def\";\nstring[]\
    \ result = strings.Where(s => s.StartsWith(prefix)).ToArray();\n</code>\n<|/ a\
    \ tags=c#,string,arrays |>\n<| a |>\n<code>\nstring[] strings = new string[] {\
    \ \"abc\", \"def\", \"ghi\", \"jkl\" };\nstring prefix = \"def\";\nstring[] result\
    \ = strings.Where(s => s.StartsWith(prefix)).ToArray();\n</code>\n<|/ a dscore=1\
    \ tags=c#,string,arrays |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] strings\
    \ = new string[] { \"abc\", \"def\", \"ghi\", \"jkl\" };\nstring prefix = \"def\"\
    ;\nstring[] result = strings.Where(s => s.StartsWith(prefix)).ToArray();\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>", "{\n\tstring[] result = new string[strings.length];\n\
    \tfor (int i = 0; i < strings.length; ++i)\n\t\tif (strings[i].startsWith(prefix))\n\
    \t\t\tresult[i] = strings[i];\n\treturn result;\n}", "{\n    string[] result =\
    \ new string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n \
    \   {\n        if(strings[i].startsWith(prefix))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n/*\n Filter an input list of strings only for ones\
    \ that end with a given suffix.\n            \n*/\nstring[] filter_by_suffix(string[]\
    \ strings, string suffix) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].endsWith(suffix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring.\n   \
    \         \n*/\nstring[] filter_by_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring.\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_not_prefix(string[] strings, string prefix)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(strings[i].startsWith(prefix))\n \
    \           result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not end with a given suffix.\n\
    \            \n*/\nstring[] filter_by_not_suffix(string[] strings, string suffix)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(strings[i].endsWith(suffix))\n   \
    \         result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter an\
    \ input list of strings only for ones that do not contain a given substring.\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not start ", "{\n    string[]\
    \ result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that end with a given suffix.\n            \n*/\nstring[] filter_by_suffix(string[]\
    \ strings, string suffix) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].EndsWith(suffix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring.\n   \
    \         \n*/\nstring[] filter_by_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that match a regular expression.\n  \
    \          \n*/\nstring[] filter_by_regex(string[] strings, string regex) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (Regex.IsMatch(strings[i], regex))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that match a regular expression.\n            \n*/\nstring[] filter_by_regex_case_insensitive(string[]\
    \ strings, string regex) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (Regex.IsMatch(strings[i],\
    \ regex, RegexOptions.IgnoreCase))\n            result[i] = strings[i];\n    }\n\
    \    return result;\n}\n/*\n Filter an input list of strings only for ones that\
    \ match a regular expression.\n            \n*/\nstring[] filter_by_regex_ignore_case(string[]\
    \ strings, string regex) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (Regex.IsMatch(strings[i],\
    \ regex, RegexOptions.IgnoreCase))\n            result[i] = strings[i];\n    }\n\
    \    return result;\n}\n/*\n Filter an input list of strings only for ones that\
    \ match a regular expression.\n            \n*/\nstring[] filter_by_regex_ignore_case_multiline(string[]\
    \ strings, string regex) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (Regex.IsMatch(strings[i],\
    \ regex, RegexOptions.IgnoreCase))\n            result[i] = strings[i];\n    }\n\
    \    return result;", "{\n\tstring[] result = new string[strings.length];\n\t\
    for (int i = 0; i < strings.length; ++i)\n\t\tif (strings[i].StartsWith(prefix))\n\
    \t\t\tresult[i] = strings[i];\n\treturn result;\n}", "{\n    string[] result =\
    \ new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (strings[i].StartsWith(prefix))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n/*\n Filter an input list of strings only for ones\
    \ that end with a given suffix.\n            \n*/\nstring[] filter_by_suffix(string[]\
    \ strings, string suffix) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].EndsWith(suffix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring.\n   \
    \         \n*/\nstring[] filter_by_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that match a given regular expression.\n\
    \            \n*/\nstring[] filter_by_regex(string[] strings, string regex) \n\
    {\n    string[] result = new string[strings.length];\n    for (int i = 0; i <\
    \ strings.length; ++i)\n    {\n        if (Regex.IsMatch(strings[i], regex))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that match a given regular expression.\n\
    \            \n*/\nstring[] filter_by_regex_case_insensitive(string[] strings,\
    \ string regex) \n{\n    string[] result = new string[strings.length];\n    for\
    \ (int i = 0; i < strings.length; ++i)\n    {\n        if (Regex.IsMatch(strings[i],\
    \ regex, RegexOptions.IgnoreCase))\n            result[i] = strings[i];\n    }\n\
    \    return result;\n}\n/*\n Filter an input list of strings only for ones that\
    \ match a given regular expression.\n            \n*/\nstring[] filter_by_regex_case_insensitive(string[]\
    \ strings, string regex, RegexOptions options) \n{\n    string[] result = new\
    \ string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n    {\n\
    \        if (Regex.IsMatch(strings[i], regex, options))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that match a given regular expression.\n            \n*/\nstring[]\
    \ filter_by_regex_case_insensitive(string[] strings, string regex, RegexOptions\
    \ options, RegexOptions caseInsensitiveOptions) \n{\n    string[] result = new\
    \ string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n    {\n\
    \        if (Regex.IsMatch(strings[i], regex, options, caseIn", "{\n    string[]\
    \ result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].StartsWith(prefix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that end with a given suffix.\n            \n*/\nstring[] filter_by_suffix(string[]\
    \ strings, string suffix) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].EndsWith(suffix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring.\n   \
    \         \n*/\nstring[] filter_by_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring.\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given prefix.\n\
    \            \n*/\nstring[] filter_by_not_prefix(string[] strings, string prefix)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(strings[i].StartsWith(prefix))\n \
    \           result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given suffix.\n\
    \            \n*/\nstring[] filter_by_not_suffix(string[] strings, string suffix)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(strings[i].EndsWith(suffix))\n   \
    \         result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter an\
    \ input list of strings only for ones that do not contain a given substring.\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for one", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that end with a given suffix.\n     \
    \       \n*/\nstring[] filter_by_suffix(string[] strings, string suffix) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].EndsWith(suffix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that contain a given substring.\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring.\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring in a given\
    \ order.\n            \n*/\nstring[] filter_by_substring_order(string[] strings,\
    \ string substring, string order) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring)\
    \ && strings[i].Contains(order))\n            result[i] = strings[i];\n    }\n\
    \    return result;\n}\n/*\n Filter an input list of strings only for ones that\
    \ do not contain a given substring in a given order.\n            \n*/\nstring[]\
    \ filter_by_not_substring_order(string[] strings, string substring, string order)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].Contains(substring)\
    \ && !strings[i].Contains(order))\n            result[i] = strings[i];\n    }\n\
    \    return result;\n}\n/*\n Filter an input list of strings only for ones that\
    \ contain a given substring in a given order.\n            \n*/\nstring[] filter_by_substring_order_and_substring(string[]\
    \ strings, string substring, string order, string substring2) \n{\n    string[]\
    \ result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].Contain", "{\n    string[] result = new\
    \ string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n    {\n\
    \        if (strings[i].StartsWith(prefix))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n/*\n Filter an input list of strings only for ones\
    \ that end with a given suffix.\n            \n*/\nstring[] filter_by_suffix(string[]\
    \ strings, string suffix) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].EndsWith(suffix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring.\n   \
    \         \n*/\nstring[] filter_by_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring.\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given prefix.\n\
    \            \n*/\nstring[] filter_by_not_prefix(string[] strings, string prefix)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given suffix.\n\
    \            \n*/\nstring[] filter_by_not_suffix(string[] strings, string suffix)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (strings[i].EndsWith(suffix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring.\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given prefix.\n\
    \            \n*/", "{\n    string[] result = new string[strings.length];\n  \
    \  for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].startsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that end with a given suffix.\n     \
    \       \n*/\nstring[] filter_by_suffix(string[] strings, string suffix) \n{\n\
    \    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].endsWith(suffix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that contain a given substring.\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring.\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_not_prefix(string[] strings, string prefix)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(strings[i].startsWith(prefix))\n \
    \           result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not end with a given suffix.\n\
    \            \n*/\nstring[] filter_by_not_suffix(string[] strings, string suffix)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(strings[i].endsWith(suffix))\n   \
    \         result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter an\
    \ input list of strings only for ones that do not contain a given substring.\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not start ", "{\n    string[]\
    \ result = new string[strings.length];\n    int i = 0;\n    for (string s : strings)\
    \ {\n        if (s.StartsWith(prefix)) {\n            result[i++] = s;\n     \
    \   }\n    }\n    return result;\n}\n/*\n Filter an input list of strings only\
    \ for ones that end with a given suffix.\n            \n*/\nstring[] filter_by_suffix(string[]\
    \ strings, string suffix) \n{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    for (string s : strings) {\n        if (s.EndsWith(suffix))\
    \ {\n            result[i++] = s;\n        }\n    }\n    return result;\n}\n/*\n\
    \ Filter an input list of strings only for ones that contain a given substring.\n\
    \            \n*/\nstring[] filter_by_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    int i = 0;\n   \
    \ for (string s : strings) {\n        if (s.Contains(substring)) {\n         \
    \   result[i++] = s;\n        }\n    }\n    return result;\n}\n/*\n Filter an\
    \ input list of strings only for ones that do not contain a given substring.\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    int i = 0;\n   \
    \ for (string s : strings) {\n        if (s.Contains(substring) == false) {\n\
    \            result[i++] = s;\n        }\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring.\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    int i = 0;\n   \
    \ for (string s : strings) {\n        if (s.Contains(substring) == false) {\n\
    \            result[i++] = s;\n        }\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring.\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    int i = 0;\n   \
    \ for (string s : strings) {\n        if (s.Contains(substring) == false) {\n\
    \            result[i++] = s;\n        }\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring.\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    int i = 0;\n   \
    \ for (string s : strings) {\n        if (s.Contains(substring) == false) {\n\
    \            result[i++] = s;\n        }\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for one", "{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    foreach(string s in strings)\n    {\n        if(s.StartsWith(prefix))\n\
    \            result[i++] = s;\n    }\n    return result;\n}\n</code>\n<|/ a tags=c#,string,arrays\
    \ |>\n<| c |>\nThis doesn't work if you have a string like \"foo-bar\" in the\
    \ array\n<|/ c |>\n<| c |>\n: I fixed the bug. Thanks.\n<|/ c |>\n<| a tags=c#,string,arrays\
    \ |>\n<code>\nstring[] result = new string[strings.length];", "{\n    string[]\
    \ result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that end with a given suffix.\n            \n*/\nstring[] filter_by_suffix(string[]\
    \ strings, string suffix) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].EndsWith(suffix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring.\n   \
    \         \n*/\nstring[] filter_by_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring.\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given prefix.\n\
    \            \n*/\nstring[] filter_by_not_prefix(string[] strings, string prefix)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given suffix.\n\
    \            \n*/\nstring[] filter_by_not_suffix(string[] strings, string suffix)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (strings[i].EndsWith(suffix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring.\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given prefix.\n\
    \            \n*/", "{\n    string[] result = new string[strings.length];\n  \
    \  for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that end with a given suffix.\n     \
    \       \n*/\nstring[] filter_by_suffix(string[] strings, string suffix) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].EndsWith(suffix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that contain a given substring.\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring.\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring in a given\
    \ order.\n            \n*/\nstring[] filter_by_substring_in_order(string[] strings,\
    \ string substring, bool ascending) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring)\
    \ && strings[i].Contains(substring))\n            result[i] = strings[i];\n  \
    \  }\n    return result;\n}\n/*\n Filter an input list of strings only for ones\
    \ that do not contain a given substring in a given order.\n            \n*/\n\
    string[] filter_by_not_substring_in_order(string[] strings, string substring,\
    \ bool ascending) \n{\n    string[] result = new string[strings.length];\n   \
    \ for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].Contains(substring)\
    \ && strings[i].Contains(substring))\n            result[i] = strings[i];\n  \
    \  }\n    return result;\n}\n/*\n Filter an input list of strings only for ones\
    \ that start with a given prefix.\n            \n*/\nstring[] filter_by_prefix_in_order(string[]\
    \ strings, string prefix, bool ascending) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].StartsWith(prefix)\
    \ && ", "{\n\tstring[] result = new string[strings.length];\n\tfor (int i = 0;\
    \ i < strings.length; ++i)\n\t\tif (strings[i].startsWith(prefix))\n\t\t\tresult[i]\
    \ = strings[i];\n\treturn result;\n}\n/*\n Filter an input list of strings only\
    \ for ones that end with a given suffix.\n            \n*/\nstring[] filter_by_suffix(string[]\
    \ strings, string suffix) \n{\n\tstring[] result = new string[strings.length];\n\
    \tfor (int i = 0; i < strings.length; ++i)\n\t\tif (strings[i].endsWith(suffix))\n\
    \t\t\tresult[i] = strings[i];\n\treturn result;\n}\n/*\n Filter an input list\
    \ of strings only for ones that contain a given substring.\n            \n*/\n\
    string[] filter_by_substring(string[] strings, string substring) \n{\n\tstring[]\
    \ result = new string[strings.length];\n\tfor (int i = 0; i < strings.length;\
    \ ++i)\n\t\tif (strings[i].contains(substring))\n\t\t\tresult[i] = strings[i];\n\
    \treturn result;\n}\n/*\n Filter an input list of strings only for ones that do\
    \ not contain a given substring.\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring) \n{\n\tstring[] result = new string[strings.length];\n\
    \tfor (int i = 0; i < strings.length; ++i)\n\t\tif (!strings[i].contains(substring))\n\
    \t\t\tresult[i] = strings[i];\n\treturn result;\n}\n/*\n Filter an input list\
    \ of strings only for ones that contain a given substring anywhere in the string.\n\
    \            \n*/\nstring[] filter_by_contains_substring(string[] strings, string\
    \ substring) \n{\n\tstring[] result = new string[strings.length];\n\tfor (int\
    \ i = 0; i < strings.length; ++i)\n\t\tif (strings[i].contains(substring))\n\t\
    \t\tresult[i] = strings[i];\n\treturn result;\n}\n/*\n Filter an input list of\
    \ strings only for ones that do not contain a given substring anywhere in the\
    \ string.\n            \n*/\nstring[] filter_by_not_contains_substring(string[]\
    \ strings, string substring) \n{\n\tstring[] result = new string[strings.length];\n\
    \tfor (int i = 0; i < strings.length; ++i)\n\t\tif (!strings[i].contains(substring))\n\
    \t\t\tresult[i] = strings[i];\n\treturn result;\n}\n/*\n Filter an input list\
    \ of strings only for ones that contain a given substring anywhere in the string\
    \ and are equal to a given value.\n            \n*/\nstring[] filter_by_contains_substring_and_equal(string[]\
    \ strings, string substring, string equals) \n{\n\tstring[] result = new string[strings.length];\n\
    \tfor (int i = 0; i < strings.length; ++i)\n\t\tif (strings[i].contains(substring)\
    \ && strings[i] == equals)\n\t\t\tresult[i] = strings[i];\n\treturn result;\n\
    }\n/*\n Filter an input ", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].startsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that end with a given suffix.\n     \
    \       \n*/\nstring[] filter_by_suffix(string[] strings, string suffix) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].endsWith(suffix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that contain a given substring.\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring.\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_not_prefix(string[] strings, string prefix)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (strings[i].startsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not end with a given suffix.\n\
    \            \n*/\nstring[] filter_by_not_suffix(string[] strings, string suffix)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (strings[i].endsWith(suffix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring.\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not start with a given prefix.\n\
    \            \n*/\nstring", "{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that end with a given suffix.\n     \
    \       \n*/\nstring[] filter_by_suffix(string[] strings, string suffix) \n{\n\
    \    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].EndsWith(suffix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that contain a given substring.\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring.\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_not_prefix(string[] strings, string prefix)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(strings[i].StartsWith(prefix))\n \
    \           result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not end with a given suffix.\n\
    \            \n*/\nstring[] filter_by_not_suffix(string[] strings, string suffix)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(strings[i].EndsWith(suffix))\n   \
    \         result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter an\
    \ input list of strings only for ones that do not contain a given substring.\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings ", "{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    foreach(string s in strings)\n    {\n        if(s.StartsWith(prefix))\n\
    \        {\n            result[i++] = s;\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=c#,linq,.net,c#-4.0 |>\n<| c |>\nI like this solution,\
    \ but I wonder if it would be more efficient to just use an `if` statement to\
    \ see if the string starts with the prefix before adding it to the result array?\n\
    <|/ c |>\n<| c |>\nYes, that would probably be more efficient.\n<|/ c |>\n<| c\
    \ |>\nI added a version that uses `if` statements.\n<|/ c |>\n<| a tags=c#,linq,.net,c#-4.0\
    \ |>\n<code>\nvar result = strings.Where(s => s.StartsWith(prefix)).ToArray();\n\
    </code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't work if `prefix` is an empty\
    \ string. `StartsWith` returns false for an empty string.\n<|/ c |>\n<| c |>\n\
    : It does work if `prefix` is an empty string. `StartsWith` returns false for\
    \ an empty string.\n<|/ c |>\n<| c |>\n: It does work if `prefix` is an empty\
    \ string. `StartsWith` returns false for an empty string.\n<|/ c |>\n<| c |>\n\
    : It does work if `prefix` is an empty string. `StartsWith` returns false for\
    \ an empty string.\n<|/ c |>\n<| c |>\n: It does work if `prefix` is an empty\
    \ string. `StartsWith` returns false for an empty string.\n<|/ c |>\n<| a tags=c#,linq,.net,c#-4.0\
    \ |>\n<code>\nvar result = strings.Where(s => s.StartsWith(prefix)).ToArray();\n\
    </code>\n<|/ a dscore=2 |>\n<| a tags=c#,linq,.net,c#-4.0 |>\n<code>\nvar result\
    \ = strings.Where(s => s.StartsWith(prefix)).ToArray();\n</code>\n<|/ a dscore=2\
    \ |>\n<| a tags=c#,linq,.net,c#-4.0 |>\n<code>\nvar result = strings.Where(s =>\
    \ s.StartsWith(prefix)).ToArray();\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 ",
  "{\n\tstring[] result = new string[strings.length];\n\tfor (int i = 0; i < strings.length;\
    \ ++i)\n\t\tif (strings[i].StartsWith(prefix))\n\t\t\tresult[i] = strings[i];\n\
    \treturn result;\n}\n/*\n Filter an input list of strings only for ones that end\
    \ with a given suffix.\n            \n*/\nstring[] filter_by_suffix(string[] strings,\
    \ string suffix) \n{\n\tstring[] result = new string[strings.length];\n\tfor (int\
    \ i = 0; i < strings.length; ++i)\n\t\tif (strings[i].EndsWith(suffix))\n\t\t\t\
    result[i] = strings[i];\n\treturn result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that contain a given substring.\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n\tstring[] result = new string[strings.length];\n\
    \tfor (int i = 0; i < strings.length; ++i)\n\t\tif (strings[i].Contains(substring))\n\
    \t\t\tresult[i] = strings[i];\n\treturn result;\n}\n/*\n Filter an input list\
    \ of strings only for ones that do not contain a given substring.\n          \
    \  \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n\tstring[] result = new string[strings.length];\n\tfor (int i = 0; i <\
    \ strings.length; ++i)\n\t\tif (!strings[i].Contains(substring))\n\t\t\tresult[i]\
    \ = strings[i];\n\treturn result;\n}\n/*\n Filter an input list of strings only\
    \ for ones that do not contain a given prefix.\n            \n*/\nstring[] filter_by_not_prefix(string[]\
    \ strings, string prefix) \n{\n\tstring[] result = new string[strings.length];\n\
    \tfor (int i = 0; i < strings.length; ++i)\n\t\tif (!strings[i].StartsWith(prefix))\n\
    \t\t\tresult[i] = strings[i];\n\treturn result;\n}\n/*\n Filter an input list\
    \ of strings only for ones that do not contain a given suffix.\n            \n\
    */\nstring[] filter_by_not_suffix(string[] strings, string suffix) \n{\n\tstring[]\
    \ result = new string[strings.length];\n\tfor (int i = 0; i < strings.length;\
    \ ++i)\n\t\tif (!strings[i].EndsWith(suffix))\n\t\t\tresult[i] = strings[i];\n\
    \treturn result;\n}\n/*\n Filter an input list of strings only for ones that do\
    \ not contain a given substring.\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring) \n{\n\tstring[] result = new string[strings.length];\n\
    \tfor (int i = 0; i < strings.length; ++i)\n\t\tif (!strings[i].Contains(substring))\n\
    \t\t\tresult[i] = strings[i];\n\treturn result;\n}\n/*\n Filter an input list\
    \ of strings only for ones that do not contain a given prefix.\n            \n\
    */\nstring[] filter_by_not_prefix", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that end with a given suffix.\n     \
    \       \n*/\nstring[] filter_by_suffix(string[] strings, string suffix) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].EndsWith(suffix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that contain a given substring.\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that match a given regular expression.\n\
    \            \n*/\nstring[] filter_by_regex(string[] strings, string regex) \n\
    {\n    string[] result = new string[strings.length];\n    for (int i = 0; i <\
    \ strings.length; ++i)\n    {\n        if (strings[i].Matches(regex))\n      \
    \      result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input\
    \ list of strings only for ones that match a given regular expression.\n     \
    \       \n*/\nstring[] filter_by_regex_case_insensitive(string[] strings, string\
    \ regex) \n{\n    string[] result = new string[strings.length];\n    for (int\
    \ i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Matches(regex,\
    \ RegexOptions.IgnoreCase))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that match a\
    \ given regular expression.\n            \n*/\nstring[] filter_by_regex_not_case_insensitive(string[]\
    \ strings, string regex) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Matches(regex,\
    \ RegexOptions.IgnoreCase) == false)\n            result[i] = strings[i];\n  \
    \  }\n    return result;\n}\n/*\n Filter an input list of strings only for ones\
    \ that match a given regular expression.\n            \n*/\nstring[] filter_by_regex_not_case_insensitive(string[]\
    \ strings, string regex, RegexOptions options) \n{\n    string[] result = new\
    \ string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n    {\n\
    \        if (strings[i].Matches(regex, options) == false)\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n", "{\n\tstring[] result = new string[strings.length];\n\
    \tfor (int i = 0; i < strings.length; ++i)\n\t\tif (strings[i].StartsWith(prefix))\n\
    \t\t\tresult[i] = strings[i];\n\treturn result;\n}", "{\n    string[] result =\
    \ new string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n \
    \   {\n        if(strings[i].StartsWith(prefix))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n/*\n Filter an input list of strings only for ones\
    \ that end with a given suffix.\n            \n*/\nstring[] filter_by_suffix(string[]\
    \ strings, string suffix) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].EndsWith(suffix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring.\n   \
    \         \n*/\nstring[] filter_by_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring.\n   \
    \         \n*/\nstring[] filter_by_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(caseSensitive\
    \ ? strings[i].Contains(substring) : strings[i].IndexOf(substring, StringComparison.OrdinalIgnoreCase)\
    \ >= 0)\n            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n\
    \ Filter an input list of strings only for ones that contain a given substring.\n\
    \            \n*/\nstring[] filter_by_substring(string[] strings, string substring,\
    \ int startIndex, int endIndex) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].IndexOf(substring,\
    \ startIndex, StringComparison.OrdinalIgnoreCase) >= 0 && strings[i].IndexOf(substring,\
    \ endIndex, StringComparison.OrdinalIgnoreCase) < 0)\n            result[i] =\
    \ strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that contain a given substring.\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring, int startIndex, int endIndex, bool caseSensitive)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(caseSensitive ? strings[i].IndexOf(substring,\
    \ startIndex, StringComparison.OrdinalIgnoreCase) >= 0 && strings[i].IndexOf(substring,\
    \ endIndex, StringComparison.OrdinalIgnoreCase) < 0 : strings[i].IndexOf(substring,\
    \ start", "{\n    string[] result = new string[strings.length];\n    for (int\
    \ i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].startsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that end with a given suffix.\n     \
    \       \n*/\nstring[] filter_by_suffix(string[] strings, string suffix) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].endsWith(suffix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that contain a given substring.\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that match a regular expression.\n  \
    \          \n*/\nstring[] filter_by_regex(string[] strings, string regex) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].matches(regex))\n            result[i] =\
    \ strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that match a regular expression.\n            \n*/\nstring[] filter_by_regex_case_insensitive(string[]\
    \ strings, string regex) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].matches(regex,\
    \ RegexOption.IGNORE_CASE))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that match a\
    \ regular expression.\n            \n*/\nstring[] filter_by_regex_case_insensitive(string[]\
    \ strings, string regex, RegexOption option) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].matches(regex,\
    \ option))\n            result[i] = strings[i];\n    }\n    return result;\n}\n\
    /*\n Filter an input list of strings only for ones that match a regular expression.\n\
    \            \n*/\nstring[] filter_by_regex_case_insensitive(string[] strings,\
    \ string regex, RegexOption option, RegexOption option2) \n{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (strings[i].matches(regex, option, option2))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter ", "{\n    string[]\
    \ result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that end with a given suffix.\n            \n*/\nstring[] filter_by_suffix(string[]\
    \ strings, string suffix) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].EndsWith(suffix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring.\n   \
    \         \n*/\nstring[] filter_by_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring.\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given prefix.\n\
    \            \n*/\nstring[] filter_by_not_prefix(string[] strings, string prefix)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given suffix.\n\
    \            \n*/\nstring[] filter_by_not_suffix(string[] strings, string suffix)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (strings[i].EndsWith(suffix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring.\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given prefix.\n\
    \            \n*/", "{\n    string[] result = new string[strings.length];\n  \
    \  for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that end with a given suffix.\n     \
    \       \n*/\nstring[] filter_by_suffix(string[] strings, string suffix) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].EndsWith(suffix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that contain a given substring.\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that match a given regular expression.\n\
    \            \n*/\nstring[] filter_by_regex(string[] strings, string regex) \n\
    {\n    string[] result = new string[strings.length];\n    for (int i = 0; i <\
    \ strings.length; ++i)\n    {\n        if (Regex.Match(strings[i], regex).Success)\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that match a given regular expression.\n\
    \            \n*/\nstring[] filter_by_regex_case_insensitive(string[] strings,\
    \ string regex) \n{\n    string[] result = new string[strings.length];\n    for\
    \ (int i = 0; i < strings.length; ++i)\n    {\n        if (Regex.Match(strings[i],\
    \ regex, RegexOptions.IgnoreCase).Success)\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n/*\n Filter an input list of strings only for ones\
    \ that match a given regular expression.\n            \n*/\nstring[] filter_by_regex_not_match(string[]\
    \ strings, string regex) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (Regex.Match(strings[i],\
    \ regex).Success == false)\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that match a\
    \ given regular expression.\n            \n*/\nstring[] filter_by_regex_not_match_case_insensitive(string[]\
    \ strings, string regex) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (Regex.Match(strings[i],\
    \ regex, RegexOptions.IgnoreCase).Success == false)\n            result[i] = strings[i];",
  "{\n    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].StartsWith(prefix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a tags=c#,linq,.net,string,list\
    \ |>\n<| a tags=c#,linq,.net,string,list |>\n<code>\nvar result = strings.Where(s\
    \ => s.StartsWith(\"A\"));\n</code>\n<|/ a dscore=5 |>\n<| a tags=c#,linq,.net,string,list\
    \ |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"A\"));\n</code>\n\
    <|/ a dscore=5 |>\n<| a tags=c#,linq,.net,string,list |>\n<code>\nvar result =\
    \ strings.Where(s => s.StartsWith(\"A\"));\n</code>\n<|/ a dscore=5 |>\n<| a tags=c#,linq,.net,string,list\
    \ |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"A\"));\n</code>\n\
    <|/ a dscore=5 |>\n<| a dscore=5 |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"\
    A\"));\n</code>\n<|/ a tags=c#,linq,.net,string,list |>\n<| a tags=c#,linq,.net,string,list\
    \ |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"A\"));\n</code>\n\
    <|/ a dscore=5 |>\n<| a tags=c#,linq,.net,string,list |>\n<code>\nvar result =\
    \ strings.Where(s => s.StartsWith(\"A\"));\n</code>\n<|/ a dscore=5 |>\n<| a dscore=5\
    \ |>\n<code>\nvar result = strings.Where(s => s.StartsWith(\"A\"));\n</code>\n\
    <|/ a tags=c#,linq,.net,string,list |>\n<| a |>\n<code>\nvar result = strings.Where(s\
    \ => s.StartsWith(\"A\"));\n</code>\n<|/ a dscore=5 tags=c#,linq,.net,string,list\
    \ |>\n<| a tags=c#,linq,.net,string,list |>\n<code>\nvar result = strings.Where(s\
    \ => s.StartsWith(\"A\"));\n</code>\n<|/ a dscore=4 |>\n<| a tags=c#,linq,.net,string,list\
    \ |>\n<code>\nvar result = ", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that end with a given suffix.\n     \
    \       \n*/\nstring[] filter_by_suffix(string[] strings, string suffix) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].EndsWith(suffix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that contain a given substring.\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that match a regular expression.\n  \
    \          \n*/\nstring[] filter_by_regex(string[] strings, string regex) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].Matches(regex))\n            result[i] =\
    \ strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that match a regular expression.\n            \n*/\nstring[] filter_by_regex_case_insensitive(string[]\
    \ strings, string regex) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Matches(regex,\
    \ RegexOptions.IgnoreCase))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that match a\
    \ regular expression.\n            \n*/\nstring[] filter_by_regex_case_sensitive(string[]\
    \ strings, string regex) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Matches(regex,\
    \ RegexOptions.IgnoreCase))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that match a\
    \ regular expression.\n            \n*/\nstring[] filter_by_regex_ignore_case(string[]\
    \ strings, string regex) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Matches(regex,\
    \ RegexOptions.IgnoreCase))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of ", "{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that end with a given suffix.\n     \
    \       \n*/\nstring[] filter_by_suffix(string[] strings, string suffix) \n{\n\
    \    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].EndsWith(suffix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that contain a given substring.\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring.\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given prefix.\n\
    \            \n*/\nstring[] filter_by_not_prefix(string[] strings, string prefix)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(strings[i].StartsWith(prefix))\n \
    \           result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given suffix.\n\
    \            \n*/\nstring[] filter_by_not_suffix(string[] strings, string suffix)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(strings[i].EndsWith(suffix))\n   \
    \         result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter an\
    \ input list of strings only for ones that do not contain a given substring.\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for one", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that end with a given suffix.\n     \
    \       \n*/\nstring[] filter_by_suffix(string[] strings, string suffix) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].EndsWith(suffix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that contain a given substring.\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring.\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_not_prefix(string[] strings, string prefix)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not end with a given suffix.\n\
    \            \n*/\nstring[] filter_by_not_suffix(string[] strings, string suffix)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].EndsWith(suffix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring.\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not start with a given prefix.\n",
  "{\n    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that end with a given suffix.\n            \n*/\nstring[] filter_by_suffix(string[]\
    \ strings, string suffix) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].EndsWith(suffix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring.\n   \
    \         \n*/\nstring[] filter_by_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring anywhere\
    \ in the string.\n            \n*/\nstring[] filter_by_substring_any(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring at any\
    \ point in the string.\n            \n*/\nstring[] filter_by_substring_all(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring anywhere\
    \ in the string and are longer than a given length.\n            \n*/\nstring[]\
    \ filter_by_substring_any_longer(string[] strings, string substring, int length)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring)\
    \ && strings[i].Length > length)\n            result[i] = strings[i];\n    }\n\
    \    return result;\n}\n/*\n Filter an input list of strings only for ones that\
    \ contain a given substring anywhere in the string and are longer than a given\
    \ length.\n            \n*/\nstring[] filter_by_substring_all_longer(string[]\
    \ strings, string substring, int length) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++", "{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    foreach(string s in strings)\n    {\n        if(s.StartsWith(prefix))\n\
    \            result[i++] = s;\n    }\n    return result;\n}\n/*\n Filter an input\
    \ list of strings only for ones that end with a given suffix.\n            \n\
    */\nstring[] filter_by_suffix(string[] strings, string suffix) \n{\n    string[]\
    \ result = new string[strings.length];\n    int i = 0;\n    foreach(string s in\
    \ strings)\n    {\n        if(s.EndsWith(suffix))\n            result[i++] = s;\n\
    \    }\n    return result;\n}\n/*\n Filter an input list of strings only for ones\
    \ that contain a given substring.\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    foreach(string s in strings)\n    {\n        if(s.Contains(substring))\n\
    \            result[i++] = s;\n    }\n    return result;\n}\n/*\n Filter an input\
    \ list of strings only for ones that do not contain a given substring.\n     \
    \       \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    int i = 0;\n   \
    \ foreach(string s in strings)\n    {\n        if(!s.Contains(substring))\n  \
    \          result[i++] = s;\n    }\n    return result;\n}\n/*\n Filter an input\
    \ list of strings only for ones that do not start with a given prefix.\n     \
    \       \n*/\nstring[] filter_by_not_prefix(string[] strings, string prefix) \n\
    {\n    string[] result = new string[strings.length];\n    int i = 0;\n    foreach(string\
    \ s in strings)\n    {\n        if(s.StartsWith(prefix))\n            result[i++]\
    \ = s;\n    }\n    return result;\n}\n/*\n Filter an input list of strings only\
    \ for ones that do not end with a given suffix.\n            \n*/\nstring[] filter_by_not_suffix(string[]\
    \ strings, string suffix) \n{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    foreach(string s in strings)\n    {\n        if(s.EndsWith(suffix))\n\
    \            result[i++] = s;\n    }\n    return result;\n}\n/*\n Filter an input\
    \ list of strings only for ones that do not contain a given substring.\n     \
    \       \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    int i = 0;\n   \
    \ foreach(string s in strings)\n    {\n        if(!s.Contains(substring))\n  \
    \          result[i++] = s;\n", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that end with a given suffix.\n     \
    \       \n*/\nstring[] filter_by_suffix(string[] strings, string suffix) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].EndsWith(suffix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that contain a given substring.\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring.\n   \
    \         \n*/\nstring[] filter_by_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (caseSensitive\
    \ ? strings[i].Contains(substring) : strings[i].IndexOf(substring, StringComparison.OrdinalIgnoreCase)\
    \ >= 0)\n            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n\
    \ Filter an input list of strings only for ones that contain a given substring.\n\
    \            \n*/\nstring[] filter_by_substring(string[] strings, string substring,\
    \ int startIndex, int endIndex) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].IndexOf(substring,\
    \ startIndex, StringComparison.OrdinalIgnoreCase) >= 0 && strings[i].IndexOf(substring,\
    \ endIndex, StringComparison.OrdinalIgnoreCase) < 0)\n            result[i] =\
    \ strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that contain a given substring.\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring, int startIndex, int endIndex, bool caseSensitive)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (caseSensitive ? strings[i].IndexOf(substring,\
    \ startIndex, StringComparison.OrdinalIgnoreCase) >= 0 && strings[i].IndexOf(substring,\
    \ endIndex, StringComparison.OrdinalIgnoreCase) < 0 : strings[i].IndexOf(substring,\
    \ startIndex, StringComparison.OrdinalIgnore", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that end with a given suffix.\n     \
    \       \n*/\nstring[] filter_by_suffix(string[] strings, string suffix) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].EndsWith(suffix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that contain a given substring.\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring anywhere\
    \ in the string.\n            \n*/\nstring[] filter_by_substring_any(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring.\n\
    \            \n*/\nstring[] filter_by_substring_not_any(string[] strings, string\
    \ substring) \n{\n    string[] result = new string[strings.length];\n    for (int\
    \ i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring\
    \ anywhere in the string.\n            \n*/\nstring[] filter_by_substring_not_any_in_string(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring\
    \ anywhere in the string.\n            \n*/\nstring[] filter_by_substring_not_any_in_string(string[]\
    \ strings, string substring, string substring2) \n{\n    string[] result = new\
    \ string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n    {\n\
    \        if (strings[i].Contains(substring))\n            result[i] = strings[i];\n\
    \    }\n", "{\n    string[] result = new string[strings.length];\n    for (int\
    \ i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].startsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that end with a given suffix.\n     \
    \       \n*/\nstring[] filter_by_suffix(string[] strings, string suffix) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].endsWith(suffix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that contain a given substring.\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring.\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given prefix.\n\
    \            \n*/\nstring[] filter_by_not_prefix(string[] strings, string prefix)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (strings[i].startsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given suffix.\n\
    \            \n*/\nstring[] filter_by_not_suffix(string[] strings, string suffix)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (strings[i].endsWith(suffix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring.\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given prefix.\n\
    \            \n*/\nstring[] filter_by_", "{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    foreach(string s in strings)\n    {\n        if(s.StartsWith(prefix))\n\
    \        {\n            result[i++] = s;\n        }\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that end with a given suffix.\n\
    \            \n*/\nstring[] filter_by_suffix(string[] strings, string suffix)\
    \ \n{\n    string[] result = new string[strings.length];\n    int i = 0;\n   \
    \ foreach(string s in strings)\n    {\n        if(s.EndsWith(suffix))\n      \
    \  {\n            result[i++] = s;\n        }\n    }\n    return result;\n}\n\
    /*\n Filter an input list of strings only for ones that contain a given substring.\n\
    \            \n*/\nstring[] filter_by_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    int i = 0;\n   \
    \ foreach(string s in strings)\n    {\n        if(s.Contains(substring))\n   \
    \     {\n            result[i++] = s;\n        }\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that match a given regular\
    \ expression.\n            \n*/\nstring[] filter_by_regex(string[] strings, string\
    \ regex) \n{\n    string[] result = new string[strings.length];\n    int i = 0;\n\
    \    foreach(string s in strings)\n    {\n        if(Regex.IsMatch(s, regex))\n\
    \        {\n            result[i++] = s;\n        }\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that match a given regular\
    \ expression.\n            \n*/\nstring[] filter_by_regex_case_insensitive(string[]\
    \ strings, string regex) \n{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    foreach(string s in strings)\n    {\n        if(Regex.IsMatch(s,\
    \ regex, RegexOptions.IgnoreCase))\n        {\n            result[i++] = s;\n\
    \        }\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that match a given regular expression.\n            \n*/\nstring[]\
    \ filter_by_regex_case_insensitive(string[] strings, string regex, RegexOptions\
    \ options) \n{\n    string[] result = new string[strings.length];\n    int i =\
    \ 0;\n    foreach(string s in strings)\n    {\n        if(Regex.IsMatch(s, regex,\
    \ options))\n        {\n            result[i++] = s;\n        }\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that match a\
    \ given regular expression.\n            \n*/\nstring[] filter_by_regex_case_insensitive(string[]\
    \ strings, string regex, RegexOptions options, ", "{\n    string[] result = new\
    \ string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n    {\n\
    \        if (strings[i].StartsWith(prefix))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n/*\n Filter an input list of strings only for ones\
    \ that end with a given suffix.\n            \n*/\nstring[] filter_by_suffix(string[]\
    \ strings, string suffix) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].EndsWith(suffix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring.\n   \
    \         \n*/\nstring[] filter_by_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring.\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring.\n   \
    \         \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring.\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring.\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring.\n\
    \            \n*/\nstring", "{\n\tstring[] result = new string[strings.length];\n\
    \tfor (int i = 0; i < strings.length; ++i)\n\t\tif (strings[i].startsWith(prefix))\n\
    \t\t\tresult[i] = strings[i];\n\treturn result;\n}\n/*\n Filter an input list\
    \ of strings only for ones that end with a given suffix.\n            \n*/\nstring[]\
    \ filter_by_suffix(string[] strings, string suffix) \n{\n\tstring[] result = new\
    \ string[strings.length];\n\tfor (int i = 0; i < strings.length; ++i)\n\t\tif\
    \ (strings[i].endsWith(suffix))\n\t\t\tresult[i] = strings[i];\n\treturn result;\n\
    }\n/*\n Filter an input list of strings only for ones that contain a given substring.\n\
    \            \n*/\nstring[] filter_by_substring(string[] strings, string substring)\
    \ \n{\n\tstring[] result = new string[strings.length];\n\tfor (int i = 0; i <\
    \ strings.length; ++i)\n\t\tif (strings[i].contains(substring))\n\t\t\tresult[i]\
    \ = strings[i];\n\treturn result;\n}\n/*\n Filter an input list of strings only\
    \ for ones that do not contain a given substring.\n            \n*/\nstring[]\
    \ filter_by_not_substring(string[] strings, string substring) \n{\n\tstring[]\
    \ result = new string[strings.length];\n\tfor (int i = 0; i < strings.length;\
    \ ++i)\n\t\tif (!strings[i].contains(substring))\n\t\t\tresult[i] = strings[i];\n\
    \treturn result;\n}\n/*\n Filter an input list of strings only for ones that do\
    \ not start with a given prefix.\n            \n*/\nstring[] filter_by_not_prefix(string[]\
    \ strings, string prefix) \n{\n\tstring[] result = new string[strings.length];\n\
    \tfor (int i = 0; i < strings.length; ++i)\n\t\tif (!strings[i].startsWith(prefix))\n\
    \t\t\tresult[i] = strings[i];\n\treturn result;\n}\n/*\n Filter an input list\
    \ of strings only for ones that do not end with a given suffix.\n            \n\
    */\nstring[] filter_by_not_suffix(string[] strings, string suffix) \n{\n\tstring[]\
    \ result = new string[strings.length];\n\tfor (int i = 0; i < strings.length;\
    \ ++i)\n\t\tif (!strings[i].endsWith(suffix))\n\t\t\tresult[i] = strings[i];\n\
    \treturn result;\n}\n/*\n Filter an input list of strings only for ones that do\
    \ not contain a given substring.\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring) \n{\n\tstring[] result = new string[strings.length];\n\
    \tfor (int i = 0; i < strings.length; ++i)\n\t\tif (!strings[i].contains(substring))\n\
    \t\t\tresult[i] = strings[i];\n\treturn result;\n}\n/*\n Filter an input list\
    \ of strings only for ones that do not start with a given prefix.\n          \
    \  \n*/\nstring[] filter_by_not_prefix(string[] ", "{\n\tstring[] result = new\
    \ string[strings.length];\n\tfor (int i = 0; i < strings.length; ++i)\n\t\tif\
    \ (strings[i].StartsWith(prefix))\n\t\t\tresult[i] = strings[i];\n\treturn result;\n\
    }\n/*\n Filter an input list of strings only for ones that end with a given suffix.\n\
    \            \n*/\nstring[] filter_by_suffix(string[] strings, string suffix)\
    \ \n{\n\tstring[] result = new string[strings.length];\n\tfor (int i = 0; i <\
    \ strings.length; ++i)\n\t\tif (strings[i].EndsWith(suffix))\n\t\t\tresult[i]\
    \ = strings[i];\n\treturn result;\n}\n/*\n Filter an input list of strings only\
    \ for ones that contain a given substring.\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n\tstring[] result = new string[strings.length];\n\
    \tfor (int i = 0; i < strings.length; ++i)\n\t\tif (strings[i].Contains(substring))\n\
    \t\t\tresult[i] = strings[i];\n\treturn result;\n}\n/*\n Filter an input list\
    \ of strings only for ones that contain a given substring anywhere in the string.\n\
    \            \n*/\nstring[] filter_by_substring_any(string[] strings, string substring)\
    \ \n{\n\tstring[] result = new string[strings.length];\n\tfor (int i = 0; i <\
    \ strings.length; ++i)\n\t\tif (strings[i].Contains(substring, StringComparison.OrdinalIgnoreCase))\n\
    \t\t\tresult[i] = strings[i];\n\treturn result;\n}\n/*\n Filter an input list\
    \ of strings only for ones that contain a given substring anywhere in the string\
    \ ignoring case.\n            \n*/\nstring[] filter_by_substring_ignore_case(string[]\
    \ strings, string substring) \n{\n\tstring[] result = new string[strings.length];\n\
    \tfor (int i = 0; i < strings.length; ++i)\n\t\tif (strings[i].Contains(substring,\
    \ StringComparison.OrdinalIgnoreCase))\n\t\t\tresult[i] = strings[i];\n\treturn\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that contain\
    \ a given substring anywhere in the string ignoring case.\n            \n*/\n\
    string[] filter_by_substring_ignore_case_any(string[] strings, string substring)\
    \ \n{\n\tstring[] result = new string[strings.length];\n\tfor (int i = 0; i <\
    \ strings.length; ++i)\n\t\tif (strings[i].Contains(substring, StringComparison.OrdinalIgnoreCase))\n\
    \t\t\tresult[i] = strings[i];\n\treturn result;\n}\n/*\n Filter an input list\
    \ of strings only for ones that contain a given substring anywhere in the string\
    \ ignoring case.\n            \n*/\nstring[] filter_by_substring_ignore_case_any_ignore_case(string[]\
    \ strings, string substring) \n{\n\tstring[] result = new string[strings.length];\n\
    \tfor (int ", "{\n    string[] result = new string[strings.length];\n    int i\
    \ = 0;\n    for (string s : strings) {\n        if (s.StartsWith(prefix)) {\n\
    \            result[i++] = s;\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nThanks for your answer. Unfortunately the code you\
    \ posted doesn't compile for me. I'm getting an error on the line `return new\
    \ string[strings.length];` saying \"Cannot implicitly convert type 'string[]'\
    \ to 'string'\"\n<|/ c |>\n<| c |>\nAh, I see what you mean. Yes, I missed a return\
    \ statement. I've edited my answer to include a return statement.\n<|/ c |>\n\
    <| c |>\nThanks for your answer. Unfortunately the code you posted doesn't compile\
    \ for me. I'm getting an error on the line `return new string[strings.length];`\
    \ saying \"Cannot implicitly convert type 'string[]' to 'string'\"\n<|/ c |>\n\
    <| c |>\nAh, I see what you mean. Yes, I missed a return statement. I've edited\
    \ my answer to include a return statement.\n<|/ c |>\n<| c |>\nThanks for your\
    \ answer. Unfortunately the code you posted doesn't compile for me. I'm getting\
    \ an error on the line `return new string[strings.length];` saying \"Cannot implicitly\
    \ convert type 'string[]' to 'string'\"\n<|/ c |>\n<| a dscore=1 |>\n<code>\n\
    public static string[] FilterByPrefix(string[] strings, string prefix)\n{\n  \
    \  string[] result = new string[strings.length];\n    int i = 0;\n    foreach\
    \ (string s in strings)\n    {\n        if (s.StartsWith(prefix))\n        {\n\
    \            result[i++] = s;\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,string,arrays |>\n<| c |>\nThanks for your answer. Unfortunately\
    \ the code you posted doesn't compile for me. I'm getting an error on the line\
    \ `return new string[strings.length];` saying \"Cannot implicitly convert type\
    \ 'string[]' to 'string'\"\n<|/ c |>\n<| a tags=c#,string,arrays |>\n<code>\n\
    string[] result = new string[strings.length];\n</code>\nThis line is creating\
    \ a new array and assigning it to the variable result. \n<code>\nreturn result;\n\
    </code>\nThis line is returning the array that was created earlier. \n<code>\n\
    return new string[strings.length];\n</code>\n", "{\n    string[] result = new\
    \ string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n    {\n\
    \        if(strings[i].startsWith(prefix))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}", "{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].startsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that end with a given suffix.\n     \
    \       \n*/\nstring[] filter_by_suffix(string[] strings, string suffix) \n{\n\
    \    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].endsWith(suffix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that contain a given substring.\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring anywhere\
    \ in the string.\n            \n*/\nstring[] filter_by_substring_any(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring at any\
    \ point in the string.\n            \n*/\nstring[] filter_by_substring_all(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring anywhere\
    \ in the string and are equal to a given value.\n            \n*/\nstring[] filter_by_substring_any_eq(string[]\
    \ strings, string substring, string value) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring)\
    \ && strings[i] == value)\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that contain\
    \ a given substring anywhere in the string and are equal to a given value.\n \
    \           \n*/\nstring[] filter_by_substring_all_eq(string[] strings, string\
    \ substring, string value) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].startsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that end with a given suffix.\n     \
    \       \n*/\nstring[] filter_by_suffix(string[] strings, string suffix) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].endsWith(suffix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that contain a given substring.\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring.\n   \
    \         \n*/\nstring[] filter_by_substring(string[] strings, string substring,\
    \ int startIndex, int endIndex) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring,\
    \ startIndex, endIndex))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that contain\
    \ a given substring.\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring, int startIndex) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring,\
    \ startIndex))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that contain a given substring.\n\
    \            \n*/\nstring[] filter_by_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring.\n   \
    \         \n*/\nstring[] filter_by_substring(string[] strings, string substring,\
    \ int startIndex, int endIndex) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring,\
    \ startIndex, endIndex))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter ", "{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].startsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that end with a given suffix.\n     \
    \       \n*/\nstring[] filter_by_suffix(string[] strings, string suffix) \n{\n\
    \    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].endsWith(suffix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that contain a given substring.\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that match a regular expression.\n  \
    \          \n*/\nstring[] filter_by_regex(string[] strings, string regex) \n{\n\
    \    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].matches(regex))\n            result[i] =\
    \ strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that match a regular expression.\n            \n*/\nstring[] filter_by_regex_case(string[]\
    \ strings, string regex) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].matches(regex,\
    \ RegexOptions.IgnoreCase))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that match a\
    \ regular expression.\n            \n*/\nstring[] filter_by_regex_not_case(string[]\
    \ strings, string regex) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].matches(regex,\
    \ RegexOptions.IgnoreCase))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that match a\
    \ regular expression.\n            \n*/\nstring[] filter_by_regex_not_case_sensitive(string[]\
    \ strings, string regex) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].matches(regex))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for one", "{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,linq |>\n<| c |>\nThanks for your answer. I'm going to try this\
    \ out and see how it goes. I appreciate your help.\n<|/ c |>\n<| c |>\nI added\
    \ a sample program to my answer that demonstrates how to use this method.\n<|/\
    \ c |>\n<| c |>\nThanks again. I tried it out and it worked great. I'm going to\
    \ try and implement this into my code now and see how it goes. Thanks again for\
    \ your help.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nvar result = list.Where(x =>\
    \ x.StartsWith(\"A\")).ToList();\n</code>\n<|/ a tags=c#,linq |>\n<| c |>\nThanks\
    \ for your answer. I'm going to try this out and see how it goes. I appreciate\
    \ your help.\n<|/ c |>\n<| a tags=c#,linq |>\n<code>\nvar result = list.Where(x\
    \ => x.StartsWith(\"A\")).ToList();\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks\
    \ for your answer. I'm going to try this out and see how it goes. I appreciate\
    \ your help.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nvar result = list.Where(x =>\
    \ x.StartsWith(\"A\")).ToList();\n</code>\n<|/ a tags=c#,linq |>\n<| c |>\nThanks\
    \ for your answer. I'm going to try this out and see how it goes. I appreciate\
    \ your help.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nvar result = list.Where(x =>\
    \ x.StartsWith(\"A\")).ToList();\n</code>\n<|/ a tags=c#,linq |>\n<| c |>\nThanks\
    \ for your answer. I'm going to try this out and see how it goes. I appreciate\
    \ your help.\n<|/ c |>\n<| a tags=c#,linq |>\n<code>\nvar result = list.Where(x\
    \ => x.StartsWith(\"A\")).ToList();\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks\
    \ for your answer. ", "{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that end with a given suffix.\n     \
    \       \n*/\nstring[] filter_by_suffix(string[] strings, string suffix) \n{\n\
    \    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].EndsWith(suffix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that contain a given substring.\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring.\n   \
    \         \n*/\nstring[] filter_by_substring(string[] strings, string substring,\
    \ string caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(caseSensitive\
    \ == null)\n        {\n            if(strings[i].Contains(substring))\n      \
    \          result[i] = strings[i];\n        }\n        else\n        {\n     \
    \       if(strings[i].Contains(substring, caseSensitive))\n                result[i]\
    \ = strings[i];\n        }\n    }\n    return result;\n}\n/*\n Filter an input\
    \ list of strings only for ones that contain a given substring.\n            \n\
    */\nstring[] filter_by_substring(string[] strings, string substring, int startIndex,\
    \ int endIndex) \n{\n    string[] result = new string[strings.length];\n    for(int\
    \ i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].Contains(substring,\
    \ startIndex, endIndex))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that contain\
    \ a given substring.\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring, int startIndex, int endIndex, bool caseSensitive)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(caseSensitive == null)\n        {\n\
    \            if(strings[i].Contains(substring, startIndex, endIndex))\n      \
    \          result[i] = strings[i];\n        }\n        else\n        {\n     \
    \       if(strings[i].Contains(substring, startIndex, endIndex, caseSensitive",
  "{\n    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that end with a given suffix.\n            \n*/\nstring[] filter_by_suffix(string[]\
    \ strings, string suffix) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].EndsWith(suffix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring.\n   \
    \         \n*/\nstring[] filter_by_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring.\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring in a given\
    \ order.\n            \n*/\nstring[] filter_by_substring(string[] strings, string\
    \ substring, string order) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring)\
    \ && strings[i].Contains(order))\n            result[i] = strings[i];\n    }\n\
    \    return result;\n}\n/*\n Filter an input list of strings only for ones that\
    \ do not contain a given substring in a given order.\n            \n*/\nstring[]\
    \ filter_by_not_substring(string[] strings, string substring, string order) \n\
    {\n    string[] result = new string[strings.length];\n    for (int i = 0; i <\
    \ strings.length; ++i)\n    {\n        if (!strings[i].Contains(substring) &&\
    \ !strings[i].Contains(order))\n            result[i] = strings[i];\n    }\n \
    \   return result;\n}\n/*\n Filter an input list of strings only for ones that\
    \ contain a given substring in a given order.\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, string order, string order2) \n{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (!strings[i].Contains(substring) && !strings[i].Contains(",
  "{\n    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].StartsWith(prefix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a tags=c#,.net,linq\
    \ |>\n<| a |>\n<code>\nvar result = strings.Where(s => s.StartsWith(prefix)).ToArray();\n\
    </code>\n<|/ a dscore=2 tags=c#,.net,linq |>\n<| a tags=c#,.net,linq |>\n<code>\n\
    var result = strings.Where(s => s.StartsWith(prefix)).ToArray();\n</code>\n<|/\
    \ a dscore=2 |>\n<| a dscore=1 |>\n<code>\nvar result = strings.Where(s => s.StartsWith(prefix)).ToArray();\n\
    </code>\n<|/ a tags=c#,.net,linq |>\n<| a dscore=1 |>\n<code>\nvar result = strings.Where(s\
    \ => s.StartsWith(prefix)).ToArray();\n</code>\n<|/ a tags=c#,.net,linq |>\n<|\
    \ a tags=c#,.net,linq |>\n<code>\nvar result = strings.Where(s => s.StartsWith(prefix)).ToArray();\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=c#,.net,linq |>\n<code>\nvar result = strings.Where(s\
    \ => s.StartsWith(prefix)).ToArray();\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\n<code>\nvar result = strings.Where(s => s.StartsWith(prefix)).ToArray();\n\
    </code>\n<|/ a tags=c#,.net,linq |>\n<| a tags=c#,.net,linq |>\n<code>\nvar result\
    \ = strings.Where(s => s.StartsWith(prefix)).ToArray();\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=c#,.net,linq |>\n<code>\nvar result = strings.Where(s => s.StartsWith(prefix)).ToArray();\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nvar result = strings.Where(s\
    \ => s.StartsWith(prefix)).ToArray();\n</code>\n<|/ a tags=c#,.net,linq |>\n<|\
    \ a dscore=1 |>\n<code>\nvar result = ", "{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].startsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that end with a given suffix.\n     \
    \       \n*/\nstring[] filter_by_suffix(string[] strings, string suffix) \n{\n\
    \    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].endsWith(suffix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that contain a given substring.\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring.\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring anywhere\
    \ in the string.\n            \n*/\nstring[] filter_by_contains_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring\
    \ anywhere in the string.\n            \n*/\nstring[] filter_by_not_contains_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring anywhere\
    \ in the string and are longer than the given length.\n            \n*/\nstring[]\
    \ filter_by_contains_substring(string[] strings, string substring, int length)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(strings[i].contains(substring) &&\
    \ strings[i].length() > length)\n            result[i] = string", "{\n\tstring[]\
    \ result = new string[strings.length];\n\tfor (int i = 0; i < strings.length;\
    \ ++i)\n\t\tif (strings[i].StartsWith(prefix))\n\t\t\tresult[i] = strings[i];\n\
    \treturn result;\n}\n/*\n Filter an input list of strings only for ones that end\
    \ with a given suffix.\n            \n*/\nstring[] filter_by_suffix(string[] strings,\
    \ string suffix) \n{\n\tstring[] result = new string[strings.length];\n\tfor (int\
    \ i = 0; i < strings.length; ++i)\n\t\tif (strings[i].EndsWith(suffix))\n\t\t\t\
    result[i] = strings[i];\n\treturn result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that contain a given substring.\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n\tstring[] result = new string[strings.length];\n\
    \tfor (int i = 0; i < strings.length; ++i)\n\t\tif (strings[i].Contains(substring))\n\
    \t\t\tresult[i] = strings[i];\n\treturn result;\n}\n/*\n Filter an input list\
    \ of strings only for ones that contain a given substring.\n            \n*/\n\
    string[] filter_by_substring(string[] strings, string substring, bool caseSensitive)\
    \ \n{\n\tstring[] result = new string[strings.length];\n\tfor (int i = 0; i <\
    \ strings.length; ++i)\n\t\tif (caseSensitive ? strings[i].Contains(substring)\
    \ : strings[i].IndexOf(substring, StringComparison.OrdinalIgnoreCase) >= 0)\n\t\
    \t\tresult[i] = strings[i];\n\treturn result;\n}\n/*\n Filter an input list of\
    \ strings only for ones that contain a given substring.\n            \n*/\nstring[]\
    \ filter_by_substring(string[] strings, string substring, bool caseSensitive,\
    \ int startIndex) \n{\n\tstring[] result = new string[strings.length];\n\tfor\
    \ (int i = 0; i < strings.length; ++i)\n\t\tif (caseSensitive ? strings[i].Contains(substring,\
    \ startIndex) : strings[i].IndexOf(substring, StringComparison.OrdinalIgnoreCase,\
    \ startIndex) >= 0)\n\t\t\tresult[i] = strings[i];\n\treturn result;\n}\n/*\n\
    \ Filter an input list of strings only for ones that contain a given substring.\n\
    \            \n*/\nstring[] filter_by_substring(string[] strings, string substring,\
    \ bool caseSensitive, int startIndex, int endIndex) \n{\n\tstring[] result = new\
    \ string[strings.length];\n\tfor (int i = 0; i < strings.length; ++i)\n\t\tif\
    \ (caseSensitive ? strings[i].Contains(substring, startIndex, endIndex) : strings[i].IndexOf(substring,\
    \ StringComparison.OrdinalIgnoreCase, startIndex, endIndex) >= 0)\n\t\t\tresult[i]\
    \ = strings[i];\n\treturn result;\n}\n/*\n Filter an input list of strings ",
  "{\n    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].startsWith(prefix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that end with a given suffix.\n            \n*/\nstring[] filter_by_suffix(string[]\
    \ strings, string suffix) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].endsWith(suffix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring.\n   \
    \         \n*/\nstring[] filter_by_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring.\n   \
    \         \n*/\nstring[] filter_by_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(caseSensitive\
    \ ? strings[i].contains(substring) : strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring.\n   \
    \         \n*/\nstring[] filter_by_substring(string[] strings, string substring,\
    \ int startIndex, int endIndex) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring,\
    \ startIndex, endIndex))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that contain\
    \ a given substring.\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring, bool caseSensitive, int startIndex, int endIndex)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(caseSensitive ? strings[i].contains(substring,\
    \ startIndex, endIndex) : strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ startIndex, endIndex))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that contain\
    \ a given substring.\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring, bool caseSensi", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that end with a given suffix.\n     \
    \       \n*/\nstring[] filter_by_suffix(string[] strings, string suffix) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].EndsWith(suffix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that contain a given substring.\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring.\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring in a given\
    \ order.\n            \n*/\nstring[] filter_by_substring_in_order(string[] strings,\
    \ string substring, bool in_order) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring)\
    \ && in_order)\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain a given\
    \ substring in a given order.\n            \n*/\nstring[] filter_by_not_substring_in_order(string[]\
    \ strings, string substring, bool in_order) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].Contains(substring)\
    \ && in_order)\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that contain a given substring\
    \ in a given order.\n            \n*/\nstring[] filter_by_substring_in_order_and_substring(string[]\
    \ strings, string substring, bool in_order) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring)\
    \ && in_order)\n            result", "{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].startsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that end with a given suffix.\n     \
    \       \n*/\nstring[] filter_by_suffix(string[] strings, string suffix) \n{\n\
    \    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].endsWith(suffix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that contain a given substring.\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring.\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_not_prefix(string[] strings, string prefix)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(strings[i].startsWith(prefix))\n \
    \           result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not end with a given suffix.\n\
    \            \n*/\nstring[] filter_by_not_suffix(string[] strings, string suffix)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(strings[i].endsWith(suffix))\n   \
    \         result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter an\
    \ input list of strings only for ones that do not contain a given substring.\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not start ", "{\n    string[]\
    \ result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].StartsWith(prefix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a tags=c#,string,arrays\
    \ |>\n<| a |>\n<code>\nstring[] result = new string[strings.length];\nfor(int\
    \ i = 0; i < strings.length; ++i)\n{\n    if(strings[i].StartsWith(prefix))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a dscore=1 tags=c#,string,arrays\
    \ |>\n<| a dscore=1 |>\n<code>\nstring[] result = new string[strings.length];\n\
    for(int i = 0; i < strings.length; ++i)\n{\n    if(strings[i].StartsWith(prefix))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a tags=c#,string,arrays |>\n\
    <| a tags=c#,string,arrays |>\n<code>\nstring[] result = new string[strings.length];\n\
    for(int i = 0; i < strings.length; ++i)\n{\n    if(strings[i].StartsWith(prefix))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=c#,string,arrays\
    \ |>\n<code>\nstring[] result = new string[strings.length];\nfor(int i = 0; i\
    \ < strings.length; ++i)\n{\n    if(strings[i].StartsWith(prefix))\n        result[i]\
    \ = strings[i];\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nstring[]\
    \ result = new string[strings.length];\nfor(int i = 0; i < strings.length; ++i)\n\
    {\n    if(strings[i].StartsWith(prefix))\n        result[i] = strings[i];\n}\n\
    </code>\n<|/ a tags=c#,string,arrays |>\n<| a dscore=1 |>\n<code>\nstring[] result\
    \ = new string[strings.length];\nfor(int i = 0; i < strings.length; ++i)\n{\n\
    \    if(strings[i].StartsWith(prefix))\n        result[i] = strings[i];\n}\n</code>\n\
    <|/ a tags=c#,string,arrays |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[]\
    \ result = new string[strings.length];\nfor(int i = 0; i < strings.length; ++i)\n\
    {\n    if(strings[i].StartsWith(prefix))\n        result[i] = strings[i];\n}\n\
    </code>\n<|/ a dscore=1 |>\n<| a |>\n<code>\nstring[] result = new string[strings.length];\n\
    for(int i = 0; i < strings.length; ++i)\n{\n    if(strings[i].StartsWith(prefix))\n\
    \        result[i] = strings[i];\n}\n", "{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=0 |>\n<code>\npublic static List<string> FilterByPrefix(List<string>\
    \ list, string prefix)\n{\n    List<string> result = new List<string>();\n   \
    \ foreach (string s in list)\n    {\n        if (s.StartsWith(prefix))\n     \
    \   {\n            result.Add(s);\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,linq |>\n<| a tags=c#,linq |>\n<code>\nvar filtered = list.Where(s\
    \ => s.StartsWith(prefix)).ToList();\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ |>\n<code>\nvar result = list.Where(s => s.StartsWith(prefix)).ToList();\n</code>\n\
    <|/ a tags=c#,linq |>\n<| a dscore=0 |>\n<code>\nvar result = list.Where(s =>\
    \ s.StartsWith(prefix)).ToList();\n</code>\n<|/ a tags=c#,linq |>\n<| a tags=c#,linq\
    \ |>\n<code>\nvar result = list.Where(s => s.StartsWith(prefix)).ToList();\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=c#,linq |>\n<code>\nvar result = list.Where(s =>\
    \ s.StartsWith(prefix)).ToList();\n</code>\n<|/ a dscore=0 |>\n<| a tags=c#,linq\
    \ |>\n<code>\nvar result = list.Where(s => s.StartsWith(prefix)).ToList();\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=c#,linq |>\n<code>\nvar result = list.Where(s =>\
    \ s.StartsWith(prefix)).ToList();\n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\n\
    var result = list.Where(s => s.StartsWith(prefix)).ToList();\n</code>\n<|/ a tags=c#,linq\
    \ dscore=0 |>\n<| a tags=c#,linq |>\n<code>\nvar result = list.Where(s => s.StartsWith(prefix)).ToList();\n\
    </code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\nvar ", "{\n    string[] result =\
    \ new string[strings.length];\n    int i = 0;\n    foreach(string s in strings)\n\
    \    {\n        if(s.StartsWith(prefix))\n        {\n            result[i++] =\
    \ s;\n        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=c#,linq |>\n\
    <| c |>\nI like this solution, however it would be better to use a StringBuilder\
    \ instead of string concatenation.\n<|/ c |>\n<| c |>\n: I agree. StringBuilder\
    \ would be better. I'll update my answer.\n<|/ c |>\n<| c |>\nI like your solution,\
    \ however I prefer to use `StringBuilder` instead of `string` concatenation. `StringBuilder`\
    \ has `Append` method which accepts `string` as parameter and it also has `AppendFormat`\
    \ method which accepts `string` as parameter. `string` concatenation is very inefficient\
    \ in terms of performance.\n<|/ c |>\n<| c |>\n: I agree. StringBuilder would\
    \ be better. I'll update my answer.\n<|/ c |>\n<| c |>\n: I agree. StringBuilder\
    \ would be better. I'll update my answer.\n<|/ c |>\n<| a tags=c#,linq |>\n<code>\n\
    var result = strings.Where(s => s.StartsWith(prefix)).ToArray();\n</code>\n<|/\
    \ a dscore=3 |>\n<| a dscore=3 |>\n<code>\nvar result = strings.Where(s => s.StartsWith(prefix)).ToArray();\n\
    </code>\n<|/ a tags=c#,linq |>\n<| a tags=c#,linq |>\n<code>\nvar result = strings.Where(s\
    \ => s.StartsWith(prefix)).ToArray();\n</code>\n<|/ a dscore=3 |>\n<| a tags=c#,linq\
    \ |>\n<code>\nvar result = strings.Where(s => s.StartsWith(prefix)).ToArray();\n\
    </code>\n<|/ a dscore=3 |>\n<| a dscore=2 |>\n<code>\nvar result = strings.Where(s\
    \ => s.StartsWith(prefix)).ToArray();\n</code>\n<|/ a tags=c#,linq |>\n<| a tags=c#,linq\
    \ |>\n<code>\nvar result = strings.Where(s => s.StartsWith(prefix)).ToArray();\n\
    </code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\nvar result = strings.Where(s\
    \ => s.StartsWith(prefix)).ToArray();", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that end with a given suffix.\n     \
    \       \n*/\nstring[] filter_by_suffix(string[] strings, string suffix) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].EndsWith(suffix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that contain a given substring.\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring.\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring.\n   \
    \         \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring.\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring.\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring.\n\
    \            \n*/\nstring", "{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].startsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}", "{\n    string[]\
    \ result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].StartsWith(prefix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that end with a given suffix.\n            \n*/\nstring[] filter_by_suffix(string[]\
    \ strings, string suffix) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].EndsWith(suffix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring.\n   \
    \         \n*/\nstring[] filter_by_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring.\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring anywhere\
    \ in the string.\n            \n*/\nstring[] filter_by_contains_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring\
    \ anywhere in the string.\n            \n*/\nstring[] filter_by_not_contains_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring at the\
    \ start of the string.\n            \n*/\nstring[] filter_by_contains_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n", "{\n\
    \    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].startsWith(prefix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that end with a given suffix.\n            \n*/\nstring[] filter_by_suffix(string[]\
    \ strings, string suffix) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].endsWith(suffix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring.\n   \
    \         \n*/\nstring[] filter_by_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring.\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring.\n   \
    \         \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring.\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring.\n   \
    \         \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring.\n\
    \            \n*/", "{\n    string[] result = new string[strings.length];\n  \
    \  int i = 0;\n    for (string s : strings) {\n        if (s.StartsWith(prefix))\
    \ {\n            result[i++] = s;\n        }\n    }\n    return result;\n}\n/*\n\
    \ Filter an input list of strings only for ones that end with a given suffix.\n\
    \            \n*/\nstring[] filter_by_suffix(string[] strings, string suffix)\
    \ \n{\n    string[] result = new string[strings.length];\n    int i = 0;\n   \
    \ for (string s : strings) {\n        if (s.EndsWith(suffix)) {\n            result[i++]\
    \ = s;\n        }\n    }\n    return result;\n}\n/*\n Filter an input list of\
    \ strings only for ones that contain a given substring.\n            \n*/\nstring[]\
    \ filter_by_substring(string[] strings, string substring) \n{\n    string[] result\
    \ = new string[strings.length];\n    int i = 0;\n    for (string s : strings)\
    \ {\n        if (s.Contains(substring)) {\n            result[i++] = s;\n    \
    \    }\n    }\n    return result;\n}\n/*\n Filter an input list of strings only\
    \ for ones that do not contain a given substring.\n            \n*/\nstring[]\
    \ filter_by_not_substring(string[] strings, string substring) \n{\n    string[]\
    \ result = new string[strings.length];\n    int i = 0;\n    for (string s : strings)\
    \ {\n        if (!s.Contains(substring)) {\n            result[i++] = s;\n   \
    \     }\n    }\n    return result;\n}\n/*\n Filter an input list of strings only\
    \ for ones that do not contain a given prefix.\n            \n*/\nstring[] filter_by_not_prefix(string[]\
    \ strings, string prefix) \n{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    for (string s : strings) {\n        if (s.StartsWith(prefix))\
    \ {\n            result[i++] = s;\n        }\n    }\n    return result;\n}\n/*\n\
    \ Filter an input list of strings only for ones that do not contain a given suffix.\n\
    \            \n*/\nstring[] filter_by_not_suffix(string[] strings, string suffix)\
    \ \n{\n    string[] result = new string[strings.length];\n    int i = 0;\n   \
    \ for (string s : strings) {\n        if (s.EndsWith(suffix)) {\n            result[i++]\
    \ = s;\n        }\n    }\n    return result;\n}\n/*\n Filter an input list of\
    \ strings only for ones that do not contain a given substring.\n            \n\
    */\nstring[] filter_by_not_substring(string[] strings, string substring) \n{\n\
    \    string[] result = new string[strings.length];\n    int i = 0;\n    for (string\
    \ s : strings) {\n        if (!s.Contains(substring)) {\n            result[i++]\
    \ = s;\n        }\n    }\n    return result;\n}\n/*\n Filter an input list of\
    \ strings only for ones that do not ", "{\n\tstring[] result = new string[strings.length];\n\
    \tfor (int i = 0; i < strings.length; ++i)\n\t\tif (strings[i].StartsWith(prefix))\n\
    \t\t\tresult[i] = strings[i];\n\treturn result;\n}", "{\n    string[] result =\
    \ new string[strings.length];\n    int i = 0;\n    foreach(string s in strings)\n\
    \    {\n        if(s.StartsWith(prefix))\n        {\n            result[i++] =\
    \ s;\n        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=1 |>\n<|\
    \ a dscore=1 |>\nI wrote a small library to solve this problem in one line. \n\
    <code>\nimport std.array;\nimport std.conv;\nimport std.string;", "{\n    string[]\
    \ result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a |>\n<| c |>\nThanks\
    \ for the answer. I'm still trying to understand how this works. I understand\
    \ that it's using LINQ, but I don't understand how it works. What does the `Where`\
    \ method do? What does `string[] result = new string[strings.length];` do? What\
    \ does `result[i] = strings[i];` do? What does `strings[i].StartsWith(prefix)`\
    \ do?\n<|/ c |>\n<| c |>\n`Where` filters the list to only include those items\
    \ that match the predicate. `string[] result = new string[strings.length];` creates\
    \ an array of the same length as the original list. `result[i] = strings[i];`\
    \ assigns the current item to the new array. `strings[i].StartsWith(prefix)` checks\
    \ if the current item starts with the given prefix.\n<|/ c |>\n<| c |>\nI understand\
    \ that `Where` filters the list to only include those items that match the predicate,\
    \ but I don't understand how it works. What does the `Where` method do? What does\
    \ `string[] result = new string[strings.length];` do? What does `result[i] = strings[i];`\
    \ do? What does `strings[i].StartsWith(prefix)` do?\n<|/ c |>\n<| c |>\n`Where`\
    \ filters the list to only include those items that match the predicate. `string[]\
    \ result = new string[strings.length];` creates an array of the same length as\
    \ the original list. `result[i] = strings[i];` assigns the current item to the\
    \ new array. `strings[i].StartsWith(prefix)` checks if the current item starts\
    \ with the given prefix.\n<|/ c |>\n<| c |>\nThanks for the explanation. I'm still\
    \ trying to understand how this works. I understand that it's using LINQ, but\
    \ I don't understand how it works. What does the `Where` method do? What does\
    \ `string[] result = new string[strings.length];` do? What does `result[i] = strings[i];`\
    \ do? What does `strings[i].StartsWith(prefix)` do?\n<|/ c |>\n<| a tags=c#,linq\
    \ |>\n<code>\nvar filtered = strings.Where(s => s.StartsWith(\"A\"));\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nThanks for the answer. I'm still trying to understand\
    \ how this works. I understand that it's ", "{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    foreach(string s in strings)\n    {\n        if(s.StartsWith(prefix))\n\
    \            result[i++] = s;\n    }\n    return result;\n}\n/*\n Filter an input\
    \ list of strings only for ones that end with a given suffix.\n            \n\
    */\nstring[] filter_by_suffix(string[] strings, string suffix) \n{\n    string[]\
    \ result = new string[strings.length];\n    int i = 0;\n    foreach(string s in\
    \ strings)\n    {\n        if(s.EndsWith(suffix))\n            result[i++] = s;\n\
    \    }\n    return result;\n}\n/*\n Filter an input list of strings only for ones\
    \ that contain a given substring.\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    foreach(string s in strings)\n    {\n        if(s.Contains(substring))\n\
    \            result[i++] = s;\n    }\n    return result;\n}\n/*\n Filter an input\
    \ list of strings only for ones that contain a given substring.\n            \n\
    */\nstring[] filter_by_substring(string[] strings, string substring, int startIndex,\
    \ int endIndex) \n{\n    string[] result = new string[strings.length];\n    int\
    \ i = 0;\n    foreach(string s in strings)\n    {\n        if(s.Contains(substring,\
    \ startIndex, endIndex))\n            result[i++] = s;\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that contain a given substring.\n\
    \            \n*/\nstring[] filter_by_substring(string[] strings, string substring,\
    \ int startIndex) \n{\n    string[] result = new string[strings.length];\n   \
    \ int i = 0;\n    foreach(string s in strings)\n    {\n        if(s.Contains(substring,\
    \ startIndex))\n            result[i++] = s;\n    }\n    return result;\n}\n/*\n\
    \ Filter an input list of strings only for ones that contain a given substring.\n\
    \            \n*/\nstring[] filter_by_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    int i = 0;\n   \
    \ foreach(string s in strings)\n    {\n        if(s.Contains(substring))\n   \
    \         result[i++] = s;\n    }\n    return result;\n}\n/*\n Filter an input\
    \ list of strings only for ones that contain a given substring.\n            \n\
    */\nstring[] filter_by_substring(string[] strings, string substring, int startIndex,\
    \ int endIndex) \n{\n    string[] result = new string[strings.length];\n    int\
    \ i = 0;\n    foreach(string s in strings)\n    {\n", "{\n    string[] result\
    \ = new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (strings[i].StartsWith(prefix))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n/*\n Filter an input list of strings only for ones\
    \ that end with a given suffix.\n            \n*/\nstring[] filter_by_suffix(string[]\
    \ strings, string suffix) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].EndsWith(suffix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring.\n   \
    \         \n*/\nstring[] filter_by_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring.\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given prefix.\n\
    \            \n*/\nstring[] filter_by_not_prefix(string[] strings, string prefix)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given suffix.\n\
    \            \n*/\nstring[] filter_by_not_suffix(string[] strings, string suffix)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (strings[i].EndsWith(suffix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring.\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given prefix.\n\
    \            \n*/", "{\n    string[] result = new string[strings.length];\n  \
    \  for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].startsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that end with a given suffix.\n     \
    \       \n*/\nstring[] filter_by_suffix(string[] strings, string suffix) \n{\n\
    \    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].endsWith(suffix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that contain a given substring.\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring.\n   \
    \         \n*/\nstring[] filter_by_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(caseSensitive\
    \ ? strings[i].contains(substring) : strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring.\n   \
    \         \n*/\nstring[] filter_by_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(caseSensitive\
    \ ? strings[i].contains(substring) : strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring.\n   \
    \         \n*/\nstring[] filter_by_substring(string[] strings, string substring,\
    \ bool caseSensitive, bool ignoreCase, bool ignoreCase) \n{\n    string[] result\
    \ = new string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n\
    \    {\n        if(caseSensitive ? strings[i].contains(substring) : strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring.\n   \
    \         \n*/\nstring[] filter_by_substring(string[] strings, string substring,\
    \ bool ", "{\n    string[] result = new string[strings.length];\n    for (int\
    \ i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that end with a given suffix.\n     \
    \       \n*/\nstring[] filter_by_suffix(string[] strings, string suffix) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].EndsWith(suffix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that contain a given substring.\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring.\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_not_prefix(string[] strings, string prefix)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not end with a given suffix.\n\
    \            \n*/\nstring[] filter_by_not_suffix(string[] strings, string suffix)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (strings[i].EndsWith(suffix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring.\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not start with a given prefix.\n",
  "{\n    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that end with a given suffix.\n            \n*/\nstring[] filter_by_suffix(string[]\
    \ strings, string suffix) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].EndsWith(suffix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring.\n   \
    \         \n*/\nstring[] filter_by_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring.\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given prefix.\n\
    \            \n*/\nstring[] filter_by_not_prefix(string[] strings, string prefix)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given suffix.\n\
    \            \n*/\nstring[] filter_by_not_suffix(string[] strings, string suffix)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (strings[i].EndsWith(suffix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring.\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given prefix.\n\
    \            \n*/", "{\n    string[] result = new string[strings.length];\n  \
    \  int i = 0;\n    foreach(string s in strings)\n    {\n        if(s.StartsWith(prefix))\n\
    \            result[i++] = s;\n    }\n    return result;\n}\n/*\n Filter an input\
    \ list of strings only for ones that end with a given suffix.\n            \n\
    */\nstring[] filter_by_suffix(string[] strings, string suffix) \n{\n    string[]\
    \ result = new string[strings.length];\n    int i = 0;\n    foreach(string s in\
    \ strings)\n    {\n        if(s.EndsWith(suffix))\n            result[i++] = s;\n\
    \    }\n    return result;\n}\n/*\n Filter an input list of strings only for ones\
    \ that contain a given substring.\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    foreach(string s in strings)\n    {\n        if(s.Contains(substring))\n\
    \            result[i++] = s;\n    }\n    return result;\n}\n/*\n Filter an input\
    \ list of strings only for ones that do not contain a given substring.\n     \
    \       \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    int i = 0;\n   \
    \ foreach(string s in strings)\n    {\n        if(!s.Contains(substring))\n  \
    \          result[i++] = s;\n    }\n    return result;\n}\n/*\n Filter an input\
    \ list of strings only for ones that do not contain a given prefix.\n        \
    \    \n*/\nstring[] filter_by_not_prefix(string[] strings, string prefix) \n{\n\
    \    string[] result = new string[strings.length];\n    int i = 0;\n    foreach(string\
    \ s in strings)\n    {\n        if(s.StartsWith(prefix))\n            result[i++]\
    \ = s;\n    }\n    return result;\n}\n/*\n Filter an input list of strings only\
    \ for ones that do not contain a given suffix.\n            \n*/\nstring[] filter_by_not_suffix(string[]\
    \ strings, string suffix) \n{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    foreach(string s in strings)\n    {\n        if(s.EndsWith(suffix))\n\
    \            result[i++] = s;\n    }\n    return result;\n}\n/*\n Filter an input\
    \ list of strings only for ones that do not contain a given substring.\n     \
    \       \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    int i = 0;\n   \
    \ foreach(string s in strings)\n    {\n        if(!s.Contains(substring))\n  \
    \          result[i++] = s;\n    }\n", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that end with a given suffix.\n     \
    \       \n*/\nstring[] filter_by_suffix(string[] strings, string suffix) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].EndsWith(suffix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that contain a given substring.\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring.\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring.\n   \
    \         \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring.\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring.\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring.\n\
    \            \n*/\nstring", "{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that end with a given suffix.\n     \
    \       \n*/\nstring[] filter_by_suffix(string[] strings, string suffix) \n{\n\
    \    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].EndsWith(suffix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that contain a given substring.\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring.\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring in a given\
    \ order.\n            \n*/\nstring[] filter_by_substring(string[] strings, string\
    \ substring, bool in_order) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring\
    \ in a given order.\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool in_order) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that start with a given prefix.\n   \
    \         \n*/\nstring[] filter_by_prefix_in_order(string[] strings, string prefix)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(strings[i].StartsWith(prefix))\n \
    \           result[i] = strings[i];\n    }\n    return result;\n", "{\n    string[]\
    \ result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].StartsWith(prefix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that end with a given suffix.\n            \n*/\nstring[] filter_by_suffix(string[]\
    \ strings, string suffix) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].EndsWith(suffix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring.\n   \
    \         \n*/\nstring[] filter_by_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring.\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given prefix.\n\
    \            \n*/\nstring[] filter_by_not_prefix(string[] strings, string prefix)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(strings[i].StartsWith(prefix))\n \
    \           result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given suffix.\n\
    \            \n*/\nstring[] filter_by_not_suffix(string[] strings, string suffix)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(strings[i].EndsWith(suffix))\n   \
    \         result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter an\
    \ input list of strings only for ones that do not contain a given substring.\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for one", "{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that end with a given suffix.\n     \
    \       \n*/\nstring[] filter_by_suffix(string[] strings, string suffix) \n{\n\
    \    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].EndsWith(suffix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that contain a given substring.\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring.\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring ignoring\
    \ case.\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool ignore_case) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(ignore_case)\n\
    \        {\n            string s = strings[i];\n            s = s.ToLower();\n\
    \            if(!s.Contains(substring))\n                result[i] = s;\n    \
    \    }\n        else\n        {\n            string s = strings[i];\n        \
    \    if(!s.Contains(substring))\n                result[i] = s;\n        }\n \
    \   }\n    return result;\n}\n/*\n Filter an input list of strings only for ones\
    \ that do not contain a given substring ignoring case.\n            \n*/\nstring[]\
    \ filter_by_not_substring(string[] strings, string substring, bool ignore_case)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(ignore_case)\n        {\n        \
    \    string s = strings[i];\n            s = s.ToLower();\n            if(s.Contains(substring))\n\
    \                result[i] = s;\n        }\n        else\n        {\n        \
    \    string s = strings[i];\n            if(s.Contains(substring))\n         \
    \       result[i] = ", "{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].startsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that end with a given suffix.\n     \
    \       \n*/\nstring[] filter_by_suffix(string[] strings, string suffix) \n{\n\
    \    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].endsWith(suffix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that contain a given substring.\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring.\n   \
    \         \n*/\nstring[] filter_by_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(caseSensitive\
    \ ? strings[i].contains(substring) : strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring.\n   \
    \         \n*/\nstring[] filter_by_substring(string[] strings, string substring,\
    \ int startIndex, int endIndex) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring,\
    \ startIndex, endIndex))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that contain\
    \ a given substring.\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring, int startIndex, int endIndex, bool caseSensitive)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(caseSensitive ? strings[i].contains(substring,\
    \ startIndex, endIndex) : strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ startIndex, endIndex))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that contain\
    \ a given substring.\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring, bool caseSensi", "{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].startsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that end with a given suffix.\n     \
    \       \n*/\nstring[] filter_by_suffix(string[] strings, string suffix) \n{\n\
    \    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].endsWith(suffix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that contain a given substring.\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring.\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_not_prefix(string[] strings, string prefix)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(strings[i].startsWith(prefix))\n \
    \           result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not end with a given suffix.\n\
    \            \n*/\nstring[] filter_by_not_suffix(string[] strings, string suffix)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(strings[i].endsWith(suffix))\n   \
    \         result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter an\
    \ input list of strings only for ones that do not contain a given substring.\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not start ", "{\n    string[]\
    \ result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].startsWith(prefix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a tags=c#,string,arrays\
    \ |>\n<| c |>\nI like your solution, however I believe that `string[] result =\
    \ new string[strings.length];` should be `string[] result = new string[strings.length\
    \ - 1];`\n<|/ c |>\n<| c |>\n: No, `string[] result = new string[strings.length];`\
    \ will create an array with enough space for all the strings in the original array.\
    \ `string[] result = new string[strings.length - 1];` will create an array with\
    \ enough space for all the strings in the original array except the last one.\
    \ `string[] result = new string[strings.length - 2];` will create an array with\
    \ enough space for all the strings in the original array except the last two strings.\n\
    <|/ c |>\n<| c |>\n: Thanks, I didn't know that. I've updated my answer.\n<|/\
    \ c |>\n<| c |>\n: Thanks, I didn't know that. I've updated my answer.\n<|/ c\
    \ |>\n<| c |>\n: Thanks, I didn't know that. I've updated my answer.\n<|/ c |>\n\
    <| a tags=c#,string,arrays |>\n<code>\nstring[] result = new string[strings.length];\n\
    </code>\nThis line creates an array of strings of length strings.length.\n<code>\n\
    for (int i = 0; i < strings.length; i++)\n</code>\nThis line iterates over each\
    \ element in the array and assigns it to the variable i.\n<code>\nresult[i] =\
    \ strings[i];\n</code>\nThis line assigns the element at index i to the variable\
    \ result[i].\n<code>\nstring[] result = new string[strings.length - 1];\n</code>\n\
    This line creates an array of strings of length strings.length - 1.\n<code>\n\
    for (int i = 0; i < strings.length; i++)\n</code>\nThis line iterates over each\
    \ element in the array and assigns it to the variable i.\n<code>\nresult[i] =\
    \ strings[i];\n</code>\nThis line assigns the element at index i to the variable\
    \ result[i].\n<code>\nstring[] result = new string[strings.length - 2];\n</code>\n\
    This line creates an array of strings of length strings.length - 2.\n<code>\n\
    for (int i = 0; i < strings.length; i++)\n</code>\nThis line iterates over each\
    \ element in the array and assigns it to the variable i.\n<code>\nresult[i] =\
    \ strings[i];\n</code>\nThis line assigns the element at index i to the variable\
    \ result[i].\n<|/ a dscore=2 |>\n<| c |>\n", "{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].startsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}", "{\n\tstring[]\
    \ result = new string[strings.length];\n\tfor (int i = 0; i < strings.length;\
    \ ++i)\n\t{\n\t\tif (strings[i].StartsWith(prefix))\n\t\t\tresult[i] = strings[i];\n\
    \t}\n\treturn result;\n}\n/*\n Filter an input list of strings only for ones that\
    \ end with a given suffix.\n            \n*/\nstring[] filter_by_suffix(string[]\
    \ strings, string suffix) \n{\n\tstring[] result = new string[strings.length];\n\
    \tfor (int i = 0; i < strings.length; ++i)\n\t{\n\t\tif (strings[i].EndsWith(suffix))\n\
    \t\t\tresult[i] = strings[i];\n\t}\n\treturn result;\n}\n/*\n Filter an input\
    \ list of strings only for ones that contain a given substring.\n            \n\
    */\nstring[] filter_by_substring(string[] strings, string substring) \n{\n\tstring[]\
    \ result = new string[strings.length];\n\tfor (int i = 0; i < strings.length;\
    \ ++i)\n\t{\n\t\tif (strings[i].Contains(substring))\n\t\t\tresult[i] = strings[i];\n\
    \t}\n\treturn result;\n}\n/*\n Filter an input list of strings only for ones that\
    \ do not contain a given substring.\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring) \n{\n\tstring[] result = new string[strings.length];\n\
    \tfor (int i = 0; i < strings.length; ++i)\n\t{\n\t\tif (!strings[i].Contains(substring))\n\
    \t\t\tresult[i] = strings[i];\n\t}\n\treturn result;\n}\n/*\n Filter an input\
    \ list of strings only for ones that do not contain a given prefix.\n        \
    \    \n*/\nstring[] filter_by_not_prefix(string[] strings, string prefix) \n{\n\
    \tstring[] result = new string[strings.length];\n\tfor (int i = 0; i < strings.length;\
    \ ++i)\n\t{\n\t\tif (strings[i].StartsWith(prefix))\n\t\t\tresult[i] = strings[i];\n\
    \t}\n\treturn result;\n}\n/*\n Filter an input list of strings only for ones that\
    \ do not contain a given suffix.\n            \n*/\nstring[] filter_by_not_suffix(string[]\
    \ strings, string suffix) \n{\n\tstring[] result = new string[strings.length];\n\
    \tfor (int i = 0; i < strings.length; ++i)\n\t{\n\t\tif (strings[i].EndsWith(suffix))\n\
    \t\t\tresult[i] = strings[i];\n\t}\n\treturn result;\n}\n/*\n Filter an input\
    \ list of strings only for ones that do not contain a given substring.\n     \
    \       \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n\tstring[] result = new string[strings.length];\n\tfor (int i = 0; i <\
    \ strings.length; ++i)\n\t{\n\t\tif (!strings[i].Contains(substring))\n\t\t\t\
    result[i] = strings[i];\n\t}\n\treturn result;\n", "{\n    string[] result = new\
    \ string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n    {\n\
    \        if(strings[i].StartsWith(prefix))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n/*\n Filter an input list of strings only for ones\
    \ that end with a given suffix.\n            \n*/\nstring[] filter_by_suffix(string[]\
    \ strings, string suffix) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].EndsWith(suffix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring.\n   \
    \         \n*/\nstring[] filter_by_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring anywhere\
    \ in the string.\n            \n*/\nstring[] filter_by_substring_any(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring anywhere\
    \ in the string and are longer than a given length.\n            \n*/\nstring[]\
    \ filter_by_substring_any_longer(string[] strings, string substring, int length)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(strings[i].Contains(substring) &&\
    \ strings[i].Length > length)\n            result[i] = strings[i];\n    }\n  \
    \  return result;\n}\n/*\n Filter an input list of strings only for ones that\
    \ contain a given substring anywhere in the string and are longer than a given\
    \ length.\n            \n*/\nstring[] filter_by_substring_any_longer_prefix(string[]\
    \ strings, string substring, int length) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].Contains(substring)\
    \ && strings[i].Length > length)\n            result[i] = strings[i];\n    }\n\
    \    return result;\n}\n/*\n Filter an input list of strings only for ones that\
    \ contain a given substring anywhere in the string and are longer than a given\
    \ length.\n            \n*/\nstring[] filter_by_substring_any_longer_suffix(string[]\
    \ strings, string sub", "{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].startsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that end with a given suffix.\n     \
    \       \n*/\nstring[] filter_by_suffix(string[] strings, string suffix) \n{\n\
    \    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].endsWith(suffix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that contain a given substring.\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring.\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring anywhere\
    \ in the string.\n            \n*/\nstring[] filter_by_contains_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring\
    \ anywhere in the string.\n            \n*/\nstring[] filter_by_not_contains_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring at the\
    \ beginning.\n            \n*/\nstring[] filter_by_contains_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of ", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].startsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that end with a given suffix.\n     \
    \       \n*/\nstring[] filter_by_suffix(string[] strings, string suffix) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].endsWith(suffix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that contain a given substring.\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that match a regular expression.\n  \
    \          \n*/\nstring[] filter_by_regex(string[] strings, string regex) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].matches(regex))\n            result[i] =\
    \ strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that match a regular expression.\n            \n*/\nstring[] filter_by_regex_case(string[]\
    \ strings, string regex) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].matches(regex,\
    \ RegexOptions.IgnoreCase))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that match a\
    \ regular expression.\n            \n*/\nstring[] filter_by_regex_not_case(string[]\
    \ strings, string regex) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].matches(regex,\
    \ RegexOptions.IgnoreCase) == false)\n            result[i] = strings[i];\n  \
    \  }\n    return result;\n}\n/*\n Filter an input list of strings only for ones\
    \ that match a regular expression.\n            \n*/\nstring[] filter_by_regex_not_case_sensitive(string[]\
    \ strings, string regex) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].matches(regex,\
    \ RegexOptions.IgnoreCase) == false)\n            result[i] = strings[i];\n  \
    \  }\n    return result;\n}\n/*\n Filter an input list of strings only for one",
  "{\n    string[] result = new string[strings.length];\n    int i = 0;\n    for (string\
    \ s : strings) {\n        if (s.StartsWith(prefix)) {\n            result[i++]\
    \ = s;\n        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=c#,linq,.net,string\
    \ |>\n<| c |>\nI like the `StartsWith` solution, but I wonder if there's a performance\
    \ difference between `StartsWith` and `IndexOf`?\n<|/ c |>\n<| c |>\n: I doubt\
    \ it would be significant, but you could test it yourself. I suspect `StartsWith`\
    \ would be faster, but you'd have to test it to be sure. `IndexOf` would probably\
    \ be faster, but you'd have to test it to be sure.\n<|/ c |>\n<| c |>\n: I tested\
    \ it myself and `IndexOf` is indeed faster.\n<|/ c |>\n<| c |>\n: I tested it\
    \ myself and `IndexOf` is indeed faster. Thanks.\n<|/ c |>\n<| a tags=c#,linq,.net,string\
    \ |>\n<code>\nvar result = strings.Where(s => s.StartsWith(prefix)).ToArray();\n\
    </code>\n<|/ a dscore=5 |>\n<| c |>\nThis doesn't answer the question, which is\
    \ about how to do this in LINQ, not how to do it with loops.\n<|/ c |>\n<| c |>\n\
    : It does answer the question as asked, which was \"how do I do this in LINQ?\"\
    \ The answer is \"use LINQ\".\n<|/ c |>\n<| c |>\n: It doesn't answer the question\
    \ as asked, which was \"how do I do this in LINQ?\" The answer is \"use LINQ\"\
    .\n<|/ c |>\n<| c |>\n: It doesn't answer the question as asked, which was \"\
    how do I do this in LINQ?\" The answer is \"use LINQ\".\n<|/ c |>\n<| c |>\n:\
    \ It doesn't answer the question as asked, which was \"how do I do this in LINQ?\"\
    \ The answer is \"use LINQ\".\n<|/ c |>\n<| a tags=c#,linq,.net,string |>\n<code>\n\
    var result = strings.Where(s => s.StartsWith(prefix)).ToArray();\n</code>\n<|/\
    \ a dscore=5 |>\n<| c |>\nThis doesn't answer the question, which is about how\
    \ to do this in LIN", "{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].startsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that end with a given suffix.\n     \
    \       \n*/\nstring[] filter_by_suffix(string[] strings, string suffix) \n{\n\
    \    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].endsWith(suffix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that contain a given substring.\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring.\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring.\n   \
    \         \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring,\
    \ caseSensitive))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain a given\
    \ substring.\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring,\
    \ caseSensitive))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain a given\
    \ substring.\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring, bool caseSensitive, bool partialMatch) \n{\n    string[] result\
    \ = new string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n\
    \    {\n        if(!strings[i].contains(", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that end with a given suffix.\n     \
    \       \n*/\nstring[] filter_by_suffix(string[] strings, string suffix) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].EndsWith(suffix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that contain a given substring.\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring anywhere\
    \ in the string.\n            \n*/\nstring[] filter_by_substring_any(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring anywhere\
    \ in the string and are longer than a given length.\n            \n*/\nstring[]\
    \ filter_by_substring_any_longer(string[] strings, string substring, int length)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring)\
    \ && strings[i].Length > length)\n            result[i] = strings[i];\n    }\n\
    \    return result;\n}\n/*\n Filter an input list of strings only for ones that\
    \ contain a given substring anywhere in the string and are longer than a given\
    \ length.\n            \n*/\nstring[] filter_by_substring_any_longer_prefix(string[]\
    \ strings, string substring, int length) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring)\
    \ && strings[i].Length > length)\n            result[i] = strings[i];\n    }\n\
    \    return result;\n}\n/*\n Filter an input list of strings only for ones that\
    \ contain a given substring anywhere in the string and are longer than a given\
    \ length.\n            \n*/\nstring[] filter_by_substring_any_longer_suffix(string[]\
    \ strings, string substring, int length) \n{", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that end with a given suffix.\n     \
    \       \n*/\nstring[] filter_by_suffix(string[] strings, string suffix) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].EndsWith(suffix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that contain a given substring.\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring.\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring anywhere\
    \ in the string.\n            \n*/\nstring[] filter_by_contains_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring\
    \ anywhere in the string.\n            \n*/\nstring[] filter_by_not_contains_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring at the\
    \ beginning.\n            \n*/\nstring[] filter_by_contains_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for one", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that end with a given suffix.\n     \
    \       \n*/\nstring[] filter_by_suffix(string[] strings, string suffix) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].EndsWith(suffix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that contain a given substring.\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring.\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring in a given\
    \ order.\n            \n*/\nstring[] filter_by_substring_order(string[] strings,\
    \ string substring, bool ascending) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    Array.Sort(result, (a, b) =>\
    \ ascending ? a.Contains(substring) : b.Contains(substring));\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain a given\
    \ substring in a given order.\n            \n*/\nstring[] filter_by_not_substring_order(string[]\
    \ strings, string substring, bool ascending) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    Array.Sort(result, (a, b) =>\
    \ ascending ? a.Contains(substring) : b.Contains(substring));\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that contain a given substring\
    \ in a given order.\n            \n*/\nstring[] filter_by_substring_order_and_substring(string[]\
    \ strings, string substring, ", "{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    foreach(string s in strings)\n    {\n        if(s.StartsWith(prefix))\n\
    \        {\n            result[i++] = s;\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=c#,linq,.net,string |>\n<| c |>\nI like your answer but\
    \ I think it would be better to use a `StringBuilder` instead of `string[]` since\
    \ `string[]` will allocate a new array every time you append something to it.\n\
    <|/ c |>\n<| c |>\n: I agree, StringBuilder would be better. I'll edit my answer\
    \ to use StringBuilder. Thanks.\n<|/ c |>\n<| c |>\n: Thanks for your answer.\
    \ I think it would be better to use a StringBuilder instead of string[] since\
    \ string[] will allocate a new array every time you append something to it.\n\
    <|/ c |>\n<| c |>\n: Thanks for your answer. I think it would be better to use\
    \ a StringBuilder instead of string[] since string[] will allocate a new array\
    \ every time you append something to it.\n<|/ c |>\n<| c |>\n: Thanks for your\
    \ answer. I think it would be better to use a StringBuilder instead of string[]\
    \ since string[] will allocate a new array every time you append something to\
    \ it.\n<|/ c |>\n<| a tags=c#,linq,.net,string |>\n<code>\nstring[] strings =\
    \ { \"a\", \"b\", \"c\", \"d\", \"e\" };\nstring prefix = \"a\";\nstring[] result\
    \ = strings.Where(s => s.StartsWith(prefix)).ToArray();\n</code>\n<|/ a dscore=5\
    \ |>\n<| c |>\nThis should be the accepted answer. No need to use LINQ. Just use\
    \ the `Where` extension method and you're done.\n<|/ c |>\n<| c |>\nThis should\
    \ be the accepted answer. No need to use LINQ. Just use the `Where` extension\
    \ method and you're done.\n<|/ c |>\n<| c |>\nThis should be the accepted answer.\
    \ No need to use LINQ. Just use the `Where` extension method and you're done.\n\
    <|/ c |>\n<| c |>\nThis should be the accepted answer. No need to use LINQ. Just\
    \ use the `Where` extension method and you're done.\n<|/ c |>\n<| c |>\nThis should\
    \ be the accepted answer. No need to use LINQ. Just use the `Where` extension\
    \ method and you're done.\n<|/ c |>\n<| a dscore=5 ", "{\n\tstring[] result =\
    \ new string[strings.length];\n\tfor (int i = 0; i < strings.length; ++i)\n\t\t\
    if (strings[i].startsWith(prefix))\n\t\t\tresult[i] = strings[i];\n\treturn result;\n\
    }\n/*\n Filter an input list of strings only for ones that end with a given suffix.\n\
    \            \n*/\nstring[] filter_by_suffix(string[] strings, string suffix)\
    \ \n{\n\tstring[] result = new string[strings.length];\n\tfor (int i = 0; i <\
    \ strings.length; ++i)\n\t\tif (strings[i].endsWith(suffix))\n\t\t\tresult[i]\
    \ = strings[i];\n\treturn result;\n}\n/*\n Filter an input list of strings only\
    \ for ones that contain a given substring.\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n\tstring[] result = new string[strings.length];\n\
    \tfor (int i = 0; i < strings.length; ++i)\n\t\tif (strings[i].contains(substring))\n\
    \t\t\tresult[i] = strings[i];\n\treturn result;\n}\n/*\n Filter an input list\
    \ of strings only for ones that do not contain a given substring.\n          \
    \  \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n\tstring[] result = new string[strings.length];\n\tfor (int i = 0; i <\
    \ strings.length; ++i)\n\t\tif (!strings[i].contains(substring))\n\t\t\tresult[i]\
    \ = strings[i];\n\treturn result;\n}\n/*\n Filter an input list of strings only\
    \ for ones that do not start with a given prefix.\n            \n*/\nstring[]\
    \ filter_by_not_prefix(string[] strings, string prefix) \n{\n\tstring[] result\
    \ = new string[strings.length];\n\tfor (int i = 0; i < strings.length; ++i)\n\t\
    \tif (!strings[i].startsWith(prefix))\n\t\t\tresult[i] = strings[i];\n\treturn\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that do not end\
    \ with a given suffix.\n            \n*/\nstring[] filter_by_not_suffix(string[]\
    \ strings, string suffix) \n{\n\tstring[] result = new string[strings.length];\n\
    \tfor (int i = 0; i < strings.length; ++i)\n\t\tif (!strings[i].endsWith(suffix))\n\
    \t\t\tresult[i] = strings[i];\n\treturn result;\n}\n/*\n Filter an input list\
    \ of strings only for ones that do not contain a given substring.\n          \
    \  \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n\tstring[] result = new string[strings.length];\n\tfor (int i = 0; i <\
    \ strings.length; ++i)\n\t\tif (!strings[i].contains(substring))\n\t\t\tresult[i]\
    \ = strings[i];\n\treturn result;\n}\n/*\n Filter an input list of strings only\
    \ for ones that do not start with a given prefix.\n            \n*/\nstring[]\
    \ filter_by_not_prefix(string[] ", "{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].startsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that end with a given suffix.\n     \
    \       \n*/\nstring[] filter_by_suffix(string[] strings, string suffix) \n{\n\
    \    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].endsWith(suffix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that contain a given substring.\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring.\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_not_prefix(string[] strings, string prefix)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(strings[i].startsWith(prefix))\n \
    \           result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not end with a given suffix.\n\
    \            \n*/\nstring[] filter_by_not_suffix(string[] strings, string suffix)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(strings[i].endsWith(suffix))\n   \
    \         result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter an\
    \ input list of strings only for ones that do not contain a given substring.\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not start ", "{\n    string[]\
    \ result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].startsWith(prefix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}", "{\n    string[] result = new\
    \ string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n    {\n\
    \        if(strings[i].startsWith(prefix))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n/*\n Filter an input list of strings only for ones\
    \ that end with a given suffix.\n            \n*/\nstring[] filter_by_suffix(string[]\
    \ strings, string suffix) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].endsWith(suffix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring.\n   \
    \         \n*/\nstring[] filter_by_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that match a regular expression.\n  \
    \          \n*/\nstring[] filter_by_regex(string[] strings, string regex) \n{\n\
    \    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].matches(regex))\n            result[i] =\
    \ strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that match a regular expression.\n            \n*/\nstring[] filter_by_regex_case(string[]\
    \ strings, string regex) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].matches(regex,\
    \ RegexOptions.IgnoreCase))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that match a\
    \ regular expression.\n            \n*/\nstring[] filter_by_regex_case_sensitive(string[]\
    \ strings, string regex) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].matches(regex,\
    \ RegexOptions.IgnoreCase))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that match a\
    \ regular expression.\n            \n*/\nstring[] filter_by_regex_not_case(string[]\
    \ strings, string regex) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].matches(regex,\
    \ RegexOptions.IgnoreCase))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of ", "{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that end with a given suffix.\n     \
    \       \n*/\nstring[] filter_by_suffix(string[] strings, string suffix) \n{\n\
    \    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].EndsWith(suffix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that contain a given substring.\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that match a regular expression.\n  \
    \          \n*/\nstring[] filter_by_regex(string[] strings, string regex) \n{\n\
    \    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].Matches(regex))\n            result[i] =\
    \ strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that match a regular expression.\n            \n*/\nstring[] filter_by_regex_case_insensitive(string[]\
    \ strings, string regex) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].Matches(regex,\
    \ RegexOptions.IgnoreCase))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that match a\
    \ regular expression.\n            \n*/\nstring[] filter_by_regex_case_insensitive(string[]\
    \ strings, string regex, string replacement) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].Matches(regex,\
    \ RegexOptions.IgnoreCase))\n            result[i] = strings[i].Replace(regex,\
    \ replacement);\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that match a regular expression.\n            \n*/\nstring[] filter_by_regex_case_insensitive(string[]\
    \ strings, string regex, string replacement, string replacement2) \n{\n    string[]\
    \ result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].Matches(regex, ", "{\n    string[] result\
    \ = new string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n\
    \    {\n        if(strings[i].startsWith(prefix))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n/*\n Filter an input list of strings only for ones\
    \ that end with a given suffix.\n            \n*/\nstring[] filter_by_suffix(string[]\
    \ strings, string suffix) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].endsWith(suffix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring.\n   \
    \         \n*/\nstring[] filter_by_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring.\n   \
    \         \n*/\nstring[] filter_by_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(caseSensitive\
    \ ? strings[i].contains(substring) : strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring.\n   \
    \         \n*/\nstring[] filter_by_substring(string[] strings, string substring,\
    \ int startIndex, int endIndex) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring,\
    \ startIndex, endIndex))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that contain\
    \ a given substring.\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring, int startIndex, int endIndex, bool caseSensitive)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(caseSensitive ? strings[i].contains(substring,\
    \ startIndex, endIndex) : strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ startIndex, endIndex))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that contain\
    \ a given substring.\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring, int startIndex, int ", "{\n    string[] result =\
    \ new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (strings[i].StartsWith(prefix))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n/*\n Filter an input list of strings only for ones\
    \ that end with a given suffix.\n            \n*/\nstring[] filter_by_suffix(string[]\
    \ strings, string suffix) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].EndsWith(suffix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring.\n   \
    \         \n*/\nstring[] filter_by_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring.\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given prefix.\n\
    \            \n*/\nstring[] filter_by_not_prefix(string[] strings, string prefix)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given suffix.\n\
    \            \n*/\nstring[] filter_by_not_suffix(string[] strings, string suffix)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (strings[i].EndsWith(suffix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring.\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given prefix.\n\
    \            \n*/", "{\n    string[] result = new string[strings.length];\n  \
    \  for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that end with a given suffix.\n     \
    \       \n*/\nstring[] filter_by_suffix(string[] strings, string suffix) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].EndsWith(suffix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that contain a given substring.\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring.\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_not_prefix(string[] strings, string prefix)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not end with a given suffix.\n\
    \            \n*/\nstring[] filter_by_not_suffix(string[] strings, string suffix)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (strings[i].EndsWith(suffix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring.\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not start with a given prefix.\n",
  "{\n    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].startsWith(prefix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that end with a given suffix.\n            \n*/\nstring[] filter_by_suffix(string[]\
    \ strings, string suffix) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].endsWith(suffix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring.\n   \
    \         \n*/\nstring[] filter_by_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring.\n   \
    \         \n*/\nstring[] filter_by_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(caseSensitive\
    \ ? strings[i].contains(substring) : strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring.\n   \
    \         \n*/\nstring[] filter_by_substring(string[] strings, string substring,\
    \ int startIndex, int endIndex) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring,\
    \ startIndex, endIndex))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that contain\
    \ a given substring.\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring, bool caseSensitive, int startIndex, int endIndex)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(caseSensitive ? strings[i].contains(substring,\
    \ startIndex, endIndex) : strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ startIndex, endIndex))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that contain\
    \ a given substring.\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring, bool caseSensi", "{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that end with a given suffix.\n     \
    \       \n*/\nstring[] filter_by_suffix(string[] strings, string suffix) \n{\n\
    \    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].EndsWith(suffix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that contain a given substring.\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring.\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring.\n   \
    \         \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring.\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring.\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that ", "{\n    string[] result = new\
    \ string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n    {\n\
    \        if (strings[i].StartsWith(prefix))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n/*\n Filter an input list of strings only for ones\
    \ that end with a given suffix.\n            \n*/\nstring[] filter_by_suffix(string[]\
    \ strings, string suffix) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].EndsWith(suffix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring.\n   \
    \         \n*/\nstring[] filter_by_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring anywhere\
    \ in the string.\n            \n*/\nstring[] filter_by_substring_any(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring anywhere\
    \ in the string and are longer than a given length.\n            \n*/\nstring[]\
    \ filter_by_substring_any_longer(string[] strings, string substring, int length)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring)\
    \ && strings[i].Length > length)\n            result[i] = strings[i];\n    }\n\
    \    return result;\n}\n/*\n Filter an input list of strings only for ones that\
    \ contain a given substring anywhere in the string and are longer than a given\
    \ length.\n            \n*/\nstring[] filter_by_substring_any_longer_or_equal(string[]\
    \ strings, string substring, int length) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring)\
    \ && strings[i].Length >= length)\n            result[i] = strings[i];\n    }\n\
    \    return result;\n}\n/*\n Filter an input list of strings only for ones that\
    \ contain a given substring anywhere in the string and are longer than a given\
    \ length.\n            \n*/\nstring[] filter_by_substring_any_longer_or_equal_or_equal(string[]\
    \ strings, string substring, int ", "{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that end with a given suffix.\n     \
    \       \n*/\nstring[] filter_by_suffix(string[] strings, string suffix) \n{\n\
    \    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].EndsWith(suffix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that contain a given substring.\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring anywhere\
    \ in the string.\n            \n*/\nstring[] filter_by_substring_any(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring.\n\
    \            \n*/\nstring[] filter_by_substring_not_any(string[] strings, string\
    \ substring) \n{\n    string[] result = new string[strings.length];\n    for(int\
    \ i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring\
    \ anywhere in the string.\n            \n*/\nstring[] filter_by_substring_not_any_in_string(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring\
    \ anywhere in the string.\n            \n*/\nstring[] filter_by_substring_not_any_in_string(string[]\
    \ strings, string substring, string substring2) \n{\n    string[] result = new\
    \ string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n    {\n\
    \        if(strings[i].Contains(substring))", "{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].startsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that end with a given suffix.\n     \
    \       \n*/\nstring[] filter_by_suffix(string[] strings, string suffix) \n{\n\
    \    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].endsWith(suffix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that contain a given substring.\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring.\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given prefix.\n\
    \            \n*/\nstring[] filter_by_not_prefix(string[] strings, string prefix)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(strings[i].startsWith(prefix))\n \
    \           result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given suffix.\n\
    \            \n*/\nstring[] filter_by_not_suffix(string[] strings, string suffix)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(strings[i].endsWith(suffix))\n   \
    \         result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter an\
    \ input list of strings only for ones that do not contain a given substring.\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given prefix.",
  "{\n    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].startsWith(prefix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}", "{\n    string[] result = new\
    \ string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n    {\n\
    \        if(strings[i].startsWith(prefix))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n/*\n Filter an input list of strings only for ones\
    \ that end with a given suffix.\n            \n*/\nstring[] filter_by_suffix(string[]\
    \ strings, string suffix) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].endsWith(suffix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring.\n   \
    \         \n*/\nstring[] filter_by_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that match a regular expression.\n  \
    \          \n*/\nstring[] filter_by_regex(string[] strings, string regex) \n{\n\
    \    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].matches(regex))\n            result[i] =\
    \ strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that match a regular expression.\n            \n*/\nstring[] filter_by_regex_case_insensitive(string[]\
    \ strings, string regex) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].matches(regex,\
    \ RegexOption.IGNORE_CASE))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that match a\
    \ regular expression.\n            \n*/\nstring[] filter_by_regex_case_insensitive(string[]\
    \ strings, string regex, RegexOption option) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].matches(regex,\
    \ option))\n            result[i] = strings[i];\n    }\n    return result;\n}\n\
    /*\n Filter an input list of strings only for ones that match a regular expression.\n\
    \            \n*/\nstring[] filter_by_regex_case_insensitive(string[] strings,\
    \ string regex, RegexOption option, RegexOptions options) \n{\n    string[] result\
    \ = new string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n\
    \    {\n        if(strings[i].matches(regex, option, options))\n            result[i]\
    \ = strings[i];\n    }\n    return result;", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that end with a given suffix.\n     \
    \       \n*/\nstring[] filter_by_suffix(string[] strings, string suffix) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].EndsWith(suffix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that contain a given substring.\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring.\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given prefix.\n\
    \            \n*/\nstring[] filter_by_not_prefix(string[] strings, string prefix)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given suffix.\n\
    \            \n*/\nstring[] filter_by_not_suffix(string[] strings, string suffix)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (strings[i].EndsWith(suffix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring.\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given prefix.\n\
    \            \n*/", "{\n    string[] result = new string[strings.length];\n  \
    \  for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that end with a given suffix.\n     \
    \       \n*/\nstring[] filter_by_suffix(string[] strings, string suffix) \n{\n\
    \    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].EndsWith(suffix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that contain a given substring.\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring anywhere\
    \ in the string.\n            \n*/\nstring[] filter_by_substring_any(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring.\n\
    \            \n*/\nstring[] filter_by_substring_not_any(string[] strings, string\
    \ substring) \n{\n    string[] result = new string[strings.length];\n    for(int\
    \ i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring\
    \ anywhere in the string.\n            \n*/\nstring[] filter_by_substring_not_any_in_string(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring\
    \ anywhere in the string.\n            \n*/\nstring[] filter_by_substring_not_any_in_strings(string[]\
    \ strings, string[] substrings) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        bool found = false;\n\
    \        for(int j = 0; j < ", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that end with a given suffix.\n     \
    \       \n*/\nstring[] filter_by_suffix(string[] strings, string suffix) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].EndsWith(suffix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that contain a given substring.\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring.\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring in a given\
    \ order.\n            \n*/\nstring[] filter_by_substring_order(string[] strings,\
    \ string substring, string order) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring)\
    \ && strings[i].Contains(order))\n            result[i] = strings[i];\n    }\n\
    \    return result;\n}\n/*\n Filter an input list of strings only for ones that\
    \ do not contain a given substring in a given order.\n            \n*/\nstring[]\
    \ filter_by_not_substring_order(string[] strings, string substring, string order)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].Contains(substring)\
    \ && !strings[i].Contains(order))\n            result[i] = strings[i];\n    }\n\
    \    return result;\n}\n/*\n Filter an input list of strings only for ones that\
    \ contain a given substring in a given order.\n            \n*/\nstring[] filter_by_substring_order_and_substring(string[]\
    \ strings, string substring, string order, string substring2) \n{\n    string[]\
    \ result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].Contain", "{\n    string[] result = new\
    \ string[strings.length];\n    int i = 0;\n    foreach(string s in strings)\n\
    \    {\n        if(s.StartsWith(prefix))\n        {\n            result[i++] =\
    \ s;\n        }\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that end with a given suffix.\n            \n*/\nstring[] filter_by_suffix(string[]\
    \ strings, string suffix) \n{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    foreach(string s in strings)\n    {\n        if(s.EndsWith(suffix))\n\
    \        {\n            result[i++] = s;\n        }\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that contain a given substring.\n\
    \            \n*/\nstring[] filter_by_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    int i = 0;\n   \
    \ foreach(string s in strings)\n    {\n        if(s.Contains(substring))\n   \
    \     {\n            result[i++] = s;\n        }\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that contain a given substring\
    \ anywhere in the string.\n            \n*/\nstring[] filter_by_substring_any(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    foreach(string s in strings)\n    {\n        if(s.Contains(substring))\n\
    \        {\n            result[i++] = s;\n        }\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that contain a given substring\
    \ at any position in the string.\n            \n*/\nstring[] filter_by_substring_all(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    foreach(string s in strings)\n    {\n        if(s.Contains(substring))\n\
    \        {\n            result[i++] = s;\n        }\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain a given\
    \ substring.\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring) \n{\n    string[] result = new string[strings.length];\n \
    \   int i = 0;\n    foreach(string s in strings)\n    {\n        if(!s.Contains(substring))\n\
    \        {\n            result[i++] = s;\n        }\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain a given\
    \ substring anywhere in the string.\n            \n*/\nstring[] filter_by_not_substring_any(string[]\
    \ strings, string substring) \n{\n    string", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].startsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that end with a given suffix.\n     \
    \       \n*/\nstring[] filter_by_suffix(string[] strings, string suffix) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].endsWith(suffix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that contain a given substring.\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring.\n   \
    \         \n*/\nstring[] filter_by_substring(string[] strings, string substring,\
    \ int startIndex, int endIndex) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring,\
    \ startIndex, endIndex))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that contain\
    \ a given substring.\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring, int startIndex) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring,\
    \ startIndex))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that contain a given substring.\n\
    \            \n*/\nstring[] filter_by_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring.\n   \
    \         \n*/\nstring[] filter_by_substring(string[] strings, string substring,\
    \ int startIndex, int endIndex) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring,\
    \ startIndex, endIndex))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter ", "{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that end with a given suffix.\n     \
    \       \n*/\nstring[] filter_by_suffix(string[] strings, string suffix) \n{\n\
    \    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].EndsWith(suffix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that contain a given substring.\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that match a given regex.\n         \
    \   \n*/\nstring[] filter_by_regex(string[] strings, string regex) \n{\n    string[]\
    \ result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(Regex.Match(strings[i], regex).Success)\n          \
    \  result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input\
    \ list of strings only for ones that match a given regex.\n            \n*/\n\
    string[] filter_by_regex_case_insensitive(string[] strings, string regex) \n{\n\
    \    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(Regex.Match(strings[i], regex, RegexOptions.IgnoreCase).Success)\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that match a given regex.\n         \
    \   \n*/\nstring[] filter_by_regex_case_insensitive(string[] strings, string regex,\
    \ RegexOptions options) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(Regex.Match(strings[i],\
    \ regex, options).Success)\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that match a\
    \ given regex.\n            \n*/\nstring[] filter_by_regex_case_insensitive(string[]\
    \ strings, string regex, RegexOptions options, RegexMatchTimeoutOptions timeout)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(Regex.Match(strings[i], rege", "{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a tags=c#,linq,.net,string,list\
    \ |>\n<| c |>\nThanks for your answer! I really appreciate it. I will try this\
    \ out and let you know how it goes.\n<|/ c |>\n<| c |>\nI added a more efficient\
    \ solution that doesn't require the creation of an intermediate array.\n<|/ c\
    \ |>\n<| c |>\nThanks again! I really appreciate it. I will try this out and let\
    \ you know how it goes.\n<|/ c |>\n<| c |>\nI added a more efficient solution\
    \ that doesn't require the creation of an intermediate array.\n<|/ c |>\n<| c\
    \ |>\nThanks again! I really appreciate it. I will try this out and let you know\
    \ how it goes.\n<|/ c |>\n<| a tags=c#,linq,.net,string,list |>\n<code>\nvar result\
    \ = strings.Where(s => s.StartsWith(prefix)).ToList();\n</code>\n<|/ a dscore=2\
    \ |>\n<| c |>\nThanks for your answer! I really appreciate it. I will try this\
    \ out and let you know how it goes.\n<|/ c |>\n<| c |>\nI added a more efficient\
    \ solution that doesn't require the creation of an intermediate array.\n<|/ c\
    \ |>\n<| a dscore=2 |>\n<code>\nvar result = strings.Where(s => s.StartsWith(prefix)).ToList();\n\
    </code>\n<|/ a tags=c#,linq,.net,string,list |>\n<| c |>\nThanks for your answer!\
    \ I really appreciate it. I will try this out and let you know how it goes.\n\
    <|/ c |>\n<| a dscore=2 |>\n<code>\nvar result = strings.Where(s => s.StartsWith(prefix)).ToList();\n\
    </code>\n<|/ a tags=c#,linq,.net,string,list |>\n<| a tags=c#,linq,.net,string,list\
    \ |>\n<code>\nvar result = strings.Where(s => s.StartsWith(prefix)).ToList();\n\
    </code>\n<|/ a dscore=2 |>\n<| c |>\nThanks for your answer! I really appreciate\
    \ it. I will try this out and ", "{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].startsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}", "{\n    string[]\
    \ result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].StartsWith(prefix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that end with a given suffix.\n            \n*/\nstring[] filter_by_suffix(string[]\
    \ strings, string suffix) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].EndsWith(suffix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring.\n   \
    \         \n*/\nstring[] filter_by_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring.\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring.\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring.\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring.\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for one", "{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].startsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that end with a given suffix.\n     \
    \       \n*/\nstring[] filter_by_suffix(string[] strings, string suffix) \n{\n\
    \    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].endsWith(suffix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that contain a given substring.\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring.\n   \
    \         \n*/\nstring[] filter_by_substring(string[] strings, string substring,\
    \ int startIndex, int endIndex) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring,\
    \ startIndex, endIndex))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that contain\
    \ a given substring.\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring, int startIndex) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring,\
    \ startIndex))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that contain a given substring.\n\
    \            \n*/\nstring[] filter_by_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring.\n   \
    \         \n*/\nstring[] filter_by_substring(string[] strings, string substring,\
    \ int startIndex, int endIndex) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring,\
    \ startIndex, endIndex))\n            result[i] = strings[i];\n    }\n    return\
    \ result;", "{\n    string[] result = new string[strings.length];\n    for(int\
    \ i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].startsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that end with a given suffix.\n     \
    \       \n*/\nstring[] filter_by_suffix(string[] strings, string suffix) \n{\n\
    \    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].endsWith(suffix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that contain a given substring.\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that match a given regular expression.\n\
    \            \n*/\nstring[] filter_by_regex(string[] strings, string regex) \n\
    {\n    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].matches(regex))\n            result[i] =\
    \ strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that do not match a given regular expression.\n            \n\
    */\nstring[] filter_by_regex_not(string[] strings, string regex) \n{\n    string[]\
    \ result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(!strings[i].matches(regex))\n            result[i] =\
    \ strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that match a given regular expression but do not match a given\
    \ regular expression.\n            \n*/\nstring[] filter_by_regex_not_regex(string[]\
    \ strings, string regex, string regex_not) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].matches(regex)\
    \ && !strings[i].matches(regex_not))\n            result[i] = strings[i];\n  \
    \  }\n    return result;\n}\n/*\n Filter an input list of strings only for ones\
    \ that match a given regular expression but do not match a given regular expression.\n\
    \            \n*/\nstring[] filter_by_regex_not_regex(string[] strings, string\
    \ regex, string regex_not, string regex_not_regex) \n{\n    string[] result =\
    \ new string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n \
    \   {\n        if(!strings[i].matches(regex) && !string", "{\n    string[] result\
    \ = new string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n\
    \    {\n        if(strings[i].StartsWith(prefix))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n/*\n Filter an input list of strings only for ones\
    \ that end with a given suffix.\n            \n*/\nstring[] filter_by_suffix(string[]\
    \ strings, string suffix) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].EndsWith(suffix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring.\n   \
    \         \n*/\nstring[] filter_by_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring.\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring in a given\
    \ order.\n            \n*/\nstring[] filter_by_substring_order(string[] strings,\
    \ string substring, bool ascending) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    Array.Sort(result, (a, b) =>\
    \ ascending ? a.Contains(substring) : b.Contains(substring));\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain a given\
    \ substring in a given order.\n            \n*/\nstring[] filter_by_not_substring_order(string[]\
    \ strings, string substring, bool ascending) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    Array.Sort(result, (a, b) =>\
    \ ascending ? a.Contains(substring) : b.Contains(substring));\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that contain a given substring\
    \ in a given order.\n            \n*/\nstring[] filter_by_substring_order_", "{\n\
    \tstring[] result = new string[strings.length];\n\tfor (int i = 0; i < strings.length;\
    \ ++i)\n\t\tif (strings[i].startsWith(prefix))\n\t\t\tresult[i] = strings[i];\n\
    \treturn result;\n}", "{\n\tstring[] result = new string[strings.length];\n\t\
    for (int i = 0; i < strings.length; ++i)\n\t\tif (strings[i].startsWith(prefix))\n\
    \t\t\tresult[i] = strings[i];\n\treturn result;\n}\n/*\n Filter an input list\
    \ of strings only for ones that end with a given suffix.\n            \n*/\nstring[]\
    \ filter_by_suffix(string[] strings, string suffix) \n{\n\tstring[] result = new\
    \ string[strings.length];\n\tfor (int i = 0; i < strings.length; ++i)\n\t\tif\
    \ (strings[i].endsWith(suffix))\n\t\t\tresult[i] = strings[i];\n\treturn result;\n\
    }\n/*\n Filter an input list of strings only for ones that contain a given substring.\n\
    \            \n*/\nstring[] filter_by_substring(string[] strings, string substring)\
    \ \n{\n\tstring[] result = new string[strings.length];\n\tfor (int i = 0; i <\
    \ strings.length; ++i)\n\t\tif (strings[i].contains(substring))\n\t\t\tresult[i]\
    \ = strings[i];\n\treturn result;\n}\n/*\n Filter an input list of strings only\
    \ for ones that do not contain a given substring.\n            \n*/\nstring[]\
    \ filter_by_not_substring(string[] strings, string substring) \n{\n\tstring[]\
    \ result = new string[strings.length];\n\tfor (int i = 0; i < strings.length;\
    \ ++i)\n\t\tif (!strings[i].contains(substring))\n\t\t\tresult[i] = strings[i];\n\
    \treturn result;\n}\n/*\n Filter an input list of strings only for ones that contain\
    \ a given substring.\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive) \n{\n\tstring[] result = new\
    \ string[strings.length];\n\tfor (int i = 0; i < strings.length; ++i)\n\t\tif\
    \ (!caseSensitive ? !strings[i].contains(substring) : strings[i].contains(substring,\
    \ caseSensitive))\n\t\t\tresult[i] = strings[i];\n\treturn result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring.\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n\tstring[] result = new string[strings.length];\n\t\
    for (int i = 0; i < strings.length; ++i)\n\t\tif (!caseSensitive ? !strings[i].contains(substring)\
    \ : strings[i].contains(substring, caseSensitive))\n\t\t\tresult[i] = strings[i];\n\
    \treturn result;\n}\n/*\n Filter an input list of strings only for ones that do\
    \ not contain a given substring.\n            \n*/\nstring[] filter_by_not_substring(string[]\
    \ strings, string substring, bool caseSensitive) \n{\n\tstring[] result = new\
    \ string[strings.length];\n\tfor (int i = 0; i < strings.length; ++i)\n\t\tif\
    \ (!caseSen", "{\n\tstring[] result = new string[strings.length];\n\tfor (int\
    \ i = 0; i < strings.length; ++i)\n\t\tif (strings[i].StartsWith(prefix))\n\t\t\
    \tresult[i] = strings[i];\n\treturn result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that end with a given suffix.\n            \n*/\nstring[] filter_by_suffix(string[]\
    \ strings, string suffix) \n{\n\tstring[] result = new string[strings.length];\n\
    \tfor (int i = 0; i < strings.length; ++i)\n\t\tif (strings[i].EndsWith(suffix))\n\
    \t\t\tresult[i] = strings[i];\n\treturn result;\n}\n/*\n Filter an input list\
    \ of strings only for ones that contain a given substring.\n            \n*/\n\
    string[] filter_by_substring(string[] strings, string substring) \n{\n\tstring[]\
    \ result = new string[strings.length];\n\tfor (int i = 0; i < strings.length;\
    \ ++i)\n\t\tif (strings[i].Contains(substring))\n\t\t\tresult[i] = strings[i];\n\
    \treturn result;\n}\n/*\n Filter an input list of strings only for ones that contain\
    \ a given substring.\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring, bool caseSensitive) \n{\n\tstring[] result = new\
    \ string[strings.length];\n\tfor (int i = 0; i < strings.length; ++i)\n\t\tif\
    \ (caseSensitive ? strings[i].Contains(substring) : strings[i].IndexOf(substring,\
    \ 0) > -1)\n\t\t\tresult[i] = strings[i];\n\treturn result;\n}\n/*\n Filter an\
    \ input list of strings only for ones that contain a given substring.\n      \
    \      \n*/\nstring[] filter_by_substring(string[] strings, string substring,\
    \ int startIndex, int endIndex) \n{\n\tstring[] result = new string[strings.length];\n\
    \tfor (int i = 0; i < strings.length; ++i)\n\t\tif (strings[i].IndexOf(substring,\
    \ startIndex, endIndex) > -1)\n\t\t\tresult[i] = strings[i];\n\treturn result;\n\
    }\n/*\n Filter an input list of strings only for ones that contain a given substring.\n\
    \            \n*/\nstring[] filter_by_substring(string[] strings, string substring,\
    \ bool caseSensitive, int startIndex, int endIndex) \n{\n\tstring[] result = new\
    \ string[strings.length];\n\tfor (int i = 0; i < strings.length; ++i)\n\t\tif\
    \ (caseSensitive ? strings[i].Contains(substring) : strings[i].IndexOf(substring,\
    \ startIndex, endIndex) > -1)\n\t\t\tresult[i] = strings[i];\n\treturn result;\n\
    }\n/*\n Filter an input list of strings only for ones that contain a given substring.\n\
    \            \n*/\nstring[] filter_by_substring(string[] strings, string substring,\
    \ bool caseSensitive, int startIndex, int endIndex, bool ignoreCase) ", "{\n \
    \   string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that end with a given suffix.\n            \n*/\nstring[] filter_by_suffix(string[]\
    \ strings, string suffix) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].EndsWith(suffix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring.\n   \
    \         \n*/\nstring[] filter_by_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring.\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given prefix.\n\
    \            \n*/\nstring[] filter_by_not_prefix(string[] strings, string prefix)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given suffix.\n\
    \            \n*/\nstring[] filter_by_not_suffix(string[] strings, string suffix)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (strings[i].EndsWith(suffix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring.\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given prefix.\n\
    \            \n*/", "{\n\tstring[] result = new string[strings.length];\n\tfor\
    \ (int i = 0; i < strings.length; ++i)\n\t\tif (strings[i].StartsWith(prefix))\n\
    \t\t\tresult[i] = strings[i];\n\treturn result;\n}", "{\n    string[] result =\
    \ new string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n \
    \   {\n        if(strings[i].StartsWith(prefix))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n/*\n Filter an input list of strings only for ones\
    \ that end with a given suffix.\n            \n*/\nstring[] filter_by_suffix(string[]\
    \ strings, string suffix) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].EndsWith(suffix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring.\n   \
    \         \n*/\nstring[] filter_by_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring.\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring anywhere\
    \ in the string.\n            \n*/\nstring[] filter_by_contains_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring\
    \ anywhere in the string.\n            \n*/\nstring[] filter_by_not_contains_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring at the\
    \ start of the string.\n            \n*/\nstring[] filter_by_contains_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n", "{\n\
    \    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].StartsWith(prefix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n</code>\n<|/ a tags=c#,string,arrays\
    \ |>\n<| c |>\nThanks for your answer! I used the code you provided and I got\
    \ this error: `System.IndexOutOfRangeException: 'Index was outside the bounds\
    \ of the array.'`\n<|/ c |>\n<| c |>\nI added a test case to my answer, and I\
    \ added the code I used to test it (I used `string[] strings = new string[] {\
    \ \"hello\", \"world\", \"hello\", \"world\" };` as my test case).\n<|/ c |>\n\
    <| c |>\nI added a test case to my answer, and I added the code I used to test\
    \ it (I used `string[] strings = new string[] { \"hello\", \"world\", \"hello\"\
    , \"world\" };` as my test case).\n<|/ c |>\n<| c |>\nI added a test case to my\
    \ answer, and I added the code I used to test it (I used `string[] strings = new\
    \ string[] { \"hello\", \"world\", \"hello\", \"world\" };` as my test case).\n\
    <|/ c |>\n<| c |>\nI added a test case to my answer, and I added the code I used\
    \ to test it (I used `string[] strings = new string[] { \"hello\", \"world\",\
    \ \"hello\", \"world\" };` as my test case).\n<|/ c |>\n<| a tags=c#,string,arrays\
    \ |>\n<code>\nstring[] strings = new string[] { \"hello\", \"world\", \"hello\"\
    , \"world\" };\nstring prefix = \"hello\";\nvar result = strings.Where(s => s.StartsWith(prefix)).ToArray();\n\
    </code>\n<|/ a dscore=2 |>\n<| c |>\nThanks for your answer! I used the code you\
    \ provided and I got this error: `System.IndexOutOfRangeException: 'Index was\
    \ outside the bounds of the array.'`\n<|/ c |>\n<| c |>\nI added a test case to\
    \ my answer, and I added the code I used to test it (I used `string[] strings\
    \ = new string[] { \"hello\", \"world\", \"hello\", \"world\" };` as my test case).\n\
    <|/ c |>\n<| a dscore=2 |>\n<code>\nstring[] strings = new string[] { \"hello\"\
    , \"world\", \"hello\", \"world\" };\nstring prefix = \"", "{\n    string[] result\
    \ = new string[strings.length];\n    int i = 0;\n    foreach(string s in strings)\n\
    \    {\n        if(s.StartsWith(prefix))\n        {\n            result[i++] =\
    \ s;\n        }\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that end with a given suffix.\n            \n*/\nstring[] filter_by_suffix(string[]\
    \ strings, string suffix) \n{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    foreach(string s in strings)\n    {\n        if(s.EndsWith(suffix))\n\
    \        {\n            result[i++] = s;\n        }\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that contain a given substring.\n\
    \            \n*/\nstring[] filter_by_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    int i = 0;\n   \
    \ foreach(string s in strings)\n    {\n        if(s.Contains(substring))\n   \
    \     {\n            result[i++] = s;\n        }\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain a given\
    \ substring.\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring) \n{\n    string[] result = new string[strings.length];\n \
    \   int i = 0;\n    foreach(string s in strings)\n    {\n        if(!s.Contains(substring))\n\
    \        {\n            result[i++] = s;\n        }\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain a given\
    \ prefix.\n            \n*/\nstring[] filter_by_not_prefix(string[] strings, string\
    \ prefix) \n{\n    string[] result = new string[strings.length];\n    int i =\
    \ 0;\n    foreach(string s in strings)\n    {\n        if(s.StartsWith(prefix))\n\
    \        {\n            result[i++] = s;\n        }\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain a given\
    \ suffix.\n            \n*/\nstring[] filter_by_not_suffix(string[] strings, string\
    \ suffix) \n{\n    string[] result = new string[strings.length];\n    int i =\
    \ 0;\n    foreach(string s in strings)\n    {\n        if(s.EndsWith(suffix))\n\
    \        {\n            result[i++] = s;\n        }\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain a given\
    \ substring.\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring) \n{\n    string[] result = new string[strings.length];\n \
    \   int i = 0;\n    ", "{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    for (string s : strings) {\n        if (s.StartsWith(prefix))\
    \ {\n            result[i++] = s;\n        }\n    }\n    return result;\n}\n/*\n\
    \ Filter an input list of strings only for ones that end with a given suffix.\n\
    \            \n*/\nstring[] filter_by_suffix(string[] strings, string suffix)\
    \ \n{\n    string[] result = new string[strings.length];\n    int i = 0;\n   \
    \ for (string s : strings) {\n        if (s.EndsWith(suffix)) {\n            result[i++]\
    \ = s;\n        }\n    }\n    return result;\n}\n/*\n Filter an input list of\
    \ strings only for ones that contain a given substring.\n            \n*/\nstring[]\
    \ filter_by_substring(string[] strings, string substring) \n{\n    string[] result\
    \ = new string[strings.length];\n    int i = 0;\n    for (string s : strings)\
    \ {\n        if (s.Contains(substring)) {\n            result[i++] = s;\n    \
    \    }\n    }\n    return result;\n}\n/*\n Filter an input list of strings only\
    \ for ones that do not contain a given substring.\n            \n*/\nstring[]\
    \ filter_by_not_substring(string[] strings, string substring) \n{\n    string[]\
    \ result = new string[strings.length];\n    int i = 0;\n    for (string s : strings)\
    \ {\n        if (!s.Contains(substring)) {\n            result[i++] = s;\n   \
    \     }\n    }\n    return result;\n}\n/*\n Filter an input list of strings only\
    \ for ones that contain a given substring in a given order.\n            \n*/\n\
    string[] filter_by_substring_order(string[] strings, string substring, string\
    \ order) \n{\n    string[] result = new string[strings.length];\n    int i = 0;\n\
    \    for (string s : strings) {\n        if (s.Contains(substring) && s.Contains(order))\
    \ {\n            result[i++] = s;\n        }\n    }\n    return result;\n}\n/*\n\
    \ Filter an input list of strings only for ones that do not contain a given substring\
    \ in a given order.\n            \n*/\nstring[] filter_by_not_substring_order(string[]\
    \ strings, string substring, string order) \n{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    for (string s : strings) {\n        if (!s.Contains(substring)\
    \ && !s.Contains(order)) {\n            result[i++] = s;\n        }\n    }\n \
    \   return result;\n}\n/*\n Filter an input list of strings only for ones that\
    \ contain a given substring in a given order.\n            \n*/\nstring[] filter_by_substring_order_and_substring(string[]\
    \ strings, string substring, string order, string substring2) \n{\n    string[]\
    \ result = new string[strings.length];\n    int i = 0;\n    for (string s : strings)\
    \ {\n", "{\n    string[] result = new string[strings.length];\n    for (int i\
    \ = 0; i < strings.length; ++i)\n    {\n        if (strings[i].startsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}", "{\n    string[]\
    \ result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that end with a given suffix.\n            \n*/\nstring[] filter_by_suffix(string[]\
    \ strings, string suffix) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].EndsWith(suffix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring.\n   \
    \         \n*/\nstring[] filter_by_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring.\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring.\n   \
    \         \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring.\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring.\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring.\n\
    \            \n*/\nstring", "{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    for (string s : strings) {\n        if (s.StartsWith(prefix))\
    \ {\n            result[i++] = s;\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,linq |>\n<| c |>\nI like your solution, but I prefer to use `ToList`\
    \ instead of `ToArray` because `ToArray` will copy the entire array into a new\
    \ array. `ToList` will just copy the references to the original array into a new\
    \ list object.\n<|/ c |>\n<| c |>\nI agree with you, `ToList` will copy the references\
    \ to the original array into a new list object, but `ToArray` will copy the entire\
    \ array into a new array. `ToList` will copy the references to the original array\
    \ into a new list object, but `ToArray` will copy the entire array into a new\
    \ array. `ToList` will copy the references to the original array into a new list\
    \ object, but `ToArray` will copy the entire array into a new array. `ToList`\
    \ will copy the references to the original array into a new list object, but `ToArray`\
    \ will copy the entire array into a new array.\n<|/ c |>\n<| c |>\nI agree with\
    \ you, `ToList` will copy the references to the original array into a new list\
    \ object, but `ToArray` will copy the entire array into a new array. `ToList`\
    \ will copy the references to the original array into a new list object, but `ToArray`\
    \ will copy the entire array into a new array. `ToList` will copy the references\
    \ to the original array into a new list object, but `ToArray` will copy the entire\
    \ array into a new array. `ToList` will copy the references to the original array\
    \ into a new list object, but `ToArray` will copy the entire array into a new\
    \ array.\n<|/ c |>\n<| c |>\nI agree with you, `ToList` will copy the references\
    \ to the original array into a new list object, but `ToArray` will copy the entire\
    \ array into a new array. `ToList` will copy the references to the original array\
    \ into a new list object, but `ToArray` will copy the entire array into a new\
    \ array. `ToList` will copy the references to the original array into a new list\
    \ object, but `ToArray` will copy the entire array into a new array. `ToList`\
    \ will copy the references to the original array into a new list object, but `ToArray`\
    \ will copy the entire array into a new array.\n<|/ c |>\n", "{\n    string[]\
    \ result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].startsWith(prefix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}", "{\n    string[] result = new\
    \ string[strings.length];\n    for(int i = 0; i < strings.length; ++i)\n    {\n\
    \        if(strings[i].startsWith(prefix))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n/*\n Filter an input list of strings only for ones\
    \ that end with a given suffix.\n            \n*/\nstring[] filter_by_suffix(string[]\
    \ strings, string suffix) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].endsWith(suffix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring.\n   \
    \         \n*/\nstring[] filter_by_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that match a given regular expression.\n\
    \            \n*/\nstring[] filter_by_regex(string[] strings, string regex) \n\
    {\n    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].matches(regex))\n            result[i] =\
    \ strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that match a given regular expression.\n            \n*/\nstring[]\
    \ filter_by_regex_case_insensitive(string[] strings, string regex) \n{\n    string[]\
    \ result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].matches(regex, RegexOptions.IgnoreCase))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that match a given regular expression.\n\
    \            \n*/\nstring[] filter_by_regex_case_sensitive(string[] strings, string\
    \ regex) \n{\n    string[] result = new string[strings.length];\n    for(int i\
    \ = 0; i < strings.length; ++i)\n    {\n        if(strings[i].matches(regex, RegexOptions.IgnoreCase))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that match a given regular expression.\n\
    \            \n*/\nstring[] filter_by_regex_case_insensitive(string[] strings,\
    \ string regex, RegexOptions options) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].matches(regex,\
    \ options))\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter ", "{\n    string[] result = new string[strings.length];\n    for(int\
    \ i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].startsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that end with a given suffix.\n     \
    \       \n*/\nstring[] filter_by_suffix(string[] strings, string suffix) \n{\n\
    \    string[] result = new string[strings.length];\n    for(int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if(strings[i].endsWith(suffix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that contain a given substring.\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring.\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_not_prefix(string[] strings, string prefix)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(strings[i].startsWith(prefix))\n \
    \           result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not end with a given suffix.\n\
    \            \n*/\nstring[] filter_by_not_suffix(string[] strings, string suffix)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(strings[i].endsWith(suffix))\n   \
    \         result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter an\
    \ input list of strings only for ones that do not contain a given substring.\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for(int i = 0; i\
    \ < strings.length; ++i)\n    {\n        if(!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not start ", "{\n    string[]\
    \ result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that end with a given suffix.\n            \n*/\nstring[] filter_by_suffix(string[]\
    \ strings, string suffix) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].EndsWith(suffix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring.\n   \
    \         \n*/\nstring[] filter_by_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring.\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring anywhere\
    \ in the string.\n            \n*/\nstring[] filter_by_contains_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring\
    \ anywhere in the string.\n            \n*/\nstring[] filter_by_not_contains_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that start with a given prefix.\n   \
    \         \n*/\nstring[] filter_by_prefix_substring(string[] strings, string prefix)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that end ", "{\n    string[] result =\
    \ new string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n\
    \    {\n        if (strings[i].StartsWith(prefix))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n/*\n Filter an input list of strings only for ones\
    \ that end with a given suffix.\n            \n*/\nstring[] filter_by_suffix(string[]\
    \ strings, string suffix) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].EndsWith(suffix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring.\n   \
    \         \n*/\nstring[] filter_by_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring.\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given prefix.\n\
    \            \n*/\nstring[] filter_by_not_prefix(string[] strings, string prefix)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given suffix.\n\
    \            \n*/\nstring[] filter_by_not_suffix(string[] strings, string suffix)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (strings[i].EndsWith(suffix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring.\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given prefix.\n\
    \            \n*/", "{\n    string[] result = new string[strings.length];\n  \
    \  for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,string,arrays,list |>\n<| a dscore=0 |>\n<code>\nstring[] result\
    \ = new string[strings.length];\nfor(int i = 0; i < strings.length; ++i)\n{\n\
    \    if(strings[i].StartsWith(prefix))\n        result[i] = strings[i];\n}\n</code>\n\
    <|/ a tags=c#,string,arrays,list |>\n<| a tags=c#,string,arrays,list |>\n<code>\n\
    string[] result = new string[strings.length];\nfor(int i = 0; i < strings.length;\
    \ ++i)\n{\n    if(strings[i].StartsWith(prefix))\n        result[i] = strings[i];\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a tags=c#,string,arrays,list |>\n<code>\nstring[]\
    \ result = new string[strings.length];\nfor(int i = 0; i < strings.length; ++i)\n\
    {\n    if(strings[i].StartsWith(prefix))\n        result[i] = strings[i];\n}\n\
    </code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nstring[] result = new string[strings.length];\n\
    for(int i = 0; i < strings.length; ++i)\n{\n    if(strings[i].StartsWith(prefix))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a tags=c#,string,arrays,list\
    \ |>\n<| a dscore=0 |>\n<code>\nstring[] result = new string[strings.length];\n\
    for(int i = 0; i < strings.length; ++i)\n{\n    if(strings[i].StartsWith(prefix))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a tags=c#,string,arrays,list\
    \ |>\n<| a dscore=0 |>\n<code>\nstring[] result = new string[strings.length];\n\
    for(int i = 0; i < strings.length; ++i)\n{\n    if(strings[i].StartsWith(prefix))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a tags=c#,string,arrays,list\
    \ |>\n<| a dscore=0 |>\n<code>\nstring[] result = new string[strings.length];\n\
    for(int i = 0; i < strings.length; ++i)\n{\n    if(strings[i].StartsWith(prefix))\n\
    \        result[i] = strings[i];\n}\n</code>\n<|/ a tags=c#,string,arrays,list\
    \ |>\n<| a tags=c#,string,arrays,list |>\n<code>\nstring[] result = new string[strings.length];\n\
    for(int ", "{\n    string[] result = new string[strings.length];\n    for (int\
    \ i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].startsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that end with a given suffix.\n     \
    \       \n*/\nstring[] filter_by_suffix(string[] strings, string suffix) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].endsWith(suffix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that contain a given substring.\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring.\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_not_prefix(string[] strings, string prefix)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (strings[i].startsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not end with a given suffix.\n\
    \            \n*/\nstring[] filter_by_not_suffix(string[] strings, string suffix)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (strings[i].endsWith(suffix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring.\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not start with a given prefix.\n\
    \            \n*/\nstring", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that end with a given suffix.\n     \
    \       \n*/\nstring[] filter_by_suffix(string[] strings, string suffix) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].EndsWith(suffix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that contain a given substring.\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring.\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring anywhere\
    \ in the string.\n            \n*/\nstring[] filter_by_contains_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring\
    \ anywhere in the string.\n            \n*/\nstring[] filter_by_not_contains_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring at the\
    \ start of the string.\n            \n*/\nstring[] filter_by_contains_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that ", "{\n    string[] result = new\
    \ string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n    {\n\
    \        if (strings[i].StartsWith(prefix))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n/*\n Filter an input list of strings only for ones\
    \ that end with a given suffix.\n            \n*/\nstring[] filter_by_suffix(string[]\
    \ strings, string suffix) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].EndsWith(suffix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring.\n   \
    \         \n*/\nstring[] filter_by_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that match a regular expression.\n  \
    \          \n*/\nstring[] filter_by_regex(string[] strings, string regex) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (Regex.IsMatch(strings[i], regex))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that match a regular expression.\n            \n*/\nstring[] filter_by_regex_case_insensitive(string[]\
    \ strings, string regex) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (Regex.IsMatch(strings[i],\
    \ regex, RegexOptions.IgnoreCase))\n            result[i] = strings[i];\n    }\n\
    \    return result;\n}\n/*\n Filter an input list of strings only for ones that\
    \ match a regular expression.\n            \n*/\nstring[] filter_by_regex_case_insensitive(string[]\
    \ strings, string regex, RegexOptions options) \n{\n    string[] result = new\
    \ string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n    {\n\
    \        if (Regex.IsMatch(strings[i], regex, options))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that match a regular expression.\n            \n*/\nstring[] filter_by_regex_case_insensitive(string[]\
    \ strings, string regex, RegexOptions options, RegexOptions groupOptions) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (Regex.IsMatch(strings[i], regex, options, groupOptions))\n",
  "{\n    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that end with a given suffix.\n            \n*/\nstring[] filter_by_suffix(string[]\
    \ strings, string suffix) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].EndsWith(suffix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring.\n   \
    \         \n*/\nstring[] filter_by_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring.\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given prefix.\n\
    \            \n*/\nstring[] filter_by_not_prefix(string[] strings, string prefix)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given suffix.\n\
    \            \n*/\nstring[] filter_by_not_suffix(string[] strings, string suffix)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (strings[i].EndsWith(suffix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring.\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given prefix.\n\
    \            \n*/", "{\n    string[] result = new string[strings.length];\n  \
    \  for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].startsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}", "{\n    string[]\
    \ result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that end with a given suffix.\n            \n*/\nstring[] filter_by_suffix(string[]\
    \ strings, string suffix) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].EndsWith(suffix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring.\n   \
    \         \n*/\nstring[] filter_by_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring.\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given prefix.\n\
    \            \n*/\nstring[] filter_by_not_prefix(string[] strings, string prefix)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given suffix.\n\
    \            \n*/\nstring[] filter_by_not_suffix(string[] strings, string suffix)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (strings[i].EndsWith(suffix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring.\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given prefix.\n\
    \            \n*/", "{\n    string[] result = new string[strings.length];\n  \
    \  for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that end with a given suffix.\n     \
    \       \n*/\nstring[] filter_by_suffix(string[] strings, string suffix) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].EndsWith(suffix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that contain a given substring.\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring anywhere\
    \ in the string.\n            \n*/\nstring[] filter_by_substring_any(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring anywhere\
    \ in the string.\n            \n*/\nstring[] filter_by_substring_all(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (!strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring anywhere\
    \ in the string.\n            \n*/\nstring[] filter_by_substring_any_prefix(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring anywhere\
    \ in the string.\n            \n*/\nstring[] filter_by_substring_any_suffix(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n ", "{\n\
    \tstring[] result = new string[strings.length];\n\tfor (int i = 0; i < strings.length;\
    \ ++i)\n\t\tif (strings[i].StartsWith(prefix))\n\t\t\tresult[i] = strings[i];\n\
    \treturn result;\n}", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].startsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that end with a given suffix.\n     \
    \       \n*/\nstring[] filter_by_suffix(string[] strings, string suffix) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].endsWith(suffix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that contain a given substring.\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring anywhere\
    \ in the string.\n            \n*/\nstring[] filter_by_substring_any(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring anywhere\
    \ in the string and are longer than a given length.\n            \n*/\nstring[]\
    \ filter_by_substring_any_longer(string[] strings, string substring, int length)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring)\
    \ && strings[i].length() > length)\n            result[i] = strings[i];\n    }\n\
    \    return result;\n}\n/*\n Filter an input list of strings only for ones that\
    \ contain a given substring anywhere in the string and are longer than a given\
    \ length.\n            \n*/\nstring[] filter_by_substring_any_longer_prefix(string[]\
    \ strings, string substring, int length) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring)\
    \ && strings[i].length() > length)\n            result[i] = strings[i];\n    }\n\
    \    return result;\n}\n/*\n Filter an input list of strings only for ones that\
    \ contain a given substring anywhere in the string and are longer than a given\
    \ length.\n            \n*/\nstring[] filter_by_substring_any_longer_suffix(string[]\
    \ strings, string substring, int length) \n{\n    string[] result = ", "{\n  \
    \  string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that end with a given suffix.\n            \n*/\nstring[] filter_by_suffix(string[]\
    \ strings, string suffix) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].EndsWith(suffix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring.\n   \
    \         \n*/\nstring[] filter_by_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring.\n   \
    \         \n*/\nstring[] filter_by_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (caseSensitive\
    \ ? strings[i].Contains(substring) : strings[i].IndexOf(substring, 0) == 0)\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring.\n   \
    \         \n*/\nstring[] filter_by_substring(string[] strings, string substring,\
    \ int startIndex, int endIndex) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].IndexOf(substring,\
    \ startIndex, endIndex) != -1)\n            result[i] = strings[i];\n    }\n \
    \   return result;\n}\n/*\n Filter an input list of strings only for ones that\
    \ contain a given substring.\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring, int startIndex) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].IndexOf(substring,\
    \ startIndex) != -1)\n            result[i] = strings[i];\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that contain a given substring.\n\
    \            \n*/\nstring[] filter_by_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (strings[i].IndexOf(substring) != ",
  "{\n    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].StartsWith(prefix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that end with a given suffix.\n            \n*/\nstring[] filter_by_suffix(string[]\
    \ strings, string suffix) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].EndsWith(suffix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring.\n   \
    \         \n*/\nstring[] filter_by_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (strings[i].Contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that match a regular expression.\n  \
    \          \n*/\nstring[] filter_by_regex(string[] strings, string regex) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].Matches(regex))\n            result[i] =\
    \ strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that match a regular expression.\n            \n*/\nstring[] filter_by_regex_case_insensitive(string[]\
    \ strings, string regex) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].Matches(regex,\
    \ RegexOptions.IgnoreCase))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that match a\
    \ regular expression.\n            \n*/\nstring[] filter_by_regex_case_insensitive(string[]\
    \ strings, string regex, RegexOptions options) \n{\n    string[] result = new\
    \ string[strings.length];\n    for (int i = 0; i < strings.length; ++i)\n    {\n\
    \        if (strings[i].Matches(regex, options))\n            result[i] = strings[i];\n\
    \    }\n    return result;\n}\n/*\n Filter an input list of strings only for ones\
    \ that match a regular expression.\n            \n*/\nstring[] filter_by_regex_case_insensitive(string[]\
    \ strings, string regex, RegexOptions options, int startIndex, int endIndex) \n\
    {\n    string[] result = new string[strings.length];\n    for (int i = 0; i <\
    \ strings.length; ++i)\n    {\n        if (strings[i].Matches(regex, options,\
    \ startIndex, endIndex))\n            result[i] = strings[i];", "{\n    string[]\
    \ result = new string[strings.length];\n    int i = 0;\n    for (string s : strings)\
    \ {\n        if (s.StartsWith(prefix)) {\n            result[i++] = s;\n     \
    \   }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nI appreciate\
    \ your answer, but I don't think it solves the problem. Your code doesn't compile\
    \ because `string` doesn't have a `StartsWith` method. Also, the OP wants to filter\
    \ out all strings that don't start with a given prefix, not only those that start\
    \ with a given prefix.\n<|/ c |>\n<| c |>\nI fixed the code. Thanks for pointing\
    \ out the error. Yes, I misunderstood the question. Thanks for pointing it out.\n\
    <|/ c |>\n<| c |>\nI appreciate your answer, but I don't think it solves the problem.\
    \ Your code doesn't compile because `string` doesn't have a `StartsWith` method.\
    \ Also, the OP wants to filter out all strings that don't start with a given prefix,\
    \ not only those that start with a given prefix.\n<|/ c |>\n<| c |>\nI fixed the\
    \ code. Thanks for pointing out the error. Yes, I misunderstood the question.\
    \ Thanks for pointing it out.\n<|/ c |>\n<| c |>\nI appreciate your answer, but\
    \ I don't think it solves the problem. Your code doesn't compile because `string`\
    \ doesn't have a `StartsWith` method. Also, the OP wants to filter out all strings\
    \ that don't start with a given prefix, not only those that start with a given\
    \ prefix.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nstring[] filterByPrefix(string[]\
    \ strings, string prefix)\n{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    foreach(string s in strings)\n    {\n        if(s.StartsWith(prefix))\n\
    \        {\n            result[i++] = s;\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a tags=c#,string,arrays |>\n<| c |>\nI appreciate your answer,\
    \ but I don't think it solves the problem. Your code doesn't compile because `string`\
    \ doesn't have a `StartsWith` method. Also, the OP wants to filter out all strings\
    \ that don't start with a given prefix, not only those that start with a given\
    \ prefix.\n<|/ c |>\n<| c |>\nI appreciate your answer, but I don't think it solves\
    \ the problem. Your code doesn't compile because `string` doesn't have a `StartsWith` ",
  "{\n\tstring[] result = new string[strings.length];\n\tfor (int i = 0; i < strings.length;\
    \ ++i)\n\t\tif (strings[i].startsWith(prefix))\n\t\t\tresult[i] = strings[i];\n\
    \treturn result;\n}", "{\n    string[] result = new string[strings.length];\n\
    \    int i = 0;\n    for (string s : strings) {\n        if (s.StartsWith(prefix))\
    \ {\n            result[i++] = s;\n        }\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=c#,string,arrays |>\n<| a dscore=0 |>\n<code>\nstring[] stringArray\
    \ = new string[]{\"abc\", \"def\", \"ghi\", \"jkl\"};\nstring prefix = \"def\"\
    ;\nstring[] result = stringArray.Where(s => s.StartsWith(prefix)).ToArray();\n\
    </code>\n<|/ a tags=c#,string,arrays |>\n<| a tags=c#,string,arrays |>\n<code>\n\
    string[] stringArray = new string[]{\"abc\", \"def\", \"ghi\", \"jkl\"};\nstring\
    \ prefix = \"def\";\nstring[] result = stringArray.Where(s => s.StartsWith(prefix)).ToArray();\n\
    </code>\n<|/ a dscore=0 |>\n<| a tags=c#,string,arrays |>\n<code>\nstring[] stringArray\
    \ = new string[]{\"abc\", \"def\", \"ghi\", \"jkl\"};\nstring prefix = \"def\"\
    ;\nstring[] result = stringArray.Where(s => s.StartsWith(prefix)).ToArray();\n\
    </code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nstring[] stringArray = new\
    \ string[]{\"abc\", \"def\", \"ghi\", \"jkl\"};\nstring prefix = \"def\";\nstring[]\
    \ result = stringArray.Where(s => s.StartsWith(prefix)).ToArray();\n</code>\n\
    <|/ a tags=c#,string,arrays |>\n<| a dscore=0 |>\n<code>\nstring[] stringArray\
    \ = new string[]{\"abc\", \"def\", \"ghi\", \"jkl\"};\nstring prefix = \"def\"\
    ;\nstring[] result = stringArray.Where(s => s.StartsWith(prefix)).ToArray();\n\
    </code>\n<|/ a tags=c#,string,arrays |>\n<| a dscore=0 |>\n<code>\nstring[] stringArray\
    \ = new string[]{\"abc\", \"def\", \"ghi\", \"jkl\"};\nstring prefix = \"def\"\
    ;\nstring[] result = stringArray.Where(s => s.StartsWith(prefix)).ToArray();\n\
    </code>\n<|/ a tags=c#,string,arrays |>\n<| a tags=c#,string,arrays |>\n<code>\n\
    string[] stringArray = new string[]{\"abc\", \"def\", \"ghi\", \"jkl\"};\nstring\
    \ prefix = \"def\";\nstring[] ", "{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].startsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that end with a given suffix.\n     \
    \       \n*/\nstring[] filter_by_suffix(string[] strings, string suffix) \n{\n\
    \    string[] result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].endsWith(suffix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that contain a given substring.\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring.\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not start with a given prefix.\n\
    \            \n*/\nstring[] filter_by_not_prefix(string[] strings, string prefix)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (strings[i].startsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not end with a given suffix.\n\
    \            \n*/\nstring[] filter_by_not_suffix(string[] strings, string suffix)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (strings[i].endsWith(suffix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not contain a given substring.\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (!strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that do not start with a given prefix.\n\
    \            \n*/\nstring", "{\n    string[] result = new string[strings.length];\n\
    \    for(int i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].startsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n</code>\n\
    <|/ a tags=string,c#,arrays |>\n<| c |>\nI appreciate the effort but this doesn't\
    \ answer the question. He wants to know how to use LINQ to do this.\n<|/ c |>\n\
    <| c |>\n: I added a LINQ solution. He didn't ask for LINQ, but I thought it would\
    \ be useful to show how it can be done with LINQ.\n<|/ c |>\n<| c |>\n: I added\
    \ a LINQ solution. He didn't ask for LINQ, but I thought it would be useful to\
    \ show how it can be done with LINQ.\n<|/ c |>\n<| c |>\n: I added a LINQ solution.\
    \ He didn't ask for LINQ, but I thought it would be useful to show how it can\
    \ be done with LINQ.\n<|/ c |>\n<| a dscore=1 |>\n<code>\nstring[] strings = new\
    \ string[] { \"one\", \"two\", \"three\", \"four\", \"five\" };\nstring prefix\
    \ = \"two\";\nstring[] filtered = strings.Where(s => s.StartsWith(prefix)).ToArray();\n\
    </code>\n<|/ a tags=string,c#,arrays |>\n<| c |>\nI appreciate the effort but\
    \ this doesn't answer the question. He wants to know how to use LINQ to do this.\n\
    <|/ c |>\n<| a tags=string,c#,arrays |>\n<code>\nstring[] strings = new string[]\
    \ { \"one\", \"two\", \"three\", \"four\", \"five\" };\nstring prefix = \"two\"\
    ;\nstring[] filtered = strings.Where(s => s.StartsWith(prefix)).ToArray();\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nI appreciate the effort but this doesn't answer the\
    \ question. He wants to know how to use LINQ to do this.\n<|/ c |>\n<| c |>\n\
    : I added a LINQ solution. He didn't ask for LINQ, but I thought it would be useful\
    \ to show how it can be done with LINQ.\n<|/ c |>\n<| a dscore=1 |>\n<code>\n\
    string[] strings = new string[] { \"one\", \"two\", \"three\", \"four\", \"five\"\
    \ };\nstring prefix = \"two\";\nstring[] filtered = strings.Where(s => s.", "{\n\
    \    string[] result = new string[strings.length];\n    int i = 0;\n    foreach(string\
    \ s in strings)\n    {\n        if(s.StartsWith(prefix))\n        {\n        \
    \    result[i++] = s;\n        }\n    }\n    return result;\n}\n/*\n Filter an\
    \ input list of strings only for ones that end with a given suffix.\n        \
    \    \n*/\nstring[] filter_by_suffix(string[] strings, string suffix) \n{\n  \
    \  string[] result = new string[strings.length];\n    int i = 0;\n    foreach(string\
    \ s in strings)\n    {\n        if(s.EndsWith(suffix))\n        {\n          \
    \  result[i++] = s;\n        }\n    }\n    return result;\n}\n/*\n Filter an input\
    \ list of strings only for ones that contain a given substring.\n            \n\
    */\nstring[] filter_by_substring(string[] strings, string substring) \n{\n   \
    \ string[] result = new string[strings.length];\n    int i = 0;\n    foreach(string\
    \ s in strings)\n    {\n        if(s.Contains(substring))\n        {\n       \
    \     result[i++] = s;\n        }\n    }\n    return result;\n}\n/*\n Filter an\
    \ input list of strings only for ones that do not contain a given substring.\n\
    \            \n*/\nstring[] filter_by_not_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    int i = 0;\n   \
    \ foreach(string s in strings)\n    {\n        if(!s.Contains(substring))\n  \
    \      {\n            result[i++] = s;\n        }\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not start with a\
    \ given prefix.\n            \n*/\nstring[] filter_by_not_prefix(string[] strings,\
    \ string prefix) \n{\n    string[] result = new string[strings.length];\n    int\
    \ i = 0;\n    foreach(string s in strings)\n    {\n        if(s.StartsWith(prefix))\n\
    \        {\n            result[i++] = s;\n        }\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not end with a given\
    \ suffix.\n            \n*/\nstring[] filter_by_not_suffix(string[] strings, string\
    \ suffix) \n{\n    string[] result = new string[strings.length];\n    int i =\
    \ 0;\n    foreach(string s in strings)\n    {\n        if(s.EndsWith(suffix))\n\
    \        {\n            result[i++] = s;\n        }\n    }\n    return result;\n\
    }\n/*\n Filter an input list of strings only for ones that do not contain a given\
    \ substring.\n            \n*/\nstring[] filter_by_not_substring(string[] strings,\
    \ string substring) \n{\n    string[] result = new string[strings.length];\n \
    \   int i = 0;", "{\n    string[] result = new string[strings.length];\n    for(int\
    \ i = 0; i < strings.length; ++i)\n    {\n        if(strings[i].startsWith(prefix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}", "{\n    string[]\
    \ result = new string[strings.length];\n    for (int i = 0; i < strings.length;\
    \ ++i)\n    {\n        if (strings[i].startsWith(prefix))\n            result[i]\
    \ = strings[i];\n    }\n    return result;\n}\n/*\n Filter an input list of strings\
    \ only for ones that end with a given suffix.\n            \n*/\nstring[] filter_by_suffix(string[]\
    \ strings, string suffix) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].endsWith(suffix))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring.\n   \
    \         \n*/\nstring[] filter_by_substring(string[] strings, string substring)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring.\n   \
    \         \n*/\nstring[] filter_by_substring(string[] strings, string substring,\
    \ bool caseSensitive) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (caseSensitive\
    \ ? strings[i].contains(substring) : strings[i].toLowerCase().contains(substring.toLowerCase()))\n\
    \            result[i] = strings[i];\n    }\n    return result;\n}\n/*\n Filter\
    \ an input list of strings only for ones that contain a given substring.\n   \
    \         \n*/\nstring[] filter_by_substring(string[] strings, string substring,\
    \ int startIndex, int endIndex) \n{\n    string[] result = new string[strings.length];\n\
    \    for (int i = 0; i < strings.length; ++i)\n    {\n        if (strings[i].contains(substring,\
    \ startIndex, endIndex))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that contain\
    \ a given substring.\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring, int startIndex, int endIndex, bool caseSensitive)\
    \ \n{\n    string[] result = new string[strings.length];\n    for (int i = 0;\
    \ i < strings.length; ++i)\n    {\n        if (caseSensitive ? strings[i].contains(substring,\
    \ startIndex, endIndex) : strings[i].toLowerCase().contains(substring.toLowerCase(),\
    \ startIndex, endIndex))\n            result[i] = strings[i];\n    }\n    return\
    \ result;\n}\n/*\n Filter an input list of strings only for ones that contain\
    \ a given substring.\n            \n*/\nstring[] filter_by_substring(string[]\
    \ strings, string substring, int startIndex, int endIndex, bool caseSensi", "{\n\
    \tstring[] result = new string[strings.length];\n\tfor (int i = 0; i < strings.length;\
    \ ++i)\n\t\tif (strings[i].startsWith(prefix))\n\t\t\tresult[i] = strings[i];\n\
    \treturn result;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
