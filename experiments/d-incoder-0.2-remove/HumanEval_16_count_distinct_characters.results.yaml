language: d
name: HumanEval_16_count_distinct_characters
results:
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n        char\
    \ c = string[i];\n        \n        for(int j = 0; j < string.length(); j++)\n\
    \        {\n            char d = string[j];\n            \n            if(c !=\
    \ d)\n            {\n                break;\n            }\n        }\n      \
    \  \n        count++;\n    }\n    \n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n\
    \    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\"\
    ) == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"\
    Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptriz5d_6.d(11): Error: no property `length` for type `string`

    /tmp/tmptriz5d_6.d(15): Error: no property `length` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptriz5d_6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n\tlong count\
    \ = 0;\n\tfor (int i = 0; i < string.length(); i++)\n\t{\n\t\tchar c = string[i];\n\
    \t\tfor (int j = 0; j < string.length(); j++)\n\t\t{\n\t\t\tif (i != j)\n\t\t\t\
    {\n\t\t\t\tif (string[i] == string[j])\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t\
    \tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n  \
    \  alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\")\
    \ == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\"\
    ) == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"\
    Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptexvlcnt.d(10): Error: no property `length` for type `string`

    /tmp/tmptexvlcnt.d(13): Error: no property `length` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptexvlcnt.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n  \
    \          char d = string[j];\n            if(c == d)\n            {\n      \
    \          count++;\n                break;\n            }\n        }\n    }\n\
    \    return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c == d)\n \
    \           {\n                count++;\n                break;\n            }\n\
    \        }\n    }\n    return count;\n}\n/*\n Given a string, find out how many\
    \ distinct characters (regardless of case) does it consist of\n            \n\
    */\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n\
    \        for(int j = 0; j < string.length(); j++)\n        {\n            char\
    \ d = string[j];\n            if(c == d)\n            {\n                count++;\n\
    \                break;\n            }\n        }\n    }\n    return count;\n\
    }\n/*\n Given a string, find out how many distinct characters (regardless of case)\
    \ does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c == d)\n \
    \           {\n                count++;\n                break;\n            }\n\
    \        }\n    }\n    return count;\n}\n/*\n Given a string, find out how many\
    \ distinct characters (regardless of case) does it consist of\n            \n\
    */\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n\
    \        for(int j = 0; j < string.length(); j++)\n        {\n            char\
    \ d = string[j];\n            if(c == d)\n            {\n                count++;\n\
    \                break;\n            }\n        }\n    }\n    return count;\n\
    }\n/*\n Given a string, find out how many distinct characters (regardless of case)\
    \ does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    \nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpc4o_3mj3.d(121): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc4o_3mj3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n\tlong count\
    \ = 0;\n\tfor (int i = 0; i < string.length(); i++)\n\t{\n\t\tchar c = string[i];\n\
    \t\tfor (int j = 0; j < string.length(); j++)\n\t\t{\n\t\t\tchar d = string[j];\n\
    \t\t\tif (c == d)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\
    \t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6qi_0tu1.d(10): Error: no property `length` for type `string`

    /tmp/tmp6qi_0tu1.d(13): Error: no property `length` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6qi_0tu1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n  \
    \          char d = string[j];\n            if(c != d)\n            {\n      \
    \          break;\n            }\n        }\n        count++;\n    }\n    return\
    \ count;\n}\n/*\n Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n        }\n        count++;\n\
    \    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n        }\n        count++;\n\
    \    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n        }\n        count++;\n\
    \    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n        }\n        count++;\n\
    \    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        \nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppruzgbaf.d(123): Error: found `unittest` instead of statement

    /tmp/tmppruzgbaf.d(133): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppruzgbaf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n\tlong count\
    \ = 0;\n\tfor (int i = 0; i < string.length(); i++)\n\t{\n\t\tchar c = string[i];\n\
    \t\tfor (int j = 0; j < string.length(); j++)\n\t\t{\n\t\t\tif (i != j && string[i]\
    \ == string[j])\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tcount += 1;\n\t\
    }\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp01ttpom3.d(10): Error: no property `length` for type `string`

    /tmp/tmp01ttpom3.d(13): Error: no property `length` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp01ttpom3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        if(!std.isLower(c))\n            count++;\n    }\n    return\
    \ count;\n}\n/*\n Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        if(!std.isLower(c))\n           \
    \ count++;\n    }\n    return count;\n}\n/*\n Given a string, find out how many\
    \ distinct characters (regardless of case) does it consist of\n            \n\
    */\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n\
    \        if(!std.isLower(c))\n            count++;\n    }\n    return count;\n\
    }\n/*\n Given a string, find out how many distinct characters (regardless of case)\
    \ does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        if(!std.isLower(c))\n           \
    \ count++;\n    }\n    return count;\n}\n/*\n Given a string, find out how many\
    \ distinct characters (regardless of case) does it consist of\n            \n\
    */\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n\
    \        if(!std.isLower(c))\n            count++;\n    }\n    return count;\n\
    }\n/*\n Given a string, find out how many distinct characters (regardless of case)\
    \ does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        if(!std.isLower(c))\n           \
    \ count++;\n    }\n    return count;\n}\n/*\n Given a string, find out how many\
    \ distinct characters (regardless of case) does it consist of\n            \n\
    */\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n\
    \        if(!std.isLower(c))\n            count++;\n    }\n\nunittest\n{\n   \
    \ alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") ==\
    \ 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\"\
    ) == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"\
    Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppla124ao.d(107): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppla124ao.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n  \
    \          char d = string[j];\n            if(c != d)\n            {\n      \
    \          break;\n            }\n        }\n        count++;\n    }\n    return\
    \ count;\n}\n/*\n Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n        }\n        count++;\n\
    \    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n        }\n        count++;\n\
    \    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n        }\n        count++;\n\
    \    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n        }\n        count++;\n\
    \    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        \nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppruzgbaf.d(123): Error: found `unittest` instead of statement

    /tmp/tmppruzgbaf.d(133): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppruzgbaf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n  \
    \          char d = string[j];\n            if(c != d)\n            {\n      \
    \          break;\n            }\n        }\n        count++;\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n\
    \    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmxt3pnzo.d(10): Error: no property `length` for type `string`

    /tmp/tmpmxt3pnzo.d(13): Error: no property `length` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmxt3pnzo.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        if(!std.typecons.isUppercase(c))\n        {\n          \
    \  count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"\
    abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"\
    aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpz46hrqj9.d(10): Error: no property `length` for type `string`

    /tmp/tmpz46hrqj9.d(13): Error: undefined identifier `isUppercase` in module `std.typecons`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz46hrqj9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        if(!std.typecons.isUpper(c))\n            count++;\n   \
    \ }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpngaw_dng.d(10): Error: no property `length` for type `string`

    /tmp/tmpngaw_dng.d(13): Error: undefined identifier `isUpper` in module `std.typecons`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpngaw_dng.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n\tlong count\
    \ = 0;\n\tfor(int i = 0; i < string.length(); i++)\n\t{\n\t\tchar c = string[i];\n\
    \t\tfor(int j = 0; j < string.length(); j++)\n\t\t{\n\t\t\tchar d = string[j];\n\
    \t\t\tif(c != d)\n\t\t\t{\n\t\t\t\tif(c >= 'a' && c <= 'z')\n\t\t\t\t{\n\t\t\t\
    \t\tif(d >= 'a' && d <= 'z')\n\t\t\t\t\t{\n\t\t\t\t\t\tif(c != d)\n\t\t\t\t\t\t\
    {\n\t\t\t\t\t\t\tcount++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\
    \t\t\t\t{\n\t\t\t\t\tif(d >= 'A' && d <= 'Z')\n\t\t\t\t\t{\n\t\t\t\t\t\tif(c !=\
    \ d)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcount++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\
    \t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate\
    \ = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"\
    abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"\
    aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7hyflx1q.d(10): Error: no property `length` for type `string`

    /tmp/tmp7hyflx1q.d(13): Error: no property `length` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7hyflx1q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = i; j < string.length(); j++)\n        {\n  \
    \          if(string[i] == string[j])\n            {\n                count++;\n\
    \                break;\n            }\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpp_z7rh92.d(10): Error: no property `length` for type `string`

    /tmp/tmpp_z7rh92.d(13): Error: no property `length` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp_z7rh92.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n\tlong count\
    \ = 0;\n\t\n\tfor (int i = 0; i < string.length(); i++)\n\t{\n\t\tchar c = string[i];\n\
    \t\t\n\t\tif (c >= 'A' && c <= 'Z')\n\t\t\tcount++;\n\t\telse if (c >= 'a' &&\
    \ c <= 'z')\n\t\t\tcount++;\n\t\telse if (c >= '0' && c <= '9')\n\t\t\tcount++;\n\
    \t}\n\t\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplo9iozub.d(11): Error: no property `length` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplo9iozub.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length; i++)\n    {\n        for(int j =\
    \ 0; j < string.length; j++)\n        {\n            if(string[i] == string[j])\n\
    \            {\n                count++;\n            }\n        }\n    }\n  \
    \  return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length; i++)\n\
    \    {\n        for(int j = 0; j < string.length; j++)\n        {\n          \
    \  if(string[i] == string[j])\n            {\n                count++;\n     \
    \       }\n        }\n    }\n    return count;\n}\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length; i++)\n    {\n        for(int j =\
    \ 0; j < string.length; j++)\n        {\n            if(string[i] == string[j])\n\
    \            {\n                count++;\n            }\n        }\n    }\n  \
    \  return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length; i++)\n\
    \    {\n        for(int j = 0; j < string.length; j++)\n        {\n          \
    \  if(string[i] == string[j])\n            {\n                count++;\n     \
    \       }\n        }\n    }\n    return count;\n}\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length; i++)\n    {\n        for(int j =\
    \ 0; j < string.length; j++)\n        {\n            if(string[i] == string[j])\n\
    \            {\n                count++;\n            }\n        }\n    }\n  \
    \  return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length; i++)\n\
    \    {\n        for(int j = 0; j < string.length; j++)\n        {\n          \
    \  if(string[i] == string[j])\n            {\n                count++;\n     \
    \       }\n        }\n    }\n    return count;\n}\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int \nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp20b1at5m.d(125): Error: no identifier for declarator `int`

    /tmp/tmp20b1at5m.d(125): Error: expression expected, not `unittest`

    /tmp/tmp20b1at5m.d(126): Error: found `{` when expecting `;` following `for` condition

    /tmp/tmp20b1at5m.d(127): Error: expression expected, not `alias`

    /tmp/tmp20b1at5m.d(127): Error: found `candidate` when expecting `)`

    /tmp/tmp20b1at5m.d(127): Error: found `=` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp20b1at5m.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = i; j < string.length(); j++)\n        {\n  \
    \          char d = string[j];\n            if(c != d)\n            {\n      \
    \          break;\n            }\n            else\n            {\n          \
    \      count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpx789dlzt.d(10): Error: no property `length` for type `string`

    /tmp/tmpx789dlzt.d(13): Error: no property `length` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx789dlzt.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n  \
    \          char d = string[j];\n            if(c != d)\n            {\n      \
    \          count++;\n                break;\n            }\n        }\n    }\n\
    \    return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                count++;\n                break;\n            }\n\
    \        }\n    }\n    return count;\n}\n/*\n Given a string, find out how many\
    \ distinct characters (regardless of case) does it consist of\n            \n\
    */\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n\
    \        for(int j = 0; j < string.length(); j++)\n        {\n            char\
    \ d = string[j];\n            if(c != d)\n            {\n                count++;\n\
    \                break;\n            }\n        }\n    }\n    return count;\n\
    }\n/*\n Given a string, find out how many distinct characters (regardless of case)\
    \ does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                count++;\n                break;\n            }\n\
    \        }\n    }\n    return count;\n}\n/*\n Given a string, find out how many\
    \ distinct characters (regardless of case) does it consist of\n            \n\
    */\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n\
    \        for(int j = 0; j < string.length(); j++)\n        {\n            char\
    \ d = string[j];\n            if(c != d)\n            {\n                count++;\n\
    \                break;\n            }\n        }\n    }\n    return count;\n\
    }\n/*\n Given a string, find out how many distinct characters (regardless of case)\
    \ does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length()\nunittest\n\
    {\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpb7fav1wz.d(121): Error: found `unittest` when expecting `;` following
    `for` condition

    /tmp/tmpb7fav1wz.d(131): Error: found `void` when expecting `)`

    /tmp/tmpb7fav1wz.d(131): Error: found `{` when expecting `;` following statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb7fav1wz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    \n    for(int i = 0; i < string.length; i++)\n    {\n        char\
    \ c = string[i];\n        \n        if(!std.isAlpha(c))\n        {\n         \
    \   count++;\n        }\n    }\n    \n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n\
    \    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\"\
    ) == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"\
    Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjjryz72a.d(15): Error: undefined identifier `isAlpha` in package
    `std`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjjryz72a.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n\tlong count\
    \ = 0;\n\tfor (int i = 0; i < string.length(); i++)\n\t{\n\t\tfor (int j = 0;\
    \ j < string.length(); j++)\n\t\t{\n\t\t\tif (string[i] == string[j])\n\t\t\t\
    {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n  \
    \  alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\")\
    \ == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\"\
    ) == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"\
    Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkldlbxd2.d(10): Error: no property `length` for type `string`

    /tmp/tmpkldlbxd2.d(12): Error: no property `length` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkldlbxd2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n  \
    \          char d = string[j];\n            if(c != d)\n            {\n      \
    \          break;\n            }\n            else\n            {\n          \
    \      count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3urgz1ry.d(10): Error: no property `length` for type `string`

    /tmp/tmp3urgz1ry.d(13): Error: no property `length` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3urgz1ry.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        if(!std.typecons.isUpper(c))\n        {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjw2m5u4g.d(10): Error: no property `length` for type `string`

    /tmp/tmpjw2m5u4g.d(13): Error: undefined identifier `isUpper` in module `std.typecons`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjw2m5u4g.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length; i++)\n    {\n        char c = string[i];\n\
    \        for(int j = 0; j < string.length; j++)\n        {\n            char d\
    \ = string[j];\n            if(c != d)\n            {\n                count++;\n\
    \                break;\n            }\n        }\n    }\n    return count;\n\
    }\n/*\n Given a string, find out how many distinct characters (regardless of case)\
    \ does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length; i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length;\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                count++;\n                break;\n            }\n\
    \        }\n    }\n    return count;\n}\n/*\n Given a string, find out how many\
    \ distinct characters (regardless of case) does it consist of\n            \n\
    */\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length; i++)\n    {\n        char c = string[i];\n\
    \        for(int j = 0; j < string.length; j++)\n        {\n            char d\
    \ = string[j];\n            if(c != d)\n            {\n                count++;\n\
    \                break;\n            }\n        }\n    }\n    return count;\n\
    }\n/*\n Given a string, find out how many distinct characters (regardless of case)\
    \ does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length; i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length;\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                count++;\n                break;\n            }\n\
    \        }\n    }\n    return count;\n}\n/*\n Given a string, find out how many\
    \ distinct characters (regardless of case) does it consist of\n            \n\
    */\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length; i++)\n    {\n        char c = string[i];\n\
    \        for(int j = 0; j < string.length; j++)\n        {\n            char d\
    \ = string[j];\n            if(c != d)\n            {\n                count++;\n\
    \                break;\n            }\n        }\n    }\n    return count;\n\
    }\n/*\n Given a string, find out how many distinct characters (regardless of case)\
    \ does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length; i++)\n\
    \    {\n        char c = string[i];\n        \nunittest\n{\n    alias candidate\
    \ = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"\
    abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"\
    aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpz82it07g.d(124): Error: found `unittest` instead of statement

    /tmp/tmpz82it07g.d(134): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz82it07g.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n\tlong count\
    \ = 0;\n\tfor (int i = 0; i < string.length(); i++)\n\t{\n\t\tchar c = string[i];\n\
    \t\tif (std.ctype.isUpper(c))\n\t\t\tcount++;\n\t\telse if (std.ctype.isLower(c))\n\
    \t\t\tcount++;\n\t\telse\n\t\t\tcount++;\n\t}\n\treturn count;\n}\nunittest\n\
    {\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6h2fnwgb.d(10): Error: no property `length` for type `string`

    /tmp/tmp6h2fnwgb.d(13): Error: undefined identifier `ctype` in package `std`

    /tmp/tmp6h2fnwgb.d(15): Error: undefined identifier `ctype` in package `std`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6h2fnwgb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string.at(i);\n        if(!std.isAlpha(c))\n        {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxhon7ufx.d(10): Error: no property `length` for type `string`

    /tmp/tmpxhon7ufx.d(12): Error: no property `at` for type `string`

    /tmp/tmpxhon7ufx.d(13): Error: undefined identifier `isAlpha` in package `std`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxhon7ufx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n  \
    \          char d = string[j];\n            if(c != d)\n            {\n      \
    \          count++;\n                break;\n            }\n        }\n    }\n\
    \    return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                count++;\n                break;\n            }\n\
    \        }\n    }\n    return count;\n}\n/*\n Given a string, find out how many\
    \ distinct characters (regardless of case) does it consist of\n            \n\
    */\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n\
    \        for(int j = 0; j < string.length(); j++)\n        {\n            char\
    \ d = string[j];\n            if(c != d)\n            {\n                count++;\n\
    \                break;\n            }\n        }\n    }\n    return count;\n\
    }\n/*\n Given a string, find out how many distinct characters (regardless of case)\
    \ does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                count++;\n                break;\n            }\n\
    \        }\n    }\n    return count;\n}\n/*\n Given a string, find out how many\
    \ distinct characters (regardless of case) does it consist of\n            \n\
    */\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n\
    \        for(int j = 0; j < string.length(); j++)\n        {\n            char\
    \ d = string[j];\n            if(c != d)\n            {\n                count++;\n\
    \                break;\n            }\n        }\n    }\n    return count;\n\
    }\n/*\n Given a string, find out how many distinct characters (regardless of case)\
    \ does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length()\nunittest\n\
    {\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpb7fav1wz.d(121): Error: found `unittest` when expecting `;` following
    `for` condition

    /tmp/tmpb7fav1wz.d(131): Error: found `void` when expecting `)`

    /tmp/tmpb7fav1wz.d(131): Error: found `{` when expecting `;` following statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb7fav1wz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        if(!std.isLower(c))\n            count++;\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n\
    \    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpobj67i99.d(10): Error: no property `length` for type `string`

    /tmp/tmpobj67i99.d(13): Error: undefined identifier `isLower` in package `std`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpobj67i99.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n  \
    \          char d = string[j];\n            if(c != d)\n            {\n      \
    \          break;\n            }\n        }\n        count++;\n    }\n    return\
    \ count;\n}\n/*\n Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n        }\n        count++;\n\
    \    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n        }\n        count++;\n\
    \    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n        }\n        count++;\n\
    \    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n        }\n        count++;\n\
    \    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        \nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppruzgbaf.d(123): Error: found `unittest` instead of statement

    /tmp/tmppruzgbaf.d(133): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppruzgbaf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n  \
    \          if(c == string[j])\n            {\n                count++;\n     \
    \       }\n        }\n    }\n    return count;\n}\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n  \
    \          if(c == string[j])\n            {\n                count++;\n     \
    \       }\n        }\n    }\n    return count;\n}\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n  \
    \          if(c == string[j])\n            {\n                count++;\n     \
    \       }\n        }\n    }\n    return count;\n}\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n  \
    \          if(c == string[j])\n            {\n                count++;\n     \
    \       }\n        }\n    }\n    return count;\n}\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n  \
    \          if(c == string[j])\n            {\n                count++;\n     \
    \       }\n        }\n    }\n    return count;\n}\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n  \
    \          if(c == string[j])\n            {\n                count++;\n     \
    \       }\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n \
    \   assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpf7hpimx6.d(119): Error: found `unittest` instead of statement

    /tmp/tmpf7hpimx6.d(129): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmpf7hpimx6.d(129): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf7hpimx6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n\tlong count\
    \ = 0;\n\tfor (int i = 0; i < string.length(); i++)\n\t{\n\t\tchar c = string[i];\n\
    \t\tfor (int j = 0; j < string.length(); j++)\n\t\t{\n\t\t\tif (i == j)\n\t\t\t\
    \tcontinue;\n\t\t\tchar d = string[j];\n\t\t\tif (c != d)\n\t\t\t\tbreak;\n\t\t\
    \tcount++;\n\t\t}\n\t}\n\treturn count;\n}\n/*\n Given a string, find out how\
    \ many distinct characters (regardless of case) does it consist of\n         \
    \   \n*/\nlong count_distinct_characters(string string) \n{\n\tlong count = 0;\n\
    \tfor (int i = 0; i < string.length(); i++)\n\t{\n\t\tchar c = string[i];\n\t\t\
    for (int j = 0; j < string.length(); j++)\n\t\t{\n\t\t\tif (i == j)\n\t\t\t\t\
    continue;\n\t\t\tchar d = string[j];\n\t\t\tif (c != d)\n\t\t\t\tbreak;\n\t\t\t\
    count++;\n\t\t}\n\t}\n\treturn count;\n}\n/*\n Given a string, find out how many\
    \ distinct characters (regardless of case) does it consist of\n            \n\
    */\nlong count_distinct_characters(string string) \n{\n\tlong count = 0;\n\tfor\
    \ (int i = 0; i < string.length(); i++)\n\t{\n\t\tchar c = string[i];\n\t\tfor\
    \ (int j = 0; j < string.length(); j++)\n\t\t{\n\t\t\tif (i == j)\n\t\t\t\tcontinue;\n\
    \t\t\tchar d = string[j];\n\t\t\tif (c != d)\n\t\t\t\tbreak;\n\t\t\tcount++;\n\
    \t\t}\n\t}\n\treturn count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n\tlong count = 0;\n\tfor (int i = 0; i < string.length(); i++)\n\
    \t{\n\t\tchar c = string[i];\n\t\tfor (int j = 0; j < string.length(); j++)\n\t\
    \t{\n\t\t\tif (i == j)\n\t\t\t\tcontinue;\n\t\t\tchar d = string[j];\n\t\t\tif\
    \ (c != d)\n\t\t\t\tbreak;\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\n/*\n\
    \ Given a string, find out how many distinct characters (regardless of case) does\
    \ it consist of\n            \n*/\nlong count_distinct_characters(string string)\
    \ \n{\n\tlong count = 0;\n\tfor (int i = 0; i < string.length(); i++)\n\t{\n\t\
    \tchar c = string[i];\n\t\tfor (int j = 0; j < string.length(); j++)\n\t\t{\n\t\
    \t\tif (i == j)\n\t\t\t\tcontinue;\n\t\t\tchar d = string[j];\n\t\t\tif (c !=\
    \ d)\n\t\t\t\tbreak;\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\n/*\n Given\
    \ a string, find out how many distinct characters (regardless of case) does it\
    \ consist of\n            \n*/\nlong count_\nunittest\n{\n    alias candidate\
    \ = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"\
    abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"\
    aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpri4wblkj.d(118): Error: semicolon expected, not `unittest`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpri4wblkj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        for(int j\
    \ = 0; j < string.length(); j++)\n        {\n            if(i == j)\n        \
    \    {\n                continue;\n            }\n            char c = string.charAt(i);\n\
    \            char d = string.charAt(j);\n            if(c != d)\n            {\n\
    \                continue;\n            }\n            count++;\n        }\n \
    \   }\n    return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        for(int j = 0; j < string.length(); j++)\n        {\n        \
    \    if(i == j)\n            {\n                continue;\n            }\n   \
    \         char c = string.charAt(i);\n            char d = string.charAt(j);\n\
    \            if(c != d)\n            {\n                continue;\n          \
    \  }\n            count++;\n        }\n    }\n    return count;\n}\n/*\n Given\
    \ a string, find out how many distinct characters (regardless of case) does it\
    \ consist of\n            \n*/\nlong count_distinct_characters(string string)\
    \ \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n   \
    \ {\n        for(int j = 0; j < string.length(); j++)\n        {\n           \
    \ if(i == j)\n            {\n                continue;\n            }\n      \
    \      char c = string.charAt(i);\n            char d = string.charAt(j);\n  \
    \          if(c != d)\n            {\n                continue;\n            }\n\
    \            count++;\n        }\n    }\n    return count;\n}\n/*\n Given a string,\
    \ find out how many distinct characters (regardless of case) does it consist of\n\
    \            \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        for(int\
    \ j = 0; j < string.length(); j++)\n        {\n            if(i == j)\n      \
    \      {\n                continue;\n            }\n            char c = string.charAt(i);\n\
    \            char d = string.charAt(j);\n            if(c != d)\n            {\n\
    \                continue;\n            }\n            count++;\n        }\n \
    \   }\n    return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        for(int j = 0; j < string.length(); j++)\n        {\n        \
    \    if(i == j)\n            {\n                continue;\n            }\n   \
    \         char c = string.charAt(i);\n            \nunittest\n{\n    alias candidate\
    \ = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"\
    abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"\
    aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpc3q_7znw.d(124): Error: found `unittest` instead of statement

    /tmp/tmpc3q_7znw.d(134): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmpc3q_7znw.d(134): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc3q_7znw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string.at(i);\n        for(int j = 0; j < string.length(); j++)\n        {\n\
    \            char d = string.at(j);\n            if(c != d)\n            {\n \
    \               break;\n            }\n        }\n        count++;\n    }\n  \
    \  return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptxpr2fu1.d(10): Error: no property `length` for type `string`

    /tmp/tmptxpr2fu1.d(12): Error: no property `at` for type `string`

    /tmp/tmptxpr2fu1.d(13): Error: no property `length` for type `string`

    /tmp/tmptxpr2fu1.d(15): Error: no property `at` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptxpr2fu1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n  \
    \          char d = string[j];\n            if(c != d)\n            {\n      \
    \          count++;\n                break;\n            }\n        }\n    }\n\
    \    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5netj2z9.d(10): Error: no property `length` for type `string`

    /tmp/tmp5netj2z9.d(13): Error: no property `length` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5netj2z9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n  \
    \          char d = string[j];\n            if(c != d)\n            {\n      \
    \          if(c >= 'A' && c <= 'Z')\n                {\n                    if(d\
    \ >= 'A' && d <= 'Z')\n                    {\n                        if(c !=\
    \ d)\n                        {\n                            count++;\n      \
    \                  }\n                    }\n                    else\n      \
    \              {\n                        count++;\n                    }\n  \
    \              }\n                else\n                {\n                  \
    \  count++;\n                }\n            }\n        }\n    }\n    return count;\n\
    }\n/*\n Given a string, find out how many distinct characters (regardless of case)\
    \ does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                if(c >= 'A' && c <= 'Z')\n                {\n \
    \                   if(d >= 'A' && d <= 'Z')\n                    {\n        \
    \                if(c != d)\n                        {\n                     \
    \       count++;\n                        }\n                    }\n         \
    \           else\n                    {\n                        count++;\n  \
    \                  }\n                }\n                else\n              \
    \  {\n                    count++;\n                }\n            }\n       \
    \ }\n    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                if(c >= 'A' && c <= 'Z')\n                {\n \
    \                   if(d >= 'A' && d <= 'Z')\n                    {\n        \
    \                if(c != d)\n                        {\n                     \
    \       count++;\n                        }\n                    }\n         \
    \           else\n                    {\n                        count++;\n  \
    \                  }\n                }\n                else\n              \
    \  {\n                    count++;\n                }\n            }\n       \
    \ }\n    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpcwt7j43o.d(127): Error: semicolon expected, not `unittest`

    /tmp/tmpcwt7j43o.d(127): Error: found `unittest` instead of statement

    /tmp/tmpcwt7j43o.d(137): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcwt7j43o.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = i; j < string.length(); j++)\n        {\n  \
    \          char d = string[j];\n            if(c != d)\n            {\n      \
    \          break;\n            }\n            else\n            {\n          \
    \      count++;\n            }\n        }\n    }\n    return count;\n}\n/*\n Given\
    \ a string, find out how many distinct characters (regardless of case) does it\
    \ consist of\n            \n*/\nlong count_distinct_characters(string string)\
    \ \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n   \
    \ {\n        char c = string[i];\n        for(int j = i; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n            else\n     \
    \       {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}\n/*\n Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = i; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n            else\n     \
    \       {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}\n/*\n Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = i; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n            else\n     \
    \       {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}\n/*\n Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = i; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n            else\n     \
    \       {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n\
    \    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpz8vq_w8k.d(128): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz8vq_w8k.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n        char\
    \ c = string[i];\n        \n        for(int j = 0; j < string.length(); j++)\n\
    \        {\n            char d = string[j];\n            \n            if(c !=\
    \ d)\n            {\n                break;\n            }\n            \n   \
    \         count++;\n        }\n    }\n    \n    return count;\n}\nunittest\n{\n\
    \    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\"\
    ) == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\"\
    ) == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"\
    Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_y1yin2b.d(11): Error: no property `length` for type `string`

    /tmp/tmp_y1yin2b.d(15): Error: no property `length` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_y1yin2b.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        if(!std.isAlpha(c))\n        {\n            count++;\n \
    \       }\n    }\n    return count;\n}\n/*\n Given a string, find out how many\
    \ distinct characters (regardless of case) does it consist of\n            \n\
    */\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n\
    \        if(!std.isAlpha(c))\n        {\n            count++;\n        }\n   \
    \ }\n    return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        if(!std.isAlpha(c))\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}\n/*\n Given a string,\
    \ find out how many distinct characters (regardless of case) does it consist of\n\
    \            \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char\
    \ c = string[i];\n        if(!std.isAlpha(c))\n        {\n            count++;\n\
    \        }\n    }\n    return count;\n}\n/*\n Given a string, find out how many\
    \ distinct characters (regardless of case) does it consist of\n            \n\
    */\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n\
    \        if(!std.isAlpha(c))\n        {\n            count++;\n        }\n   \
    \ }\n    return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        if(!std.isAlpha(c))\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}\n/*\n Given a string,\
    \ find out how many distinct characters (regardless of case) does it consist of\n\
    \            \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char\
    \ c = string\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n\
    \    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4uglfjre.d(115): Error: semicolon expected, not `unittest`

    /tmp/tmp4uglfjre.d(115): Error: found `unittest` instead of statement

    /tmp/tmp4uglfjre.d(125): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4uglfjre.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        if(!std.typecons.isUpper(c))\n        {\n            count++;\n\
    \        }\n    }\n    return count;\n}\n/*\n Given a string, find out how many\
    \ distinct characters (regardless of case) does it consist of\n            \n\
    */\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n\
    \        if(!std.typecons.isUpper(c))\n        {\n            count++;\n     \
    \   }\n    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        if(!std.typecons.isUpper(c))\n  \
    \      {\n            count++;\n        }\n    }\n    return count;\n}\n/*\n Given\
    \ a string, find out how many distinct characters (regardless of case) does it\
    \ consist of\n            \n*/\nlong count_distinct_characters(string string)\
    \ \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n   \
    \ {\n        char c = string[i];\n        if(!std.typecons.isUpper(c))\n     \
    \   {\n            count++;\n        }\n    }\n    return count;\n}\n/*\n Given\
    \ a string, find out how many distinct characters (regardless of case) does it\
    \ consist of\n            \n*/\nlong count_distinct_characters(string string)\
    \ \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n   \
    \ {\n        char c = string[i];\n        if(!std.typecons.isUpper(c))\n     \
    \   {\n            count++;\n        }\n    }\n    return count;\n}\n/*\n Given\
    \ a string, find out how many distinct characters (regardless of case) does it\
    \ consist of\n            \n*/\nlong count_distinct_characters(string string)\
    \ \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n   \
    \ {\n        char c = string[i];\n        if(!std.typecons.isUpper(c))\n     \
    \   {\n            count++;\n        }\n    }\n    return count;\n}\n/*\n Given\
    \ a string, find out how many distinct characters (regardless of case) does it\
    \ consist of\n            \n*/\nlong count_distinct_characters(string string)\
    \ \n{\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n   \
    \ assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n  \
    \  assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu08q3yo_.d(112): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu08q3yo_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n  \
    \          if(c == string[j])\n            {\n                count++;\n     \
    \           break;\n            }\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpj4_w39np.d(10): Error: no property `length` for type `string`

    /tmp/tmpj4_w39np.d(13): Error: no property `length` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj4_w39np.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    foreach(char c in string)\n    {\n        count += 1;\n    }\n   \
    \ return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    foreach(char c in string)\n    {\n   \
    \     count += 1;\n    }\n    return count;\n}\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    foreach(char c in string)\n    {\n        count += 1;\n    }\n   \
    \ return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    foreach(char c in string)\n    {\n   \
    \     count += 1;\n    }\n    return count;\n}\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    foreach(char c in string)\n    {\n        count += 1;\n    }\n   \
    \ return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    foreach(char c in string)\n    {\n   \
    \     count += 1;\n    }\n    return count;\n}\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    foreach(char c in string)\n    {\n        count += 1;\n    }\n   \
    \ return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    foreach(char c in string)\n    {\n   \
    \     count += 1;\n    }\n    return count;\n}\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    foreach\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqxk1go2s.d(10): Error: found `in` when expecting `;`

    /tmp/tmpqxk1go2s.d(23): Error: found `in` when expecting `;`

    /tmp/tmpqxk1go2s.d(36): Error: found `in` when expecting `;`

    /tmp/tmpqxk1go2s.d(49): Error: found `in` when expecting `;`

    /tmp/tmpqxk1go2s.d(62): Error: found `in` when expecting `;`

    /tmp/tmpqxk1go2s.d(75): Error: found `in` when expecting `;`

    /tmp/tmpqxk1go2s.d(88): Error: found `in` when expecting `;`

    /tmp/tmpqxk1go2s.d(101): Error: found `in` when expecting `;`

    /tmp/tmpqxk1go2s.d(115): Error: found `unittest` when expecting `(`

    /tmp/tmpqxk1go2s.d(116): Error: basic type expected, not `{`

    /tmp/tmpqxk1go2s.d(116): Error: no identifier for declarator `_error_`

    /tmp/tmpqxk1go2s.d(116): Error: found `{` when expecting `;`

    /tmp/tmpqxk1go2s.d(117): Error: expression expected, not `alias`

    /tmp/tmpqxk1go2s.d(117): Error: found `candidate` when expecting `)`

    /tmp/tmpqxk1go2s.d(117): Error: found `=` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqxk1go2s.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        if(!std.isLower(c))\n        {\n            count++;\n \
    \       }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdh4rs23n.d(10): Error: no property `length` for type `string`

    /tmp/tmpdh4rs23n.d(13): Error: undefined identifier `isLower` in package `std`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdh4rs23n.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        if(!std.isAlpha(c))\n            continue;\n        for(int\
    \ j = i+1; j < string.length(); j++)\n        {\n            char d = string[j];\n\
    \            if(!std.isAlpha(d))\n                continue;\n            if(c\
    \ == d)\n                continue;\n            count += 1;\n            break;\n\
    \        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmps8mxp16n.d(10): Error: no property `length` for type `string`

    /tmp/tmps8mxp16n.d(13): Error: undefined identifier `isAlpha` in package `std`

    /tmp/tmps8mxp16n.d(15): Error: no property `length` for type `string`

    /tmp/tmps8mxp16n.d(18): Error: undefined identifier `isAlpha` in package `std`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmps8mxp16n.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        if(!std.isAlpha(c))\n        {\n            count++;\n \
    \       }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu7028l9o.d(10): Error: no property `length` for type `string`

    /tmp/tmpu7028l9o.d(13): Error: undefined identifier `isAlpha` in package `std`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu7028l9o.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = i+1; j < string.length(); j++)\n        {\n\
    \            char d = string[j];\n            if(c == d)\n            {\n    \
    \            count++;\n            }\n        }\n    }\n    return count;\n}\n\
    unittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpo_vov1s9.d(10): Error: no property `length` for type `string`

    /tmp/tmpo_vov1s9.d(13): Error: no property `length` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo_vov1s9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n  \
    \          if(string[i] == string[j])\n            {\n                count++;\n\
    \            }\n        }\n    }\n    return count;\n}\n/*\n Given a string, find\
    \ out how many distinct characters (regardless of case) does it consist of\n \
    \           \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char\
    \ c = string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n\
    \            if(string[i] == string[j])\n            {\n                count++;\n\
    \            }\n        }\n    }\n    return count;\n}\n/*\n Given a string, find\
    \ out how many distinct characters (regardless of case) does it consist of\n \
    \           \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char\
    \ c = string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n\
    \            if(string[i] == string[j])\n            {\n                count++;\n\
    \            }\n        }\n    }\n    return count;\n}\n/*\n Given a string, find\
    \ out how many distinct characters (regardless of case) does it consist of\n \
    \           \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char\
    \ c = string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n\
    \            if(string[i] == string[j])\n            {\n                count++;\n\
    \            }\n        }\n    }\n    return count;\n}\n/*\n Given a string, find\
    \ out how many distinct characters (regardless of case) does it consist of\n \
    \           \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char\
    \ c = string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n\
    \            if(string[i] == string[j])\n            {\n                count++;\n\
    \            }\n        }\n    }\n    return count;\n}\n/*\n Given a string, find\
    \ out how many distinct characters (regardless of case) does it consist of\n \
    \           \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char\
    \ c = string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n\
    \            if(string[i] == string[j])\n            {\n                count++;\n\
    \            }\n        }\n    }\n    return \nunittest\n{\n    alias candidate\
    \ = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"\
    abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"\
    aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjohaqnl_.d(122): Error: expression expected, not `unittest`

    /tmp/tmpjohaqnl_.d(123): Error: found `{` when expecting `;` following `return`
    statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjohaqnl_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        if(!std.isLower(c))\n            count++;\n    }\n    return\
    \ count;\n}\n/*\n Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        if(!std.isLower(c))\n           \
    \ count++;\n    }\n    return count;\n}\n/*\n Given a string, find out how many\
    \ distinct characters (regardless of case) does it consist of\n            \n\
    */\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n\
    \        if(!std.isLower(c))\n            count++;\n    }\n    return count;\n\
    }\n/*\n Given a string, find out how many distinct characters (regardless of case)\
    \ does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        if(!std.isLower(c))\n           \
    \ count++;\n    }\n    return count;\n}\n/*\n Given a string, find out how many\
    \ distinct characters (regardless of case) does it consist of\n            \n\
    */\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n\
    \        if(!std.isLower(c))\n            count++;\n    }\n    return count;\n\
    }\n/*\n Given a string, find out how many distinct characters (regardless of case)\
    \ does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        if(!std.isLower(c))\n           \
    \ count++;\n    }\n    return count;\n}\n/*\n Given a string, find out how many\
    \ distinct characters (regardless of case) does it consist of\n            \n\
    */\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n\
    \        if(!std.isLower(c))\n            count++;\n    }\n\nunittest\n{\n   \
    \ alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") ==\
    \ 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\"\
    ) == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"\
    Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppla124ao.d(107): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppla124ao.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string.at(i);\n        if(!std.isAlpha(c))\n        {\n            count++;\n\
    \        }\n    }\n    return count;\n}\n/*\n Given a string, find out how many\
    \ distinct characters (regardless of case) does it consist of\n            \n\
    */\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        char c = string.at(i);\n\
    \        if(!std.isAlpha(c))\n        {\n            count++;\n        }\n   \
    \ }\n    return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string.at(i);\n        if(!std.isAlpha(c))\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}\n/*\n Given a string,\
    \ find out how many distinct characters (regardless of case) does it consist of\n\
    \            \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char\
    \ c = string.at(i);\n        if(!std.isAlpha(c))\n        {\n            count++;\n\
    \        }\n    }\n    return count;\n}\n/*\n Given a string, find out how many\
    \ distinct characters (regardless of case) does it consist of\n            \n\
    */\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        char c = string.at(i);\n\
    \        if(!std.isAlpha(c))\n        {\n            count++;\n        }\n   \
    \ }\n    return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string.at(i);\n        if(!std.isAlpha(c))\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}\n/*\n Given a string,\
    \ find out how many distinct characters (regardless of case) does it consist of\n\
    \            \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    for(int i = 0; i < string.length(); i++)\n\nunittest\n{\n  \
    \  alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\")\
    \ == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\"\
    ) == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"\
    Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3uo21huz.d(114): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3uo21huz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    \n    foreach(char c in string)\n    {\n        if(!std.isAlpha(c))\n\
    \        {\n            count++;\n        }\n    }\n    \n    return count;\n\
    }\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsdf25ypb.d(11): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsdf25ypb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        if(!std.isAlpha(c))\n            continue;\n        for(int\
    \ j = i+1; j < string.length(); j++)\n        {\n            char d = string[j];\n\
    \            if(std.isAlpha(d))\n            {\n                count += 1;\n\
    \            }\n        }\n    }\n    return count;\n}\n/*\n Given a string, find\
    \ out how many distinct characters (regardless of case) does it consist of\n \
    \           \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char\
    \ c = string[i];\n        if(!std.isAlpha(c))\n            continue;\n       \
    \ for(int j = i+1; j < string.length(); j++)\n        {\n            char d =\
    \ string[j];\n            if(std.isAlpha(d))\n            {\n                count\
    \ += 1;\n            }\n        }\n    }\n    return count;\n}\n/*\n Given a string,\
    \ find out how many distinct characters (regardless of case) does it consist of\n\
    \            \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char\
    \ c = string[i];\n        if(!std.isAlpha(c))\n            continue;\n       \
    \ for(int j = i+1; j < string.length(); j++)\n        {\n            char d =\
    \ string[j];\n            if(std.isAlpha(d))\n            {\n                count\
    \ += 1;\n            }\n        }\n    }\n    return count;\n}\n/*\n Given a string,\
    \ find out how many distinct characters (regardless of case) does it consist of\n\
    \            \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char\
    \ c = string[i];\n        if(!std.isAlpha(c))\n            continue;\n       \
    \ for(int j = i+1; j < string.length(); j++)\n        {\n            char d =\
    \ string[j];\n            if(std.isAlpha(d))\n            {\n                count\
    \ += 1;\n            }\n        }\n    }\n    return count;\n}\n/*\n Given a string,\
    \ find out how many distinct characters (regardless of case) does it consist of\n\
    \            \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char\
    \ c = string[i];\n        if(!std.isAlpha(c))\n            continue;\n       \
    \ for(int j = i+1; j < string.length(); j\nunittest\n{\n    alias candidate =\
    \ count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"\
    abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"\
    aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0lz3p1sg.d(108): Error: found `unittest` when expecting `)`

    /tmp/tmp0lz3p1sg.d(118): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmp0lz3p1sg.d(118): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0lz3p1sg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        if(!std.typecons.isUpper(c))\n        {\n            count++;\n\
    \        }\n    }\n    return count;\n}\n/*\n Given a string, find out how many\
    \ distinct characters (regardless of case) does it consist of\n            \n\
    */\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n\
    \        if(!std.typecons.isUpper(c))\n        {\n            count++;\n     \
    \   }\n    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        if(!std.typecons.isUpper(c))\n  \
    \      {\n            count++;\n        }\n    }\n    return count;\n}\n/*\n Given\
    \ a string, find out how many distinct characters (regardless of case) does it\
    \ consist of\n            \n*/\nlong count_distinct_characters(string string)\
    \ \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n   \
    \ {\n        char c = string[i];\n        if(!std.typecons.isUpper(c))\n     \
    \   {\n            count++;\n        }\n    }\n    return count;\n}\n/*\n Given\
    \ a string, find out how many distinct characters (regardless of case) does it\
    \ consist of\n            \n*/\nlong count_distinct_characters(string string)\
    \ \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n   \
    \ {\n        char c = string[i];\n        if(!std.typecons.isUpper(c))\n     \
    \   {\n            count++;\n        }\n    }\n    return count;\n}\n/*\n Given\
    \ a string, find out how many distinct characters (regardless of case) does it\
    \ consist of\n            \n*/\nlong count_distinct_characters(string string)\
    \ \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n   \
    \ {\n        char c = string[i];\n        if(!std.typecons.isUpper(c))\n     \
    \   {\n            count++;\n        }\n    }\n    return count;\n}\n/*\n Given\
    \ a string, find out how many distinct characters (regardless of case) does it\
    \ consist of\n            \n*/\nlong count_distinct_characters(string string)\
    \ \n{\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n   \
    \ assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n  \
    \  assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu08q3yo_.d(112): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu08q3yo_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        if(!std.isAlpha(c))\n        {\n            count++;\n \
    \       }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu7028l9o.d(10): Error: no property `length` for type `string`

    /tmp/tmpu7028l9o.d(13): Error: undefined identifier `isAlpha` in package `std`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu7028l9o.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string.at(i);\n        if(!std.isAlpha(c))\n        {\n            count++;\n\
    \        }\n    }\n    return count;\n}\n/*\n Given a string, find out how many\
    \ distinct characters (regardless of case) does it consist of\n            \n\
    */\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        char c = string.at(i);\n\
    \        if(!std.isAlpha(c))\n        {\n            count++;\n        }\n   \
    \ }\n    return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string.at(i);\n        if(!std.isAlpha(c))\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}\n/*\n Given a string,\
    \ find out how many distinct characters (regardless of case) does it consist of\n\
    \            \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char\
    \ c = string.at(i);\n        if(!std.isAlpha(c))\n        {\n            count++;\n\
    \        }\n    }\n    return count;\n}\n/*\n Given a string, find out how many\
    \ distinct characters (regardless of case) does it consist of\n            \n\
    */\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        char c = string.at(i);\n\
    \        if(!std.isAlpha(c))\n        {\n            count++;\n        }\n   \
    \ }\n    return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string.at(i);\n        if(!std.isAlpha(c))\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}\n/*\n Given a string,\
    \ find out how many distinct characters (regardless of case) does it consist of\n\
    \            \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    for(int i = 0; i < string.length(); i++)\n\nunittest\n{\n  \
    \  alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\")\
    \ == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\"\
    ) == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"\
    Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3uo21huz.d(114): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3uo21huz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n  \
    \          char d = string[j];\n            if(c != d)\n            {\n      \
    \          count++;\n                break;\n            }\n        }\n    }\n\
    \    return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                count++;\n                break;\n            }\n\
    \        }\n    }\n    return count;\n}\n/*\n Given a string, find out how many\
    \ distinct characters (regardless of case) does it consist of\n            \n\
    */\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n\
    \        for(int j = 0; j < string.length(); j++)\n        {\n            char\
    \ d = string[j];\n            if(c != d)\n            {\n                count++;\n\
    \                break;\n            }\n        }\n    }\n    return count;\n\
    }\n/*\n Given a string, find out how many distinct characters (regardless of case)\
    \ does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                count++;\n                break;\n            }\n\
    \        }\n    }\n    return count;\n}\n/*\n Given a string, find out how many\
    \ distinct characters (regardless of case) does it consist of\n            \n\
    */\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n\
    \        for(int j = 0; j < string.length(); j++)\n        {\n            char\
    \ d = string[j];\n            if(c != d)\n            {\n                count++;\n\
    \                break;\n            }\n        }\n    }\n    return count;\n\
    }\n/*\n Given a string, find out how many distinct characters (regardless of case)\
    \ does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length()\nunittest\n\
    {\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpb7fav1wz.d(121): Error: found `unittest` when expecting `;` following
    `for` condition

    /tmp/tmpb7fav1wz.d(131): Error: found `void` when expecting `)`

    /tmp/tmpb7fav1wz.d(131): Error: found `{` when expecting `;` following statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb7fav1wz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    \n    foreach(char c in string)\n    {\n        count += 1;\n    }\n\
    \    \n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprw3n0h2m.d(11): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprw3n0h2m.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n  \
    \          char d = string[j];\n            if(c != d)\n            {\n      \
    \          break;\n            }\n            else\n            {\n          \
    \      count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3urgz1ry.d(10): Error: no property `length` for type `string`

    /tmp/tmp3urgz1ry.d(13): Error: no property `length` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3urgz1ry.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n  \
    \          char d = string[j];\n            if(c != d)\n            {\n      \
    \          count++;\n                break;\n            }\n        }\n    }\n\
    \    return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                count++;\n                break;\n            }\n\
    \        }\n    }\n    return count;\n}\n/*\n Given a string, find out how many\
    \ distinct characters (regardless of case) does it consist of\n            \n\
    */\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n\
    \        for(int j = 0; j < string.length(); j++)\n        {\n            char\
    \ d = string[j];\n            if(c != d)\n            {\n                count++;\n\
    \                break;\n            }\n        }\n    }\n    return count;\n\
    }\n/*\n Given a string, find out how many distinct characters (regardless of case)\
    \ does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                count++;\n                break;\n            }\n\
    \        }\n    }\n    return count;\n}\n/*\n Given a string, find out how many\
    \ distinct characters (regardless of case) does it consist of\n            \n\
    */\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n\
    \        for(int j = 0; j < string.length(); j++)\n        {\n            char\
    \ d = string[j];\n            if(c != d)\n            {\n                count++;\n\
    \                break;\n            }\n        }\n    }\n    return count;\n\
    }\n/*\n Given a string, find out how many distinct characters (regardless of case)\
    \ does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length()\nunittest\n\
    {\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpb7fav1wz.d(121): Error: found `unittest` when expecting `;` following
    `for` condition

    /tmp/tmpb7fav1wz.d(131): Error: found `void` when expecting `)`

    /tmp/tmpb7fav1wz.d(131): Error: found `{` when expecting `;` following statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb7fav1wz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n  \
    \          char d = string[j];\n            if(c != d)\n            {\n      \
    \          break;\n            }\n        }\n        count++;\n    }\n    return\
    \ count;\n}\n/*\n Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n        }\n        count++;\n\
    \    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n        }\n        count++;\n\
    \    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n        }\n        count++;\n\
    \    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n        }\n        count++;\n\
    \    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        \nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppruzgbaf.d(123): Error: found `unittest` instead of statement

    /tmp/tmppruzgbaf.d(133): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppruzgbaf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        if(!std.isAlpha(c))\n        {\n            count++;\n \
    \       }\n    }\n    return count;\n}\n/*\n Given a string, find out how many\
    \ distinct characters (regardless of case) does it consist of\n            \n\
    */\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n\
    \        if(!std.isAlpha(c))\n        {\n            count++;\n        }\n   \
    \ }\n    return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        if(!std.isAlpha(c))\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}\n/*\n Given a string,\
    \ find out how many distinct characters (regardless of case) does it consist of\n\
    \            \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char\
    \ c = string[i];\n        if(!std.isAlpha(c))\n        {\n            count++;\n\
    \        }\n    }\n    return count;\n}\n/*\n Given a string, find out how many\
    \ distinct characters (regardless of case) does it consist of\n            \n\
    */\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n\
    \        if(!std.isAlpha(c))\n        {\n            count++;\n        }\n   \
    \ }\n    return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        if(!std.isAlpha(c))\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}\n/*\n Given a string,\
    \ find out how many distinct characters (regardless of case) does it consist of\n\
    \            \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char\
    \ c = string\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n\
    \    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4uglfjre.d(115): Error: semicolon expected, not `unittest`

    /tmp/tmp4uglfjre.d(115): Error: found `unittest` instead of statement

    /tmp/tmp4uglfjre.d(125): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4uglfjre.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    foreach(char c in string)\n    {\n        if(!std.isLower(c))\n  \
    \          count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"\
    abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"\
    aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjpjt2f9p.d(10): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjpjt2f9p.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n        char\
    \ c = string[i];\n        \n        if(!std.typecons.isUpper(c))\n        {\n\
    \            count++;\n        }\n    }\n    \n    return count;\n}\nunittest\n\
    {\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpp36n70du.d(11): Error: no property `length` for type `string`

    /tmp/tmpp36n70du.d(15): Error: undefined identifier `isUpper` in module `std.typecons`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp36n70du.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n  \
    \          char d = string[j];\n            if(c != d)\n            {\n      \
    \          break;\n            }\n        }\n        count++;\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n\
    \    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmxt3pnzo.d(10): Error: no property `length` for type `string`

    /tmp/tmpmxt3pnzo.d(13): Error: no property `length` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmxt3pnzo.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = i; j < string.length(); j++)\n        {\n  \
    \          char d = string[j];\n            if(c != d)\n            {\n      \
    \          break;\n            }\n            else\n            {\n          \
    \      count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpx789dlzt.d(10): Error: no property `length` for type `string`

    /tmp/tmpx789dlzt.d(13): Error: no property `length` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx789dlzt.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string.at(i);\n        for(int j = 0; j < string.length(); j++)\n        {\n\
    \            char d = string.at(j);\n            if(c != d)\n            {\n \
    \               break;\n            }\n        }\n        count++;\n    }\n  \
    \  return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptxpr2fu1.d(10): Error: no property `length` for type `string`

    /tmp/tmptxpr2fu1.d(12): Error: no property `at` for type `string`

    /tmp/tmptxpr2fu1.d(13): Error: no property `length` for type `string`

    /tmp/tmptxpr2fu1.d(15): Error: no property `at` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptxpr2fu1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string.at(i);\n        for(int j = 0; j < string.length(); j++)\n        {\n\
    \            char d = string.at(j);\n            if(c != d)\n            {\n \
    \               break;\n            }\n        }\n        count++;\n    }\n  \
    \  return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptxpr2fu1.d(10): Error: no property `length` for type `string`

    /tmp/tmptxpr2fu1.d(12): Error: no property `at` for type `string`

    /tmp/tmptxpr2fu1.d(13): Error: no property `length` for type `string`

    /tmp/tmptxpr2fu1.d(15): Error: no property `at` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptxpr2fu1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n  \
    \          char d = string[j];\n            if(c != d)\n            {\n      \
    \          break;\n            }\n        }\n        count++;\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n\
    \    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmxt3pnzo.d(10): Error: no property `length` for type `string`

    /tmp/tmpmxt3pnzo.d(13): Error: no property `length` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmxt3pnzo.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n  \
    \          char d = string[j];\n            if(c != d)\n            {\n      \
    \          if(c >= 'a' && c <= 'z')\n                {\n                    if(d\
    \ >= 'a' && d <= 'z')\n                    {\n                        count++;\n\
    \                    }\n                    else\n                    {\n    \
    \                    count++;\n                    }\n                }\n    \
    \            else\n                {\n                    if(d >= 'a' && d <=\
    \ 'z')\n                    {\n                        count++;\n            \
    \        }\n                    else\n                    {\n                \
    \        count++;\n                    }\n                }\n            }\n \
    \       }\n    }\n    return count;\n}\n/*\n Given a string, find out how many\
    \ distinct characters (regardless of case) does it consist of\n            \n\
    */\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n\
    \        for(int j = 0; j < string.length(); j++)\n        {\n            char\
    \ d = string[j];\n            if(c != d)\n            {\n                if(c\
    \ >= 'a' && c <= 'z')\n                {\n                    if(d >= 'a' && d\
    \ <= 'z')\n                    {\n                        count++;\n         \
    \           }\n                    else\n                    {\n             \
    \           count++;\n                    }\n                }\n             \
    \   else\n                {\n                    if(d >= 'a' && d <= 'z')\n  \
    \                  {\n                        count++;\n                    }\n\
    \                    else\n                    {\n                        count++;\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                if(c >= 'a' && c <= 'z')\n                {\n \
    \                   if(d >= 'a' && d <= 'z')\n                    {\n        \
    \                count++;\n                    }\n                    else\n \
    \                   {\n                        count++;\n                    }\n\
    \                }\n                else\n                {\n                \
    \    if(d >= 'a' && d <= 'z')\n                    {\n                       \
    \ count++;\n                    }\n                    else\n                \
    \    {\n                        count++;\n                    }\n            \
    \    }\n            }\n        }\n    }\n    return count;\n}\n/*\n Given a \n\
    unittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpi6b2w5g5.d(129): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi6b2w5g5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n\tlong count\
    \ = 0;\n\t\n\tfor(int i = 0; i < string.length(); i++)\n\t{\n\t\tchar c = string[i];\n\
    \t\t\n\t\tfor(int j = 0; j < string.length(); j++)\n\t\t{\n\t\t\tchar d = string[j];\n\
    \t\t\t\n\t\t\tif(c != d)\n\t\t\t{\n\t\t\t\tif(c >= 'a' && c <= 'z')\n\t\t\t\t\
    {\n\t\t\t\t\tif(d >= 'a' && d <= 'z')\n\t\t\t\t\t{\n\t\t\t\t\t\tcount += 1;\n\t\
    \t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif(c >= 'A' && c <= 'Z')\n\t\t\t\t{\n\t\
    \t\t\t\tif(d >= 'A' && d <= 'Z')\n\t\t\t\t\t{\n\t\t\t\t\t\tcount += 1;\n\t\t\t\
    \t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn count;\n}\nunittest\n{\n \
    \   alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\"\
    ) == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\"\
    ) == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"\
    Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpj6vv8tp8.d(11): Error: no property `length` for type `string`

    /tmp/tmpj6vv8tp8.d(15): Error: no property `length` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj6vv8tp8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n  \
    \          char d = string[j];\n            if(c != d)\n            {\n      \
    \          count++;\n                break;\n            }\n        }\n    }\n\
    \    return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                count++;\n                break;\n            }\n\
    \        }\n    }\n    return count;\n}\n/*\n Given a string, find out how many\
    \ distinct characters (regardless of case) does it consist of\n            \n\
    */\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n\
    \        for(int j = 0; j < string.length(); j++)\n        {\n            char\
    \ d = string[j];\n            if(c != d)\n            {\n                count++;\n\
    \                break;\n            }\n        }\n    }\n    return count;\n\
    }\n/*\n Given a string, find out how many distinct characters (regardless of case)\
    \ does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                count++;\n                break;\n            }\n\
    \        }\n    }\n    return count;\n}\n/*\n Given a string, find out how many\
    \ distinct characters (regardless of case) does it consist of\n            \n\
    */\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n\
    \        for(int j = 0; j < string.length(); j++)\n        {\n            char\
    \ d = string[j];\n            if(c != d)\n            {\n                count++;\n\
    \                break;\n            }\n        }\n    }\n    return count;\n\
    }\n/*\n Given a string, find out how many distinct characters (regardless of case)\
    \ does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length()\nunittest\n\
    {\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpb7fav1wz.d(121): Error: found `unittest` when expecting `;` following
    `for` condition

    /tmp/tmpb7fav1wz.d(131): Error: found `void` when expecting `)`

    /tmp/tmpb7fav1wz.d(131): Error: found `{` when expecting `;` following statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb7fav1wz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n  \
    \          if(string[i] == string[j])\n            {\n                count++;\n\
    \            }\n        }\n    }\n    return count;\n}\n/*\n Given a string, find\
    \ out how many distinct characters (regardless of case) does it consist of\n \
    \           \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char\
    \ c = string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n\
    \            if(string[i] == string[j])\n            {\n                count++;\n\
    \            }\n        }\n    }\n    return count;\n}\n/*\n Given a string, find\
    \ out how many distinct characters (regardless of case) does it consist of\n \
    \           \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char\
    \ c = string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n\
    \            if(string[i] == string[j])\n            {\n                count++;\n\
    \            }\n        }\n    }\n    return count;\n}\n/*\n Given a string, find\
    \ out how many distinct characters (regardless of case) does it consist of\n \
    \           \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char\
    \ c = string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n\
    \            if(string[i] == string[j])\n            {\n                count++;\n\
    \            }\n        }\n    }\n    return count;\n}\n/*\n Given a string, find\
    \ out how many distinct characters (regardless of case) does it consist of\n \
    \           \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char\
    \ c = string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n\
    \            if(string[i] == string[j])\n            {\n                count++;\n\
    \            }\n        }\n    }\n    return count;\n}\n/*\n Given a string, find\
    \ out how many distinct characters (regardless of case) does it consist of\n \
    \           \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char\
    \ c = string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n\
    \            if(string[i] == string[j])\n            {\n                count++;\n\
    \            }\n        }\n    }\n    return \nunittest\n{\n    alias candidate\
    \ = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"\
    abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"\
    aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjohaqnl_.d(122): Error: expression expected, not `unittest`

    /tmp/tmpjohaqnl_.d(123): Error: found `{` when expecting `;` following `return`
    statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjohaqnl_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n        char\
    \ c = string[i];\n        \n        for(int j = i+1; j < string.length(); j++)\n\
    \        {\n            if(string[i] == string[j])\n            {\n          \
    \      count++;\n            }\n        }\n    }\n    \n    return count;\n}\n\
    unittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpcr1cj2ju.d(11): Error: no property `length` for type `string`

    /tmp/tmpcr1cj2ju.d(15): Error: no property `length` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcr1cj2ju.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n  \
    \          char d = string[j];\n            if(c != d)\n            {\n      \
    \          count++;\n                break;\n            }\n        }\n    }\n\
    \    return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                count++;\n                break;\n            }\n\
    \        }\n    }\n    return count;\n}\n/*\n Given a string, find out how many\
    \ distinct characters (regardless of case) does it consist of\n            \n\
    */\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n\
    \        for(int j = 0; j < string.length(); j++)\n        {\n            char\
    \ d = string[j];\n            if(c != d)\n            {\n                count++;\n\
    \                break;\n            }\n        }\n    }\n    return count;\n\
    }\n/*\n Given a string, find out how many distinct characters (regardless of case)\
    \ does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                count++;\n                break;\n            }\n\
    \        }\n    }\n    return count;\n}\n/*\n Given a string, find out how many\
    \ distinct characters (regardless of case) does it consist of\n            \n\
    */\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n\
    \        for(int j = 0; j < string.length(); j++)\n        {\n            char\
    \ d = string[j];\n            if(c != d)\n            {\n                count++;\n\
    \                break;\n            }\n        }\n    }\n    return count;\n\
    }\n/*\n Given a string, find out how many distinct characters (regardless of case)\
    \ does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length()\nunittest\n\
    {\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpb7fav1wz.d(121): Error: found `unittest` when expecting `;` following
    `for` condition

    /tmp/tmpb7fav1wz.d(131): Error: found `void` when expecting `)`

    /tmp/tmpb7fav1wz.d(131): Error: found `{` when expecting `;` following statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb7fav1wz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = i+1; j < string.length(); j++)\n        {\n\
    \            char d = string[j];\n            if(c != d)\n            {\n    \
    \            count++;\n                break;\n            }\n        }\n    }\n\
    \    return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = i+1; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                count++;\n                break;\n            }\n\
    \        }\n    }\n    return count;\n}\n/*\n Given a string, find out how many\
    \ distinct characters (regardless of case) does it consist of\n            \n\
    */\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n\
    \        for(int j = i+1; j < string.length(); j++)\n        {\n            char\
    \ d = string[j];\n            if(c != d)\n            {\n                count++;\n\
    \                break;\n            }\n        }\n    }\n    return count;\n\
    }\n/*\n Given a string, find out how many distinct characters (regardless of case)\
    \ does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = i+1; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                count++;\n                break;\n            }\n\
    \        }\n    }\n    return count;\n}\n/*\n Given a string, find out how many\
    \ distinct characters (regardless of case) does it consist of\n            \n\
    */\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n\
    \        for(int j = i+1; j < string.length(); j++)\n        {\n            char\
    \ d = string[j];\n            if(c != d)\n            {\n                count++;\n\
    \                break;\n            }\n        }\n    }\n    return count;\n\
    }\n/*\n Given a string, find out how many distinct characters (regardless of case)\
    \ does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ \nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdokr2qqc.d(118): Error: found `unittest` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdokr2qqc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    \n    foreach(char c in string)\n    {\n        count += 1;\n    }\n\
    \    \n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprw3n0h2m.d(11): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprw3n0h2m.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length; i++)\n    {\n        for(int j =\
    \ 0; j < string.length; j++)\n        {\n            if(string[i] == string[j])\n\
    \            {\n                count++;\n            }\n        }\n    }\n  \
    \  return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length; i++)\n\
    \    {\n        for(int j = 0; j < string.length; j++)\n        {\n          \
    \  if(string[i] == string[j])\n            {\n                count++;\n     \
    \       }\n        }\n    }\n    return count;\n}\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length; i++)\n    {\n        for(int j =\
    \ 0; j < string.length; j++)\n        {\n            if(string[i] == string[j])\n\
    \            {\n                count++;\n            }\n        }\n    }\n  \
    \  return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length; i++)\n\
    \    {\n        for(int j = 0; j < string.length; j++)\n        {\n          \
    \  if(string[i] == string[j])\n            {\n                count++;\n     \
    \       }\n        }\n    }\n    return count;\n}\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length; i++)\n    {\n        for(int j =\
    \ 0; j < string.length; j++)\n        {\n            if(string[i] == string[j])\n\
    \            {\n                count++;\n            }\n        }\n    }\n  \
    \  return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length; i++)\n\
    \    {\n        for(int j = 0; j < string.length; j++)\n        {\n          \
    \  if(string[i] == string[j])\n            {\n                count++;\n     \
    \       }\n        }\n    }\n    return count;\n}\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int \nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp20b1at5m.d(125): Error: no identifier for declarator `int`

    /tmp/tmp20b1at5m.d(125): Error: expression expected, not `unittest`

    /tmp/tmp20b1at5m.d(126): Error: found `{` when expecting `;` following `for` condition

    /tmp/tmp20b1at5m.d(127): Error: expression expected, not `alias`

    /tmp/tmp20b1at5m.d(127): Error: found `candidate` when expecting `)`

    /tmp/tmp20b1at5m.d(127): Error: found `=` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp20b1at5m.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = i+1; j < string.length(); j++)\n        {\n\
    \            if(string[i] == string[j])\n            {\n                count++;\n\
    \                break;\n            }\n        }\n    }\n    return count;\n\
    }\n/*\n Given a string, find out how many distinct characters (regardless of case)\
    \ does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = i+1; j < string.length();\
    \ j++)\n        {\n            if(string[i] == string[j])\n            {\n   \
    \             count++;\n                break;\n            }\n        }\n   \
    \ }\n    return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = i+1; j < string.length();\
    \ j++)\n        {\n            if(string[i] == string[j])\n            {\n   \
    \             count++;\n                break;\n            }\n        }\n   \
    \ }\n    return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = i+1; j < string.length();\
    \ j++)\n        {\n            if(string[i] == string[j])\n            {\n   \
    \             count++;\n                break;\n            }\n        }\n   \
    \ }\n    return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = i+1; j < string.length();\
    \ j++)\n        {\n            if(string[i] == string[j])\n            {\n   \
    \             count++;\n                break;\n            }\n        }\n   \
    \ }\n    return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = i+1; \nunittest\n{\n\
    \    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\"\
    ) == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\"\
    ) == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"\
    Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgtk_7n5k.d(119): Error: expression expected, not `unittest`

    /tmp/tmpgtk_7n5k.d(120): Error: found `{` when expecting `;` following `for` condition

    /tmp/tmpgtk_7n5k.d(121): Error: expression expected, not `alias`

    /tmp/tmpgtk_7n5k.d(121): Error: found `candidate` when expecting `)`

    /tmp/tmpgtk_7n5k.d(121): Error: found `=` instead of statement

    /tmp/tmpgtk_7n5k.d(129): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgtk_7n5k.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n  \
    \          char d = string[j];\n            if(c != d)\n            {\n      \
    \          break;\n            }\n        }\n        count++;\n    }\n    return\
    \ count;\n}\n/*\n Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n        }\n        count++;\n\
    \    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n        }\n        count++;\n\
    \    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n        }\n        count++;\n\
    \    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n        }\n        count++;\n\
    \    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        \nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppruzgbaf.d(123): Error: found `unittest` instead of statement

    /tmp/tmppruzgbaf.d(133): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppruzgbaf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string.at(i);\n        if(!std.isLower(c))\n        {\n            count++;\n\
    \        }\n    }\n    return count;\n}\n/*\n Given a string, find out how many\
    \ distinct characters (regardless of case) does it consist of\n            \n\
    */\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        char c = string.at(i);\n\
    \        if(!std.isLower(c))\n        {\n            count++;\n        }\n   \
    \ }\n    return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string.at(i);\n        if(!std.isLower(c))\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}\n/*\n Given a string,\
    \ find out how many distinct characters (regardless of case) does it consist of\n\
    \            \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char\
    \ c = string.at(i);\n        if(!std.isLower(c))\n        {\n            count++;\n\
    \        }\n    }\n    return count;\n}\n/*\n Given a string, find out how many\
    \ distinct characters (regardless of case) does it consist of\n            \n\
    */\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        char c = string.at(i);\n\
    \        if(!std.isLower(c))\n        {\n            count++;\n        }\n   \
    \ }\n    return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string.at(i);\n        if(!std.isLower(c))\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}\n/*\n Given a string,\
    \ find out how many distinct characters (regardless of case) does it consist of\n\
    \            \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    for(int \nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_d216jtv.d(113): Error: no identifier for declarator `int`

    /tmp/tmp_d216jtv.d(113): Error: expression expected, not `unittest`

    /tmp/tmp_d216jtv.d(114): Error: found `{` when expecting `;` following `for` condition

    /tmp/tmp_d216jtv.d(115): Error: expression expected, not `alias`

    /tmp/tmp_d216jtv.d(115): Error: found `candidate` when expecting `)`

    /tmp/tmp_d216jtv.d(115): Error: found `=` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_d216jtv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    foreach(char c in string)\n    {\n        count += 1;\n    }\n   \
    \ return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpydfodo6m.d(10): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpydfodo6m.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n\tlong count\
    \ = 0;\n\tfor (int i = 0; i < string.length(); i++)\n\t{\n\t\tchar c = string[i];\n\
    \t\tfor (int j = 0; j < string.length(); j++)\n\t\t{\n\t\t\tif (i == j)\n\t\t\t\
    \tcontinue;\n\t\t\tif (c != string[j])\n\t\t\t\tbreak;\n\t\t}\n\t\tcount++;\n\t\
    }\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjjochi1q.d(10): Error: no property `length` for type `string`

    /tmp/tmpjjochi1q.d(13): Error: no property `length` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjjochi1q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string.at(i);\n        \n        if(!std.isAlpha(c))\n        {\n          \
    \  count += 1;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n\
    \    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\"\
    ) == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"\
    Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3sb2mjk1.d(10): Error: no property `length` for type `string`

    /tmp/tmp3sb2mjk1.d(12): Error: no property `at` for type `string`

    /tmp/tmp3sb2mjk1.d(14): Error: undefined identifier `isAlpha` in package `std`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3sb2mjk1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n  \
    \          if(c == string[j])\n            {\n                count++;\n     \
    \       }\n        }\n    }\n    return count;\n}\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n  \
    \          if(c == string[j])\n            {\n                count++;\n     \
    \       }\n        }\n    }\n    return count;\n}\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n  \
    \          if(c == string[j])\n            {\n                count++;\n     \
    \       }\n        }\n    }\n    return count;\n}\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n  \
    \          if(c == string[j])\n            {\n                count++;\n     \
    \       }\n        }\n    }\n    return count;\n}\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n  \
    \          if(c == string[j])\n            {\n                count++;\n     \
    \       }\n        }\n    }\n    return count;\n}\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n  \
    \          if(c == string[j])\n            {\n                count++;\n     \
    \       }\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n \
    \   assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpf7hpimx6.d(119): Error: found `unittest` instead of statement

    /tmp/tmpf7hpimx6.d(129): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmpf7hpimx6.d(129): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf7hpimx6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n  \
    \          char d = string[j];\n            if(c != d)\n            {\n      \
    \          break;\n            }\n        }\n        count++;\n    }\n    return\
    \ count;\n}\n/*\n Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n        }\n        count++;\n\
    \    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n        }\n        count++;\n\
    \    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n        }\n        count++;\n\
    \    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n        }\n        count++;\n\
    \    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        \nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppruzgbaf.d(123): Error: found `unittest` instead of statement

    /tmp/tmppruzgbaf.d(133): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppruzgbaf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n  \
    \          char d = string[j];\n            if(c != d)\n            {\n      \
    \          break;\n            }\n        }\n        count++;\n    }\n    return\
    \ count;\n}\n/*\n Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n        }\n        count++;\n\
    \    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n        }\n        count++;\n\
    \    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n        }\n        count++;\n\
    \    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n        }\n        count++;\n\
    \    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        \nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppruzgbaf.d(123): Error: found `unittest` instead of statement

    /tmp/tmppruzgbaf.d(133): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppruzgbaf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n  \
    \          if(c == string[j])\n            {\n                count++;\n     \
    \       }\n        }\n    }\n    return count;\n}\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n  \
    \          if(c == string[j])\n            {\n                count++;\n     \
    \       }\n        }\n    }\n    return count;\n}\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n  \
    \          if(c == string[j])\n            {\n                count++;\n     \
    \       }\n        }\n    }\n    return count;\n}\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n  \
    \          if(c == string[j])\n            {\n                count++;\n     \
    \       }\n        }\n    }\n    return count;\n}\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n  \
    \          if(c == string[j])\n            {\n                count++;\n     \
    \       }\n        }\n    }\n    return count;\n}\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n  \
    \          if(c == string[j])\n            {\n                count++;\n     \
    \       }\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n \
    \   assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpf7hpimx6.d(119): Error: found `unittest` instead of statement

    /tmp/tmpf7hpimx6.d(129): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmpf7hpimx6.d(129): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf7hpimx6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n  \
    \          if(c == string[j])\n            {\n                count++;\n     \
    \       }\n        }\n    }\n    return count;\n}\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n  \
    \          if(c == string[j])\n            {\n                count++;\n     \
    \       }\n        }\n    }\n    return count;\n}\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n  \
    \          if(c == string[j])\n            {\n                count++;\n     \
    \       }\n        }\n    }\n    return count;\n}\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n  \
    \          if(c == string[j])\n            {\n                count++;\n     \
    \       }\n        }\n    }\n    return count;\n}\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n  \
    \          if(c == string[j])\n            {\n                count++;\n     \
    \       }\n        }\n    }\n    return count;\n}\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n  \
    \          if(c == string[j])\n            {\n                count++;\n     \
    \       }\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n \
    \   assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpf7hpimx6.d(119): Error: found `unittest` instead of statement

    /tmp/tmpf7hpimx6.d(129): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmpf7hpimx6.d(129): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf7hpimx6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n\tlong count\
    \ = 0;\n\tfor (int i = 0; i < string.length; i++) \n\t{\n\t\tfor (int j = i; j\
    \ < string.length; j++) \n\t\t{\n\t\t\tif (string[i] == string[j]) \n\t\t\t{\n\
    \t\t\t\tcount++;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n\
    {\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpnqzce1we.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e25]

    ??:? void tmpnqzce1we.__unittest_L23_C1() [0x427b38]

    ??:? void tmpnqzce1we.__modtest() [0x427ba4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbbf]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa52]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbe5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x430094]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb71]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa29]

    ??:? runModuleUnitTests [0x42b995]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282e8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string.at(i);\n        \n        for(int j = i+1; j < string.length(); j++)\n\
    \        {\n            if(string.at(j) == c)\n            {\n               \
    \ count++;\n                break;\n            }\n        }\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n\
    \    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpb7qx6f_s.d(10): Error: no property `length` for type `string`

    /tmp/tmpb7qx6f_s.d(12): Error: no property `at` for type `string`

    /tmp/tmpb7qx6f_s.d(14): Error: no property `length` for type `string`

    /tmp/tmpb7qx6f_s.d(16): Error: no property `at` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb7qx6f_s.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        if(!std.isAlpha(c))\n        {\n            count++;\n \
    \       }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu7028l9o.d(10): Error: no property `length` for type `string`

    /tmp/tmpu7028l9o.d(13): Error: undefined identifier `isAlpha` in package `std`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu7028l9o.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n  \
    \          char d = string[j];\n            if(c != d)\n            {\n      \
    \          count++;\n                break;\n            }\n        }\n    }\n\
    \    return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                count++;\n                break;\n            }\n\
    \        }\n    }\n    return count;\n}\n/*\n Given a string, find out how many\
    \ distinct characters (regardless of case) does it consist of\n            \n\
    */\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n\
    \        for(int j = 0; j < string.length(); j++)\n        {\n            char\
    \ d = string[j];\n            if(c != d)\n            {\n                count++;\n\
    \                break;\n            }\n        }\n    }\n    return count;\n\
    }\n/*\n Given a string, find out how many distinct characters (regardless of case)\
    \ does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                count++;\n                break;\n            }\n\
    \        }\n    }\n    return count;\n}\n/*\n Given a string, find out how many\
    \ distinct characters (regardless of case) does it consist of\n            \n\
    */\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n\
    \        for(int j = 0; j < string.length(); j++)\n        {\n            char\
    \ d = string[j];\n            if(c != d)\n            {\n                count++;\n\
    \                break;\n            }\n        }\n    }\n    return count;\n\
    }\n/*\n Given a string, find out how many distinct characters (regardless of case)\
    \ does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length()\nunittest\n\
    {\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpb7fav1wz.d(121): Error: found `unittest` when expecting `;` following
    `for` condition

    /tmp/tmpb7fav1wz.d(131): Error: found `void` when expecting `)`

    /tmp/tmpb7fav1wz.d(131): Error: found `{` when expecting `;` following statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb7fav1wz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n\tlong count\
    \ = 0;\n\t\n\tfor (int i = 0; i < string.length(); i++)\n\t{\n\t\tchar c = string[i];\n\
    \t\t\n\t\tfor (int j = 0; j < string.length(); j++)\n\t\t{\n\t\t\tif (i == j)\n\
    \t\t\t\tcontinue;\n\t\t\t\n\t\t\tchar d = string[j];\n\t\t\t\n\t\t\tif (c != d)\n\
    \t\t\t\tbreak;\n\t\t\t\n\t\t\tcount++;\n\t\t}\n\t}\n\t\n\treturn count;\n}\nunittest\n\
    {\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4q8lwjr7.d(11): Error: no property `length` for type `string`

    /tmp/tmp4q8lwjr7.d(15): Error: no property `length` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4q8lwjr7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    foreach(char c in string) \n    {\n        if(!std.algorithm.contains(string.chars,\
    \ c)) \n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\n</code>\n<|/ a tags=string,c++,algorithm |>\n<| a dscore=0 |>\n<code>\n#include\
    \ <iostream>\n#include <string>\nusing namespace std;\nunittest\n{\n    alias\
    \ candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n\
    \    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\"\
    ) == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"\
    Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9uv2e9ro.d(10): Error: found `in` when expecting `;`

    /tmp/tmp9uv2e9ro.d(19): Error: declaration expected, not `<`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9uv2e9ro.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n  \
    \          char d = string[j];\n            if(c != d)\n            {\n      \
    \          break;\n            }\n        }\n        count++;\n    }\n    return\
    \ count;\n}\n/*\n Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n        }\n        count++;\n\
    \    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n        }\n        count++;\n\
    \    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n        }\n        count++;\n\
    \    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n        }\n        count++;\n\
    \    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        \nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppruzgbaf.d(123): Error: found `unittest` instead of statement

    /tmp/tmppruzgbaf.d(133): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppruzgbaf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length; i++)\n    {\n        char c = string[i];\n\
    \        if(!std.isLower(c))\n            count++;\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpl94kcozx.d(13): Error: undefined identifier `isLower` in package
    `std`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl94kcozx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n  \
    \          char d = string[j];\n            if(c != d)\n            {\n      \
    \          break;\n            }\n            else\n            {\n          \
    \      count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3urgz1ry.d(10): Error: no property `length` for type `string`

    /tmp/tmp3urgz1ry.d(13): Error: no property `length` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3urgz1ry.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n\tlong count\
    \ = 0;\n\tfor (int i = 0; i < string.length(); i++)\n\t{\n\t\tchar c = string[i];\n\
    \t\tfor (int j = 0; j < string.length(); j++)\n\t\t{\n\t\t\tif (i != j)\n\t\t\t\
    {\n\t\t\t\tif (string[i] == string[j])\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t\
    \tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n  \
    \  alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\")\
    \ == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\"\
    ) == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"\
    Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptexvlcnt.d(10): Error: no property `length` for type `string`

    /tmp/tmptexvlcnt.d(13): Error: no property `length` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptexvlcnt.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string.at(i);\n        for(int j = 0; j < string.length(); j++)\n        {\n\
    \            char d = string.at(j);\n            if(c != d)\n            {\n \
    \               break;\n            }\n        }\n        count++;\n    }\n  \
    \  return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptxpr2fu1.d(10): Error: no property `length` for type `string`

    /tmp/tmptxpr2fu1.d(12): Error: no property `at` for type `string`

    /tmp/tmptxpr2fu1.d(13): Error: no property `length` for type `string`

    /tmp/tmptxpr2fu1.d(15): Error: no property `at` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptxpr2fu1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length; i++)\n    {\n        char c = string[i];\n\
    \        for(int j = i + 1; j < string.length; j++)\n        {\n            char\
    \ d = string[j];\n            if(c != d)\n            {\n                break;\n\
    \            }\n            else\n            {\n                count++;\n  \
    \          }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"\
    abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"\
    aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpkb_s_t72.d(33): unittest failure

    ----------------

    ??:? _d_unittestp [0x427e35]

    ??:? void tmpkb_s_t72.__unittest_L28_C1() [0x427b1d]

    ??:? void tmpkb_s_t72.__modtest() [0x427bb4]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42bbcf]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42aa62]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fbf5]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x4300a4]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fb81]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa39]

    ??:? runModuleUnitTests [0x42b9a5]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4282f8]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = i; j < string.length(); j++)\n        {\n  \
    \          char d = string[j];\n            if(c != d)\n            {\n      \
    \          break;\n            }\n        }\n        count++;\n    }\n    return\
    \ count;\n}\n/*\n Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = i; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n        }\n        count++;\n\
    \    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = i; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n        }\n        count++;\n\
    \    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = i; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n        }\n        count++;\n\
    \    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = i; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n        }\n        count++;\n\
    \    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnemyssim.d(120): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnemyssim.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n  \
    \          char d = string[j];\n            if(c != d)\n            {\n      \
    \          if(c >= 'a' && c <= 'z')\n                {\n                    if(d\
    \ >= 'a' && d <= 'z')\n                    {\n                        if(c !=\
    \ d)\n                        {\n                            count++;\n      \
    \                  }\n                    }\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n/*\n Given a string, find out how many\
    \ distinct characters (regardless of case) does it consist of\n            \n\
    */\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n\
    \        for(int j = 0; j < string.length(); j++)\n        {\n            char\
    \ d = string[j];\n            if(c != d)\n            {\n                if(c\
    \ >= 'a' && c <= 'z')\n                {\n                    if(d >= 'a' && d\
    \ <= 'z')\n                    {\n                        if(c != d)\n       \
    \                 {\n                            count++;\n                  \
    \      }\n                    }\n                }\n            }\n        }\n\
    \    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                if(c >= 'a' && c <= 'z')\n                {\n \
    \                   if(d >= 'a' && d <= 'z')\n                    {\n        \
    \                if(c != d)\n                        {\n                     \
    \       count++;\n                        }\n                    }\n         \
    \       }\n            }\n        }\n    }\n    return count;\n}\n/*\n Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n            \n*/\nlong count_distinct_characters(string string) \n{\n  \
    \  long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n    \
    \    char c = string[i];\n        for(int j = 0; j < string.length(); j++)\n \
    \       {\n            char d = string[j];\n            if(c != d)\n         \
    \   {\n                if(c >= 'a' && c <= 'z')\n                {\n         \
    \           if(d >= 'a' && d <= 'z')\n                    {\n                \
    \        if(c != d)\n                        {\n                            \n\
    unittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdwn_367i.d(115): Error: found `unittest` instead of statement

    /tmp/tmpdwn_367i.d(125): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmpdwn_367i.d(125): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmpdwn_367i.d(125): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmpdwn_367i.d(125): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmpdwn_367i.d(125): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmpdwn_367i.d(125): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdwn_367i.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        if(!std.isAlpha(c))\n        {\n            count++;\n \
    \       }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu7028l9o.d(10): Error: no property `length` for type `string`

    /tmp/tmpu7028l9o.d(13): Error: undefined identifier `isAlpha` in package `std`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu7028l9o.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        if(!std.isAlpha(c))\n        {\n            count++;\n \
    \       }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu7028l9o.d(10): Error: no property `length` for type `string`

    /tmp/tmpu7028l9o.d(13): Error: undefined identifier `isAlpha` in package `std`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu7028l9o.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n  \
    \          char d = string[j];\n            if(c != d)\n            {\n      \
    \          break;\n            }\n        }\n        count++;\n    }\n    return\
    \ count;\n}\n/*\n Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n        }\n        count++;\n\
    \    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n        }\n        count++;\n\
    \    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n        }\n        count++;\n\
    \    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n        }\n        count++;\n\
    \    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        \nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppruzgbaf.d(123): Error: found `unittest` instead of statement

    /tmp/tmppruzgbaf.d(133): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppruzgbaf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    foreach(char c in string)\n    {\n        count += 1;\n    }\n   \
    \ return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpydfodo6m.d(10): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpydfodo6m.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string.at(i);\n        if(!std.ctype.isLower(c))\n            count += 1;\n\
    \    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string.at(i);\n        if(!std.ctype.isLower(c))\n  \
    \          count += 1;\n    }\n    return count;\n}\n/*\n Given a string, find\
    \ out how many distinct characters (regardless of case) does it consist of\n \
    \           \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char\
    \ c = string.at(i);\n        if(!std.ctype.isLower(c))\n            count += 1;\n\
    \    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string.at(i);\n        if(!std.ctype.isLower(c))\n  \
    \          count += 1;\n    }\n    return count;\n}\n/*\n Given a string, find\
    \ out how many distinct characters (regardless of case) does it consist of\n \
    \           \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char\
    \ c = string.at(i);\n        if(!std.ctype.isLower(c))\n            count += 1;\n\
    \    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string.at(i);\n        if(!std.ctype.isLower(c))\n  \
    \          count += 1;\n    }\n    return count;\n}\n/*\n Given a string, find\
    \ out how many distinct characters (regardless of case) does it consist of\n \
    \           \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char\
    \ c = string.\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkpuqw0o0.d(103): Error: identifier expected following `.`, not
    `unittest`

    /tmp/tmpkpuqw0o0.d(104): Error: semicolon expected, not `{`

    /tmp/tmpkpuqw0o0.d(113): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmpkpuqw0o0.d(113): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkpuqw0o0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        if(!std.typecons.isUpper(c))\n        {\n            count++;\n\
    \        }\n    }\n    return count;\n}\n/*\n Given a string, find out how many\
    \ distinct characters (regardless of case) does it consist of\n            \n\
    */\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n\
    \        if(!std.typecons.isUpper(c))\n        {\n            count++;\n     \
    \   }\n    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        if(!std.typecons.isUpper(c))\n  \
    \      {\n            count++;\n        }\n    }\n    return count;\n}\n/*\n Given\
    \ a string, find out how many distinct characters (regardless of case) does it\
    \ consist of\n            \n*/\nlong count_distinct_characters(string string)\
    \ \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n   \
    \ {\n        char c = string[i];\n        if(!std.typecons.isUpper(c))\n     \
    \   {\n            count++;\n        }\n    }\n    return count;\n}\n/*\n Given\
    \ a string, find out how many distinct characters (regardless of case) does it\
    \ consist of\n            \n*/\nlong count_distinct_characters(string string)\
    \ \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n   \
    \ {\n        char c = string[i];\n        if(!std.typecons.isUpper(c))\n     \
    \   {\n            count++;\n        }\n    }\n    return count;\n}\n/*\n Given\
    \ a string, find out how many distinct characters (regardless of case) does it\
    \ consist of\n            \n*/\nlong count_distinct_characters(string string)\
    \ \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n   \
    \ {\n        char c = string[i];\n        if(!std.typecons.isUpper(c))\n     \
    \   {\n            count++;\n        }\n    }\n    return count;\n}\n/*\n Given\
    \ a string, find out how many distinct characters (regardless of case) does it\
    \ consist of\n            \n*/\nlong count_distinct_characters(string string)\
    \ \n{\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n   \
    \ assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n  \
    \  assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu08q3yo_.d(112): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu08q3yo_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        if(!std.typecons.isUpper(c))\n        {\n            count++;\n\
    \        }\n    }\n    return count;\n}\n/*\n Given a string, find out how many\
    \ distinct characters (regardless of case) does it consist of\n            \n\
    */\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n\
    \        if(!std.typecons.isUpper(c))\n        {\n            count++;\n     \
    \   }\n    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        if(!std.typecons.isUpper(c))\n  \
    \      {\n            count++;\n        }\n    }\n    return count;\n}\n/*\n Given\
    \ a string, find out how many distinct characters (regardless of case) does it\
    \ consist of\n            \n*/\nlong count_distinct_characters(string string)\
    \ \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n   \
    \ {\n        char c = string[i];\n        if(!std.typecons.isUpper(c))\n     \
    \   {\n            count++;\n        }\n    }\n    return count;\n}\n/*\n Given\
    \ a string, find out how many distinct characters (regardless of case) does it\
    \ consist of\n            \n*/\nlong count_distinct_characters(string string)\
    \ \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n   \
    \ {\n        char c = string[i];\n        if(!std.typecons.isUpper(c))\n     \
    \   {\n            count++;\n        }\n    }\n    return count;\n}\n/*\n Given\
    \ a string, find out how many distinct characters (regardless of case) does it\
    \ consist of\n            \n*/\nlong count_distinct_characters(string string)\
    \ \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n   \
    \ {\n        char c = string[i];\n        if(!std.typecons.isUpper(c))\n     \
    \   {\n            count++;\n        }\n    }\n    return count;\n}\n/*\n Given\
    \ a string, find out how many distinct characters (regardless of case) does it\
    \ consist of\n            \n*/\nlong count_distinct_characters(string string)\
    \ \n{\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n   \
    \ assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n  \
    \  assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu08q3yo_.d(112): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu08q3yo_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n  \
    \          char d = string[j];\n            if(c != d)\n            {\n      \
    \          break;\n            }\n        }\n        count++;\n    }\n    return\
    \ count;\n}\n/*\n Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n        }\n        count++;\n\
    \    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n        }\n        count++;\n\
    \    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n        }\n        count++;\n\
    \    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n        }\n        count++;\n\
    \    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        \nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppruzgbaf.d(123): Error: found `unittest` instead of statement

    /tmp/tmppruzgbaf.d(133): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppruzgbaf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        if(!std.typecons.isUpper(c))\n        {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjw2m5u4g.d(10): Error: no property `length` for type `string`

    /tmp/tmpjw2m5u4g.d(13): Error: undefined identifier `isUpper` in module `std.typecons`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjw2m5u4g.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n  \
    \          char d = string[j];\n            if(c != d)\n            {\n      \
    \          break;\n            }\n        }\n        count++;\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n\
    \    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmxt3pnzo.d(10): Error: no property `length` for type `string`

    /tmp/tmpmxt3pnzo.d(13): Error: no property `length` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmxt3pnzo.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = i+1; j < string.length(); j++)\n        {\n\
    \            if(string[j] == c)\n            {\n                count++;\n   \
    \             break;\n            }\n        }\n    }\n    return count;\n}\n\
    unittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpd4ycj0ru.d(10): Error: no property `length` for type `string`

    /tmp/tmpd4ycj0ru.d(13): Error: no property `length` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd4ycj0ru.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        if(!std.typecons.isUpper(c))\n        {\n            count++;\n\
    \        }\n    }\n    return count;\n}\n/*\n Given a string, find out how many\
    \ distinct characters (regardless of case) does it consist of\n            \n\
    */\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n\
    \        if(!std.typecons.isUpper(c))\n        {\n            count++;\n     \
    \   }\n    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        if(!std.typecons.isUpper(c))\n  \
    \      {\n            count++;\n        }\n    }\n    return count;\n}\n/*\n Given\
    \ a string, find out how many distinct characters (regardless of case) does it\
    \ consist of\n            \n*/\nlong count_distinct_characters(string string)\
    \ \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n   \
    \ {\n        char c = string[i];\n        if(!std.typecons.isUpper(c))\n     \
    \   {\n            count++;\n        }\n    }\n    return count;\n}\n/*\n Given\
    \ a string, find out how many distinct characters (regardless of case) does it\
    \ consist of\n            \n*/\nlong count_distinct_characters(string string)\
    \ \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n   \
    \ {\n        char c = string[i];\n        if(!std.typecons.isUpper(c))\n     \
    \   {\n            count++;\n        }\n    }\n    return count;\n}\n/*\n Given\
    \ a string, find out how many distinct characters (regardless of case) does it\
    \ consist of\n            \n*/\nlong count_distinct_characters(string string)\
    \ \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n   \
    \ {\n        char c = string[i];\n        if(!std.typecons.isUpper(c))\n     \
    \   {\n            count++;\n        }\n    }\n    return count;\n}\n/*\n Given\
    \ a string, find out how many distinct characters (regardless of case) does it\
    \ consist of\n            \n*/\nlong count_distinct_characters(string string)\
    \ \n{\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n   \
    \ assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n  \
    \  assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu08q3yo_.d(112): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu08q3yo_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n  \
    \          if(c == string[j])\n            {\n                count++;\n     \
    \           break;\n            }\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpj4_w39np.d(10): Error: no property `length` for type `string`

    /tmp/tmpj4_w39np.d(13): Error: no property `length` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj4_w39np.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    foreach(char c in string) \n    {\n        count += 1;\n    }\n  \
    \  return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    foreach(char c in string) \n    {\n  \
    \      count += 1;\n    }\n    return count;\n}\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    foreach(char c in string) \n    {\n        count += 1;\n    }\n  \
    \  return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    foreach(char c in string) \n    {\n  \
    \      count += 1;\n    }\n    return count;\n}\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    foreach(char c in string) \n    {\n        count += 1;\n    }\n  \
    \  return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    foreach(char c in string) \n    {\n  \
    \      count += 1;\n    }\n    return count;\n}\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    foreach(char c in string) \n    {\n        count += 1;\n    }\n  \
    \  return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    foreach(char c in string) \n    {\n  \
    \      count += 1;\n    }\n    return count;\n}\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n\nunittest\n{\n\
    \    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\"\
    ) == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\"\
    ) == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"\
    Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpt2412ty_.d(10): Error: found `in` when expecting `;`

    /tmp/tmpt2412ty_.d(23): Error: found `in` when expecting `;`

    /tmp/tmpt2412ty_.d(36): Error: found `in` when expecting `;`

    /tmp/tmpt2412ty_.d(49): Error: found `in` when expecting `;`

    /tmp/tmpt2412ty_.d(62): Error: found `in` when expecting `;`

    /tmp/tmpt2412ty_.d(75): Error: found `in` when expecting `;`

    /tmp/tmpt2412ty_.d(88): Error: found `in` when expecting `;`

    /tmp/tmpt2412ty_.d(101): Error: found `in` when expecting `;`

    /tmp/tmpt2412ty_.d(113): Error: semicolon expected following function declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt2412ty_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n  \
    \          char d = string[j];\n            if(c != d)\n            {\n      \
    \          count++;\n                break;\n            }\n        }\n    }\n\
    \    return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                count++;\n                break;\n            }\n\
    \        }\n    }\n    return count;\n}\n/*\n Given a string, find out how many\
    \ distinct characters (regardless of case) does it consist of\n            \n\
    */\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n\
    \        for(int j = 0; j < string.length(); j++)\n        {\n            char\
    \ d = string[j];\n            if(c != d)\n            {\n                count++;\n\
    \                break;\n            }\n        }\n    }\n    return count;\n\
    }\n/*\n Given a string, find out how many distinct characters (regardless of case)\
    \ does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                count++;\n                break;\n            }\n\
    \        }\n    }\n    return count;\n}\n/*\n Given a string, find out how many\
    \ distinct characters (regardless of case) does it consist of\n            \n\
    */\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n\
    \        for(int j = 0; j < string.length(); j++)\n        {\n            char\
    \ d = string[j];\n            if(c != d)\n            {\n                count++;\n\
    \                break;\n            }\n        }\n    }\n    return count;\n\
    }\n/*\n Given a string, find out how many distinct characters (regardless of case)\
    \ does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length()\nunittest\n\
    {\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpb7fav1wz.d(121): Error: found `unittest` when expecting `;` following
    `for` condition

    /tmp/tmpb7fav1wz.d(131): Error: found `void` when expecting `)`

    /tmp/tmpb7fav1wz.d(131): Error: found `{` when expecting `;` following statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb7fav1wz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        if(!std.isAlpha(c))\n        {\n            count++;\n \
    \       }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu7028l9o.d(10): Error: no property `length` for type `string`

    /tmp/tmpu7028l9o.d(13): Error: undefined identifier `isAlpha` in package `std`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu7028l9o.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        if(!std.isAlpha(c))\n        {\n            count++;\n \
    \       }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu7028l9o.d(10): Error: no property `length` for type `string`

    /tmp/tmpu7028l9o.d(13): Error: undefined identifier `isAlpha` in package `std`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu7028l9o.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n  \
    \          char d = string[j];\n            if(c != d)\n            {\n      \
    \          break;\n            }\n            else\n            {\n          \
    \      count++;\n            }\n        }\n    }\n    return count;\n}\n/*\n Given\
    \ a string, find out how many distinct characters (regardless of case) does it\
    \ consist of\n            \n*/\nlong count_distinct_characters(string string)\
    \ \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n   \
    \ {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n            else\n     \
    \       {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}\n/*\n Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n            else\n     \
    \       {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}\n/*\n Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n            else\n     \
    \       {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}\n/*\n Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n            else\n     \
    \       {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}\n/*\n Given a string, find out how many distinct characters (regardles\n\
    unittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0nmwvt12.d(128): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0nmwvt12.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = i+1; j < string.length(); j++)\n        {\n\
    \            char d = string[j];\n            if(c == d)\n            {\n    \
    \            count++;\n            }\n        }\n    }\n    return count;\n}\n\
    /*\n Given a string, find out how many distinct characters (regardless of case)\
    \ does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = i+1; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c == d)\n \
    \           {\n                count++;\n            }\n        }\n    }\n   \
    \ return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = i+1; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c == d)\n \
    \           {\n                count++;\n            }\n        }\n    }\n   \
    \ return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = i+1; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c == d)\n \
    \           {\n                count++;\n            }\n        }\n    }\n   \
    \ return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = i+1; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c == d)\n \
    \           {\n                count++;\n            }\n        }\n    }\n   \
    \ return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp19drxgnz.d(115): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp19drxgnz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n\tlong count\
    \ = 0;\n\tfor (int i = 0; i < string.length(); i++)\n\t{\n\t\tchar c = string[i];\n\
    \t\tif (isupper(c))\n\t\t\tcount++;\n\t\telse if (islower(c))\n\t\t\tcount++;\n\
    \t\telse\n\t\t\tcount++;\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate\
    \ = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"\
    abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"\
    aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7reiiqlt.d(10): Error: no property `length` for type `string`

    /tmp/tmp7reiiqlt.d(13): Error: undefined identifier `isupper`

    /tmp/tmp7reiiqlt.d(15): Error: undefined identifier `islower`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7reiiqlt.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        if(!std.typecons.isUpper(c))\n            count++;\n   \
    \ }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpngaw_dng.d(10): Error: no property `length` for type `string`

    /tmp/tmpngaw_dng.d(13): Error: undefined identifier `isUpper` in module `std.typecons`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpngaw_dng.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n  \
    \          char d = string[j];\n            if(c != d)\n            {\n      \
    \          break;\n            }\n        }\n        count++;\n    }\n    return\
    \ count;\n}\n/*\n Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n        }\n        count++;\n\
    \    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n        }\n        count++;\n\
    \    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n        }\n        count++;\n\
    \    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n        }\n        count++;\n\
    \    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        \nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppruzgbaf.d(123): Error: found `unittest` instead of statement

    /tmp/tmppruzgbaf.d(133): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppruzgbaf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n  \
    \          char d = string[j];\n            if(c != d)\n            {\n      \
    \          count++;\n                break;\n            }\n        }\n    }\n\
    \    return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                count++;\n                break;\n            }\n\
    \        }\n    }\n    return count;\n}\n/*\n Given a string, find out how many\
    \ distinct characters (regardless of case) does it consist of\n            \n\
    */\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n\
    \        for(int j = 0; j < string.length(); j++)\n        {\n            char\
    \ d = string[j];\n            if(c != d)\n            {\n                count++;\n\
    \                break;\n            }\n        }\n    }\n    return count;\n\
    }\n/*\n Given a string, find out how many distinct characters (regardless of case)\
    \ does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                count++;\n                break;\n            }\n\
    \        }\n    }\n    return count;\n}\n/*\n Given a string, find out how many\
    \ distinct characters (regardless of case) does it consist of\n            \n\
    */\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n\
    \        for(int j = 0; j < string.length(); j++)\n        {\n            char\
    \ d = string[j];\n            if(c != d)\n            {\n                count++;\n\
    \                break;\n            }\n        }\n    }\n    return count;\n\
    }\n/*\n Given a string, find out how many distinct characters (regardless of case)\
    \ does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length()\nunittest\n\
    {\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpb7fav1wz.d(121): Error: found `unittest` when expecting `;` following
    `for` condition

    /tmp/tmpb7fav1wz.d(131): Error: found `void` when expecting `)`

    /tmp/tmpb7fav1wz.d(131): Error: found `{` when expecting `;` following statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb7fav1wz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n\tlong count\
    \ = 0;\n\tfor (int i = 0; i < string.length(); i++)\n\t{\n\t\tchar c = string[i];\n\
    \t\tif (std.ctype.isUpper(c))\n\t\t\tcount++;\n\t\telse\n\t\t\tcount += 2;\n\t\
    }\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpw1gltknp.d(10): Error: no property `length` for type `string`

    /tmp/tmpw1gltknp.d(13): Error: undefined identifier `ctype` in package `std`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw1gltknp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        for(int j\
    \ = i+1; j < string.length(); j++)\n        {\n            if(string[i] == string[j])\n\
    \            {\n                count++;\n            }\n        }\n    }\n  \
    \  return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        for(int j = i+1; j < string.length(); j++)\n        {\n      \
    \      if(string[i] == string[j])\n            {\n                count++;\n \
    \           }\n        }\n    }\n    return count;\n}\n/*\n Given a string, find\
    \ out how many distinct characters (regardless of case) does it consist of\n \
    \           \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        for(int\
    \ j = i+1; j < string.length(); j++)\n        {\n            if(string[i] == string[j])\n\
    \            {\n                count++;\n            }\n        }\n    }\n  \
    \  return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        for(int j = i+1; j < string.length(); j++)\n        {\n      \
    \      if(string[i] == string[j])\n            {\n                count++;\n \
    \           }\n        }\n    }\n    return count;\n}\n/*\n Given a string, find\
    \ out how many distinct characters (regardless of case) does it consist of\n \
    \           \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        for(int\
    \ j = i+1; j < string.length(); j++)\n        {\n            if(string[i] == string[j])\n\
    \            {\n                count++;\n            }\n        }\n    }\n  \
    \  return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        for(int j = i+1; j < string.length(); j++)\n        {\n      \
    \      if(string[i] == string[j])\n            {\n                count++;\n \
    \           }\n        }\n    }\n    return count;\n}\n/*\n Given a string, find\
    \ out how many distinct characters (regardless of \nunittest\n{\n    alias candidate\
    \ = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"\
    abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"\
    aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpglc4ogsj.d(117): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpglc4ogsj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        if(!std.isLower(c) && !std.isUpper(c))\n        {\n    \
    \        count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n\
    \    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\"\
    ) == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"\
    Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpibpkt1g4.d(10): Error: no property `length` for type `string`

    /tmp/tmpibpkt1g4.d(13): Error: undefined identifier `isLower` in package `std`

    /tmp/tmpibpkt1g4.d(13): Error: undefined identifier `isUpper` in package `std`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpibpkt1g4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    foreach(char c in string)\n    {\n        if(!std.isAlpha(c))\n  \
    \      {\n            count += 1;\n        }\n    }\n    return count;\n}\n/*\n\
    \ Given a string, find out how many distinct characters (regardless of case) does\
    \ it consist of\n            \n*/\nlong count_distinct_characters(string string)\
    \ \n{\n    long count = 0;\n    foreach(char c in string)\n    {\n        if(!std.isAlpha(c))\n\
    \        {\n            count += 1;\n        }\n    }\n    return count;\n}\n\
    /*\n Given a string, find out how many distinct characters (regardless of case)\
    \ does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    foreach(char c in string)\n    {\n   \
    \     if(!std.isAlpha(c))\n        {\n            count += 1;\n        }\n   \
    \ }\n    return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    foreach(char c in string)\n    {\n   \
    \     if(!std.isAlpha(c))\n        {\n            count += 1;\n        }\n   \
    \ }\n    return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    foreach(char c in string)\n    {\n   \
    \     if(!std.isAlpha(c))\n        {\n            count += 1;\n        }\n   \
    \ }\n    return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    foreach(char c in string)\n    {\n   \
    \     if(!std.isAlpha(c))\n        {\n            count += 1;\n        }\n   \
    \ }\n    return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    foreach(char c in string)\n    {\n   \
    \     if(!std.isAlpha(c))\n        {\n            count += 1;\n        }\n   \
    \ }\n    return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) \nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpyrcu_9_a.d(10): Error: found `in` when expecting `;`

    /tmp/tmpyrcu_9_a.d(26): Error: found `in` when expecting `;`

    /tmp/tmpyrcu_9_a.d(42): Error: found `in` when expecting `;`

    /tmp/tmpyrcu_9_a.d(58): Error: found `in` when expecting `;`

    /tmp/tmpyrcu_9_a.d(74): Error: found `in` when expecting `;`

    /tmp/tmpyrcu_9_a.d(90): Error: found `in` when expecting `;`

    /tmp/tmpyrcu_9_a.d(106): Error: found `in` when expecting `;`

    /tmp/tmpyrcu_9_a.d(115): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyrcu_9_a.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        if(!std.isAlpha(c))\n        {\n            count++;\n \
    \       }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu7028l9o.d(10): Error: no property `length` for type `string`

    /tmp/tmpu7028l9o.d(13): Error: undefined identifier `isAlpha` in package `std`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu7028l9o.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n  \
    \          if(string[i] == string[j])\n            {\n                count++;\n\
    \            }\n        }\n    }\n    return count;\n}\n/*\n Given a string, find\
    \ out how many distinct characters (regardless of case) does it consist of\n \
    \           \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char\
    \ c = string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n\
    \            if(string[i] == string[j])\n            {\n                count++;\n\
    \            }\n        }\n    }\n    return count;\n}\n/*\n Given a string, find\
    \ out how many distinct characters (regardless of case) does it consist of\n \
    \           \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char\
    \ c = string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n\
    \            if(string[i] == string[j])\n            {\n                count++;\n\
    \            }\n        }\n    }\n    return count;\n}\n/*\n Given a string, find\
    \ out how many distinct characters (regardless of case) does it consist of\n \
    \           \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char\
    \ c = string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n\
    \            if(string[i] == string[j])\n            {\n                count++;\n\
    \            }\n        }\n    }\n    return count;\n}\n/*\n Given a string, find\
    \ out how many distinct characters (regardless of case) does it consist of\n \
    \           \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char\
    \ c = string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n\
    \            if(string[i] == string[j])\n            {\n                count++;\n\
    \            }\n        }\n    }\n    return count;\n}\n/*\n Given a string, find\
    \ out how many distinct characters (regardless of case) does it consist of\n \
    \           \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char\
    \ c = string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n\
    \            if(string[i] == string[j])\n            {\n                count++;\n\
    \            }\n        }\n    }\n    return \nunittest\n{\n    alias candidate\
    \ = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"\
    abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"\
    aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjohaqnl_.d(122): Error: expression expected, not `unittest`

    /tmp/tmpjohaqnl_.d(123): Error: found `{` when expecting `;` following `return`
    statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjohaqnl_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        if(!std.typecons.isUpper(c))\n            count++;\n   \
    \ }\n    return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        if(!std.typecons.isUpper(c))\n  \
    \          count++;\n    }\n    return count;\n}\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        if(!std.typecons.isUpper(c))\n            count++;\n   \
    \ }\n    return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        if(!std.typecons.isUpper(c))\n  \
    \          count++;\n    }\n    return count;\n}\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        if(!std.typecons.isUpper(c))\n            count++;\n   \
    \ }\n    return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        if(!std.typecons.isUpper(c))\n  \
    \          count++;\n    }\n    return count;\n}\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        if(!std.\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpn68utqve.d(104): Error: identifier expected following `.`, not
    `unittest`

    /tmp/tmpn68utqve.d(105): Error: found `{` when expecting `)`

    /tmp/tmpn68utqve.d(114): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn68utqve.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n  \
    \          char d = string[j];\n            if(c != d)\n            {\n      \
    \          break;\n            }\n            else\n            {\n          \
    \      count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3urgz1ry.d(10): Error: no property `length` for type `string`

    /tmp/tmp3urgz1ry.d(13): Error: no property `length` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3urgz1ry.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string.at(i);\n        if(!std.algorithm.contains(string.begin(), string.end(),\
    \ c))\n            count++;\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n\
    \    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\"\
    ) == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"\
    Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpcwqq7t35.d(10): Error: no property `length` for type `string`

    /tmp/tmpcwqq7t35.d(12): Error: no property `at` for type `string`

    /tmp/tmpcwqq7t35.d(13): Error: undefined identifier `algorithm` in package `std`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcwqq7t35.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = i+1; j < string.length(); j++)\n        {\n\
    \            if(string[j] == c)\n            {\n                count++;\n   \
    \             break;\n            }\n        }\n    }\n    return count;\n}\n\
    /*\n Given a string, find out how many distinct characters (regardless of case)\
    \ does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = i+1; j < string.length();\
    \ j++)\n        {\n            if(string[j] == c)\n            {\n           \
    \     count++;\n                break;\n            }\n        }\n    }\n    return\
    \ count;\n}\n/*\n Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = i+1; j < string.length();\
    \ j++)\n        {\n            if(string[j] == c)\n            {\n           \
    \     count++;\n                break;\n            }\n        }\n    }\n    return\
    \ count;\n}\n/*\n Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = i+1; j < string.length();\
    \ j++)\n        {\n            if(string[j] == c)\n            {\n           \
    \     count++;\n                break;\n            }\n        }\n    }\n    return\
    \ count;\n}\n/*\n Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = i+1; j < string.length();\
    \ j++)\n        {\n            if(string[j] == c)\n            {\n           \
    \     count++;\n                break;\n            }\n        }\n    }\n    return\
    \ count;\n}\n/*\n Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = i+1; \nunittest\n{\n\
    \    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\"\
    ) == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\"\
    ) == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"\
    Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2if_5fut.d(119): Error: expression expected, not `unittest`

    /tmp/tmp2if_5fut.d(120): Error: found `{` when expecting `;` following `for` condition

    /tmp/tmp2if_5fut.d(121): Error: expression expected, not `alias`

    /tmp/tmp2if_5fut.d(121): Error: found `candidate` when expecting `)`

    /tmp/tmp2if_5fut.d(121): Error: found `=` instead of statement

    /tmp/tmp2if_5fut.d(129): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2if_5fut.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n  \
    \          if(string[i] == string[j])\n            {\n                count++;\n\
    \            }\n        }\n    }\n    return count;\n}\n/*\n Given a string, find\
    \ out how many distinct characters (regardless of case) does it consist of\n \
    \           \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char\
    \ c = string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n\
    \            if(string[i] == string[j])\n            {\n                count++;\n\
    \            }\n        }\n    }\n    return count;\n}\n/*\n Given a string, find\
    \ out how many distinct characters (regardless of case) does it consist of\n \
    \           \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char\
    \ c = string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n\
    \            if(string[i] == string[j])\n            {\n                count++;\n\
    \            }\n        }\n    }\n    return count;\n}\n/*\n Given a string, find\
    \ out how many distinct characters (regardless of case) does it consist of\n \
    \           \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char\
    \ c = string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n\
    \            if(string[i] == string[j])\n            {\n                count++;\n\
    \            }\n        }\n    }\n    return count;\n}\n/*\n Given a string, find\
    \ out how many distinct characters (regardless of case) does it consist of\n \
    \           \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char\
    \ c = string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n\
    \            if(string[i] == string[j])\n            {\n                count++;\n\
    \            }\n        }\n    }\n    return count;\n}\n/*\n Given a string, find\
    \ out how many distinct characters (regardless of case) does it consist of\n \
    \           \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char\
    \ c = string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n\
    \            if(string[i] == string[j])\n            {\n                count++;\n\
    \            }\n        }\n    }\n    return \nunittest\n{\n    alias candidate\
    \ = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"\
    abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"\
    aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjohaqnl_.d(122): Error: expression expected, not `unittest`

    /tmp/tmpjohaqnl_.d(123): Error: found `{` when expecting `;` following `return`
    statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjohaqnl_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        if(!std.isAlpha(c))\n        {\n            count++;\n \
    \       }\n    }\n    return count;\n}\n/*\n Given a string, find out how many\
    \ distinct characters (regardless of case) does it consist of\n            \n\
    */\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n\
    \        if(!std.isAlpha(c))\n        {\n            count++;\n        }\n   \
    \ }\n    return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        if(!std.isAlpha(c))\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}\n/*\n Given a string,\
    \ find out how many distinct characters (regardless of case) does it consist of\n\
    \            \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char\
    \ c = string[i];\n        if(!std.isAlpha(c))\n        {\n            count++;\n\
    \        }\n    }\n    return count;\n}\n/*\n Given a string, find out how many\
    \ distinct characters (regardless of case) does it consist of\n            \n\
    */\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n\
    \        if(!std.isAlpha(c))\n        {\n            count++;\n        }\n   \
    \ }\n    return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        if(!std.isAlpha(c))\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}\n/*\n Given a string,\
    \ find out how many distinct characters (regardless of case) does it consist of\n\
    \            \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char\
    \ c = string\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n\
    \    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4uglfjre.d(115): Error: semicolon expected, not `unittest`

    /tmp/tmp4uglfjre.d(115): Error: found `unittest` instead of statement

    /tmp/tmp4uglfjre.d(125): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4uglfjre.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        if(!std.isAlpha(c))\n        {\n            count += 1;\n\
    \        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpc5blulss.d(10): Error: no property `length` for type `string`

    /tmp/tmpc5blulss.d(13): Error: undefined identifier `isAlpha` in package `std`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc5blulss.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n\tlong count\
    \ = 0;\n\tfor (int i = 0; i < string.length(); i++)\n\t{\n\t\tchar c = string[i];\n\
    \t\tfor (int j = 0; j < string.length(); j++)\n\t\t{\n\t\t\tif (i == j)\n\t\t\t\
    \tcontinue;\n\t\t\tchar d = string[j];\n\t\t\tif (c != d)\n\t\t\t\tbreak;\n\t\t\
    }\n\t\tcount++;\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgz28hpz2.d(10): Error: no property `length` for type `string`

    /tmp/tmpgz28hpz2.d(13): Error: no property `length` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgz28hpz2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string.at(i);\n        if(!std.isAlpha(c))\n        {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxhon7ufx.d(10): Error: no property `length` for type `string`

    /tmp/tmpxhon7ufx.d(12): Error: no property `at` for type `string`

    /tmp/tmpxhon7ufx.d(13): Error: undefined identifier `isAlpha` in package `std`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxhon7ufx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n\tlong count\
    \ = 0;\n\tfor(int i = 0; i < string.length(); i++)\n\t{\n\t\tchar c = string[i];\n\
    \t\tfor(int j = 0; j < string.length(); j++)\n\t\t{\n\t\t\tif(string[i] == string[j])\n\
    \t\t\t{\n\t\t\t\tcount++;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n\
    }\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2xr7idrc.d(10): Error: no property `length` for type `string`

    /tmp/tmp2xr7idrc.d(13): Error: no property `length` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2xr7idrc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n  \
    \          char d = string[j];\n            if(c != d)\n            {\n      \
    \          break;\n            }\n        }\n        count++;\n    }\n    return\
    \ count;\n}\n/*\n Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n        }\n        count++;\n\
    \    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n        }\n        count++;\n\
    \    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n        }\n        count++;\n\
    \    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n        }\n        count++;\n\
    \    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        \nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppruzgbaf.d(123): Error: found `unittest` instead of statement

    /tmp/tmppruzgbaf.d(133): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppruzgbaf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = i; j < string.length(); j++)\n        {\n  \
    \          char d = string[j];\n            if(c != d)\n            {\n      \
    \          break;\n            }\n            count++;\n        }\n    }\n   \
    \ return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = i; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n            count++;\n \
    \       }\n    }\n    return count;\n}\n/*\n Given a string, find out how many\
    \ distinct characters (regardless of case) does it consist of\n            \n\
    */\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n\
    \        for(int j = i; j < string.length(); j++)\n        {\n            char\
    \ d = string[j];\n            if(c != d)\n            {\n                break;\n\
    \            }\n            count++;\n        }\n    }\n    return count;\n}\n\
    /*\n Given a string, find out how many distinct characters (regardless of case)\
    \ does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = i; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n            count++;\n \
    \       }\n    }\n    return count;\n}\n/*\n Given a string, find out how many\
    \ distinct characters (regardless of case) does it consist of\n            \n\
    */\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n\
    \        for(int j = i; j < string.length(); j++)\n        {\n            char\
    \ d = string[j];\n            if(c != d)\n            {\n                break;\n\
    \            }\n            count++;\n        }\n    }\n    return count;\n}\n\
    /*\n Given a string, find out how many distinct characters (regardless of case)\
    \ does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ \nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpy88tapln.d(118): Error: found `unittest` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy88tapln.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length; i++)\n    {\n        char c = string[i];\n\
    \        for(int j = 0; j < string.length; j++)\n        {\n            if(c ==\
    \ string[j])\n            {\n                count++;\n                break;\n\
    \            }\n        }\n    }\n    return count;\n}\n/*\n Given a string, find\
    \ out how many distinct characters (regardless of case) does it consist of\n \
    \           \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    for(int i = 0; i < string.length; i++)\n    {\n        char\
    \ c = string[i];\n        for(int j = 0; j < string.length; j++)\n        {\n\
    \            if(c == string[j])\n            {\n                count++;\n   \
    \             break;\n            }\n        }\n    }\n    return count;\n}\n\
    /*\n Given a string, find out how many distinct characters (regardless of case)\
    \ does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length; i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length;\
    \ j++)\n        {\n            if(c == string[j])\n            {\n           \
    \     count++;\n                break;\n            }\n        }\n    }\n    return\
    \ count;\n}\n/*\n Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length; i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length;\
    \ j++)\n        {\n            if(c == string[j])\n            {\n           \
    \     count++;\n                break;\n            }\n        }\n    }\n    return\
    \ count;\n}\n/*\n Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length; i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length;\
    \ j++)\n        {\n            if(c == string[j])\n            {\n           \
    \     count++;\n                break;\n            }\n        }\n    }\n    return\
    \ count;\n}\n/*\n Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length; i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length;\
    \ j++)\n        {\n            if(c == string[j])\n            {\n           \
    \     count++;\n                break;\n            }\nunittest\n{\n    alias\
    \ candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n\
    \    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\"\
    ) == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"\
    Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxr7njzjp.d(125): Error: found `unittest` instead of statement

    /tmp/tmpxr7njzjp.d(135): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmpxr7njzjp.d(135): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxr7njzjp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        if(!std.isAlpha(c))\n        {\n            count++;\n \
    \       }\n    }\n    return count;\n}\n/*\n Given a string, find out how many\
    \ distinct characters (regardless of case) does it consist of\n            \n\
    */\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n\
    \        if(!std.isAlpha(c))\n        {\n            count++;\n        }\n   \
    \ }\n    return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        if(!std.isAlpha(c))\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}\n/*\n Given a string,\
    \ find out how many distinct characters (regardless of case) does it consist of\n\
    \            \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char\
    \ c = string[i];\n        if(!std.isAlpha(c))\n        {\n            count++;\n\
    \        }\n    }\n    return count;\n}\n/*\n Given a string, find out how many\
    \ distinct characters (regardless of case) does it consist of\n            \n\
    */\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n\
    \        if(!std.isAlpha(c))\n        {\n            count++;\n        }\n   \
    \ }\n    return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        if(!std.isAlpha(c))\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}\n/*\n Given a string,\
    \ find out how many distinct characters (regardless of case) does it consist of\n\
    \            \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char\
    \ c = string\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n\
    \    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4uglfjre.d(115): Error: semicolon expected, not `unittest`

    /tmp/tmp4uglfjre.d(115): Error: found `unittest` instead of statement

    /tmp/tmp4uglfjre.d(125): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4uglfjre.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        if(!std.isLower(c) && !std.isUpper(c))\n        {\n    \
    \        count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n\
    \    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\"\
    ) == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"\
    Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpibpkt1g4.d(10): Error: no property `length` for type `string`

    /tmp/tmpibpkt1g4.d(13): Error: undefined identifier `isLower` in package `std`

    /tmp/tmpibpkt1g4.d(13): Error: undefined identifier `isUpper` in package `std`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpibpkt1g4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n  \
    \          char d = string[j];\n            if(c != d)\n            {\n      \
    \          break;\n            }\n        }\n        count++;\n    }\n    return\
    \ count;\n}\n/*\n Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n        }\n        count++;\n\
    \    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n        }\n        count++;\n\
    \    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n        }\n        count++;\n\
    \    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n        }\n        count++;\n\
    \    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        \nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppruzgbaf.d(123): Error: found `unittest` instead of statement

    /tmp/tmppruzgbaf.d(133): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppruzgbaf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        if(!std.typecons.isUpper(c))\n        {\n            count++;\n\
    \        }\n    }\n    return count;\n}\n/*\n Given a string, find out how many\
    \ distinct characters (regardless of case) does it consist of\n            \n\
    */\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n\
    \        if(!std.typecons.isUpper(c))\n        {\n            count++;\n     \
    \   }\n    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        if(!std.typecons.isUpper(c))\n  \
    \      {\n            count++;\n        }\n    }\n    return count;\n}\n/*\n Given\
    \ a string, find out how many distinct characters (regardless of case) does it\
    \ consist of\n            \n*/\nlong count_distinct_characters(string string)\
    \ \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n   \
    \ {\n        char c = string[i];\n        if(!std.typecons.isUpper(c))\n     \
    \   {\n            count++;\n        }\n    }\n    return count;\n}\n/*\n Given\
    \ a string, find out how many distinct characters (regardless of case) does it\
    \ consist of\n            \n*/\nlong count_distinct_characters(string string)\
    \ \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n   \
    \ {\n        char c = string[i];\n        if(!std.typecons.isUpper(c))\n     \
    \   {\n            count++;\n        }\n    }\n    return count;\n}\n/*\n Given\
    \ a string, find out how many distinct characters (regardless of case) does it\
    \ consist of\n            \n*/\nlong count_distinct_characters(string string)\
    \ \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n   \
    \ {\n        char c = string[i];\n        if(!std.typecons.isUpper(c))\n     \
    \   {\n            count++;\n        }\n    }\n    return count;\n}\n/*\n Given\
    \ a string, find out how many distinct characters (regardless of case) does it\
    \ consist of\n            \n*/\nlong count_distinct_characters(string string)\
    \ \n{\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n   \
    \ assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n  \
    \  assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu08q3yo_.d(112): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu08q3yo_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    \n    foreach(char c in string)\n    {\n        count += 1;\n    }\n\
    \    \n    return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    \n    foreach(char c in string)\n    {\n\
    \        count += 1;\n    }\n    \n    return count;\n}\n/*\n Given a string,\
    \ find out how many distinct characters (regardless of case) does it consist of\n\
    \            \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    \n    foreach(char c in string)\n    {\n        count += 1;\n\
    \    }\n    \n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    \n    foreach(char c in string)\n    {\n\
    \        count += 1;\n    }\n    \n    return count;\n}\n/*\n Given a string,\
    \ find out how many distinct characters (regardless of case) does it consist of\n\
    \            \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    \n    foreach(char c in string)\n    {\n        count += 1;\n\
    \    }\n    \n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    \n    foreach(char c in string)\n    {\n\
    \        count += 1;\n    }\n    \n    return count;\n}\n/*\n Given a string,\
    \ find out how many distinct characters (regardless of case) does it consist of\n\
    \            \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    \n    foreach(char c in string)\n    {\n        count += 1;\n\
    \    }\n    \n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    \n    foreach(char c in string)\n    {\n\
    \        count += 1;\n    }\n    \n    return count;\n}\n/*\n Given a string,\
    \ find out how many distinct characters (\nunittest\n{\n    alias candidate =\
    \ count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"\
    abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"\
    aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmc1x67er.d(11): Error: found `in` when expecting `;`

    /tmp/tmpmc1x67er.d(26): Error: found `in` when expecting `;`

    /tmp/tmpmc1x67er.d(41): Error: found `in` when expecting `;`

    /tmp/tmpmc1x67er.d(56): Error: found `in` when expecting `;`

    /tmp/tmpmc1x67er.d(71): Error: found `in` when expecting `;`

    /tmp/tmpmc1x67er.d(86): Error: found `in` when expecting `;`

    /tmp/tmpmc1x67er.d(101): Error: found `in` when expecting `;`

    /tmp/tmpmc1x67er.d(116): Error: found `in` when expecting `;`

    /tmp/tmpmc1x67er.d(123): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmc1x67er.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length; i++)\n    {\n        char c = string[i];\n\
    \        if(!std.typecons.isUpper(c))\n        {\n            count++;\n     \
    \   }\n    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length; i++)\n\
    \    {\n        char c = string[i];\n        if(!std.typecons.isUpper(c))\n  \
    \      {\n            count++;\n        }\n    }\n    return count;\n}\n/*\n Given\
    \ a string, find out how many distinct characters (regardless of case) does it\
    \ consist of\n            \n*/\nlong count_distinct_characters(string string)\
    \ \n{\n    long count = 0;\n    for(int i = 0; i < string.length; i++)\n    {\n\
    \        char c = string[i];\n        if(!std.typecons.isUpper(c))\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}\n/*\n Given a string,\
    \ find out how many distinct characters (regardless of case) does it consist of\n\
    \            \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    for(int i = 0; i < string.length; i++)\n    {\n        char\
    \ c = string[i];\n        if(!std.typecons.isUpper(c))\n        {\n          \
    \  count++;\n        }\n    }\n    return count;\n}\n/*\n Given a string, find\
    \ out how many distinct characters (regardless of case) does it consist of\n \
    \           \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    for(int i = 0; i < string.length; i++)\n    {\n        char\
    \ c = string[i];\n        if(!std.typecons.isUpper(c))\n        {\n          \
    \  count++;\n        }\n    }\n    return count;\n}\n/*\n Given a string, find\
    \ out how many distinct characters (regardless of case) does it consist of\n \
    \           \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    for(int i = 0; i < string.length; i++)\n    {\n        char\
    \ c = string[i];\n        if(!std.typecons.isUpper(c))\n        {\n          \
    \  count++;\n        }\n    }\n    return count;\n}\n/*\n Given a string, find\
    \ out how many distinct characters (regardless of case) does it consist of\n \
    \           \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    for(int \nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7f_bfxep.d(113): Error: no identifier for declarator `int`

    /tmp/tmp7f_bfxep.d(113): Error: expression expected, not `unittest`

    /tmp/tmp7f_bfxep.d(114): Error: found `{` when expecting `;` following `for` condition

    /tmp/tmp7f_bfxep.d(115): Error: expression expected, not `alias`

    /tmp/tmp7f_bfxep.d(115): Error: found `candidate` when expecting `)`

    /tmp/tmp7f_bfxep.d(115): Error: found `=` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7f_bfxep.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string.at(i);\n        for(int j = 0; j < string.length(); j++)\n        {\n\
    \            char d = string.at(j);\n            if(c != d)\n            {\n \
    \               break;\n            }\n            else\n            {\n     \
    \           count++;\n            }\n        }\n    }\n    return count;\n}\n\
    /*\n Given a string, find out how many distinct characters (regardless of case)\
    \ does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string.at(i);\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string.at(j);\n            if(c != d)\n\
    \            {\n                break;\n            }\n            else\n    \
    \        {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}\n/*\n Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string.at(i);\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string.at(j);\n            if(c != d)\n\
    \            {\n                break;\n            }\n            else\n    \
    \        {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}\n/*\n Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string.at(i);\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string.at(j);\n            if(c != d)\n\
    \            {\n                break;\n            }\n            else\n    \
    \        {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}\n/*\n Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string.at(i);\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string.at(j);\n            if(c != d)\n\
    \            {\n                break;\n            }\n            else\n    \
    \        {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}\n/*\n \nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpry5y3sv3.d(128): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpry5y3sv3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    foreach(char c in string) \n    {\n        count += 1;\n    }\n  \
    \  return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    foreach(char c in string) \n    {\n  \
    \      count += 1;\n    }\n    return count;\n}\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    foreach(char c in string) \n    {\n        count += 1;\n    }\n  \
    \  return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    foreach(char c in string) \n    {\n  \
    \      count += 1;\n    }\n    return count;\n}\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    foreach(char c in string) \n    {\n        count += 1;\n    }\n  \
    \  return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    foreach(char c in string) \n    {\n  \
    \      count += 1;\n    }\n    return count;\n}\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    foreach(char c in string) \n    {\n        count += 1;\n    }\n  \
    \  return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    foreach(char c in string) \n    {\n  \
    \      count += 1;\n    }\n    return count;\n}\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n\nunittest\n{\n\
    \    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\"\
    ) == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\"\
    ) == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"\
    Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpt2412ty_.d(10): Error: found `in` when expecting `;`

    /tmp/tmpt2412ty_.d(23): Error: found `in` when expecting `;`

    /tmp/tmpt2412ty_.d(36): Error: found `in` when expecting `;`

    /tmp/tmpt2412ty_.d(49): Error: found `in` when expecting `;`

    /tmp/tmpt2412ty_.d(62): Error: found `in` when expecting `;`

    /tmp/tmpt2412ty_.d(75): Error: found `in` when expecting `;`

    /tmp/tmpt2412ty_.d(88): Error: found `in` when expecting `;`

    /tmp/tmpt2412ty_.d(101): Error: found `in` when expecting `;`

    /tmp/tmpt2412ty_.d(113): Error: semicolon expected following function declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt2412ty_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = i; j < string.length(); j++)\n        {\n  \
    \          char d = string[j];\n            if(c != d)\n            {\n      \
    \          break;\n            }\n            else\n            {\n          \
    \      count++;\n            }\n        }\n    }\n    return count;\n}\n/*\n Given\
    \ a string, find out how many distinct characters (regardless of case) does it\
    \ consist of\n            \n*/\nlong count_distinct_characters(string string)\
    \ \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n   \
    \ {\n        char c = string[i];\n        for(int j = i; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n            else\n     \
    \       {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}\n/*\n Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = i; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n            else\n     \
    \       {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}\n/*\n Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = i; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n            else\n     \
    \       {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}\n/*\n Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = i; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n            else\n     \
    \       {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n\
    \    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpz8vq_w8k.d(128): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz8vq_w8k.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n\tlong count\
    \ = 0;\n\t\n\tfor (int i = 0; i < string.length(); i++)\n\t{\n\t\tchar c = string.at(i);\n\
    \t\t\n\t\tif (islower(c))\n\t\t\tcount++;\n\t\telse if (isupper(c))\n\t\t\tcount++;\n\
    \t\telse if (isdigit(c))\n\t\t\tcount++;\n\t\telse if (c == '_')\n\t\t\tcount++;\n\
    \t\telse if (c == '-' || c == '_')\n\t\t\tcount++;\n\t\telse if (c == '.')\n\t\
    \t\tcount++;\n\t\telse if (c == '_')\n\t\t\tcount++;\n\t\telse if (c == '/')\n\
    \t\t\tcount++;\n\t\telse if (c == '_')\n\t\t\tcount++;\n\t\telse if (c == '(')\n\
    \t\t\tcount++;\n\t\telse if (c == ')')\n\t\t\tcount++;\n\t\telse if (c == '_')\n\
    \t\t\tcount++;\n\t\telse if (c == '+' || c == '_')\n\t\t\tcount++;\n\t\telse if\
    \ (c == '=')\n\t\t\tcount++;\n\t\telse if (c == '_')\n\t\t\tcount++;\n\t\telse\
    \ if (c == '<')\n\t\t\tcount++;\n\t\telse if (c == '>')\n\t\t\tcount++;\n\t\t\
    else if (c == '_')\n\t\t\tcount++;\n\t\telse if (c == '&')\n\t\t\tcount++;\n\t\
    \telse if (c == '_')\n\t\t\tcount++;\n\t\telse if (c == '|')\n\t\t\tcount++;\n\
    \t\telse if (c == '_')\n\t\t\tcount++;\n\t\telse if (c == '\"')\n\t\t\tcount++;\n\
    \t\telse if (c == '_')\n\t\t\tcount++;\n\t\telse if (c == '%')\n\t\t\tcount++;\n\
    \t\telse if (c == '_')\n\t\t\tcount++;\n\t\telse if (c == '_')\n\t\t\tcount++;\n\
    \t\telse if (c == '_')\n\t\t\tcount++;\n\t\telse if (c == '_')\n\t\t\tcount++;\n\
    \t\telse if (c == '_')\n\t\t\tcount++;\n\t\telse if (c == '_')\n\t\t\tcount++;\n\
    \t\telse if (c == '_')\n\t\t\tcount++;\n\t\telse if (c == '_')\n\t\t\tcount++;\n\
    \t\telse if (c == '_')\n\t\t\tcount++;\n\t\telse if (c == '_')\n\t\t\tcount++;\n\
    \t\telse if (c == '_')\n\t\t\tcount++;\n\t\telse if (c == '_')\n\t\t\tcount++;\n\
    \t\telse if (c == '_')\n\t\t\tcount++;\n\t\telse if (c == '_')\n\t\t\tcount++;\n\
    \t\telse if (c == '_')\n\t\t\tcount++;\n\t\telse if (c == '_')\n\t\t\tcount++;\n\
    \t\telse if (c == '_')\n\t\t\tcount++;\n\t\telse if (c == '_')\n\t\t\tcount++;\n\
    \t\telse if (c == '_')\n\t\t\tcount++;\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpavc5ir7o.d(103): Error: found `unittest` instead of statement

    /tmp/tmpavc5ir7o.d(113): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpavc5ir7o.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n  \
    \          char d = string[j];\n            if(c != d)\n            {\n      \
    \          count++;\n                break;\n            }\n        }\n    }\n\
    \    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5netj2z9.d(10): Error: no property `length` for type `string`

    /tmp/tmp5netj2z9.d(13): Error: no property `length` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5netj2z9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        if(!std.isAlpha(c))\n        {\n            count++;\n \
    \       }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu7028l9o.d(10): Error: no property `length` for type `string`

    /tmp/tmpu7028l9o.d(13): Error: undefined identifier `isAlpha` in package `std`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu7028l9o.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n\tlong count\
    \ = 0;\n\tfor (int i = 0; i < string.length(); i++)\n\t{\n\t\tchar c = string[i];\n\
    \t\tfor (int j = 0; j < string.length(); j++)\n\t\t{\n\t\t\tif (string[i] == string[j])\n\
    \t\t\t{\n\t\t\t\tcount++;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n\
    }\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpazsrpx32.d(10): Error: no property `length` for type `string`

    /tmp/tmpazsrpx32.d(13): Error: no property `length` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpazsrpx32.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string.at(i);\n        if(!std.ctype.isLower(c))\n        {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2m0woh2h.d(10): Error: no property `length` for type `string`

    /tmp/tmp2m0woh2h.d(12): Error: no property `at` for type `string`

    /tmp/tmp2m0woh2h.d(13): Error: undefined identifier `ctype` in package `std`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2m0woh2h.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n  \
    \          char d = string[j];\n            if(c != d)\n            {\n      \
    \          count++;\n                break;\n            }\n        }\n    }\n\
    \    return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                count++;\n                break;\n            }\n\
    \        }\n    }\n    return count;\n}\n/*\n Given a string, find out how many\
    \ distinct characters (regardless of case) does it consist of\n            \n\
    */\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n\
    \        for(int j = 0; j < string.length(); j++)\n        {\n            char\
    \ d = string[j];\n            if(c != d)\n            {\n                count++;\n\
    \                break;\n            }\n        }\n    }\n    return count;\n\
    }\n/*\n Given a string, find out how many distinct characters (regardless of case)\
    \ does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                count++;\n                break;\n            }\n\
    \        }\n    }\n    return count;\n}\n/*\n Given a string, find out how many\
    \ distinct characters (regardless of case) does it consist of\n            \n\
    */\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n\
    \        for(int j = 0; j < string.length(); j++)\n        {\n            char\
    \ d = string[j];\n            if(c != d)\n            {\n                count++;\n\
    \                break;\n            }\n        }\n    }\n    return count;\n\
    }\n/*\n Given a string, find out how many distinct characters (regardless of case)\
    \ does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length()\nunittest\n\
    {\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpb7fav1wz.d(121): Error: found `unittest` when expecting `;` following
    `for` condition

    /tmp/tmpb7fav1wz.d(131): Error: found `void` when expecting `)`

    /tmp/tmpb7fav1wz.d(131): Error: found `{` when expecting `;` following statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb7fav1wz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n  \
    \          char d = string[j];\n            if(c != d)\n            {\n      \
    \          break;\n            }\n            else\n            {\n          \
    \      count++;\n            }\n        }\n    }\n    return count;\n}\n/*\n Given\
    \ a string, find out how many distinct characters (regardless of case) does it\
    \ consist of\n            \n*/\nlong count_distinct_characters(string string)\
    \ \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n   \
    \ {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n            else\n     \
    \       {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}\n/*\n Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n            else\n     \
    \       {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}\n/*\n Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n            else\n     \
    \       {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}\n/*\n Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n            else\n     \
    \       {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}\n/*\n Given a string, find out how many distinct characters (regardles\n\
    unittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0nmwvt12.d(128): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0nmwvt12.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n  \
    \          char d = string[j];\n            if(c != d)\n            {\n      \
    \          if(c > d)\n                {\n                    count++;\n      \
    \              break;\n                }\n                else\n             \
    \   {\n                    count++;\n                    break;\n            \
    \    }\n            }\n        }\n    }\n    return count;\n}\n/*\n Given a string,\
    \ find out how many distinct characters (regardless of case) does it consist of\n\
    \            \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char\
    \ c = string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n\
    \            char d = string[j];\n            if(c != d)\n            {\n    \
    \            if(c > d)\n                {\n                    count++;\n    \
    \                break;\n                }\n                else\n           \
    \     {\n                    count++;\n                    break;\n          \
    \      }\n            }\n        }\n    }\n    return count;\n}\n/*\n Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n            \n*/\nlong count_distinct_characters(string string) \n{\n  \
    \  long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n    \
    \    char c = string[i];\n        for(int j = 0; j < string.length(); j++)\n \
    \       {\n            char d = string[j];\n            if(c != d)\n         \
    \   {\n                if(c > d)\n                {\n                    count++;\n\
    \                    break;\n                }\n                else\n       \
    \         {\n                    count++;\n                    break;\n      \
    \          }\n            }\n        }\n    }\n    return count;\n}\n/*\n Given\
    \ a string, find out how many distinct characters (regardless of case) does it\
    \ consist of\n            \n*/\nlong count_distinct_characters(string string)\
    \ \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n   \
    \ {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                if(c > d)\n                {\n                \
    \    count++;\n                    break;\n                }\n               \
    \ else\n                {\n                    count++;\n                    break;\n\
    \                }\n            }\n        }\n    }\n    return count;\n}\n/*\n\
    \ Given a string, find out how many distinct characters (regardless of case) does\
    \ it consist of\n            \n*/\nlong count_distinct_characters(string string)\
    \ \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n   \
    \ {\n        char c = string[i];\n        for(int \nunittest\n{\n    alias candidate\
    \ = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"\
    abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"\
    aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphoqomcjc.d(134): Error: no identifier for declarator `int`

    /tmp/tmphoqomcjc.d(134): Error: expression expected, not `unittest`

    /tmp/tmphoqomcjc.d(135): Error: found `{` when expecting `;` following `for` condition

    /tmp/tmphoqomcjc.d(136): Error: expression expected, not `alias`

    /tmp/tmphoqomcjc.d(136): Error: found `candidate` when expecting `)`

    /tmp/tmphoqomcjc.d(136): Error: found `=` instead of statement

    /tmp/tmphoqomcjc.d(144): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphoqomcjc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        if(!std.isAlpha(c))\n        {\n            count++;\n \
    \       }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu7028l9o.d(10): Error: no property `length` for type `string`

    /tmp/tmpu7028l9o.d(13): Error: undefined identifier `isAlpha` in package `std`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu7028l9o.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length; i++)\n    {\n        char c = string[i];\n\
    \        for(int j = 0; j < string.length; j++)\n        {\n            char d\
    \ = string[j];\n            if(c != d)\n            {\n                if(c >=\
    \ 'a' && c <= 'z')\n                {\n                    if(d >= 'a' && d <=\
    \ 'z')\n                    {\n                        if(c != d)\n          \
    \              {\n                            if(c >= 'A' && c <= 'Z')\n     \
    \                       {\n                                if(d >= 'A' && d <=\
    \ 'Z')\n                                {\n                                  \
    \  count++;\n                                }\n                            }\n\
    \                        }\n                    }\n                }\n       \
    \     }\n        }\n    }\n    return count;\n}\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length; i++)\n    {\n        char c = string[i];\n\
    \        for(int j = 0; j < string.length; j++)\n        {\n            char d\
    \ = string[j];\n            if(c != d)\n            {\n                if(c >=\
    \ 'a' && c <= 'z')\n                {\n                    if(d >= 'a' && d <=\
    \ 'z')\n                    {\n                        if(c != d)\n          \
    \              {\n                            if(c >= 'A' && c <= 'Z')\n     \
    \                       {\n                                if(d >= 'A' && d <=\
    \ 'Z')\n                                {\n                                  \
    \  count++;\n                                }\n                            }\n\
    \                        }\n                    }\n                }\n       \
    \     }\n        }\n    }\n    return count;\n}\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length; i++)\n    {\n        char c = string[i];\n\
    \        for(int j = 0; j < string.length; j++)\n        {\n            char d\
    \ = string[j];\n            if(c != d)\n            {\n                if(c >=\
    \ 'a' && c <= 'z')\n                {\n                    if(d >= 'a' && d <=\
    \ 'z')\n                    {\n                        if(c != d)\n          \
    \              {\n                            if(c >= 'A' && c <= 'Z')\n     \
    \                       {\n                                if(d >= 'A' && d <=\
    \ 'Z')\n                                {\n                                  \
    \  count++;\n                                }\n                            }\n\
    \                        }\n                    }\n                }\n       \
    \     }\n        }\n    }\n    return count;\n}\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does \nunittest\n{\n    alias\
    \ candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n\
    \    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\"\
    ) == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"\
    Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp98s_7ba5.d(111): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp98s_7ba5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n\tlong count\
    \ = 0;\n\tfor (int i = 0; i < string.length(); i++)\n\t{\n\t\tfor (int j = 0;\
    \ j < string.length(); j++)\n\t\t{\n\t\t\tif (string[i] == string[j])\n\t\t\t\
    {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\n/*\n Given a string,\
    \ find out how many distinct characters (regardless of case) does it consist of\n\
    \            \n*/\nlong count_distinct_characters(string string) \n{\n\tlong count\
    \ = 0;\n\tfor (int i = 0; i < string.length(); i++)\n\t{\n\t\tfor (int j = 0;\
    \ j < string.length(); j++)\n\t\t{\n\t\t\tif (string[i] == string[j])\n\t\t\t\
    {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\n/*\n Given a string,\
    \ find out how many distinct characters (regardless of case) does it consist of\n\
    \            \n*/\nlong count_distinct_characters(string string) \n{\n\tlong count\
    \ = 0;\n\tfor (int i = 0; i < string.length(); i++)\n\t{\n\t\tfor (int j = 0;\
    \ j < string.length(); j++)\n\t\t{\n\t\t\tif (string[i] == string[j])\n\t\t\t\
    {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\n/*\n Given a string,\
    \ find out how many distinct characters (regardless of case) does it consist of\n\
    \            \n*/\nlong count_distinct_characters(string string) \n{\n\tlong count\
    \ = 0;\n\tfor (int i = 0; i < string.length(); i++)\n\t{\n\t\tfor (int j = 0;\
    \ j < string.length(); j++)\n\t\t{\n\t\t\tif (string[i] == string[j])\n\t\t\t\
    {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\n/*\n Given a string,\
    \ find out how many distinct characters (regardless of case) does it consist of\n\
    \            \n*/\nlong count_distinct_characters(string string) \n{\n\tlong count\
    \ = 0;\n\tfor (int i = 0; i < string.length(); i++)\n\t{\n\t\tfor (int j = 0;\
    \ j < string.length(); j++)\n\t\t{\n\t\t\tif (string[i] == string[j])\n\t\t\t\
    {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\n/*\n Given a string,\
    \ find out how many distinct characters (regardless of case) does it consist of\n\
    \            \n*/\nlong count_distinct_characters(string string) \n{\n\tlong count\
    \ = 0;\n\tfor (int i = 0; i < string.length(); i++)\n\t{\n\t\tfor (int j = 0;\
    \ j < string.length(); j++)\n\t\t{\n\t\t\tif (string[i] == string[j])\n\t\t\t\
    {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\n/*\n Given a string,\
    \ find out how many distinct characters (regardless of case) does it consist of\n\
    \            \n*/\nlong count_distinct_characters(\nunittest\n{\n    alias candidate\
    \ = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"\
    abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"\
    aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3wq6_495.d(122): Error: basic type expected, not `unittest`

    /tmp/tmp3wq6_495.d(122): Error: found `unittest` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3wq6_495.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n  \
    \          char d = string[j];\n            if(c != d)\n            {\n      \
    \          if(c >= 'A' && c <= 'Z')\n                {\n                    if(d\
    \ >= 'A' && d <= 'Z')\n                    {\n                        if(c !=\
    \ d)\n                        {\n                            count++;\n      \
    \                  }\n                    }\n                    else\n      \
    \              {\n                        if(d >= 'a' && d <= 'z')\n         \
    \               {\n                            if(c != d)\n                  \
    \          {\n                                count++;\n                     \
    \       }\n                        }\n                        else\n         \
    \               {\n                            if(c >= '0' && c <= '9')\n    \
    \                        {\n                                if(d >= '0' && d <=\
    \ '9')\n                                {\n                                  \
    \  if(c != d)\n                                    {\n                       \
    \                 count++;\n                                    }\n          \
    \                      }\n                                else\n             \
    \                   {\n                                    if(d >= 'a' && d <=\
    \ 'z')\n                                    {\n                              \
    \          if(c != d)\n                                        {\n           \
    \                                 count++;\n                                 \
    \       }\n                                    }\n                           \
    \         else\n                                    {\n                      \
    \                  if(c >= 'A' && c <= 'Z')\n                                \
    \        {\n                                            if(d >= 'A' && d <= 'Z')\n\
    \                                            {\n                             \
    \                   if(c != d)\n                                             \
    \   {\n                                                    count++;\n        \
    \                                        }\n                                 \
    \           }\n                                        }\n                   \
    \                 }\n                                }\n                     \
    \       }\n                        }\n                    }\n                }\n\
    \                else\n                {\n                    if(d >= 'a' && d\
    \ <= 'z')\n                    {\n                        if(c != d)\n       \
    \                 {\n                            count++;\n                  \
    \      }\n                    }\n                    else\n                  \
    \  {\n                        if(c >= '0' && c <= '9')\n                     \
    \   {\n                            if(d >= '0' && d <= '9')\n                \
    \            {\n                                if(c != d)\n                 \
    \               {\n                                    count++;\n            \
    \                    }\n                            }\n                      \
    \      else\n                            {\n                                if(d\
    \ >= 'a' && d <= 'z')\n                                {\n                   \
    \                 if(c != d)\n                                    {\n        \
    \                                count++;\n                                  \
    \  }\n                                }\n                                else\n\
    \                                {\n                                    if(c >=\
    \ 'A' && c <= 'Z')\n                                    {\n                  \
    \                      if(d >= 'A' && d <= 'Z')\n                            \
    \            {\n                                            if(c != d)\n     \
    \                                       {\n                                  \
    \              count++;\n                                            }\n     \
    \                                   }\n                                    }\n\
    \                                }\n                            }\n          \
    \              }\n                    }\n                }\n            }\n  \
    \      }\n    }\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpk2bc8tt0.d(123): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk2bc8tt0.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    foreach(char c in string) \n    {\n        if(!std.algorithm.contains(string.chars,\
    \ c)) \n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\n/*\n Given a string, find out how many distinct characters (regardless of case)\
    \ does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    foreach(char c in string) \n    {\n  \
    \      if(!std.algorithm.contains(string.chars, c)) \n        {\n            count++;\n\
    \        }\n    }\n    return count;\n}\n/*\n Given a string, find out how many\
    \ distinct characters (regardless of case) does it consist of\n            \n\
    */\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n \
    \   foreach(char c in string) \n    {\n        if(!std.algorithm.contains(string.chars,\
    \ c)) \n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\n/*\n Given a string, find out how many distinct characters (regardless of case)\
    \ does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    foreach(char c in string) \n    {\n  \
    \      if(!std.algorithm.contains(string.chars, c)) \n        {\n            count++;\n\
    \        }\n    }\n    return count;\n}\n/*\n Given a string, find out how many\
    \ distinct characters (regardless of case) does it consist of\n            \n\
    */\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n \
    \   foreach(char c in string) \n    {\n        if(!std.algorithm.contains(string.chars,\
    \ c)) \n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\n/*\n Given a string, find out how many distinct characters (regardless of case)\
    \ does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    foreach(char c in string) \n    {\n  \
    \      if(!std.algorithm.contains(string.chars, c)) \n        {\n            count++;\n\
    \        }\n    }\n    return count;\n}\n/*\n Given a string, find out how many\
    \ distinct characters (regardless of case) does it consist of\n            \n\
    */\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n \
    \   foreach(char c in string) \n    {\n        if(!std.algorithm.contains(string.chars,\
    \ c)) \n        {\n            count++;\n        }\n    }\n\nunittest\n{\n   \
    \ alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") ==\
    \ 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\"\
    ) == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"\
    Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvcewqyb8.d(10): Error: found `in` when expecting `;`

    /tmp/tmpvcewqyb8.d(26): Error: found `in` when expecting `;`

    /tmp/tmpvcewqyb8.d(42): Error: found `in` when expecting `;`

    /tmp/tmpvcewqyb8.d(58): Error: found `in` when expecting `;`

    /tmp/tmpvcewqyb8.d(74): Error: found `in` when expecting `;`

    /tmp/tmpvcewqyb8.d(90): Error: found `in` when expecting `;`

    /tmp/tmpvcewqyb8.d(106): Error: found `in` when expecting `;`

    /tmp/tmpvcewqyb8.d(114): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvcewqyb8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        if(!std.typecons.isUpper(c))\n        {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjw2m5u4g.d(10): Error: no property `length` for type `string`

    /tmp/tmpjw2m5u4g.d(13): Error: undefined identifier `isUpper` in module `std.typecons`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjw2m5u4g.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string.at(i);\n        for(int j = 0; j < string.length(); j++)\n        {\n\
    \            char d = string.at(j);\n            if(c != d)\n            {\n \
    \               break;\n            }\n            else\n            {\n     \
    \           count++;\n            }\n        }\n    }\n    return count;\n}\n\
    /*\n Given a string, find out how many distinct characters (regardless of case)\
    \ does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string.at(i);\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string.at(j);\n            if(c != d)\n\
    \            {\n                break;\n            }\n            else\n    \
    \        {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}\n/*\n Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string.at(i);\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string.at(j);\n            if(c != d)\n\
    \            {\n                break;\n            }\n            else\n    \
    \        {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}\n/*\n Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string.at(i);\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string.at(j);\n            if(c != d)\n\
    \            {\n                break;\n            }\n            else\n    \
    \        {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}\n/*\n Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string.at(i);\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string.at(j);\n            if(c != d)\n\
    \            {\n                break;\n            }\n            else\n    \
    \        {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}\n/*\n \nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpry5y3sv3.d(128): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpry5y3sv3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    foreach(char c in string)\n    {\n        count += 1;\n    }\n   \
    \ return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    foreach(char c in string)\n    {\n   \
    \     count += 1;\n    }\n    return count;\n}\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    foreach(char c in string)\n    {\n        count += 1;\n    }\n   \
    \ return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    foreach(char c in string)\n    {\n   \
    \     count += 1;\n    }\n    return count;\n}\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    foreach(char c in string)\n    {\n        count += 1;\n    }\n   \
    \ return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    foreach(char c in string)\n    {\n   \
    \     count += 1;\n    }\n    return count;\n}\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    foreach(char c in string)\n    {\n        count += 1;\n    }\n   \
    \ return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    foreach(char c in string)\n    {\n   \
    \     count += 1;\n    }\n    return count;\n}\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    foreach\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqxk1go2s.d(10): Error: found `in` when expecting `;`

    /tmp/tmpqxk1go2s.d(23): Error: found `in` when expecting `;`

    /tmp/tmpqxk1go2s.d(36): Error: found `in` when expecting `;`

    /tmp/tmpqxk1go2s.d(49): Error: found `in` when expecting `;`

    /tmp/tmpqxk1go2s.d(62): Error: found `in` when expecting `;`

    /tmp/tmpqxk1go2s.d(75): Error: found `in` when expecting `;`

    /tmp/tmpqxk1go2s.d(88): Error: found `in` when expecting `;`

    /tmp/tmpqxk1go2s.d(101): Error: found `in` when expecting `;`

    /tmp/tmpqxk1go2s.d(115): Error: found `unittest` when expecting `(`

    /tmp/tmpqxk1go2s.d(116): Error: basic type expected, not `{`

    /tmp/tmpqxk1go2s.d(116): Error: no identifier for declarator `_error_`

    /tmp/tmpqxk1go2s.d(116): Error: found `{` when expecting `;`

    /tmp/tmpqxk1go2s.d(117): Error: expression expected, not `alias`

    /tmp/tmpqxk1go2s.d(117): Error: found `candidate` when expecting `)`

    /tmp/tmpqxk1go2s.d(117): Error: found `=` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqxk1go2s.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n\tlong count\
    \ = 0;\n\tfor(int i = 0; i < string.length(); i++)\n\t{\n\t\tchar c = string[i];\n\
    \t\tfor(int j = 0; j < string.length(); j++)\n\t\t{\n\t\t\tchar d = string[j];\n\
    \t\t\tif(c != d)\n\t\t\t{\n\t\t\t\tif(c >= 'a' && c <= 'z')\n\t\t\t\t{\n\t\t\t\
    \t\tif(d >= 'a' && d <= 'z')\n\t\t\t\t\t{\n\t\t\t\t\t\tif(d >= 'A' && d <= 'Z')\n\
    \t\t\t\t\t\t{\n\t\t\t\t\t\t\tcount++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\
    \t\t\t\telse if(c >= 'A' && c <= 'Z')\n\t\t\t\t{\n\t\t\t\t\tif(d >= 'a' && d <=\
    \ 'z')\n\t\t\t\t\t{\n\t\t\t\t\t\tif(d >= 'A' && d <= 'Z')\n\t\t\t\t\t\t{\n\t\t\
    \t\t\t\t\tcount++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\
    }\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp92__hc6q.d(10): Error: no property `length` for type `string`

    /tmp/tmp92__hc6q.d(13): Error: no property `length` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp92__hc6q.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164659
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = i+1; j < string.length(); j++)\n        {\n\
    \            char d = string[j];\n            if(c != d)\n            {\n    \
    \            count++;\n                break;\n            }\n        }\n    }\n\
    \    return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = i+1; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                count++;\n                break;\n            }\n\
    \        }\n    }\n    return count;\n}\n/*\n Given a string, find out how many\
    \ distinct characters (regardless of case) does it consist of\n            \n\
    */\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n\
    \        for(int j = i+1; j < string.length(); j++)\n        {\n            char\
    \ d = string[j];\n            if(c != d)\n            {\n                count++;\n\
    \                break;\n            }\n        }\n    }\n    return count;\n\
    }\n/*\n Given a string, find out how many distinct characters (regardless of case)\
    \ does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = i+1; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                count++;\n                break;\n            }\n\
    \        }\n    }\n    return count;\n}\n/*\n Given a string, find out how many\
    \ distinct characters (regardless of case) does it consist of\n            \n\
    */\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n\
    \        for(int j = i+1; j < string.length(); j++)\n        {\n            char\
    \ d = string[j];\n            if(c != d)\n            {\n                count++;\n\
    \                break;\n            }\n        }\n    }\n    return count;\n\
    }\n/*\n Given a string, find out how many distinct characters (regardless of case)\
    \ does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ \nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdokr2qqc.d(118): Error: found `unittest` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdokr2qqc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n\tlong count\
    \ = 0;\n\tfor (int i = 0; i < string.length(); i++)\n\t{\n\t\tchar c = string[i];\n\
    \t\tfor (int j = 0; j < string.length(); j++)\n\t\t{\n\t\t\tif (i == j)\n\t\t\t\
    \tcontinue;\n\t\t\tchar d = string[j];\n\t\t\tif (c != d)\n\t\t\t\tbreak;\n\t\t\
    }\n\t\tcount++;\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgz28hpz2.d(10): Error: no property `length` for type `string`

    /tmp/tmpgz28hpz2.d(13): Error: no property `length` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgz28hpz2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n\tlong count\
    \ = 0;\n\tfor (int i = 0; i < string.length(); i++)\n\t{\n\t\tchar c = string[i];\n\
    \t\tfor (int j = 0; j < string.length(); j++)\n\t\t{\n\t\t\tif (i == j)\n\t\t\t\
    \tcontinue;\n\t\t\tchar d = string[j];\n\t\t\tif (c != d)\n\t\t\t\tbreak;\n\t\t\
    }\n\t\tcount++;\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgz28hpz2.d(10): Error: no property `length` for type `string`

    /tmp/tmpgz28hpz2.d(13): Error: no property `length` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgz28hpz2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        if(!std.isAlpha(c))\n        {\n            count++;\n \
    \       }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu7028l9o.d(10): Error: no property `length` for type `string`

    /tmp/tmpu7028l9o.d(13): Error: undefined identifier `isAlpha` in package `std`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu7028l9o.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n\tlong count\
    \ = 0;\n\tfor (int i = 0; i < string.length(); i++)\n\t{\n\t\tchar c = string[i];\n\
    \t\tfor (int j = 0; j < string.length(); j++)\n\t\t{\n\t\t\tif (i == j)\n\t\t\t\
    \tcontinue;\n\t\t\tchar d = string[j];\n\t\t\tif (c != d)\n\t\t\t\tbreak;\n\t\t\
    \tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate =\
    \ count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"\
    abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"\
    aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4td_zakk.d(10): Error: no property `length` for type `string`

    /tmp/tmp4td_zakk.d(13): Error: no property `length` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4td_zakk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164659
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        for(int j\
    \ = 0; j < string.length(); j++)\n        {\n            if(string[i] == string[j])\n\
    \            {\n                count++;\n            }\n        }\n    }\n  \
    \  return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        for(int j = 0; j < string.length(); j++)\n        {\n        \
    \    if(string[i] == string[j])\n            {\n                count++;\n   \
    \         }\n        }\n    }\n    return count;\n}\n/*\n Given a string, find\
    \ out how many distinct characters (regardless of case) does it consist of\n \
    \           \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        for(int\
    \ j = 0; j < string.length(); j++)\n        {\n            if(string[i] == string[j])\n\
    \            {\n                count++;\n            }\n        }\n    }\n  \
    \  return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        for(int j = 0; j < string.length(); j++)\n        {\n        \
    \    if(string[i] == string[j])\n            {\n                count++;\n   \
    \         }\n        }\n    }\n    return count;\n}\n/*\n Given a string, find\
    \ out how many distinct characters (regardless of case) does it consist of\n \
    \           \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        for(int\
    \ j = 0; j < string.length(); j++)\n        {\n            if(string[i] == string[j])\n\
    \            {\n                count++;\n            }\n        }\n    }\n  \
    \  return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        for(int j = 0; j < string.length(); j++)\n        {\n        \
    \    if(string[i] == string[j])\n            {\n                count++;\n   \
    \         }\n        }\n    }\n    return count;\n}\n/*\n Given a string, find\
    \ out how many distinct characters (regardless of case) does it consist of\n \
    \           \n*/\nlong count_distinct_characters(\nunittest\n{\n    alias candidate\
    \ = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"\
    abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"\
    aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplhoa8_qw.d(122): Error: basic type expected, not `unittest`

    /tmp/tmplhoa8_qw.d(122): Error: found `unittest` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplhoa8_qw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n  \
    \          char d = string[j];\n            if(c != d)\n            {\n      \
    \          break;\n            }\n        }\n        count++;\n    }\n    return\
    \ count;\n}\n/*\n Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n        }\n        count++;\n\
    \    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n        }\n        count++;\n\
    \    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n        }\n        count++;\n\
    \    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n        }\n        count++;\n\
    \    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        \nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppruzgbaf.d(123): Error: found `unittest` instead of statement

    /tmp/tmppruzgbaf.d(133): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppruzgbaf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n  \
    \          if(c == string[j])\n            {\n                count++;\n     \
    \           break;\n            }\n        }\n    }\n    return count;\n}\n/*\n\
    \ Given a string, find out how many distinct characters (regardless of case) does\
    \ it consist of\n            \n*/\nlong count_distinct_characters(string string)\
    \ \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n   \
    \ {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            if(c == string[j])\n            {\n           \
    \     count++;\n                break;\n            }\n        }\n    }\n    return\
    \ count;\n}\n/*\n Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            if(c == string[j])\n            {\n           \
    \     count++;\n                break;\n            }\n        }\n    }\n    return\
    \ count;\n}\n/*\n Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            if(c == string[j])\n            {\n           \
    \     count++;\n                break;\n            }\n        }\n    }\n    return\
    \ count;\n}\n/*\n Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            if(c == string[j])\n            {\n           \
    \     count++;\n                break;\n            }\n        }\n    }\n    return\
    \ count;\n}\n/*\n Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            if(c == \nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpblc4sai5.d(121): Error: expression expected, not `unittest`

    /tmp/tmpblc4sai5.d(122): Error: found `{` when expecting `)`

    /tmp/tmpblc4sai5.d(131): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmpblc4sai5.d(131): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpblc4sai5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n  \
    \          char d = string[j];\n            if(c != d)\n            {\n      \
    \          break;\n            }\n            else\n            {\n          \
    \      count++;\n            }\n        }\n    }\n    return count;\n}\n/*\n Given\
    \ a string, find out how many distinct characters (regardless of case) does it\
    \ consist of\n            \n*/\nlong count_distinct_characters(string string)\
    \ \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n   \
    \ {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n            else\n     \
    \       {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}\n/*\n Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n            else\n     \
    \       {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}\n/*\n Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n            else\n     \
    \       {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}\n/*\n Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n            else\n     \
    \       {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}\n/*\n Given a string, find out how many distinct characters (regardles\n\
    unittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0nmwvt12.d(128): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0nmwvt12.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string.at(i);\n        if(!std.typecons.isLower(c))\n        {\n           \
    \ count++;\n        }\n    }\n    return count;\n}\n/*\n Given a string, find\
    \ out how many distinct characters (regardless of case) does it consist of\n \
    \           \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char\
    \ c = string.at(i);\n        if(!std.typecons.isLower(c))\n        {\n       \
    \     count++;\n        }\n    }\n    return count;\n}\n/*\n Given a string, find\
    \ out how many distinct characters (regardless of case) does it consist of\n \
    \           \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char\
    \ c = string.at(i);\n        if(!std.typecons.isLower(c))\n        {\n       \
    \     count++;\n        }\n    }\n    return count;\n}\n/*\n Given a string, find\
    \ out how many distinct characters (regardless of case) does it consist of\n \
    \           \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char\
    \ c = string.at(i);\n        if(!std.typecons.isLower(c))\n        {\n       \
    \     count++;\n        }\n    }\n    return count;\n}\n/*\n Given a string, find\
    \ out how many distinct characters (regardless of case) does it consist of\n \
    \           \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char\
    \ c = string.at(i);\n        if(!std.typecons.isLower(c))\n        {\n       \
    \     count++;\n        }\n    }\n    return count;\n}\n/*\n Given a string, find\
    \ out how many distinct characters (regardless of case) does it consist of\n \
    \           \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char\
    \ c = string.at(i);\n        if(!std.typecons.isLower(c))\n        {\n       \
    \     count++;\n        }\n    }\n    return count;\n}\n/*\n Given a string, find\
    \ out how many distinct characters (regardless of case) does it consist of\n \
    \           \n*/\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpuhgo81fr.d(10): Error: no property `length` for type `string`

    /tmp/tmpuhgo81fr.d(12): Error: no property `at` for type `string`

    /tmp/tmpuhgo81fr.d(13): Error: undefined identifier `isLower` in module `std.typecons`

    /tmp/tmpuhgo81fr.d(27): Error: no property `length` for type `string`

    /tmp/tmpuhgo81fr.d(29): Error: no property `at` for type `string`

    /tmp/tmpuhgo81fr.d(30): Error: undefined identifier `isLower` in module `std.typecons`

    /tmp/tmpuhgo81fr.d(44): Error: no property `length` for type `string`

    /tmp/tmpuhgo81fr.d(46): Error: no property `at` for type `string`

    /tmp/tmpuhgo81fr.d(47): Error: undefined identifier `isLower` in module `std.typecons`

    /tmp/tmpuhgo81fr.d(61): Error: no property `length` for type `string`

    /tmp/tmpuhgo81fr.d(63): Error: no property `at` for type `string`

    /tmp/tmpuhgo81fr.d(64): Error: undefined identifier `isLower` in module `std.typecons`

    /tmp/tmpuhgo81fr.d(78): Error: no property `length` for type `string`

    /tmp/tmpuhgo81fr.d(80): Error: no property `at` for type `stri'
  stdout: ''
  timestamp: 1660164659
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        if(!std.typecons.isUpper(c))\n        {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjw2m5u4g.d(10): Error: no property `length` for type `string`

    /tmp/tmpjw2m5u4g.d(13): Error: undefined identifier `isUpper` in module `std.typecons`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjw2m5u4g.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n  \
    \          char d = string[j];\n            if(c != d)\n            {\n      \
    \          break;\n            }\n        }\n        count++;\n    }\n    return\
    \ count;\n}\n/*\n Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n        }\n        count++;\n\
    \    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n        }\n        count++;\n\
    \    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n        }\n        count++;\n\
    \    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n        }\n        count++;\n\
    \    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        \nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppruzgbaf.d(123): Error: found `unittest` instead of statement

    /tmp/tmppruzgbaf.d(133): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppruzgbaf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = i+1; j < string.length(); j++)\n        {\n\
    \            char d = string[j];\n            if(c != d)\n            {\n    \
    \            count++;\n                break;\n            }\n        }\n    }\n\
    \    return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = i+1; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                count++;\n                break;\n            }\n\
    \        }\n    }\n    return count;\n}\n/*\n Given a string, find out how many\
    \ distinct characters (regardless of case) does it consist of\n            \n\
    */\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n\
    \        for(int j = i+1; j < string.length(); j++)\n        {\n            char\
    \ d = string[j];\n            if(c != d)\n            {\n                count++;\n\
    \                break;\n            }\n        }\n    }\n    return count;\n\
    }\n/*\n Given a string, find out how many distinct characters (regardless of case)\
    \ does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = i+1; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                count++;\n                break;\n            }\n\
    \        }\n    }\n    return count;\n}\n/*\n Given a string, find out how many\
    \ distinct characters (regardless of case) does it consist of\n            \n\
    */\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n\
    \        for(int j = i+1; j < string.length(); j++)\n        {\n            char\
    \ d = string[j];\n            if(c != d)\n            {\n                count++;\n\
    \                break;\n            }\n        }\n    }\n    return count;\n\
    }\n/*\n Given a string, find out how many distinct characters (regardless of case)\
    \ does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ \nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpdokr2qqc.d(118): Error: found `unittest` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpdokr2qqc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n\tlong count\
    \ = 0;\n\tfor (int i = 0; i < string.length(); i++)\n\t{\n\t\tchar c = string[i];\n\
    \t\tfor (int j = 0; j < string.length(); j++)\n\t\t{\n\t\t\tif (i == j)\n\t\t\t\
    \tcontinue;\n\t\t\tchar d = string[j];\n\t\t\tif (c != d)\n\t\t\t\tbreak;\n\t\t\
    \telse\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias\
    \ candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n\
    \    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\"\
    ) == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"\
    Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpif1k_riw.d(10): Error: no property `length` for type `string`

    /tmp/tmpif1k_riw.d(13): Error: no property `length` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpif1k_riw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164659
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        if(!std.isAlpha(c))\n        {\n            count++;\n \
    \       }\n    }\n    return count;\n}\n/*\n Given a string, find out how many\
    \ distinct characters (regardless of case) does it consist of\n            \n\
    */\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n\
    \        if(!std.isAlpha(c))\n        {\n            count++;\n        }\n   \
    \ }\n    return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        if(!std.isAlpha(c))\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}\n/*\n Given a string,\
    \ find out how many distinct characters (regardless of case) does it consist of\n\
    \            \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char\
    \ c = string[i];\n        if(!std.isAlpha(c))\n        {\n            count++;\n\
    \        }\n    }\n    return count;\n}\n/*\n Given a string, find out how many\
    \ distinct characters (regardless of case) does it consist of\n            \n\
    */\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n\
    \        if(!std.isAlpha(c))\n        {\n            count++;\n        }\n   \
    \ }\n    return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        if(!std.isAlpha(c))\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}\n/*\n Given a string,\
    \ find out how many distinct characters (regardless of case) does it consist of\n\
    \            \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char\
    \ c = string\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n\
    \    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4uglfjre.d(115): Error: semicolon expected, not `unittest`

    /tmp/tmp4uglfjre.d(115): Error: found `unittest` instead of statement

    /tmp/tmp4uglfjre.d(125): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4uglfjre.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = i; j < string.length(); j++)\n        {\n  \
    \          char d = string[j];\n            if(c != d)\n            {\n      \
    \          count++;\n                break;\n            }\n        }\n    }\n\
    \    return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = i; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                count++;\n                break;\n            }\n\
    \        }\n    }\n    return count;\n}\n/*\n Given a string, find out how many\
    \ distinct characters (regardless of case) does it consist of\n            \n\
    */\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n\
    \        for(int j = i; j < string.length(); j++)\n        {\n            char\
    \ d = string[j];\n            if(c != d)\n            {\n                count++;\n\
    \                break;\n            }\n        }\n    }\n    return count;\n\
    }\n/*\n Given a string, find out how many distinct characters (regardless of case)\
    \ does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = i; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                count++;\n                break;\n            }\n\
    \        }\n    }\n    return count;\n}\n/*\n Given a string, find out how many\
    \ distinct characters (regardless of case) does it consist of\n            \n\
    */\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n\
    \        for(int j = i; j < string.length(); j++)\n        {\n            char\
    \ d = string[j];\n            if(c != d)\n            {\n                count++;\n\
    \                break;\n            }\n        }\n    }\n    return count;\n\
    }\n/*\n Given a string, find out how many distinct characters (regardless of case)\
    \ does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ \nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6j2c5rrj.d(118): Error: found `unittest` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6j2c5rrj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        if(!std.isAlpha(c))\n        {\n            count++;\n \
    \       }\n    }\n    return count;\n}\n/*\n Given a string, find out how many\
    \ distinct characters (regardless of case) does it consist of\n            \n\
    */\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n\
    \        if(!std.isAlpha(c))\n        {\n            count++;\n        }\n   \
    \ }\n    return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        if(!std.isAlpha(c))\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}\n/*\n Given a string,\
    \ find out how many distinct characters (regardless of case) does it consist of\n\
    \            \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char\
    \ c = string[i];\n        if(!std.isAlpha(c))\n        {\n            count++;\n\
    \        }\n    }\n    return count;\n}\n/*\n Given a string, find out how many\
    \ distinct characters (regardless of case) does it consist of\n            \n\
    */\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n\
    \        if(!std.isAlpha(c))\n        {\n            count++;\n        }\n   \
    \ }\n    return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        if(!std.isAlpha(c))\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}\n/*\n Given a string,\
    \ find out how many distinct characters (regardless of case) does it consist of\n\
    \            \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char\
    \ c = string\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n\
    \    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4uglfjre.d(115): Error: semicolon expected, not `unittest`

    /tmp/tmp4uglfjre.d(115): Error: found `unittest` instead of statement

    /tmp/tmp4uglfjre.d(125): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4uglfjre.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n  \
    \          char d = string[j];\n            if(c != d)\n            {\n      \
    \          break;\n            }\n        }\n        count++;\n    }\n    return\
    \ count;\n}\n/*\n Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n        }\n        count++;\n\
    \    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n        }\n        count++;\n\
    \    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n        }\n        count++;\n\
    \    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n        }\n        count++;\n\
    \    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        \nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppruzgbaf.d(123): Error: found `unittest` instead of statement

    /tmp/tmppruzgbaf.d(133): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppruzgbaf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        if(!std.isAlpha(c))\n        {\n            count++;\n \
    \       }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu7028l9o.d(10): Error: no property `length` for type `string`

    /tmp/tmpu7028l9o.d(13): Error: undefined identifier `isAlpha` in package `std`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu7028l9o.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        for(int j\
    \ = 0; j < string.length(); j++)\n        {\n            if(i != j)\n        \
    \    {\n                if(string[i] == string[j])\n                {\n      \
    \              count++;\n                }\n            }\n        }\n    }\n\
    \    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpo224modz.d(10): Error: no property `length` for type `string`

    /tmp/tmpo224modz.d(12): Error: no property `length` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo224modz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164659
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        if(!std.typecons.isUpper(c))\n        {\n            count++;\n\
    \        }\n    }\n    return count;\n}\n/*\n Given a string, find out how many\
    \ distinct characters (regardless of case) does it consist of\n            \n\
    */\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n\
    \        if(!std.typecons.isUpper(c))\n        {\n            count++;\n     \
    \   }\n    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        if(!std.typecons.isUpper(c))\n  \
    \      {\n            count++;\n        }\n    }\n    return count;\n}\n/*\n Given\
    \ a string, find out how many distinct characters (regardless of case) does it\
    \ consist of\n            \n*/\nlong count_distinct_characters(string string)\
    \ \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n   \
    \ {\n        char c = string[i];\n        if(!std.typecons.isUpper(c))\n     \
    \   {\n            count++;\n        }\n    }\n    return count;\n}\n/*\n Given\
    \ a string, find out how many distinct characters (regardless of case) does it\
    \ consist of\n            \n*/\nlong count_distinct_characters(string string)\
    \ \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n   \
    \ {\n        char c = string[i];\n        if(!std.typecons.isUpper(c))\n     \
    \   {\n            count++;\n        }\n    }\n    return count;\n}\n/*\n Given\
    \ a string, find out how many distinct characters (regardless of case) does it\
    \ consist of\n            \n*/\nlong count_distinct_characters(string string)\
    \ \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n   \
    \ {\n        char c = string[i];\n        if(!std.typecons.isUpper(c))\n     \
    \   {\n            count++;\n        }\n    }\n    return count;\n}\n/*\n Given\
    \ a string, find out how many distinct characters (regardless of case) does it\
    \ consist of\n            \n*/\nlong count_distinct_characters(string string)\
    \ \n{\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n   \
    \ assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n  \
    \  assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu08q3yo_.d(112): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu08q3yo_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    foreach(char c in string)\n    {\n        if(!std.isLower(c))\n  \
    \          count++;\n    }\n    return count;\n}\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    foreach(char c in string)\n    {\n        if(!std.isLower(c))\n  \
    \          count++;\n    }\n    return count;\n}\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    foreach(char c in string)\n    {\n        if(!std.isLower(c))\n  \
    \          count++;\n    }\n    return count;\n}\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    foreach(char c in string)\n    {\n        if(!std.isLower(c))\n  \
    \          count++;\n    }\n    return count;\n}\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    foreach(char c in string)\n    {\n        if(!std.isLower(c))\n  \
    \          count++;\n    }\n    return count;\n}\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    foreach(char c in string)\n    {\n        if(!std.isLower(c))\n  \
    \          count++;\n    }\n    return count;\n}\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    foreach(char c in string)\n    {\n        if(!std.isLower(c))\n  \
    \          count++;\n    }\n    return count;\n}\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    foreach\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphh30ki5c.d(10): Error: found `in` when expecting `;`

    /tmp/tmphh30ki5c.d(24): Error: found `in` when expecting `;`

    /tmp/tmphh30ki5c.d(38): Error: found `in` when expecting `;`

    /tmp/tmphh30ki5c.d(52): Error: found `in` when expecting `;`

    /tmp/tmphh30ki5c.d(66): Error: found `in` when expecting `;`

    /tmp/tmphh30ki5c.d(80): Error: found `in` when expecting `;`

    /tmp/tmphh30ki5c.d(94): Error: found `in` when expecting `;`

    /tmp/tmphh30ki5c.d(109): Error: found `unittest` when expecting `(`

    /tmp/tmphh30ki5c.d(110): Error: basic type expected, not `{`

    /tmp/tmphh30ki5c.d(110): Error: no identifier for declarator `_error_`

    /tmp/tmphh30ki5c.d(110): Error: found `{` when expecting `;`

    /tmp/tmphh30ki5c.d(111): Error: expression expected, not `alias`

    /tmp/tmphh30ki5c.d(111): Error: found `candidate` when expecting `)`

    /tmp/tmphh30ki5c.d(111): Error: found `=` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphh30ki5c.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164659
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    foreach(char c in string)\n    {\n        if(!std.isAlpha(c))\n  \
    \      {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_6u6nj0u.d(10): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_6u6nj0u.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n        char\
    \ c = string[i];\n        \n        for(int j = 0; j < string.length(); j++)\n\
    \        {\n            char d = string[j];\n            \n            if(c !=\
    \ d)\n            {\n                break;\n            }\n            \n   \
    \         count++;\n        }\n    }\n    \n    return count;\n}\nunittest\n{\n\
    \    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\"\
    ) == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\"\
    ) == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"\
    Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_y1yin2b.d(11): Error: no property `length` for type `string`

    /tmp/tmp_y1yin2b.d(15): Error: no property `length` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_y1yin2b.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n\tlong count\
    \ = 0;\n\tfor (int i = 0; i < string.length(); i++)\n\t{\n\t\tchar c = string.at(i);\n\
    \t\tfor (int j = 0; j < string.length(); j++)\n\t\t{\n\t\t\tif (string.at(j) ==\
    \ c)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn\
    \ count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n\
    \    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpugpll28c.d(10): Error: no property `length` for type `string`

    /tmp/tmpugpll28c.d(12): Error: no property `at` for type `string`

    /tmp/tmpugpll28c.d(13): Error: no property `length` for type `string`

    /tmp/tmpugpll28c.d(15): Error: no property `at` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpugpll28c.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164659
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n  \
    \          char d = string[j];\n            if(c != d)\n            {\n      \
    \          break;\n            }\n        }\n        count++;\n    }\n    return\
    \ count;\n}\n/*\n Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n        }\n        count++;\n\
    \    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n        }\n        count++;\n\
    \    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n        }\n        count++;\n\
    \    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n        }\n        count++;\n\
    \    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        \nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppruzgbaf.d(123): Error: found `unittest` instead of statement

    /tmp/tmppruzgbaf.d(133): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppruzgbaf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        for(int j\
    \ = 0; j < string.length(); j++)\n        {\n            if(string[i] == string[j])\n\
    \            {\n                count++;\n            }\n        }\n    }\n  \
    \  return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        for(int j = 0; j < string.length(); j++)\n        {\n        \
    \    if(string[i] == string[j])\n            {\n                count++;\n   \
    \         }\n        }\n    }\n    return count;\n}\n/*\n Given a string, find\
    \ out how many distinct characters (regardless of case) does it consist of\n \
    \           \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        for(int\
    \ j = 0; j < string.length(); j++)\n        {\n            if(string[i] == string[j])\n\
    \            {\n                count++;\n            }\n        }\n    }\n  \
    \  return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        for(int j = 0; j < string.length(); j++)\n        {\n        \
    \    if(string[i] == string[j])\n            {\n                count++;\n   \
    \         }\n        }\n    }\n    return count;\n}\n/*\n Given a string, find\
    \ out how many distinct characters (regardless of case) does it consist of\n \
    \           \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        for(int\
    \ j = 0; j < string.length(); j++)\n        {\n            if(string[i] == string[j])\n\
    \            {\n                count++;\n            }\n        }\n    }\n  \
    \  return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        for(int j = 0; j < string.length(); j++)\n        {\n        \
    \    if(string[i] == string[j])\n            {\n                count++;\n   \
    \         }\n        }\n    }\n    return count;\n}\n/*\n Given a string, find\
    \ out how many distinct characters (regardless of case) does it consist of\n \
    \           \n*/\nlong count_distinct_characters(\nunittest\n{\n    alias candidate\
    \ = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"\
    abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"\
    aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplhoa8_qw.d(122): Error: basic type expected, not `unittest`

    /tmp/tmplhoa8_qw.d(122): Error: found `unittest` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplhoa8_qw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = i+1; j < string.length(); j++)\n        {\n\
    \            if(string[j] == c)\n            {\n                count++;\n   \
    \             break;\n            }\n        }\n    }\n    return count;\n}\n\
    unittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpd4ycj0ru.d(10): Error: no property `length` for type `string`

    /tmp/tmpd4ycj0ru.d(13): Error: no property `length` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd4ycj0ru.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    foreach(char c in string)\n    {\n        count += 1;\n    }\n   \
    \ return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    foreach(char c in string)\n    {\n   \
    \     count += 1;\n    }\n    return count;\n}\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    foreach(char c in string)\n    {\n        count += 1;\n    }\n   \
    \ return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    foreach(char c in string)\n    {\n   \
    \     count += 1;\n    }\n    return count;\n}\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    foreach(char c in string)\n    {\n        count += 1;\n    }\n   \
    \ return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    foreach(char c in string)\n    {\n   \
    \     count += 1;\n    }\n    return count;\n}\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    foreach(char c in string)\n    {\n        count += 1;\n    }\n   \
    \ return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    foreach(char c in string)\n    {\n   \
    \     count += 1;\n    }\n    return count;\n}\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    foreach\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqxk1go2s.d(10): Error: found `in` when expecting `;`

    /tmp/tmpqxk1go2s.d(23): Error: found `in` when expecting `;`

    /tmp/tmpqxk1go2s.d(36): Error: found `in` when expecting `;`

    /tmp/tmpqxk1go2s.d(49): Error: found `in` when expecting `;`

    /tmp/tmpqxk1go2s.d(62): Error: found `in` when expecting `;`

    /tmp/tmpqxk1go2s.d(75): Error: found `in` when expecting `;`

    /tmp/tmpqxk1go2s.d(88): Error: found `in` when expecting `;`

    /tmp/tmpqxk1go2s.d(101): Error: found `in` when expecting `;`

    /tmp/tmpqxk1go2s.d(115): Error: found `unittest` when expecting `(`

    /tmp/tmpqxk1go2s.d(116): Error: basic type expected, not `{`

    /tmp/tmpqxk1go2s.d(116): Error: no identifier for declarator `_error_`

    /tmp/tmpqxk1go2s.d(116): Error: found `{` when expecting `;`

    /tmp/tmpqxk1go2s.d(117): Error: expression expected, not `alias`

    /tmp/tmpqxk1go2s.d(117): Error: found `candidate` when expecting `)`

    /tmp/tmpqxk1go2s.d(117): Error: found `=` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqxk1go2s.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n  \
    \          char d = string[j];\n            if(c != d)\n            {\n      \
    \          break;\n            }\n        }\n        count++;\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n\
    \    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmxt3pnzo.d(10): Error: no property `length` for type `string`

    /tmp/tmpmxt3pnzo.d(13): Error: no property `length` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmxt3pnzo.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        for(int j\
    \ = 0; j < string.length(); j++)\n        {\n            if(string[i] == string[j])\n\
    \            {\n                count++;\n            }\n        }\n    }\n  \
    \  return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        for(int j = 0; j < string.length(); j++)\n        {\n        \
    \    if(string[i] == string[j])\n            {\n                count++;\n   \
    \         }\n        }\n    }\n    return count;\n}\n/*\n Given a string, find\
    \ out how many distinct characters (regardless of case) does it consist of\n \
    \           \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        for(int\
    \ j = 0; j < string.length(); j++)\n        {\n            if(string[i] == string[j])\n\
    \            {\n                count++;\n            }\n        }\n    }\n  \
    \  return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        for(int j = 0; j < string.length(); j++)\n        {\n        \
    \    if(string[i] == string[j])\n            {\n                count++;\n   \
    \         }\n        }\n    }\n    return count;\n}\n/*\n Given a string, find\
    \ out how many distinct characters (regardless of case) does it consist of\n \
    \           \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        for(int\
    \ j = 0; j < string.length(); j++)\n        {\n            if(string[i] == string[j])\n\
    \            {\n                count++;\n            }\n        }\n    }\n  \
    \  return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        for(int j = 0; j < string.length(); j++)\n        {\n        \
    \    if(string[i] == string[j])\n            {\n                count++;\n   \
    \         }\n        }\n    }\n    return count;\n}\n/*\n Given a string, find\
    \ out how many distinct characters (regardless of case) does it consist of\n \
    \           \n*/\nlong count_distinct_characters(\nunittest\n{\n    alias candidate\
    \ = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"\
    abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"\
    aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplhoa8_qw.d(122): Error: basic type expected, not `unittest`

    /tmp/tmplhoa8_qw.d(122): Error: found `unittest` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplhoa8_qw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        if(!std.isAlpha(c))\n        {\n            count += 1;\n\
    \        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpc5blulss.d(10): Error: no property `length` for type `string`

    /tmp/tmpc5blulss.d(13): Error: undefined identifier `isAlpha` in package `std`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc5blulss.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n  \
    \          char d = string[j];\n            if(c != d)\n            {\n      \
    \          count++;\n                break;\n            }\n        }\n    }\n\
    \    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5netj2z9.d(10): Error: no property `length` for type `string`

    /tmp/tmp5netj2z9.d(13): Error: no property `length` for type `string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5netj2z9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        if(!std.typecons.isUpper(c))\n        {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjw2m5u4g.d(10): Error: no property `length` for type `string`

    /tmp/tmpjw2m5u4g.d(13): Error: undefined identifier `isUpper` in module `std.typecons`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjw2m5u4g.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164658
