language: d
name: HumanEval_16_count_distinct_characters
results:
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n        char\
    \ c = string[i];\n        \n        for(int j = 0; j < string.length(); j++)\n\
    \        {\n            char d = string[j];\n            \n            if(c !=\
    \ d)\n            {\n                break;\n            }\n        }\n      \
    \  \n        count++;\n    }\n    \n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n\
    \    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\"\
    ) == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"\
    Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6i10ibp5.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n\tlong count\
    \ = 0;\n\tfor (int i = 0; i < string.length(); i++)\n\t{\n\t\tchar c = string[i];\n\
    \t\tfor (int j = 0; j < string.length(); j++)\n\t\t{\n\t\t\tif (i != j)\n\t\t\t\
    {\n\t\t\t\tif (string[i] == string[j])\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t\
    \tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n  \
    \  alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\")\
    \ == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\"\
    ) == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"\
    Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfrm1nh0w.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n  \
    \          char d = string[j];\n            if(c == d)\n            {\n      \
    \          count++;\n                break;\n            }\n        }\n    }\n\
    \    return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c == d)\n \
    \           {\n                count++;\n                break;\n            }\n\
    \        }\n    }\n    return count;\n}\n/*\n Given a string, find out how many\
    \ distinct characters (regardless of case) does it consist of\n            \n\
    */\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n\
    \        for(int j = 0; j < string.length(); j++)\n        {\n            char\
    \ d = string[j];\n            if(c == d)\n            {\n                count++;\n\
    \                break;\n            }\n        }\n    }\n    return count;\n\
    }\n/*\n Given a string, find out how many distinct characters (regardless of case)\
    \ does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c == d)\n \
    \           {\n                count++;\n                break;\n            }\n\
    \        }\n    }\n    return count;\n}\n/*\n Given a string, find out how many\
    \ distinct characters (regardless of case) does it consist of\n            \n\
    */\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n\
    \        for(int j = 0; j < string.length(); j++)\n        {\n            char\
    \ d = string[j];\n            if(c == d)\n            {\n                count++;\n\
    \                break;\n            }\n        }\n    }\n    return count;\n\
    }\n/*\n Given a string, find out how many distinct characters (regardless of case)\
    \ does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    \nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp56kdwt98.d(121): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp56kdwt98.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n\tlong count\
    \ = 0;\n\tfor (int i = 0; i < string.length(); i++)\n\t{\n\t\tchar c = string[i];\n\
    \t\tfor (int j = 0; j < string.length(); j++)\n\t\t{\n\t\t\tchar d = string[j];\n\
    \t\t\tif (c == d)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\
    \t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7b76b8n0.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n  \
    \          char d = string[j];\n            if(c != d)\n            {\n      \
    \          break;\n            }\n        }\n        count++;\n    }\n    return\
    \ count;\n}\n/*\n Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n        }\n        count++;\n\
    \    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n        }\n        count++;\n\
    \    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n        }\n        count++;\n\
    \    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n        }\n        count++;\n\
    \    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        \nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpmg83rxa_.d(123): Error: found \''unittest\'' instead of statement\n/tmp/tmpmg83rxa_.d(133):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmg83rxa_.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n\tlong count\
    \ = 0;\n\tfor (int i = 0; i < string.length(); i++)\n\t{\n\t\tchar c = string[i];\n\
    \t\tfor (int j = 0; j < string.length(); j++)\n\t\t{\n\t\t\tif (i != j && string[i]\
    \ == string[j])\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tcount += 1;\n\t\
    }\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkrrql9kr.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        if(!std.isLower(c))\n            count++;\n    }\n    return\
    \ count;\n}\n/*\n Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        if(!std.isLower(c))\n           \
    \ count++;\n    }\n    return count;\n}\n/*\n Given a string, find out how many\
    \ distinct characters (regardless of case) does it consist of\n            \n\
    */\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n\
    \        if(!std.isLower(c))\n            count++;\n    }\n    return count;\n\
    }\n/*\n Given a string, find out how many distinct characters (regardless of case)\
    \ does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        if(!std.isLower(c))\n           \
    \ count++;\n    }\n    return count;\n}\n/*\n Given a string, find out how many\
    \ distinct characters (regardless of case) does it consist of\n            \n\
    */\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n\
    \        if(!std.isLower(c))\n            count++;\n    }\n    return count;\n\
    }\n/*\n Given a string, find out how many distinct characters (regardless of case)\
    \ does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        if(!std.isLower(c))\n           \
    \ count++;\n    }\n    return count;\n}\n/*\n Given a string, find out how many\
    \ distinct characters (regardless of case) does it consist of\n            \n\
    */\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n\
    \        if(!std.isLower(c))\n            count++;\n    }\n\nunittest\n{\n   \
    \ alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") ==\
    \ 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\"\
    ) == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"\
    Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpsa_vhivd.d(107): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsa_vhivd.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n  \
    \          char d = string[j];\n            if(c != d)\n            {\n      \
    \          break;\n            }\n        }\n        count++;\n    }\n    return\
    \ count;\n}\n/*\n Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n        }\n        count++;\n\
    \    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n        }\n        count++;\n\
    \    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n        }\n        count++;\n\
    \    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n        }\n        count++;\n\
    \    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        \nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpmg83rxa_.d(123): Error: found \''unittest\'' instead of statement\n/tmp/tmpmg83rxa_.d(133):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmg83rxa_.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n  \
    \          char d = string[j];\n            if(c != d)\n            {\n      \
    \          break;\n            }\n        }\n        count++;\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n\
    \    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy70wsggc.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        if(!std.typecons.isUppercase(c))\n        {\n          \
    \  count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"\
    abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"\
    aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp95c2dkgc.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        if(!std.typecons.isUpper(c))\n            count++;\n   \
    \ }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyad47kgl.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n\tlong count\
    \ = 0;\n\tfor(int i = 0; i < string.length(); i++)\n\t{\n\t\tchar c = string[i];\n\
    \t\tfor(int j = 0; j < string.length(); j++)\n\t\t{\n\t\t\tchar d = string[j];\n\
    \t\t\tif(c != d)\n\t\t\t{\n\t\t\t\tif(c >= 'a' && c <= 'z')\n\t\t\t\t{\n\t\t\t\
    \t\tif(d >= 'a' && d <= 'z')\n\t\t\t\t\t{\n\t\t\t\t\t\tif(c != d)\n\t\t\t\t\t\t\
    {\n\t\t\t\t\t\t\tcount++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\
    \t\t\t\t{\n\t\t\t\t\tif(d >= 'A' && d <= 'Z')\n\t\t\t\t\t{\n\t\t\t\t\t\tif(c !=\
    \ d)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcount++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\
    \t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate\
    \ = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"\
    abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"\
    aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj716zxyn.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = i; j < string.length(); j++)\n        {\n  \
    \          if(string[i] == string[j])\n            {\n                count++;\n\
    \                break;\n            }\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx6sdxhrs.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n\tlong count\
    \ = 0;\n\t\n\tfor (int i = 0; i < string.length(); i++)\n\t{\n\t\tchar c = string[i];\n\
    \t\t\n\t\tif (c >= 'A' && c <= 'Z')\n\t\t\tcount++;\n\t\telse if (c >= 'a' &&\
    \ c <= 'z')\n\t\t\tcount++;\n\t\telse if (c >= '0' && c <= '9')\n\t\t\tcount++;\n\
    \t}\n\t\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphz4vx1ui.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length; i++)\n    {\n        for(int j =\
    \ 0; j < string.length; j++)\n        {\n            if(string[i] == string[j])\n\
    \            {\n                count++;\n            }\n        }\n    }\n  \
    \  return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length; i++)\n\
    \    {\n        for(int j = 0; j < string.length; j++)\n        {\n          \
    \  if(string[i] == string[j])\n            {\n                count++;\n     \
    \       }\n        }\n    }\n    return count;\n}\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length; i++)\n    {\n        for(int j =\
    \ 0; j < string.length; j++)\n        {\n            if(string[i] == string[j])\n\
    \            {\n                count++;\n            }\n        }\n    }\n  \
    \  return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length; i++)\n\
    \    {\n        for(int j = 0; j < string.length; j++)\n        {\n          \
    \  if(string[i] == string[j])\n            {\n                count++;\n     \
    \       }\n        }\n    }\n    return count;\n}\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length; i++)\n    {\n        for(int j =\
    \ 0; j < string.length; j++)\n        {\n            if(string[i] == string[j])\n\
    \            {\n                count++;\n            }\n        }\n    }\n  \
    \  return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length; i++)\n\
    \    {\n        for(int j = 0; j < string.length; j++)\n        {\n          \
    \  if(string[i] == string[j])\n            {\n                count++;\n     \
    \       }\n        }\n    }\n    return count;\n}\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int \nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpe_69txqn.d(125): Error: no identifier for declarator int\n/tmp/tmpe_69txqn.d(125):
    Error: expression expected, not \''unittest\''\n/tmp/tmpe_69txqn.d(126): Error:
    found \''{\'' when expecting \'';\'' following for condition\n/tmp/tmpe_69txqn.d(127):
    Error: expression expected, not \''alias\''\n/tmp/tmpe_69txqn.d(127): Error: found
    \''candidate\'' when expecting \'')\''\n/tmp/tmpe_69txqn.d(127): Error: found
    \''=\'' instead of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe_69txqn.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = i; j < string.length(); j++)\n        {\n  \
    \          char d = string[j];\n            if(c != d)\n            {\n      \
    \          break;\n            }\n            else\n            {\n          \
    \      count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppjh5qdrd.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n  \
    \          char d = string[j];\n            if(c != d)\n            {\n      \
    \          count++;\n                break;\n            }\n        }\n    }\n\
    \    return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                count++;\n                break;\n            }\n\
    \        }\n    }\n    return count;\n}\n/*\n Given a string, find out how many\
    \ distinct characters (regardless of case) does it consist of\n            \n\
    */\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n\
    \        for(int j = 0; j < string.length(); j++)\n        {\n            char\
    \ d = string[j];\n            if(c != d)\n            {\n                count++;\n\
    \                break;\n            }\n        }\n    }\n    return count;\n\
    }\n/*\n Given a string, find out how many distinct characters (regardless of case)\
    \ does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                count++;\n                break;\n            }\n\
    \        }\n    }\n    return count;\n}\n/*\n Given a string, find out how many\
    \ distinct characters (regardless of case) does it consist of\n            \n\
    */\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n\
    \        for(int j = 0; j < string.length(); j++)\n        {\n            char\
    \ d = string[j];\n            if(c != d)\n            {\n                count++;\n\
    \                break;\n            }\n        }\n    }\n    return count;\n\
    }\n/*\n Given a string, find out how many distinct characters (regardless of case)\
    \ does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length()\nunittest\n\
    {\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprdsg95g0.d(121): Error: found \''unittest\'' when expecting
    \'';\'' following for condition\n/tmp/tmprdsg95g0.d(131): Error: found \''void\''
    when expecting \'')\''\n/tmp/tmprdsg95g0.d(131): Error: found \''{\'' when expecting
    \'';\'' following statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprdsg95g0.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    \n    for(int i = 0; i < string.length; i++)\n    {\n        char\
    \ c = string[i];\n        \n        if(!std.isAlpha(c))\n        {\n         \
    \   count++;\n        }\n    }\n    \n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n\
    \    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\"\
    ) == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"\
    Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp22rean2w.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n\tlong count\
    \ = 0;\n\tfor (int i = 0; i < string.length(); i++)\n\t{\n\t\tfor (int j = 0;\
    \ j < string.length(); j++)\n\t\t{\n\t\t\tif (string[i] == string[j])\n\t\t\t\
    {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n  \
    \  alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\")\
    \ == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\"\
    ) == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"\
    Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9lg64sji.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n  \
    \          char d = string[j];\n            if(c != d)\n            {\n      \
    \          break;\n            }\n            else\n            {\n          \
    \      count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprjgr2tox.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        if(!std.typecons.isUpper(c))\n        {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppxk5otsy.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length; i++)\n    {\n        char c = string[i];\n\
    \        for(int j = 0; j < string.length; j++)\n        {\n            char d\
    \ = string[j];\n            if(c != d)\n            {\n                count++;\n\
    \                break;\n            }\n        }\n    }\n    return count;\n\
    }\n/*\n Given a string, find out how many distinct characters (regardless of case)\
    \ does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length; i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length;\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                count++;\n                break;\n            }\n\
    \        }\n    }\n    return count;\n}\n/*\n Given a string, find out how many\
    \ distinct characters (regardless of case) does it consist of\n            \n\
    */\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length; i++)\n    {\n        char c = string[i];\n\
    \        for(int j = 0; j < string.length; j++)\n        {\n            char d\
    \ = string[j];\n            if(c != d)\n            {\n                count++;\n\
    \                break;\n            }\n        }\n    }\n    return count;\n\
    }\n/*\n Given a string, find out how many distinct characters (regardless of case)\
    \ does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length; i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length;\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                count++;\n                break;\n            }\n\
    \        }\n    }\n    return count;\n}\n/*\n Given a string, find out how many\
    \ distinct characters (regardless of case) does it consist of\n            \n\
    */\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length; i++)\n    {\n        char c = string[i];\n\
    \        for(int j = 0; j < string.length; j++)\n        {\n            char d\
    \ = string[j];\n            if(c != d)\n            {\n                count++;\n\
    \                break;\n            }\n        }\n    }\n    return count;\n\
    }\n/*\n Given a string, find out how many distinct characters (regardless of case)\
    \ does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length; i++)\n\
    \    {\n        char c = string[i];\n        \nunittest\n{\n    alias candidate\
    \ = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"\
    abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"\
    aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpjfv4zand.d(124): Error: found \''unittest\'' instead of statement\n/tmp/tmpjfv4zand.d(134):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjfv4zand.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n\tlong count\
    \ = 0;\n\tfor (int i = 0; i < string.length(); i++)\n\t{\n\t\tchar c = string[i];\n\
    \t\tif (std.ctype.isUpper(c))\n\t\t\tcount++;\n\t\telse if (std.ctype.isLower(c))\n\
    \t\t\tcount++;\n\t\telse\n\t\t\tcount++;\n\t}\n\treturn count;\n}\nunittest\n\
    {\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn2_8ovd1.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string.at(i);\n        if(!std.isAlpha(c))\n        {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa03rm5k_.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n  \
    \          char d = string[j];\n            if(c != d)\n            {\n      \
    \          count++;\n                break;\n            }\n        }\n    }\n\
    \    return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                count++;\n                break;\n            }\n\
    \        }\n    }\n    return count;\n}\n/*\n Given a string, find out how many\
    \ distinct characters (regardless of case) does it consist of\n            \n\
    */\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n\
    \        for(int j = 0; j < string.length(); j++)\n        {\n            char\
    \ d = string[j];\n            if(c != d)\n            {\n                count++;\n\
    \                break;\n            }\n        }\n    }\n    return count;\n\
    }\n/*\n Given a string, find out how many distinct characters (regardless of case)\
    \ does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                count++;\n                break;\n            }\n\
    \        }\n    }\n    return count;\n}\n/*\n Given a string, find out how many\
    \ distinct characters (regardless of case) does it consist of\n            \n\
    */\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n\
    \        for(int j = 0; j < string.length(); j++)\n        {\n            char\
    \ d = string[j];\n            if(c != d)\n            {\n                count++;\n\
    \                break;\n            }\n        }\n    }\n    return count;\n\
    }\n/*\n Given a string, find out how many distinct characters (regardless of case)\
    \ does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length()\nunittest\n\
    {\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprdsg95g0.d(121): Error: found \''unittest\'' when expecting
    \'';\'' following for condition\n/tmp/tmprdsg95g0.d(131): Error: found \''void\''
    when expecting \'')\''\n/tmp/tmprdsg95g0.d(131): Error: found \''{\'' when expecting
    \'';\'' following statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprdsg95g0.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        if(!std.isLower(c))\n            count++;\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n\
    \    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_r7me126.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n  \
    \          char d = string[j];\n            if(c != d)\n            {\n      \
    \          break;\n            }\n        }\n        count++;\n    }\n    return\
    \ count;\n}\n/*\n Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n        }\n        count++;\n\
    \    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n        }\n        count++;\n\
    \    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n        }\n        count++;\n\
    \    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n        }\n        count++;\n\
    \    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        \nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpmg83rxa_.d(123): Error: found \''unittest\'' instead of statement\n/tmp/tmpmg83rxa_.d(133):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmg83rxa_.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n  \
    \          if(c == string[j])\n            {\n                count++;\n     \
    \       }\n        }\n    }\n    return count;\n}\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n  \
    \          if(c == string[j])\n            {\n                count++;\n     \
    \       }\n        }\n    }\n    return count;\n}\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n  \
    \          if(c == string[j])\n            {\n                count++;\n     \
    \       }\n        }\n    }\n    return count;\n}\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n  \
    \          if(c == string[j])\n            {\n                count++;\n     \
    \       }\n        }\n    }\n    return count;\n}\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n  \
    \          if(c == string[j])\n            {\n                count++;\n     \
    \       }\n        }\n    }\n    return count;\n}\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n  \
    \          if(c == string[j])\n            {\n                count++;\n     \
    \       }\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n \
    \   assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1_346f6u.d(119): Error: found \''unittest\'' instead of statement\n/tmp/tmp1_346f6u.d(129):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmp1_346f6u.d(129):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1_346f6u.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n\tlong count\
    \ = 0;\n\tfor (int i = 0; i < string.length(); i++)\n\t{\n\t\tchar c = string[i];\n\
    \t\tfor (int j = 0; j < string.length(); j++)\n\t\t{\n\t\t\tif (i == j)\n\t\t\t\
    \tcontinue;\n\t\t\tchar d = string[j];\n\t\t\tif (c != d)\n\t\t\t\tbreak;\n\t\t\
    \tcount++;\n\t\t}\n\t}\n\treturn count;\n}\n/*\n Given a string, find out how\
    \ many distinct characters (regardless of case) does it consist of\n         \
    \   \n*/\nlong count_distinct_characters(string string) \n{\n\tlong count = 0;\n\
    \tfor (int i = 0; i < string.length(); i++)\n\t{\n\t\tchar c = string[i];\n\t\t\
    for (int j = 0; j < string.length(); j++)\n\t\t{\n\t\t\tif (i == j)\n\t\t\t\t\
    continue;\n\t\t\tchar d = string[j];\n\t\t\tif (c != d)\n\t\t\t\tbreak;\n\t\t\t\
    count++;\n\t\t}\n\t}\n\treturn count;\n}\n/*\n Given a string, find out how many\
    \ distinct characters (regardless of case) does it consist of\n            \n\
    */\nlong count_distinct_characters(string string) \n{\n\tlong count = 0;\n\tfor\
    \ (int i = 0; i < string.length(); i++)\n\t{\n\t\tchar c = string[i];\n\t\tfor\
    \ (int j = 0; j < string.length(); j++)\n\t\t{\n\t\t\tif (i == j)\n\t\t\t\tcontinue;\n\
    \t\t\tchar d = string[j];\n\t\t\tif (c != d)\n\t\t\t\tbreak;\n\t\t\tcount++;\n\
    \t\t}\n\t}\n\treturn count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n\tlong count = 0;\n\tfor (int i = 0; i < string.length(); i++)\n\
    \t{\n\t\tchar c = string[i];\n\t\tfor (int j = 0; j < string.length(); j++)\n\t\
    \t{\n\t\t\tif (i == j)\n\t\t\t\tcontinue;\n\t\t\tchar d = string[j];\n\t\t\tif\
    \ (c != d)\n\t\t\t\tbreak;\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\n/*\n\
    \ Given a string, find out how many distinct characters (regardless of case) does\
    \ it consist of\n            \n*/\nlong count_distinct_characters(string string)\
    \ \n{\n\tlong count = 0;\n\tfor (int i = 0; i < string.length(); i++)\n\t{\n\t\
    \tchar c = string[i];\n\t\tfor (int j = 0; j < string.length(); j++)\n\t\t{\n\t\
    \t\tif (i == j)\n\t\t\t\tcontinue;\n\t\t\tchar d = string[j];\n\t\t\tif (c !=\
    \ d)\n\t\t\t\tbreak;\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\n/*\n Given\
    \ a string, find out how many distinct characters (regardless of case) does it\
    \ consist of\n            \n*/\nlong count_\nunittest\n{\n    alias candidate\
    \ = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"\
    abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"\
    aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp6zu0xylt.d(118): Error: semicolon expected, not \''unittest\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6zu0xylt.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        for(int j\
    \ = 0; j < string.length(); j++)\n        {\n            if(i == j)\n        \
    \    {\n                continue;\n            }\n            char c = string.charAt(i);\n\
    \            char d = string.charAt(j);\n            if(c != d)\n            {\n\
    \                continue;\n            }\n            count++;\n        }\n \
    \   }\n    return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        for(int j = 0; j < string.length(); j++)\n        {\n        \
    \    if(i == j)\n            {\n                continue;\n            }\n   \
    \         char c = string.charAt(i);\n            char d = string.charAt(j);\n\
    \            if(c != d)\n            {\n                continue;\n          \
    \  }\n            count++;\n        }\n    }\n    return count;\n}\n/*\n Given\
    \ a string, find out how many distinct characters (regardless of case) does it\
    \ consist of\n            \n*/\nlong count_distinct_characters(string string)\
    \ \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n   \
    \ {\n        for(int j = 0; j < string.length(); j++)\n        {\n           \
    \ if(i == j)\n            {\n                continue;\n            }\n      \
    \      char c = string.charAt(i);\n            char d = string.charAt(j);\n  \
    \          if(c != d)\n            {\n                continue;\n            }\n\
    \            count++;\n        }\n    }\n    return count;\n}\n/*\n Given a string,\
    \ find out how many distinct characters (regardless of case) does it consist of\n\
    \            \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        for(int\
    \ j = 0; j < string.length(); j++)\n        {\n            if(i == j)\n      \
    \      {\n                continue;\n            }\n            char c = string.charAt(i);\n\
    \            char d = string.charAt(j);\n            if(c != d)\n            {\n\
    \                continue;\n            }\n            count++;\n        }\n \
    \   }\n    return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        for(int j = 0; j < string.length(); j++)\n        {\n        \
    \    if(i == j)\n            {\n                continue;\n            }\n   \
    \         char c = string.charAt(i);\n            \nunittest\n{\n    alias candidate\
    \ = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"\
    abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"\
    aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprzwkpriv.d(124): Error: found \''unittest\'' instead of statement\n/tmp/tmprzwkpriv.d(134):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmprzwkpriv.d(134):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprzwkpriv.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string.at(i);\n        for(int j = 0; j < string.length(); j++)\n        {\n\
    \            char d = string.at(j);\n            if(c != d)\n            {\n \
    \               break;\n            }\n        }\n        count++;\n    }\n  \
    \  return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3mp3ryvp.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n  \
    \          char d = string[j];\n            if(c != d)\n            {\n      \
    \          count++;\n                break;\n            }\n        }\n    }\n\
    \    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcp5d_lou.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n  \
    \          char d = string[j];\n            if(c != d)\n            {\n      \
    \          if(c >= 'A' && c <= 'Z')\n                {\n                    if(d\
    \ >= 'A' && d <= 'Z')\n                    {\n                        if(c !=\
    \ d)\n                        {\n                            count++;\n      \
    \                  }\n                    }\n                    else\n      \
    \              {\n                        count++;\n                    }\n  \
    \              }\n                else\n                {\n                  \
    \  count++;\n                }\n            }\n        }\n    }\n    return count;\n\
    }\n/*\n Given a string, find out how many distinct characters (regardless of case)\
    \ does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                if(c >= 'A' && c <= 'Z')\n                {\n \
    \                   if(d >= 'A' && d <= 'Z')\n                    {\n        \
    \                if(c != d)\n                        {\n                     \
    \       count++;\n                        }\n                    }\n         \
    \           else\n                    {\n                        count++;\n  \
    \                  }\n                }\n                else\n              \
    \  {\n                    count++;\n                }\n            }\n       \
    \ }\n    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                if(c >= 'A' && c <= 'Z')\n                {\n \
    \                   if(d >= 'A' && d <= 'Z')\n                    {\n        \
    \                if(c != d)\n                        {\n                     \
    \       count++;\n                        }\n                    }\n         \
    \           else\n                    {\n                        count++;\n  \
    \                  }\n                }\n                else\n              \
    \  {\n                    count++;\n                }\n            }\n       \
    \ }\n    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpmp2d4rwg.d(127): Error: semicolon expected, not \''unittest\''\n/tmp/tmpmp2d4rwg.d(127):
    Error: found \''unittest\'' instead of statement\n/tmp/tmpmp2d4rwg.d(137): Error:
    found \''EOF\'' when expecting \''}\'' following compound statement\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpmp2d4rwg.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = i; j < string.length(); j++)\n        {\n  \
    \          char d = string[j];\n            if(c != d)\n            {\n      \
    \          break;\n            }\n            else\n            {\n          \
    \      count++;\n            }\n        }\n    }\n    return count;\n}\n/*\n Given\
    \ a string, find out how many distinct characters (regardless of case) does it\
    \ consist of\n            \n*/\nlong count_distinct_characters(string string)\
    \ \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n   \
    \ {\n        char c = string[i];\n        for(int j = i; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n            else\n     \
    \       {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}\n/*\n Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = i; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n            else\n     \
    \       {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}\n/*\n Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = i; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n            else\n     \
    \       {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}\n/*\n Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = i; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n            else\n     \
    \       {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n\
    \    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbnneenr1.d(128): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbnneenr1.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n        char\
    \ c = string[i];\n        \n        for(int j = 0; j < string.length(); j++)\n\
    \        {\n            char d = string[j];\n            \n            if(c !=\
    \ d)\n            {\n                break;\n            }\n            \n   \
    \         count++;\n        }\n    }\n    \n    return count;\n}\nunittest\n{\n\
    \    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\"\
    ) == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\"\
    ) == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"\
    Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvyz2sezd.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        if(!std.isAlpha(c))\n        {\n            count++;\n \
    \       }\n    }\n    return count;\n}\n/*\n Given a string, find out how many\
    \ distinct characters (regardless of case) does it consist of\n            \n\
    */\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n\
    \        if(!std.isAlpha(c))\n        {\n            count++;\n        }\n   \
    \ }\n    return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        if(!std.isAlpha(c))\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}\n/*\n Given a string,\
    \ find out how many distinct characters (regardless of case) does it consist of\n\
    \            \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char\
    \ c = string[i];\n        if(!std.isAlpha(c))\n        {\n            count++;\n\
    \        }\n    }\n    return count;\n}\n/*\n Given a string, find out how many\
    \ distinct characters (regardless of case) does it consist of\n            \n\
    */\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n\
    \        if(!std.isAlpha(c))\n        {\n            count++;\n        }\n   \
    \ }\n    return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        if(!std.isAlpha(c))\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}\n/*\n Given a string,\
    \ find out how many distinct characters (regardless of case) does it consist of\n\
    \            \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char\
    \ c = string\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n\
    \    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphhknn5vr.d(115): Error: semicolon expected, not \''unittest\''\n/tmp/tmphhknn5vr.d(115):
    Error: found \''unittest\'' instead of statement\n/tmp/tmphhknn5vr.d(125): Error:
    found \''EOF\'' when expecting \''}\'' following compound statement\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmphhknn5vr.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        if(!std.typecons.isUpper(c))\n        {\n            count++;\n\
    \        }\n    }\n    return count;\n}\n/*\n Given a string, find out how many\
    \ distinct characters (regardless of case) does it consist of\n            \n\
    */\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n\
    \        if(!std.typecons.isUpper(c))\n        {\n            count++;\n     \
    \   }\n    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        if(!std.typecons.isUpper(c))\n  \
    \      {\n            count++;\n        }\n    }\n    return count;\n}\n/*\n Given\
    \ a string, find out how many distinct characters (regardless of case) does it\
    \ consist of\n            \n*/\nlong count_distinct_characters(string string)\
    \ \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n   \
    \ {\n        char c = string[i];\n        if(!std.typecons.isUpper(c))\n     \
    \   {\n            count++;\n        }\n    }\n    return count;\n}\n/*\n Given\
    \ a string, find out how many distinct characters (regardless of case) does it\
    \ consist of\n            \n*/\nlong count_distinct_characters(string string)\
    \ \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n   \
    \ {\n        char c = string[i];\n        if(!std.typecons.isUpper(c))\n     \
    \   {\n            count++;\n        }\n    }\n    return count;\n}\n/*\n Given\
    \ a string, find out how many distinct characters (regardless of case) does it\
    \ consist of\n            \n*/\nlong count_distinct_characters(string string)\
    \ \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n   \
    \ {\n        char c = string[i];\n        if(!std.typecons.isUpper(c))\n     \
    \   {\n            count++;\n        }\n    }\n    return count;\n}\n/*\n Given\
    \ a string, find out how many distinct characters (regardless of case) does it\
    \ consist of\n            \n*/\nlong count_distinct_characters(string string)\
    \ \n{\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n   \
    \ assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n  \
    \  assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpyuv1kcif.d(112): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyuv1kcif.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n  \
    \          if(c == string[j])\n            {\n                count++;\n     \
    \           break;\n            }\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8jzdfe6e.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    foreach(char c in string)\n    {\n        count += 1;\n    }\n   \
    \ return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    foreach(char c in string)\n    {\n   \
    \     count += 1;\n    }\n    return count;\n}\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    foreach(char c in string)\n    {\n        count += 1;\n    }\n   \
    \ return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    foreach(char c in string)\n    {\n   \
    \     count += 1;\n    }\n    return count;\n}\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    foreach(char c in string)\n    {\n        count += 1;\n    }\n   \
    \ return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    foreach(char c in string)\n    {\n   \
    \     count += 1;\n    }\n    return count;\n}\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    foreach(char c in string)\n    {\n        count += 1;\n    }\n   \
    \ return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    foreach(char c in string)\n    {\n   \
    \     count += 1;\n    }\n    return count;\n}\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    foreach\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1r4nhpyv.d(10): Error: found \''in\'' when expecting \'';\''\n/tmp/tmp1r4nhpyv.d(23):
    Error: found \''in\'' when expecting \'';\''\n/tmp/tmp1r4nhpyv.d(36): Error: found
    \''in\'' when expecting \'';\''\n/tmp/tmp1r4nhpyv.d(49): Error: found \''in\''
    when expecting \'';\''\n/tmp/tmp1r4nhpyv.d(62): Error: found \''in\'' when expecting
    \'';\''\n/tmp/tmp1r4nhpyv.d(75): Error: found \''in\'' when expecting \'';\''\n/tmp/tmp1r4nhpyv.d(88):
    Error: found \''in\'' when expecting \'';\''\n/tmp/tmp1r4nhpyv.d(101): Error:
    found \''in\'' when expecting \'';\''\n/tmp/tmp1r4nhpyv.d(115): Error: found \''unittest\''
    when expecting \''(\''\n/tmp/tmp1r4nhpyv.d(116): Error: basic type expected, not
    {\n/tmp/tmp1r4nhpyv.d(116): Error: no identifier for declarator int\n/tmp/tmp1r4nhpyv.d(116):
    Error: found \''{\'' when expecting \'';\''\n/tmp/tmp1r4nhpyv.d(117): Error: expression
    expected, not \''alias\''\n/tmp/tmp1r4nhpyv.d(117): Error: found \''candidate\''
    when expecting \'')\''\n/tmp/tmp1r4nhpyv.d(117): Error: found \''=\'' instead
    of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1r4nhpyv.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        if(!std.isLower(c))\n        {\n            count++;\n \
    \       }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpd01dhm_g.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        if(!std.isAlpha(c))\n            continue;\n        for(int\
    \ j = i+1; j < string.length(); j++)\n        {\n            char d = string[j];\n\
    \            if(!std.isAlpha(d))\n                continue;\n            if(c\
    \ == d)\n                continue;\n            count += 1;\n            break;\n\
    \        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphbm3vdah.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        if(!std.isAlpha(c))\n        {\n            count++;\n \
    \       }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpil0e4o6d.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = i+1; j < string.length(); j++)\n        {\n\
    \            char d = string[j];\n            if(c == d)\n            {\n    \
    \            count++;\n            }\n        }\n    }\n    return count;\n}\n\
    unittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp5_rlvaz.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n  \
    \          if(string[i] == string[j])\n            {\n                count++;\n\
    \            }\n        }\n    }\n    return count;\n}\n/*\n Given a string, find\
    \ out how many distinct characters (regardless of case) does it consist of\n \
    \           \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char\
    \ c = string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n\
    \            if(string[i] == string[j])\n            {\n                count++;\n\
    \            }\n        }\n    }\n    return count;\n}\n/*\n Given a string, find\
    \ out how many distinct characters (regardless of case) does it consist of\n \
    \           \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char\
    \ c = string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n\
    \            if(string[i] == string[j])\n            {\n                count++;\n\
    \            }\n        }\n    }\n    return count;\n}\n/*\n Given a string, find\
    \ out how many distinct characters (regardless of case) does it consist of\n \
    \           \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char\
    \ c = string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n\
    \            if(string[i] == string[j])\n            {\n                count++;\n\
    \            }\n        }\n    }\n    return count;\n}\n/*\n Given a string, find\
    \ out how many distinct characters (regardless of case) does it consist of\n \
    \           \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char\
    \ c = string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n\
    \            if(string[i] == string[j])\n            {\n                count++;\n\
    \            }\n        }\n    }\n    return count;\n}\n/*\n Given a string, find\
    \ out how many distinct characters (regardless of case) does it consist of\n \
    \           \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char\
    \ c = string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n\
    \            if(string[i] == string[j])\n            {\n                count++;\n\
    \            }\n        }\n    }\n    return \nunittest\n{\n    alias candidate\
    \ = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"\
    abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"\
    aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpsu1exi3o.d(122): Error: expression expected, not \''unittest\''\n/tmp/tmpsu1exi3o.d(123):
    Error: found \''{\'' when expecting \'';\'' following return statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsu1exi3o.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        if(!std.isLower(c))\n            count++;\n    }\n    return\
    \ count;\n}\n/*\n Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        if(!std.isLower(c))\n           \
    \ count++;\n    }\n    return count;\n}\n/*\n Given a string, find out how many\
    \ distinct characters (regardless of case) does it consist of\n            \n\
    */\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n\
    \        if(!std.isLower(c))\n            count++;\n    }\n    return count;\n\
    }\n/*\n Given a string, find out how many distinct characters (regardless of case)\
    \ does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        if(!std.isLower(c))\n           \
    \ count++;\n    }\n    return count;\n}\n/*\n Given a string, find out how many\
    \ distinct characters (regardless of case) does it consist of\n            \n\
    */\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n\
    \        if(!std.isLower(c))\n            count++;\n    }\n    return count;\n\
    }\n/*\n Given a string, find out how many distinct characters (regardless of case)\
    \ does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        if(!std.isLower(c))\n           \
    \ count++;\n    }\n    return count;\n}\n/*\n Given a string, find out how many\
    \ distinct characters (regardless of case) does it consist of\n            \n\
    */\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n\
    \        if(!std.isLower(c))\n            count++;\n    }\n\nunittest\n{\n   \
    \ alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") ==\
    \ 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\"\
    ) == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"\
    Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpsa_vhivd.d(107): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsa_vhivd.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string.at(i);\n        if(!std.isAlpha(c))\n        {\n            count++;\n\
    \        }\n    }\n    return count;\n}\n/*\n Given a string, find out how many\
    \ distinct characters (regardless of case) does it consist of\n            \n\
    */\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        char c = string.at(i);\n\
    \        if(!std.isAlpha(c))\n        {\n            count++;\n        }\n   \
    \ }\n    return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string.at(i);\n        if(!std.isAlpha(c))\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}\n/*\n Given a string,\
    \ find out how many distinct characters (regardless of case) does it consist of\n\
    \            \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char\
    \ c = string.at(i);\n        if(!std.isAlpha(c))\n        {\n            count++;\n\
    \        }\n    }\n    return count;\n}\n/*\n Given a string, find out how many\
    \ distinct characters (regardless of case) does it consist of\n            \n\
    */\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        char c = string.at(i);\n\
    \        if(!std.isAlpha(c))\n        {\n            count++;\n        }\n   \
    \ }\n    return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string.at(i);\n        if(!std.isAlpha(c))\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}\n/*\n Given a string,\
    \ find out how many distinct characters (regardless of case) does it consist of\n\
    \            \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    for(int i = 0; i < string.length(); i++)\n\nunittest\n{\n  \
    \  alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\")\
    \ == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\"\
    ) == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"\
    Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptwyw6064.d(114): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptwyw6064.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    \n    foreach(char c in string)\n    {\n        if(!std.isAlpha(c))\n\
    \        {\n            count++;\n        }\n    }\n    \n    return count;\n\
    }\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpe6pq_s1p.d(11): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe6pq_s1p.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        if(!std.isAlpha(c))\n            continue;\n        for(int\
    \ j = i+1; j < string.length(); j++)\n        {\n            char d = string[j];\n\
    \            if(std.isAlpha(d))\n            {\n                count += 1;\n\
    \            }\n        }\n    }\n    return count;\n}\n/*\n Given a string, find\
    \ out how many distinct characters (regardless of case) does it consist of\n \
    \           \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char\
    \ c = string[i];\n        if(!std.isAlpha(c))\n            continue;\n       \
    \ for(int j = i+1; j < string.length(); j++)\n        {\n            char d =\
    \ string[j];\n            if(std.isAlpha(d))\n            {\n                count\
    \ += 1;\n            }\n        }\n    }\n    return count;\n}\n/*\n Given a string,\
    \ find out how many distinct characters (regardless of case) does it consist of\n\
    \            \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char\
    \ c = string[i];\n        if(!std.isAlpha(c))\n            continue;\n       \
    \ for(int j = i+1; j < string.length(); j++)\n        {\n            char d =\
    \ string[j];\n            if(std.isAlpha(d))\n            {\n                count\
    \ += 1;\n            }\n        }\n    }\n    return count;\n}\n/*\n Given a string,\
    \ find out how many distinct characters (regardless of case) does it consist of\n\
    \            \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char\
    \ c = string[i];\n        if(!std.isAlpha(c))\n            continue;\n       \
    \ for(int j = i+1; j < string.length(); j++)\n        {\n            char d =\
    \ string[j];\n            if(std.isAlpha(d))\n            {\n                count\
    \ += 1;\n            }\n        }\n    }\n    return count;\n}\n/*\n Given a string,\
    \ find out how many distinct characters (regardless of case) does it consist of\n\
    \            \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char\
    \ c = string[i];\n        if(!std.isAlpha(c))\n            continue;\n       \
    \ for(int j = i+1; j < string.length(); j\nunittest\n{\n    alias candidate =\
    \ count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"\
    abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"\
    aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpm0elastq.d(108): Error: found \''unittest\'' when expecting
    \'')\''\n/tmp/tmpm0elastq.d(118): Error: found \''EOF\'' when expecting \''}\''
    following compound statement\n/tmp/tmpm0elastq.d(118): Error: found \''EOF\''
    when expecting \''}\'' following compound statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpm0elastq.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        if(!std.typecons.isUpper(c))\n        {\n            count++;\n\
    \        }\n    }\n    return count;\n}\n/*\n Given a string, find out how many\
    \ distinct characters (regardless of case) does it consist of\n            \n\
    */\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n\
    \        if(!std.typecons.isUpper(c))\n        {\n            count++;\n     \
    \   }\n    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        if(!std.typecons.isUpper(c))\n  \
    \      {\n            count++;\n        }\n    }\n    return count;\n}\n/*\n Given\
    \ a string, find out how many distinct characters (regardless of case) does it\
    \ consist of\n            \n*/\nlong count_distinct_characters(string string)\
    \ \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n   \
    \ {\n        char c = string[i];\n        if(!std.typecons.isUpper(c))\n     \
    \   {\n            count++;\n        }\n    }\n    return count;\n}\n/*\n Given\
    \ a string, find out how many distinct characters (regardless of case) does it\
    \ consist of\n            \n*/\nlong count_distinct_characters(string string)\
    \ \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n   \
    \ {\n        char c = string[i];\n        if(!std.typecons.isUpper(c))\n     \
    \   {\n            count++;\n        }\n    }\n    return count;\n}\n/*\n Given\
    \ a string, find out how many distinct characters (regardless of case) does it\
    \ consist of\n            \n*/\nlong count_distinct_characters(string string)\
    \ \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n   \
    \ {\n        char c = string[i];\n        if(!std.typecons.isUpper(c))\n     \
    \   {\n            count++;\n        }\n    }\n    return count;\n}\n/*\n Given\
    \ a string, find out how many distinct characters (regardless of case) does it\
    \ consist of\n            \n*/\nlong count_distinct_characters(string string)\
    \ \n{\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n   \
    \ assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n  \
    \  assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpyuv1kcif.d(112): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyuv1kcif.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        if(!std.isAlpha(c))\n        {\n            count++;\n \
    \       }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpil0e4o6d.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string.at(i);\n        if(!std.isAlpha(c))\n        {\n            count++;\n\
    \        }\n    }\n    return count;\n}\n/*\n Given a string, find out how many\
    \ distinct characters (regardless of case) does it consist of\n            \n\
    */\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        char c = string.at(i);\n\
    \        if(!std.isAlpha(c))\n        {\n            count++;\n        }\n   \
    \ }\n    return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string.at(i);\n        if(!std.isAlpha(c))\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}\n/*\n Given a string,\
    \ find out how many distinct characters (regardless of case) does it consist of\n\
    \            \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char\
    \ c = string.at(i);\n        if(!std.isAlpha(c))\n        {\n            count++;\n\
    \        }\n    }\n    return count;\n}\n/*\n Given a string, find out how many\
    \ distinct characters (regardless of case) does it consist of\n            \n\
    */\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        char c = string.at(i);\n\
    \        if(!std.isAlpha(c))\n        {\n            count++;\n        }\n   \
    \ }\n    return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string.at(i);\n        if(!std.isAlpha(c))\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}\n/*\n Given a string,\
    \ find out how many distinct characters (regardless of case) does it consist of\n\
    \            \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    for(int i = 0; i < string.length(); i++)\n\nunittest\n{\n  \
    \  alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\")\
    \ == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\"\
    ) == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"\
    Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptwyw6064.d(114): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptwyw6064.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n  \
    \          char d = string[j];\n            if(c != d)\n            {\n      \
    \          count++;\n                break;\n            }\n        }\n    }\n\
    \    return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                count++;\n                break;\n            }\n\
    \        }\n    }\n    return count;\n}\n/*\n Given a string, find out how many\
    \ distinct characters (regardless of case) does it consist of\n            \n\
    */\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n\
    \        for(int j = 0; j < string.length(); j++)\n        {\n            char\
    \ d = string[j];\n            if(c != d)\n            {\n                count++;\n\
    \                break;\n            }\n        }\n    }\n    return count;\n\
    }\n/*\n Given a string, find out how many distinct characters (regardless of case)\
    \ does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                count++;\n                break;\n            }\n\
    \        }\n    }\n    return count;\n}\n/*\n Given a string, find out how many\
    \ distinct characters (regardless of case) does it consist of\n            \n\
    */\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n\
    \        for(int j = 0; j < string.length(); j++)\n        {\n            char\
    \ d = string[j];\n            if(c != d)\n            {\n                count++;\n\
    \                break;\n            }\n        }\n    }\n    return count;\n\
    }\n/*\n Given a string, find out how many distinct characters (regardless of case)\
    \ does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length()\nunittest\n\
    {\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprdsg95g0.d(121): Error: found \''unittest\'' when expecting
    \'';\'' following for condition\n/tmp/tmprdsg95g0.d(131): Error: found \''void\''
    when expecting \'')\''\n/tmp/tmprdsg95g0.d(131): Error: found \''{\'' when expecting
    \'';\'' following statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprdsg95g0.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    \n    foreach(char c in string)\n    {\n        count += 1;\n    }\n\
    \    \n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpssaf3f5r.d(11): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpssaf3f5r.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n  \
    \          char d = string[j];\n            if(c != d)\n            {\n      \
    \          break;\n            }\n            else\n            {\n          \
    \      count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprjgr2tox.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n  \
    \          char d = string[j];\n            if(c != d)\n            {\n      \
    \          count++;\n                break;\n            }\n        }\n    }\n\
    \    return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                count++;\n                break;\n            }\n\
    \        }\n    }\n    return count;\n}\n/*\n Given a string, find out how many\
    \ distinct characters (regardless of case) does it consist of\n            \n\
    */\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n\
    \        for(int j = 0; j < string.length(); j++)\n        {\n            char\
    \ d = string[j];\n            if(c != d)\n            {\n                count++;\n\
    \                break;\n            }\n        }\n    }\n    return count;\n\
    }\n/*\n Given a string, find out how many distinct characters (regardless of case)\
    \ does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                count++;\n                break;\n            }\n\
    \        }\n    }\n    return count;\n}\n/*\n Given a string, find out how many\
    \ distinct characters (regardless of case) does it consist of\n            \n\
    */\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n\
    \        for(int j = 0; j < string.length(); j++)\n        {\n            char\
    \ d = string[j];\n            if(c != d)\n            {\n                count++;\n\
    \                break;\n            }\n        }\n    }\n    return count;\n\
    }\n/*\n Given a string, find out how many distinct characters (regardless of case)\
    \ does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length()\nunittest\n\
    {\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprdsg95g0.d(121): Error: found \''unittest\'' when expecting
    \'';\'' following for condition\n/tmp/tmprdsg95g0.d(131): Error: found \''void\''
    when expecting \'')\''\n/tmp/tmprdsg95g0.d(131): Error: found \''{\'' when expecting
    \'';\'' following statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprdsg95g0.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n  \
    \          char d = string[j];\n            if(c != d)\n            {\n      \
    \          break;\n            }\n        }\n        count++;\n    }\n    return\
    \ count;\n}\n/*\n Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n        }\n        count++;\n\
    \    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n        }\n        count++;\n\
    \    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n        }\n        count++;\n\
    \    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n        }\n        count++;\n\
    \    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        \nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpmg83rxa_.d(123): Error: found \''unittest\'' instead of statement\n/tmp/tmpmg83rxa_.d(133):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmg83rxa_.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        if(!std.isAlpha(c))\n        {\n            count++;\n \
    \       }\n    }\n    return count;\n}\n/*\n Given a string, find out how many\
    \ distinct characters (regardless of case) does it consist of\n            \n\
    */\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n\
    \        if(!std.isAlpha(c))\n        {\n            count++;\n        }\n   \
    \ }\n    return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        if(!std.isAlpha(c))\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}\n/*\n Given a string,\
    \ find out how many distinct characters (regardless of case) does it consist of\n\
    \            \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char\
    \ c = string[i];\n        if(!std.isAlpha(c))\n        {\n            count++;\n\
    \        }\n    }\n    return count;\n}\n/*\n Given a string, find out how many\
    \ distinct characters (regardless of case) does it consist of\n            \n\
    */\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n\
    \        if(!std.isAlpha(c))\n        {\n            count++;\n        }\n   \
    \ }\n    return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        if(!std.isAlpha(c))\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}\n/*\n Given a string,\
    \ find out how many distinct characters (regardless of case) does it consist of\n\
    \            \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char\
    \ c = string\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n\
    \    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphhknn5vr.d(115): Error: semicolon expected, not \''unittest\''\n/tmp/tmphhknn5vr.d(115):
    Error: found \''unittest\'' instead of statement\n/tmp/tmphhknn5vr.d(125): Error:
    found \''EOF\'' when expecting \''}\'' following compound statement\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmphhknn5vr.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    foreach(char c in string)\n    {\n        if(!std.isLower(c))\n  \
    \          count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"\
    abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"\
    aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptpiuq5fz.d(10): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptpiuq5fz.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n        char\
    \ c = string[i];\n        \n        if(!std.typecons.isUpper(c))\n        {\n\
    \            count++;\n        }\n    }\n    \n    return count;\n}\nunittest\n\
    {\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpeio7h3yz.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n  \
    \          char d = string[j];\n            if(c != d)\n            {\n      \
    \          break;\n            }\n        }\n        count++;\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n\
    \    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy70wsggc.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = i; j < string.length(); j++)\n        {\n  \
    \          char d = string[j];\n            if(c != d)\n            {\n      \
    \          break;\n            }\n            else\n            {\n          \
    \      count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppjh5qdrd.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string.at(i);\n        for(int j = 0; j < string.length(); j++)\n        {\n\
    \            char d = string.at(j);\n            if(c != d)\n            {\n \
    \               break;\n            }\n        }\n        count++;\n    }\n  \
    \  return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3mp3ryvp.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string.at(i);\n        for(int j = 0; j < string.length(); j++)\n        {\n\
    \            char d = string.at(j);\n            if(c != d)\n            {\n \
    \               break;\n            }\n        }\n        count++;\n    }\n  \
    \  return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3mp3ryvp.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n  \
    \          char d = string[j];\n            if(c != d)\n            {\n      \
    \          break;\n            }\n        }\n        count++;\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n\
    \    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy70wsggc.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n  \
    \          char d = string[j];\n            if(c != d)\n            {\n      \
    \          if(c >= 'a' && c <= 'z')\n                {\n                    if(d\
    \ >= 'a' && d <= 'z')\n                    {\n                        count++;\n\
    \                    }\n                    else\n                    {\n    \
    \                    count++;\n                    }\n                }\n    \
    \            else\n                {\n                    if(d >= 'a' && d <=\
    \ 'z')\n                    {\n                        count++;\n            \
    \        }\n                    else\n                    {\n                \
    \        count++;\n                    }\n                }\n            }\n \
    \       }\n    }\n    return count;\n}\n/*\n Given a string, find out how many\
    \ distinct characters (regardless of case) does it consist of\n            \n\
    */\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n\
    \        for(int j = 0; j < string.length(); j++)\n        {\n            char\
    \ d = string[j];\n            if(c != d)\n            {\n                if(c\
    \ >= 'a' && c <= 'z')\n                {\n                    if(d >= 'a' && d\
    \ <= 'z')\n                    {\n                        count++;\n         \
    \           }\n                    else\n                    {\n             \
    \           count++;\n                    }\n                }\n             \
    \   else\n                {\n                    if(d >= 'a' && d <= 'z')\n  \
    \                  {\n                        count++;\n                    }\n\
    \                    else\n                    {\n                        count++;\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                if(c >= 'a' && c <= 'z')\n                {\n \
    \                   if(d >= 'a' && d <= 'z')\n                    {\n        \
    \                count++;\n                    }\n                    else\n \
    \                   {\n                        count++;\n                    }\n\
    \                }\n                else\n                {\n                \
    \    if(d >= 'a' && d <= 'z')\n                    {\n                       \
    \ count++;\n                    }\n                    else\n                \
    \    {\n                        count++;\n                    }\n            \
    \    }\n            }\n        }\n    }\n    return count;\n}\n/*\n Given a \n\
    unittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_fwrfyan.d(129): Error: unterminated /* */ comment\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_fwrfyan.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n\tlong count\
    \ = 0;\n\t\n\tfor(int i = 0; i < string.length(); i++)\n\t{\n\t\tchar c = string[i];\n\
    \t\t\n\t\tfor(int j = 0; j < string.length(); j++)\n\t\t{\n\t\t\tchar d = string[j];\n\
    \t\t\t\n\t\t\tif(c != d)\n\t\t\t{\n\t\t\t\tif(c >= 'a' && c <= 'z')\n\t\t\t\t\
    {\n\t\t\t\t\tif(d >= 'a' && d <= 'z')\n\t\t\t\t\t{\n\t\t\t\t\t\tcount += 1;\n\t\
    \t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif(c >= 'A' && c <= 'Z')\n\t\t\t\t{\n\t\
    \t\t\t\tif(d >= 'A' && d <= 'Z')\n\t\t\t\t\t{\n\t\t\t\t\t\tcount += 1;\n\t\t\t\
    \t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn count;\n}\nunittest\n{\n \
    \   alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\"\
    ) == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\"\
    ) == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"\
    Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1baht5iu.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n  \
    \          char d = string[j];\n            if(c != d)\n            {\n      \
    \          count++;\n                break;\n            }\n        }\n    }\n\
    \    return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                count++;\n                break;\n            }\n\
    \        }\n    }\n    return count;\n}\n/*\n Given a string, find out how many\
    \ distinct characters (regardless of case) does it consist of\n            \n\
    */\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n\
    \        for(int j = 0; j < string.length(); j++)\n        {\n            char\
    \ d = string[j];\n            if(c != d)\n            {\n                count++;\n\
    \                break;\n            }\n        }\n    }\n    return count;\n\
    }\n/*\n Given a string, find out how many distinct characters (regardless of case)\
    \ does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                count++;\n                break;\n            }\n\
    \        }\n    }\n    return count;\n}\n/*\n Given a string, find out how many\
    \ distinct characters (regardless of case) does it consist of\n            \n\
    */\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n\
    \        for(int j = 0; j < string.length(); j++)\n        {\n            char\
    \ d = string[j];\n            if(c != d)\n            {\n                count++;\n\
    \                break;\n            }\n        }\n    }\n    return count;\n\
    }\n/*\n Given a string, find out how many distinct characters (regardless of case)\
    \ does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length()\nunittest\n\
    {\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprdsg95g0.d(121): Error: found \''unittest\'' when expecting
    \'';\'' following for condition\n/tmp/tmprdsg95g0.d(131): Error: found \''void\''
    when expecting \'')\''\n/tmp/tmprdsg95g0.d(131): Error: found \''{\'' when expecting
    \'';\'' following statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprdsg95g0.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n  \
    \          if(string[i] == string[j])\n            {\n                count++;\n\
    \            }\n        }\n    }\n    return count;\n}\n/*\n Given a string, find\
    \ out how many distinct characters (regardless of case) does it consist of\n \
    \           \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char\
    \ c = string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n\
    \            if(string[i] == string[j])\n            {\n                count++;\n\
    \            }\n        }\n    }\n    return count;\n}\n/*\n Given a string, find\
    \ out how many distinct characters (regardless of case) does it consist of\n \
    \           \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char\
    \ c = string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n\
    \            if(string[i] == string[j])\n            {\n                count++;\n\
    \            }\n        }\n    }\n    return count;\n}\n/*\n Given a string, find\
    \ out how many distinct characters (regardless of case) does it consist of\n \
    \           \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char\
    \ c = string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n\
    \            if(string[i] == string[j])\n            {\n                count++;\n\
    \            }\n        }\n    }\n    return count;\n}\n/*\n Given a string, find\
    \ out how many distinct characters (regardless of case) does it consist of\n \
    \           \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char\
    \ c = string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n\
    \            if(string[i] == string[j])\n            {\n                count++;\n\
    \            }\n        }\n    }\n    return count;\n}\n/*\n Given a string, find\
    \ out how many distinct characters (regardless of case) does it consist of\n \
    \           \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char\
    \ c = string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n\
    \            if(string[i] == string[j])\n            {\n                count++;\n\
    \            }\n        }\n    }\n    return \nunittest\n{\n    alias candidate\
    \ = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"\
    abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"\
    aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpsu1exi3o.d(122): Error: expression expected, not \''unittest\''\n/tmp/tmpsu1exi3o.d(123):
    Error: found \''{\'' when expecting \'';\'' following return statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsu1exi3o.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n        char\
    \ c = string[i];\n        \n        for(int j = i+1; j < string.length(); j++)\n\
    \        {\n            if(string[i] == string[j])\n            {\n          \
    \      count++;\n            }\n        }\n    }\n    \n    return count;\n}\n\
    unittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4lc5hsi3.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n  \
    \          char d = string[j];\n            if(c != d)\n            {\n      \
    \          count++;\n                break;\n            }\n        }\n    }\n\
    \    return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                count++;\n                break;\n            }\n\
    \        }\n    }\n    return count;\n}\n/*\n Given a string, find out how many\
    \ distinct characters (regardless of case) does it consist of\n            \n\
    */\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n\
    \        for(int j = 0; j < string.length(); j++)\n        {\n            char\
    \ d = string[j];\n            if(c != d)\n            {\n                count++;\n\
    \                break;\n            }\n        }\n    }\n    return count;\n\
    }\n/*\n Given a string, find out how many distinct characters (regardless of case)\
    \ does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                count++;\n                break;\n            }\n\
    \        }\n    }\n    return count;\n}\n/*\n Given a string, find out how many\
    \ distinct characters (regardless of case) does it consist of\n            \n\
    */\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n\
    \        for(int j = 0; j < string.length(); j++)\n        {\n            char\
    \ d = string[j];\n            if(c != d)\n            {\n                count++;\n\
    \                break;\n            }\n        }\n    }\n    return count;\n\
    }\n/*\n Given a string, find out how many distinct characters (regardless of case)\
    \ does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length()\nunittest\n\
    {\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprdsg95g0.d(121): Error: found \''unittest\'' when expecting
    \'';\'' following for condition\n/tmp/tmprdsg95g0.d(131): Error: found \''void\''
    when expecting \'')\''\n/tmp/tmprdsg95g0.d(131): Error: found \''{\'' when expecting
    \'';\'' following statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprdsg95g0.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = i+1; j < string.length(); j++)\n        {\n\
    \            char d = string[j];\n            if(c != d)\n            {\n    \
    \            count++;\n                break;\n            }\n        }\n    }\n\
    \    return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = i+1; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                count++;\n                break;\n            }\n\
    \        }\n    }\n    return count;\n}\n/*\n Given a string, find out how many\
    \ distinct characters (regardless of case) does it consist of\n            \n\
    */\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n\
    \        for(int j = i+1; j < string.length(); j++)\n        {\n            char\
    \ d = string[j];\n            if(c != d)\n            {\n                count++;\n\
    \                break;\n            }\n        }\n    }\n    return count;\n\
    }\n/*\n Given a string, find out how many distinct characters (regardless of case)\
    \ does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = i+1; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                count++;\n                break;\n            }\n\
    \        }\n    }\n    return count;\n}\n/*\n Given a string, find out how many\
    \ distinct characters (regardless of case) does it consist of\n            \n\
    */\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n\
    \        for(int j = i+1; j < string.length(); j++)\n        {\n            char\
    \ d = string[j];\n            if(c != d)\n            {\n                count++;\n\
    \                break;\n            }\n        }\n    }\n    return count;\n\
    }\n/*\n Given a string, find out how many distinct characters (regardless of case)\
    \ does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ \nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpfsqa4ff3.d(118): Error: found \''unittest\'' when expecting
    \'')\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfsqa4ff3.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    \n    foreach(char c in string)\n    {\n        count += 1;\n    }\n\
    \    \n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpssaf3f5r.d(11): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpssaf3f5r.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length; i++)\n    {\n        for(int j =\
    \ 0; j < string.length; j++)\n        {\n            if(string[i] == string[j])\n\
    \            {\n                count++;\n            }\n        }\n    }\n  \
    \  return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length; i++)\n\
    \    {\n        for(int j = 0; j < string.length; j++)\n        {\n          \
    \  if(string[i] == string[j])\n            {\n                count++;\n     \
    \       }\n        }\n    }\n    return count;\n}\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length; i++)\n    {\n        for(int j =\
    \ 0; j < string.length; j++)\n        {\n            if(string[i] == string[j])\n\
    \            {\n                count++;\n            }\n        }\n    }\n  \
    \  return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length; i++)\n\
    \    {\n        for(int j = 0; j < string.length; j++)\n        {\n          \
    \  if(string[i] == string[j])\n            {\n                count++;\n     \
    \       }\n        }\n    }\n    return count;\n}\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length; i++)\n    {\n        for(int j =\
    \ 0; j < string.length; j++)\n        {\n            if(string[i] == string[j])\n\
    \            {\n                count++;\n            }\n        }\n    }\n  \
    \  return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length; i++)\n\
    \    {\n        for(int j = 0; j < string.length; j++)\n        {\n          \
    \  if(string[i] == string[j])\n            {\n                count++;\n     \
    \       }\n        }\n    }\n    return count;\n}\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int \nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpe_69txqn.d(125): Error: no identifier for declarator int\n/tmp/tmpe_69txqn.d(125):
    Error: expression expected, not \''unittest\''\n/tmp/tmpe_69txqn.d(126): Error:
    found \''{\'' when expecting \'';\'' following for condition\n/tmp/tmpe_69txqn.d(127):
    Error: expression expected, not \''alias\''\n/tmp/tmpe_69txqn.d(127): Error: found
    \''candidate\'' when expecting \'')\''\n/tmp/tmpe_69txqn.d(127): Error: found
    \''=\'' instead of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe_69txqn.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = i+1; j < string.length(); j++)\n        {\n\
    \            if(string[i] == string[j])\n            {\n                count++;\n\
    \                break;\n            }\n        }\n    }\n    return count;\n\
    }\n/*\n Given a string, find out how many distinct characters (regardless of case)\
    \ does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = i+1; j < string.length();\
    \ j++)\n        {\n            if(string[i] == string[j])\n            {\n   \
    \             count++;\n                break;\n            }\n        }\n   \
    \ }\n    return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = i+1; j < string.length();\
    \ j++)\n        {\n            if(string[i] == string[j])\n            {\n   \
    \             count++;\n                break;\n            }\n        }\n   \
    \ }\n    return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = i+1; j < string.length();\
    \ j++)\n        {\n            if(string[i] == string[j])\n            {\n   \
    \             count++;\n                break;\n            }\n        }\n   \
    \ }\n    return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = i+1; j < string.length();\
    \ j++)\n        {\n            if(string[i] == string[j])\n            {\n   \
    \             count++;\n                break;\n            }\n        }\n   \
    \ }\n    return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = i+1; \nunittest\n{\n\
    \    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\"\
    ) == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\"\
    ) == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"\
    Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0t8vs2ls.d(119): Error: expression expected, not \''unittest\''\n/tmp/tmp0t8vs2ls.d(120):
    Error: found \''{\'' when expecting \'';\'' following for condition\n/tmp/tmp0t8vs2ls.d(121):
    Error: expression expected, not \''alias\''\n/tmp/tmp0t8vs2ls.d(121): Error: found
    \''candidate\'' when expecting \'')\''\n/tmp/tmp0t8vs2ls.d(121): Error: found
    \''=\'' instead of statement\n/tmp/tmp0t8vs2ls.d(129): Error: found \''EOF\''
    when expecting \''}\'' following compound statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmp0t8vs2ls.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n  \
    \          char d = string[j];\n            if(c != d)\n            {\n      \
    \          break;\n            }\n        }\n        count++;\n    }\n    return\
    \ count;\n}\n/*\n Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n        }\n        count++;\n\
    \    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n        }\n        count++;\n\
    \    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n        }\n        count++;\n\
    \    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n        }\n        count++;\n\
    \    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        \nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpmg83rxa_.d(123): Error: found \''unittest\'' instead of statement\n/tmp/tmpmg83rxa_.d(133):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmg83rxa_.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string.at(i);\n        if(!std.isLower(c))\n        {\n            count++;\n\
    \        }\n    }\n    return count;\n}\n/*\n Given a string, find out how many\
    \ distinct characters (regardless of case) does it consist of\n            \n\
    */\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        char c = string.at(i);\n\
    \        if(!std.isLower(c))\n        {\n            count++;\n        }\n   \
    \ }\n    return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string.at(i);\n        if(!std.isLower(c))\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}\n/*\n Given a string,\
    \ find out how many distinct characters (regardless of case) does it consist of\n\
    \            \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char\
    \ c = string.at(i);\n        if(!std.isLower(c))\n        {\n            count++;\n\
    \        }\n    }\n    return count;\n}\n/*\n Given a string, find out how many\
    \ distinct characters (regardless of case) does it consist of\n            \n\
    */\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        char c = string.at(i);\n\
    \        if(!std.isLower(c))\n        {\n            count++;\n        }\n   \
    \ }\n    return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string.at(i);\n        if(!std.isLower(c))\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}\n/*\n Given a string,\
    \ find out how many distinct characters (regardless of case) does it consist of\n\
    \            \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    for(int \nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmppjsakm3y.d(113): Error: no identifier for declarator int\n/tmp/tmppjsakm3y.d(113):
    Error: expression expected, not \''unittest\''\n/tmp/tmppjsakm3y.d(114): Error:
    found \''{\'' when expecting \'';\'' following for condition\n/tmp/tmppjsakm3y.d(115):
    Error: expression expected, not \''alias\''\n/tmp/tmppjsakm3y.d(115): Error: found
    \''candidate\'' when expecting \'')\''\n/tmp/tmppjsakm3y.d(115): Error: found
    \''=\'' instead of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppjsakm3y.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    foreach(char c in string)\n    {\n        count += 1;\n    }\n   \
    \ return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmplmgifgnv.d(10): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplmgifgnv.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n\tlong count\
    \ = 0;\n\tfor (int i = 0; i < string.length(); i++)\n\t{\n\t\tchar c = string[i];\n\
    \t\tfor (int j = 0; j < string.length(); j++)\n\t\t{\n\t\t\tif (i == j)\n\t\t\t\
    \tcontinue;\n\t\t\tif (c != string[j])\n\t\t\t\tbreak;\n\t\t}\n\t\tcount++;\n\t\
    }\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr8u63peq.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string.at(i);\n        \n        if(!std.isAlpha(c))\n        {\n          \
    \  count += 1;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n\
    \    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\"\
    ) == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"\
    Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzb6vew9y.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n  \
    \          if(c == string[j])\n            {\n                count++;\n     \
    \       }\n        }\n    }\n    return count;\n}\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n  \
    \          if(c == string[j])\n            {\n                count++;\n     \
    \       }\n        }\n    }\n    return count;\n}\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n  \
    \          if(c == string[j])\n            {\n                count++;\n     \
    \       }\n        }\n    }\n    return count;\n}\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n  \
    \          if(c == string[j])\n            {\n                count++;\n     \
    \       }\n        }\n    }\n    return count;\n}\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n  \
    \          if(c == string[j])\n            {\n                count++;\n     \
    \       }\n        }\n    }\n    return count;\n}\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n  \
    \          if(c == string[j])\n            {\n                count++;\n     \
    \       }\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n \
    \   assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1_346f6u.d(119): Error: found \''unittest\'' instead of statement\n/tmp/tmp1_346f6u.d(129):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmp1_346f6u.d(129):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1_346f6u.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n  \
    \          char d = string[j];\n            if(c != d)\n            {\n      \
    \          break;\n            }\n        }\n        count++;\n    }\n    return\
    \ count;\n}\n/*\n Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n        }\n        count++;\n\
    \    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n        }\n        count++;\n\
    \    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n        }\n        count++;\n\
    \    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n        }\n        count++;\n\
    \    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        \nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpmg83rxa_.d(123): Error: found \''unittest\'' instead of statement\n/tmp/tmpmg83rxa_.d(133):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmg83rxa_.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n  \
    \          char d = string[j];\n            if(c != d)\n            {\n      \
    \          break;\n            }\n        }\n        count++;\n    }\n    return\
    \ count;\n}\n/*\n Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n        }\n        count++;\n\
    \    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n        }\n        count++;\n\
    \    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n        }\n        count++;\n\
    \    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n        }\n        count++;\n\
    \    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        \nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpmg83rxa_.d(123): Error: found \''unittest\'' instead of statement\n/tmp/tmpmg83rxa_.d(133):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmg83rxa_.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n  \
    \          if(c == string[j])\n            {\n                count++;\n     \
    \       }\n        }\n    }\n    return count;\n}\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n  \
    \          if(c == string[j])\n            {\n                count++;\n     \
    \       }\n        }\n    }\n    return count;\n}\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n  \
    \          if(c == string[j])\n            {\n                count++;\n     \
    \       }\n        }\n    }\n    return count;\n}\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n  \
    \          if(c == string[j])\n            {\n                count++;\n     \
    \       }\n        }\n    }\n    return count;\n}\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n  \
    \          if(c == string[j])\n            {\n                count++;\n     \
    \       }\n        }\n    }\n    return count;\n}\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n  \
    \          if(c == string[j])\n            {\n                count++;\n     \
    \       }\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n \
    \   assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1_346f6u.d(119): Error: found \''unittest\'' instead of statement\n/tmp/tmp1_346f6u.d(129):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmp1_346f6u.d(129):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1_346f6u.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n  \
    \          if(c == string[j])\n            {\n                count++;\n     \
    \       }\n        }\n    }\n    return count;\n}\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n  \
    \          if(c == string[j])\n            {\n                count++;\n     \
    \       }\n        }\n    }\n    return count;\n}\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n  \
    \          if(c == string[j])\n            {\n                count++;\n     \
    \       }\n        }\n    }\n    return count;\n}\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n  \
    \          if(c == string[j])\n            {\n                count++;\n     \
    \       }\n        }\n    }\n    return count;\n}\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n  \
    \          if(c == string[j])\n            {\n                count++;\n     \
    \       }\n        }\n    }\n    return count;\n}\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n  \
    \          if(c == string[j])\n            {\n                count++;\n     \
    \       }\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n \
    \   assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1_346f6u.d(119): Error: found \''unittest\'' instead of statement\n/tmp/tmp1_346f6u.d(129):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmp1_346f6u.d(129):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1_346f6u.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n\tlong count\
    \ = 0;\n\tfor (int i = 0; i < string.length; i++) \n\t{\n\t\tfor (int j = i; j\
    \ < string.length; j++) \n\t\t{\n\t\t\tif (string[i] == string[j]) \n\t\t\t{\n\
    \t\t\t\tcount++;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n\
    {\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqunslu25.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string.at(i);\n        \n        for(int j = i+1; j < string.length(); j++)\n\
    \        {\n            if(string.at(j) == c)\n            {\n               \
    \ count++;\n                break;\n            }\n        }\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n\
    \    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt5s_r_99.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        if(!std.isAlpha(c))\n        {\n            count++;\n \
    \       }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpil0e4o6d.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n  \
    \          char d = string[j];\n            if(c != d)\n            {\n      \
    \          count++;\n                break;\n            }\n        }\n    }\n\
    \    return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                count++;\n                break;\n            }\n\
    \        }\n    }\n    return count;\n}\n/*\n Given a string, find out how many\
    \ distinct characters (regardless of case) does it consist of\n            \n\
    */\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n\
    \        for(int j = 0; j < string.length(); j++)\n        {\n            char\
    \ d = string[j];\n            if(c != d)\n            {\n                count++;\n\
    \                break;\n            }\n        }\n    }\n    return count;\n\
    }\n/*\n Given a string, find out how many distinct characters (regardless of case)\
    \ does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                count++;\n                break;\n            }\n\
    \        }\n    }\n    return count;\n}\n/*\n Given a string, find out how many\
    \ distinct characters (regardless of case) does it consist of\n            \n\
    */\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n\
    \        for(int j = 0; j < string.length(); j++)\n        {\n            char\
    \ d = string[j];\n            if(c != d)\n            {\n                count++;\n\
    \                break;\n            }\n        }\n    }\n    return count;\n\
    }\n/*\n Given a string, find out how many distinct characters (regardless of case)\
    \ does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length()\nunittest\n\
    {\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprdsg95g0.d(121): Error: found \''unittest\'' when expecting
    \'';\'' following for condition\n/tmp/tmprdsg95g0.d(131): Error: found \''void\''
    when expecting \'')\''\n/tmp/tmprdsg95g0.d(131): Error: found \''{\'' when expecting
    \'';\'' following statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprdsg95g0.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n\tlong count\
    \ = 0;\n\t\n\tfor (int i = 0; i < string.length(); i++)\n\t{\n\t\tchar c = string[i];\n\
    \t\t\n\t\tfor (int j = 0; j < string.length(); j++)\n\t\t{\n\t\t\tif (i == j)\n\
    \t\t\t\tcontinue;\n\t\t\t\n\t\t\tchar d = string[j];\n\t\t\t\n\t\t\tif (c != d)\n\
    \t\t\t\tbreak;\n\t\t\t\n\t\t\tcount++;\n\t\t}\n\t}\n\t\n\treturn count;\n}\nunittest\n\
    {\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp62r1n5ac.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    foreach(char c in string) \n    {\n        if(!std.algorithm.contains(string.chars,\
    \ c)) \n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\n</code>\n<|/ a tags=string,c++,algorithm |>\n<| a dscore=0 |>\n<code>\n#include\
    \ <iostream>\n#include <string>\nusing namespace std;\nunittest\n{\n    alias\
    \ candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n\
    \    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\"\
    ) == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"\
    Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpp4qkkec_.d(10): Error: found \''in\'' when expecting \'';\''\n/tmp/tmpp4qkkec_.d(19):
    Error: Declaration expected, not \''<\''\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpp4qkkec_.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n  \
    \          char d = string[j];\n            if(c != d)\n            {\n      \
    \          break;\n            }\n        }\n        count++;\n    }\n    return\
    \ count;\n}\n/*\n Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n        }\n        count++;\n\
    \    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n        }\n        count++;\n\
    \    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n        }\n        count++;\n\
    \    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n        }\n        count++;\n\
    \    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        \nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpmg83rxa_.d(123): Error: found \''unittest\'' instead of statement\n/tmp/tmpmg83rxa_.d(133):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmg83rxa_.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length; i++)\n    {\n        char c = string[i];\n\
    \        if(!std.isLower(c))\n            count++;\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplkaf0248.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n  \
    \          char d = string[j];\n            if(c != d)\n            {\n      \
    \          break;\n            }\n            else\n            {\n          \
    \      count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprjgr2tox.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n\tlong count\
    \ = 0;\n\tfor (int i = 0; i < string.length(); i++)\n\t{\n\t\tchar c = string[i];\n\
    \t\tfor (int j = 0; j < string.length(); j++)\n\t\t{\n\t\t\tif (i != j)\n\t\t\t\
    {\n\t\t\t\tif (string[i] == string[j])\n\t\t\t\t{\n\t\t\t\t\tcount++;\n\t\t\t\t\
    \tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n  \
    \  alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\")\
    \ == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\"\
    ) == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"\
    Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfrm1nh0w.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string.at(i);\n        for(int j = 0; j < string.length(); j++)\n        {\n\
    \            char d = string.at(j);\n            if(c != d)\n            {\n \
    \               break;\n            }\n        }\n        count++;\n    }\n  \
    \  return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3mp3ryvp.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length; i++)\n    {\n        char c = string[i];\n\
    \        for(int j = i + 1; j < string.length; j++)\n        {\n            char\
    \ d = string[j];\n            if(c != d)\n            {\n                break;\n\
    \            }\n            else\n            {\n                count++;\n  \
    \          }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"\
    abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"\
    aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyz69ltnn.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = i; j < string.length(); j++)\n        {\n  \
    \          char d = string[j];\n            if(c != d)\n            {\n      \
    \          break;\n            }\n        }\n        count++;\n    }\n    return\
    \ count;\n}\n/*\n Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = i; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n        }\n        count++;\n\
    \    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = i; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n        }\n        count++;\n\
    \    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = i; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n        }\n        count++;\n\
    \    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = i; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n        }\n        count++;\n\
    \    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpx13tcgo8.d(120): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx13tcgo8.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n  \
    \          char d = string[j];\n            if(c != d)\n            {\n      \
    \          if(c >= 'a' && c <= 'z')\n                {\n                    if(d\
    \ >= 'a' && d <= 'z')\n                    {\n                        if(c !=\
    \ d)\n                        {\n                            count++;\n      \
    \                  }\n                    }\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\n/*\n Given a string, find out how many\
    \ distinct characters (regardless of case) does it consist of\n            \n\
    */\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n\
    \        for(int j = 0; j < string.length(); j++)\n        {\n            char\
    \ d = string[j];\n            if(c != d)\n            {\n                if(c\
    \ >= 'a' && c <= 'z')\n                {\n                    if(d >= 'a' && d\
    \ <= 'z')\n                    {\n                        if(c != d)\n       \
    \                 {\n                            count++;\n                  \
    \      }\n                    }\n                }\n            }\n        }\n\
    \    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                if(c >= 'a' && c <= 'z')\n                {\n \
    \                   if(d >= 'a' && d <= 'z')\n                    {\n        \
    \                if(c != d)\n                        {\n                     \
    \       count++;\n                        }\n                    }\n         \
    \       }\n            }\n        }\n    }\n    return count;\n}\n/*\n Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n            \n*/\nlong count_distinct_characters(string string) \n{\n  \
    \  long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n    \
    \    char c = string[i];\n        for(int j = 0; j < string.length(); j++)\n \
    \       {\n            char d = string[j];\n            if(c != d)\n         \
    \   {\n                if(c >= 'a' && c <= 'z')\n                {\n         \
    \           if(d >= 'a' && d <= 'z')\n                    {\n                \
    \        if(c != d)\n                        {\n                            \n\
    unittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpyiielqmk.d(115): Error: found \''unittest\'' instead of statement\n/tmp/tmpyiielqmk.d(125):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmpyiielqmk.d(125):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmpyiielqmk.d(125):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmpyiielqmk.d(125):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmpyiielqmk.d(125):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmpyiielqmk.d(125):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyiielqmk.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        if(!std.isAlpha(c))\n        {\n            count++;\n \
    \       }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpil0e4o6d.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        if(!std.isAlpha(c))\n        {\n            count++;\n \
    \       }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpil0e4o6d.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n  \
    \          char d = string[j];\n            if(c != d)\n            {\n      \
    \          break;\n            }\n        }\n        count++;\n    }\n    return\
    \ count;\n}\n/*\n Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n        }\n        count++;\n\
    \    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n        }\n        count++;\n\
    \    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n        }\n        count++;\n\
    \    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n        }\n        count++;\n\
    \    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        \nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpmg83rxa_.d(123): Error: found \''unittest\'' instead of statement\n/tmp/tmpmg83rxa_.d(133):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmg83rxa_.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    foreach(char c in string)\n    {\n        count += 1;\n    }\n   \
    \ return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmplmgifgnv.d(10): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplmgifgnv.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string.at(i);\n        if(!std.ctype.isLower(c))\n            count += 1;\n\
    \    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string.at(i);\n        if(!std.ctype.isLower(c))\n  \
    \          count += 1;\n    }\n    return count;\n}\n/*\n Given a string, find\
    \ out how many distinct characters (regardless of case) does it consist of\n \
    \           \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char\
    \ c = string.at(i);\n        if(!std.ctype.isLower(c))\n            count += 1;\n\
    \    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string.at(i);\n        if(!std.ctype.isLower(c))\n  \
    \          count += 1;\n    }\n    return count;\n}\n/*\n Given a string, find\
    \ out how many distinct characters (regardless of case) does it consist of\n \
    \           \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char\
    \ c = string.at(i);\n        if(!std.ctype.isLower(c))\n            count += 1;\n\
    \    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string.at(i);\n        if(!std.ctype.isLower(c))\n  \
    \          count += 1;\n    }\n    return count;\n}\n/*\n Given a string, find\
    \ out how many distinct characters (regardless of case) does it consist of\n \
    \           \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char\
    \ c = string.\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpky2qzltf.d(103): Error: identifier expected following \''.\'',
    not \''unittest\''\n/tmp/tmpky2qzltf.d(104): Error: semicolon expected, not \''{\''\n/tmp/tmpky2qzltf.d(113):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmpky2qzltf.d(113):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpky2qzltf.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        if(!std.typecons.isUpper(c))\n        {\n            count++;\n\
    \        }\n    }\n    return count;\n}\n/*\n Given a string, find out how many\
    \ distinct characters (regardless of case) does it consist of\n            \n\
    */\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n\
    \        if(!std.typecons.isUpper(c))\n        {\n            count++;\n     \
    \   }\n    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        if(!std.typecons.isUpper(c))\n  \
    \      {\n            count++;\n        }\n    }\n    return count;\n}\n/*\n Given\
    \ a string, find out how many distinct characters (regardless of case) does it\
    \ consist of\n            \n*/\nlong count_distinct_characters(string string)\
    \ \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n   \
    \ {\n        char c = string[i];\n        if(!std.typecons.isUpper(c))\n     \
    \   {\n            count++;\n        }\n    }\n    return count;\n}\n/*\n Given\
    \ a string, find out how many distinct characters (regardless of case) does it\
    \ consist of\n            \n*/\nlong count_distinct_characters(string string)\
    \ \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n   \
    \ {\n        char c = string[i];\n        if(!std.typecons.isUpper(c))\n     \
    \   {\n            count++;\n        }\n    }\n    return count;\n}\n/*\n Given\
    \ a string, find out how many distinct characters (regardless of case) does it\
    \ consist of\n            \n*/\nlong count_distinct_characters(string string)\
    \ \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n   \
    \ {\n        char c = string[i];\n        if(!std.typecons.isUpper(c))\n     \
    \   {\n            count++;\n        }\n    }\n    return count;\n}\n/*\n Given\
    \ a string, find out how many distinct characters (regardless of case) does it\
    \ consist of\n            \n*/\nlong count_distinct_characters(string string)\
    \ \n{\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n   \
    \ assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n  \
    \  assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpyuv1kcif.d(112): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyuv1kcif.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        if(!std.typecons.isUpper(c))\n        {\n            count++;\n\
    \        }\n    }\n    return count;\n}\n/*\n Given a string, find out how many\
    \ distinct characters (regardless of case) does it consist of\n            \n\
    */\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n\
    \        if(!std.typecons.isUpper(c))\n        {\n            count++;\n     \
    \   }\n    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        if(!std.typecons.isUpper(c))\n  \
    \      {\n            count++;\n        }\n    }\n    return count;\n}\n/*\n Given\
    \ a string, find out how many distinct characters (regardless of case) does it\
    \ consist of\n            \n*/\nlong count_distinct_characters(string string)\
    \ \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n   \
    \ {\n        char c = string[i];\n        if(!std.typecons.isUpper(c))\n     \
    \   {\n            count++;\n        }\n    }\n    return count;\n}\n/*\n Given\
    \ a string, find out how many distinct characters (regardless of case) does it\
    \ consist of\n            \n*/\nlong count_distinct_characters(string string)\
    \ \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n   \
    \ {\n        char c = string[i];\n        if(!std.typecons.isUpper(c))\n     \
    \   {\n            count++;\n        }\n    }\n    return count;\n}\n/*\n Given\
    \ a string, find out how many distinct characters (regardless of case) does it\
    \ consist of\n            \n*/\nlong count_distinct_characters(string string)\
    \ \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n   \
    \ {\n        char c = string[i];\n        if(!std.typecons.isUpper(c))\n     \
    \   {\n            count++;\n        }\n    }\n    return count;\n}\n/*\n Given\
    \ a string, find out how many distinct characters (regardless of case) does it\
    \ consist of\n            \n*/\nlong count_distinct_characters(string string)\
    \ \n{\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n   \
    \ assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n  \
    \  assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpyuv1kcif.d(112): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyuv1kcif.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n  \
    \          char d = string[j];\n            if(c != d)\n            {\n      \
    \          break;\n            }\n        }\n        count++;\n    }\n    return\
    \ count;\n}\n/*\n Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n        }\n        count++;\n\
    \    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n        }\n        count++;\n\
    \    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n        }\n        count++;\n\
    \    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n        }\n        count++;\n\
    \    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        \nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpmg83rxa_.d(123): Error: found \''unittest\'' instead of statement\n/tmp/tmpmg83rxa_.d(133):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmg83rxa_.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        if(!std.typecons.isUpper(c))\n        {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppxk5otsy.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n  \
    \          char d = string[j];\n            if(c != d)\n            {\n      \
    \          break;\n            }\n        }\n        count++;\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n\
    \    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy70wsggc.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = i+1; j < string.length(); j++)\n        {\n\
    \            if(string[j] == c)\n            {\n                count++;\n   \
    \             break;\n            }\n        }\n    }\n    return count;\n}\n\
    unittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn07_3pb8.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        if(!std.typecons.isUpper(c))\n        {\n            count++;\n\
    \        }\n    }\n    return count;\n}\n/*\n Given a string, find out how many\
    \ distinct characters (regardless of case) does it consist of\n            \n\
    */\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n\
    \        if(!std.typecons.isUpper(c))\n        {\n            count++;\n     \
    \   }\n    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        if(!std.typecons.isUpper(c))\n  \
    \      {\n            count++;\n        }\n    }\n    return count;\n}\n/*\n Given\
    \ a string, find out how many distinct characters (regardless of case) does it\
    \ consist of\n            \n*/\nlong count_distinct_characters(string string)\
    \ \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n   \
    \ {\n        char c = string[i];\n        if(!std.typecons.isUpper(c))\n     \
    \   {\n            count++;\n        }\n    }\n    return count;\n}\n/*\n Given\
    \ a string, find out how many distinct characters (regardless of case) does it\
    \ consist of\n            \n*/\nlong count_distinct_characters(string string)\
    \ \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n   \
    \ {\n        char c = string[i];\n        if(!std.typecons.isUpper(c))\n     \
    \   {\n            count++;\n        }\n    }\n    return count;\n}\n/*\n Given\
    \ a string, find out how many distinct characters (regardless of case) does it\
    \ consist of\n            \n*/\nlong count_distinct_characters(string string)\
    \ \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n   \
    \ {\n        char c = string[i];\n        if(!std.typecons.isUpper(c))\n     \
    \   {\n            count++;\n        }\n    }\n    return count;\n}\n/*\n Given\
    \ a string, find out how many distinct characters (regardless of case) does it\
    \ consist of\n            \n*/\nlong count_distinct_characters(string string)\
    \ \n{\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n   \
    \ assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n  \
    \  assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpyuv1kcif.d(112): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyuv1kcif.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n  \
    \          if(c == string[j])\n            {\n                count++;\n     \
    \           break;\n            }\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8jzdfe6e.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    foreach(char c in string) \n    {\n        count += 1;\n    }\n  \
    \  return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    foreach(char c in string) \n    {\n  \
    \      count += 1;\n    }\n    return count;\n}\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    foreach(char c in string) \n    {\n        count += 1;\n    }\n  \
    \  return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    foreach(char c in string) \n    {\n  \
    \      count += 1;\n    }\n    return count;\n}\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    foreach(char c in string) \n    {\n        count += 1;\n    }\n  \
    \  return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    foreach(char c in string) \n    {\n  \
    \      count += 1;\n    }\n    return count;\n}\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    foreach(char c in string) \n    {\n        count += 1;\n    }\n  \
    \  return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    foreach(char c in string) \n    {\n  \
    \      count += 1;\n    }\n    return count;\n}\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n\nunittest\n{\n\
    \    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\"\
    ) == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\"\
    ) == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"\
    Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxf6hhxrj.d(10): Error: found \''in\'' when expecting \'';\''\n/tmp/tmpxf6hhxrj.d(23):
    Error: found \''in\'' when expecting \'';\''\n/tmp/tmpxf6hhxrj.d(36): Error: found
    \''in\'' when expecting \'';\''\n/tmp/tmpxf6hhxrj.d(49): Error: found \''in\''
    when expecting \'';\''\n/tmp/tmpxf6hhxrj.d(62): Error: found \''in\'' when expecting
    \'';\''\n/tmp/tmpxf6hhxrj.d(75): Error: found \''in\'' when expecting \'';\''\n/tmp/tmpxf6hhxrj.d(88):
    Error: found \''in\'' when expecting \'';\''\n/tmp/tmpxf6hhxrj.d(101): Error:
    found \''in\'' when expecting \'';\''\n/tmp/tmpxf6hhxrj.d(113): Error: semicolon
    expected following function declaration\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpxf6hhxrj.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n  \
    \          char d = string[j];\n            if(c != d)\n            {\n      \
    \          count++;\n                break;\n            }\n        }\n    }\n\
    \    return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                count++;\n                break;\n            }\n\
    \        }\n    }\n    return count;\n}\n/*\n Given a string, find out how many\
    \ distinct characters (regardless of case) does it consist of\n            \n\
    */\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n\
    \        for(int j = 0; j < string.length(); j++)\n        {\n            char\
    \ d = string[j];\n            if(c != d)\n            {\n                count++;\n\
    \                break;\n            }\n        }\n    }\n    return count;\n\
    }\n/*\n Given a string, find out how many distinct characters (regardless of case)\
    \ does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                count++;\n                break;\n            }\n\
    \        }\n    }\n    return count;\n}\n/*\n Given a string, find out how many\
    \ distinct characters (regardless of case) does it consist of\n            \n\
    */\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n\
    \        for(int j = 0; j < string.length(); j++)\n        {\n            char\
    \ d = string[j];\n            if(c != d)\n            {\n                count++;\n\
    \                break;\n            }\n        }\n    }\n    return count;\n\
    }\n/*\n Given a string, find out how many distinct characters (regardless of case)\
    \ does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length()\nunittest\n\
    {\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprdsg95g0.d(121): Error: found \''unittest\'' when expecting
    \'';\'' following for condition\n/tmp/tmprdsg95g0.d(131): Error: found \''void\''
    when expecting \'')\''\n/tmp/tmprdsg95g0.d(131): Error: found \''{\'' when expecting
    \'';\'' following statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprdsg95g0.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        if(!std.isAlpha(c))\n        {\n            count++;\n \
    \       }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpil0e4o6d.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        if(!std.isAlpha(c))\n        {\n            count++;\n \
    \       }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpil0e4o6d.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n  \
    \          char d = string[j];\n            if(c != d)\n            {\n      \
    \          break;\n            }\n            else\n            {\n          \
    \      count++;\n            }\n        }\n    }\n    return count;\n}\n/*\n Given\
    \ a string, find out how many distinct characters (regardless of case) does it\
    \ consist of\n            \n*/\nlong count_distinct_characters(string string)\
    \ \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n   \
    \ {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n            else\n     \
    \       {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}\n/*\n Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n            else\n     \
    \       {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}\n/*\n Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n            else\n     \
    \       {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}\n/*\n Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n            else\n     \
    \       {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}\n/*\n Given a string, find out how many distinct characters (regardles\n\
    unittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpfvjewo_8.d(128): Error: unterminated /* */ comment\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfvjewo_8.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = i+1; j < string.length(); j++)\n        {\n\
    \            char d = string[j];\n            if(c == d)\n            {\n    \
    \            count++;\n            }\n        }\n    }\n    return count;\n}\n\
    /*\n Given a string, find out how many distinct characters (regardless of case)\
    \ does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = i+1; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c == d)\n \
    \           {\n                count++;\n            }\n        }\n    }\n   \
    \ return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = i+1; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c == d)\n \
    \           {\n                count++;\n            }\n        }\n    }\n   \
    \ return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = i+1; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c == d)\n \
    \           {\n                count++;\n            }\n        }\n    }\n   \
    \ return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = i+1; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c == d)\n \
    \           {\n                count++;\n            }\n        }\n    }\n   \
    \ return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpfo09peoe.d(115): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfo09peoe.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n\tlong count\
    \ = 0;\n\tfor (int i = 0; i < string.length(); i++)\n\t{\n\t\tchar c = string[i];\n\
    \t\tif (isupper(c))\n\t\t\tcount++;\n\t\telse if (islower(c))\n\t\t\tcount++;\n\
    \t\telse\n\t\t\tcount++;\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate\
    \ = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"\
    abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"\
    aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvad1g0pb.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        if(!std.typecons.isUpper(c))\n            count++;\n   \
    \ }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyad47kgl.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n  \
    \          char d = string[j];\n            if(c != d)\n            {\n      \
    \          break;\n            }\n        }\n        count++;\n    }\n    return\
    \ count;\n}\n/*\n Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n        }\n        count++;\n\
    \    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n        }\n        count++;\n\
    \    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n        }\n        count++;\n\
    \    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n        }\n        count++;\n\
    \    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        \nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpmg83rxa_.d(123): Error: found \''unittest\'' instead of statement\n/tmp/tmpmg83rxa_.d(133):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmg83rxa_.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n  \
    \          char d = string[j];\n            if(c != d)\n            {\n      \
    \          count++;\n                break;\n            }\n        }\n    }\n\
    \    return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                count++;\n                break;\n            }\n\
    \        }\n    }\n    return count;\n}\n/*\n Given a string, find out how many\
    \ distinct characters (regardless of case) does it consist of\n            \n\
    */\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n\
    \        for(int j = 0; j < string.length(); j++)\n        {\n            char\
    \ d = string[j];\n            if(c != d)\n            {\n                count++;\n\
    \                break;\n            }\n        }\n    }\n    return count;\n\
    }\n/*\n Given a string, find out how many distinct characters (regardless of case)\
    \ does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                count++;\n                break;\n            }\n\
    \        }\n    }\n    return count;\n}\n/*\n Given a string, find out how many\
    \ distinct characters (regardless of case) does it consist of\n            \n\
    */\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n\
    \        for(int j = 0; j < string.length(); j++)\n        {\n            char\
    \ d = string[j];\n            if(c != d)\n            {\n                count++;\n\
    \                break;\n            }\n        }\n    }\n    return count;\n\
    }\n/*\n Given a string, find out how many distinct characters (regardless of case)\
    \ does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length()\nunittest\n\
    {\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprdsg95g0.d(121): Error: found \''unittest\'' when expecting
    \'';\'' following for condition\n/tmp/tmprdsg95g0.d(131): Error: found \''void\''
    when expecting \'')\''\n/tmp/tmprdsg95g0.d(131): Error: found \''{\'' when expecting
    \'';\'' following statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprdsg95g0.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n\tlong count\
    \ = 0;\n\tfor (int i = 0; i < string.length(); i++)\n\t{\n\t\tchar c = string[i];\n\
    \t\tif (std.ctype.isUpper(c))\n\t\t\tcount++;\n\t\telse\n\t\t\tcount += 2;\n\t\
    }\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfqryewst.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        for(int j\
    \ = i+1; j < string.length(); j++)\n        {\n            if(string[i] == string[j])\n\
    \            {\n                count++;\n            }\n        }\n    }\n  \
    \  return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        for(int j = i+1; j < string.length(); j++)\n        {\n      \
    \      if(string[i] == string[j])\n            {\n                count++;\n \
    \           }\n        }\n    }\n    return count;\n}\n/*\n Given a string, find\
    \ out how many distinct characters (regardless of case) does it consist of\n \
    \           \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        for(int\
    \ j = i+1; j < string.length(); j++)\n        {\n            if(string[i] == string[j])\n\
    \            {\n                count++;\n            }\n        }\n    }\n  \
    \  return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        for(int j = i+1; j < string.length(); j++)\n        {\n      \
    \      if(string[i] == string[j])\n            {\n                count++;\n \
    \           }\n        }\n    }\n    return count;\n}\n/*\n Given a string, find\
    \ out how many distinct characters (regardless of case) does it consist of\n \
    \           \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        for(int\
    \ j = i+1; j < string.length(); j++)\n        {\n            if(string[i] == string[j])\n\
    \            {\n                count++;\n            }\n        }\n    }\n  \
    \  return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        for(int j = i+1; j < string.length(); j++)\n        {\n      \
    \      if(string[i] == string[j])\n            {\n                count++;\n \
    \           }\n        }\n    }\n    return count;\n}\n/*\n Given a string, find\
    \ out how many distinct characters (regardless of \nunittest\n{\n    alias candidate\
    \ = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"\
    abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"\
    aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpi302z8aq.d(117): Error: unterminated /* */ comment\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi302z8aq.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        if(!std.isLower(c) && !std.isUpper(c))\n        {\n    \
    \        count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n\
    \    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\"\
    ) == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"\
    Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp37paosm5.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    foreach(char c in string)\n    {\n        if(!std.isAlpha(c))\n  \
    \      {\n            count += 1;\n        }\n    }\n    return count;\n}\n/*\n\
    \ Given a string, find out how many distinct characters (regardless of case) does\
    \ it consist of\n            \n*/\nlong count_distinct_characters(string string)\
    \ \n{\n    long count = 0;\n    foreach(char c in string)\n    {\n        if(!std.isAlpha(c))\n\
    \        {\n            count += 1;\n        }\n    }\n    return count;\n}\n\
    /*\n Given a string, find out how many distinct characters (regardless of case)\
    \ does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    foreach(char c in string)\n    {\n   \
    \     if(!std.isAlpha(c))\n        {\n            count += 1;\n        }\n   \
    \ }\n    return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    foreach(char c in string)\n    {\n   \
    \     if(!std.isAlpha(c))\n        {\n            count += 1;\n        }\n   \
    \ }\n    return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    foreach(char c in string)\n    {\n   \
    \     if(!std.isAlpha(c))\n        {\n            count += 1;\n        }\n   \
    \ }\n    return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    foreach(char c in string)\n    {\n   \
    \     if(!std.isAlpha(c))\n        {\n            count += 1;\n        }\n   \
    \ }\n    return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    foreach(char c in string)\n    {\n   \
    \     if(!std.isAlpha(c))\n        {\n            count += 1;\n        }\n   \
    \ }\n    return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) \nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpee_nd77u.d(10): Error: found \''in\'' when expecting \'';\''\n/tmp/tmpee_nd77u.d(26):
    Error: found \''in\'' when expecting \'';\''\n/tmp/tmpee_nd77u.d(42): Error: found
    \''in\'' when expecting \'';\''\n/tmp/tmpee_nd77u.d(58): Error: found \''in\''
    when expecting \'';\''\n/tmp/tmpee_nd77u.d(74): Error: found \''in\'' when expecting
    \'';\''\n/tmp/tmpee_nd77u.d(90): Error: found \''in\'' when expecting \'';\''\n/tmp/tmpee_nd77u.d(106):
    Error: found \''in\'' when expecting \'';\''\n/tmp/tmpee_nd77u.d(115): Error:
    unterminated /* */ comment\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpee_nd77u.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        if(!std.isAlpha(c))\n        {\n            count++;\n \
    \       }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpil0e4o6d.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n  \
    \          if(string[i] == string[j])\n            {\n                count++;\n\
    \            }\n        }\n    }\n    return count;\n}\n/*\n Given a string, find\
    \ out how many distinct characters (regardless of case) does it consist of\n \
    \           \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char\
    \ c = string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n\
    \            if(string[i] == string[j])\n            {\n                count++;\n\
    \            }\n        }\n    }\n    return count;\n}\n/*\n Given a string, find\
    \ out how many distinct characters (regardless of case) does it consist of\n \
    \           \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char\
    \ c = string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n\
    \            if(string[i] == string[j])\n            {\n                count++;\n\
    \            }\n        }\n    }\n    return count;\n}\n/*\n Given a string, find\
    \ out how many distinct characters (regardless of case) does it consist of\n \
    \           \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char\
    \ c = string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n\
    \            if(string[i] == string[j])\n            {\n                count++;\n\
    \            }\n        }\n    }\n    return count;\n}\n/*\n Given a string, find\
    \ out how many distinct characters (regardless of case) does it consist of\n \
    \           \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char\
    \ c = string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n\
    \            if(string[i] == string[j])\n            {\n                count++;\n\
    \            }\n        }\n    }\n    return count;\n}\n/*\n Given a string, find\
    \ out how many distinct characters (regardless of case) does it consist of\n \
    \           \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char\
    \ c = string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n\
    \            if(string[i] == string[j])\n            {\n                count++;\n\
    \            }\n        }\n    }\n    return \nunittest\n{\n    alias candidate\
    \ = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"\
    abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"\
    aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpsu1exi3o.d(122): Error: expression expected, not \''unittest\''\n/tmp/tmpsu1exi3o.d(123):
    Error: found \''{\'' when expecting \'';\'' following return statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsu1exi3o.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        if(!std.typecons.isUpper(c))\n            count++;\n   \
    \ }\n    return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        if(!std.typecons.isUpper(c))\n  \
    \          count++;\n    }\n    return count;\n}\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        if(!std.typecons.isUpper(c))\n            count++;\n   \
    \ }\n    return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        if(!std.typecons.isUpper(c))\n  \
    \          count++;\n    }\n    return count;\n}\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        if(!std.typecons.isUpper(c))\n            count++;\n   \
    \ }\n    return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        if(!std.typecons.isUpper(c))\n  \
    \          count++;\n    }\n    return count;\n}\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        if(!std.\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0f_e8lfj.d(104): Error: identifier expected following \''.\'',
    not \''unittest\''\n/tmp/tmp0f_e8lfj.d(105): Error: found \''{\'' when expecting
    \'')\''\n/tmp/tmp0f_e8lfj.d(114): Error: found \''EOF\'' when expecting \''}\''
    following compound statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0f_e8lfj.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n  \
    \          char d = string[j];\n            if(c != d)\n            {\n      \
    \          break;\n            }\n            else\n            {\n          \
    \      count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprjgr2tox.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string.at(i);\n        if(!std.algorithm.contains(string.begin(), string.end(),\
    \ c))\n            count++;\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n\
    \    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\"\
    ) == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"\
    Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppoha74jd.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = i+1; j < string.length(); j++)\n        {\n\
    \            if(string[j] == c)\n            {\n                count++;\n   \
    \             break;\n            }\n        }\n    }\n    return count;\n}\n\
    /*\n Given a string, find out how many distinct characters (regardless of case)\
    \ does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = i+1; j < string.length();\
    \ j++)\n        {\n            if(string[j] == c)\n            {\n           \
    \     count++;\n                break;\n            }\n        }\n    }\n    return\
    \ count;\n}\n/*\n Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = i+1; j < string.length();\
    \ j++)\n        {\n            if(string[j] == c)\n            {\n           \
    \     count++;\n                break;\n            }\n        }\n    }\n    return\
    \ count;\n}\n/*\n Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = i+1; j < string.length();\
    \ j++)\n        {\n            if(string[j] == c)\n            {\n           \
    \     count++;\n                break;\n            }\n        }\n    }\n    return\
    \ count;\n}\n/*\n Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = i+1; j < string.length();\
    \ j++)\n        {\n            if(string[j] == c)\n            {\n           \
    \     count++;\n                break;\n            }\n        }\n    }\n    return\
    \ count;\n}\n/*\n Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = i+1; \nunittest\n{\n\
    \    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\"\
    ) == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\"\
    ) == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"\
    Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpq5jgbb7k.d(119): Error: expression expected, not \''unittest\''\n/tmp/tmpq5jgbb7k.d(120):
    Error: found \''{\'' when expecting \'';\'' following for condition\n/tmp/tmpq5jgbb7k.d(121):
    Error: expression expected, not \''alias\''\n/tmp/tmpq5jgbb7k.d(121): Error: found
    \''candidate\'' when expecting \'')\''\n/tmp/tmpq5jgbb7k.d(121): Error: found
    \''=\'' instead of statement\n/tmp/tmpq5jgbb7k.d(129): Error: found \''EOF\''
    when expecting \''}\'' following compound statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpq5jgbb7k.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n  \
    \          if(string[i] == string[j])\n            {\n                count++;\n\
    \            }\n        }\n    }\n    return count;\n}\n/*\n Given a string, find\
    \ out how many distinct characters (regardless of case) does it consist of\n \
    \           \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char\
    \ c = string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n\
    \            if(string[i] == string[j])\n            {\n                count++;\n\
    \            }\n        }\n    }\n    return count;\n}\n/*\n Given a string, find\
    \ out how many distinct characters (regardless of case) does it consist of\n \
    \           \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char\
    \ c = string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n\
    \            if(string[i] == string[j])\n            {\n                count++;\n\
    \            }\n        }\n    }\n    return count;\n}\n/*\n Given a string, find\
    \ out how many distinct characters (regardless of case) does it consist of\n \
    \           \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char\
    \ c = string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n\
    \            if(string[i] == string[j])\n            {\n                count++;\n\
    \            }\n        }\n    }\n    return count;\n}\n/*\n Given a string, find\
    \ out how many distinct characters (regardless of case) does it consist of\n \
    \           \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char\
    \ c = string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n\
    \            if(string[i] == string[j])\n            {\n                count++;\n\
    \            }\n        }\n    }\n    return count;\n}\n/*\n Given a string, find\
    \ out how many distinct characters (regardless of case) does it consist of\n \
    \           \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char\
    \ c = string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n\
    \            if(string[i] == string[j])\n            {\n                count++;\n\
    \            }\n        }\n    }\n    return \nunittest\n{\n    alias candidate\
    \ = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"\
    abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"\
    aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpsu1exi3o.d(122): Error: expression expected, not \''unittest\''\n/tmp/tmpsu1exi3o.d(123):
    Error: found \''{\'' when expecting \'';\'' following return statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsu1exi3o.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        if(!std.isAlpha(c))\n        {\n            count++;\n \
    \       }\n    }\n    return count;\n}\n/*\n Given a string, find out how many\
    \ distinct characters (regardless of case) does it consist of\n            \n\
    */\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n\
    \        if(!std.isAlpha(c))\n        {\n            count++;\n        }\n   \
    \ }\n    return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        if(!std.isAlpha(c))\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}\n/*\n Given a string,\
    \ find out how many distinct characters (regardless of case) does it consist of\n\
    \            \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char\
    \ c = string[i];\n        if(!std.isAlpha(c))\n        {\n            count++;\n\
    \        }\n    }\n    return count;\n}\n/*\n Given a string, find out how many\
    \ distinct characters (regardless of case) does it consist of\n            \n\
    */\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n\
    \        if(!std.isAlpha(c))\n        {\n            count++;\n        }\n   \
    \ }\n    return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        if(!std.isAlpha(c))\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}\n/*\n Given a string,\
    \ find out how many distinct characters (regardless of case) does it consist of\n\
    \            \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char\
    \ c = string\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n\
    \    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphhknn5vr.d(115): Error: semicolon expected, not \''unittest\''\n/tmp/tmphhknn5vr.d(115):
    Error: found \''unittest\'' instead of statement\n/tmp/tmphhknn5vr.d(125): Error:
    found \''EOF\'' when expecting \''}\'' following compound statement\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmphhknn5vr.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        if(!std.isAlpha(c))\n        {\n            count += 1;\n\
    \        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb0hbyp5b.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n\tlong count\
    \ = 0;\n\tfor (int i = 0; i < string.length(); i++)\n\t{\n\t\tchar c = string[i];\n\
    \t\tfor (int j = 0; j < string.length(); j++)\n\t\t{\n\t\t\tif (i == j)\n\t\t\t\
    \tcontinue;\n\t\t\tchar d = string[j];\n\t\t\tif (c != d)\n\t\t\t\tbreak;\n\t\t\
    }\n\t\tcount++;\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6ptbcbkd.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string.at(i);\n        if(!std.isAlpha(c))\n        {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa03rm5k_.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n\tlong count\
    \ = 0;\n\tfor(int i = 0; i < string.length(); i++)\n\t{\n\t\tchar c = string[i];\n\
    \t\tfor(int j = 0; j < string.length(); j++)\n\t\t{\n\t\t\tif(string[i] == string[j])\n\
    \t\t\t{\n\t\t\t\tcount++;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n\
    }\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyf7lm772.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n  \
    \          char d = string[j];\n            if(c != d)\n            {\n      \
    \          break;\n            }\n        }\n        count++;\n    }\n    return\
    \ count;\n}\n/*\n Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n        }\n        count++;\n\
    \    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n        }\n        count++;\n\
    \    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n        }\n        count++;\n\
    \    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n        }\n        count++;\n\
    \    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        \nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpmg83rxa_.d(123): Error: found \''unittest\'' instead of statement\n/tmp/tmpmg83rxa_.d(133):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmg83rxa_.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = i; j < string.length(); j++)\n        {\n  \
    \          char d = string[j];\n            if(c != d)\n            {\n      \
    \          break;\n            }\n            count++;\n        }\n    }\n   \
    \ return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = i; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n            count++;\n \
    \       }\n    }\n    return count;\n}\n/*\n Given a string, find out how many\
    \ distinct characters (regardless of case) does it consist of\n            \n\
    */\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n\
    \        for(int j = i; j < string.length(); j++)\n        {\n            char\
    \ d = string[j];\n            if(c != d)\n            {\n                break;\n\
    \            }\n            count++;\n        }\n    }\n    return count;\n}\n\
    /*\n Given a string, find out how many distinct characters (regardless of case)\
    \ does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = i; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n            count++;\n \
    \       }\n    }\n    return count;\n}\n/*\n Given a string, find out how many\
    \ distinct characters (regardless of case) does it consist of\n            \n\
    */\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n\
    \        for(int j = i; j < string.length(); j++)\n        {\n            char\
    \ d = string[j];\n            if(c != d)\n            {\n                break;\n\
    \            }\n            count++;\n        }\n    }\n    return count;\n}\n\
    /*\n Given a string, find out how many distinct characters (regardless of case)\
    \ does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ \nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpiqvfwpo3.d(118): Error: found \''unittest\'' when expecting
    \'')\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiqvfwpo3.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length; i++)\n    {\n        char c = string[i];\n\
    \        for(int j = 0; j < string.length; j++)\n        {\n            if(c ==\
    \ string[j])\n            {\n                count++;\n                break;\n\
    \            }\n        }\n    }\n    return count;\n}\n/*\n Given a string, find\
    \ out how many distinct characters (regardless of case) does it consist of\n \
    \           \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    for(int i = 0; i < string.length; i++)\n    {\n        char\
    \ c = string[i];\n        for(int j = 0; j < string.length; j++)\n        {\n\
    \            if(c == string[j])\n            {\n                count++;\n   \
    \             break;\n            }\n        }\n    }\n    return count;\n}\n\
    /*\n Given a string, find out how many distinct characters (regardless of case)\
    \ does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length; i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length;\
    \ j++)\n        {\n            if(c == string[j])\n            {\n           \
    \     count++;\n                break;\n            }\n        }\n    }\n    return\
    \ count;\n}\n/*\n Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length; i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length;\
    \ j++)\n        {\n            if(c == string[j])\n            {\n           \
    \     count++;\n                break;\n            }\n        }\n    }\n    return\
    \ count;\n}\n/*\n Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length; i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length;\
    \ j++)\n        {\n            if(c == string[j])\n            {\n           \
    \     count++;\n                break;\n            }\n        }\n    }\n    return\
    \ count;\n}\n/*\n Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length; i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length;\
    \ j++)\n        {\n            if(c == string[j])\n            {\n           \
    \     count++;\n                break;\n            }\nunittest\n{\n    alias\
    \ candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n\
    \    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\"\
    ) == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"\
    Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5n4k12lj.d(125): Error: found \''unittest\'' instead of statement\n/tmp/tmp5n4k12lj.d(135):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmp5n4k12lj.d(135):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5n4k12lj.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        if(!std.isAlpha(c))\n        {\n            count++;\n \
    \       }\n    }\n    return count;\n}\n/*\n Given a string, find out how many\
    \ distinct characters (regardless of case) does it consist of\n            \n\
    */\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n\
    \        if(!std.isAlpha(c))\n        {\n            count++;\n        }\n   \
    \ }\n    return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        if(!std.isAlpha(c))\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}\n/*\n Given a string,\
    \ find out how many distinct characters (regardless of case) does it consist of\n\
    \            \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char\
    \ c = string[i];\n        if(!std.isAlpha(c))\n        {\n            count++;\n\
    \        }\n    }\n    return count;\n}\n/*\n Given a string, find out how many\
    \ distinct characters (regardless of case) does it consist of\n            \n\
    */\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n\
    \        if(!std.isAlpha(c))\n        {\n            count++;\n        }\n   \
    \ }\n    return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        if(!std.isAlpha(c))\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}\n/*\n Given a string,\
    \ find out how many distinct characters (regardless of case) does it consist of\n\
    \            \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char\
    \ c = string\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n\
    \    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphhknn5vr.d(115): Error: semicolon expected, not \''unittest\''\n/tmp/tmphhknn5vr.d(115):
    Error: found \''unittest\'' instead of statement\n/tmp/tmphhknn5vr.d(125): Error:
    found \''EOF\'' when expecting \''}\'' following compound statement\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmphhknn5vr.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        if(!std.isLower(c) && !std.isUpper(c))\n        {\n    \
    \        count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n\
    \    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\"\
    ) == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"\
    Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp37paosm5.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n  \
    \          char d = string[j];\n            if(c != d)\n            {\n      \
    \          break;\n            }\n        }\n        count++;\n    }\n    return\
    \ count;\n}\n/*\n Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n        }\n        count++;\n\
    \    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n        }\n        count++;\n\
    \    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n        }\n        count++;\n\
    \    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n        }\n        count++;\n\
    \    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        \nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpmg83rxa_.d(123): Error: found \''unittest\'' instead of statement\n/tmp/tmpmg83rxa_.d(133):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmg83rxa_.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        if(!std.typecons.isUpper(c))\n        {\n            count++;\n\
    \        }\n    }\n    return count;\n}\n/*\n Given a string, find out how many\
    \ distinct characters (regardless of case) does it consist of\n            \n\
    */\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n\
    \        if(!std.typecons.isUpper(c))\n        {\n            count++;\n     \
    \   }\n    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        if(!std.typecons.isUpper(c))\n  \
    \      {\n            count++;\n        }\n    }\n    return count;\n}\n/*\n Given\
    \ a string, find out how many distinct characters (regardless of case) does it\
    \ consist of\n            \n*/\nlong count_distinct_characters(string string)\
    \ \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n   \
    \ {\n        char c = string[i];\n        if(!std.typecons.isUpper(c))\n     \
    \   {\n            count++;\n        }\n    }\n    return count;\n}\n/*\n Given\
    \ a string, find out how many distinct characters (regardless of case) does it\
    \ consist of\n            \n*/\nlong count_distinct_characters(string string)\
    \ \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n   \
    \ {\n        char c = string[i];\n        if(!std.typecons.isUpper(c))\n     \
    \   {\n            count++;\n        }\n    }\n    return count;\n}\n/*\n Given\
    \ a string, find out how many distinct characters (regardless of case) does it\
    \ consist of\n            \n*/\nlong count_distinct_characters(string string)\
    \ \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n   \
    \ {\n        char c = string[i];\n        if(!std.typecons.isUpper(c))\n     \
    \   {\n            count++;\n        }\n    }\n    return count;\n}\n/*\n Given\
    \ a string, find out how many distinct characters (regardless of case) does it\
    \ consist of\n            \n*/\nlong count_distinct_characters(string string)\
    \ \n{\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n   \
    \ assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n  \
    \  assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpyuv1kcif.d(112): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyuv1kcif.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    \n    foreach(char c in string)\n    {\n        count += 1;\n    }\n\
    \    \n    return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    \n    foreach(char c in string)\n    {\n\
    \        count += 1;\n    }\n    \n    return count;\n}\n/*\n Given a string,\
    \ find out how many distinct characters (regardless of case) does it consist of\n\
    \            \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    \n    foreach(char c in string)\n    {\n        count += 1;\n\
    \    }\n    \n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    \n    foreach(char c in string)\n    {\n\
    \        count += 1;\n    }\n    \n    return count;\n}\n/*\n Given a string,\
    \ find out how many distinct characters (regardless of case) does it consist of\n\
    \            \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    \n    foreach(char c in string)\n    {\n        count += 1;\n\
    \    }\n    \n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    \n    foreach(char c in string)\n    {\n\
    \        count += 1;\n    }\n    \n    return count;\n}\n/*\n Given a string,\
    \ find out how many distinct characters (regardless of case) does it consist of\n\
    \            \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    \n    foreach(char c in string)\n    {\n        count += 1;\n\
    \    }\n    \n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    \n    foreach(char c in string)\n    {\n\
    \        count += 1;\n    }\n    \n    return count;\n}\n/*\n Given a string,\
    \ find out how many distinct characters (\nunittest\n{\n    alias candidate =\
    \ count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"\
    abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"\
    aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4u3vlryx.d(11): Error: found \''in\'' when expecting \'';\''\n/tmp/tmp4u3vlryx.d(26):
    Error: found \''in\'' when expecting \'';\''\n/tmp/tmp4u3vlryx.d(41): Error: found
    \''in\'' when expecting \'';\''\n/tmp/tmp4u3vlryx.d(56): Error: found \''in\''
    when expecting \'';\''\n/tmp/tmp4u3vlryx.d(71): Error: found \''in\'' when expecting
    \'';\''\n/tmp/tmp4u3vlryx.d(86): Error: found \''in\'' when expecting \'';\''\n/tmp/tmp4u3vlryx.d(101):
    Error: found \''in\'' when expecting \'';\''\n/tmp/tmp4u3vlryx.d(116): Error:
    found \''in\'' when expecting \'';\''\n/tmp/tmp4u3vlryx.d(123): Error: unterminated
    /* */ comment\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4u3vlryx.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length; i++)\n    {\n        char c = string[i];\n\
    \        if(!std.typecons.isUpper(c))\n        {\n            count++;\n     \
    \   }\n    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length; i++)\n\
    \    {\n        char c = string[i];\n        if(!std.typecons.isUpper(c))\n  \
    \      {\n            count++;\n        }\n    }\n    return count;\n}\n/*\n Given\
    \ a string, find out how many distinct characters (regardless of case) does it\
    \ consist of\n            \n*/\nlong count_distinct_characters(string string)\
    \ \n{\n    long count = 0;\n    for(int i = 0; i < string.length; i++)\n    {\n\
    \        char c = string[i];\n        if(!std.typecons.isUpper(c))\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}\n/*\n Given a string,\
    \ find out how many distinct characters (regardless of case) does it consist of\n\
    \            \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    for(int i = 0; i < string.length; i++)\n    {\n        char\
    \ c = string[i];\n        if(!std.typecons.isUpper(c))\n        {\n          \
    \  count++;\n        }\n    }\n    return count;\n}\n/*\n Given a string, find\
    \ out how many distinct characters (regardless of case) does it consist of\n \
    \           \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    for(int i = 0; i < string.length; i++)\n    {\n        char\
    \ c = string[i];\n        if(!std.typecons.isUpper(c))\n        {\n          \
    \  count++;\n        }\n    }\n    return count;\n}\n/*\n Given a string, find\
    \ out how many distinct characters (regardless of case) does it consist of\n \
    \           \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    for(int i = 0; i < string.length; i++)\n    {\n        char\
    \ c = string[i];\n        if(!std.typecons.isUpper(c))\n        {\n          \
    \  count++;\n        }\n    }\n    return count;\n}\n/*\n Given a string, find\
    \ out how many distinct characters (regardless of case) does it consist of\n \
    \           \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    for(int \nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpum2tuffi.d(113): Error: no identifier for declarator int\n/tmp/tmpum2tuffi.d(113):
    Error: expression expected, not \''unittest\''\n/tmp/tmpum2tuffi.d(114): Error:
    found \''{\'' when expecting \'';\'' following for condition\n/tmp/tmpum2tuffi.d(115):
    Error: expression expected, not \''alias\''\n/tmp/tmpum2tuffi.d(115): Error: found
    \''candidate\'' when expecting \'')\''\n/tmp/tmpum2tuffi.d(115): Error: found
    \''=\'' instead of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpum2tuffi.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string.at(i);\n        for(int j = 0; j < string.length(); j++)\n        {\n\
    \            char d = string.at(j);\n            if(c != d)\n            {\n \
    \               break;\n            }\n            else\n            {\n     \
    \           count++;\n            }\n        }\n    }\n    return count;\n}\n\
    /*\n Given a string, find out how many distinct characters (regardless of case)\
    \ does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string.at(i);\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string.at(j);\n            if(c != d)\n\
    \            {\n                break;\n            }\n            else\n    \
    \        {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}\n/*\n Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string.at(i);\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string.at(j);\n            if(c != d)\n\
    \            {\n                break;\n            }\n            else\n    \
    \        {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}\n/*\n Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string.at(i);\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string.at(j);\n            if(c != d)\n\
    \            {\n                break;\n            }\n            else\n    \
    \        {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}\n/*\n Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string.at(i);\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string.at(j);\n            if(c != d)\n\
    \            {\n                break;\n            }\n            else\n    \
    \        {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}\n/*\n \nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_4bbqcdm.d(128): Error: unterminated /* */ comment\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_4bbqcdm.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    foreach(char c in string) \n    {\n        count += 1;\n    }\n  \
    \  return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    foreach(char c in string) \n    {\n  \
    \      count += 1;\n    }\n    return count;\n}\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    foreach(char c in string) \n    {\n        count += 1;\n    }\n  \
    \  return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    foreach(char c in string) \n    {\n  \
    \      count += 1;\n    }\n    return count;\n}\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    foreach(char c in string) \n    {\n        count += 1;\n    }\n  \
    \  return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    foreach(char c in string) \n    {\n  \
    \      count += 1;\n    }\n    return count;\n}\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    foreach(char c in string) \n    {\n        count += 1;\n    }\n  \
    \  return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    foreach(char c in string) \n    {\n  \
    \      count += 1;\n    }\n    return count;\n}\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n\nunittest\n{\n\
    \    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\"\
    ) == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\"\
    ) == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"\
    Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxf6hhxrj.d(10): Error: found \''in\'' when expecting \'';\''\n/tmp/tmpxf6hhxrj.d(23):
    Error: found \''in\'' when expecting \'';\''\n/tmp/tmpxf6hhxrj.d(36): Error: found
    \''in\'' when expecting \'';\''\n/tmp/tmpxf6hhxrj.d(49): Error: found \''in\''
    when expecting \'';\''\n/tmp/tmpxf6hhxrj.d(62): Error: found \''in\'' when expecting
    \'';\''\n/tmp/tmpxf6hhxrj.d(75): Error: found \''in\'' when expecting \'';\''\n/tmp/tmpxf6hhxrj.d(88):
    Error: found \''in\'' when expecting \'';\''\n/tmp/tmpxf6hhxrj.d(101): Error:
    found \''in\'' when expecting \'';\''\n/tmp/tmpxf6hhxrj.d(113): Error: semicolon
    expected following function declaration\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpxf6hhxrj.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = i; j < string.length(); j++)\n        {\n  \
    \          char d = string[j];\n            if(c != d)\n            {\n      \
    \          break;\n            }\n            else\n            {\n          \
    \      count++;\n            }\n        }\n    }\n    return count;\n}\n/*\n Given\
    \ a string, find out how many distinct characters (regardless of case) does it\
    \ consist of\n            \n*/\nlong count_distinct_characters(string string)\
    \ \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n   \
    \ {\n        char c = string[i];\n        for(int j = i; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n            else\n     \
    \       {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}\n/*\n Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = i; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n            else\n     \
    \       {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}\n/*\n Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = i; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n            else\n     \
    \       {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}\n/*\n Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = i; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n            else\n     \
    \       {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n\
    \    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbnneenr1.d(128): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbnneenr1.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n\tlong count\
    \ = 0;\n\t\n\tfor (int i = 0; i < string.length(); i++)\n\t{\n\t\tchar c = string.at(i);\n\
    \t\t\n\t\tif (islower(c))\n\t\t\tcount++;\n\t\telse if (isupper(c))\n\t\t\tcount++;\n\
    \t\telse if (isdigit(c))\n\t\t\tcount++;\n\t\telse if (c == '_')\n\t\t\tcount++;\n\
    \t\telse if (c == '-' || c == '_')\n\t\t\tcount++;\n\t\telse if (c == '.')\n\t\
    \t\tcount++;\n\t\telse if (c == '_')\n\t\t\tcount++;\n\t\telse if (c == '/')\n\
    \t\t\tcount++;\n\t\telse if (c == '_')\n\t\t\tcount++;\n\t\telse if (c == '(')\n\
    \t\t\tcount++;\n\t\telse if (c == ')')\n\t\t\tcount++;\n\t\telse if (c == '_')\n\
    \t\t\tcount++;\n\t\telse if (c == '+' || c == '_')\n\t\t\tcount++;\n\t\telse if\
    \ (c == '=')\n\t\t\tcount++;\n\t\telse if (c == '_')\n\t\t\tcount++;\n\t\telse\
    \ if (c == '<')\n\t\t\tcount++;\n\t\telse if (c == '>')\n\t\t\tcount++;\n\t\t\
    else if (c == '_')\n\t\t\tcount++;\n\t\telse if (c == '&')\n\t\t\tcount++;\n\t\
    \telse if (c == '_')\n\t\t\tcount++;\n\t\telse if (c == '|')\n\t\t\tcount++;\n\
    \t\telse if (c == '_')\n\t\t\tcount++;\n\t\telse if (c == '\"')\n\t\t\tcount++;\n\
    \t\telse if (c == '_')\n\t\t\tcount++;\n\t\telse if (c == '%')\n\t\t\tcount++;\n\
    \t\telse if (c == '_')\n\t\t\tcount++;\n\t\telse if (c == '_')\n\t\t\tcount++;\n\
    \t\telse if (c == '_')\n\t\t\tcount++;\n\t\telse if (c == '_')\n\t\t\tcount++;\n\
    \t\telse if (c == '_')\n\t\t\tcount++;\n\t\telse if (c == '_')\n\t\t\tcount++;\n\
    \t\telse if (c == '_')\n\t\t\tcount++;\n\t\telse if (c == '_')\n\t\t\tcount++;\n\
    \t\telse if (c == '_')\n\t\t\tcount++;\n\t\telse if (c == '_')\n\t\t\tcount++;\n\
    \t\telse if (c == '_')\n\t\t\tcount++;\n\t\telse if (c == '_')\n\t\t\tcount++;\n\
    \t\telse if (c == '_')\n\t\t\tcount++;\n\t\telse if (c == '_')\n\t\t\tcount++;\n\
    \t\telse if (c == '_')\n\t\t\tcount++;\n\t\telse if (c == '_')\n\t\t\tcount++;\n\
    \t\telse if (c == '_')\n\t\t\tcount++;\n\t\telse if (c == '_')\n\t\t\tcount++;\n\
    \t\telse if (c == '_')\n\t\t\tcount++;\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxp9t8xy6.d(103): Error: found \''unittest\'' instead of statement\n/tmp/tmpxp9t8xy6.d(113):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxp9t8xy6.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n  \
    \          char d = string[j];\n            if(c != d)\n            {\n      \
    \          count++;\n                break;\n            }\n        }\n    }\n\
    \    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcp5d_lou.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        if(!std.isAlpha(c))\n        {\n            count++;\n \
    \       }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpil0e4o6d.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n\tlong count\
    \ = 0;\n\tfor (int i = 0; i < string.length(); i++)\n\t{\n\t\tchar c = string[i];\n\
    \t\tfor (int j = 0; j < string.length(); j++)\n\t\t{\n\t\t\tif (string[i] == string[j])\n\
    \t\t\t{\n\t\t\t\tcount++;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n\
    }\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvfq9_tfq.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string.at(i);\n        if(!std.ctype.isLower(c))\n        {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmkttu7ty.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n  \
    \          char d = string[j];\n            if(c != d)\n            {\n      \
    \          count++;\n                break;\n            }\n        }\n    }\n\
    \    return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                count++;\n                break;\n            }\n\
    \        }\n    }\n    return count;\n}\n/*\n Given a string, find out how many\
    \ distinct characters (regardless of case) does it consist of\n            \n\
    */\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n\
    \        for(int j = 0; j < string.length(); j++)\n        {\n            char\
    \ d = string[j];\n            if(c != d)\n            {\n                count++;\n\
    \                break;\n            }\n        }\n    }\n    return count;\n\
    }\n/*\n Given a string, find out how many distinct characters (regardless of case)\
    \ does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                count++;\n                break;\n            }\n\
    \        }\n    }\n    return count;\n}\n/*\n Given a string, find out how many\
    \ distinct characters (regardless of case) does it consist of\n            \n\
    */\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n\
    \        for(int j = 0; j < string.length(); j++)\n        {\n            char\
    \ d = string[j];\n            if(c != d)\n            {\n                count++;\n\
    \                break;\n            }\n        }\n    }\n    return count;\n\
    }\n/*\n Given a string, find out how many distinct characters (regardless of case)\
    \ does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length()\nunittest\n\
    {\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprdsg95g0.d(121): Error: found \''unittest\'' when expecting
    \'';\'' following for condition\n/tmp/tmprdsg95g0.d(131): Error: found \''void\''
    when expecting \'')\''\n/tmp/tmprdsg95g0.d(131): Error: found \''{\'' when expecting
    \'';\'' following statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprdsg95g0.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n  \
    \          char d = string[j];\n            if(c != d)\n            {\n      \
    \          break;\n            }\n            else\n            {\n          \
    \      count++;\n            }\n        }\n    }\n    return count;\n}\n/*\n Given\
    \ a string, find out how many distinct characters (regardless of case) does it\
    \ consist of\n            \n*/\nlong count_distinct_characters(string string)\
    \ \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n   \
    \ {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n            else\n     \
    \       {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}\n/*\n Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n            else\n     \
    \       {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}\n/*\n Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n            else\n     \
    \       {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}\n/*\n Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n            else\n     \
    \       {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}\n/*\n Given a string, find out how many distinct characters (regardles\n\
    unittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpfvjewo_8.d(128): Error: unterminated /* */ comment\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfvjewo_8.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n  \
    \          char d = string[j];\n            if(c != d)\n            {\n      \
    \          if(c > d)\n                {\n                    count++;\n      \
    \              break;\n                }\n                else\n             \
    \   {\n                    count++;\n                    break;\n            \
    \    }\n            }\n        }\n    }\n    return count;\n}\n/*\n Given a string,\
    \ find out how many distinct characters (regardless of case) does it consist of\n\
    \            \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char\
    \ c = string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n\
    \            char d = string[j];\n            if(c != d)\n            {\n    \
    \            if(c > d)\n                {\n                    count++;\n    \
    \                break;\n                }\n                else\n           \
    \     {\n                    count++;\n                    break;\n          \
    \      }\n            }\n        }\n    }\n    return count;\n}\n/*\n Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n            \n*/\nlong count_distinct_characters(string string) \n{\n  \
    \  long count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n    \
    \    char c = string[i];\n        for(int j = 0; j < string.length(); j++)\n \
    \       {\n            char d = string[j];\n            if(c != d)\n         \
    \   {\n                if(c > d)\n                {\n                    count++;\n\
    \                    break;\n                }\n                else\n       \
    \         {\n                    count++;\n                    break;\n      \
    \          }\n            }\n        }\n    }\n    return count;\n}\n/*\n Given\
    \ a string, find out how many distinct characters (regardless of case) does it\
    \ consist of\n            \n*/\nlong count_distinct_characters(string string)\
    \ \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n   \
    \ {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                if(c > d)\n                {\n                \
    \    count++;\n                    break;\n                }\n               \
    \ else\n                {\n                    count++;\n                    break;\n\
    \                }\n            }\n        }\n    }\n    return count;\n}\n/*\n\
    \ Given a string, find out how many distinct characters (regardless of case) does\
    \ it consist of\n            \n*/\nlong count_distinct_characters(string string)\
    \ \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n   \
    \ {\n        char c = string[i];\n        for(int \nunittest\n{\n    alias candidate\
    \ = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"\
    abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"\
    aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpijhn19q0.d(134): Error: no identifier for declarator int\n/tmp/tmpijhn19q0.d(134):
    Error: expression expected, not \''unittest\''\n/tmp/tmpijhn19q0.d(135): Error:
    found \''{\'' when expecting \'';\'' following for condition\n/tmp/tmpijhn19q0.d(136):
    Error: expression expected, not \''alias\''\n/tmp/tmpijhn19q0.d(136): Error: found
    \''candidate\'' when expecting \'')\''\n/tmp/tmpijhn19q0.d(136): Error: found
    \''=\'' instead of statement\n/tmp/tmpijhn19q0.d(144): Error: found \''EOF\''
    when expecting \''}\'' following compound statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpijhn19q0.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        if(!std.isAlpha(c))\n        {\n            count++;\n \
    \       }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpil0e4o6d.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length; i++)\n    {\n        char c = string[i];\n\
    \        for(int j = 0; j < string.length; j++)\n        {\n            char d\
    \ = string[j];\n            if(c != d)\n            {\n                if(c >=\
    \ 'a' && c <= 'z')\n                {\n                    if(d >= 'a' && d <=\
    \ 'z')\n                    {\n                        if(c != d)\n          \
    \              {\n                            if(c >= 'A' && c <= 'Z')\n     \
    \                       {\n                                if(d >= 'A' && d <=\
    \ 'Z')\n                                {\n                                  \
    \  count++;\n                                }\n                            }\n\
    \                        }\n                    }\n                }\n       \
    \     }\n        }\n    }\n    return count;\n}\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length; i++)\n    {\n        char c = string[i];\n\
    \        for(int j = 0; j < string.length; j++)\n        {\n            char d\
    \ = string[j];\n            if(c != d)\n            {\n                if(c >=\
    \ 'a' && c <= 'z')\n                {\n                    if(d >= 'a' && d <=\
    \ 'z')\n                    {\n                        if(c != d)\n          \
    \              {\n                            if(c >= 'A' && c <= 'Z')\n     \
    \                       {\n                                if(d >= 'A' && d <=\
    \ 'Z')\n                                {\n                                  \
    \  count++;\n                                }\n                            }\n\
    \                        }\n                    }\n                }\n       \
    \     }\n        }\n    }\n    return count;\n}\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length; i++)\n    {\n        char c = string[i];\n\
    \        for(int j = 0; j < string.length; j++)\n        {\n            char d\
    \ = string[j];\n            if(c != d)\n            {\n                if(c >=\
    \ 'a' && c <= 'z')\n                {\n                    if(d >= 'a' && d <=\
    \ 'z')\n                    {\n                        if(c != d)\n          \
    \              {\n                            if(c >= 'A' && c <= 'Z')\n     \
    \                       {\n                                if(d >= 'A' && d <=\
    \ 'Z')\n                                {\n                                  \
    \  count++;\n                                }\n                            }\n\
    \                        }\n                    }\n                }\n       \
    \     }\n        }\n    }\n    return count;\n}\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does \nunittest\n{\n    alias\
    \ candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n\
    \    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\"\
    ) == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"\
    Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpckol22mg.d(111): Error: unterminated /* */ comment\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpckol22mg.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n\tlong count\
    \ = 0;\n\tfor (int i = 0; i < string.length(); i++)\n\t{\n\t\tfor (int j = 0;\
    \ j < string.length(); j++)\n\t\t{\n\t\t\tif (string[i] == string[j])\n\t\t\t\
    {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\n/*\n Given a string,\
    \ find out how many distinct characters (regardless of case) does it consist of\n\
    \            \n*/\nlong count_distinct_characters(string string) \n{\n\tlong count\
    \ = 0;\n\tfor (int i = 0; i < string.length(); i++)\n\t{\n\t\tfor (int j = 0;\
    \ j < string.length(); j++)\n\t\t{\n\t\t\tif (string[i] == string[j])\n\t\t\t\
    {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\n/*\n Given a string,\
    \ find out how many distinct characters (regardless of case) does it consist of\n\
    \            \n*/\nlong count_distinct_characters(string string) \n{\n\tlong count\
    \ = 0;\n\tfor (int i = 0; i < string.length(); i++)\n\t{\n\t\tfor (int j = 0;\
    \ j < string.length(); j++)\n\t\t{\n\t\t\tif (string[i] == string[j])\n\t\t\t\
    {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\n/*\n Given a string,\
    \ find out how many distinct characters (regardless of case) does it consist of\n\
    \            \n*/\nlong count_distinct_characters(string string) \n{\n\tlong count\
    \ = 0;\n\tfor (int i = 0; i < string.length(); i++)\n\t{\n\t\tfor (int j = 0;\
    \ j < string.length(); j++)\n\t\t{\n\t\t\tif (string[i] == string[j])\n\t\t\t\
    {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\n/*\n Given a string,\
    \ find out how many distinct characters (regardless of case) does it consist of\n\
    \            \n*/\nlong count_distinct_characters(string string) \n{\n\tlong count\
    \ = 0;\n\tfor (int i = 0; i < string.length(); i++)\n\t{\n\t\tfor (int j = 0;\
    \ j < string.length(); j++)\n\t\t{\n\t\t\tif (string[i] == string[j])\n\t\t\t\
    {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\n/*\n Given a string,\
    \ find out how many distinct characters (regardless of case) does it consist of\n\
    \            \n*/\nlong count_distinct_characters(string string) \n{\n\tlong count\
    \ = 0;\n\tfor (int i = 0; i < string.length(); i++)\n\t{\n\t\tfor (int j = 0;\
    \ j < string.length(); j++)\n\t\t{\n\t\t\tif (string[i] == string[j])\n\t\t\t\
    {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\n/*\n Given a string,\
    \ find out how many distinct characters (regardless of case) does it consist of\n\
    \            \n*/\nlong count_distinct_characters(\nunittest\n{\n    alias candidate\
    \ = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"\
    abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"\
    aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0sknviwj.d(122): Error: basic type expected, not unittest\n/tmp/tmp0sknviwj.d(122):
    Error: found \''unittest\'' when expecting \'')\''\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmp0sknviwj.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n  \
    \          char d = string[j];\n            if(c != d)\n            {\n      \
    \          if(c >= 'A' && c <= 'Z')\n                {\n                    if(d\
    \ >= 'A' && d <= 'Z')\n                    {\n                        if(c !=\
    \ d)\n                        {\n                            count++;\n      \
    \                  }\n                    }\n                    else\n      \
    \              {\n                        if(d >= 'a' && d <= 'z')\n         \
    \               {\n                            if(c != d)\n                  \
    \          {\n                                count++;\n                     \
    \       }\n                        }\n                        else\n         \
    \               {\n                            if(c >= '0' && c <= '9')\n    \
    \                        {\n                                if(d >= '0' && d <=\
    \ '9')\n                                {\n                                  \
    \  if(c != d)\n                                    {\n                       \
    \                 count++;\n                                    }\n          \
    \                      }\n                                else\n             \
    \                   {\n                                    if(d >= 'a' && d <=\
    \ 'z')\n                                    {\n                              \
    \          if(c != d)\n                                        {\n           \
    \                                 count++;\n                                 \
    \       }\n                                    }\n                           \
    \         else\n                                    {\n                      \
    \                  if(c >= 'A' && c <= 'Z')\n                                \
    \        {\n                                            if(d >= 'A' && d <= 'Z')\n\
    \                                            {\n                             \
    \                   if(c != d)\n                                             \
    \   {\n                                                    count++;\n        \
    \                                        }\n                                 \
    \           }\n                                        }\n                   \
    \                 }\n                                }\n                     \
    \       }\n                        }\n                    }\n                }\n\
    \                else\n                {\n                    if(d >= 'a' && d\
    \ <= 'z')\n                    {\n                        if(c != d)\n       \
    \                 {\n                            count++;\n                  \
    \      }\n                    }\n                    else\n                  \
    \  {\n                        if(c >= '0' && c <= '9')\n                     \
    \   {\n                            if(d >= '0' && d <= '9')\n                \
    \            {\n                                if(c != d)\n                 \
    \               {\n                                    count++;\n            \
    \                    }\n                            }\n                      \
    \      else\n                            {\n                                if(d\
    \ >= 'a' && d <= 'z')\n                                {\n                   \
    \                 if(c != d)\n                                    {\n        \
    \                                count++;\n                                  \
    \  }\n                                }\n                                else\n\
    \                                {\n                                    if(c >=\
    \ 'A' && c <= 'Z')\n                                    {\n                  \
    \                      if(d >= 'A' && d <= 'Z')\n                            \
    \            {\n                                            if(c != d)\n     \
    \                                       {\n                                  \
    \              count++;\n                                            }\n     \
    \                                   }\n                                    }\n\
    \                                }\n                            }\n          \
    \              }\n                    }\n                }\n            }\n  \
    \      }\n    }\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmppskoqb8b.d(123): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppskoqb8b.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    foreach(char c in string) \n    {\n        if(!std.algorithm.contains(string.chars,\
    \ c)) \n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\n/*\n Given a string, find out how many distinct characters (regardless of case)\
    \ does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    foreach(char c in string) \n    {\n  \
    \      if(!std.algorithm.contains(string.chars, c)) \n        {\n            count++;\n\
    \        }\n    }\n    return count;\n}\n/*\n Given a string, find out how many\
    \ distinct characters (regardless of case) does it consist of\n            \n\
    */\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n \
    \   foreach(char c in string) \n    {\n        if(!std.algorithm.contains(string.chars,\
    \ c)) \n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\n/*\n Given a string, find out how many distinct characters (regardless of case)\
    \ does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    foreach(char c in string) \n    {\n  \
    \      if(!std.algorithm.contains(string.chars, c)) \n        {\n            count++;\n\
    \        }\n    }\n    return count;\n}\n/*\n Given a string, find out how many\
    \ distinct characters (regardless of case) does it consist of\n            \n\
    */\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n \
    \   foreach(char c in string) \n    {\n        if(!std.algorithm.contains(string.chars,\
    \ c)) \n        {\n            count++;\n        }\n    }\n    return count;\n\
    }\n/*\n Given a string, find out how many distinct characters (regardless of case)\
    \ does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    foreach(char c in string) \n    {\n  \
    \      if(!std.algorithm.contains(string.chars, c)) \n        {\n            count++;\n\
    \        }\n    }\n    return count;\n}\n/*\n Given a string, find out how many\
    \ distinct characters (regardless of case) does it consist of\n            \n\
    */\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n \
    \   foreach(char c in string) \n    {\n        if(!std.algorithm.contains(string.chars,\
    \ c)) \n        {\n            count++;\n        }\n    }\n\nunittest\n{\n   \
    \ alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\") ==\
    \ 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\"\
    ) == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"\
    Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_lgkujmo.d(10): Error: found \''in\'' when expecting \'';\''\n/tmp/tmp_lgkujmo.d(26):
    Error: found \''in\'' when expecting \'';\''\n/tmp/tmp_lgkujmo.d(42): Error: found
    \''in\'' when expecting \'';\''\n/tmp/tmp_lgkujmo.d(58): Error: found \''in\''
    when expecting \'';\''\n/tmp/tmp_lgkujmo.d(74): Error: found \''in\'' when expecting
    \'';\''\n/tmp/tmp_lgkujmo.d(90): Error: found \''in\'' when expecting \'';\''\n/tmp/tmp_lgkujmo.d(106):
    Error: found \''in\'' when expecting \'';\''\n/tmp/tmp_lgkujmo.d(114): Error:
    found \''unittest\'' instead of statement\nFailed: ["dmd", "-unittest", "-v",
    "-o-", "/tmp/tmp_lgkujmo.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        if(!std.typecons.isUpper(c))\n        {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppxk5otsy.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string.at(i);\n        for(int j = 0; j < string.length(); j++)\n        {\n\
    \            char d = string.at(j);\n            if(c != d)\n            {\n \
    \               break;\n            }\n            else\n            {\n     \
    \           count++;\n            }\n        }\n    }\n    return count;\n}\n\
    /*\n Given a string, find out how many distinct characters (regardless of case)\
    \ does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string.at(i);\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string.at(j);\n            if(c != d)\n\
    \            {\n                break;\n            }\n            else\n    \
    \        {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}\n/*\n Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string.at(i);\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string.at(j);\n            if(c != d)\n\
    \            {\n                break;\n            }\n            else\n    \
    \        {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}\n/*\n Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string.at(i);\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string.at(j);\n            if(c != d)\n\
    \            {\n                break;\n            }\n            else\n    \
    \        {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}\n/*\n Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string.at(i);\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string.at(j);\n            if(c != d)\n\
    \            {\n                break;\n            }\n            else\n    \
    \        {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}\n/*\n \nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_4bbqcdm.d(128): Error: unterminated /* */ comment\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_4bbqcdm.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    foreach(char c in string)\n    {\n        count += 1;\n    }\n   \
    \ return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    foreach(char c in string)\n    {\n   \
    \     count += 1;\n    }\n    return count;\n}\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    foreach(char c in string)\n    {\n        count += 1;\n    }\n   \
    \ return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    foreach(char c in string)\n    {\n   \
    \     count += 1;\n    }\n    return count;\n}\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    foreach(char c in string)\n    {\n        count += 1;\n    }\n   \
    \ return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    foreach(char c in string)\n    {\n   \
    \     count += 1;\n    }\n    return count;\n}\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    foreach(char c in string)\n    {\n        count += 1;\n    }\n   \
    \ return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    foreach(char c in string)\n    {\n   \
    \     count += 1;\n    }\n    return count;\n}\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    foreach\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1r4nhpyv.d(10): Error: found \''in\'' when expecting \'';\''\n/tmp/tmp1r4nhpyv.d(23):
    Error: found \''in\'' when expecting \'';\''\n/tmp/tmp1r4nhpyv.d(36): Error: found
    \''in\'' when expecting \'';\''\n/tmp/tmp1r4nhpyv.d(49): Error: found \''in\''
    when expecting \'';\''\n/tmp/tmp1r4nhpyv.d(62): Error: found \''in\'' when expecting
    \'';\''\n/tmp/tmp1r4nhpyv.d(75): Error: found \''in\'' when expecting \'';\''\n/tmp/tmp1r4nhpyv.d(88):
    Error: found \''in\'' when expecting \'';\''\n/tmp/tmp1r4nhpyv.d(101): Error:
    found \''in\'' when expecting \'';\''\n/tmp/tmp1r4nhpyv.d(115): Error: found \''unittest\''
    when expecting \''(\''\n/tmp/tmp1r4nhpyv.d(116): Error: basic type expected, not
    {\n/tmp/tmp1r4nhpyv.d(116): Error: no identifier for declarator int\n/tmp/tmp1r4nhpyv.d(116):
    Error: found \''{\'' when expecting \'';\''\n/tmp/tmp1r4nhpyv.d(117): Error: expression
    expected, not \''alias\''\n/tmp/tmp1r4nhpyv.d(117): Error: found \''candidate\''
    when expecting \'')\''\n/tmp/tmp1r4nhpyv.d(117): Error: found \''=\'' instead
    of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1r4nhpyv.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n\tlong count\
    \ = 0;\n\tfor(int i = 0; i < string.length(); i++)\n\t{\n\t\tchar c = string[i];\n\
    \t\tfor(int j = 0; j < string.length(); j++)\n\t\t{\n\t\t\tchar d = string[j];\n\
    \t\t\tif(c != d)\n\t\t\t{\n\t\t\t\tif(c >= 'a' && c <= 'z')\n\t\t\t\t{\n\t\t\t\
    \t\tif(d >= 'a' && d <= 'z')\n\t\t\t\t\t{\n\t\t\t\t\t\tif(d >= 'A' && d <= 'Z')\n\
    \t\t\t\t\t\t{\n\t\t\t\t\t\t\tcount++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\
    \t\t\t\telse if(c >= 'A' && c <= 'Z')\n\t\t\t\t{\n\t\t\t\t\tif(d >= 'a' && d <=\
    \ 'z')\n\t\t\t\t\t{\n\t\t\t\t\t\tif(d >= 'A' && d <= 'Z')\n\t\t\t\t\t\t{\n\t\t\
    \t\t\t\t\tcount++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\
    }\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5fhz83dh.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = i+1; j < string.length(); j++)\n        {\n\
    \            char d = string[j];\n            if(c != d)\n            {\n    \
    \            count++;\n                break;\n            }\n        }\n    }\n\
    \    return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = i+1; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                count++;\n                break;\n            }\n\
    \        }\n    }\n    return count;\n}\n/*\n Given a string, find out how many\
    \ distinct characters (regardless of case) does it consist of\n            \n\
    */\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n\
    \        for(int j = i+1; j < string.length(); j++)\n        {\n            char\
    \ d = string[j];\n            if(c != d)\n            {\n                count++;\n\
    \                break;\n            }\n        }\n    }\n    return count;\n\
    }\n/*\n Given a string, find out how many distinct characters (regardless of case)\
    \ does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = i+1; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                count++;\n                break;\n            }\n\
    \        }\n    }\n    return count;\n}\n/*\n Given a string, find out how many\
    \ distinct characters (regardless of case) does it consist of\n            \n\
    */\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n\
    \        for(int j = i+1; j < string.length(); j++)\n        {\n            char\
    \ d = string[j];\n            if(c != d)\n            {\n                count++;\n\
    \                break;\n            }\n        }\n    }\n    return count;\n\
    }\n/*\n Given a string, find out how many distinct characters (regardless of case)\
    \ does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ \nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpfsqa4ff3.d(118): Error: found \''unittest\'' when expecting
    \'')\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfsqa4ff3.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n\tlong count\
    \ = 0;\n\tfor (int i = 0; i < string.length(); i++)\n\t{\n\t\tchar c = string[i];\n\
    \t\tfor (int j = 0; j < string.length(); j++)\n\t\t{\n\t\t\tif (i == j)\n\t\t\t\
    \tcontinue;\n\t\t\tchar d = string[j];\n\t\t\tif (c != d)\n\t\t\t\tbreak;\n\t\t\
    }\n\t\tcount++;\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6ptbcbkd.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n\tlong count\
    \ = 0;\n\tfor (int i = 0; i < string.length(); i++)\n\t{\n\t\tchar c = string[i];\n\
    \t\tfor (int j = 0; j < string.length(); j++)\n\t\t{\n\t\t\tif (i == j)\n\t\t\t\
    \tcontinue;\n\t\t\tchar d = string[j];\n\t\t\tif (c != d)\n\t\t\t\tbreak;\n\t\t\
    }\n\t\tcount++;\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6ptbcbkd.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        if(!std.isAlpha(c))\n        {\n            count++;\n \
    \       }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpil0e4o6d.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n\tlong count\
    \ = 0;\n\tfor (int i = 0; i < string.length(); i++)\n\t{\n\t\tchar c = string[i];\n\
    \t\tfor (int j = 0; j < string.length(); j++)\n\t\t{\n\t\t\tif (i == j)\n\t\t\t\
    \tcontinue;\n\t\t\tchar d = string[j];\n\t\t\tif (c != d)\n\t\t\t\tbreak;\n\t\t\
    \tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate =\
    \ count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"\
    abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"\
    aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp99iv60ls.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        for(int j\
    \ = 0; j < string.length(); j++)\n        {\n            if(string[i] == string[j])\n\
    \            {\n                count++;\n            }\n        }\n    }\n  \
    \  return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        for(int j = 0; j < string.length(); j++)\n        {\n        \
    \    if(string[i] == string[j])\n            {\n                count++;\n   \
    \         }\n        }\n    }\n    return count;\n}\n/*\n Given a string, find\
    \ out how many distinct characters (regardless of case) does it consist of\n \
    \           \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        for(int\
    \ j = 0; j < string.length(); j++)\n        {\n            if(string[i] == string[j])\n\
    \            {\n                count++;\n            }\n        }\n    }\n  \
    \  return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        for(int j = 0; j < string.length(); j++)\n        {\n        \
    \    if(string[i] == string[j])\n            {\n                count++;\n   \
    \         }\n        }\n    }\n    return count;\n}\n/*\n Given a string, find\
    \ out how many distinct characters (regardless of case) does it consist of\n \
    \           \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        for(int\
    \ j = 0; j < string.length(); j++)\n        {\n            if(string[i] == string[j])\n\
    \            {\n                count++;\n            }\n        }\n    }\n  \
    \  return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        for(int j = 0; j < string.length(); j++)\n        {\n        \
    \    if(string[i] == string[j])\n            {\n                count++;\n   \
    \         }\n        }\n    }\n    return count;\n}\n/*\n Given a string, find\
    \ out how many distinct characters (regardless of case) does it consist of\n \
    \           \n*/\nlong count_distinct_characters(\nunittest\n{\n    alias candidate\
    \ = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"\
    abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"\
    aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpw87e_8k5.d(122): Error: basic type expected, not unittest\n/tmp/tmpw87e_8k5.d(122):
    Error: found \''unittest\'' when expecting \'')\''\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpw87e_8k5.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n  \
    \          char d = string[j];\n            if(c != d)\n            {\n      \
    \          break;\n            }\n        }\n        count++;\n    }\n    return\
    \ count;\n}\n/*\n Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n        }\n        count++;\n\
    \    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n        }\n        count++;\n\
    \    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n        }\n        count++;\n\
    \    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n        }\n        count++;\n\
    \    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        \nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpmg83rxa_.d(123): Error: found \''unittest\'' instead of statement\n/tmp/tmpmg83rxa_.d(133):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmg83rxa_.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n  \
    \          if(c == string[j])\n            {\n                count++;\n     \
    \           break;\n            }\n        }\n    }\n    return count;\n}\n/*\n\
    \ Given a string, find out how many distinct characters (regardless of case) does\
    \ it consist of\n            \n*/\nlong count_distinct_characters(string string)\
    \ \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n   \
    \ {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            if(c == string[j])\n            {\n           \
    \     count++;\n                break;\n            }\n        }\n    }\n    return\
    \ count;\n}\n/*\n Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            if(c == string[j])\n            {\n           \
    \     count++;\n                break;\n            }\n        }\n    }\n    return\
    \ count;\n}\n/*\n Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            if(c == string[j])\n            {\n           \
    \     count++;\n                break;\n            }\n        }\n    }\n    return\
    \ count;\n}\n/*\n Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            if(c == string[j])\n            {\n           \
    \     count++;\n                break;\n            }\n        }\n    }\n    return\
    \ count;\n}\n/*\n Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            if(c == \nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpysn0daxi.d(121): Error: expression expected, not \''unittest\''\n/tmp/tmpysn0daxi.d(122):
    Error: found \''{\'' when expecting \'')\''\n/tmp/tmpysn0daxi.d(131): Error: found
    \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmpysn0daxi.d(131):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpysn0daxi.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n  \
    \          char d = string[j];\n            if(c != d)\n            {\n      \
    \          break;\n            }\n            else\n            {\n          \
    \      count++;\n            }\n        }\n    }\n    return count;\n}\n/*\n Given\
    \ a string, find out how many distinct characters (regardless of case) does it\
    \ consist of\n            \n*/\nlong count_distinct_characters(string string)\
    \ \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n   \
    \ {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n            else\n     \
    \       {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}\n/*\n Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n            else\n     \
    \       {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}\n/*\n Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n            else\n     \
    \       {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}\n/*\n Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n            else\n     \
    \       {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}\n/*\n Given a string, find out how many distinct characters (regardles\n\
    unittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpfvjewo_8.d(128): Error: unterminated /* */ comment\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfvjewo_8.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string.at(i);\n        if(!std.typecons.isLower(c))\n        {\n           \
    \ count++;\n        }\n    }\n    return count;\n}\n/*\n Given a string, find\
    \ out how many distinct characters (regardless of case) does it consist of\n \
    \           \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char\
    \ c = string.at(i);\n        if(!std.typecons.isLower(c))\n        {\n       \
    \     count++;\n        }\n    }\n    return count;\n}\n/*\n Given a string, find\
    \ out how many distinct characters (regardless of case) does it consist of\n \
    \           \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char\
    \ c = string.at(i);\n        if(!std.typecons.isLower(c))\n        {\n       \
    \     count++;\n        }\n    }\n    return count;\n}\n/*\n Given a string, find\
    \ out how many distinct characters (regardless of case) does it consist of\n \
    \           \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char\
    \ c = string.at(i);\n        if(!std.typecons.isLower(c))\n        {\n       \
    \     count++;\n        }\n    }\n    return count;\n}\n/*\n Given a string, find\
    \ out how many distinct characters (regardless of case) does it consist of\n \
    \           \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char\
    \ c = string.at(i);\n        if(!std.typecons.isLower(c))\n        {\n       \
    \     count++;\n        }\n    }\n    return count;\n}\n/*\n Given a string, find\
    \ out how many distinct characters (regardless of case) does it consist of\n \
    \           \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char\
    \ c = string.at(i);\n        if(!std.typecons.isLower(c))\n        {\n       \
    \     count++;\n        }\n    }\n    return count;\n}\n/*\n Given a string, find\
    \ out how many distinct characters (regardless of case) does it consist of\n \
    \           \n*/\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph22mp7im.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        if(!std.typecons.isUpper(c))\n        {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppxk5otsy.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n  \
    \          char d = string[j];\n            if(c != d)\n            {\n      \
    \          break;\n            }\n        }\n        count++;\n    }\n    return\
    \ count;\n}\n/*\n Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n        }\n        count++;\n\
    \    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n        }\n        count++;\n\
    \    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n        }\n        count++;\n\
    \    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n        }\n        count++;\n\
    \    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        \nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpmg83rxa_.d(123): Error: found \''unittest\'' instead of statement\n/tmp/tmpmg83rxa_.d(133):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmg83rxa_.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = i+1; j < string.length(); j++)\n        {\n\
    \            char d = string[j];\n            if(c != d)\n            {\n    \
    \            count++;\n                break;\n            }\n        }\n    }\n\
    \    return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = i+1; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                count++;\n                break;\n            }\n\
    \        }\n    }\n    return count;\n}\n/*\n Given a string, find out how many\
    \ distinct characters (regardless of case) does it consist of\n            \n\
    */\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n\
    \        for(int j = i+1; j < string.length(); j++)\n        {\n            char\
    \ d = string[j];\n            if(c != d)\n            {\n                count++;\n\
    \                break;\n            }\n        }\n    }\n    return count;\n\
    }\n/*\n Given a string, find out how many distinct characters (regardless of case)\
    \ does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = i+1; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                count++;\n                break;\n            }\n\
    \        }\n    }\n    return count;\n}\n/*\n Given a string, find out how many\
    \ distinct characters (regardless of case) does it consist of\n            \n\
    */\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n\
    \        for(int j = i+1; j < string.length(); j++)\n        {\n            char\
    \ d = string[j];\n            if(c != d)\n            {\n                count++;\n\
    \                break;\n            }\n        }\n    }\n    return count;\n\
    }\n/*\n Given a string, find out how many distinct characters (regardless of case)\
    \ does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ \nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpfsqa4ff3.d(118): Error: found \''unittest\'' when expecting
    \'')\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfsqa4ff3.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n\tlong count\
    \ = 0;\n\tfor (int i = 0; i < string.length(); i++)\n\t{\n\t\tchar c = string[i];\n\
    \t\tfor (int j = 0; j < string.length(); j++)\n\t\t{\n\t\t\tif (i == j)\n\t\t\t\
    \tcontinue;\n\t\t\tchar d = string[j];\n\t\t\tif (c != d)\n\t\t\t\tbreak;\n\t\t\
    \telse\n\t\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias\
    \ candidate = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n\
    \    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\"\
    ) == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"\
    Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvmsn4ttz.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        if(!std.isAlpha(c))\n        {\n            count++;\n \
    \       }\n    }\n    return count;\n}\n/*\n Given a string, find out how many\
    \ distinct characters (regardless of case) does it consist of\n            \n\
    */\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n\
    \        if(!std.isAlpha(c))\n        {\n            count++;\n        }\n   \
    \ }\n    return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        if(!std.isAlpha(c))\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}\n/*\n Given a string,\
    \ find out how many distinct characters (regardless of case) does it consist of\n\
    \            \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char\
    \ c = string[i];\n        if(!std.isAlpha(c))\n        {\n            count++;\n\
    \        }\n    }\n    return count;\n}\n/*\n Given a string, find out how many\
    \ distinct characters (regardless of case) does it consist of\n            \n\
    */\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n\
    \        if(!std.isAlpha(c))\n        {\n            count++;\n        }\n   \
    \ }\n    return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        if(!std.isAlpha(c))\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}\n/*\n Given a string,\
    \ find out how many distinct characters (regardless of case) does it consist of\n\
    \            \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char\
    \ c = string\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n\
    \    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphhknn5vr.d(115): Error: semicolon expected, not \''unittest\''\n/tmp/tmphhknn5vr.d(115):
    Error: found \''unittest\'' instead of statement\n/tmp/tmphhknn5vr.d(125): Error:
    found \''EOF\'' when expecting \''}\'' following compound statement\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmphhknn5vr.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = i; j < string.length(); j++)\n        {\n  \
    \          char d = string[j];\n            if(c != d)\n            {\n      \
    \          count++;\n                break;\n            }\n        }\n    }\n\
    \    return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = i; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                count++;\n                break;\n            }\n\
    \        }\n    }\n    return count;\n}\n/*\n Given a string, find out how many\
    \ distinct characters (regardless of case) does it consist of\n            \n\
    */\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n\
    \        for(int j = i; j < string.length(); j++)\n        {\n            char\
    \ d = string[j];\n            if(c != d)\n            {\n                count++;\n\
    \                break;\n            }\n        }\n    }\n    return count;\n\
    }\n/*\n Given a string, find out how many distinct characters (regardless of case)\
    \ does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = i; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                count++;\n                break;\n            }\n\
    \        }\n    }\n    return count;\n}\n/*\n Given a string, find out how many\
    \ distinct characters (regardless of case) does it consist of\n            \n\
    */\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n\
    \        for(int j = i; j < string.length(); j++)\n        {\n            char\
    \ d = string[j];\n            if(c != d)\n            {\n                count++;\n\
    \                break;\n            }\n        }\n    }\n    return count;\n\
    }\n/*\n Given a string, find out how many distinct characters (regardless of case)\
    \ does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ \nunittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpzv4pp3nm.d(118): Error: found \''unittest\'' when expecting
    \'')\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzv4pp3nm.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        if(!std.isAlpha(c))\n        {\n            count++;\n \
    \       }\n    }\n    return count;\n}\n/*\n Given a string, find out how many\
    \ distinct characters (regardless of case) does it consist of\n            \n\
    */\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n\
    \        if(!std.isAlpha(c))\n        {\n            count++;\n        }\n   \
    \ }\n    return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        if(!std.isAlpha(c))\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}\n/*\n Given a string,\
    \ find out how many distinct characters (regardless of case) does it consist of\n\
    \            \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char\
    \ c = string[i];\n        if(!std.isAlpha(c))\n        {\n            count++;\n\
    \        }\n    }\n    return count;\n}\n/*\n Given a string, find out how many\
    \ distinct characters (regardless of case) does it consist of\n            \n\
    */\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n\
    \        if(!std.isAlpha(c))\n        {\n            count++;\n        }\n   \
    \ }\n    return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        if(!std.isAlpha(c))\n        {\n\
    \            count++;\n        }\n    }\n    return count;\n}\n/*\n Given a string,\
    \ find out how many distinct characters (regardless of case) does it consist of\n\
    \            \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char\
    \ c = string\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n\
    \    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphhknn5vr.d(115): Error: semicolon expected, not \''unittest\''\n/tmp/tmphhknn5vr.d(115):
    Error: found \''unittest\'' instead of statement\n/tmp/tmphhknn5vr.d(125): Error:
    found \''EOF\'' when expecting \''}\'' following compound statement\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmphhknn5vr.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n  \
    \          char d = string[j];\n            if(c != d)\n            {\n      \
    \          break;\n            }\n        }\n        count++;\n    }\n    return\
    \ count;\n}\n/*\n Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n        }\n        count++;\n\
    \    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n        }\n        count++;\n\
    \    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n        }\n        count++;\n\
    \    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n        }\n        count++;\n\
    \    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        \nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpmg83rxa_.d(123): Error: found \''unittest\'' instead of statement\n/tmp/tmpmg83rxa_.d(133):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmg83rxa_.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        if(!std.isAlpha(c))\n        {\n            count++;\n \
    \       }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpil0e4o6d.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        for(int j\
    \ = 0; j < string.length(); j++)\n        {\n            if(i != j)\n        \
    \    {\n                if(string[i] == string[j])\n                {\n      \
    \              count++;\n                }\n            }\n        }\n    }\n\
    \    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpobj9u7b6.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        if(!std.typecons.isUpper(c))\n        {\n            count++;\n\
    \        }\n    }\n    return count;\n}\n/*\n Given a string, find out how many\
    \ distinct characters (regardless of case) does it consist of\n            \n\
    */\nlong count_distinct_characters(string string) \n{\n    long count = 0;\n \
    \   for(int i = 0; i < string.length(); i++)\n    {\n        char c = string[i];\n\
    \        if(!std.typecons.isUpper(c))\n        {\n            count++;\n     \
    \   }\n    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        if(!std.typecons.isUpper(c))\n  \
    \      {\n            count++;\n        }\n    }\n    return count;\n}\n/*\n Given\
    \ a string, find out how many distinct characters (regardless of case) does it\
    \ consist of\n            \n*/\nlong count_distinct_characters(string string)\
    \ \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n   \
    \ {\n        char c = string[i];\n        if(!std.typecons.isUpper(c))\n     \
    \   {\n            count++;\n        }\n    }\n    return count;\n}\n/*\n Given\
    \ a string, find out how many distinct characters (regardless of case) does it\
    \ consist of\n            \n*/\nlong count_distinct_characters(string string)\
    \ \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n   \
    \ {\n        char c = string[i];\n        if(!std.typecons.isUpper(c))\n     \
    \   {\n            count++;\n        }\n    }\n    return count;\n}\n/*\n Given\
    \ a string, find out how many distinct characters (regardless of case) does it\
    \ consist of\n            \n*/\nlong count_distinct_characters(string string)\
    \ \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n   \
    \ {\n        char c = string[i];\n        if(!std.typecons.isUpper(c))\n     \
    \   {\n            count++;\n        }\n    }\n    return count;\n}\n/*\n Given\
    \ a string, find out how many distinct characters (regardless of case) does it\
    \ consist of\n            \n*/\nlong count_distinct_characters(string string)\
    \ \n{\n\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n   \
    \ assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n  \
    \  assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpyuv1kcif.d(112): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyuv1kcif.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    foreach(char c in string)\n    {\n        if(!std.isLower(c))\n  \
    \          count++;\n    }\n    return count;\n}\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    foreach(char c in string)\n    {\n        if(!std.isLower(c))\n  \
    \          count++;\n    }\n    return count;\n}\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    foreach(char c in string)\n    {\n        if(!std.isLower(c))\n  \
    \          count++;\n    }\n    return count;\n}\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    foreach(char c in string)\n    {\n        if(!std.isLower(c))\n  \
    \          count++;\n    }\n    return count;\n}\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    foreach(char c in string)\n    {\n        if(!std.isLower(c))\n  \
    \          count++;\n    }\n    return count;\n}\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    foreach(char c in string)\n    {\n        if(!std.isLower(c))\n  \
    \          count++;\n    }\n    return count;\n}\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    foreach(char c in string)\n    {\n        if(!std.isLower(c))\n  \
    \          count++;\n    }\n    return count;\n}\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    foreach\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpfx90lrv5.d(10): Error: found \''in\'' when expecting \'';\''\n/tmp/tmpfx90lrv5.d(24):
    Error: found \''in\'' when expecting \'';\''\n/tmp/tmpfx90lrv5.d(38): Error: found
    \''in\'' when expecting \'';\''\n/tmp/tmpfx90lrv5.d(52): Error: found \''in\''
    when expecting \'';\''\n/tmp/tmpfx90lrv5.d(66): Error: found \''in\'' when expecting
    \'';\''\n/tmp/tmpfx90lrv5.d(80): Error: found \''in\'' when expecting \'';\''\n/tmp/tmpfx90lrv5.d(94):
    Error: found \''in\'' when expecting \'';\''\n/tmp/tmpfx90lrv5.d(109): Error:
    found \''unittest\'' when expecting \''(\''\n/tmp/tmpfx90lrv5.d(110): Error: basic
    type expected, not {\n/tmp/tmpfx90lrv5.d(110): Error: no identifier for declarator
    int\n/tmp/tmpfx90lrv5.d(110): Error: found \''{\'' when expecting \'';\''\n/tmp/tmpfx90lrv5.d(111):
    Error: expression expected, not \''alias\''\n/tmp/tmpfx90lrv5.d(111): Error: found
    \''candidate\'' when expecting \'')\''\n/tmp/tmpfx90lrv5.d(111): Error: found
    \''=\'' instead of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfx90lrv5.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    foreach(char c in string)\n    {\n        if(!std.isAlpha(c))\n  \
    \      {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp58gdky87.d(10): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp58gdky87.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    \n    for(int i = 0; i < string.length(); i++)\n    {\n        char\
    \ c = string[i];\n        \n        for(int j = 0; j < string.length(); j++)\n\
    \        {\n            char d = string[j];\n            \n            if(c !=\
    \ d)\n            {\n                break;\n            }\n            \n   \
    \         count++;\n        }\n    }\n    \n    return count;\n}\nunittest\n{\n\
    \    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\"\
    ) == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\"\
    ) == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"\
    Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvyz2sezd.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n\tlong count\
    \ = 0;\n\tfor (int i = 0; i < string.length(); i++)\n\t{\n\t\tchar c = string.at(i);\n\
    \t\tfor (int j = 0; j < string.length(); j++)\n\t\t{\n\t\t\tif (string.at(j) ==\
    \ c)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn\
    \ count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n\
    \    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptbj63dpb.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n  \
    \          char d = string[j];\n            if(c != d)\n            {\n      \
    \          break;\n            }\n        }\n        count++;\n    }\n    return\
    \ count;\n}\n/*\n Given a string, find out how many distinct characters (regardless\
    \ of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n        }\n        count++;\n\
    \    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n        }\n        count++;\n\
    \    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n        }\n        count++;\n\
    \    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        char c = string[i];\n        for(int j = 0; j < string.length();\
    \ j++)\n        {\n            char d = string[j];\n            if(c != d)\n \
    \           {\n                break;\n            }\n        }\n        count++;\n\
    \    }\n    return count;\n}\n/*\n Given a string, find out how many distinct\
    \ characters (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        \nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpmg83rxa_.d(123): Error: found \''unittest\'' instead of statement\n/tmp/tmpmg83rxa_.d(133):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmg83rxa_.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        for(int j\
    \ = 0; j < string.length(); j++)\n        {\n            if(string[i] == string[j])\n\
    \            {\n                count++;\n            }\n        }\n    }\n  \
    \  return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        for(int j = 0; j < string.length(); j++)\n        {\n        \
    \    if(string[i] == string[j])\n            {\n                count++;\n   \
    \         }\n        }\n    }\n    return count;\n}\n/*\n Given a string, find\
    \ out how many distinct characters (regardless of case) does it consist of\n \
    \           \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        for(int\
    \ j = 0; j < string.length(); j++)\n        {\n            if(string[i] == string[j])\n\
    \            {\n                count++;\n            }\n        }\n    }\n  \
    \  return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        for(int j = 0; j < string.length(); j++)\n        {\n        \
    \    if(string[i] == string[j])\n            {\n                count++;\n   \
    \         }\n        }\n    }\n    return count;\n}\n/*\n Given a string, find\
    \ out how many distinct characters (regardless of case) does it consist of\n \
    \           \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        for(int\
    \ j = 0; j < string.length(); j++)\n        {\n            if(string[i] == string[j])\n\
    \            {\n                count++;\n            }\n        }\n    }\n  \
    \  return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        for(int j = 0; j < string.length(); j++)\n        {\n        \
    \    if(string[i] == string[j])\n            {\n                count++;\n   \
    \         }\n        }\n    }\n    return count;\n}\n/*\n Given a string, find\
    \ out how many distinct characters (regardless of case) does it consist of\n \
    \           \n*/\nlong count_distinct_characters(\nunittest\n{\n    alias candidate\
    \ = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"\
    abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"\
    aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpw87e_8k5.d(122): Error: basic type expected, not unittest\n/tmp/tmpw87e_8k5.d(122):
    Error: found \''unittest\'' when expecting \'')\''\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpw87e_8k5.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = i+1; j < string.length(); j++)\n        {\n\
    \            if(string[j] == c)\n            {\n                count++;\n   \
    \             break;\n            }\n        }\n    }\n    return count;\n}\n\
    unittest\n{\n    alias candidate = count_distinct_characters;\n\n    assert(candidate(\"\
    \") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n    assert(candidate(\"\
    abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\") == 1L);\n   \
    \ assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn07_3pb8.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    foreach(char c in string)\n    {\n        count += 1;\n    }\n   \
    \ return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    foreach(char c in string)\n    {\n   \
    \     count += 1;\n    }\n    return count;\n}\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    foreach(char c in string)\n    {\n        count += 1;\n    }\n   \
    \ return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    foreach(char c in string)\n    {\n   \
    \     count += 1;\n    }\n    return count;\n}\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    foreach(char c in string)\n    {\n        count += 1;\n    }\n   \
    \ return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    foreach(char c in string)\n    {\n   \
    \     count += 1;\n    }\n    return count;\n}\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    foreach(char c in string)\n    {\n        count += 1;\n    }\n   \
    \ return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    foreach(char c in string)\n    {\n   \
    \     count += 1;\n    }\n    return count;\n}\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    foreach\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1r4nhpyv.d(10): Error: found \''in\'' when expecting \'';\''\n/tmp/tmp1r4nhpyv.d(23):
    Error: found \''in\'' when expecting \'';\''\n/tmp/tmp1r4nhpyv.d(36): Error: found
    \''in\'' when expecting \'';\''\n/tmp/tmp1r4nhpyv.d(49): Error: found \''in\''
    when expecting \'';\''\n/tmp/tmp1r4nhpyv.d(62): Error: found \''in\'' when expecting
    \'';\''\n/tmp/tmp1r4nhpyv.d(75): Error: found \''in\'' when expecting \'';\''\n/tmp/tmp1r4nhpyv.d(88):
    Error: found \''in\'' when expecting \'';\''\n/tmp/tmp1r4nhpyv.d(101): Error:
    found \''in\'' when expecting \'';\''\n/tmp/tmp1r4nhpyv.d(115): Error: found \''unittest\''
    when expecting \''(\''\n/tmp/tmp1r4nhpyv.d(116): Error: basic type expected, not
    {\n/tmp/tmp1r4nhpyv.d(116): Error: no identifier for declarator int\n/tmp/tmp1r4nhpyv.d(116):
    Error: found \''{\'' when expecting \'';\''\n/tmp/tmp1r4nhpyv.d(117): Error: expression
    expected, not \''alias\''\n/tmp/tmp1r4nhpyv.d(117): Error: found \''candidate\''
    when expecting \'')\''\n/tmp/tmp1r4nhpyv.d(117): Error: found \''=\'' instead
    of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1r4nhpyv.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n  \
    \          char d = string[j];\n            if(c != d)\n            {\n      \
    \          break;\n            }\n        }\n        count++;\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\n\
    \    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy70wsggc.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        for(int j\
    \ = 0; j < string.length(); j++)\n        {\n            if(string[i] == string[j])\n\
    \            {\n                count++;\n            }\n        }\n    }\n  \
    \  return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        for(int j = 0; j < string.length(); j++)\n        {\n        \
    \    if(string[i] == string[j])\n            {\n                count++;\n   \
    \         }\n        }\n    }\n    return count;\n}\n/*\n Given a string, find\
    \ out how many distinct characters (regardless of case) does it consist of\n \
    \           \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        for(int\
    \ j = 0; j < string.length(); j++)\n        {\n            if(string[i] == string[j])\n\
    \            {\n                count++;\n            }\n        }\n    }\n  \
    \  return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        for(int j = 0; j < string.length(); j++)\n        {\n        \
    \    if(string[i] == string[j])\n            {\n                count++;\n   \
    \         }\n        }\n    }\n    return count;\n}\n/*\n Given a string, find\
    \ out how many distinct characters (regardless of case) does it consist of\n \
    \           \n*/\nlong count_distinct_characters(string string) \n{\n    long\
    \ count = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        for(int\
    \ j = 0; j < string.length(); j++)\n        {\n            if(string[i] == string[j])\n\
    \            {\n                count++;\n            }\n        }\n    }\n  \
    \  return count;\n}\n/*\n Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n            \n*/\nlong count_distinct_characters(string\
    \ string) \n{\n    long count = 0;\n    for(int i = 0; i < string.length(); i++)\n\
    \    {\n        for(int j = 0; j < string.length(); j++)\n        {\n        \
    \    if(string[i] == string[j])\n            {\n                count++;\n   \
    \         }\n        }\n    }\n    return count;\n}\n/*\n Given a string, find\
    \ out how many distinct characters (regardless of case) does it consist of\n \
    \           \n*/\nlong count_distinct_characters(\nunittest\n{\n    alias candidate\
    \ = count_distinct_characters;\n\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"\
    abcde\") == 5L);\n    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"\
    aaaaAAAAaaaa\") == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpw87e_8k5.d(122): Error: basic type expected, not unittest\n/tmp/tmpw87e_8k5.d(122):
    Error: found \''unittest\'' when expecting \'')\''\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpw87e_8k5.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        if(!std.isAlpha(c))\n        {\n            count += 1;\n\
    \        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb0hbyp5b.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        for(int j = 0; j < string.length(); j++)\n        {\n  \
    \          char d = string[j];\n            if(c != d)\n            {\n      \
    \          count++;\n                break;\n            }\n        }\n    }\n\
    \    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcp5d_lou.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Given a string, find out\
    \ how many distinct characters (regardless of case) does it consist of\n     \
    \       \n*/\nlong count_distinct_characters(string string) \n{\n    long count\
    \ = 0;\n    for(int i = 0; i < string.length(); i++)\n    {\n        char c =\
    \ string[i];\n        if(!std.typecons.isUpper(c))\n        {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_distinct_characters;\n\
    \n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"abcde\") == 5L);\n\
    \    assert(candidate(\"abcdecadeCADE\") == 5L);\n    assert(candidate(\"aaaaAAAAaaaa\"\
    ) == 1L);\n    assert(candidate(\"Jerry jERRY JeRRRY\") == 5L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppxk5otsy.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660004050
