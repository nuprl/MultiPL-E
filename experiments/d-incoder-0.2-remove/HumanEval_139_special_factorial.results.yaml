language: d
name: HumanEval_139_special_factorial
results:
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long factorial = 1;\n    \n  \
    \  for(long i = 1; i <= n; i++)\n    {\n        factorial *= i;\n    }\n    \n\
    \    return factorial;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpu5pz4hjr.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d65]

    ??:? void tmpu5pz4hjr.__unittest_L25_C1() [0x427a62]

    ??:? void tmpu5pz4hjr.__modtest() [0x427ae8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba8b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a91e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa3d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8f5]

    ??:? runModuleUnitTests [0x42b861]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281b4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long factorial = 1;\n    \n  \
    \  for(long i = 1; i <= n; i++)\n    {\n        factorial *= i;\n    }\n    \n\
    \    return factorial;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpu5pz4hjr.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d65]

    ??:? void tmpu5pz4hjr.__unittest_L25_C1() [0x427a62]

    ??:? void tmpu5pz4hjr.__modtest() [0x427ae8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba8b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a91e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa3d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8f5]

    ??:? runModuleUnitTests [0x42b861]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281b4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long fact = 1;\n    \n    for(long\
    \ i = 2; i <= n; i++)\n    {\n        fact *= i;\n    }\n    \n    return fact;\n\
    }\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpmyl7kt2y.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d6d]

    ??:? void tmpmyl7kt2y.__unittest_L25_C1() [0x427a66]

    ??:? void tmpmyl7kt2y.__modtest() [0x427aec]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba93]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a926]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff68]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa45]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8fd]

    ??:? runModuleUnitTests [0x42b869]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281bc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long factorial = 1;\n    \n  \
    \  for(int i = 1; i <= n; i++)\n    {\n        factorial *= i;\n    }\n    \n\
    \    return factorial;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp4o_cdubx.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d6d]

    ??:? void tmp4o_cdubx.__unittest_L25_C1() [0x427a66]

    ??:? void tmp4o_cdubx.__modtest() [0x427aec]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba93]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a926]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff68]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa45]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8fd]

    ??:? runModuleUnitTests [0x42b869]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281bc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long factorial = 1;\n    \n  \
    \  for(long i = 1; i <= n; i++)\n    {\n        factorial *= i;\n    }\n    \n\
    \    return factorial;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpu5pz4hjr.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d65]

    ??:? void tmpu5pz4hjr.__unittest_L25_C1() [0x427a62]

    ??:? void tmpu5pz4hjr.__modtest() [0x427ae8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba8b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a91e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa3d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8f5]

    ??:? runModuleUnitTests [0x42b861]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281b4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long factorial = 1;\n    long\
    \ i;\n    \n    for (i = 1; i <= n; i++)\n    {\n        factorial *= i;\n   \
    \ }\n    return factorial;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmprqaa4t5e.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d6d]

    ??:? void tmprqaa4t5e.__unittest_L25_C1() [0x427a6a]

    ??:? void tmprqaa4t5e.__modtest() [0x427af0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba93]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a926]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff68]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa45]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8fd]

    ??:? runModuleUnitTests [0x42b869]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281bc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long fact = 1;\n    \n    for(long\
    \ i = 1; i <= n; i++)\n    {\n        fact *= i;\n    }\n    \n    return fact;\n\
    }\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp258wxvtc.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d65]

    ??:? void tmp258wxvtc.__unittest_L25_C1() [0x427a62]

    ??:? void tmp258wxvtc.__modtest() [0x427ae8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba8b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a91e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa3d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8f5]

    ??:? runModuleUnitTests [0x42b861]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281b4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    for(long\
    \ i = 1; i <= n; i++) \n    {\n        result *= i;\n    }\n    return result;\n\
    }\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\nunittest\n{\n    alias candidate\
    \ = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L)\
    \ == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L)\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpiorj2g5e.d(23): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiorj2g5e.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163991
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long fact = 1;\n    \n    for(long\
    \ i = 1; i <= n; i++)\n    {\n        fact *= i;\n    }\n    \n    return fact;\n\
    }\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp258wxvtc.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d65]

    ??:? void tmp258wxvtc.__unittest_L25_C1() [0x427a62]

    ??:? void tmp258wxvtc.__modtest() [0x427ae8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba8b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a91e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa3d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8f5]

    ??:? runModuleUnitTests [0x42b861]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281b4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long factorial = 1;\n    \n  \
    \  for(long i = 2; i <= n; i++)\n    {\n        factorial *= i;\n    }\n    \n\
    \    return factorial;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpohta5js8.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d6d]

    ??:? void tmpohta5js8.__unittest_L25_C1() [0x427a66]

    ??:? void tmpohta5js8.__modtest() [0x427aec]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba93]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a926]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff68]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa45]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8fd]

    ??:? runModuleUnitTests [0x42b869]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281bc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long fact = 1;\n    \n    for(long\
    \ i = 1; i <= n; i++)\n    {\n        fact = fact * i;\n    }\n    return fact;\n\
    }\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp4d1rdvy4.d(28): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d65]

    ??:? void tmp4d1rdvy4.__unittest_L24_C1() [0x427a62]

    ??:? void tmp4d1rdvy4.__modtest() [0x427ae8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba8b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a91e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa3d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8f5]

    ??:? runModuleUnitTests [0x42b861]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281b4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long fact = 1;\n    \n    for(long\
    \ i = 1; i <= n; i++)\n    {\n        fact = fact * i;\n    }\n    \n    return\
    \ fact;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp5qsjqfnn.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d65]

    ??:? void tmp5qsjqfnn.__unittest_L25_C1() [0x427a62]

    ??:? void tmp5qsjqfnn.__modtest() [0x427ae8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba8b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a91e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa3d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8f5]

    ??:? runModuleUnitTests [0x42b861]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281b4]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    long i;\n\
    \    for(i = 1; i <= n; i++)\n    {\n        result *= i;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmph6a4w5di.d(28): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d6d]

    ??:? void tmph6a4w5di.__unittest_L24_C1() [0x427a6a]

    ??:? void tmph6a4w5di.__modtest() [0x427af0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba93]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a926]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff68]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa45]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8fd]

    ??:? runModuleUnitTests [0x42b869]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281bc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long fact = 1;\n    long i;\n\
    \    \n    for(i = 1; i <= n; i++){\n        fact = fact * i;\n    }\n    return\
    \ fact;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmph61ewaaa.d(28): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d6d]

    ??:? void tmph61ewaaa.__unittest_L24_C1() [0x427a6a]

    ??:? void tmph61ewaaa.__modtest() [0x427af0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba93]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a926]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff68]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa45]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8fd]

    ??:? runModuleUnitTests [0x42b869]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281bc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long factorial = 1;\n    long\
    \ i;\n    \n    for (i = 1; i <= n; i++) {\n        factorial *= i;\n    }\n \
    \   return factorial;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpuieriu58.d(28): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d6d]

    ??:? void tmpuieriu58.__unittest_L24_C1() [0x427a6a]

    ??:? void tmpuieriu58.__modtest() [0x427af0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba93]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a926]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff68]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa45]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8fd]

    ??:? runModuleUnitTests [0x42b869]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281bc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long fact = 1;\n    \n    for(long\
    \ i = 1; i <= n; i++)\n    {\n        fact *= i;\n    }\n    \n    return fact;\n\
    }\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp258wxvtc.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d65]

    ??:? void tmp258wxvtc.__unittest_L25_C1() [0x427a62]

    ??:? void tmp258wxvtc.__modtest() [0x427ae8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba8b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a91e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa3d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8f5]

    ??:? runModuleUnitTests [0x42b861]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281b4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long fact = 1;\n    long i;\n\
    \    \n    for(i = 1; i <= n; i++)\n    {\n        fact = fact * i;\n    }\n \
    \   return fact;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n\
    \    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n  \
    \  assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmphgpt2mx9.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d6d]

    ??:? void tmphgpt2mx9.__unittest_L25_C1() [0x427a6a]

    ??:? void tmphgpt2mx9.__modtest() [0x427af0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba93]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a926]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff68]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa45]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8fd]

    ??:? runModuleUnitTests [0x42b869]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281bc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long factorial = 1;\n    \n  \
    \  for(long i = 2; i <= n; i++)\n    {\n        factorial *= i;\n    }\n    \n\
    \    return factorial;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpohta5js8.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d6d]

    ??:? void tmpohta5js8.__unittest_L25_C1() [0x427a66]

    ??:? void tmpohta5js8.__modtest() [0x427aec]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba93]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a926]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff68]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa45]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8fd]

    ??:? runModuleUnitTests [0x42b869]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281bc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    for(long\
    \ i = 2; i <= n; i++)\n    {\n        result *= i;\n    }\n    return result;\n\
    }\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n!\
    \ * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\nunittest\n{\n    alias candidate\
    \ = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L)\
    \ == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L)\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp57mnxhrg.d(23): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp57mnxhrg.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163991
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long fact = 1;\n    \n    for(long\
    \ i = 1; i <= n; i++) \n    {\n        fact = fact * i;\n    }\n    return fact;\n\
    }\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpnr98q_5o.d(28): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d65]

    ??:? void tmpnr98q_5o.__unittest_L24_C1() [0x427a62]

    ??:? void tmpnr98q_5o.__modtest() [0x427ae8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba8b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a91e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa3d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8f5]

    ??:? runModuleUnitTests [0x42b861]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281b4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long fact = 1;\n    long i;\n\
    \    \n    for(i = 1; i <= n; i++)\n    {\n        fact = fact * i;\n    }\n \
    \   \n    return fact;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp9hxd9h_8.d(30): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d6d]

    ??:? void tmp9hxd9h_8.__unittest_L26_C1() [0x427a6a]

    ??:? void tmp9hxd9h_8.__modtest() [0x427af0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba93]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a926]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff68]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa45]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8fd]

    ??:? runModuleUnitTests [0x42b869]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281bc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long factorial = 1;\n    \n  \
    \  for(long i = 1; i <= n; i++)\n    {\n        factorial *= i;\n    }\n    \n\
    \    return factorial;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpu5pz4hjr.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d65]

    ??:? void tmpu5pz4hjr.__unittest_L25_C1() [0x427a62]

    ??:? void tmpu5pz4hjr.__modtest() [0x427ae8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba8b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a91e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa3d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8f5]

    ??:? runModuleUnitTests [0x42b861]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281b4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long factorial = 1;\n    \n  \
    \  for(int i = 1; i <= n; i++)\n    {\n        factorial *= i;\n    }\n    \n\
    \    return factorial;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp4o_cdubx.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d6d]

    ??:? void tmp4o_cdubx.__unittest_L25_C1() [0x427a66]

    ??:? void tmp4o_cdubx.__modtest() [0x427aec]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba93]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a926]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff68]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa45]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8fd]

    ??:? runModuleUnitTests [0x42b869]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281bc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long fact = 1;\n    long i;\n\
    \    \n    for (i = 1; i <= n; i++)\n    {\n        fact = fact * i;\n    }\n\
    \    return fact;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n\
    \    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n  \
    \  assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpx2fxk0bg.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d6d]

    ??:? void tmpx2fxk0bg.__unittest_L25_C1() [0x427a6a]

    ??:? void tmpx2fxk0bg.__modtest() [0x427af0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba93]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a926]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff68]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa45]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8fd]

    ??:? runModuleUnitTests [0x42b869]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281bc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long factorial = 1;\n    long\
    \ i;\n    \n    for (i = 1; i <= n; i++)\n    {\n        factorial *= i;\n   \
    \ }\n    return factorial;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmprqaa4t5e.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d6d]

    ??:? void tmprqaa4t5e.__unittest_L25_C1() [0x427a6a]

    ??:? void tmprqaa4t5e.__modtest() [0x427af0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba93]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a926]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff68]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa45]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8fd]

    ??:? runModuleUnitTests [0x42b869]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281bc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long factorial = 1;\n    \n  \
    \  for(long i = 1; i <= n; i++)\n    {\n        factorial *= i;\n    }\n    \n\
    \    return factorial;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpu5pz4hjr.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d65]

    ??:? void tmpu5pz4hjr.__unittest_L25_C1() [0x427a62]

    ??:? void tmpu5pz4hjr.__modtest() [0x427ae8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba8b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a91e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa3d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8f5]

    ??:? runModuleUnitTests [0x42b861]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281b4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long factorial = 1;\n    \n  \
    \  for(long i = 1; i <= n; i++)\n    {\n        factorial *= i;\n    }\n    \n\
    \    return factorial;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpu5pz4hjr.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d65]

    ??:? void tmpu5pz4hjr.__unittest_L25_C1() [0x427a62]

    ??:? void tmpu5pz4hjr.__modtest() [0x427ae8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba8b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a91e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa3d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8f5]

    ??:? runModuleUnitTests [0x42b861]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281b4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long fact = 1;\n    long i;\n\
    \    for(i = 1; i <= n; i++)\n    {\n        fact = fact * i;\n    }\n    return\
    \ fact;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmphwppl3et.d(28): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d6d]

    ??:? void tmphwppl3et.__unittest_L24_C1() [0x427a6a]

    ??:? void tmphwppl3et.__modtest() [0x427af0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba93]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a926]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff68]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa45]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8fd]

    ??:? runModuleUnitTests [0x42b869]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281bc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long factorial = 1;\n    \n  \
    \  for(long i = 1; i <= n; i++)\n    {\n        factorial *= i;\n    }\n    \n\
    \    return factorial;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpu5pz4hjr.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d65]

    ??:? void tmpu5pz4hjr.__unittest_L25_C1() [0x427a62]

    ??:? void tmpu5pz4hjr.__modtest() [0x427ae8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba8b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a91e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa3d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8f5]

    ??:? runModuleUnitTests [0x42b861]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281b4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long fact = 1;\n    \n    for(long\
    \ i = 1; i <= n; i++)\n    {\n        fact = fact * i;\n    }\n    \n    return\
    \ fact;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp5qsjqfnn.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d65]

    ??:? void tmp5qsjqfnn.__unittest_L25_C1() [0x427a62]

    ??:? void tmp5qsjqfnn.__modtest() [0x427ae8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba8b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a91e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa3d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8f5]

    ??:? runModuleUnitTests [0x42b861]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281b4]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long factorial = 1;\n    \n  \
    \  for(long i = 1; i <= n; i++)\n    {\n        factorial *= i;\n    }\n    \n\
    \    return factorial;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpu5pz4hjr.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d65]

    ??:? void tmpu5pz4hjr.__unittest_L25_C1() [0x427a62]

    ??:? void tmpu5pz4hjr.__modtest() [0x427ae8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba8b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a91e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa3d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8f5]

    ??:? runModuleUnitTests [0x42b861]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281b4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long factorial = 1;\n    \n  \
    \  for(long i = 1; i <= n; i++)\n    {\n        factorial *= i;\n    }\n    \n\
    \    return factorial;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpu5pz4hjr.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d65]

    ??:? void tmpu5pz4hjr.__unittest_L25_C1() [0x427a62]

    ??:? void tmpu5pz4hjr.__modtest() [0x427ae8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba8b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a91e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa3d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8f5]

    ??:? runModuleUnitTests [0x42b861]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281b4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long fact = 1;\n    \n    for(long\
    \ i = 1; i <= n; i++)\n    {\n        fact *= i;\n    }\n    \n    return fact;\n\
    }\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp258wxvtc.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d65]

    ??:? void tmp258wxvtc.__unittest_L25_C1() [0x427a62]

    ??:? void tmp258wxvtc.__modtest() [0x427ae8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba8b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a91e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa3d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8f5]

    ??:? runModuleUnitTests [0x42b861]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281b4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long fact = 1;\n    long i;\n\
    \    \n    for (i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;\n\
    }\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpudkwf9os.d(28): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d6d]

    ??:? void tmpudkwf9os.__unittest_L24_C1() [0x427a6a]

    ??:? void tmpudkwf9os.__modtest() [0x427af0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba93]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a926]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff68]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa45]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8fd]

    ??:? runModuleUnitTests [0x42b869]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281bc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long factorial = 1;\n    long\
    \ i;\n    \n    for (i = 1; i <= n; i++)\n    {\n        factorial *= i;\n   \
    \ }\n    \n    return factorial;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpfurl8yx7.d(30): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d6d]

    ??:? void tmpfurl8yx7.__unittest_L26_C1() [0x427a6a]

    ??:? void tmpfurl8yx7.__modtest() [0x427af0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba93]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a926]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff68]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa45]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8fd]

    ??:? runModuleUnitTests [0x42b869]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281bc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long factorial = 1;\n    long\
    \ i;\n    \n    for (i = 1; i <= n; i++) \n    {\n        factorial *= i;\n  \
    \  }\n    return factorial;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp5wlnvfqv.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d6d]

    ??:? void tmp5wlnvfqv.__unittest_L25_C1() [0x427a6a]

    ??:? void tmp5wlnvfqv.__modtest() [0x427af0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba93]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a926]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff68]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa45]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8fd]

    ??:? runModuleUnitTests [0x42b869]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281bc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long factorial = 1;\n    \n  \
    \  for(long i = 1; i <= n; i++) factorial *= i;\n    \n    return factorial;\n\
    }\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp5ae10cgh.d(26): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d65]

    ??:? void tmp5ae10cgh.__unittest_L22_C1() [0x427a62]

    ??:? void tmp5ae10cgh.__modtest() [0x427ae8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba8b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a91e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa3d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8f5]

    ??:? runModuleUnitTests [0x42b861]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281b4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long fact = 1;\n    \n    for(long\
    \ i = 1; i <= n; i++)\n    {\n        fact *= i;\n    }\n    \n    return fact;\n\
    }\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp258wxvtc.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d65]

    ??:? void tmp258wxvtc.__unittest_L25_C1() [0x427a62]

    ??:? void tmp258wxvtc.__modtest() [0x427ae8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba8b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a91e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa3d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8f5]

    ??:? runModuleUnitTests [0x42b861]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281b4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long fact = 1;\n    \n    for(long\
    \ i = 1; i <= n; i++)\n    {\n        fact *= i;\n    }\n    \n    return fact;\n\
    }\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp258wxvtc.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d65]

    ??:? void tmp258wxvtc.__unittest_L25_C1() [0x427a62]

    ??:? void tmp258wxvtc.__modtest() [0x427ae8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba8b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a91e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa3d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8f5]

    ??:? runModuleUnitTests [0x42b861]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281b4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long factorial = 1;\n    \n  \
    \  for(int i = 1; i <= n; i++){\n        factorial *= i;\n    }\n    \n    return\
    \ factorial;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n   \
    \ assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L)\
    \ == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp6c2yxnyq.d(28): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d6d]

    ??:? void tmp6c2yxnyq.__unittest_L24_C1() [0x427a66]

    ??:? void tmp6c2yxnyq.__modtest() [0x427aec]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba93]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a926]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff68]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa45]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8fd]

    ??:? runModuleUnitTests [0x42b869]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281bc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    \n    for(long\
    \ i = 1; i <= n; i++)\n    {\n        result *= i;\n    }\n    \n    return result;\n\
    }\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmps6zunos3.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d65]

    ??:? void tmps6zunos3.__unittest_L25_C1() [0x427a62]

    ??:? void tmps6zunos3.__modtest() [0x427ae8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba8b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a91e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa3d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8f5]

    ??:? runModuleUnitTests [0x42b861]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281b4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long fact = 1;\n    long i;\n\
    \    \n    for (i = 1; i <= n; i++) \n    {\n        fact = fact * i;\n    }\n\
    \    return fact;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n\
    \    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n  \
    \  assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpgzgw5c1l.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d6d]

    ??:? void tmpgzgw5c1l.__unittest_L25_C1() [0x427a6a]

    ??:? void tmpgzgw5c1l.__modtest() [0x427af0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba93]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a926]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff68]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa45]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8fd]

    ??:? runModuleUnitTests [0x42b869]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281bc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long fact = 1;\n    \n    for(long\
    \ i = 1; i <= n; i++){\n        fact = fact * i;\n    }\n    \n    return fact;\n\
    }\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpt616348a.d(28): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d65]

    ??:? void tmpt616348a.__unittest_L24_C1() [0x427a62]

    ??:? void tmpt616348a.__modtest() [0x427ae8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba8b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a91e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa3d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8f5]

    ??:? runModuleUnitTests [0x42b861]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281b4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long factorial = 1;\n    \n  \
    \  for(long i = 1; i <= n; i++)\n    {\n        factorial *= i;\n    }\n    \n\
    \    return factorial;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpu5pz4hjr.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d65]

    ??:? void tmpu5pz4hjr.__unittest_L25_C1() [0x427a62]

    ??:? void tmpu5pz4hjr.__modtest() [0x427ae8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba8b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a91e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa3d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8f5]

    ??:? runModuleUnitTests [0x42b861]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281b4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    long i;\n\
    \    for(i = 1; i <= n; i++)\n    {\n        result *= i;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmph6a4w5di.d(28): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d6d]

    ??:? void tmph6a4w5di.__unittest_L24_C1() [0x427a6a]

    ??:? void tmph6a4w5di.__modtest() [0x427af0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba93]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a926]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff68]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa45]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8fd]

    ??:? runModuleUnitTests [0x42b869]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281bc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long factorial = 1;\n    \n  \
    \  for(long i = 1; i <= n; i++){\n        factorial *= i;\n    }\n    \n    return\
    \ factorial;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n   \
    \ assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L)\
    \ == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpjrr47tyt.d(28): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d65]

    ??:? void tmpjrr47tyt.__unittest_L24_C1() [0x427a62]

    ??:? void tmpjrr47tyt.__modtest() [0x427ae8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba8b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a91e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa3d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8f5]

    ??:? runModuleUnitTests [0x42b861]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281b4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long factorial = 1;\n    \n  \
    \  for(int i = 1; i <= n; i++)\n    {\n        factorial *= i;\n    }\n    \n\
    \    return factorial;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp4o_cdubx.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d6d]

    ??:? void tmp4o_cdubx.__unittest_L25_C1() [0x427a66]

    ??:? void tmp4o_cdubx.__modtest() [0x427aec]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba93]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a926]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff68]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa45]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8fd]

    ??:? runModuleUnitTests [0x42b869]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281bc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long fact = 1;\n    long i;\n\
    \    \n    for(i = 1; i <= n; i++)\n    {\n        fact = fact * i;\n    }\n \
    \   \n    return fact;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp9hxd9h_8.d(30): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d6d]

    ??:? void tmp9hxd9h_8.__unittest_L26_C1() [0x427a6a]

    ??:? void tmp9hxd9h_8.__modtest() [0x427af0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba93]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a926]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff68]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa45]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8fd]

    ??:? runModuleUnitTests [0x42b869]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281bc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long factorial = 1;\n    \n  \
    \  for(long i = 1; i <= n; i++)\n    {\n        factorial *= i;\n    }\n    \n\
    \    return factorial;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpu5pz4hjr.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d65]

    ??:? void tmpu5pz4hjr.__unittest_L25_C1() [0x427a62]

    ??:? void tmpu5pz4hjr.__modtest() [0x427ae8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba8b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a91e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa3d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8f5]

    ??:? runModuleUnitTests [0x42b861]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281b4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long fact = 1;\n    \n    for(long\
    \ i = 2; i <= n; i++)\n    {\n        fact = fact * i;\n    }\n    \n    return\
    \ fact;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpzfgv91ce.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d6d]

    ??:? void tmpzfgv91ce.__unittest_L25_C1() [0x427a66]

    ??:? void tmpzfgv91ce.__modtest() [0x427aec]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba93]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a926]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff68]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa45]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8fd]

    ??:? runModuleUnitTests [0x42b869]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281bc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long fact = 1;\n    \n    for(long\
    \ i = 1; i <= n; i++){\n        fact *= i;\n    }\n    \n    return fact;\n}\n\
    unittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp3c3lbd_i.d(28): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d65]

    ??:? void tmp3c3lbd_i.__unittest_L24_C1() [0x427a62]

    ??:? void tmp3c3lbd_i.__modtest() [0x427ae8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba8b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a91e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa3d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8f5]

    ??:? runModuleUnitTests [0x42b861]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281b4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long fact = 1;\n    \n    for(long\
    \ i = 1; i <= n; i++)\n    {\n        fact *= i;\n    }\n    \n    return fact;\n\
    }\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp258wxvtc.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d65]

    ??:? void tmp258wxvtc.__unittest_L25_C1() [0x427a62]

    ??:? void tmp258wxvtc.__modtest() [0x427ae8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba8b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a91e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa3d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8f5]

    ??:? runModuleUnitTests [0x42b861]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281b4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long factorial = 1;\n    \n  \
    \  for(long i = 1; i <= n; i++)\n    {\n        factorial *= i;\n    }\n    \n\
    \    return factorial;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpu5pz4hjr.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d65]

    ??:? void tmpu5pz4hjr.__unittest_L25_C1() [0x427a62]

    ??:? void tmpu5pz4hjr.__modtest() [0x427ae8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba8b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a91e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa3d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8f5]

    ??:? runModuleUnitTests [0x42b861]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281b4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long factorial = 1;\n    long\
    \ i;\n    for(i = 1; i <= n; i++)\n    {\n        factorial *= i;\n    }\n   \
    \ return factorial;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpxat0hvtr.d(28): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d6d]

    ??:? void tmpxat0hvtr.__unittest_L24_C1() [0x427a6a]

    ??:? void tmpxat0hvtr.__modtest() [0x427af0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba93]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a926]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff68]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa45]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8fd]

    ??:? runModuleUnitTests [0x42b869]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281bc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long factorial = 1;\n    \n  \
    \  for(int i = 1; i <= n; i++)\n    {\n        factorial *= i;\n    }\n    \n\
    \    return factorial;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp4o_cdubx.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d6d]

    ??:? void tmp4o_cdubx.__unittest_L25_C1() [0x427a66]

    ??:? void tmp4o_cdubx.__modtest() [0x427aec]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba93]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a926]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff68]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa45]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8fd]

    ??:? runModuleUnitTests [0x42b869]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281bc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long factorial = 1;\n    \n  \
    \  for(long i = 2; i <= n; i++)\n    {\n        factorial *= i;\n    }\n    \n\
    \    return factorial;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpohta5js8.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d6d]

    ??:? void tmpohta5js8.__unittest_L25_C1() [0x427a66]

    ??:? void tmpohta5js8.__modtest() [0x427aec]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba93]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a926]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff68]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa45]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8fd]

    ??:? runModuleUnitTests [0x42b869]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281bc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long factorial = 1;\n    long\
    \ i;\n    \n    for (i = 1; i <= n; i++)\n        factorial *= i;\n    \n    return\
    \ factorial;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n   \
    \ assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L)\
    \ == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmprmsqj579.d(28): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d6d]

    ??:? void tmprmsqj579.__unittest_L24_C1() [0x427a6a]

    ??:? void tmprmsqj579.__modtest() [0x427af0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba93]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a926]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff68]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa45]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8fd]

    ??:? runModuleUnitTests [0x42b869]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281bc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    \n    for(long\
    \ i = 1; i <= n; i++)\n    {\n        result *= i;\n    }\n    \n    return result;\n\
    }\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmps6zunos3.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d65]

    ??:? void tmps6zunos3.__unittest_L25_C1() [0x427a62]

    ??:? void tmps6zunos3.__modtest() [0x427ae8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba8b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a91e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa3d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8f5]

    ??:? runModuleUnitTests [0x42b861]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281b4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long factorial = 1;\n    long\
    \ i;\n    for(i = 1; i <= n; i++)\n    {\n        factorial *= i;\n    }\n   \
    \ return factorial;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpxat0hvtr.d(28): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d6d]

    ??:? void tmpxat0hvtr.__unittest_L24_C1() [0x427a6a]

    ??:? void tmpxat0hvtr.__modtest() [0x427af0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba93]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a926]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff68]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa45]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8fd]

    ??:? runModuleUnitTests [0x42b869]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281bc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long fact = 1;\n    \n    for(long\
    \ i = 1; i <= n; i++)\n    {\n        fact *= i;\n    }\n    \n    return fact;\n\
    }\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp258wxvtc.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d65]

    ??:? void tmp258wxvtc.__unittest_L25_C1() [0x427a62]

    ??:? void tmp258wxvtc.__modtest() [0x427ae8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba8b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a91e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa3d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8f5]

    ??:? runModuleUnitTests [0x42b861]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281b4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long factorial = 1;\n    long\
    \ i;\n    for(i = 1; i <= n; i++)\n    {\n        factorial *= i;\n    }\n   \
    \ return factorial;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpxat0hvtr.d(28): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d6d]

    ??:? void tmpxat0hvtr.__unittest_L24_C1() [0x427a6a]

    ??:? void tmpxat0hvtr.__modtest() [0x427af0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba93]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a926]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff68]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa45]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8fd]

    ??:? runModuleUnitTests [0x42b869]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281bc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long fact = 1;\n    \n    for(long\
    \ i = 1; i <= n; i++)\n    {\n        fact *= i;\n    }\n    \n    return fact;\n\
    }\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp258wxvtc.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d65]

    ??:? void tmp258wxvtc.__unittest_L25_C1() [0x427a62]

    ??:? void tmp258wxvtc.__modtest() [0x427ae8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba8b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a91e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa3d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8f5]

    ??:? runModuleUnitTests [0x42b861]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281b4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long factorial = 1;\n    \n  \
    \  for(long i = 1; i <= n; i++)\n    {\n        factorial *= i;\n    }\n    \n\
    \    return factorial;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpu5pz4hjr.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d65]

    ??:? void tmpu5pz4hjr.__unittest_L25_C1() [0x427a62]

    ??:? void tmpu5pz4hjr.__modtest() [0x427ae8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba8b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a91e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa3d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8f5]

    ??:? runModuleUnitTests [0x42b861]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281b4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long factorial = 1;\n    \n  \
    \  for(long i = 1; i <= n; i++)\n    {\n        factorial *= i;\n    }\n    \n\
    \    return factorial;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpu5pz4hjr.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d65]

    ??:? void tmpu5pz4hjr.__unittest_L25_C1() [0x427a62]

    ??:? void tmpu5pz4hjr.__modtest() [0x427ae8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba8b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a91e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa3d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8f5]

    ??:? runModuleUnitTests [0x42b861]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281b4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long fact = 1;\n    \n    for(long\
    \ i = 1; i <= n; i++)\n    {\n        fact *= i;\n    }\n    \n    return fact;\n\
    }\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp258wxvtc.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d65]

    ??:? void tmp258wxvtc.__unittest_L25_C1() [0x427a62]

    ??:? void tmp258wxvtc.__modtest() [0x427ae8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba8b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a91e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa3d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8f5]

    ??:? runModuleUnitTests [0x42b861]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281b4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long fact = 1;\n    \n    for(long\
    \ i = 1; i <= n; i++)\n    {\n        fact *= i;\n    }\n    \n    return fact;\n\
    }\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp258wxvtc.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d65]

    ??:? void tmp258wxvtc.__unittest_L25_C1() [0x427a62]

    ??:? void tmp258wxvtc.__modtest() [0x427ae8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba8b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a91e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa3d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8f5]

    ??:? runModuleUnitTests [0x42b861]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281b4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long fact = 1;\n    for(long i\
    \ = 1; i <= n; i++) \n    {\n        fact *= i;\n    }\n    return fact;\n}\n\
    unittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmph9j0vics.d(27): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d65]

    ??:? void tmph9j0vics.__unittest_L23_C1() [0x427a62]

    ??:? void tmph9j0vics.__modtest() [0x427ae8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba8b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a91e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa3d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8f5]

    ??:? runModuleUnitTests [0x42b861]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281b4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long fact = 1;\n    \n    for(long\
    \ i = 1; i <= n; i++)\n    {\n        fact *= i;\n    }\n    \n    return fact;\n\
    }\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp258wxvtc.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d65]

    ??:? void tmp258wxvtc.__unittest_L25_C1() [0x427a62]

    ??:? void tmp258wxvtc.__modtest() [0x427ae8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba8b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a91e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa3d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8f5]

    ??:? runModuleUnitTests [0x42b861]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281b4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long factorial = 1;\n    \n  \
    \  for(long i = 1; i <= n; i++)\n    {\n        factorial *= i;\n    }\n    \n\
    \    return factorial;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpu5pz4hjr.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d65]

    ??:? void tmpu5pz4hjr.__unittest_L25_C1() [0x427a62]

    ??:? void tmpu5pz4hjr.__modtest() [0x427ae8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba8b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a91e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa3d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8f5]

    ??:? runModuleUnitTests [0x42b861]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281b4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long factorial = 1;\n    long\
    \ i;\n    \n    for (i = 1; i <= n; i++) {\n        factorial *= i;\n    }\n \
    \   \n    return factorial;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpzkg4bypz.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d6d]

    ??:? void tmpzkg4bypz.__unittest_L25_C1() [0x427a6a]

    ??:? void tmpzkg4bypz.__modtest() [0x427af0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba93]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a926]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff68]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa45]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8fd]

    ??:? runModuleUnitTests [0x42b869]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281bc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long factorial = 1;\n    \n  \
    \  for(long i = 1; i <= n; i++)\n    {\n        factorial *= i;\n    }\n    \n\
    \    return factorial;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpu5pz4hjr.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d65]

    ??:? void tmpu5pz4hjr.__unittest_L25_C1() [0x427a62]

    ??:? void tmpu5pz4hjr.__modtest() [0x427ae8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba8b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a91e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa3d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8f5]

    ??:? runModuleUnitTests [0x42b861]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281b4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long factorial = 1;\n    \n  \
    \  for(long i = 1; i <= n; i++)\n    {\n        factorial *= i;\n    }\n    \n\
    \    return factorial;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpu5pz4hjr.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d65]

    ??:? void tmpu5pz4hjr.__unittest_L25_C1() [0x427a62]

    ??:? void tmpu5pz4hjr.__modtest() [0x427ae8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba8b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a91e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa3d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8f5]

    ??:? runModuleUnitTests [0x42b861]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281b4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long fact = 1;\n    \n    for(long\
    \ i = 1; i <= n; i++)\n    {\n        fact = fact * i;\n    }\n    \n    return\
    \ fact;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp5qsjqfnn.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d65]

    ??:? void tmp5qsjqfnn.__unittest_L25_C1() [0x427a62]

    ??:? void tmp5qsjqfnn.__modtest() [0x427ae8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba8b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a91e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa3d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8f5]

    ??:? runModuleUnitTests [0x42b861]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281b4]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long factorial = 1;\n    \n  \
    \  for(long i = 1; i <= n; i++)\n    {\n        factorial *= i;\n    }\n    \n\
    \    return factorial;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpu5pz4hjr.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d65]

    ??:? void tmpu5pz4hjr.__unittest_L25_C1() [0x427a62]

    ??:? void tmpu5pz4hjr.__modtest() [0x427ae8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba8b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a91e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa3d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8f5]

    ??:? runModuleUnitTests [0x42b861]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281b4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long factorial = 1;\n    \n  \
    \  for(long i = 1; i <= n; i++)\n    {\n        factorial *= i;\n    }\n    \n\
    \    return factorial;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpu5pz4hjr.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d65]

    ??:? void tmpu5pz4hjr.__unittest_L25_C1() [0x427a62]

    ??:? void tmpu5pz4hjr.__modtest() [0x427ae8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba8b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a91e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa3d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8f5]

    ??:? runModuleUnitTests [0x42b861]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281b4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long factorial = 1;\n    \n  \
    \  for(long i = 1; i <= n; i++)\n    {\n        factorial *= i;\n    }\n    \n\
    \    return factorial;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpu5pz4hjr.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d65]

    ??:? void tmpu5pz4hjr.__unittest_L25_C1() [0x427a62]

    ??:? void tmpu5pz4hjr.__modtest() [0x427ae8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba8b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a91e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa3d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8f5]

    ??:? runModuleUnitTests [0x42b861]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281b4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long fact = 1;\n    \n    for(long\
    \ i = 1; i <= n; i++){\n        fact *= i;\n    }\n    \n    return fact;\n}\n\
    unittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp3c3lbd_i.d(28): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d65]

    ??:? void tmp3c3lbd_i.__unittest_L24_C1() [0x427a62]

    ??:? void tmp3c3lbd_i.__modtest() [0x427ae8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba8b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a91e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa3d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8f5]

    ??:? runModuleUnitTests [0x42b861]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281b4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long fact = 1;\n    \n    for(long\
    \ i = 1; i <= n; i++){\n        fact *= i;\n    }\n    \n    return fact;\n}\n\
    unittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp3c3lbd_i.d(28): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d65]

    ??:? void tmp3c3lbd_i.__unittest_L24_C1() [0x427a62]

    ??:? void tmp3c3lbd_i.__modtest() [0x427ae8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba8b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a91e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa3d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8f5]

    ??:? runModuleUnitTests [0x42b861]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281b4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long factorial = 1;\n    \n  \
    \  for(long i = 1; i <= n; i++)\n    {\n        factorial *= i;\n    }\n    \n\
    \    return factorial;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpu5pz4hjr.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d65]

    ??:? void tmpu5pz4hjr.__unittest_L25_C1() [0x427a62]

    ??:? void tmpu5pz4hjr.__modtest() [0x427ae8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba8b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a91e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa3d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8f5]

    ??:? runModuleUnitTests [0x42b861]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281b4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long factorial = 1;\n    long\
    \ i;\n    for(i = 1; i <= n; i++)\n    {\n        factorial *= i;\n    }\n   \
    \ return factorial;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpxat0hvtr.d(28): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d6d]

    ??:? void tmpxat0hvtr.__unittest_L24_C1() [0x427a6a]

    ??:? void tmpxat0hvtr.__modtest() [0x427af0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba93]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a926]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff68]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa45]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8fd]

    ??:? runModuleUnitTests [0x42b869]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281bc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long factorial = 1;\n    \n  \
    \  for(long i = 2; i <= n; i++)\n    {\n        factorial *= i;\n    }\n    \n\
    \    return factorial;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpohta5js8.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d6d]

    ??:? void tmpohta5js8.__unittest_L25_C1() [0x427a66]

    ??:? void tmpohta5js8.__modtest() [0x427aec]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba93]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a926]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff68]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa45]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8fd]

    ??:? runModuleUnitTests [0x42b869]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281bc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long fact = 1;\n    \n    for(long\
    \ i = 1; i <= n; i++){\n        fact *= i;\n    }\n    return fact;\n}\nunittest\n\
    {\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n\
    \    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n\
    \    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp_f2rovwl.d(27): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d65]

    ??:? void tmp_f2rovwl.__unittest_L23_C1() [0x427a62]

    ??:? void tmp_f2rovwl.__modtest() [0x427ae8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba8b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a91e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa3d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8f5]

    ??:? runModuleUnitTests [0x42b861]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281b4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long factorial = 1;\n    \n  \
    \  for(long i = 1; i <= n; i++)\n    {\n        factorial *= i;\n    }\n    \n\
    \    return factorial;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpu5pz4hjr.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d65]

    ??:? void tmpu5pz4hjr.__unittest_L25_C1() [0x427a62]

    ??:? void tmpu5pz4hjr.__modtest() [0x427ae8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba8b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a91e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa3d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8f5]

    ??:? runModuleUnitTests [0x42b861]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281b4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long factorial = 1;\n    \n  \
    \  for(long i = 1; i <= n; i++)\n    {\n        factorial *= i;\n    }\n    \n\
    \    return factorial;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpu5pz4hjr.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d65]

    ??:? void tmpu5pz4hjr.__unittest_L25_C1() [0x427a62]

    ??:? void tmpu5pz4hjr.__modtest() [0x427ae8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba8b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a91e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa3d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8f5]

    ??:? runModuleUnitTests [0x42b861]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281b4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long fact = 1;\n    long i;\n\
    \    \n    for (i = 1; i <= n; i++)\n    {\n        fact *= i;\n    }\n    \n\
    \    return fact;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n\
    \    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n  \
    \  assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpwynet3p1.d(30): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d6d]

    ??:? void tmpwynet3p1.__unittest_L26_C1() [0x427a6a]

    ??:? void tmpwynet3p1.__modtest() [0x427af0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba93]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a926]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff68]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa45]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8fd]

    ??:? runModuleUnitTests [0x42b869]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281bc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long factorial = 1;\n    \n  \
    \  for(long i = 2; i <= n; i++)\n    {\n        factorial *= i;\n    }\n    \n\
    \    return factorial;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpohta5js8.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d6d]

    ??:? void tmpohta5js8.__unittest_L25_C1() [0x427a66]

    ??:? void tmpohta5js8.__modtest() [0x427aec]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba93]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a926]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff68]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa45]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8fd]

    ??:? runModuleUnitTests [0x42b869]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281bc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long factorial = 1;\n    \n  \
    \  for(long i = 1; i <= n; i++)\n    {\n        factorial *= i;\n    }\n    \n\
    \    return factorial;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpu5pz4hjr.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d65]

    ??:? void tmpu5pz4hjr.__unittest_L25_C1() [0x427a62]

    ??:? void tmpu5pz4hjr.__modtest() [0x427ae8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba8b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a91e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa3d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8f5]

    ??:? runModuleUnitTests [0x42b861]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281b4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long factorial = 1;\n    \n  \
    \  for(long i = 1; i <= n; i++)\n    {\n        factorial *= i;\n    }\n    \n\
    \    return factorial;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpu5pz4hjr.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d65]

    ??:? void tmpu5pz4hjr.__unittest_L25_C1() [0x427a62]

    ??:? void tmpu5pz4hjr.__modtest() [0x427ae8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba8b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a91e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa3d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8f5]

    ??:? runModuleUnitTests [0x42b861]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281b4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long factorial = 1;\n    \n  \
    \  for(long i = 1; i <= n; i++)\n    {\n        factorial *= i;\n    }\n    \n\
    \    return factorial;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpu5pz4hjr.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d65]

    ??:? void tmpu5pz4hjr.__unittest_L25_C1() [0x427a62]

    ??:? void tmpu5pz4hjr.__modtest() [0x427ae8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba8b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a91e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa3d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8f5]

    ??:? runModuleUnitTests [0x42b861]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281b4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long factorial = 1;\n    long\
    \ i;\n    for(i = 1; i <= n; i++)\n        factorial *= i;\n    return factorial;\n\
    }\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpqzz5cz04.d(26): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d6d]

    ??:? void tmpqzz5cz04.__unittest_L22_C1() [0x427a6a]

    ??:? void tmpqzz5cz04.__modtest() [0x427af0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba93]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a926]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff68]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa45]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8fd]

    ??:? runModuleUnitTests [0x42b869]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281bc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long fact = 1;\n    \n    for(long\
    \ i = 1; i <= n; i++)\n    {\n        fact *= i;\n    }\n    \n    return fact;\n\
    }\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp258wxvtc.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d65]

    ??:? void tmp258wxvtc.__unittest_L25_C1() [0x427a62]

    ??:? void tmp258wxvtc.__modtest() [0x427ae8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba8b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a91e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa3d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8f5]

    ??:? runModuleUnitTests [0x42b861]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281b4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long fact = 1;\n    long i;\n\
    \    \n    for (i = 1; i <= n; i++)\n        fact *= i;\n    \n    return fact;\n\
    }\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmphczrnoz5.d(28): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d6d]

    ??:? void tmphczrnoz5.__unittest_L24_C1() [0x427a6a]

    ??:? void tmphczrnoz5.__modtest() [0x427af0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba93]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a926]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff68]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa45]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8fd]

    ??:? runModuleUnitTests [0x42b869]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281bc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long fact = 1;\n    \n    for(long\
    \ i = 1; i <= n; i++){\n        fact = fact * i;\n    }\n    return fact;\n}\n\
    unittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp4wnpp8g3.d(27): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d65]

    ??:? void tmp4wnpp8g3.__unittest_L23_C1() [0x427a62]

    ??:? void tmp4wnpp8g3.__modtest() [0x427ae8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba8b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a91e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa3d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8f5]

    ??:? runModuleUnitTests [0x42b861]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281b4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long factorial = 1;\n    long\
    \ i;\n    \n    for (i = 1; i <= n; i++) {\n        factorial *= i;\n    }\n \
    \   return factorial;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpuieriu58.d(28): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d6d]

    ??:? void tmpuieriu58.__unittest_L24_C1() [0x427a6a]

    ??:? void tmpuieriu58.__modtest() [0x427af0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba93]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a926]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff68]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa45]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8fd]

    ??:? runModuleUnitTests [0x42b869]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281bc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long fact = 1;\n    \n    for(long\
    \ i = 1; i <= n; i++)\n    {\n        fact *= i;\n    }\n    \n    return fact;\n\
    }\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp258wxvtc.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d65]

    ??:? void tmp258wxvtc.__unittest_L25_C1() [0x427a62]

    ??:? void tmp258wxvtc.__modtest() [0x427ae8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba8b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a91e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa3d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8f5]

    ??:? runModuleUnitTests [0x42b861]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281b4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long fact = 1;\n    \n    for(long\
    \ i = 1; i <= n; i++)\n    {\n        fact *= i;\n    }\n    \n    return fact;\n\
    }\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp258wxvtc.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d65]

    ??:? void tmp258wxvtc.__unittest_L25_C1() [0x427a62]

    ??:? void tmp258wxvtc.__modtest() [0x427ae8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba8b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a91e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa3d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8f5]

    ??:? runModuleUnitTests [0x42b861]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281b4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long fact = 1;\n    \n    for(long\
    \ i = 2; i <= n; i++)\n    {\n        fact *= i;\n    }\n    \n    return fact;\n\
    }\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpmyl7kt2y.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d6d]

    ??:? void tmpmyl7kt2y.__unittest_L25_C1() [0x427a66]

    ??:? void tmpmyl7kt2y.__modtest() [0x427aec]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba93]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a926]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff68]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa45]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8fd]

    ??:? runModuleUnitTests [0x42b869]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281bc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long factorial = 1;\n    \n  \
    \  for(int i = 1; i <= n; i++)\n    {\n        factorial *= i;\n    }\n    \n\
    \    return factorial;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp4o_cdubx.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d6d]

    ??:? void tmp4o_cdubx.__unittest_L25_C1() [0x427a66]

    ??:? void tmp4o_cdubx.__modtest() [0x427aec]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba93]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a926]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff68]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa45]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8fd]

    ??:? runModuleUnitTests [0x42b869]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281bc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long factorial = 1;\n    long\
    \ i;\n    for(i = 1; i <= n; i++)\n    {\n        factorial *= i;\n    }\n   \
    \ return factorial;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpxat0hvtr.d(28): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d6d]

    ??:? void tmpxat0hvtr.__unittest_L24_C1() [0x427a6a]

    ??:? void tmpxat0hvtr.__modtest() [0x427af0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba93]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a926]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff68]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa45]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8fd]

    ??:? runModuleUnitTests [0x42b869]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281bc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long fact = 1;\n    \n    for(long\
    \ i = 1; i <= n; i++)\n    {\n        fact = fact * i;\n    }\n    \n    return\
    \ fact;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp5qsjqfnn.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d65]

    ??:? void tmp5qsjqfnn.__unittest_L25_C1() [0x427a62]

    ??:? void tmp5qsjqfnn.__modtest() [0x427ae8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba8b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a91e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa3d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8f5]

    ??:? runModuleUnitTests [0x42b861]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281b4]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long fact = 1;\n    \n    for(long\
    \ i = 1; i <= n; i++)\n    {\n        fact = fact * i;\n    }\n    \n    return\
    \ fact;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp5qsjqfnn.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d65]

    ??:? void tmp5qsjqfnn.__unittest_L25_C1() [0x427a62]

    ??:? void tmp5qsjqfnn.__modtest() [0x427ae8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba8b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a91e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa3d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8f5]

    ??:? runModuleUnitTests [0x42b861]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281b4]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long fact = 1;\n    \n    for(long\
    \ i = 1; i <= n; i++)\n    {\n        fact *= i;\n    }\n    \n    return fact;\n\
    }\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp258wxvtc.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d65]

    ??:? void tmp258wxvtc.__unittest_L25_C1() [0x427a62]

    ??:? void tmp258wxvtc.__modtest() [0x427ae8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba8b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a91e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa3d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8f5]

    ??:? runModuleUnitTests [0x42b861]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281b4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long factorial = 1;\n    \n  \
    \  for(long i = 2; i <= n; i++)\n    {\n        factorial *= i;\n    }\n    \n\
    \    return factorial;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpohta5js8.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d6d]

    ??:? void tmpohta5js8.__unittest_L25_C1() [0x427a66]

    ??:? void tmpohta5js8.__modtest() [0x427aec]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba93]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a926]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff68]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa45]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8fd]

    ??:? runModuleUnitTests [0x42b869]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281bc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long fact = 1;\n    for(long i\
    \ = 2; i <= n; i++)\n    {\n        fact *= i;\n    }\n    return fact;\n}\nunittest\n\
    {\n    alias candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n\
    \    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) == 125411328000L);\n\
    \    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpm0x0g8w2.d(27): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d6d]

    ??:? void tmpm0x0g8w2.__unittest_L23_C1() [0x427a66]

    ??:? void tmpm0x0g8w2.__modtest() [0x427aec]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba93]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a926]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff68]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa45]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8fd]

    ??:? runModuleUnitTests [0x42b869]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281bc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long factorial = 1;\n    long\
    \ i;\n    \n    for (i = 1; i <= n; i++) {\n        factorial *= i;\n    }\n \
    \   \n    return factorial;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpzkg4bypz.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d6d]

    ??:? void tmpzkg4bypz.__unittest_L25_C1() [0x427a6a]

    ??:? void tmpzkg4bypz.__modtest() [0x427af0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba93]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a926]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff68]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa45]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8fd]

    ??:? runModuleUnitTests [0x42b869]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281bc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long fact = 1;\n    long i;\n\
    \    \n    for (i = 1; i <= n; i++) {\n        fact = fact * i;\n    }\n    return\
    \ fact;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpkb8u46g_.d(28): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d6d]

    ??:? void tmpkb8u46g_.__unittest_L24_C1() [0x427a6a]

    ??:? void tmpkb8u46g_.__modtest() [0x427af0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba93]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a926]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff68]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa45]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8fd]

    ??:? runModuleUnitTests [0x42b869]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281bc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long factorial = 1;\n    \n  \
    \  for(long i = 1; i <= n; i++)\n    {\n        factorial *= i;\n    }\n    \n\
    \    return factorial;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpu5pz4hjr.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d65]

    ??:? void tmpu5pz4hjr.__unittest_L25_C1() [0x427a62]

    ??:? void tmpu5pz4hjr.__modtest() [0x427ae8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba8b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a91e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa3d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8f5]

    ??:? runModuleUnitTests [0x42b861]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281b4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long factorial = 1;\n    long\
    \ i;\n    for(i = 1; i <= n; i++)\n    {\n        factorial *= i;\n    }\n   \
    \ return factorial;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpxat0hvtr.d(28): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d6d]

    ??:? void tmpxat0hvtr.__unittest_L24_C1() [0x427a6a]

    ??:? void tmpxat0hvtr.__modtest() [0x427af0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba93]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a926]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff68]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa45]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8fd]

    ??:? runModuleUnitTests [0x42b869]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281bc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long factorial = 1;\n    \n  \
    \  for(long i = 2; i <= n; i++)\n    {\n        factorial *= i;\n    }\n    \n\
    \    return factorial;\n}\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\nunittest\n{\n    alias candidate\
    \ = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L)\
    \ == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L)\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1g43k064.d(25): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1g43k064.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long factorial = 1;\n    long\
    \ i;\n    \n    for(i = 1; i <= n; i++)\n    {\n        factorial *= i;\n    }\n\
    \    \n    return factorial;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpa3678bw2.d(30): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d6d]

    ??:? void tmpa3678bw2.__unittest_L26_C1() [0x427a6a]

    ??:? void tmpa3678bw2.__modtest() [0x427af0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba93]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a926]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff68]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa45]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8fd]

    ??:? runModuleUnitTests [0x42b869]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281bc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long fact = 1;\n    \n    for(long\
    \ i = 1; i <= n; i++){\n        fact = fact * i;\n    }\n    \n    return fact;\n\
    }\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpt616348a.d(28): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d65]

    ??:? void tmpt616348a.__unittest_L24_C1() [0x427a62]

    ??:? void tmpt616348a.__modtest() [0x427ae8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba8b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a91e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa3d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8f5]

    ??:? runModuleUnitTests [0x42b861]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281b4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long factorial = 1;\n    long\
    \ i;\n    \n    for (i = 1; i <= n; i++) \n    {\n        factorial *= i;\n  \
    \  }\n    return factorial;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp5wlnvfqv.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d6d]

    ??:? void tmp5wlnvfqv.__unittest_L25_C1() [0x427a6a]

    ??:? void tmp5wlnvfqv.__modtest() [0x427af0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba93]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a926]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff68]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa45]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8fd]

    ??:? runModuleUnitTests [0x42b869]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281bc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long factorial = 1;\n    long\
    \ i;\n    \n    for (i = 1; i <= n; i++)\n    {\n        factorial *= i;\n   \
    \ }\n    return factorial;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmprqaa4t5e.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d6d]

    ??:? void tmprqaa4t5e.__unittest_L25_C1() [0x427a6a]

    ??:? void tmprqaa4t5e.__modtest() [0x427af0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba93]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a926]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff68]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa45]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8fd]

    ??:? runModuleUnitTests [0x42b869]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281bc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long factorial = 1;\n    long\
    \ i;\n    for(i = 1; i <= n; i++){\n        factorial *= i;\n    }\n    return\
    \ factorial;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n   \
    \ assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L)\
    \ == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpu1kvp8br.d(27): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d6d]

    ??:? void tmpu1kvp8br.__unittest_L23_C1() [0x427a6a]

    ??:? void tmpu1kvp8br.__modtest() [0x427af0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba93]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a926]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff68]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa45]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8fd]

    ??:? runModuleUnitTests [0x42b869]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281bc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long factorial = 1;\n    long\
    \ i;\n    \n    for(i = 1; i <= n; i++)\n    {\n        factorial *= i;\n    }\n\
    \    return factorial;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpc5itvl7z.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d6d]

    ??:? void tmpc5itvl7z.__unittest_L25_C1() [0x427a6a]

    ??:? void tmpc5itvl7z.__modtest() [0x427af0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba93]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a926]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff68]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa45]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8fd]

    ??:? runModuleUnitTests [0x42b869]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281bc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long fact = 1;\n    \n    for(long\
    \ i = 2; i <= n; i++)\n    {\n        fact *= i;\n    }\n    \n    return fact;\n\
    }\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpmyl7kt2y.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d6d]

    ??:? void tmpmyl7kt2y.__unittest_L25_C1() [0x427a66]

    ??:? void tmpmyl7kt2y.__modtest() [0x427aec]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba93]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a926]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff68]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa45]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8fd]

    ??:? runModuleUnitTests [0x42b869]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281bc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long factorial = 1;\n    \n  \
    \  for(long i = 2; i <= n; i++)\n    {\n        factorial *= i;\n    }\n    \n\
    \    return factorial;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpohta5js8.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d6d]

    ??:? void tmpohta5js8.__unittest_L25_C1() [0x427a66]

    ??:? void tmpohta5js8.__modtest() [0x427aec]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba93]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a926]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff68]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa45]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8fd]

    ??:? runModuleUnitTests [0x42b869]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281bc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long fact = 1;\n    \n    for(long\
    \ i = 1; i <= n; i++)\n    {\n        fact *= i;\n    }\n    \n    return fact;\n\
    }\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp258wxvtc.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d65]

    ??:? void tmp258wxvtc.__unittest_L25_C1() [0x427a62]

    ??:? void tmp258wxvtc.__modtest() [0x427ae8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba8b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a91e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa3d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8f5]

    ??:? runModuleUnitTests [0x42b861]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281b4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long factorial = 1;\n    \n  \
    \  for(long i = 1; i <= n; i++){\n        factorial *= i;\n    }\n    \n    return\
    \ factorial;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n   \
    \ assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L)\
    \ == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpjrr47tyt.d(28): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d65]

    ??:? void tmpjrr47tyt.__unittest_L24_C1() [0x427a62]

    ??:? void tmpjrr47tyt.__modtest() [0x427ae8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba8b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a91e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa3d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8f5]

    ??:? runModuleUnitTests [0x42b861]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281b4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long factorial = 1;\n    \n  \
    \  for(long i = 1; i <= n; i++)\n    {\n        factorial *= i;\n    }\n    \n\
    \    return factorial;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpu5pz4hjr.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d65]

    ??:? void tmpu5pz4hjr.__unittest_L25_C1() [0x427a62]

    ??:? void tmpu5pz4hjr.__modtest() [0x427ae8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba8b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a91e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa3d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8f5]

    ??:? runModuleUnitTests [0x42b861]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281b4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long factorial = 1;\n    \n  \
    \  for(long i = 1; i <= n; i++)\n    {\n        factorial *= i;\n    }\n    \n\
    \    return factorial;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpu5pz4hjr.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d65]

    ??:? void tmpu5pz4hjr.__unittest_L25_C1() [0x427a62]

    ??:? void tmpu5pz4hjr.__modtest() [0x427ae8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba8b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a91e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa3d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8f5]

    ??:? runModuleUnitTests [0x42b861]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281b4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long fact = 1;\n    \n    for(long\
    \ i = 1; i <= n; i++)\n    {\n        fact *= i;\n    }\n    \n    return fact;\n\
    }\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp258wxvtc.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d65]

    ??:? void tmp258wxvtc.__unittest_L25_C1() [0x427a62]

    ??:? void tmp258wxvtc.__modtest() [0x427ae8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba8b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a91e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa3d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8f5]

    ??:? runModuleUnitTests [0x42b861]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281b4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long factorial = 1;\n    long\
    \ i;\n    \n    for (i = 1; i <= n; i++)\n    {\n        factorial *= i;\n   \
    \ }\n    \n    return factorial;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpfurl8yx7.d(30): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d6d]

    ??:? void tmpfurl8yx7.__unittest_L26_C1() [0x427a6a]

    ??:? void tmpfurl8yx7.__modtest() [0x427af0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba93]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a926]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff68]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa45]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8fd]

    ??:? runModuleUnitTests [0x42b869]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281bc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long fact = 1;\n    \n    for(long\
    \ i = 1; i <= n; i++)\n    {\n        fact = fact * i;\n    }\n    \n    return\
    \ fact;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp5qsjqfnn.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d65]

    ??:? void tmp5qsjqfnn.__unittest_L25_C1() [0x427a62]

    ??:? void tmp5qsjqfnn.__modtest() [0x427ae8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba8b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a91e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa3d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8f5]

    ??:? runModuleUnitTests [0x42b861]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281b4]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long factorial = 1;\n    \n  \
    \  for(long i = 1; i <= n; i++){\n        factorial *= i;\n    }\n    \n    return\
    \ factorial;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n   \
    \ assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L)\
    \ == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpjrr47tyt.d(28): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d65]

    ??:? void tmpjrr47tyt.__unittest_L24_C1() [0x427a62]

    ??:? void tmpjrr47tyt.__modtest() [0x427ae8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba8b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a91e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa3d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8f5]

    ??:? runModuleUnitTests [0x42b861]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281b4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long factorial = 1;\n    \n  \
    \  for(long i = 1; i <= n; i++)\n    {\n        factorial *= i;\n    }\n    \n\
    \    return factorial;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpu5pz4hjr.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d65]

    ??:? void tmpu5pz4hjr.__unittest_L25_C1() [0x427a62]

    ??:? void tmpu5pz4hjr.__modtest() [0x427ae8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba8b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a91e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa3d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8f5]

    ??:? runModuleUnitTests [0x42b861]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281b4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long factorial = 1;\n    long\
    \ i;\n    \n    for(i = 1; i <= n; i++)\n    {\n        factorial *= i;\n    }\n\
    \    return factorial;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpc5itvl7z.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d6d]

    ??:? void tmpc5itvl7z.__unittest_L25_C1() [0x427a6a]

    ??:? void tmpc5itvl7z.__modtest() [0x427af0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba93]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a926]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff68]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa45]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8fd]

    ??:? runModuleUnitTests [0x42b869]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281bc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long fact = 1;\n    \n    for(long\
    \ i = 2; i <= n; i++)\n    {\n        fact *= i;\n    }\n    \n    return fact;\n\
    }\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpmyl7kt2y.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d6d]

    ??:? void tmpmyl7kt2y.__unittest_L25_C1() [0x427a66]

    ??:? void tmpmyl7kt2y.__modtest() [0x427aec]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba93]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a926]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff68]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa45]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8fd]

    ??:? runModuleUnitTests [0x42b869]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281bc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long fact = 1;\n    \n    for(long\
    \ i = 1; i <= n; i++)\n    {\n        fact = fact * i;\n    }\n    \n    return\
    \ fact;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp5qsjqfnn.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d65]

    ??:? void tmp5qsjqfnn.__unittest_L25_C1() [0x427a62]

    ??:? void tmp5qsjqfnn.__modtest() [0x427ae8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba8b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a91e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa3d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8f5]

    ??:? runModuleUnitTests [0x42b861]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281b4]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    long factorial\
    \ = 1;\n    \n    for(long i = 1; i <= n; i++)\n    {\n        factorial *= i;\n\
    \    }\n    \n    for(long i = 2; i <= n; i++)\n    {\n        result *= i;\n\
    \        result *= factorial;\n    }\n    \n    return result;\n}\n/*\nThe Brazilian\
    \ factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)!\
    \ * ... * 1!\n    where n > 0\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplvm7ys7e.d(32): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplvm7ys7e.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long factorial = 1;\n    \n  \
    \  for(long i = 1; i <= n; i++){\n        factorial *= i;\n    }\n    \n    return\
    \ factorial;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n   \
    \ assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L)\
    \ == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpjrr47tyt.d(28): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d65]

    ??:? void tmpjrr47tyt.__unittest_L24_C1() [0x427a62]

    ??:? void tmpjrr47tyt.__modtest() [0x427ae8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba8b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a91e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa3d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8f5]

    ??:? runModuleUnitTests [0x42b861]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281b4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long factorial = 1;\n    long\
    \ i;\n    \n    for (i = 1; i <= n; i++)\n    {\n        factorial *= i;\n   \
    \ }\n    \n    return factorial;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpfurl8yx7.d(30): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d6d]

    ??:? void tmpfurl8yx7.__unittest_L26_C1() [0x427a6a]

    ??:? void tmpfurl8yx7.__modtest() [0x427af0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba93]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a926]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff68]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa45]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8fd]

    ??:? runModuleUnitTests [0x42b869]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281bc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long factorial = 1;\n    \n  \
    \  for(int i = 1; i <= n; i++)\n    {\n        factorial *= i;\n    }\n    \n\
    \    return factorial;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp4o_cdubx.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d6d]

    ??:? void tmp4o_cdubx.__unittest_L25_C1() [0x427a66]

    ??:? void tmp4o_cdubx.__modtest() [0x427aec]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba93]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a926]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff68]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa45]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8fd]

    ??:? runModuleUnitTests [0x42b869]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281bc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long fact = 1;\n    \n    for(long\
    \ i = 1; i <= n; i++)\n    {\n        fact = fact * i;\n    }\n    return fact;\n\
    }\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp4d1rdvy4.d(28): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d65]

    ??:? void tmp4d1rdvy4.__unittest_L24_C1() [0x427a62]

    ??:? void tmp4d1rdvy4.__modtest() [0x427ae8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba8b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a91e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa3d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8f5]

    ??:? runModuleUnitTests [0x42b861]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281b4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long fact = 1;\n    \n    for(long\
    \ i = 1; i <= n; i++)\n    {\n        fact = fact * i;\n    }\n    \n    return\
    \ fact;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp5qsjqfnn.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d65]

    ??:? void tmp5qsjqfnn.__unittest_L25_C1() [0x427a62]

    ??:? void tmp5qsjqfnn.__modtest() [0x427ae8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba8b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a91e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa3d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8f5]

    ??:? runModuleUnitTests [0x42b861]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281b4]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long factorial = 1;\n    long\
    \ i;\n    for(i = 1; i <= n; i++)\n    {\n        factorial *= i;\n    }\n   \
    \ return factorial;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpxat0hvtr.d(28): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d6d]

    ??:? void tmpxat0hvtr.__unittest_L24_C1() [0x427a6a]

    ??:? void tmpxat0hvtr.__modtest() [0x427af0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba93]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a926]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff68]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa45]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8fd]

    ??:? runModuleUnitTests [0x42b869]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281bc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long factorial = 1;\n    long\
    \ i;\n    for(i = 1; i <= n; i++)\n    {\n        factorial *= i;\n    }\n   \
    \ return factorial;\n}\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\nunittest\n{\n    alias candidate\
    \ = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L)\
    \ == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L)\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvjv7pcl7.d(24): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvjv7pcl7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long factorial = 1;\n    \n  \
    \  for(int i = 1; i <= n; i++)\n    {\n        factorial *= i;\n    }\n    \n\
    \    return factorial;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp4o_cdubx.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d6d]

    ??:? void tmp4o_cdubx.__unittest_L25_C1() [0x427a66]

    ??:? void tmp4o_cdubx.__modtest() [0x427aec]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba93]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a926]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff68]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa45]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8fd]

    ??:? runModuleUnitTests [0x42b869]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281bc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long factorial = 1;\n    \n  \
    \  for(long i = 1; i <= n; i++)\n    {\n        factorial *= i;\n    }\n    \n\
    \    return factorial;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpu5pz4hjr.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d65]

    ??:? void tmpu5pz4hjr.__unittest_L25_C1() [0x427a62]

    ??:? void tmpu5pz4hjr.__modtest() [0x427ae8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba8b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a91e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa3d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8f5]

    ??:? runModuleUnitTests [0x42b861]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281b4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long fact = 1;\n    \n    for(long\
    \ i = 1; i <= n; i++)\n    {\n        fact *= i;\n    }\n    \n    return fact;\n\
    }\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp258wxvtc.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d65]

    ??:? void tmp258wxvtc.__unittest_L25_C1() [0x427a62]

    ??:? void tmp258wxvtc.__modtest() [0x427ae8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba8b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a91e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa3d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8f5]

    ??:? runModuleUnitTests [0x42b861]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281b4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long fact = 1;\n    \n    for(long\
    \ i = 1; i <= n; i++)\n    {\n        fact = fact * i;\n    }\n    \n    return\
    \ fact;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp5qsjqfnn.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d65]

    ??:? void tmp5qsjqfnn.__unittest_L25_C1() [0x427a62]

    ??:? void tmp5qsjqfnn.__modtest() [0x427ae8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba8b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a91e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa3d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8f5]

    ??:? runModuleUnitTests [0x42b861]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281b4]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long factorial = 1;\n    \n  \
    \  for(long i = 1; i <= n; i++)\n    {\n        factorial *= i;\n    }\n    \n\
    \    return factorial;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpu5pz4hjr.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d65]

    ??:? void tmpu5pz4hjr.__unittest_L25_C1() [0x427a62]

    ??:? void tmpu5pz4hjr.__modtest() [0x427ae8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba8b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a91e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa3d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8f5]

    ??:? runModuleUnitTests [0x42b861]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281b4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long factorial = 1;\n    long\
    \ i;\n    \n    for (i = 1; i <= n; i++) {\n        factorial *= i;\n    }\n \
    \   return factorial;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpuieriu58.d(28): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d6d]

    ??:? void tmpuieriu58.__unittest_L24_C1() [0x427a6a]

    ??:? void tmpuieriu58.__modtest() [0x427af0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba93]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a926]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff68]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa45]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8fd]

    ??:? runModuleUnitTests [0x42b869]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281bc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long fact = 1;\n    long i;\n\
    \    \n    for(i = 1; i <= n; i++)\n    {\n        fact *= i;\n    }\n    return\
    \ fact;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpvw1c4_uj.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d6d]

    ??:? void tmpvw1c4_uj.__unittest_L25_C1() [0x427a6a]

    ??:? void tmpvw1c4_uj.__modtest() [0x427af0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba93]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a926]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff68]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa45]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8fd]

    ??:? runModuleUnitTests [0x42b869]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281bc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long fact = 1;\n    \n    for(long\
    \ i = 1; i <= n; i++){\n        fact *= i;\n    }\n    \n    return fact;\n}\n\
    unittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp3c3lbd_i.d(28): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d65]

    ??:? void tmp3c3lbd_i.__unittest_L24_C1() [0x427a62]

    ??:? void tmp3c3lbd_i.__modtest() [0x427ae8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba8b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a91e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa3d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8f5]

    ??:? runModuleUnitTests [0x42b861]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281b4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long factorial = 1;\n    \n  \
    \  for(long i = 1; i <= n; i++)\n    {\n        factorial *= i;\n    }\n    \n\
    \    return factorial;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpu5pz4hjr.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d65]

    ??:? void tmpu5pz4hjr.__unittest_L25_C1() [0x427a62]

    ??:? void tmpu5pz4hjr.__modtest() [0x427ae8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba8b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a91e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa3d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8f5]

    ??:? runModuleUnitTests [0x42b861]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281b4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long fact = 1;\n    \n    for(long\
    \ i = 1; i <= n; i++)\n    {\n        fact *= i;\n    }\n    \n    return fact;\n\
    }\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp258wxvtc.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d65]

    ??:? void tmp258wxvtc.__unittest_L25_C1() [0x427a62]

    ??:? void tmp258wxvtc.__modtest() [0x427ae8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba8b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a91e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa3d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8f5]

    ??:? runModuleUnitTests [0x42b861]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281b4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long factorial = 1;\n    \n  \
    \  for(long i = 1; i <= n; i++)\n    {\n        factorial *= i;\n    }\n    \n\
    \    return factorial;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpu5pz4hjr.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d65]

    ??:? void tmpu5pz4hjr.__unittest_L25_C1() [0x427a62]

    ??:? void tmpu5pz4hjr.__modtest() [0x427ae8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba8b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a91e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa3d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8f5]

    ??:? runModuleUnitTests [0x42b861]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281b4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long fact = 1;\n    \n    for(long\
    \ i = 2; i <= n; i++)\n    {\n        fact *= i;\n    }\n    \n    return fact;\n\
    }\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpmyl7kt2y.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d6d]

    ??:? void tmpmyl7kt2y.__unittest_L25_C1() [0x427a66]

    ??:? void tmpmyl7kt2y.__modtest() [0x427aec]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba93]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a926]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff68]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa45]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8fd]

    ??:? runModuleUnitTests [0x42b869]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281bc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long factorial = 1;\n    long\
    \ i;\n    \n    for(i = 1; i <= n; i++)\n    {\n        factorial *= i;\n    }\n\
    \    return factorial;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpc5itvl7z.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d6d]

    ??:? void tmpc5itvl7z.__unittest_L25_C1() [0x427a6a]

    ??:? void tmpc5itvl7z.__modtest() [0x427af0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba93]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a926]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff68]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa45]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8fd]

    ??:? runModuleUnitTests [0x42b869]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281bc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    \n    for(long\
    \ i = 1; i <= n; i++)\n    {\n        result *= i;\n    }\n    \n    return result;\n\
    }\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmps6zunos3.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d65]

    ??:? void tmps6zunos3.__unittest_L25_C1() [0x427a62]

    ??:? void tmps6zunos3.__modtest() [0x427ae8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba8b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a91e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa3d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8f5]

    ??:? runModuleUnitTests [0x42b861]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281b4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long factorial = 1;\n    long\
    \ i;\n    \n    for (i = 1; i <= n; i++)\n    {\n        factorial *= i;\n   \
    \ }\n    return factorial;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmprqaa4t5e.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d6d]

    ??:? void tmprqaa4t5e.__unittest_L25_C1() [0x427a6a]

    ??:? void tmprqaa4t5e.__modtest() [0x427af0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba93]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a926]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff68]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa45]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8fd]

    ??:? runModuleUnitTests [0x42b869]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281bc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long factorial = 1;\n    \n  \
    \  for(long i = 1; i <= n; i++)\n    {\n        factorial *= i;\n    }\n    \n\
    \    return factorial;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpu5pz4hjr.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d65]

    ??:? void tmpu5pz4hjr.__unittest_L25_C1() [0x427a62]

    ??:? void tmpu5pz4hjr.__modtest() [0x427ae8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba8b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a91e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa3d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8f5]

    ??:? runModuleUnitTests [0x42b861]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281b4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long fact = 1;\n    long i;\n\
    \    for(i = 1; i <= n; i++)\n    {\n        fact = fact * i;\n    }\n    return\
    \ fact;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmphwppl3et.d(28): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d6d]

    ??:? void tmphwppl3et.__unittest_L24_C1() [0x427a6a]

    ??:? void tmphwppl3et.__modtest() [0x427af0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba93]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a926]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff68]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa45]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8fd]

    ??:? runModuleUnitTests [0x42b869]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281bc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long factorial = 1;\n    \n  \
    \  for(long i = 1; i <= n; i++)\n    {\n        factorial *= i;\n    }\n    \n\
    \    return factorial;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpu5pz4hjr.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d65]

    ??:? void tmpu5pz4hjr.__unittest_L25_C1() [0x427a62]

    ??:? void tmpu5pz4hjr.__modtest() [0x427ae8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba8b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a91e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa3d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8f5]

    ??:? runModuleUnitTests [0x42b861]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281b4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long fact = 1;\n    \n    for(long\
    \ i = 1; i <= n; i++)\n    {\n        fact *= i;\n    }\n    \n    return fact;\n\
    }\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp258wxvtc.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d65]

    ??:? void tmp258wxvtc.__unittest_L25_C1() [0x427a62]

    ??:? void tmp258wxvtc.__modtest() [0x427ae8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba8b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a91e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa3d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8f5]

    ??:? runModuleUnitTests [0x42b861]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281b4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    for(long\
    \ i = 1; i <= n; i++)\n    {\n        result *= i;\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpokoe_kna.d(27): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d65]

    ??:? void tmpokoe_kna.__unittest_L23_C1() [0x427a62]

    ??:? void tmpokoe_kna.__modtest() [0x427ae8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba8b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a91e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa3d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8f5]

    ??:? runModuleUnitTests [0x42b861]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281b4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long factorial = 1;\n    long\
    \ i;\n    for(i = 1; i <= n; i++)\n    {\n        factorial *= i;\n    }\n   \
    \ return factorial;\n}\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\nunittest\n{\n    alias candidate\
    \ = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L)\
    \ == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L)\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvjv7pcl7.d(24): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvjv7pcl7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long factorial = 1;\n    \n  \
    \  for(int i = 1; i <= n; i++)\n    {\n        factorial *= i;\n    }\n    \n\
    \    return factorial;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp4o_cdubx.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d6d]

    ??:? void tmp4o_cdubx.__unittest_L25_C1() [0x427a66]

    ??:? void tmp4o_cdubx.__modtest() [0x427aec]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba93]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a926]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff68]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa45]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8fd]

    ??:? runModuleUnitTests [0x42b869]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281bc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long fact = 1;\n    for(long i\
    \ = 1; i <= n; i++)\n    {\n        fact = fact * i;\n    }\n    return fact;\n\
    }\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpf6r4rn37.d(27): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d65]

    ??:? void tmpf6r4rn37.__unittest_L23_C1() [0x427a62]

    ??:? void tmpf6r4rn37.__modtest() [0x427ae8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba8b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a91e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa3d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8f5]

    ??:? runModuleUnitTests [0x42b861]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281b4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long fact = 1;\n    \n    for(long\
    \ i = 1; i <= n; i++) \n    {\n        fact *= i;\n    }\n    \n    return fact;\n\
    }\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpju83ej_r.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d65]

    ??:? void tmpju83ej_r.__unittest_L25_C1() [0x427a62]

    ??:? void tmpju83ej_r.__modtest() [0x427ae8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba8b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a91e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa3d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8f5]

    ??:? runModuleUnitTests [0x42b861]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281b4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long factorial = 1;\n    \n  \
    \  for(long i = 1; i <= n; i++)\n    {\n        factorial *= i;\n    }\n    \n\
    \    return factorial;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpu5pz4hjr.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d65]

    ??:? void tmpu5pz4hjr.__unittest_L25_C1() [0x427a62]

    ??:? void tmpu5pz4hjr.__modtest() [0x427ae8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba8b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a91e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa3d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8f5]

    ??:? runModuleUnitTests [0x42b861]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281b4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long factorial = 1;\n    long\
    \ i;\n    \n    for (i = 1; i <= n; i++)\n        factorial *= i;\n    \n    return\
    \ factorial;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n   \
    \ assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L)\
    \ == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmprmsqj579.d(28): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d6d]

    ??:? void tmprmsqj579.__unittest_L24_C1() [0x427a6a]

    ??:? void tmprmsqj579.__modtest() [0x427af0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba93]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a926]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff68]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa45]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8fd]

    ??:? runModuleUnitTests [0x42b869]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281bc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long factorial = 1;\n    \n  \
    \  for(long i = 1; i <= n; i++)\n    {\n        factorial *= i;\n    }\n    \n\
    \    return factorial;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpu5pz4hjr.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d65]

    ??:? void tmpu5pz4hjr.__unittest_L25_C1() [0x427a62]

    ??:? void tmpu5pz4hjr.__modtest() [0x427ae8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba8b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a91e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa3d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8f5]

    ??:? runModuleUnitTests [0x42b861]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281b4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long fact = 1;\n    \n    for(long\
    \ i = 1; i <= n; i++)\n    {\n        fact *= i;\n    }\n    \n    return fact;\n\
    }\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp258wxvtc.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d65]

    ??:? void tmp258wxvtc.__unittest_L25_C1() [0x427a62]

    ??:? void tmp258wxvtc.__modtest() [0x427ae8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba8b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a91e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa3d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8f5]

    ??:? runModuleUnitTests [0x42b861]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281b4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long fact = 1;\n    \n    for(long\
    \ i = 1; i <= n; i++)\n    {\n        fact *= i;\n    }\n    \n    return fact;\n\
    }\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp258wxvtc.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d65]

    ??:? void tmp258wxvtc.__unittest_L25_C1() [0x427a62]

    ??:? void tmp258wxvtc.__modtest() [0x427ae8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba8b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a91e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa3d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8f5]

    ??:? runModuleUnitTests [0x42b861]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281b4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long fact = 1;\n    \n    for(long\
    \ i = 2; i <= n; i++)\n    {\n        fact *= i;\n    }\n    \n    return fact;\n\
    }\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpmyl7kt2y.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d6d]

    ??:? void tmpmyl7kt2y.__unittest_L25_C1() [0x427a66]

    ??:? void tmpmyl7kt2y.__modtest() [0x427aec]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba93]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a926]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff68]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa45]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8fd]

    ??:? runModuleUnitTests [0x42b869]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281bc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long factorial = 1;\n    \n  \
    \  for(long i = 2; i <= n; i++)\n    {\n        factorial *= i;\n    }\n    \n\
    \    return factorial;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpohta5js8.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d6d]

    ??:? void tmpohta5js8.__unittest_L25_C1() [0x427a66]

    ??:? void tmpohta5js8.__modtest() [0x427aec]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba93]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a926]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff68]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa45]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8fd]

    ??:? runModuleUnitTests [0x42b869]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281bc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long fact = 1;\n    \n    for(long\
    \ i = 1; i <= n; i++)\n    {\n        fact *= i;\n    }\n    \n    return fact;\n\
    }\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp258wxvtc.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d65]

    ??:? void tmp258wxvtc.__unittest_L25_C1() [0x427a62]

    ??:? void tmp258wxvtc.__modtest() [0x427ae8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba8b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a91e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa3d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8f5]

    ??:? runModuleUnitTests [0x42b861]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281b4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long factorial = 1;\n    long\
    \ i;\n    \n    for (i = 1; i <= n; i++)\n    {\n        factorial *= i;\n   \
    \ }\n    \n    return factorial;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpfurl8yx7.d(30): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d6d]

    ??:? void tmpfurl8yx7.__unittest_L26_C1() [0x427a6a]

    ??:? void tmpfurl8yx7.__modtest() [0x427af0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba93]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a926]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff68]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa45]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8fd]

    ??:? runModuleUnitTests [0x42b869]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281bc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long factorial = 1;\n    \n  \
    \  for(int i = 1; i <= n; i++)\n    {\n        factorial *= i;\n    }\n    \n\
    \    return factorial;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp4o_cdubx.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d6d]

    ??:? void tmp4o_cdubx.__unittest_L25_C1() [0x427a66]

    ??:? void tmp4o_cdubx.__modtest() [0x427aec]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba93]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a926]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff68]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa45]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8fd]

    ??:? runModuleUnitTests [0x42b869]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281bc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long fact = 1;\n    \n    for(long\
    \ i = 1; i <= n; i++)\n    {\n        fact = fact * i;\n    }\n    \n    return\
    \ fact;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp5qsjqfnn.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d65]

    ??:? void tmp5qsjqfnn.__unittest_L25_C1() [0x427a62]

    ??:? void tmp5qsjqfnn.__modtest() [0x427ae8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba8b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a91e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa3d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8f5]

    ??:? runModuleUnitTests [0x42b861]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281b4]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long factorial = 1;\n    long\
    \ i;\n    for(i = 1; i <= n; i++)\n    {\n        factorial *= i;\n    }\n   \
    \ return factorial;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpxat0hvtr.d(28): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d6d]

    ??:? void tmpxat0hvtr.__unittest_L24_C1() [0x427a6a]

    ??:? void tmpxat0hvtr.__modtest() [0x427af0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba93]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a926]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff68]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa45]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8fd]

    ??:? runModuleUnitTests [0x42b869]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281bc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long factorial = 1;\n    \n  \
    \  for(long i = 1; i <= n; i++){\n        factorial *= i;\n    }\n    \n    return\
    \ factorial;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n   \
    \ assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L)\
    \ == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpjrr47tyt.d(28): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d65]

    ??:? void tmpjrr47tyt.__unittest_L24_C1() [0x427a62]

    ??:? void tmpjrr47tyt.__modtest() [0x427ae8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba8b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a91e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa3d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8f5]

    ??:? runModuleUnitTests [0x42b861]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281b4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long factorial = 1;\n    \n  \
    \  for(long i = 1; i <= n; i++)\n    {\n        factorial *= i;\n    }\n    \n\
    \    return factorial;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpu5pz4hjr.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d65]

    ??:? void tmpu5pz4hjr.__unittest_L25_C1() [0x427a62]

    ??:? void tmpu5pz4hjr.__modtest() [0x427ae8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba8b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a91e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa3d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8f5]

    ??:? runModuleUnitTests [0x42b861]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281b4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long fact = 1;\n    \n    for(long\
    \ i = 1; i <= n; i++)\n    {\n        fact *= i;\n    }\n    \n    return fact;\n\
    }\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp258wxvtc.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d65]

    ??:? void tmp258wxvtc.__unittest_L25_C1() [0x427a62]

    ??:? void tmp258wxvtc.__modtest() [0x427ae8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba8b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a91e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa3d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8f5]

    ??:? runModuleUnitTests [0x42b861]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281b4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long fact = 1;\n    \n    for(long\
    \ i = 2; i <= n; i++)\n    {\n        fact *= i;\n    }\n    \n    return fact;\n\
    }\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpmyl7kt2y.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d6d]

    ??:? void tmpmyl7kt2y.__unittest_L25_C1() [0x427a66]

    ??:? void tmpmyl7kt2y.__modtest() [0x427aec]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba93]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a926]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff68]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa45]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8fd]

    ??:? runModuleUnitTests [0x42b869]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281bc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long factorial = 1;\n    long\
    \ i;\n    for(i = 1; i <= n; i++)\n    {\n        factorial *= i;\n    }\n   \
    \ return factorial;\n}\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\nunittest\n{\n    alias candidate\
    \ = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L)\
    \ == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L)\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvjv7pcl7.d(24): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvjv7pcl7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long factorial = 1;\n    long\
    \ i;\n    for(i = 1; i <= n; i++)\n    {\n        factorial *= i;\n    }\n   \
    \ return factorial;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpxat0hvtr.d(28): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d6d]

    ??:? void tmpxat0hvtr.__unittest_L24_C1() [0x427a6a]

    ??:? void tmpxat0hvtr.__modtest() [0x427af0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba93]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a926]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff68]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa45]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8fd]

    ??:? runModuleUnitTests [0x42b869]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281bc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long factorial = 1;\n    \n  \
    \  for(long i = 1; i <= n; i++){\n        factorial *= i;\n    }\n    \n    return\
    \ factorial;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n   \
    \ assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L)\
    \ == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpjrr47tyt.d(28): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d65]

    ??:? void tmpjrr47tyt.__unittest_L24_C1() [0x427a62]

    ??:? void tmpjrr47tyt.__modtest() [0x427ae8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba8b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a91e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa3d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8f5]

    ??:? runModuleUnitTests [0x42b861]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281b4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long factorial = 1;\n    \n  \
    \  for(long i = 1; i <= n; i++)\n    {\n        factorial *= i;\n    }\n    \n\
    \    return factorial;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpu5pz4hjr.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d65]

    ??:? void tmpu5pz4hjr.__unittest_L25_C1() [0x427a62]

    ??:? void tmpu5pz4hjr.__modtest() [0x427ae8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba8b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a91e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa3d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8f5]

    ??:? runModuleUnitTests [0x42b861]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281b4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long fact = 1;\n    \n    for(long\
    \ i = 1; i <= n; i++)\n    {\n        fact = fact * i;\n    }\n    return fact;\n\
    }\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp4d1rdvy4.d(28): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d65]

    ??:? void tmp4d1rdvy4.__unittest_L24_C1() [0x427a62]

    ??:? void tmp4d1rdvy4.__modtest() [0x427ae8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba8b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a91e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa3d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8f5]

    ??:? runModuleUnitTests [0x42b861]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281b4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long factorial = 1;\n    long\
    \ i;\n    for(i = 1; i <= n; i++)\n    {\n        factorial *= i;\n    }\n   \
    \ return factorial;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpxat0hvtr.d(28): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d6d]

    ??:? void tmpxat0hvtr.__unittest_L24_C1() [0x427a6a]

    ??:? void tmpxat0hvtr.__modtest() [0x427af0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba93]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a926]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff68]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa45]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8fd]

    ??:? runModuleUnitTests [0x42b869]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281bc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long fact = 1;\n    long i;\n\
    \    \n    for(i = 1; i <= n; i++)\n        fact = fact * i;\n    \n    return\
    \ fact;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp2u6vu_zf.d(28): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d6d]

    ??:? void tmp2u6vu_zf.__unittest_L24_C1() [0x427a6a]

    ??:? void tmp2u6vu_zf.__modtest() [0x427af0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba93]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a926]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff68]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa45]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8fd]

    ??:? runModuleUnitTests [0x42b869]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281bc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163993
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long factorial = 1;\n    \n  \
    \  for(int i = 1; i <= n; i++)\n    {\n        factorial *= i;\n    }\n    \n\
    \    return factorial;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp4o_cdubx.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d6d]

    ??:? void tmp4o_cdubx.__unittest_L25_C1() [0x427a66]

    ??:? void tmp4o_cdubx.__modtest() [0x427aec]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba93]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a926]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff68]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa45]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8fd]

    ??:? runModuleUnitTests [0x42b869]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281bc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long fact = 1;\n    \n    for(long\
    \ i = 1; i <= n; i++) \n    {\n        fact = fact * i;\n    }\n    \n    return\
    \ fact;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp4hx6dlfo.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d65]

    ??:? void tmp4hx6dlfo.__unittest_L25_C1() [0x427a62]

    ??:? void tmp4hx6dlfo.__modtest() [0x427ae8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba8b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a91e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa3d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8f5]

    ??:? runModuleUnitTests [0x42b861]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281b4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163993
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long factorial = 1;\n    \n  \
    \  for(long i = 1; i <= n; i++){\n        factorial *= i;\n    }\n    \n    return\
    \ factorial;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n   \
    \ assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L)\
    \ == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpjrr47tyt.d(28): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d65]

    ??:? void tmpjrr47tyt.__unittest_L24_C1() [0x427a62]

    ??:? void tmpjrr47tyt.__modtest() [0x427ae8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba8b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a91e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa3d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8f5]

    ??:? runModuleUnitTests [0x42b861]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281b4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long fact = 1;\n    \n    for(long\
    \ i = 1; i <= n; i++)\n    {\n        fact *= i;\n    }\n    \n    return fact;\n\
    }\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp258wxvtc.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d65]

    ??:? void tmp258wxvtc.__unittest_L25_C1() [0x427a62]

    ??:? void tmp258wxvtc.__modtest() [0x427ae8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba8b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a91e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa3d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8f5]

    ??:? runModuleUnitTests [0x42b861]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281b4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long factorial = 1;\n    long\
    \ i;\n    \n    for(i = 1; i <= n; i++)\n    {\n        factorial *= i;\n    }\n\
    \    \n    return factorial;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpa3678bw2.d(30): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d6d]

    ??:? void tmpa3678bw2.__unittest_L26_C1() [0x427a6a]

    ??:? void tmpa3678bw2.__modtest() [0x427af0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba93]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a926]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff68]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa45]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8fd]

    ??:? runModuleUnitTests [0x42b869]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281bc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long factorial = 1;\n    \n  \
    \  for(int i = 1; i <= n; i++)\n    {\n        factorial *= i;\n    }\n    \n\
    \    return factorial;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp4o_cdubx.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d6d]

    ??:? void tmp4o_cdubx.__unittest_L25_C1() [0x427a66]

    ??:? void tmp4o_cdubx.__modtest() [0x427aec]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba93]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a926]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff68]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa45]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8fd]

    ??:? runModuleUnitTests [0x42b869]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281bc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long fact = 1;\n    \n    for(long\
    \ i = 1; i <= n; i++)\n    {\n        fact = fact * i;\n    }\n    \n    return\
    \ fact;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp5qsjqfnn.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d65]

    ??:? void tmp5qsjqfnn.__unittest_L25_C1() [0x427a62]

    ??:? void tmp5qsjqfnn.__modtest() [0x427ae8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba8b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a91e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa3d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8f5]

    ??:? runModuleUnitTests [0x42b861]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281b4]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope
    void delegate'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long factorial = 1;\n    \n  \
    \  for(int i = 1; i <= n; i++)\n    {\n        factorial *= i;\n    }\n    \n\
    \    return factorial;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp4o_cdubx.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d6d]

    ??:? void tmp4o_cdubx.__unittest_L25_C1() [0x427a66]

    ??:? void tmp4o_cdubx.__modtest() [0x427aec]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba93]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a926]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff68]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa45]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8fd]

    ??:? runModuleUnitTests [0x42b869]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281bc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long fact = 1;\n    long i;\n\
    \    for(i = 1; i <= n; i++){\n        fact *= i;\n    }\n    return fact;\n}\n\
    unittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpkbu0fcw3.d(27): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d6d]

    ??:? void tmpkbu0fcw3.__unittest_L23_C1() [0x427a6a]

    ??:? void tmpkbu0fcw3.__modtest() [0x427af0]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba93]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a926]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff68]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa45]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8fd]

    ??:? runModuleUnitTests [0x42b869]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281bc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163993
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long factorial = 1;\n    \n  \
    \  for(long i = 1; i <= n; i++)\n    {\n        factorial *= i;\n    }\n    \n\
    \    return factorial;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpu5pz4hjr.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d65]

    ??:? void tmpu5pz4hjr.__unittest_L25_C1() [0x427a62]

    ??:? void tmpu5pz4hjr.__modtest() [0x427ae8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba8b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a91e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa3d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8f5]

    ??:? runModuleUnitTests [0x42b861]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281b4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long factorial = 1;\n    \n  \
    \  for(long i = 1; i <= n; i++){\n        factorial *= i;\n    }\n    \n    return\
    \ factorial;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\n   \
    \ assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L)\
    \ == 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpjrr47tyt.d(28): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d65]

    ??:? void tmpjrr47tyt.__unittest_L24_C1() [0x427a62]

    ??:? void tmpjrr47tyt.__modtest() [0x427ae8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba8b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a91e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa3d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8f5]

    ??:? runModuleUnitTests [0x42b861]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281b4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long factorial = 1;\n    \n  \
    \  for(long i = 1; i <= n; i++)\n    {\n        factorial *= i;\n    }\n    \n\
    \    return factorial;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpu5pz4hjr.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d65]

    ??:? void tmpu5pz4hjr.__unittest_L25_C1() [0x427a62]

    ??:? void tmpu5pz4hjr.__modtest() [0x427ae8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba8b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a91e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa3d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8f5]

    ??:? runModuleUnitTests [0x42b861]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281b4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long fact = 1;\n    long i;\n\
    \    \n    for (i = 1; i <= n; i++)\n    {\n        fact = fact * i;\n    }\n\
    \    return fact;\n}\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\nunittest\n{\n    alias candidate\
    \ = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L)\
    \ == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L)\
    \ == 1L);\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3xlc2mok.d(25): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3xlc2mok.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long factorial = 1;\n    \n  \
    \  for(long i = 1; i <= n; i++)\n    {\n        factorial *= i;\n    }\n    \n\
    \    return factorial;\n}\nunittest\n{\n    alias candidate = special_factorial;\n\
    \n    assert(candidate(4L) == 288L);\n    assert(candidate(5L) == 34560L);\n \
    \   assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L) == 1L);\n\
    }\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpu5pz4hjr.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d65]

    ??:? void tmpu5pz4hjr.__unittest_L25_C1() [0x427a62]

    ??:? void tmpu5pz4hjr.__modtest() [0x427ae8]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba8b]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a91e]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab1]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff60]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa3d]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8f5]

    ??:? runModuleUnitTests [0x42b861]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281b4]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long fact = 1;\n    \n    for(long\
    \ i = 2; i <= n; i++)\n    {\n        fact *= i;\n    }\n    \n    return fact;\n\
    }\nunittest\n{\n    alias candidate = special_factorial;\n\n    assert(candidate(4L)\
    \ == 288L);\n    assert(candidate(5L) == 34560L);\n    assert(candidate(7L) ==\
    \ 125411328000L);\n    assert(candidate(1L) == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmpmyl7kt2y.d(29): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d6d]

    ??:? void tmpmyl7kt2y.__unittest_L25_C1() [0x427a66]

    ??:? void tmpmyl7kt2y.__modtest() [0x427aec]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42ba93]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a926]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fab9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff68]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa45]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a8fd]

    ??:? runModuleUnitTests [0x42b869]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281bc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163992
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\nThe Brazilian factorial is\
    \ defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\
    \    where n > 0\n\n    For example:\n    \n    The function will receive an integer\
    \ as input and should return the special\n    factorial of this integer.\n   \
    \ \n*/\nlong special_factorial(long n) \n{\n    long result = 1;\n    long factorial\
    \ = 1;\n    \n    while (n > 0)\n    {\n        factorial *= n;\n        n--;\n\
    \    }\n    \n    while (factorial > 0)\n    {\n        result *= factorial;\n\
    \        factorial--;\n    }\n    \n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = special_factorial;\n\n    assert(candidate(4L) == 288L);\n    assert(candidate(5L)\
    \ == 34560L);\n    assert(candidate(7L) == 125411328000L);\n    assert(candidate(1L)\
    \ == 1L);\n}\nvoid main(){}"
  status: Exception
  stderr: 'core.exception.AssertError@/tmp/tmp3yyph75d.d(37): unittest failure

    ----------------

    ??:? _d_unittestp [0x427d7d]

    ??:? void tmp3yyph75d.__unittest_L33_C1() [0x427a7a]

    ??:? void tmp3yyph75d.__modtest() [0x427b00]

    ??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)
    [0x42baa3]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))
    [0x42a936]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref
    rt.sections_elf_shared.DSO) [0x42fac9]

    ??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO))
    [0x42ff78]

    ??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*)))
    [0x42fa55]

    ??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a90d]

    ??:? runModuleUnitTests [0x42b879]

    ??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()
    [0x4281cc]

    ??:? void rt.dmain2._d_r'
  stdout: ''
  timestamp: 1660163993
