language: d
name: HumanEval_12_longest
results:
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length ==\
    \ 0) {\n        return null;\n    }\n    \n    int maxLen = 0;\n    int maxIndex\
    \ = 0;\n    \n    for (int i = 0; i < strings.length; ++i) {\n        int len\
    \ = strings[i].length;\n        if (len > maxLen) {\n            maxLen = len;\n\
    \            maxIndex = i;\n        }\n    }\n    \n    return strings[maxIndex];\n\
    }\n/*\n Out of list of strings, return the longest one. Return the first one in\
    \ case of multiple\n    strings of the same length. Return None in case the input\
    \ list is empty.\n                \n*/\nNullable!(string) longest(string[] strings,\
    \ int startIndex) \n{\n    if (strings.length == 0) {\n        return null;\n\
    \    }\n    \n    int maxLen = 0;\n    int maxIndex = 0;\n    \n    for (int i\
    \ = startIndex; i < strings.length; ++i) {\n        int len = strings[i].length;\n\
    \        if (len > maxLen) {\n            maxLen = len;\n            maxIndex\
    \ = i;\n        }\n    }\n    \n    return strings[maxIndex];\n}\n/*\n Out of\
    \ list of strings, return the longest one. Return the first one in case of multiple\n\
    \    strings of the same length. Return None in case the input list is empty.\n\
    \                \n*/\nNullable!(string) longest(string[] strings, int startIndex,\
    \ int endIndex) \n{\n    if (strings.length == 0) {\n        return null;\n  \
    \  }\n    \n    int maxLen = 0;\n    int maxIndex = 0;\n    \n    for (int i =\
    \ startIndex; i < endIndex; ++i) {\n        int len = strings[i].length;\n   \
    \     if (len > maxLen) {\n            maxLen = len;\n            maxIndex = i;\n\
    \        }\n    }\n    \n    return strings[maxIndex];\n}\n/*\n Out of list of\
    \ strings, return the longest one. Return the first one in case of multiple\n\
    \    strings of the same length. Return None in case the input list is empty.\n\
    \                \n*/\nNullable!(string) longest(string[] strings, int startIndex,\
    \ int endIndex, int maxLen) \n{\n    if (strings.length == 0) {\n        return\
    \ null;\n    }\n    \n    int maxIndex = 0;\n    \n    for (int i = startIndex;\
    \ i < endIndex; ++i) {\n        int len = strings[i].length;\n        if (len\
    \ > maxLen) {\n            maxLen = len;\n            maxIndex = i;\n        }\n\
    \    }\n    \n    return strings[maxIndex];\n}\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings, int startIndex, int endIndex,\
    \ int maxLen, int maxIndex) \n{\n    if (strings.length == 0) {\n        return\
    \ null;\n    }\n    \n\nunittest\n{\n    alias candidate = longest;\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1b496lxx.d(110): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1b496lxx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164474
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    var longest = strings[0];\n\
    \    for(var i = 1; i < strings.length; ++i)\n    {\n        if(strings[i].length\
    \ >= longest.length)\n        {\n            longest = strings[i];\n        }\n\
    \    }\n    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\n\
    {\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n\
    {\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpidmewllu.d(10): Error: undefined identifier `var`

    /tmp/tmpidmewllu.d(11): Error: undefined identifier `var`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpidmewllu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach(string; strings)\
    \ {\n        if(string.length > longest.length)\n            longest = string;\n\
    \    }\n    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\n\
    {\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n\
    {\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpg1qfhgeu.d(11): Error: function `tmpg1qfhgeu.longest(string[] strings)`
    is not callable using argument types `()`

    /tmp/tmpg1qfhgeu.d(12): Error: function `tmpg1qfhgeu.longest(string[] strings)`
    is not callable using argument types `(string)`

    /tmp/tmpg1qfhgeu.d(12):        cannot pass argument `string` of type `string`
    to parameter `string[] strings`

    /tmp/tmpg1qfhgeu.d(14): Error: function `tmpg1qfhgeu.longest(string[] strings)`
    is not callable using argument types `()`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg1qfhgeu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    int? maxLength = null;\n\
    \    foreach(string? s in strings) {\n        if(maxLength == null || s.length()\
    \ > maxLength.Value()) {\n            maxLength = s;\n        }\n    }\n    return\
    \ maxLength;\n}\n/*\n Out of list of strings, return the longest one. Return the\
    \ first one in case of multiple\n    strings of the same length. Return None in\
    \ case the input list is empty.\n                \n*/\nNullable!(string) longest(string[]\
    \ strings, int maxLength) \n{\n    foreach(string? s in strings) {\n        if(s.length()\
    \ > maxLength) {\n            return s;\n        }\n    }\n    return null;\n\
    }\n/*\n Out of list of strings, return the longest one. Return the first one in\
    \ case of multiple\n    strings of the same length. Return None in case the input\
    \ list is empty.\n                \n*/\nNullable!(string) longest(string[] strings,\
    \ int maxLength, int startIndex) \n{\n    foreach(string? s in strings) {\n  \
    \      if(s.length() > maxLength) {\n            return s;\n        }\n    }\n\
    \    return null;\n}\n/*\n Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \n*/\nNullable!(string) longest(string[]\
    \ strings, int maxLength, int startIndex, int endIndex) \n{\n    foreach(string?\
    \ s in strings) {\n        if(s.length() > maxLength) {\n            return s;\n\
    \        }\n    }\n    return null;\n}\n/*\n Out of list of strings, return the\
    \ longest one. Return the first one in case of multiple\n    strings of the same\
    \ length. Return None in case the input list is empty.\n                \n*/\n\
    Nullable!(string) longest(string[] strings, int maxLength, int startIndex, int\
    \ endIndex, int comparer) \n{\n    foreach(string? s in strings) {\n        if(s.length()\
    \ > maxLength) {\n            return s;\n        }\n    }\n    return null;\n\
    }\n/*\n Out of list of strings, return the longest one. Return the first one in\
    \ case of multiple\n    strings of the same length. Return None in case the input\
    \ list is empty.\n                \n*/\nNullable!(string) longest(string[] strings,\
    \ int maxLength, int startIndex, int endIndex, int comparer, IComparer<string>\
    \ comparer) \n{\n    foreach(string? s in strings) {\n        if(s.length() >\
    \ maxLength) {\n            return s;\n        }\n    }\n    return null;\n}\n\
    /*\n Out of list of strings, return the longest one. Return the first one in case\
    \ of multiple\n    strings of the same length. Return None in case the input list\
    \ is empty.\n                \n*/\nNull\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpaac3aeml.d(10): Error: no identifier for declarator `int`

    /tmp/tmpaac3aeml.d(10): Error: found `?` instead of statement

    /tmp/tmpaac3aeml.d(11): Error: no identifier for declarator `string`

    /tmp/tmpaac3aeml.d(11): Error: found `?` when expecting `;`

    /tmp/tmpaac3aeml.d(25): Error: no identifier for declarator `string`

    /tmp/tmpaac3aeml.d(25): Error: found `?` when expecting `;`

    /tmp/tmpaac3aeml.d(39): Error: no identifier for declarator `string`

    /tmp/tmpaac3aeml.d(39): Error: found `?` when expecting `;`

    /tmp/tmpaac3aeml.d(53): Error: no identifier for declarator `string`

    /tmp/tmpaac3aeml.d(53): Error: found `?` when expecting `;`

    /tmp/tmpaac3aeml.d(67): Error: no identifier for declarator `string`

    /tmp/tmpaac3aeml.d(67): Error: found `?` when expecting `;`

    /tmp/tmpaac3aeml.d(79): Error: found `<` when expecting `)`

    /tmp/tmpaac3aeml.d(79): Error: semicolon expected following function declaration

    /tmp/tmpaac3aeml.d(79): Error: no identifier for declarator `string`

    /tmp/tmpaac3aeml.d(79): Error: declaratio'
  stdout: ''
  timestamp: 1660164474
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach(string s in strings)\
    \ {\n        if(s.length() > longest.length)\n            longest = s;\n    }\n\
    \    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n  \
    \      auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n\
    \        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkz4gb41l.d(10): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkz4gb41l.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164474
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach(string; strings)\
    \ {\n        if(string.length > longest.length)\n            longest = string;\n\
    \    }\n    return longest;\n}\n/*\n Out of list of strings, return the longest\
    \ one. Return the first one in case of multiple\n    strings of the same length.\
    \ Return None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int startIndex) \n{\n    foreach(string; strings)\
    \ {\n        if(string.length > longest.length)\n            longest = string;\n\
    \    }\n    return longest;\n}\n/*\n Out of list of strings, return the longest\
    \ one. Return the first one in case of multiple\n    strings of the same length.\
    \ Return None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int startIndex, int endIndex) \n{\n    foreach(string;\
    \ strings) {\n        if(string.length > longest.length)\n            longest\
    \ = string;\n    }\n    return longest;\n}\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings, char character) \n{\n    foreach(string;\
    \ strings) {\n        if(string.length > longest.length)\n            longest\
    \ = string;\n    }\n    return longest;\n}\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings, char character, int startIndex)\
    \ \n{\n    foreach(string; strings) {\n        if(string.length > longest.length)\n\
    \            longest = string;\n    }\n    return longest;\n}\n/*\n Out of list\
    \ of strings, return the longest one. Return the first one in case of multiple\n\
    \    strings of the same length. Return None in case the input list is empty.\n\
    \                \n*/\nNullable!(string) longest(string[] strings, char character,\
    \ int startIndex, int endIndex) \n{\n    foreach(string; strings) {\n        if(string.length\
    \ > longest.length)\n            longest = string;\n    }\n    return longest;\n\
    }\n/*\n Out of list of strings, return the longest one. Return the first one in\
    \ case of multiple\n    strings of the same length. Return None in case the input\
    \ list is empty.\n                \n*/\nNullable!(string) longest(string[] strings,\
    \ char character, int startIndex, int endIndex, bool caseSensitive) \n{\n    foreach(string;\
    \ strings) {\n        if(string.length > longest.length)\n\nunittest\n{\n    alias\
    \ candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpt5r9f_6c.d(91): Error: found `unittest` instead of statement

    /tmp/tmpt5r9f_6c.d(111): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt5r9f_6c.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164474
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    var longest = strings[0];\n\
    \    var longestLength = longest.length;\n    for(var i = 1; i < strings.length;\
    \ i++)\n    {\n        var length = strings[i].length;\n        if(length > longestLength)\n\
    \        {\n            longest = strings[i];\n            longestLength = length;\n\
    \        }\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate =\
    \ longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0gu98jmk.d(10): Error: undefined identifier `var`

    /tmp/tmp0gu98jmk.d(11): Error: undefined identifier `var`

    /tmp/tmp0gu98jmk.d(12): Error: undefined identifier `var`

    /tmp/tmp0gu98jmk.d(14): Error: undefined identifier `var`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0gu98jmk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    int? maxLength = null;\n\
    \    foreach (string s in strings) {\n        if (maxLength == null || s.length()\
    \ > maxLength.Value()) {\n            maxLength = s.length;\n        }\n    }\n\
    \    return maxLength;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n\
    \        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n\
    \        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmz_3f32k.d(10): Error: no identifier for declarator `int`

    /tmp/tmpmz_3f32k.d(10): Error: found `?` instead of statement

    /tmp/tmpmz_3f32k.d(11): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmz_3f32k.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164474
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach(string; strings)\
    \ \n    {\n        if(string.length == strings.length) \n        {\n         \
    \   return string;\n        }\n    }\n    return null;\n}\nunittest\n{\n    alias\
    \ candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp956fdac5.d(14): Error: cannot implicitly convert expression `string`
    of type `string` to `Nullable!string`

    /tmp/tmp956fdac5.d(17): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp956fdac5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach(string; strings)\n\
    \    {\n        if(string.length > longest.length)\n        {\n            longest\
    \ = string;\n        }\n    }\n    return longest;\n}\n/*\n Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return None in case the input list is empty.\n         \
    \       \n*/\nNullable!(string) longest(string[] strings, int startIndex) \n{\n\
    \    foreach(string; strings)\n    {\n        if(string.length > longest.length)\n\
    \        {\n            longest = string;\n        }\n    }\n    return longest;\n\
    }\n/*\n Out of list of strings, return the longest one. Return the first one in\
    \ case of multiple\n    strings of the same length. Return None in case the input\
    \ list is empty.\n                \n*/\nNullable!(string) longest(string[] strings,\
    \ int startIndex, int endIndex) \n{\n    foreach(string; strings)\n    {\n   \
    \     if(string.length > longest.length)\n        {\n            longest = string;\n\
    \        }\n    }\n    return longest;\n}\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings, char separator) \n{\n    foreach(string;\
    \ strings)\n    {\n        if(string.length > longest.length)\n        {\n   \
    \         longest = string;\n        }\n    }\n    return longest;\n}\n/*\n Out\
    \ of list of strings, return the longest one. Return the first one in case of\
    \ multiple\n    strings of the same length. Return None in case the input list\
    \ is empty.\n                \n*/\nNullable!(string) longest(string[] strings,\
    \ char separator, int startIndex) \n{\n    foreach(string; strings)\n    {\n \
    \       if(string.length > longest.length)\n        {\n            longest = string;\n\
    \        }\n    }\n    return longest;\n}\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings, char separator, int startIndex,\
    \ int endIndex) \n{\n    foreach(string; strings)\n    {\n        if(string.length\
    \ > longest.length)\n        {\n            longest = string;\n        }\n   \
    \ }\n    return longest;\n}\n/*\n Out of list of strings, return the longest one.\
    \ Return the first one in case of multiple\n    strings of the same length. Return\
    \ None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto\
    \ result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull &&\
    \ result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\"\
    , \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get\
    \ == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpm2my82pf.d(105): Error: found `unittest` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpm2my82pf.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164474
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach(string; strings)\
    \ {\n        if(string.length() > longest.length())\n            longest = string;\n\
    \    }\n    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\n\
    {\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n\
    {\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfmyf59yv.d(11): Error: no property `length` for type `string`

    /tmp/tmpfmyf59yv.d(11): Error: function `tmpfmyf59yv.longest(string[] strings)`
    is not callable using argument types `()`

    /tmp/tmpfmyf59yv.d(12): Error: function `tmpfmyf59yv.longest(string[] strings)`
    is not callable using argument types `(string)`

    /tmp/tmpfmyf59yv.d(12):        cannot pass argument `string` of type `string`
    to parameter `string[] strings`

    /tmp/tmpfmyf59yv.d(14): Error: function `tmpfmyf59yv.longest(string[] strings)`
    is not callable using argument types `()`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfmyf59yv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length ==\
    \ 0) {\n        return null;\n    }\n    var maxLength = 0;\n    var maxString\
    \ = \"\";\n    for (var i = 0; i <strings.length; ++i) {\n        var length =\
    \ strings[i].length;\n        if (length > maxLength) {\n            maxLength\
    \ = length;\n            maxString = strings[i];\n        }\n    }\n    return\
    \ maxString;\n}\n/*\n Out of list of strings, return the longest one. Return the\
    \ first one in case of multiple\n    strings of the same length. Return None in\
    \ case the input list is empty.\n                \n*/\nNullable!(string) longest(string[]\
    \ strings, int startIndex) \n{\n    if (strings.length == 0) {\n        return\
    \ null;\n    }\n    var maxLength = 0;\n    var maxString = \"\";\n    for (var\
    \ i = startIndex; i < strings.length; ++i) {\n        var length = strings[i].length;\n\
    \        if (length > maxLength) {\n            maxLength = length;\n        \
    \    maxString = strings[i];\n        }\n    }\n    return maxString;\n}\n/*\n\
    \ Out of list of strings, return the longest one. Return the first one in case\
    \ of multiple\n    strings of the same length. Return None in case the input list\
    \ is empty.\n                \n*/\nNullable!(string) longest(string[] strings,\
    \ int startIndex, int endIndex) \n{\n    if (strings.length == 0) {\n        return\
    \ null;\n    }\n    var maxLength = 0;\n    var maxString = \"\";\n    for (var\
    \ i = startIndex; i < endIndex; ++i) {\n        var length = strings[i].length;\n\
    \        if (length > maxLength) {\n            maxLength = length;\n        \
    \    maxString = strings[i];\n        }\n    }\n    return maxString;\n}\n/*\n\
    \ Out of list of strings, return the longest one. Return the first one in case\
    \ of multiple\n    strings of the same length. Return None in case the input list\
    \ is empty.\n                \n*/\nNullable!(string) longest(string[] strings,\
    \ char separator) \n{\n    if (strings.length == 0) {\n        return null;\n\
    \    }\n    var maxLength = 0;\n    var maxString = \"\";\n    for (var i = 0;\
    \ i <strings.length; ++i) {\n        var length = strings[i].length;\n       \
    \ if (length > maxLength) {\n            maxLength = length;\n            maxString\
    \ = strings[i];\n        }\n    }\n    return maxString;\n}\n/*\n Out of list\
    \ of strings, return the longest one. Return the first one in case of multiple\n\
    \    strings of the same length. Return None in case the input list is empty.\n\
    \                \n*/\nNullable!(string) longest(string[] strings, char separator,\
    \ int startIndex) \n{\n    if (strings.length == 0) {\n        return null;\n\
    \    }\n    var maxLength = 0;\n    var maxString = \"\";\n    for (var i = startIndex;\
    \ i < strings.length; ++i) {\n        var length = strings[i].length;\n      \
    \  if (length > maxLength) {\n            maxLength = length;\n            maxString\
    \ = strings[i];\n        }\n    }\n    return maxString;\n\nunittest\n{\n    alias\
    \ candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwavtnjpj.d(108): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwavtnjpj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164474
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach(string s in strings)\
    \ {\n        if(s.length() > longest.length)\n            longest = s;\n    }\n\
    \    return longest;\n}\n/*\n Out of list of strings, return the longest one.\
    \ Return the first one in case of multiple\n    strings of the same length. Return\
    \ None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int startIndex) \n{\n    foreach(string s in strings)\
    \ {\n        if(s.length() > longest.length)\n            longest = s;\n    }\n\
    \    return longest;\n}\n/*\n Out of list of strings, return the longest one.\
    \ Return the first one in case of multiple\n    strings of the same length. Return\
    \ None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int startIndex, int endIndex) \n{\n    foreach(string\
    \ s in strings) {\n        if(s.length() > longest.length)\n            longest\
    \ = s;\n    }\n    return longest;\n}\n/*\n Out of list of strings, return the\
    \ longest one. Return the first one in case of multiple\n    strings of the same\
    \ length. Return None in case the input list is empty.\n                \n*/\n\
    Nullable!(string) longest(string[] strings, char character) \n{\n    foreach(string\
    \ s in strings) {\n        if(s.length() > longest.length)\n            longest\
    \ = s;\n    }\n    return longest;\n}\n/*\n Out of list of strings, return the\
    \ longest one. Return the first one in case of multiple\n    strings of the same\
    \ length. Return None in case the input list is empty.\n                \n*/\n\
    Nullable!(string) longest(string[] strings, char character, int startIndex) \n\
    {\n    foreach(string s in strings) {\n        if(s.length() > longest.length)\n\
    \            longest = s;\n    }\n    return longest;\n}\n/*\n Out of list of\
    \ strings, return the longest one. Return the first one in case of multiple\n\
    \    strings of the same length. Return None in case the input list is empty.\n\
    \                \n*/\nNullable!(string) longest(string[] strings, char character,\
    \ int startIndex, int endIndex) \n{\n    foreach(string s in strings) {\n    \
    \    if(s.length() > longest.length)\n            longest = s;\n    }\n    return\
    \ longest;\n}\n/*\n Out of list of strings, return the longest one. Return the\
    \ first one in case of multiple\n    strings of the same length. Return None in\
    \ case the input list is empty.\n                \n*/\nNullable!(string) longest(string[]\
    \ strings, char character, int startIndex, int endIndex, bool caseSensitive) \n\
    {\n    foreach(string s in strings) {\n\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0c7zugpt.d(10): Error: found `in` when expecting `;`

    /tmp/tmp0c7zugpt.d(23): Error: found `in` when expecting `;`

    /tmp/tmp0c7zugpt.d(36): Error: found `in` when expecting `;`

    /tmp/tmp0c7zugpt.d(49): Error: found `in` when expecting `;`

    /tmp/tmp0c7zugpt.d(62): Error: found `in` when expecting `;`

    /tmp/tmp0c7zugpt.d(75): Error: found `in` when expecting `;`

    /tmp/tmp0c7zugpt.d(88): Error: found `in` when expecting `;`

    /tmp/tmp0c7zugpt.d(90): Error: found `unittest` instead of statement

    /tmp/tmp0c7zugpt.d(110): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0c7zugpt.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164474
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach (string s in\
    \ strings) {\n        if (s.length() > longest.length)\n            longest =\
    \ s;\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4dg4o4dz.d(10): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4dg4o4dz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164474
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach (string s in\
    \ strings) {\n        if (s.length() > longest.length)\n            longest =\
    \ s;\n    }\n    return longest;\n}\n/*\n Out of list of strings, return the longest\
    \ one. Return the first one in case of multiple\n    strings of the same length.\
    \ Return None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int startIndex) \n{\n    foreach (string s in strings)\
    \ {\n        if (s.length() > longest.length)\n            longest = s;\n    }\n\
    \    return longest;\n}\n/*\n Out of list of strings, return the longest one.\
    \ Return the first one in case of multiple\n    strings of the same length. Return\
    \ None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int startIndex, int endIndex) \n{\n    foreach (string\
    \ s in strings) {\n        if (s.length() > longest.length)\n            longest\
    \ = s;\n    }\n    return longest;\n}\n/*\n Out of list of strings, return the\
    \ longest one. Return the first one in case of multiple\n    strings of the same\
    \ length. Return None in case the input list is empty.\n                \n*/\n\
    Nullable!(string) longest(string[] strings, char separator) \n{\n    foreach (string\
    \ s in strings) {\n        if (s.length() > longest.length)\n            longest\
    \ = s;\n    }\n    return longest;\n}\n/*\n Out of list of strings, return the\
    \ longest one. Return the first one in case of multiple\n    strings of the same\
    \ length. Return None in case the input list is empty.\n                \n*/\n\
    Nullable!(string) longest(string[] strings, char separator, int startIndex) \n\
    {\n    foreach (string s in strings) {\n        if (s.length() > longest.length)\n\
    \            longest = s;\n    }\n    return longest;\n}\n/*\n Out of list of\
    \ strings, return the longest one. Return the first one in case of multiple\n\
    \    strings of the same length. Return None in case the input list is empty.\n\
    \                \n*/\nNullable!(string) longest(string[] strings, char separator,\
    \ int startIndex, int endIndex) \n{\n    foreach (string s in strings) {\n   \
    \     if (s.length() > longest.length)\n            longest = s;\n    }\n    return\
    \ longest;\n}\n/*\n Out of list of strings, return the longest one. Return the\
    \ first one in case of multiple\n    strings of the same length. Return None in\
    \ case the input list is empty.\n                \n*/\nNullable!(string) longest(string[]\
    \ strings, char separator, int startIndex, int endIndex, char separator2) \n{\n\
    \    foreach (string s in strings) {\n        if (s.length() > longest.length)\n\
    \            longest = s;\n    }\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpq7r3wg6i.d(10): Error: found `in` when expecting `;`

    /tmp/tmpq7r3wg6i.d(23): Error: found `in` when expecting `;`

    /tmp/tmpq7r3wg6i.d(36): Error: found `in` when expecting `;`

    /tmp/tmpq7r3wg6i.d(49): Error: found `in` when expecting `;`

    /tmp/tmpq7r3wg6i.d(62): Error: found `in` when expecting `;`

    /tmp/tmpq7r3wg6i.d(75): Error: found `in` when expecting `;`

    /tmp/tmpq7r3wg6i.d(88): Error: found `in` when expecting `;`

    /tmp/tmpq7r3wg6i.d(92): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpq7r3wg6i.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164474
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach(string[] s in\
    \ strings) {\n        if(s.length() > longest.length)\n            longest = s;\n\
    \    }\n    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\n\
    {\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n\
    {\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwmo9cjt3.d(10): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwmo9cjt3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164474
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    int? maxLength = null;\n\
    \    foreach (string s in strings) {\n        int length = s.length();\n     \
    \   if (maxLength == null || maxLength > length) {\n            maxLength = length;\n\
    \        }\n    }\n    return maxLength;\n}\nunittest\n{\n    alias candidate\
    \ = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpz8v79n5v.d(10): Error: no identifier for declarator `int`

    /tmp/tmpz8v79n5v.d(10): Error: found `?` instead of statement

    /tmp/tmpz8v79n5v.d(11): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz8v79n5v.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164474
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    var maxLength = 0;\n\
    \    var maxString = \"\";\n    foreach(string; strings) {\n        if(string.length\
    \ > maxLength) {\n            maxLength = string.length;\n            maxString\
    \ = string;\n        }\n    }\n    return maxString;\n}\nunittest\n{\n    alias\
    \ candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpeps740t8.d(10): Error: undefined identifier `var`

    /tmp/tmpeps740t8.d(11): Error: undefined identifier `var`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpeps740t8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    var longest = strings[0];\n\
    \    var longestLength = longest.length;\n    foreach(var s in strings) {\n  \
    \      if(s.length == longestLength) {\n            longest = s;\n        }\n\
    \    }\n    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\n\
    {\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n\
    {\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxjoegiif.d(12): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxjoegiif.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164474
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    int? maxLength = null;\n\
    \    foreach (string s in strings) {\n        if (maxLength == null || s.length()\
    \ > maxLength) {\n            maxLength = s.length;\n        }\n    }\n    return\
    \ maxLength;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto\
    \ result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull &&\
    \ result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\"\
    , \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get\
    \ == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkkecvotq.d(10): Error: no identifier for declarator `int`

    /tmp/tmpkkecvotq.d(10): Error: found `?` instead of statement

    /tmp/tmpkkecvotq.d(11): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkkecvotq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164474
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    var maxLength = 0;\n\
    \    var maxString = \"\";\n    foreach(var s in strings) {\n        if(s.length()\
    \ > maxLength) {\n            maxLength = s.length();\n            maxString =\
    \ s;\n        }\n    }\n    return maxString;\n}\nunittest\n{\n    alias candidate\
    \ = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa4k91imw.d(12): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa4k91imw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164474
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach (string s in\
    \ strings) {\n        if (s.length() > longest.length)\n            longest =\
    \ s;\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4dg4o4dz.d(10): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4dg4o4dz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164474
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach(string s in strings)\
    \ {\n        if(s.length() > longest.length) longest = s;\n    }\n    return longest;\n\
    }\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp50mzgp35.d(10): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp50mzgp35.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164474
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length ==\
    \ 0) {\n        return null;\n    }\n    int maxLength = 0;\n    int maxIndex\
    \ = 0;\n    for (int i = 0; i < strings.length; i++) {\n        if (strings[i].length()\
    \ > maxLength) {\n            maxLength = strings[i].length();\n            maxIndex\
    \ = i;\n        }\n    }\n    return strings[maxIndex];\n}\n/*\n Out of list of\
    \ strings, return the longest one. Return the first one in case of multiple\n\
    \    strings of the same length. Return None in case the input list is empty.\n\
    \                \n*/\nNullable!(string) longest(string[] strings, int startIndex)\
    \ \n{\n    if (strings.length == 0) {\n        return null;\n    }\n    int maxLength\
    \ = 0;\n    int maxIndex = 0;\n    for (int i = startIndex; i < strings.length;\
    \ i++) {\n        if (strings[i].length() > maxLength) {\n            maxLength\
    \ = strings[i].length();\n            maxIndex = i;\n        }\n    }\n    return\
    \ strings[maxIndex];\n}\n/*\n Out of list of strings, return the longest one.\
    \ Return the first one in case of multiple\n    strings of the same length. Return\
    \ None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int startIndex, int endIndex) \n{\n    if (strings.length\
    \ == 0) {\n        return null;\n    }\n    int maxLength = 0;\n    int maxIndex\
    \ = 0;\n    for (int i = startIndex; i < strings.length; i++) {\n        if (strings[i].length()\
    \ > maxLength) {\n            maxLength = strings[i].length();\n            maxIndex\
    \ = i;\n        }\n    }\n    return strings[maxIndex];\n}\n/*\n Out of list of\
    \ strings, return the longest one. Return the first one in case of multiple\n\
    \    strings of the same length. Return None in case the input list is empty.\n\
    \                \n*/\nNullable!(string) longest(string[] strings, char character)\
    \ \n{\n    if (strings.length == 0) {\n        return null;\n    }\n    int maxLength\
    \ = 0;\n    int maxIndex = 0;\n    for (int i = 0; i < strings.length; i++) {\n\
    \        if (strings[i].length() > maxLength) {\n            maxLength = strings[i].length();\n\
    \            maxIndex = i;\n        }\n    }\n    return strings[maxIndex];\n\
    }\n/*\n Out of list of strings, return the longest one. Return the first one in\
    \ case of multiple\n    strings of the same length. Return None in case the input\
    \ list is empty.\n                \n*/\nNullable!(string) longest(string[] strings,\
    \ char character, int startIndex) \n{\n    if (strings.length == 0) {\n      \
    \  return null;\n    }\n    int maxLength = 0;\n    int maxIndex = 0;\n    for\
    \ (int i = startIndex; i < strings.length; i++) {\n        if (strings[i].length()\
    \ > maxLength) {\n            maxLength = strings[i].length();\n            maxIndex\
    \ = i;\n        }\n    }\n    return strings[maxIndex];\n\nunittest\n{\n    alias\
    \ candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvi8us4zj.d(103): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvi8us4zj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164474
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n\tassert(!strings.isEmpty());\n\
    \t\n\tint maxLen = strings[0].Length;\n\t\n\tfor (int i = 1; i < strings.Length;\
    \ i++)\n\t{\n\t\tif (strings[i].Length > maxLen)\n\t\t{\n\t\t\tmaxLen = strings[i].Length;\n\
    \t\t}\n\t}\n\t\n\treturn maxLen > 0 ? strings[maxLen - 1] : null;\n}\nunittest\n\
    {\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpri1c0gbv.d(10): Error: no property `isEmpty` for type `string[]`

    /tmp/tmpri1c0gbv.d(12): Error: no property `Length` for type `string`

    /tmp/tmpri1c0gbv.d(14): Error: no property `Length` for type `string[]`

    /tmp/tmpri1c0gbv.d(16): Error: no property `Length` for type `string`

    /tmp/tmpri1c0gbv.d(18): Error: no property `Length` for type `string`

    /tmp/tmpri1c0gbv.d(22): Error: cannot implicitly convert expression `maxLen >
    0 ? strings[cast(ulong)(maxLen - 1)] : null` of type `string` to `Nullable!string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpri1c0gbv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length ==\
    \ 0) {\n        return null;\n    }\n    \n    string longest = strings[0];\n\
    \    int longestLength = longest.length;\n    \n    for (int i = 1; i < strings.length;\
    \ i++) {\n        int length = strings[i].length;\n        if (length > longestLength)\
    \ {\n            longest = strings[i];\n            longestLength = length;\n\
    \        }\n    }\n    \n    return longest;\n}\nunittest\n{\n    alias candidate\
    \ = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpi_rv323i.d(15): Error: cannot implicitly convert expression `longest.length`
    of type `ulong` to `int`

    /tmp/tmpi_rv323i.d(18): Error: cannot implicitly convert expression `strings[cast(ulong)i].length`
    of type `ulong` to `int`

    /tmp/tmpi_rv323i.d(11): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!string`

    /tmp/tmpi_rv323i.d(25): Error: cannot implicitly convert expression `longest`
    of type `string` to `Nullable!string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi_rv323i.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach(string; strings)\
    \ {\n        if(string.length > longest.length)\n            longest = string;\n\
    \    }\n    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\n\
    {\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n\
    {\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpg1qfhgeu.d(11): Error: function `tmpg1qfhgeu.longest(string[] strings)`
    is not callable using argument types `()`

    /tmp/tmpg1qfhgeu.d(12): Error: function `tmpg1qfhgeu.longest(string[] strings)`
    is not callable using argument types `(string)`

    /tmp/tmpg1qfhgeu.d(12):        cannot pass argument `string` of type `string`
    to parameter `string[] strings`

    /tmp/tmpg1qfhgeu.d(14): Error: function `tmpg1qfhgeu.longest(string[] strings)`
    is not callable using argument types `()`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg1qfhgeu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    int? maxLength = null;\n\
    \    foreach (string s in strings) {\n        if (maxLength == null || s.length()\
    \ > maxLength.Value()) {\n            maxLength = s.length;\n        }\n    }\n\
    \    return maxLength;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n\
    \        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n\
    \        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmz_3f32k.d(10): Error: no identifier for declarator `int`

    /tmp/tmpmz_3f32k.d(10): Error: found `?` instead of statement

    /tmp/tmpmz_3f32k.d(11): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmz_3f32k.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164474
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach(string s in strings)\n\
    \    {\n        if(s.length() > longest.length)\n            longest = s;\n  \
    \  }\n    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\n\
    {\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n\
    {\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp68d8y45t.d(10): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp68d8y45t.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164474
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach(string; strings)\
    \ {\n        if(string.length > longest.length)\n            longest = string;\n\
    \    }\n    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\n\
    {\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n\
    {\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpg1qfhgeu.d(11): Error: function `tmpg1qfhgeu.longest(string[] strings)`
    is not callable using argument types `()`

    /tmp/tmpg1qfhgeu.d(12): Error: function `tmpg1qfhgeu.longest(string[] strings)`
    is not callable using argument types `(string)`

    /tmp/tmpg1qfhgeu.d(12):        cannot pass argument `string` of type `string`
    to parameter `string[] strings`

    /tmp/tmpg1qfhgeu.d(14): Error: function `tmpg1qfhgeu.longest(string[] strings)`
    is not callable using argument types `()`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg1qfhgeu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach(string; strings)\
    \ {\n        if(string.length() > strings.length)\n            return string;\n\
    \    }\n    return null;\n}\n/*\n Out of list of strings, return the longest one.\
    \ Return the first one in case of multiple\n    strings of the same length. Return\
    \ None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int startIndex) \n{\n    foreach(string; strings)\
    \ {\n        if(string.length() > strings.length)\n            return string;\n\
    \    }\n    return null;\n}\n/*\n Out of list of strings, return the longest one.\
    \ Return the first one in case of multiple\n    strings of the same length. Return\
    \ None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int startIndex, int endIndex) \n{\n    foreach(string;\
    \ strings) {\n        if(string.length() > strings.length)\n            return\
    \ string;\n    }\n    return null;\n}\n/*\n Out of list of strings, return the\
    \ longest one. Return the first one in case of multiple\n    strings of the same\
    \ length. Return None in case the input list is empty.\n                \n*/\n\
    Nullable!(string) longest(string[] strings, char separator) \n{\n    foreach(string;\
    \ strings) {\n        if(string.length() > strings.length)\n            return\
    \ string;\n    }\n    return null;\n}\n/*\n Out of list of strings, return the\
    \ longest one. Return the first one in case of multiple\n    strings of the same\
    \ length. Return None in case the input list is empty.\n                \n*/\n\
    Nullable!(string) longest(string[] strings, char separator, int startIndex) \n\
    {\n    foreach(string; strings) {\n        if(string.length() > strings.length)\n\
    \            return string;\n    }\n    return null;\n}\n/*\n Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return None in case the input list is empty.\n         \
    \       \n*/\nNullable!(string) longest(string[] strings, char separator, int\
    \ startIndex, int endIndex) \n{\n    foreach(string; strings) {\n        if(string.length()\
    \ > strings.length)\n            return string;\n    }\n    return null;\n}\n\
    /*\n Out of list of strings, return the longest one. Return the first one in case\
    \ of multiple\n    strings of the same length. Return None in case the input list\
    \ is empty.\n                \n*/\nNullable!(string) longest(string[] strings,\
    \ char separator, int startIndex, int endIndex, char otherSeparator) \n{\n   \
    \ foreach(string; strings) {\n        if(string.length() > strings.length)\n \
    \           return string;\n    }\n    return null;\n}\n/*\n Out of list of \n\
    unittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpq24yr6qk.d(94): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpq24yr6qk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164474
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    int? maxLength = null;\n\
    \    foreach (string s in strings) {\n        if (maxLength == null || s.length()\
    \ > maxLength.Value()) {\n            maxLength = s.length;\n        }\n    }\n\
    \    return maxLength;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n\
    \        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n\
    \        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmz_3f32k.d(10): Error: no identifier for declarator `int`

    /tmp/tmpmz_3f32k.d(10): Error: found `?` instead of statement

    /tmp/tmpmz_3f32k.d(11): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmz_3f32k.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164474
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    var longest = strings[0];\n\
    \    var longestLength = longest.length;\n    for(var i = 1; i < strings.length;\
    \ ++i)\n    {\n        var s = strings[i];\n        var length = s.length;\n \
    \       if(length > longestLength)\n        {\n            longest = s;\n    \
    \        longestLength = length;\n        }\n    }\n    return longest;\n}\nunittest\n\
    {\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpddh_jm_j.d(10): Error: undefined identifier `var`

    /tmp/tmpddh_jm_j.d(11): Error: undefined identifier `var`

    /tmp/tmpddh_jm_j.d(12): Error: undefined identifier `var`

    /tmp/tmpddh_jm_j.d(14): Error: undefined identifier `var`

    /tmp/tmpddh_jm_j.d(15): Error: undefined identifier `var`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpddh_jm_j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n\tint? maxLength = null;\n\
    \tforeach (string s in strings) {\n\t\tif (maxLength == null || s.length() > maxLength.Value())\
    \ {\n\t\t\tmaxLength = s.length;\n\t\t}\n\t}\n\treturn maxLength;\n}\nunittest\n\
    {\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpyomy54x1.d(10): Error: no identifier for declarator `int`

    /tmp/tmpyomy54x1.d(10): Error: found `?` instead of statement

    /tmp/tmpyomy54x1.d(11): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyomy54x1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164474
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    var longest = strings[0];\n\
    \    var longestLength = longest.length;\n    for(var i = 1; i < strings.length;\
    \ ++i)\n    {\n        var s = strings[i];\n        if(s.length < longestLength)\n\
    \        {\n            longest = s;\n            longestLength = s.length;\n\
    \        }\n    }\n    return longest;\n}\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings, int start) \n{\n    var longest\
    \ = strings[start];\n    var longestLength = longest.length;\n    for(var i =\
    \ start+1; i < strings.length; ++i)\n    {\n        var s = strings[i];\n    \
    \    if(s.length < longestLength)\n        {\n            longest = s;\n     \
    \       longestLength = s.length;\n        }\n    }\n    return longest;\n}\n\
    /*\n Out of list of strings, return the longest one. Return the first one in case\
    \ of multiple\n    strings of the same length. Return None in case the input list\
    \ is empty.\n                \n*/\nNullable!(string) longest(string[] strings,\
    \ int start, int end) \n{\n    var longest = strings[start];\n    var longestLength\
    \ = longest.length;\n    for(var i = start+1; i < end; ++i)\n    {\n        var\
    \ s = strings[i];\n        if(s.length < longestLength)\n        {\n         \
    \   longest = s;\n            longestLength = s.length;\n        }\n    }\n  \
    \  return longest;\n}\n/*\n Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \n*/\nNullable!(string) longest(string[]\
    \ strings, int start, int end, int step) \n{\n    var longest = strings[start];\n\
    \    var longestLength = longest.length;\n    for(var i = start+1; i < end; ++i)\n\
    \    {\n        var s = strings[i];\n        if(s.length < longestLength)\n  \
    \      {\n            longest = s;\n            longestLength = s.length;\n  \
    \      }\n    }\n    return longest;\n}\n/*\n Out of list of strings, return the\
    \ longest one. Return the first one in case of multiple\n    strings of the same\
    \ length. Return None in case the input list is empty.\n                \n*/\n\
    Nullable!(string) longest(string[] strings, int start, int end, int step, string\
    \ separator) \n{\n    var longest = strings[start];\n    var longestLength = longest.length;\n\
    \    for(var i = start+1; i < end; ++i)\n    {\n        var s = strings[i];\n\
    \        if(s.length < longestLength)\n        {\n            longest = s;\n \
    \           longestLength = s.length;\n        }\n    }\n    return \nunittest\n\
    {\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpo89o4yp5.d(102): Error: expression expected, not `unittest`

    /tmp/tmpo89o4yp5.d(103): Error: found `{` when expecting `;` following `return`
    statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo89o4yp5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164474
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n\tint? maxLength = null;\n\
    \tforeach(string? s in strings) {\n\t\tif(maxLength == null || s.length() > maxLength.value)\
    \ {\n\t\t\tmaxLength = s;\n\t\t}\n\t}\n\treturn maxLength;\n}\nunittest\n{\n \
    \   alias candidate = longest;\n\n{\n        auto result = candidate([]);\n  \
    \      assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpw9uy41jo.d(10): Error: no identifier for declarator `int`

    /tmp/tmpw9uy41jo.d(10): Error: found `?` instead of statement

    /tmp/tmpw9uy41jo.d(11): Error: no identifier for declarator `string`

    /tmp/tmpw9uy41jo.d(11): Error: found `?` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw9uy41jo.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164474
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach (string s in\
    \ strings) {\n        if (s.length() > longest.length)\n            longest =\
    \ s;\n    }\n    return longest;\n}\n/*\n Out of list of strings, return the longest\
    \ one. Return the first one in case of multiple\n    strings of the same length.\
    \ Return None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int startIndex) \n{\n    foreach (string s in strings)\
    \ {\n        if (s.length() > longest.length)\n            longest = s;\n    }\n\
    \    return longest;\n}\n/*\n Out of list of strings, return the longest one.\
    \ Return the first one in case of multiple\n    strings of the same length. Return\
    \ None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int startIndex, int endIndex) \n{\n    foreach (string\
    \ s in strings) {\n        if (s.length() > longest.length)\n            longest\
    \ = s;\n    }\n    return longest;\n}\n/*\n Out of list of strings, return the\
    \ longest one. Return the first one in case of multiple\n    strings of the same\
    \ length. Return None in case the input list is empty.\n                \n*/\n\
    Nullable!(string) longest(string[] strings, char separator) \n{\n    foreach (string\
    \ s in strings) {\n        if (s.length() > longest.length)\n            longest\
    \ = s;\n    }\n    return longest;\n}\n/*\n Out of list of strings, return the\
    \ longest one. Return the first one in case of multiple\n    strings of the same\
    \ length. Return None in case the input list is empty.\n                \n*/\n\
    Nullable!(string) longest(string[] strings, char separator, int startIndex) \n\
    {\n    foreach (string s in strings) {\n        if (s.length() > longest.length)\n\
    \            longest = s;\n    }\n    return longest;\n}\n/*\n Out of list of\
    \ strings, return the longest one. Return the first one in case of multiple\n\
    \    strings of the same length. Return None in case the input list is empty.\n\
    \                \n*/\nNullable!(string) longest(string[] strings, char separator,\
    \ int startIndex, int endIndex) \n{\n    foreach (string s in strings) {\n   \
    \     if (s.length() > longest.length)\n            longest = s;\n    }\n    return\
    \ longest;\n}\n/*\n Out of list of strings, return the longest one. Return the\
    \ first one in case of multiple\n    strings of the same length. Return None in\
    \ case the input list is empty.\n                \n*/\nNullable!(string) longest(string[]\
    \ strings, char separator, char otherSeparator) \n{\n    foreach (string s in\
    \ strings) {\n        if (s.length() > longest.length)\n            longest =\
    \ s;\n    }\n    return longest;\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpg8v2hbj1.d(10): Error: found `in` when expecting `;`

    /tmp/tmpg8v2hbj1.d(23): Error: found `in` when expecting `;`

    /tmp/tmpg8v2hbj1.d(36): Error: found `in` when expecting `;`

    /tmp/tmpg8v2hbj1.d(49): Error: found `in` when expecting `;`

    /tmp/tmpg8v2hbj1.d(62): Error: found `in` when expecting `;`

    /tmp/tmpg8v2hbj1.d(75): Error: found `in` when expecting `;`

    /tmp/tmpg8v2hbj1.d(88): Error: found `in` when expecting `;`

    /tmp/tmpg8v2hbj1.d(93): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg8v2hbj1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164474
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    var longest = strings[0];\n\
    \    foreach(var s in strings)\n    {\n        if(s.length() > longest.length())\n\
    \        {\n            longest = s;\n        }\n    }\n    return longest;\n\
    }\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzqwygm78.d(11): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzqwygm78.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164474
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach(string; strings)\
    \ {\n        if(string.length == strings.length)\n            return string;\n\
    \    }\n    return null;\n}\n/*\n Out of list of strings, return the longest one.\
    \ Return the first one in case of multiple\n    strings of the same length. Return\
    \ None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int startIndex) \n{\n    foreach(string; strings)\
    \ {\n        if(string.length == strings.length && startIndex < strings.length)\n\
    \            return string;\n    }\n    return null;\n}\n/*\n Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return None in case the input list is empty.\n         \
    \       \n*/\nNullable!(string) longest(string[] strings, int startIndex, int\
    \ endIndex) \n{\n    foreach(string; strings) {\n        if(string.length == strings.length\
    \ && startIndex < strings.length && endIndex < strings.length)\n            return\
    \ string;\n    }\n    return null;\n}\n/*\n Out of list of strings, return the\
    \ longest one. Return the first one in case of multiple\n    strings of the same\
    \ length. Return None in case the input list is empty.\n                \n*/\n\
    Nullable!(string) longest(string[] strings, int startIndex, int endIndex, out\
    \ int index) \n{\n    foreach(string; strings) {\n        if(string.length ==\
    \ strings.length && startIndex < strings.length && endIndex < strings.length)\n\
    \            index = strings.length;\n    }\n    return null;\n}\n/*\n Out of\
    \ list of strings, return the longest one. Return the first one in case of multiple\n\
    \    strings of the same length. Return None in case the input list is empty.\n\
    \                \n*/\nNullable!(string) longest(string[] strings, int startIndex,\
    \ int endIndex, out int index, int length) \n{\n    foreach(string; strings) {\n\
    \        if(string.length == strings.length && startIndex < strings.length &&\
    \ endIndex < strings.length)\n            index = strings.length;\n    }\n   \
    \ return null;\n}\n/*\n Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \n*/\nNullable!(string) longest(string[]\
    \ strings, int startIndex, int endIndex, out int index, int length, int startIndex)\
    \ \n{\n    foreach(string; strings) {\n        if(string.length == strings.length\
    \ && startIndex < strings.length && endIndex < strings.length)\n            index\
    \ = strings.length;\n    }\n    return null;\n}\n/*\n Out of list of strings,\
    \ return the longest one. \nunittest\n{\n    alias candidate = longest;\n\n{\n\
    \        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n\
    \        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8sdnd_lz.d(81): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8sdnd_lz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164474
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach (string s in\
    \ strings) {\n        if (s.length() > longest.length)\n            longest =\
    \ s;\n    }\n    return longest;\n}\n/*\n Out of list of strings, return the longest\
    \ one. Return the first one in case of multiple\n    strings of the same length.\
    \ Return None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int startIndex) \n{\n    foreach (string s in strings)\
    \ {\n        if (s.length() > longest.length)\n            longest = s;\n    }\n\
    \    return longest;\n}\n/*\n Out of list of strings, return the longest one.\
    \ Return the first one in case of multiple\n    strings of the same length. Return\
    \ None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int startIndex, int endIndex) \n{\n    foreach (string\
    \ s in strings) {\n        if (s.length() > longest.length)\n            longest\
    \ = s;\n    }\n    return longest;\n}\n/*\n Out of list of strings, return the\
    \ longest one. Return the first one in case of multiple\n    strings of the same\
    \ length. Return None in case the input list is empty.\n                \n*/\n\
    Nullable!(string) longest(string[] strings, char character) \n{\n    foreach (string\
    \ s in strings) {\n        if (s.length() > longest.length)\n            longest\
    \ = s;\n    }\n    return longest;\n}\n/*\n Out of list of strings, return the\
    \ longest one. Return the first one in case of multiple\n    strings of the same\
    \ length. Return None in case the input list is empty.\n                \n*/\n\
    Nullable!(string) longest(string[] strings, char character, int startIndex) \n\
    {\n    foreach (string s in strings) {\n        if (s.length() > longest.length)\n\
    \            longest = s;\n    }\n    return longest;\n}\n/*\n Out of list of\
    \ strings, return the longest one. Return the first one in case of multiple\n\
    \    strings of the same length. Return None in case the input list is empty.\n\
    \                \n*/\nNullable!(string) longest(string[] strings, char character,\
    \ int startIndex, int endIndex) \n{\n    foreach (string s in strings) {\n   \
    \     if (s.length() > longest.length)\n            longest = s;\n    }\n    return\
    \ longest;\n}\n/*\n Out of list of strings, return the longest one. Return the\
    \ first one in case of multiple\n    strings of the same length. Return None in\
    \ case the input list is empty.\n                \n*/\nNullable!(string) longest(string[]\
    \ strings, char character, int startIndex, int endIndex, bool caseSensitive) \n\
    {\n    foreach (string s in strings) {\n        if (s.length() > longest.length)\n\
    \nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwkoqczgp.d(10): Error: found `in` when expecting `;`

    /tmp/tmpwkoqczgp.d(23): Error: found `in` when expecting `;`

    /tmp/tmpwkoqczgp.d(36): Error: found `in` when expecting `;`

    /tmp/tmpwkoqczgp.d(49): Error: found `in` when expecting `;`

    /tmp/tmpwkoqczgp.d(62): Error: found `in` when expecting `;`

    /tmp/tmpwkoqczgp.d(75): Error: found `in` when expecting `;`

    /tmp/tmpwkoqczgp.d(88): Error: found `in` when expecting `;`

    /tmp/tmpwkoqczgp.d(91): Error: found `unittest` instead of statement

    /tmp/tmpwkoqczgp.d(111): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwkoqczgp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164474
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    var longest = strings[0];\n\
    \    var longestLength = 0;\n    foreach(var s in strings) {\n        if(longestLength\
    \ < s.length)\n            longest = s;\n        longestLength = s.length;\n \
    \   }\n    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\n\
    {\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n\
    {\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpi0l40c79.d(12): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpi0l40c79.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164474
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length ==\
    \ 0) {\n        return null;\n    }\n    int maxLen = 0;\n    string maxString\
    \ = null;\n    foreach (string s in strings) {\n        if (s.length() > maxLen)\
    \ {\n            maxLen = s.length();\n            maxString = s;\n        }\n\
    \    }\n    return maxString;\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp95034c8z.d(15): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp95034c8z.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164474
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach(string s in strings)\n\
    \    {\n        if(s.length() > longest.length)\n        {\n            longest\
    \ = s;\n        }\n    }\n    return longest;\n}\n/*\n Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return None in case the input list is empty.\n         \
    \       \n*/\nNullable!(string) longest(string[] strings, int startIndex) \n{\n\
    \    foreach(string s in strings)\n    {\n        if(s.length() > longest.length)\n\
    \        {\n            longest = s;\n        }\n    }\n    return longest;\n\
    }\n/*\n Out of list of strings, return the longest one. Return the first one in\
    \ case of multiple\n    strings of the same length. Return None in case the input\
    \ list is empty.\n                \n*/\nNullable!(string) longest(string[] strings,\
    \ int startIndex, int endIndex) \n{\n    foreach(string s in strings)\n    {\n\
    \        if(s.length() > longest.length)\n        {\n            longest = s;\n\
    \        }\n    }\n    return longest;\n}\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings, char separator) \n{\n    foreach(string\
    \ s in strings)\n    {\n        if(s.length() > longest.length)\n        {\n \
    \           longest = s;\n        }\n    }\n    return longest;\n}\n/*\n Out of\
    \ list of strings, return the longest one. Return the first one in case of multiple\n\
    \    strings of the same length. Return None in case the input list is empty.\n\
    \                \n*/\nNullable!(string) longest(string[] strings, char separator,\
    \ int startIndex) \n{\n    foreach(string s in strings)\n    {\n        if(s.length()\
    \ > longest.length)\n        {\n            longest = s;\n        }\n    }\n \
    \   return longest;\n}\n/*\n Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \n*/\nNullable!(string) longest(string[]\
    \ strings, char separator, int startIndex, int endIndex) \n{\n    foreach(string\
    \ s in strings)\n    {\n        if(s.length() > longest.length)\n        {\n \
    \           longest = s;\n        }\n    }\n    return longest;\n}\n/*\n Out of\
    \ list of strings, return the longest one. Return the first one in case of multiple\n\
    \    strings of the same length. Return None in case the input list is empty.\n\
    \                \n*/\nNull\nunittest\n{\n    alias candidate = longest;\n\n{\n\
    \        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n\
    \        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8i71vntj.d(10): Error: found `in` when expecting `;`

    /tmp/tmp8i71vntj.d(26): Error: found `in` when expecting `;`

    /tmp/tmp8i71vntj.d(42): Error: found `in` when expecting `;`

    /tmp/tmp8i71vntj.d(58): Error: found `in` when expecting `;`

    /tmp/tmp8i71vntj.d(74): Error: found `in` when expecting `;`

    /tmp/tmp8i71vntj.d(90): Error: found `in` when expecting `;`

    /tmp/tmp8i71vntj.d(105): Error: no identifier for declarator `Null`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8i71vntj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164474
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach(string; strings)\
    \ {\n        if(string.length > longest.length)\n            longest = string;\n\
    \    }\n    return longest;\n}\n/*\n Out of list of strings, return the longest\
    \ one. Return the first one in case of multiple\n    strings of the same length.\
    \ Return None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings) \n{\n    foreach(string; strings) {\n        if(string.length\
    \ > longest.length)\n            longest = string;\n    }\n    return longest;\n\
    }\n/*\n Out of list of strings, return the longest one. Return the first one in\
    \ case of multiple\n    strings of the same length. Return None in case the input\
    \ list is empty.\n                \n*/\nNullable!(string) longest(string[] strings)\
    \ \n{\n    foreach(string; strings) {\n        if(string.length > longest.length)\n\
    \            longest = string;\n    }\n    return longest;\n}\n/*\n Out of list\
    \ of strings, return the longest one. Return the first one in case of multiple\n\
    \    strings of the same length. Return None in case the input list is empty.\n\
    \                \n*/\nNullable!(string) longest(string[] strings) \n{\n    foreach(string;\
    \ strings) {\n        if(string.length > longest.length)\n            longest\
    \ = string;\n    }\n    return longest;\n}\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach(string; strings)\
    \ {\n        if(string.length > longest.length)\n            longest = string;\n\
    \    }\n    return longest;\n}\n/*\n Out of list of strings, return the longest\
    \ one. Return the first one in case of multiple\n    strings of the same length.\
    \ Return None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings) \n{\n    foreach(string; strings) {\n        if(string.length\
    \ > longest.length)\n            longest = string;\n    }\n    return longest;\n\
    }\n/*\n Out of list of strings, return the longest one. Return the first one in\
    \ case of multiple\n    strings of the same length. Return None in case the input\
    \ list is empty.\n                \n*/\nNullable!(string) longest(string[] strings)\
    \ \n{\n    foreach(string; strings) {\n        if(string.length > longest.length)\n\
    \            longest = string;\n    }\n    return longest;\n}\n/*\n Out of list\
    \ of strings, return the longest one. Return the first one in case of multiple\n\
    \    strings of the same length. Return None \nunittest\n{\n    alias candidate\
    \ = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8zktetya.d(94): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8zktetya.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164474
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    int? maxLength = null;\n\
    \    foreach (string s in strings) {\n        if (maxLength == null || s.length()\
    \ > maxLength.Value()) {\n            maxLength = s.length;\n        }\n    }\n\
    \    return maxLength;\n}\n/*\n Out of list of strings, return the longest one.\
    \ Return the first one in case of multiple\n    strings of the same length. Return\
    \ None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int maxLength) \n{\n    foreach (string s in strings)\
    \ {\n        if (s.length() > maxLength) {\n            maxLength = s.length;\n\
    \        }\n    }\n    return maxLength;\n}\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings, int maxLength, int minLength)\
    \ \n{\n    foreach (string s in strings) {\n        if (s.length() > maxLength\
    \ && s.length() < minLength) {\n            maxLength = s.length;\n        }\n\
    \    }\n    return maxLength;\n}\n/*\n Out of list of strings, return the longest\
    \ one. Return the first one in case of multiple\n    strings of the same length.\
    \ Return None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int maxLength, int minLength, int maxCount) \n{\n\
    \    foreach (string s in strings) {\n        if (s.length() > maxLength && s.length()\
    \ < minLength && s.length() >= maxCount) {\n            maxLength = s.length;\n\
    \        }\n    }\n    return maxLength;\n}\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings, int maxLength, int minLength,\
    \ int maxCount, int minCount) \n{\n    foreach (string s in strings) {\n     \
    \   if (s.length() > maxLength && s.length() < minLength && s.length() >= maxCount\
    \ && s.length() >= minCount) {\n            maxLength = s.length;\n        }\n\
    \    }\n    return maxLength;\n}\n/*\n Out of list of strings, return the longest\
    \ one. Return the first one in case of multiple\n    strings of the same length.\
    \ Return None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int maxLength, int minLength, int maxCount, int minCount,\
    \ int maxCount2) \n{\n    foreach (string s in strings) {\n        if (s.length()\
    \ > maxLength && s.length() < minLength && s.length() >= maxCount && s.length()\
    \ \nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpp28680c_.d(10): Error: no identifier for declarator `int`

    /tmp/tmpp28680c_.d(10): Error: found `?` instead of statement

    /tmp/tmpp28680c_.d(11): Error: found `in` when expecting `;`

    /tmp/tmpp28680c_.d(25): Error: found `in` when expecting `;`

    /tmp/tmpp28680c_.d(39): Error: found `in` when expecting `;`

    /tmp/tmpp28680c_.d(53): Error: found `in` when expecting `;`

    /tmp/tmpp28680c_.d(67): Error: found `in` when expecting `;`

    /tmp/tmpp28680c_.d(81): Error: found `in` when expecting `;`

    /tmp/tmpp28680c_.d(83): Error: found `unittest` when expecting `)`

    /tmp/tmpp28680c_.d(103): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmpp28680c_.d(103): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp28680c_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164474
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    int? maxLength = null;\n\
    \    foreach (string s in strings) {\n        int length = s.length();\n     \
    \   if (maxLength == null || length > maxLength) {\n            maxLength = length;\n\
    \        }\n    }\n    return maxLength;\n}\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings, int maxLength) \n{\n    foreach\
    \ (string s in strings) {\n        int length = s.length();\n        if (length\
    \ > maxLength) {\n            maxLength = length;\n        }\n    }\n    return\
    \ maxLength;\n}\n/*\n Out of list of strings, return the longest one. Return the\
    \ first one in case of multiple\n    strings of the same length. Return None in\
    \ case the input list is empty.\n                \n*/\nNullable!(string) longest(string[]\
    \ strings, int maxLength, int minLength) \n{\n    foreach (string s in strings)\
    \ {\n        int length = s.length();\n        if (length > maxLength && length\
    \ < minLength) {\n            maxLength = length;\n        }\n    }\n    return\
    \ maxLength;\n}\n/*\n Out of list of strings, return the longest one. Return the\
    \ first one in case of multiple\n    strings of the same length. Return None in\
    \ case the input list is empty.\n                \n*/\nNullable!(string) longest(string[]\
    \ strings, int maxLength, int minLength, int maxLength2) \n{\n    foreach (string\
    \ s in strings) {\n        int length = s.length();\n        if (length > maxLength\
    \ && length < minLength && length < maxLength2) {\n            maxLength = length;\n\
    \        }\n    }\n    return maxLength;\n}\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings, int maxLength, int minLength,\
    \ int maxLength2, int minLength2) \n{\n    foreach (string s in strings) {\n \
    \       int length = s.length();\n        if (length > maxLength && length < minLength\
    \ && length < maxLength2 && length < minLength2) {\n            maxLength = length;\n\
    \        }\n    }\n    return maxLength;\n}\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings, int maxLength, int minLength,\
    \ int maxLength2, int minLength2, int maxLength3) \n{\n    foreach (string s in\
    \ strings) {\n        int length = s.length();\nunittest\n{\n    alias candidate\
    \ = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp__x_9aky.d(10): Error: no identifier for declarator `int`

    /tmp/tmp__x_9aky.d(10): Error: found `?` instead of statement

    /tmp/tmp__x_9aky.d(11): Error: found `in` when expecting `;`

    /tmp/tmp__x_9aky.d(26): Error: found `in` when expecting `;`

    /tmp/tmp__x_9aky.d(41): Error: found `in` when expecting `;`

    /tmp/tmp__x_9aky.d(56): Error: found `in` when expecting `;`

    /tmp/tmp__x_9aky.d(71): Error: found `in` when expecting `;`

    /tmp/tmp__x_9aky.d(86): Error: found `in` when expecting `;`

    /tmp/tmp__x_9aky.d(88): Error: found `unittest` instead of statement

    /tmp/tmp__x_9aky.d(108): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp__x_9aky.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164474
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach(string; strings)\n\
    \    {\n        if(string.length > longest.length)\n        {\n            longest\
    \ = string;\n        }\n    }\n    return longest;\n}\n/*\n Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return None in case the input list is empty.\n         \
    \       \n*/\nNullable!(string) longest(string[] strings, int startIndex) \n{\n\
    \    foreach(string; strings)\n    {\n        if(string.length > longest.length)\n\
    \        {\n            longest = string;\n        }\n    }\n    return longest;\n\
    }\n/*\n Out of list of strings, return the longest one. Return the first one in\
    \ case of multiple\n    strings of the same length. Return None in case the input\
    \ list is empty.\n                \n*/\nNullable!(string) longest(string[] strings,\
    \ int startIndex, int endIndex) \n{\n    foreach(string; strings)\n    {\n   \
    \     if(string.length > longest.length)\n        {\n            longest = string;\n\
    \        }\n    }\n    return longest;\n}\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings, char character) \n{\n    foreach(string;\
    \ strings)\n    {\n        if(string.length > longest.length)\n        {\n   \
    \         longest = string;\n        }\n    }\n    return longest;\n}\n/*\n Out\
    \ of list of strings, return the longest one. Return the first one in case of\
    \ multiple\n    strings of the same length. Return None in case the input list\
    \ is empty.\n                \n*/\nNullable!(string) longest(string[] strings,\
    \ char character, int startIndex) \n{\n    foreach(string; strings)\n    {\n \
    \       if(string.length > longest.length)\n        {\n            longest = string;\n\
    \        }\n    }\n    return longest;\n}\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings, char character, int startIndex,\
    \ int endIndex) \n{\n    foreach(string; strings)\n    {\n        if(string.length\
    \ > longest.length)\n        {\n            longest = string;\n        }\n   \
    \ }\n    return longest;\n}\n/*\n Out of list of strings, return the longest one.\
    \ Return the first one in case of multiple\n    strings of the same length. Return\
    \ None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ \nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvki5p5ab.d(105): Error: no identifier for declarator `Nullable!string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvki5p5ab.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164474
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach(string; strings)\
    \ {\n        if(string.length > longest.length)\n            longest = string;\n\
    \    }\n    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\n\
    {\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n\
    {\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpg1qfhgeu.d(11): Error: function `tmpg1qfhgeu.longest(string[] strings)`
    is not callable using argument types `()`

    /tmp/tmpg1qfhgeu.d(12): Error: function `tmpg1qfhgeu.longest(string[] strings)`
    is not callable using argument types `(string)`

    /tmp/tmpg1qfhgeu.d(12):        cannot pass argument `string` of type `string`
    to parameter `string[] strings`

    /tmp/tmpg1qfhgeu.d(14): Error: function `tmpg1qfhgeu.longest(string[] strings)`
    is not callable using argument types `()`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg1qfhgeu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach(string; strings)\
    \ {\n        if(string.length > longest.length)\n            longest = string;\n\
    \    }\n    return longest;\n}\n/*\n Out of list of strings, return the longest\
    \ one. Return the first one in case of multiple\n    strings of the same length.\
    \ Return None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int startIndex) \n{\n    foreach(string; strings)\
    \ {\n        if(string.length > longest.length)\n            longest = string;\n\
    \        if(startIndex == strings.length)\n            break;\n    }\n    return\
    \ longest;\n}\n/*\n Out of list of strings, return the longest one. Return the\
    \ first one in case of multiple\n    strings of the same length. Return None in\
    \ case the input list is empty.\n                \n*/\nNullable!(string) longest(string[]\
    \ strings, int startIndex, int endIndex) \n{\n    foreach(string; strings) {\n\
    \        if(string.length > longest.length)\n            longest = string;\n \
    \       if(startIndex == strings.length && endIndex == strings.length)\n     \
    \       break;\n    }\n    return longest;\n}\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings, int startIndex, int endIndex,\
    \ int limit) \n{\n    foreach(string; strings) {\n        if(string.length > longest.length)\n\
    \            longest = string;\n        if(startIndex == strings.length && endIndex\
    \ == strings.length && limit == strings.length)\n            break;\n    }\n \
    \   return longest;\n}\n/*\n Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \n*/\nNullable!(string) longest(string[]\
    \ strings, int startIndex, int endIndex, int limit, int offset) \n{\n    foreach(string;\
    \ strings) {\n        if(string.length > longest.length)\n            longest\
    \ = string;\n        if(startIndex == strings.length && endIndex == strings.length\
    \ && limit == strings.length && offset == strings.length)\n            break;\n\
    \    }\n    return longest;\n}\n/*\n Out of list of strings, return the longest\
    \ one. Return the first one in case of multiple\n    strings of the same length.\
    \ Return None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int startIndex, int endIndex, int limit, int offset,\
    \ int limitOffset) \n{\n    foreach(string; strings) {\n        if(string.length\
    \ > longest.length)\n            longest = \nunittest\n{\n    alias candidate\
    \ = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3zg7d507.d(86): Error: expression expected, not `unittest`

    /tmp/tmp3zg7d507.d(87): Error: found `{` when expecting `;` following statement

    /tmp/tmp3zg7d507.d(106): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3zg7d507.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    int? maxLength = null;\n\
    \    foreach(string? s in strings)\n    {\n        if(maxLength == null || s.length()\
    \ > maxLength)\n        {\n            maxLength = s.length;\n        }\n    }\n\
    \    return maxLength;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n\
    \        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n\
    \        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgj3_ea70.d(10): Error: no identifier for declarator `int`

    /tmp/tmpgj3_ea70.d(10): Error: found `?` instead of statement

    /tmp/tmpgj3_ea70.d(11): Error: no identifier for declarator `string`

    /tmp/tmpgj3_ea70.d(11): Error: found `?` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgj3_ea70.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    int? maxLength = null;\n\
    \    foreach (string s in strings) {\n        if (maxLength == null || s.length()\
    \ > maxLength.value) {\n            maxLength = s.length;\n        }\n    }\n\
    \    return maxLength;\n}\n/*\n Out of list of strings, return the longest one.\
    \ Return the first one in case of multiple\n    strings of the same length. Return\
    \ None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int start) \n{\n    int? maxLength = null;\n    foreach\
    \ (string s in strings) {\n        if (maxLength == null || s.length() > maxLength.value)\
    \ {\n            maxLength = s.length;\n        }\n    }\n    return maxLength;\n\
    }\n/*\n Out of list of strings, return the longest one. Return the first one in\
    \ case of multiple\n    strings of the same length. Return None in case the input\
    \ list is empty.\n                \n*/\nNullable!(string) longest(string[] strings,\
    \ int start, int end) \n{\n    int? maxLength = null;\n    foreach (string s in\
    \ strings) {\n        if (maxLength == null || s.length() > maxLength.value) {\n\
    \            maxLength = s.length;\n        }\n    }\n    return maxLength;\n\
    }\n/*\n Out of list of strings, return the longest one. Return the first one in\
    \ case of multiple\n    strings of the same length. Return None in case the input\
    \ list is empty.\n                \n*/\nNullable!(string) longest(string[] strings,\
    \ int start, int end, int step) \n{\n    int? maxLength = null;\n    foreach (string\
    \ s in strings) {\n        if (maxLength == null || s.length() > maxLength.value)\
    \ {\n            maxLength = s.length;\n        }\n    }\n    return maxLength;\n\
    }\n/*\n Out of list of strings, return the longest one. Return the first one in\
    \ case of multiple\n    strings of the same length. Return None in case the input\
    \ list is empty.\n                \n*/\nNullable!(string) longest(string[] strings,\
    \ int start, int end, int step, int length) \n{\n    int? maxLength = null;\n\
    \    foreach (string s in strings) {\n        if (maxLength == null || s.length()\
    \ > maxLength.value) {\n            maxLength = s.length;\n        }\n    }\n\
    \    return maxLength;\n}\n/*\n Out of list of strings, return the longest one.\
    \ Return the first one in case of multiple\n    strings of the same length. Return\
    \ None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int start, int end, int step, int length, int startIndex)\
    \ \n{\n    int? maxLength = null;\n    foreach (string s in strings) {\n     \
    \   if (maxLength == null || s.length() > maxLength.value) {\n            maxLength\
    \ = s.length;\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto\
    \ result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull &&\
    \ result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\"\
    , \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get\
    \ == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnm7sht77.d(10): Error: no identifier for declarator `int`

    /tmp/tmpnm7sht77.d(10): Error: found `?` instead of statement

    /tmp/tmpnm7sht77.d(11): Error: found `in` when expecting `;`

    /tmp/tmpnm7sht77.d(25): Error: no identifier for declarator `int`

    /tmp/tmpnm7sht77.d(25): Error: found `?` instead of statement

    /tmp/tmpnm7sht77.d(26): Error: found `in` when expecting `;`

    /tmp/tmpnm7sht77.d(40): Error: no identifier for declarator `int`

    /tmp/tmpnm7sht77.d(40): Error: found `?` instead of statement

    /tmp/tmpnm7sht77.d(41): Error: found `in` when expecting `;`

    /tmp/tmpnm7sht77.d(55): Error: no identifier for declarator `int`

    /tmp/tmpnm7sht77.d(55): Error: found `?` instead of statement

    /tmp/tmpnm7sht77.d(56): Error: found `in` when expecting `;`

    /tmp/tmpnm7sht77.d(70): Error: no identifier for declarator `int`

    /tmp/tmpnm7sht77.d(70): Error: found `?` instead of statement

    /tmp/tmpnm7sht77.d(71): Error: found `in` when expecting `;`

    /tmp/tmpnm7sht77.d(85): Error: no identifier for declarator `int`

    /tmp/tmpnm7sh'
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach (string s in\
    \ strings) {\n        if (s.length() > longest.length)\n            longest =\
    \ s;\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4dg4o4dz.d(10): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4dg4o4dz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164474
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    var longest:string =\
    \ null;\n    var longestLength:int = 0;\n    var i:int = 0;\n    \n    while(i\
    \ < strings.length)\n    {\n        var length = strings[i].length;\n        if(length\
    \ > longestLength)\n        {\n            longest = strings[i];\n           \
    \ longestLength = length;\n        }\n        i++;\n    }\n    return longest;\n\
    }\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpsnrsl_0g.d(10): Error: found `longest` when expecting `;` following
    statement

    /tmp/tmpsnrsl_0g.d(10): Error: found `:` instead of statement

    /tmp/tmpsnrsl_0g.d(11): Error: found `longestLength` when expecting `;` following
    statement

    /tmp/tmpsnrsl_0g.d(11): Error: found `:` instead of statement

    /tmp/tmpsnrsl_0g.d(12): Error: found `i` when expecting `;` following statement

    /tmp/tmpsnrsl_0g.d(12): Error: found `:` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsnrsl_0g.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    var maxLength = 0;\n\
    \    var maxString = null;\n    foreach(var s in strings)\n    {\n        if(s.length()\
    \ > maxLength)\n        {\n            maxLength = s.length();\n            maxString\
    \ = s;\n        }\n    }\n    return maxString;\n}\nunittest\n{\n    alias candidate\
    \ = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9fnskmm3.d(12): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9fnskmm3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    var longest = strings[0];\n\
    \    for(var i = 1; i < strings.length; ++i)\n    {\n        if(strings[i].length\
    \ < longest.length)\n        {\n            longest = strings[i];\n        }\n\
    \    }\n    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\n\
    {\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n\
    {\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1grd25v6.d(10): Error: undefined identifier `var`

    /tmp/tmp1grd25v6.d(11): Error: undefined identifier `var`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1grd25v6.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    int? maxLength = null;\n\
    \    foreach (string s in strings) {\n        if (maxLength == null || s.length()\
    \ > maxLength) {\n            maxLength = s.length;\n        }\n    }\n    return\
    \ maxLength;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto\
    \ result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull &&\
    \ result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\"\
    , \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get\
    \ == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkkecvotq.d(10): Error: no identifier for declarator `int`

    /tmp/tmpkkecvotq.d(10): Error: found `?` instead of statement

    /tmp/tmpkkecvotq.d(11): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkkecvotq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164474
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    var longest = strings[0];\n\
    \    var longestLength = longest.length;\n    for(var i = 1; i < strings.length;\
    \ ++i)\n    {\n        var s = strings[i];\n        if(s.length == longestLength)\n\
    \        {\n            longest = s;\n        }\n        else\n        {\n   \
    \         longestLength = s.length;\n        }\n    }\n    return longest;\n}\n\
    /*\n Out of list of strings, return the longest one. Return the first one in case\
    \ of multiple\n    strings of the same length. Return None in case the input list\
    \ is empty.\n                \n*/\nNullable!(string) longest(string[] strings,\
    \ int startIndex) \n{\n    var longest = strings[startIndex];\n    var longestLength\
    \ = longest.length;\n    for(var i = startIndex + 1; i < strings.length; ++i)\n\
    \    {\n        var s = strings[i];\n        if(s.length == longestLength)\n \
    \       {\n            longest = s;\n        }\n        else\n        {\n    \
    \        longestLength = s.length;\n        }\n    }\n    return longest;\n}\n\
    /*\n Out of list of strings, return the longest one. Return the first one in case\
    \ of multiple\n    strings of the same length. Return None in case the input list\
    \ is empty.\n                \n*/\nNullable!(string) longest(string[] strings,\
    \ int startIndex, int endIndex) \n{\n    var longest = strings[startIndex];\n\
    \    var longestLength = longest.length;\n    for(var i = startIndex + 1; i <\
    \ endIndex; ++i)\n    {\n        var s = strings[i];\n        if(s.length == longestLength)\n\
    \        {\n            longest = s;\n        }\n        else\n        {\n   \
    \         longestLength = s.length;\n        }\n    }\n    return longest;\n}\n\
    /*\n Out of list of strings, return the longest one. Return the first one in case\
    \ of multiple\n    strings of the same length. Return None in case the input list\
    \ is empty.\n                \n*/\nNullable!(string) longest(string[] strings,\
    \ char c, int startIndex) \n{\n    var longest = strings[startIndex];\n    var\
    \ longestLength = longest.length;\n    for(var i = startIndex + 1; i < strings.length;\
    \ ++i)\n    {\n        var s = strings[i];\n        if(s.length == longestLength)\n\
    \        {\n            longest = s;\n        }\n        else\n        {\n   \
    \         longestLength = s.length;\n        }\n    }\n    return longest;\n}\n\
    /*\n Out of list of strings, return the longest one. Return the first one in case\
    \ of multiple\n    strings of the same length. Return None in case the input list\
    \ is empty.\n                \n*/\nNullable!(string) longest(string[] strings,\
    \ char c, int startIndex, int endIndex) \n{\n    var longest = strings[startIndex];\n\
    \    var longestLength = longest.length;\n    for(var i = startIndex + 1\nunittest\n\
    {\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmptwzgkgev.d(105): Error: semicolon expected, not `unittest`

    /tmp/tmptwzgkgev.d(105): Error: expression expected, not `unittest`

    /tmp/tmptwzgkgev.d(106): Error: found `{` when expecting `;` following `for` condition

    /tmp/tmptwzgkgev.d(107): Error: expression expected, not `alias`

    /tmp/tmptwzgkgev.d(107): Error: found `candidate` when expecting `)`

    /tmp/tmptwzgkgev.d(107): Error: found `=` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptwzgkgev.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach(string; strings)\
    \ {\n        if(string.length() > longest.length())\n            longest = string;\n\
    \    }\n    return longest;\n}\n/*\n Out of list of strings, return the longest\
    \ one. Return the first one in case of multiple\n    strings of the same length.\
    \ Return None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int startIndex) \n{\n    foreach(string; strings)\
    \ {\n        if(string.length() > longest.length())\n            longest = string;\n\
    \    }\n    return longest;\n}\n/*\n Out of list of strings, return the longest\
    \ one. Return the first one in case of multiple\n    strings of the same length.\
    \ Return None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int startIndex, int endIndex) \n{\n    foreach(string;\
    \ strings) {\n        if(string.length() > longest.length())\n            longest\
    \ = string;\n    }\n    return longest;\n}\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings, char character) \n{\n    foreach(string;\
    \ strings) {\n        if(string.length() > longest.length())\n            longest\
    \ = string;\n    }\n    return longest;\n}\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings, char character, int startIndex)\
    \ \n{\n    foreach(string; strings) {\n        if(string.length() > longest.length())\n\
    \            longest = string;\n    }\n    return longest;\n}\n/*\n Out of list\
    \ of strings, return the longest one. Return the first one in case of multiple\n\
    \    strings of the same length. Return None in case the input list is empty.\n\
    \                \n*/\nNullable!(string) longest(string[] strings, char character,\
    \ int startIndex, int endIndex) \n{\n    foreach(string; strings) {\n        if(string.length()\
    \ > longest.length())\n            longest = string;\n    }\n    return longest;\n\
    }\n/*\n Out of list of strings, return the longest one. Return the first one in\
    \ case of multiple\n    strings of the same length. Return None in case the input\
    \ list is empty.\n                \n*/\nNullable!(string) longest(string[] strings,\
    \ char character, int startIndex, int endIndex, bool caseSensitive) \n{\n    foreach(string;\
    \ strings) {\n        if(\nunittest\n{\n    alias candidate = longest;\n\n{\n\
    \        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n\
    \        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpc8bjvcwq.d(90): Error: expression expected, not `unittest`

    /tmp/tmpc8bjvcwq.d(91): Error: found `{` when expecting `)`

    /tmp/tmpc8bjvcwq.d(110): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc8bjvcwq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach(string s in strings)\n\
    \    {\n        if(s.length() > longest.length)\n        {\n            longest\
    \ = s;\n        }\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate\
    \ = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8l7x_mhq.d(10): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8l7x_mhq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    var longest = strings[0];\n\
    \    foreach(var s in strings)\n    {\n        if(s.length > longest.length)\n\
    \            longest = s;\n    }\n    return longest;\n}\nunittest\n{\n    alias\
    \ candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzhr1k8ik.d(11): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzhr1k8ik.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach(string s in strings)\n\
    \    {\n        if(s.length() > longest.length)\n            longest = s;\n  \
    \  }\n    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\n\
    {\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n\
    {\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp68d8y45t.d(10): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp68d8y45t.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164474
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach(string s in strings)\
    \ {\n        if(s.length() > longest.length)\n            longest = s;\n    }\n\
    \    return longest;\n}\n/*\n Out of list of strings, return the longest one.\
    \ Return the first one in case of multiple\n    strings of the same length. Return\
    \ None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int start) \n{\n    foreach(string s in strings) {\n\
    \        if(s.length() > longest.length)\n            longest = s;\n    }\n  \
    \  return longest;\n}\n/*\n Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \n*/\nNullable!(string) longest(string[]\
    \ strings, int start, int end) \n{\n    foreach(string s in strings) {\n     \
    \   if(s.length() > longest.length)\n            longest = s;\n    }\n    return\
    \ longest;\n}\n/*\n Out of list of strings, return the longest one. Return the\
    \ first one in case of multiple\n    strings of the same length. Return None in\
    \ case the input list is empty.\n                \n*/\nNullable!(string) longest(string[]\
    \ strings, int start, int end, int step) \n{\n    foreach(string s in strings)\
    \ {\n        if(s.length() > longest.length)\n            longest = s;\n    }\n\
    \    return longest;\n}\n/*\n Out of list of strings, return the longest one.\
    \ Return the first one in case of multiple\n    strings of the same length. Return\
    \ None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int start, int end, int step, string separator) \n\
    {\n    foreach(string s in strings) {\n        if(s.length() > longest.length)\n\
    \            longest = s;\n    }\n    return longest;\n}\n/*\n Out of list of\
    \ strings, return the longest one. Return the first one in case of multiple\n\
    \    strings of the same length. Return None in case the input list is empty.\n\
    \                \n*/\nNullable!(string) longest(string[] strings, int start,\
    \ int end, int step, string separator, int limit) \n{\n    foreach(string s in\
    \ strings) {\n        if(s.length() > longest.length)\n            longest = s;\n\
    \    }\n    return longest;\n}\n/*\n Out of list of strings, return the longest\
    \ one. Return the first one in case of multiple\n    strings of the same length.\
    \ Return None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int start, int end, int step, string separator, int\
    \ limit, int offset) \n{\n    foreach(string s in string\nunittest\n{\n    alias\
    \ candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpg833zpz3.d(10): Error: found `in` when expecting `;`

    /tmp/tmpg833zpz3.d(23): Error: found `in` when expecting `;`

    /tmp/tmpg833zpz3.d(36): Error: found `in` when expecting `;`

    /tmp/tmpg833zpz3.d(49): Error: found `in` when expecting `;`

    /tmp/tmpg833zpz3.d(62): Error: found `in` when expecting `;`

    /tmp/tmpg833zpz3.d(75): Error: found `in` when expecting `;`

    /tmp/tmpg833zpz3.d(88): Error: found `in` when expecting `;`

    /tmp/tmpg833zpz3.d(89): Error: found `unittest` when expecting `)`

    /tmp/tmpg833zpz3.d(109): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg833zpz3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach(string; strings)\
    \ \n    {\n        if (string.length == strings.length) \n        {\n        \
    \    return string;\n        }\n    }\n    return None;\n}\n/*\n Out of list of\
    \ strings, return the longest one. Return the first one in case of multiple\n\
    \    strings of the same length. Return None in case the input list is empty.\n\
    \                \n*/\nNullable!(string) longest(string[] strings, int startIndex)\
    \ \n{\n    foreach(string; strings) \n    {\n        if (string.length == strings.length\
    \ && startIndex < strings.length) \n        {\n            return string;\n  \
    \      }\n    }\n    return None;\n}\n/*\n Out of list of strings, return the\
    \ longest one. Return the first one in case of multiple\n    strings of the same\
    \ length. Return None in case the input list is empty.\n                \n*/\n\
    Nullable!(string) longest(string[] strings, int startIndex, int endIndex) \n{\n\
    \    foreach(string; strings) \n    {\n        if (string.length == strings.length\
    \ && startIndex < strings.length && endIndex < strings.length) \n        {\n \
    \           return string;\n        }\n    }\n    return None;\n}\n/*\n Out of\
    \ list of strings, return the longest one. Return the first one in case of multiple\n\
    \    strings of the same length. Return None in case the input list is empty.\n\
    \                \n*/\nNullable!(string) longest(string[] strings, int startIndex,\
    \ int endIndex, int maxLength) \n{\n    foreach(string; strings) \n    {\n   \
    \     if (string.length == strings.length && startIndex < strings.length && endIndex\
    \ < strings.length && maxLength < strings.length) \n        {\n            return\
    \ string;\n        }\n    }\n    return None;\n}\n/*\n Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return None in case the input list is empty.\n         \
    \       \n*/\nNullable!(string) longest(string[] strings, int startIndex, int\
    \ endIndex, int maxLength, int minLength) \n{\n    foreach(string; strings) \n\
    \    {\n        if (string.length == strings.length && startIndex < strings.length\
    \ && endIndex < strings.length && maxLength < strings.length && minLength < strings.length)\
    \ \n        {\n            return string;\n        }\n    }\n    return None;\n\
    }\n/*\n Out of list of strings, return the longest one. Return the first one in\
    \ case of multiple\n    strings of the same length. Return None in case the input\
    \ list is empty.\n                \n*/\nNullable!(string) longest(string[] strings,\
    \ int startIndex, int endIndex, int maxLength, int minLength, int maxCount) \n\
    {\n    foreach(string; string\nunittest\n{\n    alias candidate = longest;\n\n\
    {\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n\
    {\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpcn5v_27g.d(91): Error: found `unittest` when expecting `)`

    /tmp/tmpcn5v_27g.d(111): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcn5v_27g.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach(string s in strings)\n\
    \    {\n        if(s.length() > longest.length)\n            longest = s;\n  \
    \  }\n    return longest;\n}\n/*\n Out of list of strings, return the longest\
    \ one. Return the first one in case of multiple\n    strings of the same length.\
    \ Return None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int startIndex) \n{\n    foreach(string s in strings)\n\
    \    {\n        if(s.length() > longest.length)\n            longest = s;\n  \
    \  }\n    return longest;\n}\n/*\n Out of list of strings, return the longest\
    \ one. Return the first one in case of multiple\n    strings of the same length.\
    \ Return None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int startIndex, int endIndex) \n{\n    foreach(string\
    \ s in strings)\n    {\n        if(s.length() > longest.length)\n            longest\
    \ = s;\n    }\n    return longest;\n}\n/*\n Out of list of strings, return the\
    \ longest one. Return the first one in case of multiple\n    strings of the same\
    \ length. Return None in case the input list is empty.\n                \n*/\n\
    Nullable!(string) longest(string[] strings, char character) \n{\n    foreach(string\
    \ s in strings)\n    {\n        if(s.length() > longest.length)\n            longest\
    \ = s;\n    }\n    return longest;\n}\n/*\n Out of list of strings, return the\
    \ longest one. Return the first one in case of multiple\n    strings of the same\
    \ length. Return None in case the input list is empty.\n                \n*/\n\
    Nullable!(string) longest(string[] strings, char character, int startIndex) \n\
    {\n    foreach(string s in strings)\n    {\n        if(s.length() > longest.length)\n\
    \            longest = s;\n    }\n    return longest;\n}\n/*\n Out of list of\
    \ strings, return the longest one. Return the first one in case of multiple\n\
    \    strings of the same length. Return None in case the input list is empty.\n\
    \                \n*/\nNullable!(string) longest(string[] strings, char character,\
    \ int startIndex, int endIndex) \n{\n    foreach(string s in strings)\n    {\n\
    \        if(s.length() > longest.length)\n            longest = s;\n    }\n  \
    \  return longest;\n}\n/*\n Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \n*/\nNullable!(string) longest(string[]\
    \ strings, char character, int startIndex, int endIndex, bool caseSensitive\n\
    unittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4ukqqztm.d(10): Error: found `in` when expecting `;`

    /tmp/tmp4ukqqztm.d(24): Error: found `in` when expecting `;`

    /tmp/tmp4ukqqztm.d(38): Error: found `in` when expecting `;`

    /tmp/tmp4ukqqztm.d(52): Error: found `in` when expecting `;`

    /tmp/tmp4ukqqztm.d(66): Error: found `in` when expecting `;`

    /tmp/tmp4ukqqztm.d(80): Error: found `in` when expecting `;`

    /tmp/tmp4ukqqztm.d(93): Error: found `unittest` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4ukqqztm.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach(string; strings)\
    \ {\n        if(string.length == strings.length)\n            return string;\n\
    \    }\n    return null;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n\
    \        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n\
    \        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5r2y0si_.d(12): Error: cannot implicitly convert expression `string`
    of type `string` to `Nullable!string`

    /tmp/tmp5r2y0si_.d(14): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5r2y0si_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164476
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    int? maxLength = null;\n\
    \    foreach (string s in strings) {\n        if (maxLength == null || s.length()\
    \ > maxLength) {\n            maxLength = s.length;\n        }\n    }\n    return\
    \ maxLength;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto\
    \ result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull &&\
    \ result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\"\
    , \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get\
    \ == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkkecvotq.d(10): Error: no identifier for declarator `int`

    /tmp/tmpkkecvotq.d(10): Error: found `?` instead of statement

    /tmp/tmpkkecvotq.d(11): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkkecvotq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164474
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach(string; strings)\
    \ {\n        if(string.length > longest.length) longest = string;\n    }\n   \
    \ return longest;\n}\n/*\n Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \n*/\nNullable!(string) longest(string[]\
    \ strings, int startIndex) \n{\n    foreach(string; strings) {\n        if(string.length\
    \ > longest.length) longest = string;\n    }\n    return longest;\n}\n/*\n Out\
    \ of list of strings, return the longest one. Return the first one in case of\
    \ multiple\n    strings of the same length. Return None in case the input list\
    \ is empty.\n                \n*/\nNullable!(string) longest(string[] strings,\
    \ int startIndex, int endIndex) \n{\n    foreach(string; strings) {\n        if(string.length\
    \ > longest.length) longest = string;\n    }\n    return longest;\n}\n/*\n Out\
    \ of list of strings, return the longest one. Return the first one in case of\
    \ multiple\n    strings of the same length. Return None in case the input list\
    \ is empty.\n                \n*/\nNullable!(string) longest(string[] strings,\
    \ char separator) \n{\n    foreach(string; strings) {\n        if(string.length\
    \ > longest.length) longest = string;\n    }\n    return longest;\n}\n/*\n Out\
    \ of list of strings, return the longest one. Return the first one in case of\
    \ multiple\n    strings of the same length. Return None in case the input list\
    \ is empty.\n                \n*/\nNullable!(string) longest(string[] strings,\
    \ char separator, int startIndex) \n{\n    foreach(string; strings) {\n      \
    \  if(string.length > longest.length) longest = string;\n    }\n    return longest;\n\
    }\n/*\n Out of list of strings, return the longest one. Return the first one in\
    \ case of multiple\n    strings of the same length. Return None in case the input\
    \ list is empty.\n                \n*/\nNullable!(string) longest(string[] strings,\
    \ char separator, int startIndex, int endIndex) \n{\n    foreach(string; strings)\
    \ {\n        if(string.length > longest.length) longest = string;\n    }\n   \
    \ return longest;\n}\n/*\n Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \n*/\nNullable!(string) longest(string[]\
    \ strings, char separator, int startIndex, int endIndex, char separator2) \n{\n\
    \    foreach(string; strings) {\n        if(string.length > longest.length) longest\
    \ = string;\n    }\n    return longest;\n}\n/*\n Out of list of strings, \nunittest\n\
    {\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxlvd_dbk.d(87): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxlvd_dbk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    int? maxLength = null;\n\
    \    foreach(string? s in strings) {\n        if (maxLength == null || s.length()\
    \ > maxLength) {\n            maxLength = s.length();\n        }\n    }\n    return\
    \ maxLength;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto\
    \ result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull &&\
    \ result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\"\
    , \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get\
    \ == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfig26iep.d(10): Error: no identifier for declarator `int`

    /tmp/tmpfig26iep.d(10): Error: found `?` instead of statement

    /tmp/tmpfig26iep.d(11): Error: no identifier for declarator `string`

    /tmp/tmpfig26iep.d(11): Error: found `?` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfig26iep.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length ==\
    \ 0) {\n        return null;\n    }\n    \n    int maxLength = 0;\n    string\
    \ maxString = null;\n    \n    for (string s in strings) {\n        if (s.length()\
    \ > maxLength) {\n            maxLength = s.length();\n            maxString =\
    \ s;\n        }\n    }\n    \n    return maxString;\n}\nunittest\n{\n    alias\
    \ candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnembblhb.d(17): Error: semicolon expected, not `in`

    /tmp/tmpnembblhb.d(17): Error: expression expected, not `in`

    /tmp/tmpnembblhb.d(17): Error: found `strings` when expecting `;` following `for`
    condition

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnembblhb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n\tint? maxLength = null;\n\
    \tstring maxString = null;\n\tforeach(string! s, strings) {\n\t\tint length =\
    \ s.length();\n\t\tif (maxLength == null || length > maxLength) {\n\t\t\tmaxLength\
    \ = length;\n\t\t\tmaxString = s;\n\t\t}\n\t}\n\treturn maxString;\n}\n/*\n Out\
    \ of list of strings, return the longest one. Return the first one in case of\
    \ multiple\n    strings of the same length. Return None in case the input list\
    \ is empty.\n                \n*/\nNullable!(string) longest(string[] strings,\
    \ int maxLength) \n{\n\tstring maxString = null;\n\tforeach(string! s, strings)\
    \ {\n\t\tint length = s.length();\n\t\tif (maxLength == null || length > maxLength)\
    \ {\n\t\t\tmaxLength = length;\n\t\t\tmaxString = s;\n\t\t}\n\t}\n\treturn maxString;\n\
    }\n/*\n Out of list of strings, return the longest one. Return the first one in\
    \ case of multiple\n    strings of the same length. Return None in case the input\
    \ list is empty.\n                \n*/\nNullable!(string) longest(string[] strings,\
    \ int maxLength, int maxLength2) \n{\n\tstring maxString = null;\n\tforeach(string!\
    \ s, strings) {\n\t\tint length = s.length();\n\t\tif (maxLength == null || length\
    \ > maxLength) {\n\t\t\tmaxLength = length;\n\t\t\tmaxString = s;\n\t\t}\n\t}\n\
    \treturn maxString;\n}\n/*\n Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \n*/\nNullable!(string) longest(string[]\
    \ strings, int maxLength, int maxLength2, int maxLength3) \n{\n\tstring maxString\
    \ = null;\n\tforeach(string! s, strings) {\n\t\tint length = s.length();\n\t\t\
    if (maxLength == null || length > maxLength) {\n\t\t\tmaxLength = length;\n\t\t\
    \tmaxString = s;\n\t\t}\n\t}\n\treturn maxString;\n}\n/*\n Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return None in case the input list is empty.\n         \
    \       \n*/\nNullable!(string) longest(string[] strings, int maxLength, int maxLength2,\
    \ int maxLength3, int maxLength4) \n{\n\tstring maxString = null;\n\tforeach(string!\
    \ s, strings) {\n\t\tint length = s.length();\n\t\tif (maxLength == null || length\
    \ > maxLength) {\n\t\t\tmaxLength = length;\n\t\t\tmaxString = s;\n\t\t}\n\t}\n\
    \treturn maxString;\n}\n/*\n Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length\nunittest\n\
    {\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplbgcunvw.d(10): Error: no identifier for declarator `int`

    /tmp/tmplbgcunvw.d(10): Error: found `?` instead of statement

    /tmp/tmplbgcunvw.d(12): Error: no identifier for declarator `string!s`

    /tmp/tmplbgcunvw.d(12): Error: no identifier for declarator `strings`

    /tmp/tmplbgcunvw.d(12): Error: found `)` when expecting `;`

    /tmp/tmplbgcunvw.d(19): Error: found `return` when expecting `)`

    /tmp/tmplbgcunvw.d(29): Error: no identifier for declarator `string!s`

    /tmp/tmplbgcunvw.d(29): Error: no identifier for declarator `strings`

    /tmp/tmplbgcunvw.d(29): Error: found `)` when expecting `;`

    /tmp/tmplbgcunvw.d(36): Error: found `return` when expecting `)`

    /tmp/tmplbgcunvw.d(46): Error: no identifier for declarator `string!s`

    /tmp/tmplbgcunvw.d(46): Error: no identifier for declarator `strings`

    /tmp/tmplbgcunvw.d(46): Error: found `)` when expecting `;`

    /tmp/tmplbgcunvw.d(53): Error: found `return` when expecting `)`

    /tmp/tmplbgcunvw.d(63): Error: no identifier for declarator `string!s`

    /tmp/tmplbgcunvw.d(63): Err'
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach(string s in strings)\
    \ {\n        if(s.length() > longest.length()) {\n            longest = s;\n \
    \       }\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqn25pd4r.d(10): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqn25pd4r.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    int[] lengths = strings.lengths.toArray();\n\
    \    int maxLength = 0;\n    int maxIndex = 0;\n    for(int i = 0; i < lengths.length;\
    \ i++)\n    {\n        if(lengths[i] > maxLength)\n        {\n            maxLength\
    \ = lengths[i];\n            maxIndex = i;\n        }\n    }\n    return maxIndex\
    \ < lengths.length ? strings[maxIndex] : null;\n}\n/*\n Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return None in case the input list is empty.\n         \
    \       \n*/\nNullable!(string) longest(string[] strings, int startIndex) \n{\n\
    \    int[] lengths = strings.lengths.toArray();\n    int maxLength = 0;\n    int\
    \ maxIndex = 0;\n    for(int i = startIndex; i < lengths.length; i++)\n    {\n\
    \        if(lengths[i] > maxLength)\n        {\n            maxLength = lengths[i];\n\
    \            maxIndex = i;\n        }\n    }\n    return maxIndex < lengths.length\
    \ ? strings[maxIndex] : null;\n}\n/*\n Out of list of strings, return the longest\
    \ one. Return the first one in case of multiple\n    strings of the same length.\
    \ Return None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int startIndex, int endIndex) \n{\n    int[] lengths\
    \ = strings.lengths.toArray();\n    int maxLength = 0;\n    int maxIndex = 0;\n\
    \    for(int i = startIndex; i < lengths.length && i < endIndex; i++)\n    {\n\
    \        if(lengths[i] > maxLength)\n        {\n            maxLength = lengths[i];\n\
    \            maxIndex = i;\n        }\n    }\n    return maxIndex < lengths.length\
    \ ? strings[maxIndex] : null;\n}\n/*\n Out of list of strings, return the longest\
    \ one. Return the first one in case of multiple\n    strings of the same length.\
    \ Return None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int startIndex, int endIndex, int maxLength) \n{\n\
    \    int[] lengths = strings.lengths.toArray();\n    int maxIndex = 0;\n    for(int\
    \ i = startIndex; i < lengths.length && i < endIndex; i++)\n    {\n        if(lengths[i]\
    \ > maxLength)\n        {\n            maxLength = lengths[i];\n            maxIndex\
    \ = i;\n        }\n    }\n    return maxIndex < lengths.length ? strings[maxIndex]\
    \ : null;\n}\n/*\n Out of list of strings, return the longest one. Return the\
    \ first one in case of multiple\n    strings of the same length. Return None in\
    \ case the input list is empty.\n                \n*/\nNullable!(string) longest(string[]\
    \ strings, int startIndex, int endIndex, int max\nunittest\n{\n    alias candidate\
    \ = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmhp92i74.d(88): Error: found `unittest` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmhp92i74.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    int? maxLength = null;\n\
    \    foreach(string? s in strings) {\n        int length = s.length();\n     \
    \   if (maxLength == null || length > maxLength.Value) {\n            maxLength\
    \ = length;\n        }\n    }\n    return maxLength;\n}\n/*\n Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return None in case the input list is empty.\n         \
    \       \n*/\nNullable!(string) longest(string[] strings, int lengthLimit) \n\
    {\n    int? maxLength = null;\n    foreach(string? s in strings) {\n        int\
    \ length = s.length();\n        if (maxLength == null || length > lengthLimit)\
    \ {\n            maxLength = length;\n        }\n    }\n    return maxLength;\n\
    }\n/*\n Out of list of strings, return the longest one. Return the first one in\
    \ case of multiple\n    strings of the same length. Return None in case the input\
    \ list is empty.\n                \n*/\nNullable!(string) longest(string[] strings,\
    \ int lengthLimit, int maxLength) \n{\n    int? maxLength = null;\n    foreach(string?\
    \ s in strings) {\n        int length = s.length();\n        if (maxLength ==\
    \ null || length > lengthLimit || maxLength > length) {\n            maxLength\
    \ = length;\n        }\n    }\n    return maxLength;\n}\n/*\n Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return None in case the input list is empty.\n         \
    \       \n*/\nNullable!(string) longest(string[] strings, int lengthLimit, int\
    \ maxLength, int minLength) \n{\n    int? maxLength = null;\n    foreach(string?\
    \ s in strings) {\n        int length = s.length();\n        if (maxLength ==\
    \ null || length > lengthLimit || maxLength > length || length < minLength) {\n\
    \            maxLength = length;\n        }\n    }\n    return maxLength;\n}\n\
    /*\n Out of list of strings, return the longest one. Return the first one in case\
    \ of multiple\n    strings of the same length. Return None in case the input list\
    \ is empty.\n                \n*/\nNullable!(string) longest(string[] strings,\
    \ int lengthLimit, int maxLength, int minLength, int maxCount) \n{\n    int? maxLength\
    \ = null;\n    foreach(string? s in strings) {\n        int length = s.length();\n\
    \        if (maxLength == null || length > lengthLimit || maxLength > length ||\
    \ length < minLength || maxCount > 1) {\n            maxLength = length;\n   \
    \     }\n    }\n    return maxLength;\n}\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None \nunittest\n{\n    alias candidate = longest;\n\n{\n\
    \        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n\
    \        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjrft5u6s.d(10): Error: no identifier for declarator `int`

    /tmp/tmpjrft5u6s.d(10): Error: found `?` instead of statement

    /tmp/tmpjrft5u6s.d(11): Error: no identifier for declarator `string`

    /tmp/tmpjrft5u6s.d(11): Error: found `?` when expecting `;`

    /tmp/tmpjrft5u6s.d(26): Error: no identifier for declarator `int`

    /tmp/tmpjrft5u6s.d(26): Error: found `?` instead of statement

    /tmp/tmpjrft5u6s.d(27): Error: no identifier for declarator `string`

    /tmp/tmpjrft5u6s.d(27): Error: found `?` when expecting `;`

    /tmp/tmpjrft5u6s.d(42): Error: no identifier for declarator `int`

    /tmp/tmpjrft5u6s.d(42): Error: found `?` instead of statement

    /tmp/tmpjrft5u6s.d(43): Error: no identifier for declarator `string`

    /tmp/tmpjrft5u6s.d(43): Error: found `?` when expecting `;`

    /tmp/tmpjrft5u6s.d(58): Error: no identifier for declarator `int`

    /tmp/tmpjrft5u6s.d(58): Error: found `?` instead of statement

    /tmp/tmpjrft5u6s.d(59): Error: no identifier for declarator `string`

    /tmp/tmpjrft5u6s.d(59): Error: found `?` when expecting '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    int? maxLength = null;\n\
    \    foreach(string? s in strings)\n    {\n        if(maxLength == null || s.length()\
    \ > maxLength)\n        {\n            maxLength = s.length;\n        }\n    }\n\
    \    return maxLength;\n}\n/*\n Out of list of strings, return the longest one.\
    \ Return the first one in case of multiple\n    strings of the same length. Return\
    \ None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int maxLength) \n{\n    foreach(string? s in strings)\n\
    \    {\n        if(s.length() > maxLength)\n        {\n            maxLength =\
    \ s.length;\n        }\n    }\n    return maxLength;\n}\n/*\n Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return None in case the input list is empty.\n         \
    \       \n*/\nNullable!(string) longest(string[] strings, int maxLength, int minLength)\
    \ \n{\n    foreach(string? s in strings)\n    {\n        if(s.length() > maxLength\
    \ && s.length() >= minLength)\n        {\n            maxLength = s.length;\n\
    \        }\n    }\n    return maxLength;\n}\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings, int maxLength, int minLength,\
    \ int maxCount) \n{\n    foreach(string? s in strings)\n    {\n        if(s.length()\
    \ > maxLength && s.length() >= minLength && s.count() >= maxCount)\n        {\n\
    \            maxLength = s.length;\n        }\n    }\n    return maxLength;\n\
    }\n/*\n Out of list of strings, return the longest one. Return the first one in\
    \ case of multiple\n    strings of the same length. Return None in case the input\
    \ list is empty.\n                \n*/\nNullable!(string) longest(string[] strings,\
    \ int maxLength, int minLength, int maxCount, int minCount) \n{\n    foreach(string?\
    \ s in strings)\n    {\n        if(s.length() > maxLength && s.length() >= minLength\
    \ && s.count() >= maxCount && s.count() <= minCount)\n        {\n            maxLength\
    \ = s.length;\n        }\n    }\n    return maxLength;\n}\n/*\n Out of list of\
    \ strings, return the longest one. Return the first one in case of multiple\n\
    \    strings of the same length. Return None in case the input list is empty.\n\
    \                \n*/\nNullable!(string) longest(string[] strings, int maxLength,\
    \ int minLength, int maxCount, int minCount, int maxCount2) \n{\n    \nunittest\n\
    {\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpao1zju73.d(10): Error: no identifier for declarator `int`

    /tmp/tmpao1zju73.d(10): Error: found `?` instead of statement

    /tmp/tmpao1zju73.d(11): Error: no identifier for declarator `string`

    /tmp/tmpao1zju73.d(11): Error: found `?` when expecting `;`

    /tmp/tmpao1zju73.d(27): Error: no identifier for declarator `string`

    /tmp/tmpao1zju73.d(27): Error: found `?` when expecting `;`

    /tmp/tmpao1zju73.d(43): Error: no identifier for declarator `string`

    /tmp/tmpao1zju73.d(43): Error: found `?` when expecting `;`

    /tmp/tmpao1zju73.d(59): Error: no identifier for declarator `string`

    /tmp/tmpao1zju73.d(59): Error: found `?` when expecting `;`

    /tmp/tmpao1zju73.d(75): Error: no identifier for declarator `string`

    /tmp/tmpao1zju73.d(75): Error: found `?` when expecting `;`

    /tmp/tmpao1zju73.d(92): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpao1zju73.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length ==\
    \ 0) {\n        return null;\n    }\n    int maxLength = 0;\n    string maxString\
    \ = null;\n    for (string s in strings) {\n        if (s.length() > maxLength)\
    \ {\n            maxLength = s.length();\n            maxString = s;\n       \
    \ }\n    }\n    return maxString;\n}\n/*\n Out of list of strings, return the\
    \ longest one. Return the first one in case of multiple\n    strings of the same\
    \ length. Return None in case the input list is empty.\n                \n*/\n\
    Nullable!(string) longest(string[] strings, int lengthLimit) \n{\n    if (strings.length\
    \ == 0) {\n        return null;\n    }\n    int maxLength = 0;\n    string maxString\
    \ = null;\n    for (string s in strings) {\n        if (s.length() > lengthLimit)\
    \ {\n            maxLength = s.length();\n            maxString = s;\n       \
    \ }\n    }\n    return maxString;\n}\n/*\n Out of list of strings, return the\
    \ longest one. Return the first one in case of multiple\n    strings of the same\
    \ length. Return None in case the input list is empty.\n                \n*/\n\
    Nullable!(string) longest(string[] strings, int lengthLimit, int maxLength) \n\
    {\n    if (strings.length == 0) {\n        return null;\n    }\n    int maxLength\
    \ = 0;\n    string maxString = null;\n    for (string s in strings) {\n      \
    \  if (s.length() > lengthLimit) {\n            maxLength = s.length();\n    \
    \        maxString = s;\n        }\n    }\n    return maxString;\n}\n/*\n Out\
    \ of list of strings, return the longest one. Return the first one in case of\
    \ multiple\n    strings of the same length. Return None in case the input list\
    \ is empty.\n                \n*/\nNullable!(string) longest(string[] strings,\
    \ int lengthLimit, int maxLength, int maxCount) \n{\n    if (strings.length ==\
    \ 0) {\n        return null;\n    }\n    int maxLength = 0;\n    string maxString\
    \ = null;\n    for (string s in strings) {\n        if (s.length() > lengthLimit)\
    \ {\n            maxLength = s.length();\n            maxString = s;\n       \
    \ }\n        if (maxLength > maxCount) {\n            return maxString;\n    \
    \    }\n    }\n    return maxString;\n}\n/*\n Out of list of strings, return the\
    \ longest one. Return the first one in case of multiple\n    strings of the same\
    \ length. Return None in case the input list is empty.\n                \n*/\n\
    Nullable!(string) longest(string[] strings, int lengthLimit, int maxLength, int\
    \ maxCount, int maxCountLimit) \n{\n    if (strings.length == 0) {\n        return\
    \ null;\n    }\n    int maxLength = 0;\n    string maxString = null;\n    for\
    \ (string s in strings) {\n        if (s.length() > lengthLimit) {\n         \
    \   maxLength = s.length();\n            maxString = s;\n        }\n        if\
    \ (maxLength > maxCount) {\n            return maxString;\nunittest\n{\n    alias\
    \ candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnnwoodzl.d(15): Error: semicolon expected, not `in`

    /tmp/tmpnnwoodzl.d(15): Error: expression expected, not `in`

    /tmp/tmpnnwoodzl.d(15): Error: found `strings` when expecting `;` following `for`
    condition

    /tmp/tmpnnwoodzl.d(35): Error: semicolon expected, not `in`

    /tmp/tmpnnwoodzl.d(35): Error: expression expected, not `in`

    /tmp/tmpnnwoodzl.d(35): Error: found `strings` when expecting `;` following `for`
    condition

    /tmp/tmpnnwoodzl.d(55): Error: semicolon expected, not `in`

    /tmp/tmpnnwoodzl.d(55): Error: expression expected, not `in`

    /tmp/tmpnnwoodzl.d(55): Error: found `strings` when expecting `;` following `for`
    condition

    /tmp/tmpnnwoodzl.d(75): Error: semicolon expected, not `in`

    /tmp/tmpnnwoodzl.d(75): Error: expression expected, not `in`

    /tmp/tmpnnwoodzl.d(75): Error: found `strings` when expecting `;` following `for`
    condition

    /tmp/tmpnnwoodzl.d(98): Error: semicolon expected, not `in`

    /tmp/tmpnnwoodzl.d(98): Error: expression expected, not `in`

    /tmp/tmpnnwoodzl.d(98): Error: found `strings` when'
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    var maxLen = strings.length;\n\
    \    var maxLenString = strings[0];\n    for(var i = 1; i < strings.length; ++i)\n\
    \    {\n        var len = strings[i].length;\n        if(len > maxLen)\n     \
    \   {\n            maxLen = len;\n            maxLenString = strings[i];\n   \
    \     }\n    }\n    return maxLenString;\n}\nunittest\n{\n    alias candidate\
    \ = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpg7zxmvbc.d(10): Error: undefined identifier `var`

    /tmp/tmpg7zxmvbc.d(11): Error: undefined identifier `var`

    /tmp/tmpg7zxmvbc.d(12): Error: undefined identifier `var`

    /tmp/tmpg7zxmvbc.d(14): Error: undefined identifier `var`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg7zxmvbc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164476
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    var maxLength = 0;\n\
    \    var maxString = \"\";\n    foreach(var s in strings) {\n        if(s.length()\
    \ > maxLength) {\n            maxLength = s.length();\n            maxString =\
    \ s;\n        }\n    }\n    return maxString;\n}\nunittest\n{\n    alias candidate\
    \ = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa4k91imw.d(12): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa4k91imw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164474
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    var longest = strings[0];\n\
    \    var longestLength = longest.length;\n    for(var i = 1; i < strings.length;\
    \ ++i)\n    {\n        var s = strings[i];\n        if(s.length != longestLength)\n\
    \        {\n            return longest;\n        }\n        if(s.length < longestLength)\n\
    \        {\n            longest = s;\n            longestLength = s.length;\n\
    \        }\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate =\
    \ longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpxjf4h6u7.d(10): Error: undefined identifier `var`

    /tmp/tmpxjf4h6u7.d(11): Error: undefined identifier `var`

    /tmp/tmpxjf4h6u7.d(12): Error: undefined identifier `var`

    /tmp/tmpxjf4h6u7.d(14): Error: undefined identifier `var`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxjf4h6u7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164476
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    var maxLength = 0;\n\
    \    var maxString = \"\";\n    foreach(string; strings) {\n        if(string.length\
    \ > maxLength) {\n            maxLength = string.length;\n            maxString\
    \ = string;\n        }\n    }\n    return maxString;\n}\nunittest\n{\n    alias\
    \ candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpeps740t8.d(10): Error: undefined identifier `var`

    /tmp/tmpeps740t8.d(11): Error: undefined identifier `var`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpeps740t8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach(string; strings)\
    \ {\n        if(string.length > longest.length)\n            longest = string;\n\
    \    }\n    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\n\
    {\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n\
    {\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpg1qfhgeu.d(11): Error: function `tmpg1qfhgeu.longest(string[] strings)`
    is not callable using argument types `()`

    /tmp/tmpg1qfhgeu.d(12): Error: function `tmpg1qfhgeu.longest(string[] strings)`
    is not callable using argument types `(string)`

    /tmp/tmpg1qfhgeu.d(12):        cannot pass argument `string` of type `string`
    to parameter `string[] strings`

    /tmp/tmpg1qfhgeu.d(14): Error: function `tmpg1qfhgeu.longest(string[] strings)`
    is not callable using argument types `()`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg1qfhgeu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach(string s in strings)\
    \ {\n        if(s.length() > longest.length()) {\n            longest = s;\n \
    \       }\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqn25pd4r.d(10): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqn25pd4r.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length ==\
    \ 0) {\n        return null;\n    }\n    \n    int maxLength = 0;\n    string\
    \ maxString = null;\n    \n    for (string s in strings) {\n        int length\
    \ = s.length();\n        if (length > maxLength) {\n            maxLength = length;\n\
    \            maxString = s;\n        }\n    }\n    \n    return maxString;\n}\n\
    unittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpocm4o_ow.d(17): Error: semicolon expected, not `in`

    /tmp/tmpocm4o_ow.d(17): Error: expression expected, not `in`

    /tmp/tmpocm4o_ow.d(17): Error: found `strings` when expecting `;` following `for`
    condition

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpocm4o_ow.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n\tint? maxLength = null;\n\
    \tforeach(string; strings) {\n\t\tint length = string.length;\n\t\tif(maxLength\
    \ == null || length > maxLength.value)\n\t\t\tmaxLength = length;\n\t}\n\treturn\
    \ maxLength;\n}\n/*\n Out of list of strings, return the longest one. Return the\
    \ first one in case of multiple\n    strings of the same length. Return None in\
    \ case the input list is empty.\n                \n*/\nNullable!(string) longest(string[]\
    \ strings, int lengthLimit) \n{\n\tint? maxLength = null;\n\tforeach(string; strings)\
    \ {\n\t\tint length = string.length;\n\t\tif(maxLength == null || length > maxLength.value)\n\
    \t\t\tmaxLength = length;\n\t\tif(length >= lengthLimit)\n\t\t\tbreak;\n\t}\n\t\
    return maxLength;\n}\n/*\n Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \n*/\nNullable!(string) longest(string[]\
    \ strings, int lengthLimit, int maxLength) \n{\n\tint? maxLength = null;\n\tforeach(string;\
    \ strings) {\n\t\tint length = string.length;\n\t\tif(maxLength == null || length\
    \ > maxLength.value)\n\t\t\tmaxLength = length;\n\t\tif(length >= lengthLimit)\n\
    \t\t\tbreak;\n\t}\n\treturn maxLength;\n}\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings, int lengthLimit, int maxLength,\
    \ int minLength) \n{\n\tint? maxLength = null;\n\tforeach(string; strings) {\n\
    \t\tint length = string.length;\n\t\tif(maxLength == null || length > maxLength.value)\n\
    \t\t\tmaxLength = length;\n\t\tif(length >= lengthLimit && length < minLength)\n\
    \t\t\tbreak;\n\t}\n\treturn maxLength;\n}\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings, int lengthLimit, int maxLength,\
    \ int minLength, int maxCount) \n{\n\tint? maxLength = null;\n\tforeach(string;\
    \ strings) {\n\t\tint length = string.length;\n\t\tif(maxLength == null || length\
    \ > maxLength.value)\n\t\t\tmaxLength = length;\n\t\tif(length >= lengthLimit\
    \ && length < minLength && length < maxCount)\n\t\t\tbreak;\n\t}\n\treturn maxLength;\n\
    }\n/*\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result\
    \ = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result\
    \ = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get\
    \ == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\"\
    , \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get ==\
    \ \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpodnbzg7e.d(10): Error: no identifier for declarator `int`

    /tmp/tmpodnbzg7e.d(10): Error: found `?` instead of statement

    /tmp/tmpodnbzg7e.d(25): Error: no identifier for declarator `int`

    /tmp/tmpodnbzg7e.d(25): Error: found `?` instead of statement

    /tmp/tmpodnbzg7e.d(42): Error: no identifier for declarator `int`

    /tmp/tmpodnbzg7e.d(42): Error: found `?` instead of statement

    /tmp/tmpodnbzg7e.d(59): Error: no identifier for declarator `int`

    /tmp/tmpodnbzg7e.d(59): Error: found `?` instead of statement

    /tmp/tmpodnbzg7e.d(76): Error: no identifier for declarator `int`

    /tmp/tmpodnbzg7e.d(76): Error: found `?` instead of statement

    /tmp/tmpodnbzg7e.d(86): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpodnbzg7e.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach(string; strings)\
    \ {\n        if(string.length > longest.length)\n            longest = string;\n\
    \    }\n    return longest;\n}\n/*\n Out of list of strings, return the longest\
    \ one. Return the first one in case of multiple\n    strings of the same length.\
    \ Return None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int start) \n{\n    foreach(string; strings) {\n \
    \       if(string.length > longest.length)\n            longest = string;\n  \
    \  }\n    return longest;\n}\n/*\n Out of list of strings, return the longest\
    \ one. Return the first one in case of multiple\n    strings of the same length.\
    \ Return None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int start, int end) \n{\n    foreach(string; strings)\
    \ {\n        if(string.length > longest.length)\n            longest = string;\n\
    \    }\n    return longest;\n}\n/*\n Out of list of strings, return the longest\
    \ one. Return the first one in case of multiple\n    strings of the same length.\
    \ Return None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int start, int end, int step) \n{\n    foreach(string;\
    \ strings) {\n        if(string.length > longest.length)\n            longest\
    \ = string;\n    }\n    return longest;\n}\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings, int start, int end, int step,\
    \ char separator) \n{\n    foreach(string; strings) {\n        if(string.length\
    \ > longest.length)\n            longest = string;\n    }\n    return longest;\n\
    }\n/*\n Out of list of strings, return the longest one. Return the first one in\
    \ case of multiple\n    strings of the same length. Return None in case the input\
    \ list is empty.\n                \n*/\nNullable!(string) longest(string[] strings,\
    \ int start, int end, int step, char separator, char delimiter) \n{\n    foreach(string;\
    \ strings) {\n        if(string.length > longest.length)\n            longest\
    \ = string;\n    }\n    return longest;\n}\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings, int start, int end, int step,\
    \ char separator, char delimiter, char escape) \n{\n    foreach(string; strings)\
    \ {\n        if(string\nunittest\n{\n    alias candidate = longest;\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpb0iamqhl.d(90): Error: found `unittest` when expecting `)`

    /tmp/tmpb0iamqhl.d(110): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmpb0iamqhl.d(110): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb0iamqhl.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    int? maxLength = null;\n\
    \    foreach (string s in strings) {\n        if (maxLength == null || s.length()\
    \ > maxLength.value) {\n            maxLength = s.length;\n        }\n    }\n\
    \    return maxLength;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n\
    \        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n\
    \        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpt3xwwryk.d(10): Error: no identifier for declarator `int`

    /tmp/tmpt3xwwryk.d(10): Error: found `?` instead of statement

    /tmp/tmpt3xwwryk.d(11): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt3xwwryk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    var longest = strings[0];\n\
    \    var longestLength = longest.length;\n    for(var i = 1; i < strings.length;\
    \ ++i)\n    {\n        var s = strings[i];\n        if(s.length == longestLength)\n\
    \        {\n            longest = s;\n        }\n    }\n    return longest;\n\
    }\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwp10r43v.d(10): Error: undefined identifier `var`

    /tmp/tmpwp10r43v.d(11): Error: undefined identifier `var`

    /tmp/tmpwp10r43v.d(12): Error: undefined identifier `var`

    /tmp/tmpwp10r43v.d(14): Error: undefined identifier `var`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwp10r43v.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164476
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach(string; strings)\
    \ {\n        if(string.length > longest.length)\n            longest = string;\n\
    \    }\n    return longest;\n}\n/*\n Out of list of strings, return the longest\
    \ one. Return the first one in case of multiple\n    strings of the same length.\
    \ Return None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int startIndex) \n{\n    foreach(string; strings)\
    \ {\n        if(string.length > longest.length)\n            longest = string;\n\
    \    }\n    return longest;\n}\n/*\n Out of list of strings, return the longest\
    \ one. Return the first one in case of multiple\n    strings of the same length.\
    \ Return None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int startIndex, int endIndex) \n{\n    foreach(string;\
    \ strings) {\n        if(string.length > longest.length)\n            longest\
    \ = string;\n    }\n    return longest;\n}\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings, char character) \n{\n    foreach(string;\
    \ strings) {\n        if(string.length > longest.length)\n            longest\
    \ = string;\n    }\n    return longest;\n}\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings, char character, int startIndex)\
    \ \n{\n    foreach(string; strings) {\n        if(string.length > longest.length)\n\
    \            longest = string;\n    }\n    return longest;\n}\n/*\n Out of list\
    \ of strings, return the longest one. Return the first one in case of multiple\n\
    \    strings of the same length. Return None in case the input list is empty.\n\
    \                \n*/\nNullable!(string) longest(string[] strings, char character,\
    \ int startIndex, int endIndex) \n{\n    foreach(string; strings) {\n        if(string.length\
    \ > longest.length)\n            longest = string;\n    }\n    return longest;\n\
    }\n/*\n Out of list of strings, return the longest one. Return the first one in\
    \ case of multiple\n    strings of the same length. Return None in case the input\
    \ list is empty.\n                \n*/\nNullable!(string) longest(string[] strings,\
    \ char character, int startIndex, int endIndex, bool caseSensitive) \n{\n    foreach(string;\
    \ strings) {\n        if(string.length > longest.length)\n\nunittest\n{\n    alias\
    \ candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpt5r9f_6c.d(91): Error: found `unittest` instead of statement

    /tmp/tmpt5r9f_6c.d(111): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt5r9f_6c.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164474
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    int? maxLength = null;\n\
    \    foreach(string? s in strings) {\n        if(maxLength == null || s.length()\
    \ > maxLength) {\n            maxLength = s.length;\n        }\n    }\n    return\
    \ maxLength;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto\
    \ result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull &&\
    \ result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\"\
    , \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get\
    \ == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp1j63q7wo.d(10): Error: no identifier for declarator `int`

    /tmp/tmp1j63q7wo.d(10): Error: found `?` instead of statement

    /tmp/tmp1j63q7wo.d(11): Error: no identifier for declarator `string`

    /tmp/tmp1j63q7wo.d(11): Error: found `?` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1j63q7wo.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    int? maxLength = null;\n\
    \    foreach (string s in strings) {\n        if (maxLength == null || s.length()\
    \ > maxLength.Value()) {\n            maxLength = s.length;\n        }\n    }\n\
    \    return maxLength;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n\
    \        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n\
    \        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmz_3f32k.d(10): Error: no identifier for declarator `int`

    /tmp/tmpmz_3f32k.d(10): Error: found `?` instead of statement

    /tmp/tmpmz_3f32k.d(11): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmz_3f32k.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164474
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach(string; strings)\
    \ {\n        if(string.length > longest.length)\n            longest = string;\n\
    \    }\n    return longest;\n}\n/*\n Out of list of strings, return the longest\
    \ one. Return the first one in case of multiple\n    strings of the same length.\
    \ Return None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int start) \n{\n    foreach(string; strings) {\n \
    \       if(string.length > longest.length)\n            longest = string;\n  \
    \  }\n    return longest;\n}\n/*\n Out of list of strings, return the longest\
    \ one. Return the first one in case of multiple\n    strings of the same length.\
    \ Return None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int start, int end) \n{\n    foreach(string; strings)\
    \ {\n        if(string.length > longest.length)\n            longest = string;\n\
    \    }\n    return longest;\n}\n/*\n Out of list of strings, return the longest\
    \ one. Return the first one in case of multiple\n    strings of the same length.\
    \ Return None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int start, int end, int step) \n{\n    foreach(string;\
    \ strings) {\n        if(string.length > longest.length)\n            longest\
    \ = string;\n    }\n    return longest;\n}\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings, int start, int end, int step,\
    \ string separator) \n{\n    foreach(string; strings) {\n        if(string.length\
    \ > longest.length)\n            longest = string;\n    }\n    return longest;\n\
    }\n/*\n Out of list of strings, return the longest one. Return the first one in\
    \ case of multiple\n    strings of the same length. Return None in case the input\
    \ list is empty.\n                \n*/\nNullable!(string) longest(string[] strings,\
    \ int start, int end, int step, string separator, int startIndex) \n{\n    foreach(string;\
    \ strings) {\n        if(string.length > longest.length)\n            longest\
    \ = string;\n    }\n    return longest;\n}\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings, int start, int end, int step,\
    \ string separator, int startIndex, int endIndex) \n{\n    foreach(string; strings)\
    \ {\n        if(string\nunittest\n{\n    alias candidate = longest;\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp24go1uc9.d(90): Error: found `unittest` when expecting `)`

    /tmp/tmp24go1uc9.d(110): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmp24go1uc9.d(110): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp24go1uc9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    var longest = strings[0];\n\
    \    for(var i = 1; i < strings.length; ++i)\n    {\n        if(strings[i].length\
    \ >= longest.length)\n        {\n            longest = strings[i];\n        }\n\
    \    }\n    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\n\
    {\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n\
    {\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpidmewllu.d(10): Error: undefined identifier `var`

    /tmp/tmpidmewllu.d(11): Error: undefined identifier `var`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpidmewllu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach (string s in\
    \ strings) {\n        if (s.length() > longest.length)\n            longest =\
    \ s;\n    }\n    return longest;\n}\n/*\n Out of list of strings, return the longest\
    \ one. Return the first one in case of multiple\n    strings of the same length.\
    \ Return None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int start) \n{\n    foreach (string s in strings)\
    \ {\n        if (s.length() > longest.length)\n            longest = s;\n    }\n\
    \    return longest;\n}\n/*\n Out of list of strings, return the longest one.\
    \ Return the first one in case of multiple\n    strings of the same length. Return\
    \ None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int start, int end) \n{\n    foreach (string s in\
    \ strings) {\n        if (s.length() > longest.length)\n            longest =\
    \ s;\n    }\n    return longest;\n}\n/*\n Out of list of strings, return the longest\
    \ one. Return the first one in case of multiple\n    strings of the same length.\
    \ Return None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int start, int end, int step) \n{\n    foreach (string\
    \ s in strings) {\n        if (s.length() > longest.length)\n            longest\
    \ = s;\n    }\n    return longest;\n}\n/*\n Out of list of strings, return the\
    \ longest one. Return the first one in case of multiple\n    strings of the same\
    \ length. Return None in case the input list is empty.\n                \n*/\n\
    Nullable!(string) longest(string[] strings, int start, int end, int step, string\
    \ separator) \n{\n    foreach (string s in strings) {\n        if (s.length()\
    \ > longest.length)\n            longest = s;\n    }\n    return longest;\n}\n\
    /*\n Out of list of strings, return the longest one. Return the first one in case\
    \ of multiple\n    strings of the same length. Return None in case the input list\
    \ is empty.\n                \n*/\nNullable!(string) longest(string[] strings,\
    \ int start, int end, int step, string separator, int startIndex) \n{\n    foreach\
    \ (string s in strings) {\n        if (s.length() > longest.length)\n        \
    \    longest = s;\n    }\n    return longest;\n}\n/*\n Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return None in case the input list is empty.\n         \
    \       \n*/\nNullable!(string) longest(string[] strings, int start, int end,\
    \ int step, string separator, int startIndex, int endIndex) \n{\n    foreach (string\
    \ s in strings) {\n        if (s.length\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_dpzx0is.d(10): Error: found `in` when expecting `;`

    /tmp/tmp_dpzx0is.d(23): Error: found `in` when expecting `;`

    /tmp/tmp_dpzx0is.d(36): Error: found `in` when expecting `;`

    /tmp/tmp_dpzx0is.d(49): Error: found `in` when expecting `;`

    /tmp/tmp_dpzx0is.d(62): Error: found `in` when expecting `;`

    /tmp/tmp_dpzx0is.d(75): Error: found `in` when expecting `;`

    /tmp/tmp_dpzx0is.d(88): Error: found `in` when expecting `;`

    /tmp/tmp_dpzx0is.d(90): Error: found `unittest` when expecting `)`

    /tmp/tmp_dpzx0is.d(110): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmp_dpzx0is.d(110): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_dpzx0is.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach (string s in\
    \ strings) {\n        if (s.length() > longest.length)\n            longest =\
    \ s;\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4dg4o4dz.d(10): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4dg4o4dz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164474
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    int? maxLength = null;\n\
    \    foreach (string s in strings) {\n        if (maxLength == null || s.length()\
    \ > maxLength.Value()) {\n            maxLength = s.length;\n        }\n    }\n\
    \    return maxLength;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n\
    \        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n\
    \        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmz_3f32k.d(10): Error: no identifier for declarator `int`

    /tmp/tmpmz_3f32k.d(10): Error: found `?` instead of statement

    /tmp/tmpmz_3f32k.d(11): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmz_3f32k.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164474
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach(string; strings)\n\
    \    {\n        if(string.length > longest.length)\n        {\n            longest\
    \ = string;\n        }\n    }\n    return longest;\n}\nunittest\n{\n    alias\
    \ candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmtjdk7vo.d(12): Error: function `tmpmtjdk7vo.longest(string[] strings)`
    is not callable using argument types `()`

    /tmp/tmpmtjdk7vo.d(14): Error: function `tmpmtjdk7vo.longest(string[] strings)`
    is not callable using argument types `(string)`

    /tmp/tmpmtjdk7vo.d(14):        cannot pass argument `string` of type `string`
    to parameter `string[] strings`

    /tmp/tmpmtjdk7vo.d(17): Error: function `tmpmtjdk7vo.longest(string[] strings)`
    is not callable using argument types `()`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmtjdk7vo.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164476
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach(string; strings)\
    \ {\n        if(string.length > longest.length) longest = string;\n    }\n   \
    \ return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n     \
    \   auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n   \
    \     auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6wvpkjwa.d(11): Error: function `tmp6wvpkjwa.longest(string[] strings)`
    is not callable using argument types `()`

    /tmp/tmp6wvpkjwa.d(11): Error: function `tmp6wvpkjwa.longest(string[] strings)`
    is not callable using argument types `(string)`

    /tmp/tmp6wvpkjwa.d(11):        cannot pass argument `string` of type `string`
    to parameter `string[] strings`

    /tmp/tmp6wvpkjwa.d(13): Error: function `tmp6wvpkjwa.longest(string[] strings)`
    is not callable using argument types `()`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6wvpkjwa.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164476
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    var maxLength = 0;\n\
    \    var maxString = \"\";\n    foreach(var s in strings)\n    {\n        if(s.length()\
    \ > maxLength)\n        {\n            maxLength = s.length();\n            maxString\
    \ = s;\n        }\n    }\n    return maxString;\n}\n/*\n Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return None in case the input list is empty.\n         \
    \       \n*/\nNullable!(string) longest(string[] strings, int startIndex) \n{\n\
    \    var maxLength = 0;\n    var maxString = \"\";\n    foreach(var s in strings)\n\
    \    {\n        if(s.length() > maxLength)\n        {\n            maxLength =\
    \ s.length();\n            maxString = s;\n        }\n    }\n    return maxString;\n\
    }\n/*\n Out of list of strings, return the longest one. Return the first one in\
    \ case of multiple\n    strings of the same length. Return None in case the input\
    \ list is empty.\n                \n*/\nNullable!(string) longest(string[] strings,\
    \ int startIndex, int endIndex) \n{\n    var maxLength = 0;\n    var maxString\
    \ = \"\";\n    foreach(var s in strings)\n    {\n        if(s.length() > maxLength)\n\
    \        {\n            maxLength = s.length();\n            maxString = s;\n\
    \        }\n    }\n    return maxString;\n}\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings, char separator) \n{\n    var maxLength\
    \ = 0;\n    var maxString = \"\";\n    foreach(var s in strings)\n    {\n    \
    \    if(s.length() > maxLength)\n        {\n            maxLength = s.length();\n\
    \            maxString = s;\n        }\n    }\n    return maxString;\n}\n/*\n\
    \ Out of list of strings, return the longest one. Return the first one in case\
    \ of multiple\n    strings of the same length. Return None in case the input list\
    \ is empty.\n                \n*/\nNullable!(string) longest(string[] strings,\
    \ char separator, int startIndex) \n{\n    var maxLength = 0;\n    var maxString\
    \ = \"\";\n    foreach(var s in strings)\n    {\n        if(s.length() > maxLength)\n\
    \        {\n            maxLength = s.length();\n            maxString = s;\n\
    \        }\n    }\n    return maxString;\n}\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings, char separator, int startIndex,\
    \ int endIndex) \n{\n    var maxLength = 0;\n    var \nunittest\n{\n    alias\
    \ candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7jw1ltl4.d(12): Error: found `in` when expecting `;`

    /tmp/tmp7jw1ltl4.d(31): Error: found `in` when expecting `;`

    /tmp/tmp7jw1ltl4.d(50): Error: found `in` when expecting `;`

    /tmp/tmp7jw1ltl4.d(69): Error: found `in` when expecting `;`

    /tmp/tmp7jw1ltl4.d(88): Error: found `in` when expecting `;`

    /tmp/tmp7jw1ltl4.d(107): Error: found `unittest` when expecting `;` following
    statement

    /tmp/tmp7jw1ltl4.d(127): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7jw1ltl4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    int? maxLength = null;\n\
    \    foreach(string[] strings in strings)\n    {\n        int length = strings.length;\n\
    \        if (maxLength == null || length > maxLength)\n        {\n           \
    \ maxLength = length;\n        }\n    }\n    return maxLength;\n}\nunittest\n\
    {\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpk1pvx9wn.d(10): Error: no identifier for declarator `int`

    /tmp/tmpk1pvx9wn.d(10): Error: found `?` instead of statement

    /tmp/tmpk1pvx9wn.d(11): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk1pvx9wn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach(string; strings)\
    \ {\n        if(string.length() > longest.length()) {\n            longest = string;\n\
    \        }\n    }\n    return longest;\n}\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings, int startIndex) \n{\n    foreach(string;\
    \ strings) {\n        if(string.length() > longest.length()) {\n            longest\
    \ = string;\n        }\n    }\n    return longest;\n}\n/*\n Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return None in case the input list is empty.\n         \
    \       \n*/\nNullable!(string) longest(string[] strings, int startIndex, int\
    \ endIndex) \n{\n    foreach(string; strings) {\n        if(string.length() >\
    \ longest.length()) {\n            longest = string;\n        }\n    }\n    return\
    \ longest;\n}\n/*\n Out of list of strings, return the longest one. Return the\
    \ first one in case of multiple\n    strings of the same length. Return None in\
    \ case the input list is empty.\n                \n*/\nNullable!(string) longest(string[]\
    \ strings, char character) \n{\n    foreach(string; strings) {\n        if(string.length()\
    \ > longest.length()) {\n            longest = string;\n        }\n    }\n   \
    \ return longest;\n}\n/*\n Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \n*/\nNullable!(string) longest(string[]\
    \ strings, char character, int startIndex) \n{\n    foreach(string; strings) {\n\
    \        if(string.length() > longest.length()) {\n            longest = string;\n\
    \        }\n    }\n    return longest;\n}\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings, char character, int startIndex,\
    \ int endIndex) \n{\n    foreach(string; strings) {\n        if(string.length()\
    \ > longest.length()) {\n            longest = string;\n        }\n    }\n   \
    \ return longest;\n}\n/*\n Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \n*/\nNullable!(string) longest(string[]\
    \ strings, char character, int startIndex, int endIndex, bool caseSensitive\n\
    unittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpuiz919f2.d(93): Error: found `unittest` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuiz919f2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length ==\
    \ 0) {\n        return null;\n    }\n    var maxLen = strings[0].length;\n   \
    \ for (var i = 1; i < strings.length; i++) {\n        if (strings[i].length >=\
    \ maxLen) {\n            maxLen = strings[i].length;\n        }\n    }\n    return\
    \ maxLen > 0 ? strings[0] : null;\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4z9yqj4j.d(13): Error: undefined identifier `var`

    /tmp/tmp4z9yqj4j.d(14): Error: undefined identifier `var`

    /tmp/tmp4z9yqj4j.d(11): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4z9yqj4j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164476
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach(string; strings)\
    \ {\n        if(string.length > longest.length)\n            longest = string;\n\
    \    }\n    return longest;\n}\n/*\n Out of list of strings, return the longest\
    \ one. Return the first one in case of multiple\n    strings of the same length.\
    \ Return None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int startIndex) \n{\n    foreach(string; strings)\
    \ {\n        if(string.length > longest.length)\n            longest = string;\n\
    \    }\n    return longest;\n}\n/*\n Out of list of strings, return the longest\
    \ one. Return the first one in case of multiple\n    strings of the same length.\
    \ Return None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int startIndex, int endIndex) \n{\n    foreach(string;\
    \ strings) {\n        if(string.length > longest.length)\n            longest\
    \ = string;\n    }\n    return longest;\n}\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings, char character) \n{\n    foreach(string;\
    \ strings) {\n        if(string.length > longest.length)\n            longest\
    \ = string;\n    }\n    return longest;\n}\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings, char character, int startIndex)\
    \ \n{\n    foreach(string; strings) {\n        if(string.length > longest.length)\n\
    \            longest = string;\n    }\n    return longest;\n}\n/*\n Out of list\
    \ of strings, return the longest one. Return the first one in case of multiple\n\
    \    strings of the same length. Return None in case the input list is empty.\n\
    \                \n*/\nNullable!(string) longest(string[] strings, char character,\
    \ int startIndex, int endIndex) \n{\n    foreach(string; strings) {\n        if(string.length\
    \ > longest.length)\n            longest = string;\n    }\n    return longest;\n\
    }\n/*\n Out of list of strings, return the longest one. Return the first one in\
    \ case of multiple\n    strings of the same length. Return None in case the input\
    \ list is empty.\n                \n*/\nNullable!(string) longest(string[] strings,\
    \ char character, int startIndex, int endIndex, bool caseSensitive) \n{\n    foreach(string;\
    \ strings) {\n        if(string.length > longest.length)\n\nunittest\n{\n    alias\
    \ candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpt5r9f_6c.d(91): Error: found `unittest` instead of statement

    /tmp/tmpt5r9f_6c.d(111): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt5r9f_6c.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164474
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach(string; strings)\
    \ {\n        if(string.length() > longest.length())\n            longest = string;\n\
    \    }\n    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\n\
    {\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n\
    {\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfmyf59yv.d(11): Error: no property `length` for type `string`

    /tmp/tmpfmyf59yv.d(11): Error: function `tmpfmyf59yv.longest(string[] strings)`
    is not callable using argument types `()`

    /tmp/tmpfmyf59yv.d(12): Error: function `tmpfmyf59yv.longest(string[] strings)`
    is not callable using argument types `(string)`

    /tmp/tmpfmyf59yv.d(12):        cannot pass argument `string` of type `string`
    to parameter `string[] strings`

    /tmp/tmpfmyf59yv.d(14): Error: function `tmpfmyf59yv.longest(string[] strings)`
    is not callable using argument types `()`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfmyf59yv.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    var maxLength = 0;\n\
    \    var maxString = \"\";\n    foreach(var s in strings)\n    {\n        if(s.length()\
    \ > maxLength)\n        {\n            maxLength = s.length();\n            maxString\
    \ = s;\n        }\n    }\n    return maxString;\n}\nunittest\n{\n    alias candidate\
    \ = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpm5w5mm0f.d(12): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpm5w5mm0f.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    int? maxLength = null;\n\
    \    foreach(string? s in strings) {\n        if (maxLength == null || s.length()\
    \ > maxLength) {\n            maxLength = s.length();\n        }\n    }\n    return\
    \ maxLength;\n}\n/*\n Out of list of strings, return the longest one. Return the\
    \ first one in case of multiple\n    strings of the same length. Return None in\
    \ case the input list is empty.\n                \n*/\nNullable!(string) longest(string[]\
    \ strings, int maxLength) \n{\n    foreach(string? s in strings) {\n        if\
    \ (s.length() > maxLength) {\n            maxLength = s.length();\n        }\n\
    \    }\n    return maxLength;\n}\n/*\n Out of list of strings, return the longest\
    \ one. Return the first one in case of multiple\n    strings of the same length.\
    \ Return None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int maxLength, int minLength) \n{\n    foreach(string?\
    \ s in strings) {\n        if (s.length() > maxLength && s.length() < minLength)\
    \ {\n            maxLength = s.length();\n        }\n    }\n    return maxLength;\n\
    }\n/*\n Out of list of strings, return the longest one. Return the first one in\
    \ case of multiple\n    strings of the same length. Return None in case the input\
    \ list is empty.\n                \n*/\nNullable!(string) longest(string[] strings,\
    \ int maxLength, int minLength, int maxLength) \n{\n    foreach(string? s in strings)\
    \ {\n        if (s.length() > maxLength && s.length() < minLength && s.length()\
    \ > maxLength) {\n            maxLength = s.length();\n        }\n    }\n    return\
    \ maxLength;\n}\n/*\n Out of list of strings, return the longest one. Return the\
    \ first one in case of multiple\n    strings of the same length. Return None in\
    \ case the input list is empty.\n                \n*/\nNullable!(string) longest(string[]\
    \ strings, int maxLength, int minLength, int maxLength, int minLength) \n{\n \
    \   foreach(string? s in strings) {\n        if (s.length() > maxLength && s.length()\
    \ < minLength && s.length() > maxLength && s.length() < minLength) {\n       \
    \     maxLength = s.length();\n        }\n    }\n    return maxLength;\n}\n/*\n\
    \ Out of list of strings, return the longest one. Return the first one in case\
    \ of multiple\n    strings of the same length. Return None in case the input list\
    \ is empty.\n                \n*/\nNullable!(string) longest(string[] strings,\
    \ int maxLength, int minLength, int maxLength, int minLength, int maxLength) \n\
    {\n    foreach(string? s in strings) {\n        if (s.length() > maxLength &&\
    \ s.length() < minLength && s.length() > maxLength && \nunittest\n{\n    alias\
    \ candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpif35h2tq.d(10): Error: no identifier for declarator `int`

    /tmp/tmpif35h2tq.d(10): Error: found `?` instead of statement

    /tmp/tmpif35h2tq.d(11): Error: no identifier for declarator `string`

    /tmp/tmpif35h2tq.d(11): Error: found `?` when expecting `;`

    /tmp/tmpif35h2tq.d(25): Error: no identifier for declarator `string`

    /tmp/tmpif35h2tq.d(25): Error: found `?` when expecting `;`

    /tmp/tmpif35h2tq.d(39): Error: no identifier for declarator `string`

    /tmp/tmpif35h2tq.d(39): Error: found `?` when expecting `;`

    /tmp/tmpif35h2tq.d(53): Error: no identifier for declarator `string`

    /tmp/tmpif35h2tq.d(53): Error: found `?` when expecting `;`

    /tmp/tmpif35h2tq.d(67): Error: no identifier for declarator `string`

    /tmp/tmpif35h2tq.d(67): Error: found `?` when expecting `;`

    /tmp/tmpif35h2tq.d(81): Error: no identifier for declarator `string`

    /tmp/tmpif35h2tq.d(81): Error: found `?` when expecting `;`

    /tmp/tmpif35h2tq.d(83): Error: expression expected, not `unittest`

    /tmp/tmpif35h2tq.d(84): Error: found `{` when expecting'
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    int? maxLength = null;\n\
    \    foreach (string s in strings) {\n        int length = s.length();\n     \
    \   if (maxLength == null || length > maxLength.Value) {\n            maxLength\
    \ = length;\n        }\n    }\n    return maxLength;\n}\nunittest\n{\n    alias\
    \ candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpr7shf3y1.d(10): Error: no identifier for declarator `int`

    /tmp/tmpr7shf3y1.d(10): Error: found `?` instead of statement

    /tmp/tmpr7shf3y1.d(11): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr7shf3y1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length ==\
    \ 0)\n        return null;\n    \n    int maxLen = 0;\n    string maxString =\
    \ null;\n    \n    for (string s in strings) {\n        if (s.length() > maxLen)\
    \ {\n            maxLen = s.length();\n            maxString = s;\n        }\n\
    \    }\n    \n    return maxString;\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6xrgnir3.d(16): Error: semicolon expected, not `in`

    /tmp/tmp6xrgnir3.d(16): Error: expression expected, not `in`

    /tmp/tmp6xrgnir3.d(16): Error: found `strings` when expecting `;` following `for`
    condition

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6xrgnir3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    var longest = strings[0];\n\
    \    foreach(var s in strings)\n    {\n        if(s.length >= longest.length)\n\
    \        {\n            longest = s;\n        }\n    }\n    return longest;\n\
    }\n/*\n Out of list of strings, return the longest one. Return the first one in\
    \ case of multiple\n    strings of the same length. Return None in case the input\
    \ list is empty.\n                \n*/\nNullable!(string) longest(string[] strings,\
    \ int startIndex) \n{\n    var longest = strings[startIndex];\n    foreach(var\
    \ s in strings)\n    {\n        if(s.length >= longest.length)\n        {\n  \
    \          longest = s;\n        }\n    }\n    return longest;\n}\n/*\n Out of\
    \ list of strings, return the longest one. Return the first one in case of multiple\n\
    \    strings of the same length. Return None in case the input list is empty.\n\
    \                \n*/\nNullable!(string) longest(string[] strings, int startIndex,\
    \ int endIndex) \n{\n    var longest = strings[startIndex];\n    foreach(var s\
    \ in strings)\n    {\n        if(s.length >= longest.length)\n        {\n    \
    \        longest = s;\n        }\n    }\n    return longest;\n}\n/*\n Out of list\
    \ of strings, return the longest one. Return the first one in case of multiple\n\
    \    strings of the same length. Return None in case the input list is empty.\n\
    \                \n*/\nNullable!(string) longest(string[] strings, char separator)\
    \ \n{\n    var longest = strings[0];\n    foreach(var s in strings)\n    {\n \
    \       if(s.length >= longest.length)\n        {\n            longest = s;\n\
    \        }\n    }\n    return longest;\n}\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings, char separator, int startIndex)\
    \ \n{\n    var longest = strings[startIndex];\n    foreach(var s in strings)\n\
    \    {\n        if(s.length >= longest.length)\n        {\n            longest\
    \ = s;\n        }\n    }\n    return longest;\n}\n/*\n Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return None in case the input list is empty.\n         \
    \       \n*/\nNullable!(string) longest(string[] strings, char separator, int\
    \ startIndex, int endIndex) \n{\n    var longest = strings[startIndex];\n    foreach(var\
    \ s in strings)\n    {\n        if(s.length >= longest.length)\n        {\n  \
    \          longest = s;\n        }\n    }\n    return \nunittest\n{\n    alias\
    \ candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzaezt1fa.d(11): Error: found `in` when expecting `;`

    /tmp/tmpzaezt1fa.d(28): Error: found `in` when expecting `;`

    /tmp/tmpzaezt1fa.d(45): Error: found `in` when expecting `;`

    /tmp/tmpzaezt1fa.d(62): Error: found `in` when expecting `;`

    /tmp/tmpzaezt1fa.d(79): Error: found `in` when expecting `;`

    /tmp/tmpzaezt1fa.d(96): Error: found `in` when expecting `;`

    /tmp/tmpzaezt1fa.d(104): Error: expression expected, not `unittest`

    /tmp/tmpzaezt1fa.d(105): Error: found `{` when expecting `;` following `return`
    statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzaezt1fa.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach(string; strings)\
    \ {\n        if(string.length > longest.length)\n            longest = string;\n\
    \    }\n    return longest;\n}\n/*\n Out of list of strings, return the longest\
    \ one. Return the first one in case of multiple\n    strings of the same length.\
    \ Return None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int start) \n{\n    foreach(string; strings) {\n \
    \       if(string.length > longest.length)\n            longest = string;\n  \
    \  }\n    return longest;\n}\n/*\n Out of list of strings, return the longest\
    \ one. Return the first one in case of multiple\n    strings of the same length.\
    \ Return None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int start, int end) \n{\n    foreach(string; strings)\
    \ {\n        if(string.length > longest.length)\n            longest = string;\n\
    \    }\n    return longest;\n}\n/*\n Out of list of strings, return the longest\
    \ one. Return the first one in case of multiple\n    strings of the same length.\
    \ Return None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, char ch) \n{\n    foreach(string; strings) {\n   \
    \     if(string.length > longest.length)\n            longest = string;\n    }\n\
    \    return longest;\n}\n/*\n Out of list of strings, return the longest one.\
    \ Return the first one in case of multiple\n    strings of the same length. Return\
    \ None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, char ch, int start) \n{\n    foreach(string; strings)\
    \ {\n        if(string.length > longest.length)\n            longest = string;\n\
    \    }\n    return longest;\n}\n/*\n Out of list of strings, return the longest\
    \ one. Return the first one in case of multiple\n    strings of the same length.\
    \ Return None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, char ch, int start, int end) \n{\n    foreach(string;\
    \ strings) {\n        if(string.length > longest.length)\n            longest\
    \ = string;\n    }\n    return longest;\n}\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings, char ch, int start, int end, int\
    \ step) \n{\n    foreach(string; strings) {\n        if(string.length > longest.length)\n\
    \            longest = string;\n    }\n    return longest;\n}\n/*\nunittest\n\
    {\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmplooicba9.d(94): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplooicba9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach(string; strings)\
    \ {\n        if (string.length == strings.length)\n            return string;\n\
    \    }\n    return null;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n\
    \        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n\
    \        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvkrmtc72.d(12): Error: cannot implicitly convert expression `string`
    of type `string` to `Nullable!string`

    /tmp/tmpvkrmtc72.d(14): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvkrmtc72.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164476
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length ==\
    \ 0)\n        return null;\n    var longest = strings[0];\n    for (var i = 1;\
    \ i < strings.length; ++i)\n        if (strings[i].length < longest.length)\n\
    \            longest = strings[i];\n    return longest;\n}\nunittest\n{\n    alias\
    \ candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqrke6hoh.d(12): Error: undefined identifier `var`

    /tmp/tmpqrke6hoh.d(13): Error: undefined identifier `var`

    /tmp/tmpqrke6hoh.d(11): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqrke6hoh.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164476
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n\tassert(strings.length !=\
    \ 0);\n\t\n\tstring longest = strings[0];\n\t\n\tfor (int i = 1; i < strings.length;\
    \ ++i)\n\t{\n\t\tif (strings[i].length() > longest.length())\n\t\t{\n\t\t\tlongest\
    \ = strings[i];\n\t\t}\n\t}\n\t\n\treturn longest;\n}\nunittest\n{\n    alias\
    \ candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwk07m2vq.d(16): Error: no property `length` for type `string`

    /tmp/tmpwk07m2vq.d(16): Error: no property `length` for type `string`

    /tmp/tmpwk07m2vq.d(22): Error: cannot implicitly convert expression `longest`
    of type `string` to `Nullable!string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwk07m2vq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164476
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    var maxLength = 0;\n\
    \    var maxString = null;\n    foreach(var s in strings) {\n        var length\
    \ = s.length();\n        if(length > maxLength) {\n            maxLength = length;\n\
    \            maxString = s;\n        }\n    }\n    return maxString;\n}\nunittest\n\
    {\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp9xtj58ci.d(12): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp9xtj58ci.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    var maxLength = 0;\n\
    \    var maxString = \"\";\n    foreach(string; strings) {\n        if(string.length\
    \ > maxLength) {\n            maxLength = string.length;\n            maxString\
    \ = string;\n        }\n    }\n    return maxString;\n}\nunittest\n{\n    alias\
    \ candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpeps740t8.d(10): Error: undefined identifier `var`

    /tmp/tmpeps740t8.d(11): Error: undefined identifier `var`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpeps740t8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n\tint? maxLength = null;\n\
    \tforeach (string s in strings) {\n\t\tif (maxLength == null || s.length() > maxLength.Value())\
    \ {\n\t\t\tmaxLength = s.length;\n\t\t}\n\t}\n\treturn maxLength;\n}\nunittest\n\
    {\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpyomy54x1.d(10): Error: no identifier for declarator `int`

    /tmp/tmpyomy54x1.d(10): Error: found `?` instead of statement

    /tmp/tmpyomy54x1.d(11): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyomy54x1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164474
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach(string s in strings)\n\
    \    {\n        if(s.length() > longest.length)\n            longest = s;\n  \
    \  }\n    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\n\
    {\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n\
    {\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp68d8y45t.d(10): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp68d8y45t.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164474
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    int? maxLength = null;\n\
    \    foreach (string s in strings) {\n        if (maxLength == null || s.length()\
    \ > maxLength.value) {\n            maxLength = s.length;\n        }\n    }\n\
    \    return maxLength;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n\
    \        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n\
    \        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpt3xwwryk.d(10): Error: no identifier for declarator `int`

    /tmp/tmpt3xwwryk.d(10): Error: found `?` instead of statement

    /tmp/tmpt3xwwryk.d(11): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt3xwwryk.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach(string; strings)\
    \ {\n        if (string.length() > strings.length)\n            return string;\n\
    \    }\n    return null;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n\
    \        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n\
    \        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_qf7djou.d(11): Error: no property `length` for type `string`

    /tmp/tmp_qf7djou.d(12): Error: cannot implicitly convert expression `string` of
    type `string` to `Nullable!string`

    /tmp/tmp_qf7djou.d(14): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_qf7djou.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164476
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n\tNullable!(string) longest\
    \ = null;\n\t\n\tforeach(string[] str in strings)\n\t{\n\t\tNullable!(string)\
    \ str = longest;\n\t\t\n\t\tif(str == null || str.length() > longest.length())\n\
    \t\t{\n\t\t\tlongest = str;\n\t\t}\n\t}\n\t\n\treturn longest;\n}\nunittest\n\
    {\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpnanvdhlx.d(12): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnanvdhlx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    int? maxLength = null;\n\
    \    foreach (string s in strings) {\n        int length = s.length();\n     \
    \   if (maxLength == null || length > maxLength) {\n            maxLength = length;\n\
    \        }\n    }\n    return maxLength;\n}\nunittest\n{\n    alias candidate\
    \ = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvci5apj1.d(10): Error: no identifier for declarator `int`

    /tmp/tmpvci5apj1.d(10): Error: found `?` instead of statement

    /tmp/tmpvci5apj1.d(11): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvci5apj1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    int? maxLength = null;\n\
    \    foreach (string s in strings) {\n        if (maxLength == null || s.length()\
    \ > maxLength) {\n            maxLength = s.length;\n        }\n    }\n    return\
    \ maxLength;\n}\n/*\n In case of multiple strings of the same length, return the\
    \ one with the smallest index.\n*/\nNullable!(string) shortest(string[] strings)\
    \ \n{\n    int? minLength = null;\n    foreach (string s in strings) {\n     \
    \   if (minLength == null || s.length() < minLength) {\n            minLength\
    \ = s.length;\n        }\n    }\n    return minLength;\n}\n/*\n In case of multiple\
    \ strings of the same length, return the one with the largest index.\n*/\nNullable!(string)\
    \ longestIndex(string[] strings) \n{\n    int? maxIndex = null;\n    foreach (string\
    \ s in strings) {\n        if (maxIndex == null || s.indexOf(strings.last()) >\
    \ maxIndex) {\n            maxIndex = s.indexOf(strings.last());\n        }\n\
    \    }\n    return maxIndex;\n}\n/*\n In case of multiple strings of the same\
    \ length, return the one with the smallest index.\n*/\nNullable!(string) shortestIndex(string[]\
    \ strings) \n{\n    int? minIndex = null;\n    foreach (string s in strings) {\n\
    \        if (minIndex == null || s.indexOf(strings.first()) < minIndex) {\n  \
    \          minIndex = s.indexOf(strings.first());\n        }\n    }\n    return\
    \ minIndex;\n}\n/*\n In case of multiple strings of the same length, return the\
    \ one with the largest index.\n*/\nNullable!(string) longestSubstring(string[]\
    \ strings) \n{\n    int? maxIndex = null;\n    foreach (string s in strings) {\n\
    \        if (maxIndex == null || s.indexOf(strings.last()) > maxIndex) {\n   \
    \         maxIndex = s.indexOf(strings.last());\n        }\n    }\n    return\
    \ maxIndex;\n}\n/*\n In case of multiple strings of the same length, return the\
    \ one with the smallest index.\n*/\nNullable!(string) shortestSubstring(string[]\
    \ strings) \n{\n    int? minIndex = null;\n    foreach (string s in strings) {\n\
    \        if (minIndex == null || s.indexOf(strings.first()) < minIndex) {\n  \
    \          minIndex = s.indexOf(strings.first());\n        }\n    }\n    return\
    \ minIndex;\n}\n/*\n In case of multiple strings of the same length, return the\
    \ one with the largest index.\n*/\nNullable!(string) longestCommonPrefix(string[]\
    \ strings) \n{\n    int? maxIndex = null;\n    foreach (string s in strings) {\n\
    \        if (maxIndex == null || s.indexOf(strings.last()) > maxIndex) {\n   \
    \         maxIndex = s.indexOf(strings.last());\n        }\n    }\n    return\
    \ \nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpz94ogop6.d(10): Error: no identifier for declarator `int`

    /tmp/tmpz94ogop6.d(10): Error: found `?` instead of statement

    /tmp/tmpz94ogop6.d(11): Error: found `in` when expecting `;`

    /tmp/tmpz94ogop6.d(23): Error: no identifier for declarator `int`

    /tmp/tmpz94ogop6.d(23): Error: found `?` instead of statement

    /tmp/tmpz94ogop6.d(24): Error: found `in` when expecting `;`

    /tmp/tmpz94ogop6.d(36): Error: no identifier for declarator `int`

    /tmp/tmpz94ogop6.d(36): Error: found `?` instead of statement

    /tmp/tmpz94ogop6.d(37): Error: found `in` when expecting `;`

    /tmp/tmpz94ogop6.d(49): Error: no identifier for declarator `int`

    /tmp/tmpz94ogop6.d(49): Error: found `?` instead of statement

    /tmp/tmpz94ogop6.d(50): Error: found `in` when expecting `;`

    /tmp/tmpz94ogop6.d(62): Error: no identifier for declarator `int`

    /tmp/tmpz94ogop6.d(62): Error: found `?` instead of statement

    /tmp/tmpz94ogop6.d(63): Error: found `in` when expecting `;`

    /tmp/tmpz94ogop6.d(75): Error: no identifier for declarator `int`

    /tmp/tmpz94og'
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach(string s in strings)\n\
    \    {\n        if(s.length() > longest.length)\n        {\n            longest\
    \ = s;\n        }\n    }\n    return longest;\n}\n/*\n Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return None in case the input list is empty.\n         \
    \       \n*/\nNullable!(string) longest(string[] strings, int startIndex) \n{\n\
    \    foreach(string s in strings)\n    {\n        if(s.length() > longest.length)\n\
    \        {\n            longest = s;\n        }\n    }\n    return longest;\n\
    }\n/*\n Out of list of strings, return the longest one. Return the first one in\
    \ case of multiple\n    strings of the same length. Return None in case the input\
    \ list is empty.\n                \n*/\nNullable!(string) longest(string[] strings,\
    \ int startIndex, int endIndex) \n{\n    foreach(string s in strings)\n    {\n\
    \        if(s.length() > longest.length)\n        {\n            longest = s;\n\
    \        }\n    }\n    return longest;\n}\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings, char c, int startIndex) \n{\n\
    \    foreach(string s in strings)\n    {\n        if(s.length() > longest.length)\n\
    \        {\n            longest = s;\n        }\n    }\n    return longest;\n\
    }\n/*\n Out of list of strings, return the longest one. Return the first one in\
    \ case of multiple\n    strings of the same length. Return None in case the input\
    \ list is empty.\n                \n*/\nNullable!(string) longest(string[] strings,\
    \ char c, int startIndex, int endIndex) \n{\n    foreach(string s in strings)\n\
    \    {\n        if(s.length() > longest.length)\n        {\n            longest\
    \ = s;\n        }\n    }\n    return longest;\n}\n/*\n Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return None in case the input list is empty.\n         \
    \       \n*/\nNullable!(string) longest(string[] strings, char c, int startIndex,\
    \ int endIndex, char c2) \n{\n    foreach(string s in strings)\n    {\n      \
    \  if(s.length() > longest.length)\n        {\n            longest = s;\n    \
    \    }\n    }\n    return longest;\n}\n/*\n Out of list of strings, return the\
    \ longest one. Return the first one in case of multiple\n    strings of the same\
    \ length. Return None in case the input \nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmphhozyoh4.d(10): Error: found `in` when expecting `;`

    /tmp/tmphhozyoh4.d(26): Error: found `in` when expecting `;`

    /tmp/tmphhozyoh4.d(42): Error: found `in` when expecting `;`

    /tmp/tmphhozyoh4.d(58): Error: found `in` when expecting `;`

    /tmp/tmphhozyoh4.d(74): Error: found `in` when expecting `;`

    /tmp/tmphhozyoh4.d(90): Error: found `in` when expecting `;`

    /tmp/tmphhozyoh4.d(99): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphhozyoh4.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    int? maxLength = null;\n\
    \    foreach (string s in strings) {\n        if (maxLength == null || s.length()\
    \ > maxLength.Value()) {\n            maxLength = s.length;\n        }\n    }\n\
    \    return maxLength;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n\
    \        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n\
    \        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmz_3f32k.d(10): Error: no identifier for declarator `int`

    /tmp/tmpmz_3f32k.d(10): Error: found `?` instead of statement

    /tmp/tmpmz_3f32k.d(11): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmz_3f32k.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164474
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length ==\
    \ 0) {\n        return null;\n    }\n    int maxLen = 0;\n    int maxIdx = 0;\n\
    \    for (auto s : strings) {\n        if (s.length() > maxLen) {\n          \
    \  maxLen = s.length();\n            maxIdx = strings.length - 1;\n        }\n\
    \    }\n    return strings[maxIdx];\n}\n/*\n Out of list of strings, return the\
    \ longest one. Return the first one in case of multiple\n    strings of the same\
    \ length. Return None in case the input list is empty.\n                \n*/\n\
    Nullable!(string) longest(string[] strings, int startIdx) \n{\n    if (strings.length\
    \ == 0) {\n        return null;\n    }\n    int maxLen = 0;\n    int maxIdx =\
    \ startIdx;\n    for (auto s : strings) {\n        if (s.length() > maxLen) {\n\
    \            maxLen = s.length();\n            maxIdx = startIdx;\n        }\n\
    \        if (maxIdx >= strings.length - 1) {\n            break;\n        }\n\
    \        maxIdx++;\n    }\n    return strings[maxIdx];\n}\n/*\n Out of list of\
    \ strings, return the longest one. Return the first one in case of multiple\n\
    \    strings of the same length. Return None in case the input list is empty.\n\
    \                \n*/\nNullable!(string) longest(string[] strings, int startIdx,\
    \ int endIdx) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    int maxLen = 0;\n    int maxIdx = startIdx;\n    for (auto s : strings) {\n\
    \        if (s.length() > maxLen) {\n            maxLen = s.length();\n      \
    \      maxIdx = startIdx;\n        }\n        if (maxIdx >= endIdx) {\n      \
    \      break;\n        }\n        maxIdx++;\n    }\n    return strings[maxIdx];\n\
    }\n/*\n Out of list of strings, return the longest one. Return the first one in\
    \ case of multiple\n    strings of the same length. Return None in case the input\
    \ list is empty.\n                \n*/\nNullable!(string) longest(string[] strings,\
    \ int startIdx, int endIdx, int step) \n{\n    if (strings.length == 0) {\n  \
    \      return null;\n    }\n    int maxLen = 0;\n    int maxIdx = startIdx;\n\
    \    for (auto s : strings) {\n        if (s.length() > maxLen) {\n          \
    \  maxLen = s.length();\n            maxIdx = startIdx;\n        }\n        if\
    \ (maxIdx >= endIdx) {\n            break;\n        }\n        maxIdx += step;\n\
    \    }\n    return strings[maxIdx];\n}\n/*\n Out of list of strings, return the\
    \ longest one. Return the first one in case of multiple\n    strings of the same\
    \ length. Return None in case the input list is empty.\n                \n*/\n\
    Nullable!(string) longest(string[] strings, int \nunittest\n{\n    alias candidate\
    \ = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpgouxvds7.d(15): Error: no identifier for declarator `s`

    /tmp/tmpgouxvds7.d(15): Error: expression expected, not `:`

    /tmp/tmpgouxvds7.d(15): Error: found `strings` when expecting `;` following `for`
    condition

    /tmp/tmpgouxvds7.d(35): Error: no identifier for declarator `s`

    /tmp/tmpgouxvds7.d(35): Error: expression expected, not `:`

    /tmp/tmpgouxvds7.d(35): Error: found `strings` when expecting `;` following `for`
    condition

    /tmp/tmpgouxvds7.d(59): Error: no identifier for declarator `s`

    /tmp/tmpgouxvds7.d(59): Error: expression expected, not `:`

    /tmp/tmpgouxvds7.d(59): Error: found `strings` when expecting `;` following `for`
    condition

    /tmp/tmpgouxvds7.d(83): Error: no identifier for declarator `s`

    /tmp/tmpgouxvds7.d(83): Error: expression expected, not `:`

    /tmp/tmpgouxvds7.d(83): Error: found `strings` when expecting `;` following `for`
    condition

    /tmp/tmpgouxvds7.d(101): Error: found `unittest` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgouxvds7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    int? maxLength = null;\n\
    \    foreach (string s in strings) {\n        if (maxLength == null || s.length()\
    \ > maxLength.Value()) {\n            maxLength = s.length;\n        }\n    }\n\
    \    return maxLength;\n}\n/*\n Out of list of strings, return the longest one.\
    \ Return the first one in case of multiple\n    strings of the same length. Return\
    \ None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int maxLength) \n{\n    foreach (string s in strings)\
    \ {\n        if (s.length() > maxLength) {\n            return s;\n        }\n\
    \    }\n    return null;\n}\n/*\n Out of list of strings, return the longest one.\
    \ Return the first one in case of multiple\n    strings of the same length. Return\
    \ None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int maxLength, int startIndex) \n{\n    foreach (string\
    \ s in strings) {\n        if (s.length() > maxLength) {\n            return s;\n\
    \        }\n    }\n    return null;\n}\n/*\n Out of list of strings, return the\
    \ longest one. Return the first one in case of multiple\n    strings of the same\
    \ length. Return None in case the input list is empty.\n                \n*/\n\
    Nullable!(string) longest(string[] strings, int maxLength, int startIndex, int\
    \ endIndex) \n{\n    foreach (string s in strings) {\n        if (s.length() >\
    \ maxLength) {\n            return s;\n        }\n    }\n    return null;\n}\n\
    /*\n Out of list of strings, return the longest one. Return the first one in case\
    \ of multiple\n    strings of the same length. Return None in case the input list\
    \ is empty.\n                \n*/\nNullable!(string) longest(string[] strings,\
    \ int maxLength, int startIndex, int endIndex, int compare) \n{\n    foreach (string\
    \ s in strings) {\n        if (s.length() > maxLength) {\n            return s;\n\
    \        }\n    }\n    return null;\n}\n/*\n Out of list of strings, return the\
    \ longest one. Return the first one in case of multiple\n    strings of the same\
    \ length. Return None in case the input list is empty.\n                \n*/\n\
    Nullable!(string) longest(string[] strings, int maxLength, int startIndex, int\
    \ endIndex, string compare) \n{\n    foreach (string s in strings) {\n       \
    \ if (s.length() > maxLength) {\n            return s;\n        }\n    }\n   \
    \ return null;\n}\n/*\n Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \n*/\nNullable!(string) longest(string[]\
    \ strings, int maxLength, int startIndex, int end\nunittest\n{\n    alias candidate\
    \ = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6s3ck421.d(10): Error: no identifier for declarator `int`

    /tmp/tmp6s3ck421.d(10): Error: found `?` instead of statement

    /tmp/tmp6s3ck421.d(11): Error: found `in` when expecting `;`

    /tmp/tmp6s3ck421.d(25): Error: found `in` when expecting `;`

    /tmp/tmp6s3ck421.d(39): Error: found `in` when expecting `;`

    /tmp/tmp6s3ck421.d(53): Error: found `in` when expecting `;`

    /tmp/tmp6s3ck421.d(67): Error: found `in` when expecting `;`

    /tmp/tmp6s3ck421.d(81): Error: found `in` when expecting `;`

    /tmp/tmp6s3ck421.d(94): Error: found `unittest` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6s3ck421.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    int? maxLength = null;\n\
    \    foreach(string! s, strings) {\n        if (s.length() > maxLength) {\n  \
    \          maxLength = s.length;\n        }\n    }\n    return maxLength;\n}\n\
    unittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpzkmk8dwc.d(10): Error: no identifier for declarator `int`

    /tmp/tmpzkmk8dwc.d(10): Error: found `?` instead of statement

    /tmp/tmpzkmk8dwc.d(11): Error: no identifier for declarator `string!s`

    /tmp/tmpzkmk8dwc.d(11): Error: no identifier for declarator `strings`

    /tmp/tmpzkmk8dwc.d(11): Error: found `)` when expecting `;`

    /tmp/tmpzkmk8dwc.d(16): Error: found `return` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzkmk8dwc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length ==\
    \ 0) {\n        return null;\n    }\n    \n    string longest = strings[0];\n\
    \    int longestLength = longest.length;\n    \n    for (int i = 1; i < strings.length;\
    \ i++) {\n        if (strings[i].length < longestLength) {\n            longest\
    \ = strings[i];\n            longestLength = longest.length;\n        }\n    }\n\
    \    \n    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\n\
    {\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n\
    {\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp332rwx06.d(15): Error: cannot implicitly convert expression `longest.length`
    of type `ulong` to `int`

    /tmp/tmp332rwx06.d(20): Error: cannot implicitly convert expression `longest.length`
    of type `ulong` to `int`

    /tmp/tmp332rwx06.d(11): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!string`

    /tmp/tmp332rwx06.d(24): Error: cannot implicitly convert expression `longest`
    of type `string` to `Nullable!string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp332rwx06.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164476
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach(string s in strings)\n\
    \    {\n        if(s.length() > longest.length)\n        {\n            longest\
    \ = s;\n        }\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate\
    \ = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8l7x_mhq.d(10): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8l7x_mhq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach(string; strings)\
    \ \n    {\n        if(string.length > longest.length) longest = string;\n    }\n\
    \    return longest;\n}\n/*\n Out of list of strings, return the longest one.\
    \ Return the first one in case of multiple\n    strings of the same length. Return\
    \ None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int start) \n{\n    foreach(string; strings[start])\
    \ \n    {\n        if(string.length > longest.length) longest = string;\n    }\n\
    \    return longest;\n}\n/*\n Out of list of strings, return the longest one.\
    \ Return the first one in case of multiple\n    strings of the same length. Return\
    \ None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int start, int end) \n{\n    foreach(string; strings[start..end])\
    \ \n    {\n        if(string.length > longest.length) longest = string;\n    }\n\
    \    return longest;\n}\n/*\n Out of list of strings, return the longest one.\
    \ Return the first one in case of multiple\n    strings of the same length. Return\
    \ None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int start, int end, int step) \n{\n    foreach(string;\
    \ strings[start..end..step]) \n    {\n        if(string.length > longest.length)\
    \ longest = string;\n    }\n    return longest;\n}\n/*\n Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return None in case the input list is empty.\n         \
    \       \n*/\nNullable!(string) longest(string[] strings, int start, int end,\
    \ int step, string separator) \n{\n    foreach(string; strings[start..end..step])\
    \ \n    {\n        if(string.split(separator).length > longest.split(separator).length)\
    \ longest = string;\n    }\n    return longest;\n}\n/*\n Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return None in case the input list is empty.\n         \
    \       \n*/\nNullable!(string) longest(string[] strings, int start, int end,\
    \ int step, string separator, string caseSensitive) \n{\n    foreach(string; strings[start..end..step])\
    \ \n    {\n        if(string.split(separator).length > longest.split(separator).length)\
    \ longest = string;\n    }\n    return longest;\n}\n/*\n Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return None in case the input list is empty.\nunittest\n\
    {\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpcs9x3k4a.d(49): Error: found `..` when expecting `,`

    /tmp/tmpcs9x3k4a.d(62): Error: found `..` when expecting `,`

    /tmp/tmpcs9x3k4a.d(75): Error: found `..` when expecting `,`

    /tmp/tmpcs9x3k4a.d(81): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcs9x3k4a.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length ==\
    \ 0) {\n        return null;\n    }\n    int maxLen = strings[0].Length;\n   \
    \ foreach (string s in strings) {\n        if (s.Length > maxLen) {\n        \
    \    maxLen = s.Length;\n        }\n    }\n    return maxLen == strings[0].Length\
    \ ? strings[0] : null;\n}\n/*\n Out of list of strings, return the longest one.\
    \ Return the first one in case of multiple\n    strings of the same length. Return\
    \ None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int maxLen) \n{\n    if (strings.length == 0) {\n\
    \        return null;\n    }\n    int maxLen = strings[0].Length;\n    foreach\
    \ (string s in strings) {\n        if (s.Length > maxLen) {\n            maxLen\
    \ = s.Length;\n        }\n    }\n    return maxLen == strings[0].Length ? strings[0]\
    \ : null;\n}\n/*\n Out of list of strings, return the longest one. Return the\
    \ first one in case of multiple\n    strings of the same length. Return None in\
    \ case the input list is empty.\n                \n*/\nNullable!(string) longest(string[]\
    \ strings, int maxLen, int startIndex) \n{\n    if (strings.length == 0) {\n \
    \       return null;\n    }\n    int maxLen = strings[0].Length;\n    foreach\
    \ (string s in strings) {\n        if (s.Length > maxLen) {\n            maxLen\
    \ = s.Length;\n        }\n    }\n    return maxLen == strings[0].Length ? strings[0]\
    \ : null;\n}\n/*\n Out of list of strings, return the longest one. Return the\
    \ first one in case of multiple\n    strings of the same length. Return None in\
    \ case the input list is empty.\n                \n*/\nNullable!(string) longest(string[]\
    \ strings, int maxLen, int startIndex, int endIndex) \n{\n    if (strings.length\
    \ == 0) {\n        return null;\n    }\n    int maxLen = strings[0].Length;\n\
    \    foreach (string s in strings) {\n        if (s.Length > maxLen) {\n     \
    \       maxLen = s.Length;\n        }\n    }\n    return maxLen == strings[0].Length\
    \ ? strings[0] : null;\n}\n/*\n Out of list of strings, return the longest one.\
    \ Return the first one in case of multiple\n    strings of the same length. Return\
    \ None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int maxLen, int startIndex, int endIndex, int maxCount)\
    \ \n{\n    if (strings.length == 0) {\n        return null;\n    }\n    int maxLen\
    \ = strings[0].Length;\n    foreach (string s in strings) {\n        if (s.Length\
    \ > maxLen) {\n            maxLen = s.Length;\n        }\n    }\nunittest\n{\n\
    \    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n \
    \       assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3i5m93xq.d(14): Error: found `in` when expecting `;`

    /tmp/tmp3i5m93xq.d(32): Error: found `in` when expecting `;`

    /tmp/tmp3i5m93xq.d(50): Error: found `in` when expecting `;`

    /tmp/tmp3i5m93xq.d(68): Error: found `in` when expecting `;`

    /tmp/tmp3i5m93xq.d(86): Error: found `in` when expecting `;`

    /tmp/tmp3i5m93xq.d(91): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3i5m93xq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    int? maxLength = null;\n\
    \    foreach (string s in strings) {\n        if (maxLength == null || s.length()\
    \ > maxLength.Value()) {\n            maxLength = s.length;\n        }\n    }\n\
    \    return maxLength;\n}\n/*\n Out of list of strings, return the longest one.\
    \ Return the first one in case of multiple\n    strings of the same length. Return\
    \ None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int maxLength) \n{\n    foreach (string s in strings)\
    \ {\n        if (s.length() > maxLength) {\n            maxLength = s.length;\n\
    \        }\n    }\n    return maxLength;\n}\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings, int maxLength, int startIndex)\
    \ \n{\n    foreach (string s in strings) {\n        if (s.length() > maxLength)\
    \ {\n            maxLength = s.length;\n        }\n        if (s.length() > startIndex)\
    \ {\n            return s;\n        }\n    }\n    return null;\n}\n/*\n Out of\
    \ list of strings, return the longest one. Return the first one in case of multiple\n\
    \    strings of the same length. Return None in case the input list is empty.\n\
    \                \n*/\nNullable!(string) longest(string[] strings, int maxLength,\
    \ int startIndex, int endIndex) \n{\n    foreach (string s in strings) {\n   \
    \     if (s.length() > maxLength) {\n            maxLength = s.length;\n     \
    \   }\n        if (s.length() > startIndex && s.length() < endIndex) {\n     \
    \       return s;\n        }\n    }\n    return null;\n}\n/*\n Out of list of\
    \ strings, return the longest one. Return the first one in case of multiple\n\
    \    strings of the same length. Return None in case the input list is empty.\n\
    \                \n*/\nNullable!(string) longest(string[] strings, int maxLength,\
    \ int startIndex, int endIndex, int compare) \n{\n    foreach (string s in strings)\
    \ {\n        if (s.length() > maxLength) {\n            maxLength = s.length;\n\
    \        }\n        if (s.length() > startIndex && s.length() < endIndex) {\n\
    \            if (compare(s.length(), maxLength)) {\n                return s;\n\
    \            }\n        }\n    }\n    return null;\n}\n/*\n Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return None in case the input list is empty.\n         \
    \       \n*/\nNullable!(string) longest(string[] strings, int maxLength, int startIndex,\
    \ int endIndex, int compare, int startIndexInclusive) \n{\n    foreach (string\
    \ s in strings) {\n        if (s.length() > maxLength) {\n\nunittest\n{\n    alias\
    \ candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwgq4kbs3.d(10): Error: no identifier for declarator `int`

    /tmp/tmpwgq4kbs3.d(10): Error: found `?` instead of statement

    /tmp/tmpwgq4kbs3.d(11): Error: found `in` when expecting `;`

    /tmp/tmpwgq4kbs3.d(25): Error: found `in` when expecting `;`

    /tmp/tmpwgq4kbs3.d(39): Error: found `in` when expecting `;`

    /tmp/tmpwgq4kbs3.d(56): Error: found `in` when expecting `;`

    /tmp/tmpwgq4kbs3.d(73): Error: found `in` when expecting `;`

    /tmp/tmpwgq4kbs3.d(92): Error: found `in` when expecting `;`

    /tmp/tmpwgq4kbs3.d(95): Error: found `unittest` instead of statement

    /tmp/tmpwgq4kbs3.d(115): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmpwgq4kbs3.d(115): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwgq4kbs3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach(string; strings)\
    \ {\n        if(string.length > longest.length)\n            longest = string;\n\
    \    }\n    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\n\
    {\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n\
    {\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpg1qfhgeu.d(11): Error: function `tmpg1qfhgeu.longest(string[] strings)`
    is not callable using argument types `()`

    /tmp/tmpg1qfhgeu.d(12): Error: function `tmpg1qfhgeu.longest(string[] strings)`
    is not callable using argument types `(string)`

    /tmp/tmpg1qfhgeu.d(12):        cannot pass argument `string` of type `string`
    to parameter `string[] strings`

    /tmp/tmpg1qfhgeu.d(14): Error: function `tmpg1qfhgeu.longest(string[] strings)`
    is not callable using argument types `()`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg1qfhgeu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    var longest = strings[0];\n\
    \    foreach(var s in strings)\n    {\n        if(s.length >= longest.length)\n\
    \        {\n            longest = s;\n        }\n    }\n    return longest;\n\
    }\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpu6t9duyd.d(11): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu6t9duyd.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach(string; strings)\n\
    \    {\n        if(string.length == strings.length)\n            return string;\n\
    \    }\n    return null;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n\
    \        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n\
    \        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0hb1wxbw.d(13): Error: cannot implicitly convert expression `string`
    of type `string` to `Nullable!string`

    /tmp/tmp0hb1wxbw.d(15): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0hb1wxbw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164476
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach(string; strings)\
    \ {\n        if(string.length > longest.length)\n            longest = string;\n\
    \    }\n    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\n\
    {\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n\
    {\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpg1qfhgeu.d(11): Error: function `tmpg1qfhgeu.longest(string[] strings)`
    is not callable using argument types `()`

    /tmp/tmpg1qfhgeu.d(12): Error: function `tmpg1qfhgeu.longest(string[] strings)`
    is not callable using argument types `(string)`

    /tmp/tmpg1qfhgeu.d(12):        cannot pass argument `string` of type `string`
    to parameter `string[] strings`

    /tmp/tmpg1qfhgeu.d(14): Error: function `tmpg1qfhgeu.longest(string[] strings)`
    is not callable using argument types `()`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg1qfhgeu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length ==\
    \ 0)\n        return null;\n    var longest = strings[0];\n    for (var i = 1;\
    \ i < strings.length; ++i) {\n        if (strings[i].length < longest.length)\n\
    \            longest = strings[i];\n    }\n    return longest;\n}\n/*\n Out of\
    \ list of strings, return the longest one. Return the first one in case of multiple\n\
    \    strings of the same length. Return None in case the input list is empty.\n\
    \                \n*/\nNullable!(string) longest(string[] strings, int startIndex)\
    \ \n{\n    if (strings.length == 0)\n        return null;\n    var longest = strings[startIndex];\n\
    \    for (var i = startIndex + 1; i < strings.length; ++i) {\n        if (strings[i].length\
    \ < longest.length)\n            longest = strings[i];\n    }\n    return longest;\n\
    }\n/*\n Out of list of strings, return the longest one. Return the first one in\
    \ case of multiple\n    strings of the same length. Return None in case the input\
    \ list is empty.\n                \n*/\nNullable!(string) longest(string[] strings,\
    \ int startIndex, int endIndex) \n{\n    if (strings.length == 0)\n        return\
    \ null;\n    var longest = strings[startIndex];\n    for (var i = startIndex +\
    \ 1; i < endIndex; ++i) {\n        if (strings[i].length < longest.length)\n \
    \           longest = strings[i];\n    }\n    return longest;\n}\n/*\n Out of\
    \ list of strings, return the longest one. Return the first one in case of multiple\n\
    \    strings of the same length. Return None in case the input list is empty.\n\
    \                \n*/\nNullable!(string) longest(string[] strings, int startIndex,\
    \ int endIndex, int maxLength) \n{\n    if (strings.length == 0)\n        return\
    \ null;\n    var longest = strings[startIndex];\n    for (var i = startIndex +\
    \ 1; i < endIndex; ++i) {\n        if (strings[i].length < longest.length)\n \
    \           longest = strings[i];\n    }\n    return longest;\n}\n/*\n Out of\
    \ list of strings, return the longest one. Return the first one in case of multiple\n\
    \    strings of the same length. Return None in case the input list is empty.\n\
    \                \n*/\nNullable!(string) longest(string[] strings, int startIndex,\
    \ int endIndex, int maxLength, int startIndexInclusive) \n{\n    if (strings.length\
    \ == 0)\n        return null;\n    var longest = strings[startIndex];\n    for\
    \ (var i = startIndex + 1; i < endIndex; ++i) {\n        if (strings[i].length\
    \ < longest.length)\n            longest = strings[i];\n    }\n    return longest;\n\
    }\n/*\n Out of list of strings, return the longest one. Return the first one in\
    \ case of multiple\n    strings of the same length. Return None in case the input\
    \ list is empty.\n\nunittest\n{\n    alias candidate = longest;\n\n{\n       \
    \ auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n     \
    \   auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpx6dmou52.d(83): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx6dmou52.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach(string[] str\
    \ in strings) {\n        if (str.length > longest.length)\n            longest\
    \ = str;\n    }\n    return longest;\n}\n/*\n Out of list of strings, return the\
    \ longest one. Return the first one in case of multiple\n    strings of the same\
    \ length. Return None in case the input list is empty.\n                \n*/\n\
    Nullable!(string) longest(string[] strings, int startIndex) \n{\n    foreach(string[]\
    \ str in strings) {\n        if (str.length > longest.length)\n            longest\
    \ = str;\n    }\n    return longest;\n}\n/*\n Out of list of strings, return the\
    \ longest one. Return the first one in case of multiple\n    strings of the same\
    \ length. Return None in case the input list is empty.\n                \n*/\n\
    Nullable!(string) longest(string[] strings, int startIndex, int endIndex) \n{\n\
    \    foreach(string[] str in strings) {\n        if (str.length > longest.length)\n\
    \            longest = str;\n    }\n    return longest;\n}\n/*\n Out of list of\
    \ strings, return the longest one. Return the first one in case of multiple\n\
    \    strings of the same length. Return None in case the input list is empty.\n\
    \                \n*/\nNullable!(string) longest(string[] strings, char charToFind)\
    \ \n{\n    foreach(string[] str in strings) {\n        if (str.length > longest.length)\n\
    \            longest = str;\n    }\n    return longest;\n}\n/*\n Out of list of\
    \ strings, return the longest one. Return the first one in case of multiple\n\
    \    strings of the same length. Return None in case the input list is empty.\n\
    \                \n*/\nNullable!(string) longest(string[] strings, char charToFind,\
    \ int startIndex) \n{\n    foreach(string[] str in strings) {\n        if (str.length\
    \ > longest.length)\n            longest = str;\n    }\n    return longest;\n\
    }\n/*\n Out of list of strings, return the longest one. Return the first one in\
    \ case of multiple\n    strings of the same length. Return None in case the input\
    \ list is empty.\n                \n*/\nNullable!(string) longest(string[] strings,\
    \ char charToFind, int startIndex, int endIndex) \n{\n    foreach(string[] str\
    \ in strings) {\n        if (str.length > longest.length)\n            longest\
    \ = str;\n    }\n    return longest;\n}\n/*\n Out of list of strings, return the\
    \ longest one. Return the first one in case of multiple\n    strings of the same\
    \ length. Return None in case the input list is empty.\n                \n*/\n\
    Nullable!(string) longest(string[] strings, char charToFind, char charToFind2)\
    \ \n{\n    \nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result\
    \ = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result\
    \ = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get\
    \ == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\"\
    , \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get ==\
    \ \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprib1pjit.d(10): Error: found `in` when expecting `;`

    /tmp/tmprib1pjit.d(23): Error: found `in` when expecting `;`

    /tmp/tmprib1pjit.d(36): Error: found `in` when expecting `;`

    /tmp/tmprib1pjit.d(49): Error: found `in` when expecting `;`

    /tmp/tmprib1pjit.d(62): Error: found `in` when expecting `;`

    /tmp/tmprib1pjit.d(75): Error: found `in` when expecting `;`

    /tmp/tmprib1pjit.d(89): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprib1pjit.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach(string; strings)\
    \ {\n        if(string.length == strings.length)\n            return string;\n\
    \    }\n    return null;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n\
    \        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n\
    \        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5r2y0si_.d(12): Error: cannot implicitly convert expression `string`
    of type `string` to `Nullable!string`

    /tmp/tmp5r2y0si_.d(14): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5r2y0si_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164476
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    var longest = strings[0];\n\
    \    var longestLength = longest.length;\n    for(var i = 1; i < strings.length;\
    \ ++i)\n    {\n        var thisLength = strings[i].length;\n        if(thisLength\
    \ > longestLength)\n        {\n            longest = strings[i];\n           \
    \ longestLength = thisLength;\n        }\n    }\n    return longest;\n}\nunittest\n\
    {\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprnopffep.d(10): Error: undefined identifier `var`

    /tmp/tmprnopffep.d(11): Error: undefined identifier `var`

    /tmp/tmprnopffep.d(12): Error: undefined identifier `var`

    /tmp/tmprnopffep.d(14): Error: undefined identifier `var`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprnopffep.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164476
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    var maxLength = 0;\n\
    \    var maxString = \"\";\n    foreach(string; strings) {\n        var length\
    \ = string.length;\n        if (length > maxLength) {\n            maxLength =\
    \ length;\n            maxString = string;\n        }\n    }\n    return maxString;\n\
    }\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7lmep6me.d(10): Error: undefined identifier `var`

    /tmp/tmp7lmep6me.d(11): Error: undefined identifier `var`

    /tmp/tmp7lmep6me.d(13): Error: undefined identifier `var`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7lmep6me.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164476
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    int? maxLength = null;\n\
    \    foreach(string? s in strings) {\n        int length = s.length();\n     \
    \   if (maxLength == null || maxLength.Value < length) {\n            maxLength\
    \ = length;\n        }\n    }\n    return maxLength;\n}\nunittest\n{\n    alias\
    \ candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmppdz01pyt.d(10): Error: no identifier for declarator `int`

    /tmp/tmppdz01pyt.d(10): Error: found `?` instead of statement

    /tmp/tmppdz01pyt.d(11): Error: no identifier for declarator `string`

    /tmp/tmppdz01pyt.d(11): Error: found `?` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppdz01pyt.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    var longest = strings[0];\n\
    \    var longestLength = 0;\n    foreach(var s in strings)\n    {\n        if(s.length\
    \ > longestLength)\n        {\n            longest = s;\n            longestLength\
    \ = s.length;\n        }\n    }\n    return longest;\n}\nunittest\n{\n    alias\
    \ candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprfucujpi.d(12): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprfucujpi.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach(string[] s in\
    \ strings) {\n        if(s.length() > longest(s).len()) {\n            return\
    \ longest(s);\n        }\n    }\n    return None;\n}\n/*\n In case of multiple\
    \ strings of the same length, return the one with the highest index.\n*/\nNullable!(int)\
    \ longestIndex(string[] strings) \n{\n    foreach(string[] s in strings) {\n \
    \       if(s.length() > longestIndex(s).len()) {\n            return longestIndex(s);\n\
    \        }\n    }\n    return None;\n}\n/*\n In case of multiple strings of the\
    \ same length, return the one with the lowest index.\n*/\nNullable!(int) shortestIndex(string[]\
    \ strings) \n{\n    foreach(string[] s in strings) {\n        if(s.length() <\
    \ shortestIndex(s).len()) {\n            return shortestIndex(s);\n        }\n\
    \    }\n    return None;\n}\n/*\n In case of multiple strings of the same length,\
    \ return the one with the lowest index.\n*/\nNullable!(int) shortestIndex(string[]\
    \ strings, int index) \n{\n    foreach(string[] s in strings) {\n        if(s.length()\
    \ < shortestIndex(s, index).len()) {\n            return shortestIndex(s, index);\n\
    \        }\n    }\n    return None;\n}\n/*\n In case of multiple strings of the\
    \ same length, return the one with the highest index.\n*/\nNullable!(int) longestIndex(string[]\
    \ strings, int index) \n{\n    foreach(string[] s in strings) {\n        if(s.length()\
    \ > longestIndex(s, index).len()) {\n            return longestIndex(s, index);\n\
    \        }\n    }\n    return None;\n}\n/*\n In case of multiple strings of the\
    \ same length, return the one with the lowest index.\n*/\nNullable!(int) shortestIndex(string[]\
    \ strings, int index) \n{\n    foreach(string[] s in strings) {\n        if(s.length()\
    \ < shortestIndex(s, index).len()) {\n            return shortestIndex(s, index);\n\
    \        }\n    }\n    return None;\n}\n/*\n In case of multiple strings of the\
    \ same length, return the one with the highest index.\n*/\nNullable!(int) longestIndex(string[]\
    \ strings, int index, int length) \n{\n    foreach(string[] s in strings) {\n\
    \        if(s.length() > longestIndex(s, index, length).len()) {\n           \
    \ return longestIndex(s, index, length);\n        }\n    }\n    return None;\n\
    }\n/*\n In case of multiple strings of the same length, return the one with the\
    \ lowest index.\n*/\nNullable!(int) shortestIndex(string[] strings, int index,\
    \ int length) \n{\n    foreach(string[] s in strings) {\n        if(s.length()\
    \ < shortestIndex(s, index, length).len()) {\n            return shortestIndex(s,\
    \ index, length);\n        }\n    }\n    return None;\n}\n/*\n In case of \nunittest\n\
    {\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6q7w5b9x.d(10): Error: found `in` when expecting `;`

    /tmp/tmp6q7w5b9x.d(22): Error: found `in` when expecting `;`

    /tmp/tmp6q7w5b9x.d(34): Error: found `in` when expecting `;`

    /tmp/tmp6q7w5b9x.d(46): Error: found `in` when expecting `;`

    /tmp/tmp6q7w5b9x.d(58): Error: found `in` when expecting `;`

    /tmp/tmp6q7w5b9x.d(70): Error: found `in` when expecting `;`

    /tmp/tmp6q7w5b9x.d(82): Error: found `in` when expecting `;`

    /tmp/tmp6q7w5b9x.d(94): Error: found `in` when expecting `;`

    /tmp/tmp6q7w5b9x.d(101): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6q7w5b9x.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n\tint? maxLength = null;\n\
    \tforeach(string! s, strings) {\n\t\tint len = s.length();\n\t\tif(maxLength ==\
    \ null || len > maxLength) {\n\t\t\tmaxLength = len;\n\t\t}\n\t}\n\treturn maxLength;\n\
    }\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpccux4_w3.d(10): Error: no identifier for declarator `int`

    /tmp/tmpccux4_w3.d(10): Error: found `?` instead of statement

    /tmp/tmpccux4_w3.d(11): Error: no identifier for declarator `string!s`

    /tmp/tmpccux4_w3.d(11): Error: no identifier for declarator `strings`

    /tmp/tmpccux4_w3.d(11): Error: found `)` when expecting `;`

    /tmp/tmpccux4_w3.d(17): Error: found `return` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpccux4_w3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach(string s in strings)\n\
    \    {\n        if(s.length() > longest.length)\n        {\n            longest\
    \ = s;\n        }\n    }\n    return longest;\n}\n/*\n Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return None in case the input list is empty.\n         \
    \       \n*/\nNullable!(string) longest(string[] strings, int startIndex) \n{\n\
    \    foreach(string s in strings)\n    {\n        if(s.length() > longest.length)\n\
    \        {\n            longest = s;\n        }\n    }\n    return longest;\n\
    }\n/*\n Out of list of strings, return the longest one. Return the first one in\
    \ case of multiple\n    strings of the same length. Return None in case the input\
    \ list is empty.\n                \n*/\nNullable!(string) longest(string[] strings,\
    \ int startIndex, int endIndex) \n{\n    foreach(string s in strings)\n    {\n\
    \        if(s.length() > longest.length)\n        {\n            longest = s;\n\
    \        }\n    }\n    return longest;\n}\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings, char character) \n{\n    foreach(string\
    \ s in strings)\n    {\n        if(s.length() > longest.length)\n        {\n \
    \           longest = s;\n        }\n    }\n    return longest;\n}\n/*\n Out of\
    \ list of strings, return the longest one. Return the first one in case of multiple\n\
    \    strings of the same length. Return None in case the input list is empty.\n\
    \                \n*/\nNullable!(string) longest(string[] strings, char character,\
    \ int startIndex) \n{\n    foreach(string s in strings)\n    {\n        if(s.length()\
    \ > longest.length)\n        {\n            longest = s;\n        }\n    }\n \
    \   return longest;\n}\n/*\n Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \n*/\nNullable!(string) longest(string[]\
    \ strings, char character, int startIndex, int endIndex) \n{\n    foreach(string\
    \ s in strings)\n    {\n        if(s.length() > longest.length)\n        {\n \
    \           longest = s;\n        }\n    }\n    return longest;\n}\n/*\n Out of\
    \ list of strings, return the longest one. Return the first one in case of multiple\n\
    \    strings of the same length. Return None in case the input list is empty.\n\
    \                \n*/\nunittest\n{\n    alias candidate = longest;\n\n{\n    \
    \    auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n  \
    \      auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpp6ih__a1.d(10): Error: found `in` when expecting `;`

    /tmp/tmpp6ih__a1.d(26): Error: found `in` when expecting `;`

    /tmp/tmpp6ih__a1.d(42): Error: found `in` when expecting `;`

    /tmp/tmpp6ih__a1.d(58): Error: found `in` when expecting `;`

    /tmp/tmpp6ih__a1.d(74): Error: found `in` when expecting `;`

    /tmp/tmpp6ih__a1.d(90): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp6ih__a1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164476
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length ==\
    \ 0) {\n        return null;\n    }\n    int maxLen = strings[0].length;\n   \
    \ foreach (string s in strings) {\n        if (s.length() > maxLen) {\n      \
    \      maxLen = s.length;\n        }\n    }\n    return maxLen > 0 ? strings[strings.length\
    \ - 1] : null;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto\
    \ result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull &&\
    \ result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\"\
    , \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get\
    \ == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpo31g9_eo.d(14): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpo31g9_eo.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164476
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach(string; strings)\
    \ {\n        if(string.length > longest.length)\n            longest = string;\n\
    \    }\n    return longest;\n}\n/*\n Out of list of strings, return the longest\
    \ one. Return the first one in case of multiple\n    strings of the same length.\
    \ Return None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int start) \n{\n    foreach(string; strings) {\n \
    \       if(string.length > longest.length)\n            longest = string;\n  \
    \  }\n    return longest;\n}\n/*\n Out of list of strings, return the longest\
    \ one. Return the first one in case of multiple\n    strings of the same length.\
    \ Return None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int start, int end) \n{\n    foreach(string; strings)\
    \ {\n        if(string.length > longest.length)\n            longest = string;\n\
    \    }\n    return longest;\n}\n/*\n Out of list of strings, return the longest\
    \ one. Return the first one in case of multiple\n    strings of the same length.\
    \ Return None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int start, int end, int step) \n{\n    foreach(string;\
    \ strings) {\n        if(string.length > longest.length)\n            longest\
    \ = string;\n    }\n    return longest;\n}\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings, int start, int end, int step,\
    \ string separator) \n{\n    foreach(string; strings) {\n        if(string.length\
    \ > longest.length)\n            longest = string;\n    }\n    return longest;\n\
    }\n/*\n Out of list of strings, return the longest one. Return the first one in\
    \ case of multiple\n    strings of the same length. Return None in case the input\
    \ list is empty.\n                \n*/\nNullable!(string) longest(string[] strings,\
    \ int start, int end, int step, string separator, int startIndex) \n{\n    foreach(string;\
    \ strings) {\n        if(string.length > longest.length)\n            longest\
    \ = string;\n    }\n    return longest;\n}\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings, int start, int end, int step,\
    \ string separator, int startIndex, int endIndex) \n{\n    foreach(string; strings)\
    \ {\n        if(string\nunittest\n{\n    alias candidate = longest;\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp24go1uc9.d(90): Error: found `unittest` when expecting `)`

    /tmp/tmp24go1uc9.d(110): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmp24go1uc9.d(110): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp24go1uc9.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    int? maxLength = null;\n\
    \    foreach(string? s in strings)\n    {\n        int length = s.length();\n\
    \        if(maxLength == null || length > maxLength)\n        {\n            maxLength\
    \ = length;\n        }\n    }\n    return maxLength;\n}\nunittest\n{\n    alias\
    \ candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpm09jg7ej.d(10): Error: no identifier for declarator `int`

    /tmp/tmpm09jg7ej.d(10): Error: found `?` instead of statement

    /tmp/tmpm09jg7ej.d(11): Error: no identifier for declarator `string`

    /tmp/tmpm09jg7ej.d(11): Error: found `?` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpm09jg7ej.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    int? maxLength = null;\n\
    \    foreach(string? s in strings) {\n        int length = s.length();\n     \
    \   if (maxLength == null || length > maxLength.Value) {\n            maxLength\
    \ = length;\n        }\n    }\n    return maxLength;\n}\nunittest\n{\n    alias\
    \ candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmfxm98a8.d(10): Error: no identifier for declarator `int`

    /tmp/tmpmfxm98a8.d(10): Error: found `?` instead of statement

    /tmp/tmpmfxm98a8.d(11): Error: no identifier for declarator `string`

    /tmp/tmpmfxm98a8.d(11): Error: found `?` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmfxm98a8.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164476
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    int? maxLength = null;\n\
    \    foreach(string? s in strings) {\n        if(maxLength == null || s.length()\
    \ > maxLength) {\n            maxLength = s.length();\n        }\n    }\n    return\
    \ maxLength;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto\
    \ result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull &&\
    \ result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\"\
    , \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get\
    \ == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwtrsp2k3.d(10): Error: no identifier for declarator `int`

    /tmp/tmpwtrsp2k3.d(10): Error: found `?` instead of statement

    /tmp/tmpwtrsp2k3.d(11): Error: no identifier for declarator `string`

    /tmp/tmpwtrsp2k3.d(11): Error: found `?` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwtrsp2k3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164476
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    int? maxLength = null;\n\
    \    foreach (string s in strings) {\n        if (maxLength == null || s.length()\
    \ > maxLength.Value()) {\n            maxLength = s.length;\n        }\n    }\n\
    \    return maxLength;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n\
    \        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n\
    \        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmz_3f32k.d(10): Error: no identifier for declarator `int`

    /tmp/tmpmz_3f32k.d(10): Error: found `?` instead of statement

    /tmp/tmpmz_3f32k.d(11): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmz_3f32k.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164474
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    var maxLength = 0;\n\
    \    var maxString = \"\";\n    foreach(var s in strings) {\n        var len =\
    \ s.length();\n        if(len > maxLength) {\n            maxLength = len;\n \
    \           maxString = s;\n        }\n    }\n    return maxString;\n}\nunittest\n\
    {\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpjtresgv3.d(12): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjtresgv3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164476
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    var longest = strings[0];\n\
    \    var longestLength = longest.length;\n    foreach(string[] s in strings)\n\
    \    {\n        if(s.length == longestLength)\n        {\n            longest\
    \ = s;\n            longestLength = longest.length;\n        }\n    }\n    return\
    \ longest;\n}\n/*\n Out of list of strings, return the longest one. Return the\
    \ first one in case of multiple\n    strings of the same length. Return None in\
    \ case the input list is empty.\n                \n*/\nNullable!(string) longest(string[]\
    \ strings, int startIndex) \n{\n    var longest = strings[startIndex];\n    var\
    \ longestLength = longest.length;\n    foreach(string[] s in strings)\n    {\n\
    \        if(s.length == longestLength)\n        {\n            longest = s;\n\
    \            longestLength = longest.length;\n        }\n    }\n    return longest;\n\
    }\n/*\n Out of list of strings, return the longest one. Return the first one in\
    \ case of multiple\n    strings of the same length. Return None in case the input\
    \ list is empty.\n                \n*/\nNullable!(string) longest(string[] strings,\
    \ int startIndex, int endIndex) \n{\n    var longest = strings[startIndex];\n\
    \    var longestLength = longest.length;\n    foreach(string[] s in strings)\n\
    \    {\n        if(s.length == longestLength)\n        {\n            longest\
    \ = s;\n            longestLength = longest.length;\n        }\n    }\n    return\
    \ longest;\n}\n/*\n Out of list of strings, return the longest one. Return the\
    \ first one in case of multiple\n    strings of the same length. Return None in\
    \ case the input list is empty.\n                \n*/\nNullable!(string) longest(string[]\
    \ strings, int startIndex, int endIndex, int maxLength) \n{\n    var longest =\
    \ strings[startIndex];\n    var longestLength = longest.length;\n    foreach(string[]\
    \ s in strings)\n    {\n        if(s.length == longestLength)\n        {\n   \
    \         longest = s;\n            longestLength = longest.length;\n        }\n\
    \    }\n    return longest;\n}\n/*\n Out of list of strings, return the longest\
    \ one. Return the first one in case of multiple\n    strings of the same length.\
    \ Return None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int startIndex, int endIndex, int maxLength, int startIndex2)\
    \ \n{\n    var longest = strings[startIndex];\n    var longestLength = longest.length;\n\
    \    foreach(string[] s in strings)\n    {\n        if(s.length == longestLength)\n\
    \        {\n            longest = s;\n            longestLength = longest.length;\n\
    \        }\n    }\n    return longest;\n}\n/*\n Out of list of strings, return\
    \ the longest one. \nunittest\n{\n    alias candidate = longest;\n\n{\n      \
    \  auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n    \
    \    auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpm9vomn2a.d(12): Error: found `in` when expecting `;`

    /tmp/tmpm9vomn2a.d(31): Error: found `in` when expecting `;`

    /tmp/tmpm9vomn2a.d(50): Error: found `in` when expecting `;`

    /tmp/tmpm9vomn2a.d(69): Error: found `in` when expecting `;`

    /tmp/tmpm9vomn2a.d(88): Error: found `in` when expecting `;`

    /tmp/tmpm9vomn2a.d(98): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpm9vomn2a.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164476
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length ==\
    \ 0) {\n        return null;\n    }\n    var maxLength = 0;\n    var maxString\
    \ = \"\";\n    for (var i = 0; i <strings.length; ++i) {\n        var length =\
    \ strings[i].length;\n        if (length > maxLength) {\n            maxLength\
    \ = length;\n            maxString = strings[i];\n        }\n    }\n    return\
    \ maxString;\n}\n/*\n Out of list of strings, return the longest one. Return the\
    \ first one in case of multiple\n    strings of the same length. Return None in\
    \ case the input list is empty.\n                \n*/\nNullable!(string) longest(string[]\
    \ strings, int startIndex) \n{\n    if (strings.length == 0) {\n        return\
    \ null;\n    }\n    var maxLength = 0;\n    var maxString = \"\";\n    for (var\
    \ i = startIndex; i < strings.length; ++i) {\n        var length = strings[i].length;\n\
    \        if (length > maxLength) {\n            maxLength = length;\n        \
    \    maxString = strings[i];\n        }\n    }\n    return maxString;\n}\n/*\n\
    \ Out of list of strings, return the longest one. Return the first one in case\
    \ of multiple\n    strings of the same length. Return None in case the input list\
    \ is empty.\n                \n*/\nNullable!(string) longest(string[] strings,\
    \ int startIndex, int endIndex) \n{\n    if (strings.length == 0) {\n        return\
    \ null;\n    }\n    var maxLength = 0;\n    var maxString = \"\";\n    for (var\
    \ i = startIndex; i < endIndex; ++i) {\n        var length = strings[i].length;\n\
    \        if (length > maxLength) {\n            maxLength = length;\n        \
    \    maxString = strings[i];\n        }\n    }\n    return maxString;\n}\n/*\n\
    \ Out of list of strings, return the longest one. Return the first one in case\
    \ of multiple\n    strings of the same length. Return None in case the input list\
    \ is empty.\n                \n*/\nNullable!(string) longest(string[] strings,\
    \ char separator) \n{\n    if (strings.length == 0) {\n        return null;\n\
    \    }\n    var maxLength = 0;\n    var maxString = \"\";\n    for (var i = 0;\
    \ i <strings.length; ++i) {\n        var length = strings[i].length;\n       \
    \ if (length > maxLength) {\n            maxLength = length;\n            maxString\
    \ = strings[i];\n        }\n    }\n    return maxString;\n}\n/*\n Out of list\
    \ of strings, return the longest one. Return the first one in case of multiple\n\
    \    strings of the same length. Return None in case the input list is empty.\n\
    \                \n*/\nNullable!(string) longest(string[] strings, char separator,\
    \ int startIndex) \n{\n    if (strings.length == 0) {\n        return null;\n\
    \    }\n    var maxLength = 0;\n    var maxString = \"\";\n    for (var i = startIndex;\
    \ i < strings.length; ++i) {\n        var length = strings[i].length;\n      \
    \  if (length > maxLength) {\n            maxLength = length;\n            maxString\
    \ = strings[i];\n        }\n    }\n    return maxString;\n\nunittest\n{\n    alias\
    \ candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwavtnjpj.d(108): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwavtnjpj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164474
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    int? maxLength = null;\n\
    \    foreach (string s in strings) {\n        if (maxLength == null || s.length()\
    \ > maxLength.Value()) {\n            maxLength = s.length;\n        }\n    }\n\
    \    return maxLength;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n\
    \        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n\
    \        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpmz_3f32k.d(10): Error: no identifier for declarator `int`

    /tmp/tmpmz_3f32k.d(10): Error: found `?` instead of statement

    /tmp/tmpmz_3f32k.d(11): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmz_3f32k.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164474
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach(string; strings)\
    \ \n    {\n        if(string.length == strings.length) \n        {\n         \
    \   return string;\n        }\n    }\n    return null;\n}\nunittest\n{\n    alias\
    \ candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp956fdac5.d(14): Error: cannot implicitly convert expression `string`
    of type `string` to `Nullable!string`

    /tmp/tmp956fdac5.d(17): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp956fdac5.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    var maxLength = 0;\n\
    \    var maxString = \"\";\n    foreach(var s in strings) {\n        var length\
    \ = s.length();\n        if(length > maxLength) {\n            maxLength = length;\n\
    \            maxString = s;\n        }\n    }\n    return maxString;\n}\nunittest\n\
    {\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp3z7t9cv_.d(12): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3z7t9cv_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164476
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach(string; strings)\
    \ {\n        if(string.length > longest.length)\n            longest = string;\n\
    \    }\n    return longest;\n}\n/*\n Out of list of strings, return the longest\
    \ one. Return the first one in case of multiple\n    strings of the same length.\
    \ Return None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int startIndex) \n{\n    foreach(string; strings)\
    \ {\n        if(string.length > longest.length)\n            longest = string;\n\
    \    }\n    return longest;\n}\n/*\n Out of list of strings, return the longest\
    \ one. Return the first one in case of multiple\n    strings of the same length.\
    \ Return None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int startIndex, int endIndex) \n{\n    foreach(string;\
    \ strings) {\n        if(string.length > longest.length)\n            longest\
    \ = string;\n    }\n    return longest;\n}\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings, char character) \n{\n    foreach(string;\
    \ strings) {\n        if(string.length > longest.length)\n            longest\
    \ = string;\n    }\n    return longest;\n}\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings, char character, int startIndex)\
    \ \n{\n    foreach(string; strings) {\n        if(string.length > longest.length)\n\
    \            longest = string;\n    }\n    return longest;\n}\n/*\n Out of list\
    \ of strings, return the longest one. Return the first one in case of multiple\n\
    \    strings of the same length. Return None in case the input list is empty.\n\
    \                \n*/\nNullable!(string) longest(string[] strings, char character,\
    \ int startIndex, int endIndex) \n{\n    foreach(string; strings) {\n        if(string.length\
    \ > longest.length)\n            longest = string;\n    }\n    return longest;\n\
    }\n/*\n Out of list of strings, return the longest one. Return the first one in\
    \ case of multiple\n    strings of the same length. Return None in case the input\
    \ list is empty.\n                \n*/\nNullable!(string) longest(string[] strings,\
    \ char character, int startIndex, int endIndex, bool caseSensitive) \n{\n    foreach(string;\
    \ strings) {\n        if(string.length > longest.length)\n\nunittest\n{\n    alias\
    \ candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpt5r9f_6c.d(91): Error: found `unittest` instead of statement

    /tmp/tmpt5r9f_6c.d(111): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt5r9f_6c.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164474
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    var longest = strings[0];\n\
    \    var longestLength = longest.length;\n    for(var i = 1; i < strings.length;\
    \ ++i)\n    {\n        var s = strings[i];\n        var length = s.length;\n \
    \       if(length > longestLength)\n        {\n            longest = s;\n    \
    \        longestLength = length;\n        }\n    }\n    return longest;\n}\nunittest\n\
    {\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpddh_jm_j.d(10): Error: undefined identifier `var`

    /tmp/tmpddh_jm_j.d(11): Error: undefined identifier `var`

    /tmp/tmpddh_jm_j.d(12): Error: undefined identifier `var`

    /tmp/tmpddh_jm_j.d(14): Error: undefined identifier `var`

    /tmp/tmpddh_jm_j.d(15): Error: undefined identifier `var`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpddh_jm_j.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length ==\
    \ 0) {\n        return null;\n    }\n    var longest = strings[0];\n    for (var\
    \ i = 1; i < strings.length; i++) {\n        if (strings[i].length >= longest.length)\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest;\n\
    }\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpy3xal2tr.d(13): Error: undefined identifier `var`

    /tmp/tmpy3xal2tr.d(14): Error: undefined identifier `var`

    /tmp/tmpy3xal2tr.d(11): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpy3xal2tr.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164477
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach(string s in strings)\n\
    \    {\n        if(s.length() > longest.length)\n            longest = s;\n  \
    \  }\n    return longest;\n}\n/*\n Out of list of strings, return the longest\
    \ one. Return the first one in case of multiple\n    strings of the same length.\
    \ Return None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int start) \n{\n    foreach(string s in strings)\n\
    \    {\n        if(s.length() > longest.length)\n            longest = s;\n  \
    \  }\n    return longest;\n}\n/*\n Out of list of strings, return the longest\
    \ one. Return the first one in case of multiple\n    strings of the same length.\
    \ Return None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int start, int end) \n{\n    foreach(string s in strings)\n\
    \    {\n        if(s.length() > longest.length)\n            longest = s;\n  \
    \  }\n    return longest;\n}\n/*\n Out of list of strings, return the longest\
    \ one. Return the first one in case of multiple\n    strings of the same length.\
    \ Return None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int start, int end, int step) \n{\n    foreach(string\
    \ s in strings)\n    {\n        if(s.length() > longest.length)\n            longest\
    \ = s;\n    }\n    return longest;\n}\n/*\n Out of list of strings, return the\
    \ longest one. Return the first one in case of multiple\n    strings of the same\
    \ length. Return None in case the input list is empty.\n                \n*/\n\
    Nullable!(string) longest(string[] strings, int start, int end, int step, string\
    \ separator) \n{\n    foreach(string s in strings)\n    {\n        if(s.length()\
    \ > longest.length)\n            longest = s;\n    }\n    return longest;\n}\n\
    /*\n Out of list of strings, return the longest one. Return the first one in case\
    \ of multiple\n    strings of the same length. Return None in case the input list\
    \ is empty.\n                \n*/\nNullable!(string) longest(string[] strings,\
    \ int start, int end, int step, string separator, int startIndex) \n{\n    foreach(string\
    \ s in strings)\n    {\n        if(s.length() > longest.length)\n            longest\
    \ = s;\n    }\n    return longest;\n}\n/*\n Out of list of strings, return the\
    \ longest one. Return the first one in case of multiple\n    strings of the same\
    \ length. Return None in case the input list is empty.\n                \n*/\n\
    Nullable!(string) longest(string[] strings, int start, int end, int step, string\
    \ separator, int \nunittest\n{\n    alias candidate = longest;\n\n{\n        auto\
    \ result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull &&\
    \ result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\"\
    , \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get\
    \ == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpx_rbzmtp.d(10): Error: found `in` when expecting `;`

    /tmp/tmpx_rbzmtp.d(24): Error: found `in` when expecting `;`

    /tmp/tmpx_rbzmtp.d(38): Error: found `in` when expecting `;`

    /tmp/tmpx_rbzmtp.d(52): Error: found `in` when expecting `;`

    /tmp/tmpx_rbzmtp.d(66): Error: found `in` when expecting `;`

    /tmp/tmpx_rbzmtp.d(80): Error: found `in` when expecting `;`

    /tmp/tmpx_rbzmtp.d(93): Error: found `unittest` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx_rbzmtp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164476
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach(string; strings)\n\
    \    {\n        if(string.length == strings.length)\n            return string;\n\
    \    }\n    return null;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n\
    \        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n\
    \        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0hb1wxbw.d(13): Error: cannot implicitly convert expression `string`
    of type `string` to `Nullable!string`

    /tmp/tmp0hb1wxbw.d(15): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0hb1wxbw.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164476
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach(string s in strings)\
    \ {\n        if(s.length() > longest.length)\n            longest = s;\n    }\n\
    \    return longest;\n}\n/*\n Out of list of strings, return the longest one.\
    \ Return the first one in case of multiple\n    strings of the same length. Return\
    \ None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int startIndex) \n{\n    foreach(string s in strings)\
    \ {\n        if(s.length() > longest.length)\n            longest = s;\n    }\n\
    \    return longest;\n}\n/*\n Out of list of strings, return the longest one.\
    \ Return the first one in case of multiple\n    strings of the same length. Return\
    \ None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int startIndex, int endIndex) \n{\n    foreach(string\
    \ s in strings) {\n        if(s.length() > longest.length)\n            longest\
    \ = s;\n    }\n    return longest;\n}\n/*\n Out of list of strings, return the\
    \ longest one. Return the first one in case of multiple\n    strings of the same\
    \ length. Return None in case the input list is empty.\n                \n*/\n\
    Nullable!(string) longest(string[] strings, char separator) \n{\n    foreach(string\
    \ s in strings) {\n        if(s.length() > longest.length)\n            longest\
    \ = s;\n    }\n    return longest;\n}\n/*\n Out of list of strings, return the\
    \ longest one. Return the first one in case of multiple\n    strings of the same\
    \ length. Return None in case the input list is empty.\n                \n*/\n\
    Nullable!(string) longest(string[] strings, char separator, int startIndex) \n\
    {\n    foreach(string s in strings) {\n        if(s.length() > longest.length)\n\
    \            longest = s;\n    }\n    return longest;\n}\n/*\n Out of list of\
    \ strings, return the longest one. Return the first one in case of multiple\n\
    \    strings of the same length. Return None in case the input list is empty.\n\
    \                \n*/\nNullable!(string) longest(string[] strings, char separator,\
    \ int startIndex, int endIndex) \n{\n    foreach(string s in strings) {\n    \
    \    if(s.length() > longest.length)\n            longest = s;\n    }\n    return\
    \ longest;\n}\n/*\n Out of list of strings, return the longest one. Return the\
    \ first one in case of multiple\n    strings of the same length. Return None in\
    \ case the input list is empty.\n                \n*/\nNullable!(string) longest(string[]\
    \ strings, char separator, char otherSeparator) \n{\n    foreach(string s in strings)\
    \ {\n        if(s.length() > longest.length)\n            longest = \nunittest\n\
    {\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpthr_i4bj.d(10): Error: found `in` when expecting `;`

    /tmp/tmpthr_i4bj.d(23): Error: found `in` when expecting `;`

    /tmp/tmpthr_i4bj.d(36): Error: found `in` when expecting `;`

    /tmp/tmpthr_i4bj.d(49): Error: found `in` when expecting `;`

    /tmp/tmpthr_i4bj.d(62): Error: found `in` when expecting `;`

    /tmp/tmpthr_i4bj.d(75): Error: found `in` when expecting `;`

    /tmp/tmpthr_i4bj.d(88): Error: found `in` when expecting `;`

    /tmp/tmpthr_i4bj.d(91): Error: expression expected, not `unittest`

    /tmp/tmpthr_i4bj.d(92): Error: found `{` when expecting `;` following statement

    /tmp/tmpthr_i4bj.d(111): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpthr_i4bj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164476
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach(string; strings)\
    \ {\n        if(string.length > longest.length)\n            longest = string;\n\
    \    }\n    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\n\
    {\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n\
    {\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpg1qfhgeu.d(11): Error: function `tmpg1qfhgeu.longest(string[] strings)`
    is not callable using argument types `()`

    /tmp/tmpg1qfhgeu.d(12): Error: function `tmpg1qfhgeu.longest(string[] strings)`
    is not callable using argument types `(string)`

    /tmp/tmpg1qfhgeu.d(12):        cannot pass argument `string` of type `string`
    to parameter `string[] strings`

    /tmp/tmpg1qfhgeu.d(14): Error: function `tmpg1qfhgeu.longest(string[] strings)`
    is not callable using argument types `()`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg1qfhgeu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach(string s in strings)\n\
    \    {\n        if(s.length() > longest.length)\n        {\n            longest\
    \ = s;\n        }\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate\
    \ = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8l7x_mhq.d(10): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8l7x_mhq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    int? maxLength = null;\n\
    \    foreach(string? s in strings) {\n        if (maxLength == null || s.length()\
    \ > maxLength) {\n            maxLength = s.length;\n        }\n    }\n    return\
    \ maxLength;\n}\n/*\n Out of list of strings, return the longest one. Return the\
    \ first one in case of multiple\n    strings of the same length. Return None in\
    \ case the input list is empty.\n                \n*/\nNullable!(string) longest(string[]\
    \ strings, int length) \n{\n    int? maxLength = null;\n    foreach(string? s\
    \ in strings) {\n        if (maxLength == null || s.length() > maxLength) {\n\
    \            maxLength = s.length;\n        }\n    }\n    return maxLength;\n\
    }\n/*\n Out of list of strings, return the longest one. Return the first one in\
    \ case of multiple\n    strings of the same length. Return None in case the input\
    \ list is empty.\n                \n*/\nNullable!(string) longest(string[] strings,\
    \ string length) \n{\n    int? maxLength = null;\n    foreach(string? s in strings)\
    \ {\n        if (maxLength == null || s.length() > maxLength) {\n            maxLength\
    \ = s.length;\n        }\n    }\n    return maxLength;\n}\n/*\n Out of list of\
    \ strings, return the longest one. Return the first one in case of multiple\n\
    \    strings of the same length. Return None in case the input list is empty.\n\
    \                \n*/\nNullable!(string) longest(string[] strings, char length)\
    \ \n{\n    int? maxLength = null;\n    foreach(string? s in strings) {\n     \
    \   if (maxLength == null || s.length() > maxLength) {\n            maxLength\
    \ = s.length;\n        }\n    }\n    return maxLength;\n}\n/*\n Out of list of\
    \ strings, return the longest one. Return the first one in case of multiple\n\
    \    strings of the same length. Return None in case the input list is empty.\n\
    \                \n*/\nNullable!(string) longest(string[] strings, char length,\
    \ int start) \n{\n    int? maxLength = null;\n    foreach(string? s in strings)\
    \ {\n        if (maxLength == null || s.length() > maxLength) {\n            maxLength\
    \ = s.length;\n        }\n    }\n    return maxLength;\n}\n/*\n Out of list of\
    \ strings, return the longest one. Return the first one in case of multiple\n\
    \    strings of the same length. Return None in case the input list is empty.\n\
    \                \n*/\nNullable!(string) longest(string[] strings, char length,\
    \ int start, int end) \n{\n    int? maxLength = null;\n    foreach(string? s in\
    \ strings) {\n        if (maxLength == null || s.length() > maxLength) {\n   \
    \         maxLength = s.length;\n        }\n    }\n    return maxLength;\n}\n\
    /*\n \nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result =\
    \ candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result\
    \ = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get\
    \ == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\"\
    , \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get ==\
    \ \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpvy4scscg.d(10): Error: no identifier for declarator `int`

    /tmp/tmpvy4scscg.d(10): Error: found `?` instead of statement

    /tmp/tmpvy4scscg.d(11): Error: no identifier for declarator `string`

    /tmp/tmpvy4scscg.d(11): Error: found `?` when expecting `;`

    /tmp/tmpvy4scscg.d(25): Error: no identifier for declarator `int`

    /tmp/tmpvy4scscg.d(25): Error: found `?` instead of statement

    /tmp/tmpvy4scscg.d(26): Error: no identifier for declarator `string`

    /tmp/tmpvy4scscg.d(26): Error: found `?` when expecting `;`

    /tmp/tmpvy4scscg.d(40): Error: no identifier for declarator `int`

    /tmp/tmpvy4scscg.d(40): Error: found `?` instead of statement

    /tmp/tmpvy4scscg.d(41): Error: no identifier for declarator `string`

    /tmp/tmpvy4scscg.d(41): Error: found `?` when expecting `;`

    /tmp/tmpvy4scscg.d(55): Error: no identifier for declarator `int`

    /tmp/tmpvy4scscg.d(55): Error: found `?` instead of statement

    /tmp/tmpvy4scscg.d(56): Error: no identifier for declarator `string`

    /tmp/tmpvy4scscg.d(56): Error: found `?` when expecting '
  stdout: ''
  timestamp: 1660164476
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    int? maxLength = null;\n\
    \    foreach(string? s in strings) {\n        int length = s.length();\n     \
    \   if (maxLength == null || maxLength.Value < length) {\n            maxLength\
    \ = length;\n        }\n    }\n    return maxLength;\n}\n/*\n Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return None in case the input list is empty.\n         \
    \       \n*/\nNullable!(string) longest(string[] strings, int lengthLimit) \n\
    {\n    int? maxLength = null;\n    foreach(string? s in strings) {\n        int\
    \ length = s.length();\n        if (maxLength == null || maxLength.Value < length)\
    \ {\n            maxLength = length;\n        }\n        if (length >= lengthLimit)\
    \ {\n            return s;\n        }\n    }\n    return maxLength;\n}\n/*\n Out\
    \ of list of strings, return the longest one. Return the first one in case of\
    \ multiple\n    strings of the same length. Return None in case the input list\
    \ is empty.\n                \n*/\nNullable!(string) longest(string[] strings,\
    \ int lengthLimit, int maxLength) \n{\n    int? maxLength = null;\n    foreach(string?\
    \ s in strings) {\n        int length = s.length();\n        if (maxLength ==\
    \ null || maxLength.Value < length) {\n            maxLength = length;\n     \
    \   }\n        if (length >= lengthLimit) {\n            return s;\n        }\n\
    \        if (maxLength == null || maxLength.Value > length) {\n            maxLength\
    \ = length;\n        }\n    }\n    return maxLength;\n}\n/*\n Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return None in case the input list is empty.\n         \
    \       \n*/\nNullable!(string) longest(string[] strings, int lengthLimit, int\
    \ maxLength, int minLength) \n{\n    int? maxLength = null;\n    foreach(string?\
    \ s in strings) {\n        int length = s.length();\n        if (maxLength ==\
    \ null || maxLength.Value < length) {\n            maxLength = length;\n     \
    \   }\n        if (length >= lengthLimit) {\n            return s;\n        }\n\
    \        if (maxLength == null || maxLength.Value > length) {\n            maxLength\
    \ = length;\n        }\n        if (length < minLength) {\n            return\
    \ s;\n        }\n    }\n    return maxLength;\n}\n/*\n Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return None in case the input list is empty.\n         \
    \       \n*/\nNullable!(string) longest(string[] strings, int lengthLimit, int\
    \ maxLength, int minLength, int maxCount) \n{\n    int? maxLength = null;\n  \
    \  foreach(string? s in \nunittest\n{\n    alias candidate = longest;\n\n{\n \
    \       auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n\
    \        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8llhbhc3.d(10): Error: no identifier for declarator `int`

    /tmp/tmp8llhbhc3.d(10): Error: found `?` instead of statement

    /tmp/tmp8llhbhc3.d(11): Error: no identifier for declarator `string`

    /tmp/tmp8llhbhc3.d(11): Error: found `?` when expecting `;`

    /tmp/tmp8llhbhc3.d(26): Error: no identifier for declarator `int`

    /tmp/tmp8llhbhc3.d(26): Error: found `?` instead of statement

    /tmp/tmp8llhbhc3.d(27): Error: no identifier for declarator `string`

    /tmp/tmp8llhbhc3.d(27): Error: found `?` when expecting `;`

    /tmp/tmp8llhbhc3.d(45): Error: no identifier for declarator `int`

    /tmp/tmp8llhbhc3.d(45): Error: found `?` instead of statement

    /tmp/tmp8llhbhc3.d(46): Error: no identifier for declarator `string`

    /tmp/tmp8llhbhc3.d(46): Error: found `?` when expecting `;`

    /tmp/tmp8llhbhc3.d(67): Error: no identifier for declarator `int`

    /tmp/tmp8llhbhc3.d(67): Error: found `?` instead of statement

    /tmp/tmp8llhbhc3.d(68): Error: no identifier for declarator `string`

    /tmp/tmp8llhbhc3.d(68): Error: found `?` when expecting '
  stdout: ''
  timestamp: 1660164476
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    var longest = strings[0];\n\
    \    var longestLength = longest.length;\n    for(var i = 1; i < strings.length;\
    \ ++i)\n    {\n        var s = strings[i];\n        if(s.length != longestLength)\n\
    \        {\n            return longest;\n        }\n        if(s.compare(longest)\
    \ > 0)\n        {\n            longest = s;\n            longestLength = longest.length;\n\
    \        }\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate =\
    \ longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp31_72c30.d(10): Error: undefined identifier `var`

    /tmp/tmp31_72c30.d(11): Error: undefined identifier `var`

    /tmp/tmp31_72c30.d(12): Error: undefined identifier `var`

    /tmp/tmp31_72c30.d(14): Error: undefined identifier `var`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp31_72c30.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164477
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach(string; strings)\
    \ \n    {\n        if(string.length > longest.length) longest = string;\n    }\n\
    \    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n  \
    \      auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n\
    \        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpv3vhk_of.d(12): Error: function `tmpv3vhk_of.longest(string[] strings)`
    is not callable using argument types `()`

    /tmp/tmpv3vhk_of.d(12): Error: function `tmpv3vhk_of.longest(string[] strings)`
    is not callable using argument types `(string)`

    /tmp/tmpv3vhk_of.d(12):        cannot pass argument `string` of type `string`
    to parameter `string[] strings`

    /tmp/tmpv3vhk_of.d(14): Error: function `tmpv3vhk_of.longest(string[] strings)`
    is not callable using argument types `()`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv3vhk_of.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164477
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    var longest = strings[0];\n\
    \    var longestLength = longest.length;\n    for(var i = 1; i < strings.length;\
    \ ++i)\n    {\n        var s = strings[i];\n        if(s.length != longestLength)\n\
    \        {\n            return longest;\n        }\n        if(s.compare(longest)\
    \ > 0)\n        {\n            longest = s;\n            longestLength = s.length;\n\
    \        }\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate =\
    \ longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp6e3btjyb.d(10): Error: undefined identifier `var`

    /tmp/tmp6e3btjyb.d(11): Error: undefined identifier `var`

    /tmp/tmp6e3btjyb.d(12): Error: undefined identifier `var`

    /tmp/tmp6e3btjyb.d(14): Error: undefined identifier `var`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6e3btjyb.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164477
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    int? maxLength = null;\n\
    \    foreach (string s in strings) {\n        if (maxLength == null || s.length()\
    \ > maxLength.Value()) {\n            maxLength = s.length;\n        }\n    }\n\
    \    return maxLength;\n}\n/*\n Out of list of strings, return the longest one.\
    \ Return the first one in case of multiple\n    strings of the same length. Return\
    \ None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int maxLength) \n{\n    foreach (string s in strings)\
    \ {\n        if (s.length() > maxLength) {\n            return s;\n        }\n\
    \    }\n    return null;\n}\n/*\n Out of list of strings, return the longest one.\
    \ Return the first one in case of multiple\n    strings of the same length. Return\
    \ None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int maxLength, int startIndex) \n{\n    foreach (string\
    \ s in strings) {\n        if (s.length() > maxLength) {\n            return s;\n\
    \        }\n    }\n    return null;\n}\n/*\n Out of list of strings, return the\
    \ longest one. Return the first one in case of multiple\n    strings of the same\
    \ length. Return None in case the input list is empty.\n                \n*/\n\
    Nullable!(string) longest(string[] strings, int maxLength, int startIndex, int\
    \ endIndex) \n{\n    foreach (string s in strings) {\n        if (s.length() >\
    \ maxLength) {\n            return s;\n        }\n    }\n    return null;\n}\n\
    /*\n Out of list of strings, return the longest one. Return the first one in case\
    \ of multiple\n    strings of the same length. Return None in case the input list\
    \ is empty.\n                \n*/\nNullable!(string) longest(string[] strings,\
    \ int maxLength, int startIndex, int endIndex, int maxLength) \n{\n    foreach\
    \ (string s in strings) {\n        if (s.length() > maxLength) {\n           \
    \ return s;\n        }\n    }\n    return null;\n}\n/*\n Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return None in case the input list is empty.\n         \
    \       \n*/\nNullable!(string) longest(string[] strings, int maxLength, int startIndex,\
    \ int endIndex, int maxLength, int startIndex) \n{\n    foreach (string s in strings)\
    \ {\n        if (s.length() > maxLength) {\n            return s;\n        }\n\
    \    }\n    return null;\n}\n/*\n Out of list of strings, return the longest one.\
    \ Return the first one in case of multiple\n    strings of the same length. Return\
    \ None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int maxLength\nunittest\n{\n    alias candidate =\
    \ longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpduts9d76.d(10): Error: no identifier for declarator `int`

    /tmp/tmpduts9d76.d(10): Error: found `?` instead of statement

    /tmp/tmpduts9d76.d(11): Error: found `in` when expecting `;`

    /tmp/tmpduts9d76.d(25): Error: found `in` when expecting `;`

    /tmp/tmpduts9d76.d(39): Error: found `in` when expecting `;`

    /tmp/tmpduts9d76.d(53): Error: found `in` when expecting `;`

    /tmp/tmpduts9d76.d(67): Error: found `in` when expecting `;`

    /tmp/tmpduts9d76.d(81): Error: found `in` when expecting `;`

    /tmp/tmpduts9d76.d(94): Error: found `unittest` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpduts9d76.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164476
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach (string s in\
    \ strings) {\n        if (s.length() > longest.length)\n            longest =\
    \ s;\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp4dg4o4dz.d(10): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4dg4o4dz.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164474
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach (string s in\
    \ strings) {\n        if (s.length() > longest.length)\n            longest =\
    \ s;\n    }\n    return longest;\n}\n/*\n Out of list of strings, return the longest\
    \ one. Return the first one in case of multiple\n    strings of the same length.\
    \ Return None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int startIndex) \n{\n    foreach (string s in strings)\
    \ {\n        if (s.length() > longest.length)\n            longest = s;\n    }\n\
    \    return longest;\n}\n/*\n Out of list of strings, return the longest one.\
    \ Return the first one in case of multiple\n    strings of the same length. Return\
    \ None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int startIndex, int endIndex) \n{\n    foreach (string\
    \ s in strings) {\n        if (s.length() > longest.length)\n            longest\
    \ = s;\n    }\n    return longest;\n}\n/*\n Out of list of strings, return the\
    \ longest one. Return the first one in case of multiple\n    strings of the same\
    \ length. Return None in case the input list is empty.\n                \n*/\n\
    Nullable!(string) longest(string[] strings, char separator) \n{\n    foreach (string\
    \ s in strings) {\n        if (s.length() > longest.length)\n            longest\
    \ = s;\n    }\n    return longest;\n}\n/*\n Out of list of strings, return the\
    \ longest one. Return the first one in case of multiple\n    strings of the same\
    \ length. Return None in case the input list is empty.\n                \n*/\n\
    Nullable!(string) longest(string[] strings, char separator, int startIndex) \n\
    {\n    foreach (string s in strings) {\n        if (s.length() > longest.length)\n\
    \            longest = s;\n    }\n    return longest;\n}\n/*\n Out of list of\
    \ strings, return the longest one. Return the first one in case of multiple\n\
    \    strings of the same length. Return None in case the input list is empty.\n\
    \                \n*/\nNullable!(string) longest(string[] strings, char separator,\
    \ int startIndex, int endIndex) \n{\n    foreach (string s in strings) {\n   \
    \     if (s.length() > longest.length)\n            longest = s;\n    }\n    return\
    \ longest;\n}\n/*\n Out of list of strings, return the longest one. Return the\
    \ first one in case of multiple\n    strings of the same length. Return None in\
    \ case the input list is empty.\n                \n*/\nNullable!(string) longest(string[]\
    \ strings, char separator, char otherSeparator) \n{\n    foreach (string s in\
    \ strings) {\n        if (s.length() > longest.length)\n            longest =\
    \ s;\n    }\n    return longest;\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpg8v2hbj1.d(10): Error: found `in` when expecting `;`

    /tmp/tmpg8v2hbj1.d(23): Error: found `in` when expecting `;`

    /tmp/tmpg8v2hbj1.d(36): Error: found `in` when expecting `;`

    /tmp/tmpg8v2hbj1.d(49): Error: found `in` when expecting `;`

    /tmp/tmpg8v2hbj1.d(62): Error: found `in` when expecting `;`

    /tmp/tmpg8v2hbj1.d(75): Error: found `in` when expecting `;`

    /tmp/tmpg8v2hbj1.d(88): Error: found `in` when expecting `;`

    /tmp/tmpg8v2hbj1.d(93): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg8v2hbj1.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164474
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    int? maxLength = null;\n\
    \    foreach (string s in strings) {\n        if (maxLength == null || s.length()\
    \ > maxLength.Value()) {\n            maxLength = s.length;\n        }\n    }\n\
    \    return maxLength;\n}\n/*\n Out of list of strings, return the longest one.\
    \ Return the first one in case of multiple\n    strings of the same length. Return\
    \ None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int maxLength) \n{\n    int? maxLength = null;\n \
    \   foreach (string s in strings) {\n        if (maxLength == null || s.length()\
    \ > maxLength.Value()) {\n            maxLength = s.length;\n        }\n    }\n\
    \    return maxLength;\n}\n/*\n Out of list of strings, return the longest one.\
    \ Return the first one in case of multiple\n    strings of the same length. Return\
    \ None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int maxLength, int startIndex) \n{\n    int? maxLength\
    \ = null;\n    foreach (string s in strings) {\n        if (maxLength == null\
    \ || s.length() > maxLength.Value()) {\n            maxLength = s.length;\n  \
    \      }\n    }\n    return maxLength;\n}\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings, int maxLength, int startIndex,\
    \ int endIndex) \n{\n    int? maxLength = null;\n    foreach (string s in strings)\
    \ {\n        if (maxLength == null || s.length() > maxLength.Value()) {\n    \
    \        maxLength = s.length;\n        }\n    }\n    return maxLength;\n}\n/*\n\
    \ Out of list of strings, return the longest one. Return the first one in case\
    \ of multiple\n    strings of the same length. Return None in case the input list\
    \ is empty.\n                \n*/\nNullable!(string) longest(string[] strings,\
    \ int maxLength, int startIndex, int endIndex, int maxLength) \n{\n    int? maxLength\
    \ = null;\n    foreach (string s in strings) {\n        if (maxLength == null\
    \ || s.length() > maxLength.Value()) {\n            maxLength = s.length;\n  \
    \      }\n    }\n    return maxLength;\n}\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings, int maxLength, int startIndex,\
    \ int endIndex, int maxLength, int startIndex) \n{\n    int? maxLength = null;\n\
    \    foreach (string \nunittest\n{\n    alias candidate = longest;\n\n{\n    \
    \    auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n  \
    \      auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpi93pw4zs.d(10): Error: no identifier for declarator `int`

    /tmp/tmpi93pw4zs.d(10): Error: found `?` instead of statement

    /tmp/tmpi93pw4zs.d(11): Error: found `in` when expecting `;`

    /tmp/tmpi93pw4zs.d(25): Error: no identifier for declarator `int`

    /tmp/tmpi93pw4zs.d(25): Error: found `?` instead of statement

    /tmp/tmpi93pw4zs.d(26): Error: found `in` when expecting `;`

    /tmp/tmpi93pw4zs.d(40): Error: no identifier for declarator `int`

    /tmp/tmpi93pw4zs.d(40): Error: found `?` instead of statement

    /tmp/tmpi93pw4zs.d(41): Error: found `in` when expecting `;`

    /tmp/tmpi93pw4zs.d(55): Error: no identifier for declarator `int`

    /tmp/tmpi93pw4zs.d(55): Error: found `?` instead of statement

    /tmp/tmpi93pw4zs.d(56): Error: found `in` when expecting `;`

    /tmp/tmpi93pw4zs.d(70): Error: no identifier for declarator `int`

    /tmp/tmpi93pw4zs.d(70): Error: found `?` instead of statement

    /tmp/tmpi93pw4zs.d(71): Error: found `in` when expecting `;`

    /tmp/tmpi93pw4zs.d(85): Error: no identifier for declarator `int`

    /tmp/tmpi93pw'
  stdout: ''
  timestamp: 1660164476
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach(string; strings)\
    \ {\n        if(string.length > longest.length)\n            longest = string;\n\
    \    }\n    return longest;\n}\n/*\n Out of list of strings, return the longest\
    \ one. Return the first one in case of multiple\n    strings of the same length.\
    \ Return None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings) \n{\n    foreach(string; strings) {\n        if(string.length\
    \ > longest.length)\n            longest = string;\n    }\n    return longest;\n\
    }\n/*\n Out of list of strings, return the longest one. Return the first one in\
    \ case of multiple\n    strings of the same length. Return None in case the input\
    \ list is empty.\n                \n*/\nNullable!(string) longest(string[] strings)\
    \ \n{\n    foreach(string; strings) {\n        if(string.length > longest.length)\n\
    \            longest = string;\n    }\n    return longest;\n}\n/*\n Out of list\
    \ of strings, return the longest one. Return the first one in case of multiple\n\
    \    strings of the same length. Return None in case the input list is empty.\n\
    \                \n*/\nNullable!(string) longest(string[] strings) \n{\n    foreach(string;\
    \ strings) {\n        if(string.length > longest.length)\n            longest\
    \ = string;\n    }\n    return longest;\n}\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach(string; strings)\
    \ {\n        if(string.length > longest.length)\n            longest = string;\n\
    \    }\n    return longest;\n}\n/*\n Out of list of strings, return the longest\
    \ one. Return the first one in case of multiple\n    strings of the same length.\
    \ Return None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings) \n{\n    foreach(string; strings) {\n        if(string.length\
    \ > longest.length)\n            longest = string;\n    }\n    return longest;\n\
    }\n/*\n Out of list of strings, return the longest one. Return the first one in\
    \ case of multiple\n    strings of the same length. Return None in case the input\
    \ list is empty.\n                \n*/\nNullable!(string) longest(string[] strings)\
    \ \n{\n    foreach(string; strings) {\n        if(string.length > longest.length)\n\
    \            longest = string;\n    }\n    return longest;\n}\n/*\n Out of list\
    \ of strings, return the longest one. Return the first one in case of multiple\n\
    \    strings of the same length. Return None \nunittest\n{\n    alias candidate\
    \ = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp8zktetya.d(94): Error: unterminated /* */ comment

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8zktetya.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164474
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach (string s in\
    \ strings) {\n        if (s.length() > longest.length)\n            longest =\
    \ s;\n    }\n    return longest;\n}\n/*\n Out of list of strings, return the longest\
    \ one. Return the first one in case of multiple\n    strings of the same length.\
    \ Return None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int startIndex) \n{\n    foreach (string s in strings)\
    \ {\n        if (s.length() > longest.length)\n            longest = s;\n    }\n\
    \    return longest;\n}\n/*\n Out of list of strings, return the longest one.\
    \ Return the first one in case of multiple\n    strings of the same length. Return\
    \ None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int startIndex, int endIndex) \n{\n    foreach (string\
    \ s in strings) {\n        if (s.length() > longest.length)\n            longest\
    \ = s;\n    }\n    return longest;\n}\n/*\n Out of list of strings, return the\
    \ longest one. Return the first one in case of multiple\n    strings of the same\
    \ length. Return None in case the input list is empty.\n                \n*/\n\
    Nullable!(string) longest(string[] strings, char character) \n{\n    foreach (string\
    \ s in strings) {\n        if (s.length() > longest.length)\n            longest\
    \ = s;\n    }\n    return longest;\n}\n/*\n Out of list of strings, return the\
    \ longest one. Return the first one in case of multiple\n    strings of the same\
    \ length. Return None in case the input list is empty.\n                \n*/\n\
    Nullable!(string) longest(string[] strings, char character, int startIndex) \n\
    {\n    foreach (string s in strings) {\n        if (s.length() > longest.length)\n\
    \            longest = s;\n    }\n    return longest;\n}\n/*\n Out of list of\
    \ strings, return the longest one. Return the first one in case of multiple\n\
    \    strings of the same length. Return None in case the input list is empty.\n\
    \                \n*/\nNullable!(string) longest(string[] strings, char character,\
    \ int startIndex, int endIndex) \n{\n    foreach (string s in strings) {\n   \
    \     if (s.length() > longest.length)\n            longest = s;\n    }\n    return\
    \ longest;\n}\n/*\n Out of list of strings, return the longest one. Return the\
    \ first one in case of multiple\n    strings of the same length. Return None in\
    \ case the input list is empty.\n                \n*/\nNullable!(string) longest(string[]\
    \ strings, char character, int startIndex, int endIndex, bool caseSensitive) \n\
    {\n    foreach (string s in strings) {\n        if (s.length() > longest.length)\n\
    \nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwkoqczgp.d(10): Error: found `in` when expecting `;`

    /tmp/tmpwkoqczgp.d(23): Error: found `in` when expecting `;`

    /tmp/tmpwkoqczgp.d(36): Error: found `in` when expecting `;`

    /tmp/tmpwkoqczgp.d(49): Error: found `in` when expecting `;`

    /tmp/tmpwkoqczgp.d(62): Error: found `in` when expecting `;`

    /tmp/tmpwkoqczgp.d(75): Error: found `in` when expecting `;`

    /tmp/tmpwkoqczgp.d(88): Error: found `in` when expecting `;`

    /tmp/tmpwkoqczgp.d(91): Error: found `unittest` instead of statement

    /tmp/tmpwkoqczgp.d(111): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwkoqczgp.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164474
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    var longest = strings[0];\n\
    \    var longestLength = longest.length;\n    for(var i = 1; i < strings.length;\
    \ ++i)\n    {\n        var s = strings[i];\n        if(s.length == longestLength)\n\
    \        {\n            longest = s;\n        }\n    }\n    return longest;\n\
    }\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpwp10r43v.d(10): Error: undefined identifier `var`

    /tmp/tmpwp10r43v.d(11): Error: undefined identifier `var`

    /tmp/tmpwp10r43v.d(12): Error: undefined identifier `var`

    /tmp/tmpwp10r43v.d(14): Error: undefined identifier `var`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwp10r43v.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164476
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    int? maxLength = null;\n\
    \    foreach(string? s in strings) {\n        if (maxLength == null || s.length()\
    \ > maxLength.Value()) {\n            maxLength = s;\n        }\n    }\n    return\
    \ maxLength;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto\
    \ result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull &&\
    \ result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\"\
    , \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get\
    \ == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmph175p663.d(10): Error: no identifier for declarator `int`

    /tmp/tmph175p663.d(10): Error: found `?` instead of statement

    /tmp/tmph175p663.d(11): Error: no identifier for declarator `string`

    /tmp/tmph175p663.d(11): Error: found `?` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph175p663.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164476
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    int? maxLength = null;\n\
    \    foreach (string s in strings) {\n        if (maxLength == null || s.length()\
    \ > maxLength) {\n            maxLength = s.length;\n        }\n    }\n    return\
    \ maxLength;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto\
    \ result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull &&\
    \ result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\"\
    , \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get\
    \ == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpkkecvotq.d(10): Error: no identifier for declarator `int`

    /tmp/tmpkkecvotq.d(10): Error: found `?` instead of statement

    /tmp/tmpkkecvotq.d(11): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpkkecvotq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164474
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach(string; strings)\
    \ {\n        if(string.length > longest.length)\n            longest = string;\n\
    \    }\n    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\n\
    {\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n\
    {\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpg1qfhgeu.d(11): Error: function `tmpg1qfhgeu.longest(string[] strings)`
    is not callable using argument types `()`

    /tmp/tmpg1qfhgeu.d(12): Error: function `tmpg1qfhgeu.longest(string[] strings)`
    is not callable using argument types `(string)`

    /tmp/tmpg1qfhgeu.d(12):        cannot pass argument `string` of type `string`
    to parameter `string[] strings`

    /tmp/tmpg1qfhgeu.d(14): Error: function `tmpg1qfhgeu.longest(string[] strings)`
    is not callable using argument types `()`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg1qfhgeu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length ==\
    \ 0) {\n        return null;\n    }\n    int maxLength = 0;\n    string maxString\
    \ = null;\n    for (string s in strings) {\n        if (s.length() > maxLength)\
    \ {\n            maxLength = s.length();\n            maxString = s;\n       \
    \ }\n    }\n    return maxString;\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5l4ag6vi.d(15): Error: semicolon expected, not `in`

    /tmp/tmp5l4ag6vi.d(15): Error: expression expected, not `in`

    /tmp/tmp5l4ag6vi.d(15): Error: found `strings` when expecting `;` following `for`
    condition

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5l4ag6vi.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164476
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach(string; strings)\
    \ {\n        if(string.length() > longest.length()) {\n            longest = string;\n\
    \        }\n    }\n    return longest;\n}\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings, int startIndex) \n{\n    foreach(string;\
    \ strings) {\n        if(string.length() > longest.length()) {\n            longest\
    \ = string;\n        }\n    }\n    return longest;\n}\n/*\n Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return None in case the input list is empty.\n         \
    \       \n*/\nNullable!(string) longest(string[] strings, int startIndex, int\
    \ endIndex) \n{\n    foreach(string; strings) {\n        if(string.length() >\
    \ longest.length()) {\n            longest = string;\n        }\n    }\n    return\
    \ longest;\n}\n/*\n Out of list of strings, return the longest one. Return the\
    \ first one in case of multiple\n    strings of the same length. Return None in\
    \ case the input list is empty.\n                \n*/\nNullable!(string) longest(string[]\
    \ strings, char character) \n{\n    foreach(string; strings) {\n        if(string.length()\
    \ > longest.length()) {\n            longest = string;\n        }\n    }\n   \
    \ return longest;\n}\n/*\n Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \n*/\nNullable!(string) longest(string[]\
    \ strings, char character, int startIndex) \n{\n    foreach(string; strings) {\n\
    \        if(string.length() > longest.length()) {\n            longest = string;\n\
    \        }\n    }\n    return longest;\n}\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings, char character, int startIndex,\
    \ int endIndex) \n{\n    foreach(string; strings) {\n        if(string.length()\
    \ > longest.length()) {\n            longest = string;\n        }\n    }\n   \
    \ return longest;\n}\n/*\n Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \n*/\nNullable!(string) longest(string[]\
    \ strings, char character, int startIndex, int endIndex, bool caseSensitive\n\
    unittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpuiz919f2.d(93): Error: found `unittest` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuiz919f2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach(string; strings)\
    \ {\n        if(string.length == strings.length)\n            return string;\n\
    \    }\n    return None;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n\
    \        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n\
    \        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmprcdsvtl3.d(14): Error: undefined identifier `None`, did you mean
    struct `No`?

    /tmp/tmprcdsvtl3.d(12): Error: cannot implicitly convert expression `string` of
    type `string` to `Nullable!string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprcdsvtl3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164477
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    int? maxLength = null;\n\
    \    foreach(string? s in strings) {\n        if (maxLength == null || s.length()\
    \ > maxLength) {\n            maxLength = s.length();\n        }\n    }\n    return\
    \ maxLength;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto\
    \ result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull &&\
    \ result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\"\
    , \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get\
    \ == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfig26iep.d(10): Error: no identifier for declarator `int`

    /tmp/tmpfig26iep.d(10): Error: found `?` instead of statement

    /tmp/tmpfig26iep.d(11): Error: no identifier for declarator `string`

    /tmp/tmpfig26iep.d(11): Error: found `?` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfig26iep.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach(string; strings)\
    \ \n    {\n        if(string.length > longest.length) longest = string;\n    }\n\
    \    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n  \
    \      auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n\
    \        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpv3vhk_of.d(12): Error: function `tmpv3vhk_of.longest(string[] strings)`
    is not callable using argument types `()`

    /tmp/tmpv3vhk_of.d(12): Error: function `tmpv3vhk_of.longest(string[] strings)`
    is not callable using argument types `(string)`

    /tmp/tmpv3vhk_of.d(12):        cannot pass argument `string` of type `string`
    to parameter `string[] strings`

    /tmp/tmpv3vhk_of.d(14): Error: function `tmpv3vhk_of.longest(string[] strings)`
    is not callable using argument types `()`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpv3vhk_of.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164477
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    var longest:string =\
    \ Null!(string);\n    var longestLength:int = 0;\n    foreach(var s in strings)\
    \ {\n        if(longestLength < s.length) longestLength = s.length;\n        if(longest\
    \ == null || longestLength < s.length) longest = s;\n    }\n    return longest;\n\
    }\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpcy422l4f.d(10): Error: found `longest` when expecting `;` following
    statement

    /tmp/tmpcy422l4f.d(10): Error: found `:` instead of statement

    /tmp/tmpcy422l4f.d(11): Error: found `longestLength` when expecting `;` following
    statement

    /tmp/tmpcy422l4f.d(11): Error: found `:` instead of statement

    /tmp/tmpcy422l4f.d(12): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcy422l4f.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164476
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    var longest = strings[0];\n\
    \    foreach(var s in strings)\n    {\n        if(s.length == longest.length)\n\
    \        {\n            longest = s;\n        }\n    }\n    return longest;\n\
    }\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpoq2c2lkx.d(11): Error: found `in` when expecting `;`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpoq2c2lkx.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164476
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    int? maxLength = null;\n\
    \    foreach (string s in strings) {\n        if (maxLength == null || s.length()\
    \ > maxLength.Value()) {\n            maxLength = s.length;\n        }\n    }\n\
    \    return maxLength;\n}\n/*\n Out of list of strings, return the longest one.\
    \ Return the first one in case of multiple\n    strings of the same length. Return\
    \ None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int maxLength) \n{\n    foreach (string s in strings)\
    \ {\n        if (s.length() > maxLength) {\n            maxLength = s.length;\n\
    \        }\n    }\n    return maxLength;\n}\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings, int maxLength, int minLength)\
    \ \n{\n    foreach (string s in strings) {\n        if (s.length() > maxLength)\
    \ {\n            maxLength = s.length;\n        }\n        if (s.length() < minLength)\
    \ {\n            minLength = s.length;\n        }\n    }\n    return maxLength;\n\
    }\n/*\n Out of list of strings, return the longest one. Return the first one in\
    \ case of multiple\n    strings of the same length. Return None in case the input\
    \ list is empty.\n                \n*/\nNullable!(string) longest(string[] strings,\
    \ int maxLength, int minLength, int maxCount) \n{\n    foreach (string s in strings)\
    \ {\n        if (s.length() > maxLength) {\n            maxLength = s.length;\n\
    \        }\n        if (s.length() < minLength) {\n            minLength = s.length;\n\
    \        }\n        if (s.length() > maxCount) {\n            maxCount = s.length;\n\
    \        }\n    }\n    return maxLength;\n}\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings, int maxLength, int minLength,\
    \ int maxCount, int minCount) \n{\n    foreach (string s in strings) {\n     \
    \   if (s.length() > maxLength) {\n            maxLength = s.length;\n       \
    \ }\n        if (s.length() < minLength) {\n            minLength = s.length;\n\
    \        }\n        if (s.length() > maxCount) {\n            maxCount = s.length;\n\
    \        }\n        if (s.length() < minCount) {\n            minCount = s.length;\n\
    \        }\n    }\n    return maxLength;\n}\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpa2uaygzc.d(10): Error: no identifier for declarator `int`

    /tmp/tmpa2uaygzc.d(10): Error: found `?` instead of statement

    /tmp/tmpa2uaygzc.d(11): Error: found `in` when expecting `;`

    /tmp/tmpa2uaygzc.d(25): Error: found `in` when expecting `;`

    /tmp/tmpa2uaygzc.d(39): Error: found `in` when expecting `;`

    /tmp/tmpa2uaygzc.d(56): Error: found `in` when expecting `;`

    /tmp/tmpa2uaygzc.d(76): Error: found `in` when expecting `;`

    /tmp/tmpa2uaygzc.d(98): Error: found `unittest` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa2uaygzc.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164476
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach(string; strings)\
    \ {\n        if(string.length == strings.length)\n            return string;\n\
    \    }\n    return null;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n\
    \        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n\
    \        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp5r2y0si_.d(12): Error: cannot implicitly convert expression `string`
    of type `string` to `Nullable!string`

    /tmp/tmp5r2y0si_.d(14): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5r2y0si_.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164476
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach(string; strings)\
    \ {\n        if(string.length > longest.length)\n            longest = string;\n\
    \    }\n    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\n\
    {\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n\
    {\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpg1qfhgeu.d(11): Error: function `tmpg1qfhgeu.longest(string[] strings)`
    is not callable using argument types `()`

    /tmp/tmpg1qfhgeu.d(12): Error: function `tmpg1qfhgeu.longest(string[] strings)`
    is not callable using argument types `(string)`

    /tmp/tmpg1qfhgeu.d(12):        cannot pass argument `string` of type `string`
    to parameter `string[] strings`

    /tmp/tmpg1qfhgeu.d(14): Error: function `tmpg1qfhgeu.longest(string[] strings)`
    is not callable using argument types `()`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpg1qfhgeu.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length ==\
    \ 0)\n        return null;\n    var longest = strings[0];\n    for (var i = 1;\
    \ i < strings.length; ++i) {\n        var length = strings[i].length;\n      \
    \  if (length > longest.length)\n            longest = strings[i];\n    }\n  \
    \  return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n    \
    \    auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n  \
    \      auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpqhwm8ak3.d(12): Error: undefined identifier `var`

    /tmp/tmpqhwm8ak3.d(13): Error: undefined identifier `var`

    /tmp/tmpqhwm8ak3.d(14): Error: undefined identifier `var`

    /tmp/tmpqhwm8ak3.d(11): Error: cannot implicitly convert expression `null` of
    type `typeof(null)` to `Nullable!string`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqhwm8ak3.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164477
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach (string s in\
    \ strings) {\n        if (s.length() > longest.length)\n            longest =\
    \ s;\n    }\n    return longest;\n}\n/*\n Out of list of strings, return the longest\
    \ one. Return the first one in case of multiple\n    strings of the same length.\
    \ Return None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int start) \n{\n    foreach (string s in strings)\
    \ {\n        if (s.length() > longest.length)\n            longest = s;\n    }\n\
    \    return longest;\n}\n/*\n Out of list of strings, return the longest one.\
    \ Return the first one in case of multiple\n    strings of the same length. Return\
    \ None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int start, int end) \n{\n    foreach (string s in\
    \ strings) {\n        if (s.length() > longest.length)\n            longest =\
    \ s;\n    }\n    return longest;\n}\n/*\n Out of list of strings, return the longest\
    \ one. Return the first one in case of multiple\n    strings of the same length.\
    \ Return None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int start, int end, int step) \n{\n    foreach (string\
    \ s in strings) {\n        if (s.length() > longest.length)\n            longest\
    \ = s;\n    }\n    return longest;\n}\n/*\n Out of list of strings, return the\
    \ longest one. Return the first one in case of multiple\n    strings of the same\
    \ length. Return None in case the input list is empty.\n                \n*/\n\
    Nullable!(string) longest(string[] strings, int start, int end, int step, string\
    \ separator) \n{\n    foreach (string s in strings) {\n        if (s.length()\
    \ > longest.length)\n            longest = s;\n    }\n    return longest;\n}\n\
    /*\n Out of list of strings, return the longest one. Return the first one in case\
    \ of multiple\n    strings of the same length. Return None in case the input list\
    \ is empty.\n                \n*/\nNullable!(string) longest(string[] strings,\
    \ int start, int end, int step, string separator, int startIndex) \n{\n    foreach\
    \ (string s in strings) {\n        if (s.length() > longest.length)\n        \
    \    longest = s;\n    }\n    return longest;\n}\n/*\n Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return None in case the input list is empty.\n         \
    \       \n*/\nNullable!(string) longest(string[] strings, int start, int end,\
    \ int step, string separator, int startIndex, int endIndex) \n{\n    foreach (string\
    \ s in strings) {\n        if (s.length\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp_dpzx0is.d(10): Error: found `in` when expecting `;`

    /tmp/tmp_dpzx0is.d(23): Error: found `in` when expecting `;`

    /tmp/tmp_dpzx0is.d(36): Error: found `in` when expecting `;`

    /tmp/tmp_dpzx0is.d(49): Error: found `in` when expecting `;`

    /tmp/tmp_dpzx0is.d(62): Error: found `in` when expecting `;`

    /tmp/tmp_dpzx0is.d(75): Error: found `in` when expecting `;`

    /tmp/tmp_dpzx0is.d(88): Error: found `in` when expecting `;`

    /tmp/tmp_dpzx0is.d(90): Error: found `unittest` when expecting `)`

    /tmp/tmp_dpzx0is.d(110): Error: found `End of File` when expecting `}` following
    compound statement

    /tmp/tmp_dpzx0is.d(110): Error: found `End of File` when expecting `}` following
    compound statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_dpzx0is.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach(string s in strings)\
    \ {\n        if(s.length() > longest.length)\n            longest = s;\n    }\n\
    \    return longest;\n}\n/*\n Out of list of strings, return the longest one.\
    \ Return the first one in case of multiple\n    strings of the same length. Return\
    \ None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int startIndex) \n{\n    foreach(string s in strings)\
    \ {\n        if(s.length() > longest.length)\n            longest = s;\n    }\n\
    \    return longest;\n}\n/*\n Out of list of strings, return the longest one.\
    \ Return the first one in case of multiple\n    strings of the same length. Return\
    \ None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int startIndex, int endIndex) \n{\n    foreach(string\
    \ s in strings) {\n        if(s.length() > longest.length)\n            longest\
    \ = s;\n    }\n    return longest;\n}\n/*\n Out of list of strings, return the\
    \ longest one. Return the first one in case of multiple\n    strings of the same\
    \ length. Return None in case the input list is empty.\n                \n*/\n\
    Nullable!(string) longest(string[] strings, char c, int startIndex) \n{\n    foreach(string\
    \ s in strings) {\n        if(s.length() > longest.length)\n            longest\
    \ = s;\n    }\n    return longest;\n}\n/*\n Out of list of strings, return the\
    \ longest one. Return the first one in case of multiple\n    strings of the same\
    \ length. Return None in case the input list is empty.\n                \n*/\n\
    Nullable!(string) longest(string[] strings, char c, int startIndex, int endIndex)\
    \ \n{\n    foreach(string s in strings) {\n        if(s.length() > longest.length)\n\
    \            longest = s;\n    }\n    return longest;\n}\n/*\n Out of list of\
    \ strings, return the longest one. Return the first one in case of multiple\n\
    \    strings of the same length. Return None in case the input list is empty.\n\
    \                \n*/\nNullable!(string) longest(string[] strings, char c, int\
    \ startIndex, int endIndex, bool caseSensitive) \n{\n    foreach(string s in strings)\
    \ {\n        if(s.length() > longest.length)\n            longest = s;\n    }\n\
    \    return longest;\n}\n/*\n Out of list of strings, return the longest one.\
    \ Return the first one in case of multiple\n    strings of the same length. Return\
    \ None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, char c, int startIndex, int endIndex, bool caseSensitive,\
    \ int startIndexInclu\nunittest\n{\n    alias candidate = longest;\n\n{\n    \
    \    auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n  \
    \      auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp0j9976jj.d(10): Error: found `in` when expecting `;`

    /tmp/tmp0j9976jj.d(23): Error: found `in` when expecting `;`

    /tmp/tmp0j9976jj.d(36): Error: found `in` when expecting `;`

    /tmp/tmp0j9976jj.d(49): Error: found `in` when expecting `;`

    /tmp/tmp0j9976jj.d(62): Error: found `in` when expecting `;`

    /tmp/tmp0j9976jj.d(75): Error: found `in` when expecting `;`

    /tmp/tmp0j9976jj.d(87): Error: found `unittest` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0j9976jj.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164476
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\nunittest\n{\n    alias\
    \ candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpfgjsyt21.d(266): Error: found `unittest` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfgjsyt21.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164476
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    int? maxLength = null;\n\
    \    foreach (string s in strings) {\n        if (maxLength == null || s.length()\
    \ > maxLength.Value()) {\n            maxLength = s.length;\n        }\n    }\n\
    \    return maxLength;\n}\n/*\n Out of list of strings, return the longest one.\
    \ Return the first one in case of multiple\n    strings of the same length. Return\
    \ None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int maxLength) \n{\n    foreach (string s in strings)\
    \ {\n        if (s.length() > maxLength) {\n            return s;\n        }\n\
    \    }\n    return null;\n}\n/*\n Out of list of strings, return the longest one.\
    \ Return the first one in case of multiple\n    strings of the same length. Return\
    \ None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int maxLength, int startIndex) \n{\n    foreach (string\
    \ s in strings) {\n        if (s.length() > maxLength) {\n            return s;\n\
    \        }\n    }\n    return null;\n}\n/*\n Out of list of strings, return the\
    \ longest one. Return the first one in case of multiple\n    strings of the same\
    \ length. Return None in case the input list is empty.\n                \n*/\n\
    Nullable!(string) longest(string[] strings, int maxLength, int startIndex, int\
    \ endIndex) \n{\n    foreach (string s in strings) {\n        if (s.length() >\
    \ maxLength) {\n            return s;\n        }\n    }\n    return null;\n}\n\
    /*\n Out of list of strings, return the longest one. Return the first one in case\
    \ of multiple\n    strings of the same length. Return None in case the input list\
    \ is empty.\n                \n*/\nNullable!(string) longest(string[] strings,\
    \ int maxLength, int startIndex, int endIndex, int maxLength) \n{\n    foreach\
    \ (string s in strings) {\n        if (s.length() > maxLength) {\n           \
    \ return s;\n        }\n    }\n    return null;\n}\n/*\n Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return None in case the input list is empty.\n         \
    \       \n*/\nNullable!(string) longest(string[] strings, int maxLength, int startIndex,\
    \ int endIndex, int maxLength, int startIndex) \n{\n    foreach (string s in strings)\
    \ {\n        if (s.length() > maxLength) {\n            return s;\n        }\n\
    \    }\n    return null;\n}\n/*\n Out of list of strings, return the longest one.\
    \ Return the first one in case of multiple\n    strings of the same length. Return\
    \ None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int maxLength\nunittest\n{\n    alias candidate =\
    \ longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpduts9d76.d(10): Error: no identifier for declarator `int`

    /tmp/tmpduts9d76.d(10): Error: found `?` instead of statement

    /tmp/tmpduts9d76.d(11): Error: found `in` when expecting `;`

    /tmp/tmpduts9d76.d(25): Error: found `in` when expecting `;`

    /tmp/tmpduts9d76.d(39): Error: found `in` when expecting `;`

    /tmp/tmpduts9d76.d(53): Error: found `in` when expecting `;`

    /tmp/tmpduts9d76.d(67): Error: found `in` when expecting `;`

    /tmp/tmpduts9d76.d(81): Error: found `in` when expecting `;`

    /tmp/tmpduts9d76.d(94): Error: found `unittest` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpduts9d76.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164476
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach(string; strings)\
    \ {\n        if(string.length > longest.length)\n            longest = string;\n\
    \    }\n    return longest;\n}\n/*\n Out of list of strings, return the longest\
    \ one. Return the first one in case of multiple\n    strings of the same length.\
    \ Return None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int startIndex) \n{\n    foreach(string; strings)\
    \ {\n        if(string.length > longest.length)\n            longest = string;\n\
    \        if(startIndex == strings.length - 1)\n            return longest;\n \
    \   }\n    return longest;\n}\n/*\n Out of list of strings, return the longest\
    \ one. Return the first one in case of multiple\n    strings of the same length.\
    \ Return None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int startIndex, int endIndex) \n{\n    foreach(string;\
    \ strings) {\n        if(string.length > longest.length)\n            longest\
    \ = string;\n        if(startIndex == strings.length - 1 && endIndex == strings.length\
    \ - 1)\n            return longest;\n    }\n    return longest;\n}\n/*\n Out of\
    \ list of strings, return the longest one. Return the first one in case of multiple\n\
    \    strings of the same length. Return None in case the input list is empty.\n\
    \                \n*/\nNullable!(string) longest(string[] strings, int startIndex,\
    \ int endIndex, int maxLength) \n{\n    foreach(string; strings) {\n        if(string.length\
    \ > longest.length)\n            longest = string;\n        if(startIndex == strings.length\
    \ - 1 && endIndex == strings.length - 1 && maxLength == string.length)\n     \
    \       return longest;\n    }\n    return longest;\n}\n/*\n Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return None in case the input list is empty.\n         \
    \       \n*/\nNullable!(string) longest(string[] strings, int startIndex, int\
    \ endIndex, int maxLength, int minLength) \n{\n    foreach(string; strings) {\n\
    \        if(string.length > longest.length)\n            longest = string;\n \
    \       if(startIndex == strings.length - 1 && endIndex == strings.length - 1\
    \ && maxLength == string.length && minLength == string.length)\n            return\
    \ longest;\n    }\n    return longest;\n}\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings, int startIndex, int endIndex,\
    \ int maxLength, int minLength, int maxCount\nunittest\n{\n    alias candidate\
    \ = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp7pvns2f7.d(82): Error: found `unittest` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7pvns2f7.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164476
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach(string; strings)\
    \ {\n        if(string.length() > longest.length()) {\n            longest = string;\n\
    \        }\n    }\n    return longest;\n}\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings, int startIndex) \n{\n    foreach(string;\
    \ strings) {\n        if(string.length() > longest.length()) {\n            longest\
    \ = string;\n        }\n    }\n    return longest;\n}\n/*\n Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return None in case the input list is empty.\n         \
    \       \n*/\nNullable!(string) longest(string[] strings, int startIndex, int\
    \ endIndex) \n{\n    foreach(string; strings) {\n        if(string.length() >\
    \ longest.length()) {\n            longest = string;\n        }\n    }\n    return\
    \ longest;\n}\n/*\n Out of list of strings, return the longest one. Return the\
    \ first one in case of multiple\n    strings of the same length. Return None in\
    \ case the input list is empty.\n                \n*/\nNullable!(string) longest(string[]\
    \ strings, char character) \n{\n    foreach(string; strings) {\n        if(string.length()\
    \ > longest.length()) {\n            longest = string;\n        }\n    }\n   \
    \ return longest;\n}\n/*\n Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \n*/\nNullable!(string) longest(string[]\
    \ strings, char character, int startIndex) \n{\n    foreach(string; strings) {\n\
    \        if(string.length() > longest.length()) {\n            longest = string;\n\
    \        }\n    }\n    return longest;\n}\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings, char character, int startIndex,\
    \ int endIndex) \n{\n    foreach(string; strings) {\n        if(string.length()\
    \ > longest.length()) {\n            longest = string;\n        }\n    }\n   \
    \ return longest;\n}\n/*\n Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \n*/\nNullable!(string) longest(string[]\
    \ strings, char character, int startIndex, int endIndex, bool caseSensitive\n\
    unittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpuiz919f2.d(93): Error: found `unittest` when expecting `)`

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuiz919f2.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164475
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length ==\
    \ 0) {\n        return null;\n    }\n    int maxLen = 0;\n    string maxStr =\
    \ null;\n    for (string str : strings) {\n        if (str.length > maxLen) {\n\
    \            maxLen = str.length;\n            maxStr = str;\n        }\n    }\n\
    \    return maxStr;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpenw9y34l.d(15): Error: found `str` when expecting `;` following
    statement

    /tmp/tmpenw9y34l.d(15): Error: expression expected, not `:`

    /tmp/tmpenw9y34l.d(15): Error: found `strings` when expecting `;` following `for`
    condition

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpenw9y34l.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164476
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    int? maxLength = null;\n\
    \    foreach(string? s in strings)\n    {\n        if(maxLength == null || s.length()\
    \ > maxLength)\n        {\n            maxLength = s.length;\n        }\n    }\n\
    \    return maxLength;\n}\n/*\n Out of list of strings, return the longest one.\
    \ Return the first one in case of multiple\n    strings of the same length. Return\
    \ None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int maxLength) \n{\n    foreach(string? s in strings)\n\
    \    {\n        if(s.length() > maxLength)\n        {\n            maxLength =\
    \ s.length;\n        }\n    }\n    return maxLength;\n}\n/*\n Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return None in case the input list is empty.\n         \
    \       \n*/\nNullable!(string) longest(string[] strings, int maxLength, int minLength)\
    \ \n{\n    foreach(string? s in strings)\n    {\n        if(s.length() > maxLength\
    \ && s.length() < minLength)\n        {\n            maxLength = s.length;\n \
    \       }\n    }\n    return maxLength;\n}\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings, int maxLength, int minLength,\
    \ int maxCount) \n{\n    foreach(string? s in strings)\n    {\n        if(s.length()\
    \ > maxLength && s.length() < minLength && s.length() <= maxCount)\n        {\n\
    \            maxLength = s.length;\n        }\n    }\n    return maxLength;\n\
    }\n/*\n Out of list of strings, return the longest one. Return the first one in\
    \ case of multiple\n    strings of the same length. Return None in case the input\
    \ list is empty.\n                \n*/\nNullable!(string) longest(string[] strings,\
    \ int maxLength, int minLength, int maxCount, int minCount) \n{\n    foreach(string?\
    \ s in strings)\n    {\n        if(s.length() > maxLength && s.length() < minLength\
    \ && s.length() <= maxCount && s.length() >= minCount)\n        {\n          \
    \  maxLength = s.length;\n        }\n    }\n    return maxLength;\n}\n/*\n Out\
    \ of list of strings, return the longest one. Return the first one in case of\
    \ multiple\n    strings of the same length. Return None in case the input list\
    \ is empty.\n                \n*/\nNullable!(string) longest(string[] strings,\
    \ int maxLength, int minLength, int maxCount, int minCount, int maxCount2) \n\
    {\n    foreach(string\nunittest\n{\n    alias candidate = longest;\n\n{\n    \
    \    auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n  \
    \      auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpc775m5dn.d(10): Error: no identifier for declarator `int`

    /tmp/tmpc775m5dn.d(10): Error: found `?` instead of statement

    /tmp/tmpc775m5dn.d(11): Error: no identifier for declarator `string`

    /tmp/tmpc775m5dn.d(11): Error: found `?` when expecting `;`

    /tmp/tmpc775m5dn.d(27): Error: no identifier for declarator `string`

    /tmp/tmpc775m5dn.d(27): Error: found `?` when expecting `;`

    /tmp/tmpc775m5dn.d(43): Error: no identifier for declarator `string`

    /tmp/tmpc775m5dn.d(43): Error: found `?` when expecting `;`

    /tmp/tmpc775m5dn.d(59): Error: no identifier for declarator `string`

    /tmp/tmpc775m5dn.d(59): Error: found `?` when expecting `;`

    /tmp/tmpc775m5dn.d(75): Error: no identifier for declarator `string`

    /tmp/tmpc775m5dn.d(75): Error: found `?` when expecting `;`

    /tmp/tmpc775m5dn.d(92): Error: no identifier for declarator `string`

    /tmp/tmpc775m5dn.d(92): Error: found `unittest` when expecting `;`

    /tmp/tmpc775m5dn.d(112): Error: found `void` when expecting `)`

    /tmp/tmpc775m5dn.d(112): Error: found `{` when expe'
  stdout: ''
  timestamp: 1660164476
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    int? maxLength = null;\n\
    \    foreach(string[] strs in strings)\n    {\n        int length = strs.Length;\n\
    \        if(maxLength == null || maxLength > length)\n        {\n            maxLength\
    \ = length;\n        }\n    }\n    return maxLength;\n}\n</code>\n<|/ a tags=c#,string,arrays\
    \ |>\n<| a tags=c#,string,arrays |>\n<code>\npublic static string LongestString(string[]\
    \ strings)\n{\n    string longest = null;\n    foreach (string s in strings)\n\
    \    {\n        if (longest == null || s.Length > longest.Length)\n        {\n\
    \            longest = s;\n        }\n    }\n    return longest;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\npublic static string LongestString(string[]\
    \ strings)\n{\n    string longest = null;\n    foreach (string s in strings)\n\
    \    {\n        if (longest == null || s.Length > longest.Length)\n        {\n\
    \            longest = s;\n        }\n    }\n    return longest;\n}\n</code>\n\
    <|/ a tags=c#,string,arrays |>\n<| a tags=c#,string,arrays |>\n<code>\npublic\
    \ static string LongestString(string[] strings)\n{\n    string longest = null;\n\
    \    foreach (string s in strings)\n    {\n        if (longest == null || s.Length\
    \ > longest.Length)\n        {\n            longest = s;\n        }\n    }\n \
    \   return longest;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=c#,string,arrays\
    \ |>\n<code>\npublic static string LongestString(string[] strings)\n{\n    string\
    \ longest = null;\n    foreach (string s in strings)\n    {\n        if (longest\
    \ == null || s.Length > longest.Length)\n        {\n            longest = s;\n\
    \        }\n    }\n    return longest;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=c#,string,arrays\
    \ |>\n<code>\npublic static string LongestString(string[] strings)\n{\n    string\
    \ longest = null;\n    foreach (string s in strings)\n    {\n        if (longest\
    \ == null || s.Length > longest.Length)\n        {\n            longest = s;\n\
    \        }\n    }\n    return longest;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=c#,string,arrays\
    \ |>\n<code>\npublic static string LongestString(string[] strings)\n{\n    string\
    \ longest = null;\n    foreach (string s in strings)\n    {\n        if (longest\
    \ == null || s.Length > longest.Length\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmpr259udmq.d(10): Error: no identifier for declarator `int`

    /tmp/tmpr259udmq.d(10): Error: found `?` instead of statement

    /tmp/tmpr259udmq.d(11): Error: found `in` when expecting `;`

    /tmp/tmpr259udmq.d(21): Error: declaration expected, not `<`

    /tmp/tmpr259udmq.d(28): Error: declaration expected, not `foreach`

    /tmp/tmpr259udmq.d(33): Error: unrecognized declaration

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr259udmq.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164476
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach(string; strings)\n\
    \    {\n        if(string.length > longest.length)\n            longest = string;\n\
    \    }\n    return longest;\n}\n/*\n Out of list of strings, return the longest\
    \ one. Return the first one in case of multiple\n    strings of the same length.\
    \ Return None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int startIndex) \n{\n    foreach(string; strings)\n\
    \    {\n        if(string.length > longest.length)\n            longest = string;\n\
    \    }\n    return longest;\n}\n/*\n Out of list of strings, return the longest\
    \ one. Return the first one in case of multiple\n    strings of the same length.\
    \ Return None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int startIndex, int endIndex) \n{\n    foreach(string;\
    \ strings)\n    {\n        if(string.length > longest.length)\n            longest\
    \ = string;\n    }\n    return longest;\n}\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings, char character) \n{\n    foreach(string;\
    \ strings)\n    {\n        if(string.length > longest.length)\n            longest\
    \ = string;\n    }\n    return longest;\n}\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings, char character, int startIndex)\
    \ \n{\n    foreach(string; strings)\n    {\n        if(string.length > longest.length)\n\
    \            longest = string;\n    }\n    return longest;\n}\n/*\n Out of list\
    \ of strings, return the longest one. Return the first one in case of multiple\n\
    \    strings of the same length. Return None in case the input list is empty.\n\
    \                \n*/\nNullable!(string) longest(string[] strings, char character,\
    \ int startIndex, int endIndex) \n{\n    foreach(string; strings)\n    {\n   \
    \     if(string.length > longest.length)\n            longest = string;\n    }\n\
    \    return longest;\n}\n/*\n Out of list of strings, return the longest one.\
    \ Return the first one in case of multiple\n    strings of the same length. Return\
    \ None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, char character, int startIndex, int endIndex, bool\
    \ caseSensitive) \n{\n    foreach\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: '/tmp/tmp2fzibsqn.d(95): Error: found `unittest` when expecting `(`

    /tmp/tmp2fzibsqn.d(96): Error: basic type expected, not `{`

    /tmp/tmp2fzibsqn.d(96): Error: no identifier for declarator `_error_`

    /tmp/tmp2fzibsqn.d(96): Error: found `{` when expecting `;`

    /tmp/tmp2fzibsqn.d(97): Error: expression expected, not `alias`

    /tmp/tmp2fzibsqn.d(97): Error: found `candidate` when expecting `)`

    /tmp/tmp2fzibsqn.d(97): Error: found `=` instead of statement

    Failed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2fzibsqn.d", "-I/tmp"]

    '
  stdout: ''
  timestamp: 1660164476
