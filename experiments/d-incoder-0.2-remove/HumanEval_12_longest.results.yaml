language: d
name: HumanEval_12_longest
results:
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length ==\
    \ 0) {\n        return null;\n    }\n    \n    int maxLen = 0;\n    int maxIndex\
    \ = 0;\n    \n    for (int i = 0; i < strings.length; ++i) {\n        int len\
    \ = strings[i].length;\n        if (len > maxLen) {\n            maxLen = len;\n\
    \            maxIndex = i;\n        }\n    }\n    \n    return strings[maxIndex];\n\
    }\n/*\n Out of list of strings, return the longest one. Return the first one in\
    \ case of multiple\n    strings of the same length. Return None in case the input\
    \ list is empty.\n                \n*/\nNullable!(string) longest(string[] strings,\
    \ int startIndex) \n{\n    if (strings.length == 0) {\n        return null;\n\
    \    }\n    \n    int maxLen = 0;\n    int maxIndex = 0;\n    \n    for (int i\
    \ = startIndex; i < strings.length; ++i) {\n        int len = strings[i].length;\n\
    \        if (len > maxLen) {\n            maxLen = len;\n            maxIndex\
    \ = i;\n        }\n    }\n    \n    return strings[maxIndex];\n}\n/*\n Out of\
    \ list of strings, return the longest one. Return the first one in case of multiple\n\
    \    strings of the same length. Return None in case the input list is empty.\n\
    \                \n*/\nNullable!(string) longest(string[] strings, int startIndex,\
    \ int endIndex) \n{\n    if (strings.length == 0) {\n        return null;\n  \
    \  }\n    \n    int maxLen = 0;\n    int maxIndex = 0;\n    \n    for (int i =\
    \ startIndex; i < endIndex; ++i) {\n        int len = strings[i].length;\n   \
    \     if (len > maxLen) {\n            maxLen = len;\n            maxIndex = i;\n\
    \        }\n    }\n    \n    return strings[maxIndex];\n}\n/*\n Out of list of\
    \ strings, return the longest one. Return the first one in case of multiple\n\
    \    strings of the same length. Return None in case the input list is empty.\n\
    \                \n*/\nNullable!(string) longest(string[] strings, int startIndex,\
    \ int endIndex, int maxLen) \n{\n    if (strings.length == 0) {\n        return\
    \ null;\n    }\n    \n    int maxIndex = 0;\n    \n    for (int i = startIndex;\
    \ i < endIndex; ++i) {\n        int len = strings[i].length;\n        if (len\
    \ > maxLen) {\n            maxLen = len;\n            maxIndex = i;\n        }\n\
    \    }\n    \n    return strings[maxIndex];\n}\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings, int startIndex, int endIndex,\
    \ int maxLen, int maxIndex) \n{\n    if (strings.length == 0) {\n        return\
    \ null;\n    }\n    \n\nunittest\n{\n    alias candidate = longest;\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpgmkvnu49.d(110): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpgmkvnu49.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    var longest = strings[0];\n\
    \    for(var i = 1; i < strings.length; ++i)\n    {\n        if(strings[i].length\
    \ >= longest.length)\n        {\n            longest = strings[i];\n        }\n\
    \    }\n    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\n\
    {\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n\
    {\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuyyez7aj.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach(string; strings)\
    \ {\n        if(string.length > longest.length)\n            longest = string;\n\
    \    }\n    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\n\
    {\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n\
    {\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqpklbg5c.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    int? maxLength = null;\n\
    \    foreach(string? s in strings) {\n        if(maxLength == null || s.length()\
    \ > maxLength.Value()) {\n            maxLength = s;\n        }\n    }\n    return\
    \ maxLength;\n}\n/*\n Out of list of strings, return the longest one. Return the\
    \ first one in case of multiple\n    strings of the same length. Return None in\
    \ case the input list is empty.\n                \n*/\nNullable!(string) longest(string[]\
    \ strings, int maxLength) \n{\n    foreach(string? s in strings) {\n        if(s.length()\
    \ > maxLength) {\n            return s;\n        }\n    }\n    return null;\n\
    }\n/*\n Out of list of strings, return the longest one. Return the first one in\
    \ case of multiple\n    strings of the same length. Return None in case the input\
    \ list is empty.\n                \n*/\nNullable!(string) longest(string[] strings,\
    \ int maxLength, int startIndex) \n{\n    foreach(string? s in strings) {\n  \
    \      if(s.length() > maxLength) {\n            return s;\n        }\n    }\n\
    \    return null;\n}\n/*\n Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \n*/\nNullable!(string) longest(string[]\
    \ strings, int maxLength, int startIndex, int endIndex) \n{\n    foreach(string?\
    \ s in strings) {\n        if(s.length() > maxLength) {\n            return s;\n\
    \        }\n    }\n    return null;\n}\n/*\n Out of list of strings, return the\
    \ longest one. Return the first one in case of multiple\n    strings of the same\
    \ length. Return None in case the input list is empty.\n                \n*/\n\
    Nullable!(string) longest(string[] strings, int maxLength, int startIndex, int\
    \ endIndex, int comparer) \n{\n    foreach(string? s in strings) {\n        if(s.length()\
    \ > maxLength) {\n            return s;\n        }\n    }\n    return null;\n\
    }\n/*\n Out of list of strings, return the longest one. Return the first one in\
    \ case of multiple\n    strings of the same length. Return None in case the input\
    \ list is empty.\n                \n*/\nNullable!(string) longest(string[] strings,\
    \ int maxLength, int startIndex, int endIndex, int comparer, IComparer<string>\
    \ comparer) \n{\n    foreach(string? s in strings) {\n        if(s.length() >\
    \ maxLength) {\n            return s;\n        }\n    }\n    return null;\n}\n\
    /*\n Out of list of strings, return the longest one. Return the first one in case\
    \ of multiple\n    strings of the same length. Return None in case the input list\
    \ is empty.\n                \n*/\nNull\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprofoqnpe.d(10): Error: no identifier for declarator int\n/tmp/tmprofoqnpe.d(10):
    Error: found \''?\'' instead of statement\n/tmp/tmprofoqnpe.d(11): Error: no identifier
    for declarator string\n/tmp/tmprofoqnpe.d(11): Error: found \''?\'' when expecting
    \'';\''\n/tmp/tmprofoqnpe.d(25): Error: no identifier for declarator string\n/tmp/tmprofoqnpe.d(25):
    Error: found \''?\'' when expecting \'';\''\n/tmp/tmprofoqnpe.d(39): Error: no
    identifier for declarator string\n/tmp/tmprofoqnpe.d(39): Error: found \''?\''
    when expecting \'';\''\n/tmp/tmprofoqnpe.d(53): Error: no identifier for declarator
    string\n/tmp/tmprofoqnpe.d(53): Error: found \''?\'' when expecting \'';\''\n/tmp/tmprofoqnpe.d(67):
    Error: no identifier for declarator string\n/tmp/tmprofoqnpe.d(67): Error: found
    \''?\'' when expecting \'';\''\n/tmp/tmprofoqnpe.d(79): Error: found \''<\'' when
    expecting \'')\''\n/tmp/tmprofoqnpe.d(79): Error: semicolon expected following
    function declaration\n/tmp/tmprofoqnpe.d(79): Error: no identifier for declarator
    string\n/tmp/tmprofoqnpe.d(79): Error: Declaration expected, not \''>\''\n/tmp/tmprofoqnpe.d(84):
    Error: unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmprofoqnpe.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach(string s in strings)\
    \ {\n        if(s.length() > longest.length)\n            longest = s;\n    }\n\
    \    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n  \
    \      auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n\
    \        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpfeonbjpr.d(10): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfeonbjpr.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach(string; strings)\
    \ {\n        if(string.length > longest.length)\n            longest = string;\n\
    \    }\n    return longest;\n}\n/*\n Out of list of strings, return the longest\
    \ one. Return the first one in case of multiple\n    strings of the same length.\
    \ Return None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int startIndex) \n{\n    foreach(string; strings)\
    \ {\n        if(string.length > longest.length)\n            longest = string;\n\
    \    }\n    return longest;\n}\n/*\n Out of list of strings, return the longest\
    \ one. Return the first one in case of multiple\n    strings of the same length.\
    \ Return None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int startIndex, int endIndex) \n{\n    foreach(string;\
    \ strings) {\n        if(string.length > longest.length)\n            longest\
    \ = string;\n    }\n    return longest;\n}\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings, char character) \n{\n    foreach(string;\
    \ strings) {\n        if(string.length > longest.length)\n            longest\
    \ = string;\n    }\n    return longest;\n}\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings, char character, int startIndex)\
    \ \n{\n    foreach(string; strings) {\n        if(string.length > longest.length)\n\
    \            longest = string;\n    }\n    return longest;\n}\n/*\n Out of list\
    \ of strings, return the longest one. Return the first one in case of multiple\n\
    \    strings of the same length. Return None in case the input list is empty.\n\
    \                \n*/\nNullable!(string) longest(string[] strings, char character,\
    \ int startIndex, int endIndex) \n{\n    foreach(string; strings) {\n        if(string.length\
    \ > longest.length)\n            longest = string;\n    }\n    return longest;\n\
    }\n/*\n Out of list of strings, return the longest one. Return the first one in\
    \ case of multiple\n    strings of the same length. Return None in case the input\
    \ list is empty.\n                \n*/\nNullable!(string) longest(string[] strings,\
    \ char character, int startIndex, int endIndex, bool caseSensitive) \n{\n    foreach(string;\
    \ strings) {\n        if(string.length > longest.length)\n\nunittest\n{\n    alias\
    \ candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpb67tkj6s.d(91): Error: found \''unittest\'' instead of statement\n/tmp/tmpb67tkj6s.d(111):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb67tkj6s.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    var longest = strings[0];\n\
    \    var longestLength = longest.length;\n    for(var i = 1; i < strings.length;\
    \ i++)\n    {\n        var length = strings[i].length;\n        if(length > longestLength)\n\
    \        {\n            longest = strings[i];\n            longestLength = length;\n\
    \        }\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate =\
    \ longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpttlq3ct7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    int? maxLength = null;\n\
    \    foreach (string s in strings) {\n        if (maxLength == null || s.length()\
    \ > maxLength.Value()) {\n            maxLength = s.length;\n        }\n    }\n\
    \    return maxLength;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n\
    \        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n\
    \        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpa08odksy.d(10): Error: no identifier for declarator int\n/tmp/tmpa08odksy.d(10):
    Error: found \''?\'' instead of statement\n/tmp/tmpa08odksy.d(11): Error: found
    \''in\'' when expecting \'';\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa08odksy.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach(string; strings)\
    \ \n    {\n        if(string.length == strings.length) \n        {\n         \
    \   return string;\n        }\n    }\n    return null;\n}\nunittest\n{\n    alias\
    \ candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc2rcqd_2.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach(string; strings)\n\
    \    {\n        if(string.length > longest.length)\n        {\n            longest\
    \ = string;\n        }\n    }\n    return longest;\n}\n/*\n Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return None in case the input list is empty.\n         \
    \       \n*/\nNullable!(string) longest(string[] strings, int startIndex) \n{\n\
    \    foreach(string; strings)\n    {\n        if(string.length > longest.length)\n\
    \        {\n            longest = string;\n        }\n    }\n    return longest;\n\
    }\n/*\n Out of list of strings, return the longest one. Return the first one in\
    \ case of multiple\n    strings of the same length. Return None in case the input\
    \ list is empty.\n                \n*/\nNullable!(string) longest(string[] strings,\
    \ int startIndex, int endIndex) \n{\n    foreach(string; strings)\n    {\n   \
    \     if(string.length > longest.length)\n        {\n            longest = string;\n\
    \        }\n    }\n    return longest;\n}\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings, char separator) \n{\n    foreach(string;\
    \ strings)\n    {\n        if(string.length > longest.length)\n        {\n   \
    \         longest = string;\n        }\n    }\n    return longest;\n}\n/*\n Out\
    \ of list of strings, return the longest one. Return the first one in case of\
    \ multiple\n    strings of the same length. Return None in case the input list\
    \ is empty.\n                \n*/\nNullable!(string) longest(string[] strings,\
    \ char separator, int startIndex) \n{\n    foreach(string; strings)\n    {\n \
    \       if(string.length > longest.length)\n        {\n            longest = string;\n\
    \        }\n    }\n    return longest;\n}\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings, char separator, int startIndex,\
    \ int endIndex) \n{\n    foreach(string; strings)\n    {\n        if(string.length\
    \ > longest.length)\n        {\n            longest = string;\n        }\n   \
    \ }\n    return longest;\n}\n/*\n Out of list of strings, return the longest one.\
    \ Return the first one in case of multiple\n    strings of the same length. Return\
    \ None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto\
    \ result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull &&\
    \ result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\"\
    , \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get\
    \ == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpx6uoqlh6.d(105): Error: found \''unittest\'' when expecting
    \'')\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx6uoqlh6.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach(string; strings)\
    \ {\n        if(string.length() > longest.length())\n            longest = string;\n\
    \    }\n    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\n\
    {\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n\
    {\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpm9m17hiw.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length ==\
    \ 0) {\n        return null;\n    }\n    var maxLength = 0;\n    var maxString\
    \ = \"\";\n    for (var i = 0; i <strings.length; ++i) {\n        var length =\
    \ strings[i].length;\n        if (length > maxLength) {\n            maxLength\
    \ = length;\n            maxString = strings[i];\n        }\n    }\n    return\
    \ maxString;\n}\n/*\n Out of list of strings, return the longest one. Return the\
    \ first one in case of multiple\n    strings of the same length. Return None in\
    \ case the input list is empty.\n                \n*/\nNullable!(string) longest(string[]\
    \ strings, int startIndex) \n{\n    if (strings.length == 0) {\n        return\
    \ null;\n    }\n    var maxLength = 0;\n    var maxString = \"\";\n    for (var\
    \ i = startIndex; i < strings.length; ++i) {\n        var length = strings[i].length;\n\
    \        if (length > maxLength) {\n            maxLength = length;\n        \
    \    maxString = strings[i];\n        }\n    }\n    return maxString;\n}\n/*\n\
    \ Out of list of strings, return the longest one. Return the first one in case\
    \ of multiple\n    strings of the same length. Return None in case the input list\
    \ is empty.\n                \n*/\nNullable!(string) longest(string[] strings,\
    \ int startIndex, int endIndex) \n{\n    if (strings.length == 0) {\n        return\
    \ null;\n    }\n    var maxLength = 0;\n    var maxString = \"\";\n    for (var\
    \ i = startIndex; i < endIndex; ++i) {\n        var length = strings[i].length;\n\
    \        if (length > maxLength) {\n            maxLength = length;\n        \
    \    maxString = strings[i];\n        }\n    }\n    return maxString;\n}\n/*\n\
    \ Out of list of strings, return the longest one. Return the first one in case\
    \ of multiple\n    strings of the same length. Return None in case the input list\
    \ is empty.\n                \n*/\nNullable!(string) longest(string[] strings,\
    \ char separator) \n{\n    if (strings.length == 0) {\n        return null;\n\
    \    }\n    var maxLength = 0;\n    var maxString = \"\";\n    for (var i = 0;\
    \ i <strings.length; ++i) {\n        var length = strings[i].length;\n       \
    \ if (length > maxLength) {\n            maxLength = length;\n            maxString\
    \ = strings[i];\n        }\n    }\n    return maxString;\n}\n/*\n Out of list\
    \ of strings, return the longest one. Return the first one in case of multiple\n\
    \    strings of the same length. Return None in case the input list is empty.\n\
    \                \n*/\nNullable!(string) longest(string[] strings, char separator,\
    \ int startIndex) \n{\n    if (strings.length == 0) {\n        return null;\n\
    \    }\n    var maxLength = 0;\n    var maxString = \"\";\n    for (var i = startIndex;\
    \ i < strings.length; ++i) {\n        var length = strings[i].length;\n      \
    \  if (length > maxLength) {\n            maxLength = length;\n            maxString\
    \ = strings[i];\n        }\n    }\n    return maxString;\n\nunittest\n{\n    alias\
    \ candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpw3bd0phf.d(108): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw3bd0phf.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach(string s in strings)\
    \ {\n        if(s.length() > longest.length)\n            longest = s;\n    }\n\
    \    return longest;\n}\n/*\n Out of list of strings, return the longest one.\
    \ Return the first one in case of multiple\n    strings of the same length. Return\
    \ None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int startIndex) \n{\n    foreach(string s in strings)\
    \ {\n        if(s.length() > longest.length)\n            longest = s;\n    }\n\
    \    return longest;\n}\n/*\n Out of list of strings, return the longest one.\
    \ Return the first one in case of multiple\n    strings of the same length. Return\
    \ None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int startIndex, int endIndex) \n{\n    foreach(string\
    \ s in strings) {\n        if(s.length() > longest.length)\n            longest\
    \ = s;\n    }\n    return longest;\n}\n/*\n Out of list of strings, return the\
    \ longest one. Return the first one in case of multiple\n    strings of the same\
    \ length. Return None in case the input list is empty.\n                \n*/\n\
    Nullable!(string) longest(string[] strings, char character) \n{\n    foreach(string\
    \ s in strings) {\n        if(s.length() > longest.length)\n            longest\
    \ = s;\n    }\n    return longest;\n}\n/*\n Out of list of strings, return the\
    \ longest one. Return the first one in case of multiple\n    strings of the same\
    \ length. Return None in case the input list is empty.\n                \n*/\n\
    Nullable!(string) longest(string[] strings, char character, int startIndex) \n\
    {\n    foreach(string s in strings) {\n        if(s.length() > longest.length)\n\
    \            longest = s;\n    }\n    return longest;\n}\n/*\n Out of list of\
    \ strings, return the longest one. Return the first one in case of multiple\n\
    \    strings of the same length. Return None in case the input list is empty.\n\
    \                \n*/\nNullable!(string) longest(string[] strings, char character,\
    \ int startIndex, int endIndex) \n{\n    foreach(string s in strings) {\n    \
    \    if(s.length() > longest.length)\n            longest = s;\n    }\n    return\
    \ longest;\n}\n/*\n Out of list of strings, return the longest one. Return the\
    \ first one in case of multiple\n    strings of the same length. Return None in\
    \ case the input list is empty.\n                \n*/\nNullable!(string) longest(string[]\
    \ strings, char character, int startIndex, int endIndex, bool caseSensitive) \n\
    {\n    foreach(string s in strings) {\n\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp86372oa0.d(10): Error: found \''in\'' when expecting \'';\''\n/tmp/tmp86372oa0.d(23):
    Error: found \''in\'' when expecting \'';\''\n/tmp/tmp86372oa0.d(36): Error: found
    \''in\'' when expecting \'';\''\n/tmp/tmp86372oa0.d(49): Error: found \''in\''
    when expecting \'';\''\n/tmp/tmp86372oa0.d(62): Error: found \''in\'' when expecting
    \'';\''\n/tmp/tmp86372oa0.d(75): Error: found \''in\'' when expecting \'';\''\n/tmp/tmp86372oa0.d(88):
    Error: found \''in\'' when expecting \'';\''\n/tmp/tmp86372oa0.d(90): Error: found
    \''unittest\'' instead of statement\n/tmp/tmp86372oa0.d(110): Error: found \''EOF\''
    when expecting \''}\'' following compound statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmp86372oa0.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach (string s in\
    \ strings) {\n        if (s.length() > longest.length)\n            longest =\
    \ s;\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpybbdln8p.d(10): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpybbdln8p.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach (string s in\
    \ strings) {\n        if (s.length() > longest.length)\n            longest =\
    \ s;\n    }\n    return longest;\n}\n/*\n Out of list of strings, return the longest\
    \ one. Return the first one in case of multiple\n    strings of the same length.\
    \ Return None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int startIndex) \n{\n    foreach (string s in strings)\
    \ {\n        if (s.length() > longest.length)\n            longest = s;\n    }\n\
    \    return longest;\n}\n/*\n Out of list of strings, return the longest one.\
    \ Return the first one in case of multiple\n    strings of the same length. Return\
    \ None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int startIndex, int endIndex) \n{\n    foreach (string\
    \ s in strings) {\n        if (s.length() > longest.length)\n            longest\
    \ = s;\n    }\n    return longest;\n}\n/*\n Out of list of strings, return the\
    \ longest one. Return the first one in case of multiple\n    strings of the same\
    \ length. Return None in case the input list is empty.\n                \n*/\n\
    Nullable!(string) longest(string[] strings, char separator) \n{\n    foreach (string\
    \ s in strings) {\n        if (s.length() > longest.length)\n            longest\
    \ = s;\n    }\n    return longest;\n}\n/*\n Out of list of strings, return the\
    \ longest one. Return the first one in case of multiple\n    strings of the same\
    \ length. Return None in case the input list is empty.\n                \n*/\n\
    Nullable!(string) longest(string[] strings, char separator, int startIndex) \n\
    {\n    foreach (string s in strings) {\n        if (s.length() > longest.length)\n\
    \            longest = s;\n    }\n    return longest;\n}\n/*\n Out of list of\
    \ strings, return the longest one. Return the first one in case of multiple\n\
    \    strings of the same length. Return None in case the input list is empty.\n\
    \                \n*/\nNullable!(string) longest(string[] strings, char separator,\
    \ int startIndex, int endIndex) \n{\n    foreach (string s in strings) {\n   \
    \     if (s.length() > longest.length)\n            longest = s;\n    }\n    return\
    \ longest;\n}\n/*\n Out of list of strings, return the longest one. Return the\
    \ first one in case of multiple\n    strings of the same length. Return None in\
    \ case the input list is empty.\n                \n*/\nNullable!(string) longest(string[]\
    \ strings, char separator, int startIndex, int endIndex, char separator2) \n{\n\
    \    foreach (string s in strings) {\n        if (s.length() > longest.length)\n\
    \            longest = s;\n    }\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpsmb7zbeh.d(10): Error: found \''in\'' when expecting \'';\''\n/tmp/tmpsmb7zbeh.d(23):
    Error: found \''in\'' when expecting \'';\''\n/tmp/tmpsmb7zbeh.d(36): Error: found
    \''in\'' when expecting \'';\''\n/tmp/tmpsmb7zbeh.d(49): Error: found \''in\''
    when expecting \'';\''\n/tmp/tmpsmb7zbeh.d(62): Error: found \''in\'' when expecting
    \'';\''\n/tmp/tmpsmb7zbeh.d(75): Error: found \''in\'' when expecting \'';\''\n/tmp/tmpsmb7zbeh.d(88):
    Error: found \''in\'' when expecting \'';\''\n/tmp/tmpsmb7zbeh.d(92): Error: found
    \''unittest\'' instead of statement\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpsmb7zbeh.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach(string[] s in\
    \ strings) {\n        if(s.length() > longest.length)\n            longest = s;\n\
    \    }\n    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\n\
    {\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n\
    {\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4ko_mltm.d(10): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4ko_mltm.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    int? maxLength = null;\n\
    \    foreach (string s in strings) {\n        int length = s.length();\n     \
    \   if (maxLength == null || maxLength > length) {\n            maxLength = length;\n\
    \        }\n    }\n    return maxLength;\n}\nunittest\n{\n    alias candidate\
    \ = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_i29427l.d(10): Error: no identifier for declarator int\n/tmp/tmp_i29427l.d(10):
    Error: found \''?\'' instead of statement\n/tmp/tmp_i29427l.d(11): Error: found
    \''in\'' when expecting \'';\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_i29427l.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    var maxLength = 0;\n\
    \    var maxString = \"\";\n    foreach(string; strings) {\n        if(string.length\
    \ > maxLength) {\n            maxLength = string.length;\n            maxString\
    \ = string;\n        }\n    }\n    return maxString;\n}\nunittest\n{\n    alias\
    \ candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmsrk5kl6.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    var longest = strings[0];\n\
    \    var longestLength = longest.length;\n    foreach(var s in strings) {\n  \
    \      if(s.length == longestLength) {\n            longest = s;\n        }\n\
    \    }\n    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\n\
    {\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n\
    {\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpfp1gwlls.d(12): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfp1gwlls.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    int? maxLength = null;\n\
    \    foreach (string s in strings) {\n        if (maxLength == null || s.length()\
    \ > maxLength) {\n            maxLength = s.length;\n        }\n    }\n    return\
    \ maxLength;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto\
    \ result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull &&\
    \ result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\"\
    , \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get\
    \ == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5lad9ctw.d(10): Error: no identifier for declarator int\n/tmp/tmp5lad9ctw.d(10):
    Error: found \''?\'' instead of statement\n/tmp/tmp5lad9ctw.d(11): Error: found
    \''in\'' when expecting \'';\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5lad9ctw.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    var maxLength = 0;\n\
    \    var maxString = \"\";\n    foreach(var s in strings) {\n        if(s.length()\
    \ > maxLength) {\n            maxLength = s.length();\n            maxString =\
    \ s;\n        }\n    }\n    return maxString;\n}\nunittest\n{\n    alias candidate\
    \ = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpeq752mh9.d(12): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpeq752mh9.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach (string s in\
    \ strings) {\n        if (s.length() > longest.length)\n            longest =\
    \ s;\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpybbdln8p.d(10): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpybbdln8p.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach(string s in strings)\
    \ {\n        if(s.length() > longest.length) longest = s;\n    }\n    return longest;\n\
    }\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmppzrfu747.d(10): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppzrfu747.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length ==\
    \ 0) {\n        return null;\n    }\n    int maxLength = 0;\n    int maxIndex\
    \ = 0;\n    for (int i = 0; i < strings.length; i++) {\n        if (strings[i].length()\
    \ > maxLength) {\n            maxLength = strings[i].length();\n            maxIndex\
    \ = i;\n        }\n    }\n    return strings[maxIndex];\n}\n/*\n Out of list of\
    \ strings, return the longest one. Return the first one in case of multiple\n\
    \    strings of the same length. Return None in case the input list is empty.\n\
    \                \n*/\nNullable!(string) longest(string[] strings, int startIndex)\
    \ \n{\n    if (strings.length == 0) {\n        return null;\n    }\n    int maxLength\
    \ = 0;\n    int maxIndex = 0;\n    for (int i = startIndex; i < strings.length;\
    \ i++) {\n        if (strings[i].length() > maxLength) {\n            maxLength\
    \ = strings[i].length();\n            maxIndex = i;\n        }\n    }\n    return\
    \ strings[maxIndex];\n}\n/*\n Out of list of strings, return the longest one.\
    \ Return the first one in case of multiple\n    strings of the same length. Return\
    \ None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int startIndex, int endIndex) \n{\n    if (strings.length\
    \ == 0) {\n        return null;\n    }\n    int maxLength = 0;\n    int maxIndex\
    \ = 0;\n    for (int i = startIndex; i < strings.length; i++) {\n        if (strings[i].length()\
    \ > maxLength) {\n            maxLength = strings[i].length();\n            maxIndex\
    \ = i;\n        }\n    }\n    return strings[maxIndex];\n}\n/*\n Out of list of\
    \ strings, return the longest one. Return the first one in case of multiple\n\
    \    strings of the same length. Return None in case the input list is empty.\n\
    \                \n*/\nNullable!(string) longest(string[] strings, char character)\
    \ \n{\n    if (strings.length == 0) {\n        return null;\n    }\n    int maxLength\
    \ = 0;\n    int maxIndex = 0;\n    for (int i = 0; i < strings.length; i++) {\n\
    \        if (strings[i].length() > maxLength) {\n            maxLength = strings[i].length();\n\
    \            maxIndex = i;\n        }\n    }\n    return strings[maxIndex];\n\
    }\n/*\n Out of list of strings, return the longest one. Return the first one in\
    \ case of multiple\n    strings of the same length. Return None in case the input\
    \ list is empty.\n                \n*/\nNullable!(string) longest(string[] strings,\
    \ char character, int startIndex) \n{\n    if (strings.length == 0) {\n      \
    \  return null;\n    }\n    int maxLength = 0;\n    int maxIndex = 0;\n    for\
    \ (int i = startIndex; i < strings.length; i++) {\n        if (strings[i].length()\
    \ > maxLength) {\n            maxLength = strings[i].length();\n            maxIndex\
    \ = i;\n        }\n    }\n    return strings[maxIndex];\n\nunittest\n{\n    alias\
    \ candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpaua7yaf3.d(103): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpaua7yaf3.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n\tassert(!strings.isEmpty());\n\
    \t\n\tint maxLen = strings[0].Length;\n\t\n\tfor (int i = 1; i < strings.Length;\
    \ i++)\n\t{\n\t\tif (strings[i].Length > maxLen)\n\t\t{\n\t\t\tmaxLen = strings[i].Length;\n\
    \t\t}\n\t}\n\t\n\treturn maxLen > 0 ? strings[maxLen - 1] : null;\n}\nunittest\n\
    {\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_8atigyr.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length ==\
    \ 0) {\n        return null;\n    }\n    \n    string longest = strings[0];\n\
    \    int longestLength = longest.length;\n    \n    for (int i = 1; i < strings.length;\
    \ i++) {\n        int length = strings[i].length;\n        if (length > longestLength)\
    \ {\n            longest = strings[i];\n            longestLength = length;\n\
    \        }\n    }\n    \n    return longest;\n}\nunittest\n{\n    alias candidate\
    \ = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqejm3i9r.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach(string; strings)\
    \ {\n        if(string.length > longest.length)\n            longest = string;\n\
    \    }\n    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\n\
    {\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n\
    {\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqpklbg5c.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    int? maxLength = null;\n\
    \    foreach (string s in strings) {\n        if (maxLength == null || s.length()\
    \ > maxLength.Value()) {\n            maxLength = s.length;\n        }\n    }\n\
    \    return maxLength;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n\
    \        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n\
    \        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpa08odksy.d(10): Error: no identifier for declarator int\n/tmp/tmpa08odksy.d(10):
    Error: found \''?\'' instead of statement\n/tmp/tmpa08odksy.d(11): Error: found
    \''in\'' when expecting \'';\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa08odksy.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach(string s in strings)\n\
    \    {\n        if(s.length() > longest.length)\n            longest = s;\n  \
    \  }\n    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\n\
    {\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n\
    {\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4ga3pibb.d(10): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4ga3pibb.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach(string; strings)\
    \ {\n        if(string.length > longest.length)\n            longest = string;\n\
    \    }\n    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\n\
    {\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n\
    {\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqpklbg5c.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach(string; strings)\
    \ {\n        if(string.length() > strings.length)\n            return string;\n\
    \    }\n    return null;\n}\n/*\n Out of list of strings, return the longest one.\
    \ Return the first one in case of multiple\n    strings of the same length. Return\
    \ None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int startIndex) \n{\n    foreach(string; strings)\
    \ {\n        if(string.length() > strings.length)\n            return string;\n\
    \    }\n    return null;\n}\n/*\n Out of list of strings, return the longest one.\
    \ Return the first one in case of multiple\n    strings of the same length. Return\
    \ None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int startIndex, int endIndex) \n{\n    foreach(string;\
    \ strings) {\n        if(string.length() > strings.length)\n            return\
    \ string;\n    }\n    return null;\n}\n/*\n Out of list of strings, return the\
    \ longest one. Return the first one in case of multiple\n    strings of the same\
    \ length. Return None in case the input list is empty.\n                \n*/\n\
    Nullable!(string) longest(string[] strings, char separator) \n{\n    foreach(string;\
    \ strings) {\n        if(string.length() > strings.length)\n            return\
    \ string;\n    }\n    return null;\n}\n/*\n Out of list of strings, return the\
    \ longest one. Return the first one in case of multiple\n    strings of the same\
    \ length. Return None in case the input list is empty.\n                \n*/\n\
    Nullable!(string) longest(string[] strings, char separator, int startIndex) \n\
    {\n    foreach(string; strings) {\n        if(string.length() > strings.length)\n\
    \            return string;\n    }\n    return null;\n}\n/*\n Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return None in case the input list is empty.\n         \
    \       \n*/\nNullable!(string) longest(string[] strings, char separator, int\
    \ startIndex, int endIndex) \n{\n    foreach(string; strings) {\n        if(string.length()\
    \ > strings.length)\n            return string;\n    }\n    return null;\n}\n\
    /*\n Out of list of strings, return the longest one. Return the first one in case\
    \ of multiple\n    strings of the same length. Return None in case the input list\
    \ is empty.\n                \n*/\nNullable!(string) longest(string[] strings,\
    \ char separator, int startIndex, int endIndex, char otherSeparator) \n{\n   \
    \ foreach(string; strings) {\n        if(string.length() > strings.length)\n \
    \           return string;\n    }\n    return null;\n}\n/*\n Out of list of \n\
    unittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpoc324htl.d(94): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpoc324htl.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    int? maxLength = null;\n\
    \    foreach (string s in strings) {\n        if (maxLength == null || s.length()\
    \ > maxLength.Value()) {\n            maxLength = s.length;\n        }\n    }\n\
    \    return maxLength;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n\
    \        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n\
    \        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpa08odksy.d(10): Error: no identifier for declarator int\n/tmp/tmpa08odksy.d(10):
    Error: found \''?\'' instead of statement\n/tmp/tmpa08odksy.d(11): Error: found
    \''in\'' when expecting \'';\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa08odksy.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    var longest = strings[0];\n\
    \    var longestLength = longest.length;\n    for(var i = 1; i < strings.length;\
    \ ++i)\n    {\n        var s = strings[i];\n        var length = s.length;\n \
    \       if(length > longestLength)\n        {\n            longest = s;\n    \
    \        longestLength = length;\n        }\n    }\n    return longest;\n}\nunittest\n\
    {\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvsc_n_it.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n\tint? maxLength = null;\n\
    \tforeach (string s in strings) {\n\t\tif (maxLength == null || s.length() > maxLength.Value())\
    \ {\n\t\t\tmaxLength = s.length;\n\t\t}\n\t}\n\treturn maxLength;\n}\nunittest\n\
    {\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4_gifojx.d(10): Error: no identifier for declarator int\n/tmp/tmp4_gifojx.d(10):
    Error: found \''?\'' instead of statement\n/tmp/tmp4_gifojx.d(11): Error: found
    \''in\'' when expecting \'';\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4_gifojx.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    var longest = strings[0];\n\
    \    var longestLength = longest.length;\n    for(var i = 1; i < strings.length;\
    \ ++i)\n    {\n        var s = strings[i];\n        if(s.length < longestLength)\n\
    \        {\n            longest = s;\n            longestLength = s.length;\n\
    \        }\n    }\n    return longest;\n}\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings, int start) \n{\n    var longest\
    \ = strings[start];\n    var longestLength = longest.length;\n    for(var i =\
    \ start+1; i < strings.length; ++i)\n    {\n        var s = strings[i];\n    \
    \    if(s.length < longestLength)\n        {\n            longest = s;\n     \
    \       longestLength = s.length;\n        }\n    }\n    return longest;\n}\n\
    /*\n Out of list of strings, return the longest one. Return the first one in case\
    \ of multiple\n    strings of the same length. Return None in case the input list\
    \ is empty.\n                \n*/\nNullable!(string) longest(string[] strings,\
    \ int start, int end) \n{\n    var longest = strings[start];\n    var longestLength\
    \ = longest.length;\n    for(var i = start+1; i < end; ++i)\n    {\n        var\
    \ s = strings[i];\n        if(s.length < longestLength)\n        {\n         \
    \   longest = s;\n            longestLength = s.length;\n        }\n    }\n  \
    \  return longest;\n}\n/*\n Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \n*/\nNullable!(string) longest(string[]\
    \ strings, int start, int end, int step) \n{\n    var longest = strings[start];\n\
    \    var longestLength = longest.length;\n    for(var i = start+1; i < end; ++i)\n\
    \    {\n        var s = strings[i];\n        if(s.length < longestLength)\n  \
    \      {\n            longest = s;\n            longestLength = s.length;\n  \
    \      }\n    }\n    return longest;\n}\n/*\n Out of list of strings, return the\
    \ longest one. Return the first one in case of multiple\n    strings of the same\
    \ length. Return None in case the input list is empty.\n                \n*/\n\
    Nullable!(string) longest(string[] strings, int start, int end, int step, string\
    \ separator) \n{\n    var longest = strings[start];\n    var longestLength = longest.length;\n\
    \    for(var i = start+1; i < end; ++i)\n    {\n        var s = strings[i];\n\
    \        if(s.length < longestLength)\n        {\n            longest = s;\n \
    \           longestLength = s.length;\n        }\n    }\n    return \nunittest\n\
    {\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp267pik2_.d(102): Error: expression expected, not \''unittest\''\n/tmp/tmp267pik2_.d(103):
    Error: found \''{\'' when expecting \'';\'' following return statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp267pik2_.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n\tint? maxLength = null;\n\
    \tforeach(string? s in strings) {\n\t\tif(maxLength == null || s.length() > maxLength.value)\
    \ {\n\t\t\tmaxLength = s;\n\t\t}\n\t}\n\treturn maxLength;\n}\nunittest\n{\n \
    \   alias candidate = longest;\n\n{\n        auto result = candidate([]);\n  \
    \      assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpvkka3te1.d(10): Error: no identifier for declarator int\n/tmp/tmpvkka3te1.d(10):
    Error: found \''?\'' instead of statement\n/tmp/tmpvkka3te1.d(11): Error: no identifier
    for declarator string\n/tmp/tmpvkka3te1.d(11): Error: found \''?\'' when expecting
    \'';\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvkka3te1.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach (string s in\
    \ strings) {\n        if (s.length() > longest.length)\n            longest =\
    \ s;\n    }\n    return longest;\n}\n/*\n Out of list of strings, return the longest\
    \ one. Return the first one in case of multiple\n    strings of the same length.\
    \ Return None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int startIndex) \n{\n    foreach (string s in strings)\
    \ {\n        if (s.length() > longest.length)\n            longest = s;\n    }\n\
    \    return longest;\n}\n/*\n Out of list of strings, return the longest one.\
    \ Return the first one in case of multiple\n    strings of the same length. Return\
    \ None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int startIndex, int endIndex) \n{\n    foreach (string\
    \ s in strings) {\n        if (s.length() > longest.length)\n            longest\
    \ = s;\n    }\n    return longest;\n}\n/*\n Out of list of strings, return the\
    \ longest one. Return the first one in case of multiple\n    strings of the same\
    \ length. Return None in case the input list is empty.\n                \n*/\n\
    Nullable!(string) longest(string[] strings, char separator) \n{\n    foreach (string\
    \ s in strings) {\n        if (s.length() > longest.length)\n            longest\
    \ = s;\n    }\n    return longest;\n}\n/*\n Out of list of strings, return the\
    \ longest one. Return the first one in case of multiple\n    strings of the same\
    \ length. Return None in case the input list is empty.\n                \n*/\n\
    Nullable!(string) longest(string[] strings, char separator, int startIndex) \n\
    {\n    foreach (string s in strings) {\n        if (s.length() > longest.length)\n\
    \            longest = s;\n    }\n    return longest;\n}\n/*\n Out of list of\
    \ strings, return the longest one. Return the first one in case of multiple\n\
    \    strings of the same length. Return None in case the input list is empty.\n\
    \                \n*/\nNullable!(string) longest(string[] strings, char separator,\
    \ int startIndex, int endIndex) \n{\n    foreach (string s in strings) {\n   \
    \     if (s.length() > longest.length)\n            longest = s;\n    }\n    return\
    \ longest;\n}\n/*\n Out of list of strings, return the longest one. Return the\
    \ first one in case of multiple\n    strings of the same length. Return None in\
    \ case the input list is empty.\n                \n*/\nNullable!(string) longest(string[]\
    \ strings, char separator, char otherSeparator) \n{\n    foreach (string s in\
    \ strings) {\n        if (s.length() > longest.length)\n            longest =\
    \ s;\n    }\n    return longest;\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpwppyoshf.d(10): Error: found \''in\'' when expecting \'';\''\n/tmp/tmpwppyoshf.d(23):
    Error: found \''in\'' when expecting \'';\''\n/tmp/tmpwppyoshf.d(36): Error: found
    \''in\'' when expecting \'';\''\n/tmp/tmpwppyoshf.d(49): Error: found \''in\''
    when expecting \'';\''\n/tmp/tmpwppyoshf.d(62): Error: found \''in\'' when expecting
    \'';\''\n/tmp/tmpwppyoshf.d(75): Error: found \''in\'' when expecting \'';\''\n/tmp/tmpwppyoshf.d(88):
    Error: found \''in\'' when expecting \'';\''\n/tmp/tmpwppyoshf.d(93): Error: found
    \''unittest\'' instead of statement\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpwppyoshf.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    var longest = strings[0];\n\
    \    foreach(var s in strings)\n    {\n        if(s.length() > longest.length())\n\
    \        {\n            longest = s;\n        }\n    }\n    return longest;\n\
    }\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpyf7t2vzd.d(11): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpyf7t2vzd.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach(string; strings)\
    \ {\n        if(string.length == strings.length)\n            return string;\n\
    \    }\n    return null;\n}\n/*\n Out of list of strings, return the longest one.\
    \ Return the first one in case of multiple\n    strings of the same length. Return\
    \ None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int startIndex) \n{\n    foreach(string; strings)\
    \ {\n        if(string.length == strings.length && startIndex < strings.length)\n\
    \            return string;\n    }\n    return null;\n}\n/*\n Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return None in case the input list is empty.\n         \
    \       \n*/\nNullable!(string) longest(string[] strings, int startIndex, int\
    \ endIndex) \n{\n    foreach(string; strings) {\n        if(string.length == strings.length\
    \ && startIndex < strings.length && endIndex < strings.length)\n            return\
    \ string;\n    }\n    return null;\n}\n/*\n Out of list of strings, return the\
    \ longest one. Return the first one in case of multiple\n    strings of the same\
    \ length. Return None in case the input list is empty.\n                \n*/\n\
    Nullable!(string) longest(string[] strings, int startIndex, int endIndex, out\
    \ int index) \n{\n    foreach(string; strings) {\n        if(string.length ==\
    \ strings.length && startIndex < strings.length && endIndex < strings.length)\n\
    \            index = strings.length;\n    }\n    return null;\n}\n/*\n Out of\
    \ list of strings, return the longest one. Return the first one in case of multiple\n\
    \    strings of the same length. Return None in case the input list is empty.\n\
    \                \n*/\nNullable!(string) longest(string[] strings, int startIndex,\
    \ int endIndex, out int index, int length) \n{\n    foreach(string; strings) {\n\
    \        if(string.length == strings.length && startIndex < strings.length &&\
    \ endIndex < strings.length)\n            index = strings.length;\n    }\n   \
    \ return null;\n}\n/*\n Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \n*/\nNullable!(string) longest(string[]\
    \ strings, int startIndex, int endIndex, out int index, int length, int startIndex)\
    \ \n{\n    foreach(string; strings) {\n        if(string.length == strings.length\
    \ && startIndex < strings.length && endIndex < strings.length)\n            index\
    \ = strings.length;\n    }\n    return null;\n}\n/*\n Out of list of strings,\
    \ return the longest one. \nunittest\n{\n    alias candidate = longest;\n\n{\n\
    \        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n\
    \        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp6ca4pzzg.d(81): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp6ca4pzzg.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach (string s in\
    \ strings) {\n        if (s.length() > longest.length)\n            longest =\
    \ s;\n    }\n    return longest;\n}\n/*\n Out of list of strings, return the longest\
    \ one. Return the first one in case of multiple\n    strings of the same length.\
    \ Return None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int startIndex) \n{\n    foreach (string s in strings)\
    \ {\n        if (s.length() > longest.length)\n            longest = s;\n    }\n\
    \    return longest;\n}\n/*\n Out of list of strings, return the longest one.\
    \ Return the first one in case of multiple\n    strings of the same length. Return\
    \ None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int startIndex, int endIndex) \n{\n    foreach (string\
    \ s in strings) {\n        if (s.length() > longest.length)\n            longest\
    \ = s;\n    }\n    return longest;\n}\n/*\n Out of list of strings, return the\
    \ longest one. Return the first one in case of multiple\n    strings of the same\
    \ length. Return None in case the input list is empty.\n                \n*/\n\
    Nullable!(string) longest(string[] strings, char character) \n{\n    foreach (string\
    \ s in strings) {\n        if (s.length() > longest.length)\n            longest\
    \ = s;\n    }\n    return longest;\n}\n/*\n Out of list of strings, return the\
    \ longest one. Return the first one in case of multiple\n    strings of the same\
    \ length. Return None in case the input list is empty.\n                \n*/\n\
    Nullable!(string) longest(string[] strings, char character, int startIndex) \n\
    {\n    foreach (string s in strings) {\n        if (s.length() > longest.length)\n\
    \            longest = s;\n    }\n    return longest;\n}\n/*\n Out of list of\
    \ strings, return the longest one. Return the first one in case of multiple\n\
    \    strings of the same length. Return None in case the input list is empty.\n\
    \                \n*/\nNullable!(string) longest(string[] strings, char character,\
    \ int startIndex, int endIndex) \n{\n    foreach (string s in strings) {\n   \
    \     if (s.length() > longest.length)\n            longest = s;\n    }\n    return\
    \ longest;\n}\n/*\n Out of list of strings, return the longest one. Return the\
    \ first one in case of multiple\n    strings of the same length. Return None in\
    \ case the input list is empty.\n                \n*/\nNullable!(string) longest(string[]\
    \ strings, char character, int startIndex, int endIndex, bool caseSensitive) \n\
    {\n    foreach (string s in strings) {\n        if (s.length() > longest.length)\n\
    \nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpscg1t2qx.d(10): Error: found \''in\'' when expecting \'';\''\n/tmp/tmpscg1t2qx.d(23):
    Error: found \''in\'' when expecting \'';\''\n/tmp/tmpscg1t2qx.d(36): Error: found
    \''in\'' when expecting \'';\''\n/tmp/tmpscg1t2qx.d(49): Error: found \''in\''
    when expecting \'';\''\n/tmp/tmpscg1t2qx.d(62): Error: found \''in\'' when expecting
    \'';\''\n/tmp/tmpscg1t2qx.d(75): Error: found \''in\'' when expecting \'';\''\n/tmp/tmpscg1t2qx.d(88):
    Error: found \''in\'' when expecting \'';\''\n/tmp/tmpscg1t2qx.d(91): Error: found
    \''unittest\'' instead of statement\n/tmp/tmpscg1t2qx.d(111): Error: found \''EOF\''
    when expecting \''}\'' following compound statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpscg1t2qx.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    var longest = strings[0];\n\
    \    var longestLength = 0;\n    foreach(var s in strings) {\n        if(longestLength\
    \ < s.length)\n            longest = s;\n        longestLength = s.length;\n \
    \   }\n    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\n\
    {\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n\
    {\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpexmtsb99.d(12): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpexmtsb99.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length ==\
    \ 0) {\n        return null;\n    }\n    int maxLen = 0;\n    string maxString\
    \ = null;\n    foreach (string s in strings) {\n        if (s.length() > maxLen)\
    \ {\n            maxLen = s.length();\n            maxString = s;\n        }\n\
    \    }\n    return maxString;\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpjexbsb6h.d(15): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjexbsb6h.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach(string s in strings)\n\
    \    {\n        if(s.length() > longest.length)\n        {\n            longest\
    \ = s;\n        }\n    }\n    return longest;\n}\n/*\n Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return None in case the input list is empty.\n         \
    \       \n*/\nNullable!(string) longest(string[] strings, int startIndex) \n{\n\
    \    foreach(string s in strings)\n    {\n        if(s.length() > longest.length)\n\
    \        {\n            longest = s;\n        }\n    }\n    return longest;\n\
    }\n/*\n Out of list of strings, return the longest one. Return the first one in\
    \ case of multiple\n    strings of the same length. Return None in case the input\
    \ list is empty.\n                \n*/\nNullable!(string) longest(string[] strings,\
    \ int startIndex, int endIndex) \n{\n    foreach(string s in strings)\n    {\n\
    \        if(s.length() > longest.length)\n        {\n            longest = s;\n\
    \        }\n    }\n    return longest;\n}\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings, char separator) \n{\n    foreach(string\
    \ s in strings)\n    {\n        if(s.length() > longest.length)\n        {\n \
    \           longest = s;\n        }\n    }\n    return longest;\n}\n/*\n Out of\
    \ list of strings, return the longest one. Return the first one in case of multiple\n\
    \    strings of the same length. Return None in case the input list is empty.\n\
    \                \n*/\nNullable!(string) longest(string[] strings, char separator,\
    \ int startIndex) \n{\n    foreach(string s in strings)\n    {\n        if(s.length()\
    \ > longest.length)\n        {\n            longest = s;\n        }\n    }\n \
    \   return longest;\n}\n/*\n Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \n*/\nNullable!(string) longest(string[]\
    \ strings, char separator, int startIndex, int endIndex) \n{\n    foreach(string\
    \ s in strings)\n    {\n        if(s.length() > longest.length)\n        {\n \
    \           longest = s;\n        }\n    }\n    return longest;\n}\n/*\n Out of\
    \ list of strings, return the longest one. Return the first one in case of multiple\n\
    \    strings of the same length. Return None in case the input list is empty.\n\
    \                \n*/\nNull\nunittest\n{\n    alias candidate = longest;\n\n{\n\
    \        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n\
    \        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmprgdhdthk.d(10): Error: found \''in\'' when expecting \'';\''\n/tmp/tmprgdhdthk.d(26):
    Error: found \''in\'' when expecting \'';\''\n/tmp/tmprgdhdthk.d(42): Error: found
    \''in\'' when expecting \'';\''\n/tmp/tmprgdhdthk.d(58): Error: found \''in\''
    when expecting \'';\''\n/tmp/tmprgdhdthk.d(74): Error: found \''in\'' when expecting
    \'';\''\n/tmp/tmprgdhdthk.d(90): Error: found \''in\'' when expecting \'';\''\n/tmp/tmprgdhdthk.d(105):
    Error: no identifier for declarator Null\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmprgdhdthk.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach(string; strings)\
    \ {\n        if(string.length > longest.length)\n            longest = string;\n\
    \    }\n    return longest;\n}\n/*\n Out of list of strings, return the longest\
    \ one. Return the first one in case of multiple\n    strings of the same length.\
    \ Return None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings) \n{\n    foreach(string; strings) {\n        if(string.length\
    \ > longest.length)\n            longest = string;\n    }\n    return longest;\n\
    }\n/*\n Out of list of strings, return the longest one. Return the first one in\
    \ case of multiple\n    strings of the same length. Return None in case the input\
    \ list is empty.\n                \n*/\nNullable!(string) longest(string[] strings)\
    \ \n{\n    foreach(string; strings) {\n        if(string.length > longest.length)\n\
    \            longest = string;\n    }\n    return longest;\n}\n/*\n Out of list\
    \ of strings, return the longest one. Return the first one in case of multiple\n\
    \    strings of the same length. Return None in case the input list is empty.\n\
    \                \n*/\nNullable!(string) longest(string[] strings) \n{\n    foreach(string;\
    \ strings) {\n        if(string.length > longest.length)\n            longest\
    \ = string;\n    }\n    return longest;\n}\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach(string; strings)\
    \ {\n        if(string.length > longest.length)\n            longest = string;\n\
    \    }\n    return longest;\n}\n/*\n Out of list of strings, return the longest\
    \ one. Return the first one in case of multiple\n    strings of the same length.\
    \ Return None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings) \n{\n    foreach(string; strings) {\n        if(string.length\
    \ > longest.length)\n            longest = string;\n    }\n    return longest;\n\
    }\n/*\n Out of list of strings, return the longest one. Return the first one in\
    \ case of multiple\n    strings of the same length. Return None in case the input\
    \ list is empty.\n                \n*/\nNullable!(string) longest(string[] strings)\
    \ \n{\n    foreach(string; strings) {\n        if(string.length > longest.length)\n\
    \            longest = string;\n    }\n    return longest;\n}\n/*\n Out of list\
    \ of strings, return the longest one. Return the first one in case of multiple\n\
    \    strings of the same length. Return None \nunittest\n{\n    alias candidate\
    \ = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_ep395rc.d(94): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp_ep395rc.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    int? maxLength = null;\n\
    \    foreach (string s in strings) {\n        if (maxLength == null || s.length()\
    \ > maxLength.Value()) {\n            maxLength = s.length;\n        }\n    }\n\
    \    return maxLength;\n}\n/*\n Out of list of strings, return the longest one.\
    \ Return the first one in case of multiple\n    strings of the same length. Return\
    \ None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int maxLength) \n{\n    foreach (string s in strings)\
    \ {\n        if (s.length() > maxLength) {\n            maxLength = s.length;\n\
    \        }\n    }\n    return maxLength;\n}\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings, int maxLength, int minLength)\
    \ \n{\n    foreach (string s in strings) {\n        if (s.length() > maxLength\
    \ && s.length() < minLength) {\n            maxLength = s.length;\n        }\n\
    \    }\n    return maxLength;\n}\n/*\n Out of list of strings, return the longest\
    \ one. Return the first one in case of multiple\n    strings of the same length.\
    \ Return None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int maxLength, int minLength, int maxCount) \n{\n\
    \    foreach (string s in strings) {\n        if (s.length() > maxLength && s.length()\
    \ < minLength && s.length() >= maxCount) {\n            maxLength = s.length;\n\
    \        }\n    }\n    return maxLength;\n}\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings, int maxLength, int minLength,\
    \ int maxCount, int minCount) \n{\n    foreach (string s in strings) {\n     \
    \   if (s.length() > maxLength && s.length() < minLength && s.length() >= maxCount\
    \ && s.length() >= minCount) {\n            maxLength = s.length;\n        }\n\
    \    }\n    return maxLength;\n}\n/*\n Out of list of strings, return the longest\
    \ one. Return the first one in case of multiple\n    strings of the same length.\
    \ Return None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int maxLength, int minLength, int maxCount, int minCount,\
    \ int maxCount2) \n{\n    foreach (string s in strings) {\n        if (s.length()\
    \ > maxLength && s.length() < minLength && s.length() >= maxCount && s.length()\
    \ \nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_ow24e32.d(10): Error: no identifier for declarator int\n/tmp/tmp_ow24e32.d(10):
    Error: found \''?\'' instead of statement\n/tmp/tmp_ow24e32.d(11): Error: found
    \''in\'' when expecting \'';\''\n/tmp/tmp_ow24e32.d(25): Error: found \''in\''
    when expecting \'';\''\n/tmp/tmp_ow24e32.d(39): Error: found \''in\'' when expecting
    \'';\''\n/tmp/tmp_ow24e32.d(53): Error: found \''in\'' when expecting \'';\''\n/tmp/tmp_ow24e32.d(67):
    Error: found \''in\'' when expecting \'';\''\n/tmp/tmp_ow24e32.d(81): Error: found
    \''in\'' when expecting \'';\''\n/tmp/tmp_ow24e32.d(83): Error: found \''unittest\''
    when expecting \'')\''\n/tmp/tmp_ow24e32.d(103): Error: found \''EOF\'' when expecting
    \''}\'' following compound statement\n/tmp/tmp_ow24e32.d(103): Error: found \''EOF\''
    when expecting \''}\'' following compound statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmp_ow24e32.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    int? maxLength = null;\n\
    \    foreach (string s in strings) {\n        int length = s.length();\n     \
    \   if (maxLength == null || length > maxLength) {\n            maxLength = length;\n\
    \        }\n    }\n    return maxLength;\n}\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings, int maxLength) \n{\n    foreach\
    \ (string s in strings) {\n        int length = s.length();\n        if (length\
    \ > maxLength) {\n            maxLength = length;\n        }\n    }\n    return\
    \ maxLength;\n}\n/*\n Out of list of strings, return the longest one. Return the\
    \ first one in case of multiple\n    strings of the same length. Return None in\
    \ case the input list is empty.\n                \n*/\nNullable!(string) longest(string[]\
    \ strings, int maxLength, int minLength) \n{\n    foreach (string s in strings)\
    \ {\n        int length = s.length();\n        if (length > maxLength && length\
    \ < minLength) {\n            maxLength = length;\n        }\n    }\n    return\
    \ maxLength;\n}\n/*\n Out of list of strings, return the longest one. Return the\
    \ first one in case of multiple\n    strings of the same length. Return None in\
    \ case the input list is empty.\n                \n*/\nNullable!(string) longest(string[]\
    \ strings, int maxLength, int minLength, int maxLength2) \n{\n    foreach (string\
    \ s in strings) {\n        int length = s.length();\n        if (length > maxLength\
    \ && length < minLength && length < maxLength2) {\n            maxLength = length;\n\
    \        }\n    }\n    return maxLength;\n}\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings, int maxLength, int minLength,\
    \ int maxLength2, int minLength2) \n{\n    foreach (string s in strings) {\n \
    \       int length = s.length();\n        if (length > maxLength && length < minLength\
    \ && length < maxLength2 && length < minLength2) {\n            maxLength = length;\n\
    \        }\n    }\n    return maxLength;\n}\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings, int maxLength, int minLength,\
    \ int maxLength2, int minLength2, int maxLength3) \n{\n    foreach (string s in\
    \ strings) {\n        int length = s.length();\nunittest\n{\n    alias candidate\
    \ = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpfc_bjh05.d(10): Error: no identifier for declarator int\n/tmp/tmpfc_bjh05.d(10):
    Error: found \''?\'' instead of statement\n/tmp/tmpfc_bjh05.d(11): Error: found
    \''in\'' when expecting \'';\''\n/tmp/tmpfc_bjh05.d(26): Error: found \''in\''
    when expecting \'';\''\n/tmp/tmpfc_bjh05.d(41): Error: found \''in\'' when expecting
    \'';\''\n/tmp/tmpfc_bjh05.d(56): Error: found \''in\'' when expecting \'';\''\n/tmp/tmpfc_bjh05.d(71):
    Error: found \''in\'' when expecting \'';\''\n/tmp/tmpfc_bjh05.d(86): Error: found
    \''in\'' when expecting \'';\''\n/tmp/tmpfc_bjh05.d(88): Error: found \''unittest\''
    instead of statement\n/tmp/tmpfc_bjh05.d(108): Error: found \''EOF\'' when expecting
    \''}\'' following compound statement\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpfc_bjh05.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach(string; strings)\n\
    \    {\n        if(string.length > longest.length)\n        {\n            longest\
    \ = string;\n        }\n    }\n    return longest;\n}\n/*\n Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return None in case the input list is empty.\n         \
    \       \n*/\nNullable!(string) longest(string[] strings, int startIndex) \n{\n\
    \    foreach(string; strings)\n    {\n        if(string.length > longest.length)\n\
    \        {\n            longest = string;\n        }\n    }\n    return longest;\n\
    }\n/*\n Out of list of strings, return the longest one. Return the first one in\
    \ case of multiple\n    strings of the same length. Return None in case the input\
    \ list is empty.\n                \n*/\nNullable!(string) longest(string[] strings,\
    \ int startIndex, int endIndex) \n{\n    foreach(string; strings)\n    {\n   \
    \     if(string.length > longest.length)\n        {\n            longest = string;\n\
    \        }\n    }\n    return longest;\n}\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings, char character) \n{\n    foreach(string;\
    \ strings)\n    {\n        if(string.length > longest.length)\n        {\n   \
    \         longest = string;\n        }\n    }\n    return longest;\n}\n/*\n Out\
    \ of list of strings, return the longest one. Return the first one in case of\
    \ multiple\n    strings of the same length. Return None in case the input list\
    \ is empty.\n                \n*/\nNullable!(string) longest(string[] strings,\
    \ char character, int startIndex) \n{\n    foreach(string; strings)\n    {\n \
    \       if(string.length > longest.length)\n        {\n            longest = string;\n\
    \        }\n    }\n    return longest;\n}\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings, char character, int startIndex,\
    \ int endIndex) \n{\n    foreach(string; strings)\n    {\n        if(string.length\
    \ > longest.length)\n        {\n            longest = string;\n        }\n   \
    \ }\n    return longest;\n}\n/*\n Out of list of strings, return the longest one.\
    \ Return the first one in case of multiple\n    strings of the same length. Return\
    \ None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ \nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpk55jb3rn.d(105): Error: no identifier for declarator Nullable!string\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpk55jb3rn.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach(string; strings)\
    \ {\n        if(string.length > longest.length)\n            longest = string;\n\
    \    }\n    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\n\
    {\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n\
    {\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqpklbg5c.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach(string; strings)\
    \ {\n        if(string.length > longest.length)\n            longest = string;\n\
    \    }\n    return longest;\n}\n/*\n Out of list of strings, return the longest\
    \ one. Return the first one in case of multiple\n    strings of the same length.\
    \ Return None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int startIndex) \n{\n    foreach(string; strings)\
    \ {\n        if(string.length > longest.length)\n            longest = string;\n\
    \        if(startIndex == strings.length)\n            break;\n    }\n    return\
    \ longest;\n}\n/*\n Out of list of strings, return the longest one. Return the\
    \ first one in case of multiple\n    strings of the same length. Return None in\
    \ case the input list is empty.\n                \n*/\nNullable!(string) longest(string[]\
    \ strings, int startIndex, int endIndex) \n{\n    foreach(string; strings) {\n\
    \        if(string.length > longest.length)\n            longest = string;\n \
    \       if(startIndex == strings.length && endIndex == strings.length)\n     \
    \       break;\n    }\n    return longest;\n}\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings, int startIndex, int endIndex,\
    \ int limit) \n{\n    foreach(string; strings) {\n        if(string.length > longest.length)\n\
    \            longest = string;\n        if(startIndex == strings.length && endIndex\
    \ == strings.length && limit == strings.length)\n            break;\n    }\n \
    \   return longest;\n}\n/*\n Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \n*/\nNullable!(string) longest(string[]\
    \ strings, int startIndex, int endIndex, int limit, int offset) \n{\n    foreach(string;\
    \ strings) {\n        if(string.length > longest.length)\n            longest\
    \ = string;\n        if(startIndex == strings.length && endIndex == strings.length\
    \ && limit == strings.length && offset == strings.length)\n            break;\n\
    \    }\n    return longest;\n}\n/*\n Out of list of strings, return the longest\
    \ one. Return the first one in case of multiple\n    strings of the same length.\
    \ Return None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int startIndex, int endIndex, int limit, int offset,\
    \ int limitOffset) \n{\n    foreach(string; strings) {\n        if(string.length\
    \ > longest.length)\n            longest = \nunittest\n{\n    alias candidate\
    \ = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpiqi_w86x.d(86): Error: expression expected, not \''unittest\''\n/tmp/tmpiqi_w86x.d(87):
    Error: found \''{\'' when expecting \'';\'' following statement\n/tmp/tmpiqi_w86x.d(106):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpiqi_w86x.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    int? maxLength = null;\n\
    \    foreach(string? s in strings)\n    {\n        if(maxLength == null || s.length()\
    \ > maxLength)\n        {\n            maxLength = s.length;\n        }\n    }\n\
    \    return maxLength;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n\
    \        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n\
    \        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpn9scczbg.d(10): Error: no identifier for declarator int\n/tmp/tmpn9scczbg.d(10):
    Error: found \''?\'' instead of statement\n/tmp/tmpn9scczbg.d(11): Error: no identifier
    for declarator string\n/tmp/tmpn9scczbg.d(11): Error: found \''?\'' when expecting
    \'';\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpn9scczbg.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    int? maxLength = null;\n\
    \    foreach (string s in strings) {\n        if (maxLength == null || s.length()\
    \ > maxLength.value) {\n            maxLength = s.length;\n        }\n    }\n\
    \    return maxLength;\n}\n/*\n Out of list of strings, return the longest one.\
    \ Return the first one in case of multiple\n    strings of the same length. Return\
    \ None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int start) \n{\n    int? maxLength = null;\n    foreach\
    \ (string s in strings) {\n        if (maxLength == null || s.length() > maxLength.value)\
    \ {\n            maxLength = s.length;\n        }\n    }\n    return maxLength;\n\
    }\n/*\n Out of list of strings, return the longest one. Return the first one in\
    \ case of multiple\n    strings of the same length. Return None in case the input\
    \ list is empty.\n                \n*/\nNullable!(string) longest(string[] strings,\
    \ int start, int end) \n{\n    int? maxLength = null;\n    foreach (string s in\
    \ strings) {\n        if (maxLength == null || s.length() > maxLength.value) {\n\
    \            maxLength = s.length;\n        }\n    }\n    return maxLength;\n\
    }\n/*\n Out of list of strings, return the longest one. Return the first one in\
    \ case of multiple\n    strings of the same length. Return None in case the input\
    \ list is empty.\n                \n*/\nNullable!(string) longest(string[] strings,\
    \ int start, int end, int step) \n{\n    int? maxLength = null;\n    foreach (string\
    \ s in strings) {\n        if (maxLength == null || s.length() > maxLength.value)\
    \ {\n            maxLength = s.length;\n        }\n    }\n    return maxLength;\n\
    }\n/*\n Out of list of strings, return the longest one. Return the first one in\
    \ case of multiple\n    strings of the same length. Return None in case the input\
    \ list is empty.\n                \n*/\nNullable!(string) longest(string[] strings,\
    \ int start, int end, int step, int length) \n{\n    int? maxLength = null;\n\
    \    foreach (string s in strings) {\n        if (maxLength == null || s.length()\
    \ > maxLength.value) {\n            maxLength = s.length;\n        }\n    }\n\
    \    return maxLength;\n}\n/*\n Out of list of strings, return the longest one.\
    \ Return the first one in case of multiple\n    strings of the same length. Return\
    \ None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int start, int end, int step, int length, int startIndex)\
    \ \n{\n    int? maxLength = null;\n    foreach (string s in strings) {\n     \
    \   if (maxLength == null || s.length() > maxLength.value) {\n            maxLength\
    \ = s.length;\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto\
    \ result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull &&\
    \ result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\"\
    , \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get\
    \ == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptpymw_6z.d(10): Error: no identifier for declarator int\n/tmp/tmptpymw_6z.d(10):
    Error: found \''?\'' instead of statement\n/tmp/tmptpymw_6z.d(11): Error: found
    \''in\'' when expecting \'';\''\n/tmp/tmptpymw_6z.d(25): Error: no identifier
    for declarator int\n/tmp/tmptpymw_6z.d(25): Error: found \''?\'' instead of statement\n/tmp/tmptpymw_6z.d(26):
    Error: found \''in\'' when expecting \'';\''\n/tmp/tmptpymw_6z.d(40): Error: no
    identifier for declarator int\n/tmp/tmptpymw_6z.d(40): Error: found \''?\'' instead
    of statement\n/tmp/tmptpymw_6z.d(41): Error: found \''in\'' when expecting \'';\''\n/tmp/tmptpymw_6z.d(55):
    Error: no identifier for declarator int\n/tmp/tmptpymw_6z.d(55): Error: found
    \''?\'' instead of statement\n/tmp/tmptpymw_6z.d(56): Error: found \''in\'' when
    expecting \'';\''\n/tmp/tmptpymw_6z.d(70): Error: no identifier for declarator
    int\n/tmp/tmptpymw_6z.d(70): Error: found \''?\'' instead of statement\n/tmp/tmptpymw_6z.d(71):
    Error: found \''in\'' when expecting \'';\''\n/tmp/tmptpymw_6z.d(85): Error: no
    identifier for declarator int\n/tmp/tmptpymw_6z.d(85): Error: found \''?\'' instead
    of statement\n/tmp/tmptpymw_6z.d(86): Error: found \''in\'' when expecting \'';\''\n/tmp/tmptpymw_6z.d(89):
    Error: found \''unittest\'' instead of statement\n/tmp/tmptpymw_6z.d(109): Error:
    found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmptpymw_6z.d(109):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmptpymw_6z.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach (string s in\
    \ strings) {\n        if (s.length() > longest.length)\n            longest =\
    \ s;\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpybbdln8p.d(10): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpybbdln8p.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    var longest:string =\
    \ null;\n    var longestLength:int = 0;\n    var i:int = 0;\n    \n    while(i\
    \ < strings.length)\n    {\n        var length = strings[i].length;\n        if(length\
    \ > longestLength)\n        {\n            longest = strings[i];\n           \
    \ longestLength = length;\n        }\n        i++;\n    }\n    return longest;\n\
    }\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpfx0cp_rj.d(10): Error: found \''longest\'' when expecting \'';\''
    following statement\n/tmp/tmpfx0cp_rj.d(10): Error: found \'':\'' instead of statement\n/tmp/tmpfx0cp_rj.d(11):
    Error: found \''longestLength\'' when expecting \'';\'' following statement\n/tmp/tmpfx0cp_rj.d(11):
    Error: found \'':\'' instead of statement\n/tmp/tmpfx0cp_rj.d(12): Error: found
    \''i\'' when expecting \'';\'' following statement\n/tmp/tmpfx0cp_rj.d(12): Error:
    found \'':\'' instead of statement\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpfx0cp_rj.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    var maxLength = 0;\n\
    \    var maxString = null;\n    foreach(var s in strings)\n    {\n        if(s.length()\
    \ > maxLength)\n        {\n            maxLength = s.length();\n            maxString\
    \ = s;\n        }\n    }\n    return maxString;\n}\nunittest\n{\n    alias candidate\
    \ = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphab__1jy.d(12): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphab__1jy.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    var longest = strings[0];\n\
    \    for(var i = 1; i < strings.length; ++i)\n    {\n        if(strings[i].length\
    \ < longest.length)\n        {\n            longest = strings[i];\n        }\n\
    \    }\n    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\n\
    {\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n\
    {\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnm2j1_lv.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    int? maxLength = null;\n\
    \    foreach (string s in strings) {\n        if (maxLength == null || s.length()\
    \ > maxLength) {\n            maxLength = s.length;\n        }\n    }\n    return\
    \ maxLength;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto\
    \ result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull &&\
    \ result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\"\
    , \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get\
    \ == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5lad9ctw.d(10): Error: no identifier for declarator int\n/tmp/tmp5lad9ctw.d(10):
    Error: found \''?\'' instead of statement\n/tmp/tmp5lad9ctw.d(11): Error: found
    \''in\'' when expecting \'';\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5lad9ctw.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    var longest = strings[0];\n\
    \    var longestLength = longest.length;\n    for(var i = 1; i < strings.length;\
    \ ++i)\n    {\n        var s = strings[i];\n        if(s.length == longestLength)\n\
    \        {\n            longest = s;\n        }\n        else\n        {\n   \
    \         longestLength = s.length;\n        }\n    }\n    return longest;\n}\n\
    /*\n Out of list of strings, return the longest one. Return the first one in case\
    \ of multiple\n    strings of the same length. Return None in case the input list\
    \ is empty.\n                \n*/\nNullable!(string) longest(string[] strings,\
    \ int startIndex) \n{\n    var longest = strings[startIndex];\n    var longestLength\
    \ = longest.length;\n    for(var i = startIndex + 1; i < strings.length; ++i)\n\
    \    {\n        var s = strings[i];\n        if(s.length == longestLength)\n \
    \       {\n            longest = s;\n        }\n        else\n        {\n    \
    \        longestLength = s.length;\n        }\n    }\n    return longest;\n}\n\
    /*\n Out of list of strings, return the longest one. Return the first one in case\
    \ of multiple\n    strings of the same length. Return None in case the input list\
    \ is empty.\n                \n*/\nNullable!(string) longest(string[] strings,\
    \ int startIndex, int endIndex) \n{\n    var longest = strings[startIndex];\n\
    \    var longestLength = longest.length;\n    for(var i = startIndex + 1; i <\
    \ endIndex; ++i)\n    {\n        var s = strings[i];\n        if(s.length == longestLength)\n\
    \        {\n            longest = s;\n        }\n        else\n        {\n   \
    \         longestLength = s.length;\n        }\n    }\n    return longest;\n}\n\
    /*\n Out of list of strings, return the longest one. Return the first one in case\
    \ of multiple\n    strings of the same length. Return None in case the input list\
    \ is empty.\n                \n*/\nNullable!(string) longest(string[] strings,\
    \ char c, int startIndex) \n{\n    var longest = strings[startIndex];\n    var\
    \ longestLength = longest.length;\n    for(var i = startIndex + 1; i < strings.length;\
    \ ++i)\n    {\n        var s = strings[i];\n        if(s.length == longestLength)\n\
    \        {\n            longest = s;\n        }\n        else\n        {\n   \
    \         longestLength = s.length;\n        }\n    }\n    return longest;\n}\n\
    /*\n Out of list of strings, return the longest one. Return the first one in case\
    \ of multiple\n    strings of the same length. Return None in case the input list\
    \ is empty.\n                \n*/\nNullable!(string) longest(string[] strings,\
    \ char c, int startIndex, int endIndex) \n{\n    var longest = strings[startIndex];\n\
    \    var longestLength = longest.length;\n    for(var i = startIndex + 1\nunittest\n\
    {\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpxbugjb21.d(105): Error: semicolon expected, not \''unittest\''\n/tmp/tmpxbugjb21.d(105):
    Error: expression expected, not \''unittest\''\n/tmp/tmpxbugjb21.d(106): Error:
    found \''{\'' when expecting \'';\'' following for condition\n/tmp/tmpxbugjb21.d(107):
    Error: expression expected, not \''alias\''\n/tmp/tmpxbugjb21.d(107): Error: found
    \''candidate\'' when expecting \'')\''\n/tmp/tmpxbugjb21.d(107): Error: found
    \''=\'' instead of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxbugjb21.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach(string; strings)\
    \ {\n        if(string.length() > longest.length())\n            longest = string;\n\
    \    }\n    return longest;\n}\n/*\n Out of list of strings, return the longest\
    \ one. Return the first one in case of multiple\n    strings of the same length.\
    \ Return None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int startIndex) \n{\n    foreach(string; strings)\
    \ {\n        if(string.length() > longest.length())\n            longest = string;\n\
    \    }\n    return longest;\n}\n/*\n Out of list of strings, return the longest\
    \ one. Return the first one in case of multiple\n    strings of the same length.\
    \ Return None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int startIndex, int endIndex) \n{\n    foreach(string;\
    \ strings) {\n        if(string.length() > longest.length())\n            longest\
    \ = string;\n    }\n    return longest;\n}\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings, char character) \n{\n    foreach(string;\
    \ strings) {\n        if(string.length() > longest.length())\n            longest\
    \ = string;\n    }\n    return longest;\n}\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings, char character, int startIndex)\
    \ \n{\n    foreach(string; strings) {\n        if(string.length() > longest.length())\n\
    \            longest = string;\n    }\n    return longest;\n}\n/*\n Out of list\
    \ of strings, return the longest one. Return the first one in case of multiple\n\
    \    strings of the same length. Return None in case the input list is empty.\n\
    \                \n*/\nNullable!(string) longest(string[] strings, char character,\
    \ int startIndex, int endIndex) \n{\n    foreach(string; strings) {\n        if(string.length()\
    \ > longest.length())\n            longest = string;\n    }\n    return longest;\n\
    }\n/*\n Out of list of strings, return the longest one. Return the first one in\
    \ case of multiple\n    strings of the same length. Return None in case the input\
    \ list is empty.\n                \n*/\nNullable!(string) longest(string[] strings,\
    \ char character, int startIndex, int endIndex, bool caseSensitive) \n{\n    foreach(string;\
    \ strings) {\n        if(\nunittest\n{\n    alias candidate = longest;\n\n{\n\
    \        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n\
    \        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpz_zvlxsz.d(90): Error: expression expected, not \''unittest\''\n/tmp/tmpz_zvlxsz.d(91):
    Error: found \''{\'' when expecting \'')\''\n/tmp/tmpz_zvlxsz.d(110): Error: found
    \''EOF\'' when expecting \''}\'' following compound statement\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpz_zvlxsz.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach(string s in strings)\n\
    \    {\n        if(s.length() > longest.length)\n        {\n            longest\
    \ = s;\n        }\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate\
    \ = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_mw2m4tj.d(10): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_mw2m4tj.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    var longest = strings[0];\n\
    \    foreach(var s in strings)\n    {\n        if(s.length > longest.length)\n\
    \            longest = s;\n    }\n    return longest;\n}\nunittest\n{\n    alias\
    \ candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8vbq5cwx.d(11): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8vbq5cwx.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach(string s in strings)\n\
    \    {\n        if(s.length() > longest.length)\n            longest = s;\n  \
    \  }\n    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\n\
    {\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n\
    {\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4ga3pibb.d(10): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4ga3pibb.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach(string s in strings)\
    \ {\n        if(s.length() > longest.length)\n            longest = s;\n    }\n\
    \    return longest;\n}\n/*\n Out of list of strings, return the longest one.\
    \ Return the first one in case of multiple\n    strings of the same length. Return\
    \ None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int start) \n{\n    foreach(string s in strings) {\n\
    \        if(s.length() > longest.length)\n            longest = s;\n    }\n  \
    \  return longest;\n}\n/*\n Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \n*/\nNullable!(string) longest(string[]\
    \ strings, int start, int end) \n{\n    foreach(string s in strings) {\n     \
    \   if(s.length() > longest.length)\n            longest = s;\n    }\n    return\
    \ longest;\n}\n/*\n Out of list of strings, return the longest one. Return the\
    \ first one in case of multiple\n    strings of the same length. Return None in\
    \ case the input list is empty.\n                \n*/\nNullable!(string) longest(string[]\
    \ strings, int start, int end, int step) \n{\n    foreach(string s in strings)\
    \ {\n        if(s.length() > longest.length)\n            longest = s;\n    }\n\
    \    return longest;\n}\n/*\n Out of list of strings, return the longest one.\
    \ Return the first one in case of multiple\n    strings of the same length. Return\
    \ None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int start, int end, int step, string separator) \n\
    {\n    foreach(string s in strings) {\n        if(s.length() > longest.length)\n\
    \            longest = s;\n    }\n    return longest;\n}\n/*\n Out of list of\
    \ strings, return the longest one. Return the first one in case of multiple\n\
    \    strings of the same length. Return None in case the input list is empty.\n\
    \                \n*/\nNullable!(string) longest(string[] strings, int start,\
    \ int end, int step, string separator, int limit) \n{\n    foreach(string s in\
    \ strings) {\n        if(s.length() > longest.length)\n            longest = s;\n\
    \    }\n    return longest;\n}\n/*\n Out of list of strings, return the longest\
    \ one. Return the first one in case of multiple\n    strings of the same length.\
    \ Return None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int start, int end, int step, string separator, int\
    \ limit, int offset) \n{\n    foreach(string s in string\nunittest\n{\n    alias\
    \ candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4vagwbiq.d(10): Error: found \''in\'' when expecting \'';\''\n/tmp/tmp4vagwbiq.d(23):
    Error: found \''in\'' when expecting \'';\''\n/tmp/tmp4vagwbiq.d(36): Error: found
    \''in\'' when expecting \'';\''\n/tmp/tmp4vagwbiq.d(49): Error: found \''in\''
    when expecting \'';\''\n/tmp/tmp4vagwbiq.d(62): Error: found \''in\'' when expecting
    \'';\''\n/tmp/tmp4vagwbiq.d(75): Error: found \''in\'' when expecting \'';\''\n/tmp/tmp4vagwbiq.d(88):
    Error: found \''in\'' when expecting \'';\''\n/tmp/tmp4vagwbiq.d(89): Error: found
    \''unittest\'' when expecting \'')\''\n/tmp/tmp4vagwbiq.d(109): Error: found \''EOF\''
    when expecting \''}\'' following compound statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmp4vagwbiq.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach(string; strings)\
    \ \n    {\n        if (string.length == strings.length) \n        {\n        \
    \    return string;\n        }\n    }\n    return None;\n}\n/*\n Out of list of\
    \ strings, return the longest one. Return the first one in case of multiple\n\
    \    strings of the same length. Return None in case the input list is empty.\n\
    \                \n*/\nNullable!(string) longest(string[] strings, int startIndex)\
    \ \n{\n    foreach(string; strings) \n    {\n        if (string.length == strings.length\
    \ && startIndex < strings.length) \n        {\n            return string;\n  \
    \      }\n    }\n    return None;\n}\n/*\n Out of list of strings, return the\
    \ longest one. Return the first one in case of multiple\n    strings of the same\
    \ length. Return None in case the input list is empty.\n                \n*/\n\
    Nullable!(string) longest(string[] strings, int startIndex, int endIndex) \n{\n\
    \    foreach(string; strings) \n    {\n        if (string.length == strings.length\
    \ && startIndex < strings.length && endIndex < strings.length) \n        {\n \
    \           return string;\n        }\n    }\n    return None;\n}\n/*\n Out of\
    \ list of strings, return the longest one. Return the first one in case of multiple\n\
    \    strings of the same length. Return None in case the input list is empty.\n\
    \                \n*/\nNullable!(string) longest(string[] strings, int startIndex,\
    \ int endIndex, int maxLength) \n{\n    foreach(string; strings) \n    {\n   \
    \     if (string.length == strings.length && startIndex < strings.length && endIndex\
    \ < strings.length && maxLength < strings.length) \n        {\n            return\
    \ string;\n        }\n    }\n    return None;\n}\n/*\n Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return None in case the input list is empty.\n         \
    \       \n*/\nNullable!(string) longest(string[] strings, int startIndex, int\
    \ endIndex, int maxLength, int minLength) \n{\n    foreach(string; strings) \n\
    \    {\n        if (string.length == strings.length && startIndex < strings.length\
    \ && endIndex < strings.length && maxLength < strings.length && minLength < strings.length)\
    \ \n        {\n            return string;\n        }\n    }\n    return None;\n\
    }\n/*\n Out of list of strings, return the longest one. Return the first one in\
    \ case of multiple\n    strings of the same length. Return None in case the input\
    \ list is empty.\n                \n*/\nNullable!(string) longest(string[] strings,\
    \ int startIndex, int endIndex, int maxLength, int minLength, int maxCount) \n\
    {\n    foreach(string; string\nunittest\n{\n    alias candidate = longest;\n\n\
    {\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n\
    {\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1tf9s29t.d(91): Error: found \''unittest\'' when expecting \'')\''\n/tmp/tmp1tf9s29t.d(111):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1tf9s29t.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach(string s in strings)\n\
    \    {\n        if(s.length() > longest.length)\n            longest = s;\n  \
    \  }\n    return longest;\n}\n/*\n Out of list of strings, return the longest\
    \ one. Return the first one in case of multiple\n    strings of the same length.\
    \ Return None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int startIndex) \n{\n    foreach(string s in strings)\n\
    \    {\n        if(s.length() > longest.length)\n            longest = s;\n  \
    \  }\n    return longest;\n}\n/*\n Out of list of strings, return the longest\
    \ one. Return the first one in case of multiple\n    strings of the same length.\
    \ Return None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int startIndex, int endIndex) \n{\n    foreach(string\
    \ s in strings)\n    {\n        if(s.length() > longest.length)\n            longest\
    \ = s;\n    }\n    return longest;\n}\n/*\n Out of list of strings, return the\
    \ longest one. Return the first one in case of multiple\n    strings of the same\
    \ length. Return None in case the input list is empty.\n                \n*/\n\
    Nullable!(string) longest(string[] strings, char character) \n{\n    foreach(string\
    \ s in strings)\n    {\n        if(s.length() > longest.length)\n            longest\
    \ = s;\n    }\n    return longest;\n}\n/*\n Out of list of strings, return the\
    \ longest one. Return the first one in case of multiple\n    strings of the same\
    \ length. Return None in case the input list is empty.\n                \n*/\n\
    Nullable!(string) longest(string[] strings, char character, int startIndex) \n\
    {\n    foreach(string s in strings)\n    {\n        if(s.length() > longest.length)\n\
    \            longest = s;\n    }\n    return longest;\n}\n/*\n Out of list of\
    \ strings, return the longest one. Return the first one in case of multiple\n\
    \    strings of the same length. Return None in case the input list is empty.\n\
    \                \n*/\nNullable!(string) longest(string[] strings, char character,\
    \ int startIndex, int endIndex) \n{\n    foreach(string s in strings)\n    {\n\
    \        if(s.length() > longest.length)\n            longest = s;\n    }\n  \
    \  return longest;\n}\n/*\n Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \n*/\nNullable!(string) longest(string[]\
    \ strings, char character, int startIndex, int endIndex, bool caseSensitive\n\
    unittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmptvxuzppb.d(10): Error: found \''in\'' when expecting \'';\''\n/tmp/tmptvxuzppb.d(24):
    Error: found \''in\'' when expecting \'';\''\n/tmp/tmptvxuzppb.d(38): Error: found
    \''in\'' when expecting \'';\''\n/tmp/tmptvxuzppb.d(52): Error: found \''in\''
    when expecting \'';\''\n/tmp/tmptvxuzppb.d(66): Error: found \''in\'' when expecting
    \'';\''\n/tmp/tmptvxuzppb.d(80): Error: found \''in\'' when expecting \'';\''\n/tmp/tmptvxuzppb.d(93):
    Error: found \''unittest\'' when expecting \'')\''\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmptvxuzppb.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach(string; strings)\
    \ {\n        if(string.length == strings.length)\n            return string;\n\
    \    }\n    return null;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n\
    \        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n\
    \        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp1keq4o4.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    int? maxLength = null;\n\
    \    foreach (string s in strings) {\n        if (maxLength == null || s.length()\
    \ > maxLength) {\n            maxLength = s.length;\n        }\n    }\n    return\
    \ maxLength;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto\
    \ result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull &&\
    \ result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\"\
    , \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get\
    \ == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5lad9ctw.d(10): Error: no identifier for declarator int\n/tmp/tmp5lad9ctw.d(10):
    Error: found \''?\'' instead of statement\n/tmp/tmp5lad9ctw.d(11): Error: found
    \''in\'' when expecting \'';\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5lad9ctw.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach(string; strings)\
    \ {\n        if(string.length > longest.length) longest = string;\n    }\n   \
    \ return longest;\n}\n/*\n Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \n*/\nNullable!(string) longest(string[]\
    \ strings, int startIndex) \n{\n    foreach(string; strings) {\n        if(string.length\
    \ > longest.length) longest = string;\n    }\n    return longest;\n}\n/*\n Out\
    \ of list of strings, return the longest one. Return the first one in case of\
    \ multiple\n    strings of the same length. Return None in case the input list\
    \ is empty.\n                \n*/\nNullable!(string) longest(string[] strings,\
    \ int startIndex, int endIndex) \n{\n    foreach(string; strings) {\n        if(string.length\
    \ > longest.length) longest = string;\n    }\n    return longest;\n}\n/*\n Out\
    \ of list of strings, return the longest one. Return the first one in case of\
    \ multiple\n    strings of the same length. Return None in case the input list\
    \ is empty.\n                \n*/\nNullable!(string) longest(string[] strings,\
    \ char separator) \n{\n    foreach(string; strings) {\n        if(string.length\
    \ > longest.length) longest = string;\n    }\n    return longest;\n}\n/*\n Out\
    \ of list of strings, return the longest one. Return the first one in case of\
    \ multiple\n    strings of the same length. Return None in case the input list\
    \ is empty.\n                \n*/\nNullable!(string) longest(string[] strings,\
    \ char separator, int startIndex) \n{\n    foreach(string; strings) {\n      \
    \  if(string.length > longest.length) longest = string;\n    }\n    return longest;\n\
    }\n/*\n Out of list of strings, return the longest one. Return the first one in\
    \ case of multiple\n    strings of the same length. Return None in case the input\
    \ list is empty.\n                \n*/\nNullable!(string) longest(string[] strings,\
    \ char separator, int startIndex, int endIndex) \n{\n    foreach(string; strings)\
    \ {\n        if(string.length > longest.length) longest = string;\n    }\n   \
    \ return longest;\n}\n/*\n Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \n*/\nNullable!(string) longest(string[]\
    \ strings, char separator, int startIndex, int endIndex, char separator2) \n{\n\
    \    foreach(string; strings) {\n        if(string.length > longest.length) longest\
    \ = string;\n    }\n    return longest;\n}\n/*\n Out of list of strings, \nunittest\n\
    {\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8xzmp6_m.d(87): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp8xzmp6_m.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    int? maxLength = null;\n\
    \    foreach(string? s in strings) {\n        if (maxLength == null || s.length()\
    \ > maxLength) {\n            maxLength = s.length();\n        }\n    }\n    return\
    \ maxLength;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto\
    \ result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull &&\
    \ result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\"\
    , \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get\
    \ == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8kbamswq.d(10): Error: no identifier for declarator int\n/tmp/tmp8kbamswq.d(10):
    Error: found \''?\'' instead of statement\n/tmp/tmp8kbamswq.d(11): Error: no identifier
    for declarator string\n/tmp/tmp8kbamswq.d(11): Error: found \''?\'' when expecting
    \'';\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8kbamswq.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length ==\
    \ 0) {\n        return null;\n    }\n    \n    int maxLength = 0;\n    string\
    \ maxString = null;\n    \n    for (string s in strings) {\n        if (s.length()\
    \ > maxLength) {\n            maxLength = s.length();\n            maxString =\
    \ s;\n        }\n    }\n    \n    return maxString;\n}\nunittest\n{\n    alias\
    \ candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp6c23g397.d(17): Error: semicolon expected, not \''in\''\n/tmp/tmp6c23g397.d(17):
    Error: expression expected, not \''in\''\n/tmp/tmp6c23g397.d(17): Error: found
    \''strings\'' when expecting \'';\'' following for condition\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp6c23g397.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n\tint? maxLength = null;\n\
    \tstring maxString = null;\n\tforeach(string! s, strings) {\n\t\tint length =\
    \ s.length();\n\t\tif (maxLength == null || length > maxLength) {\n\t\t\tmaxLength\
    \ = length;\n\t\t\tmaxString = s;\n\t\t}\n\t}\n\treturn maxString;\n}\n/*\n Out\
    \ of list of strings, return the longest one. Return the first one in case of\
    \ multiple\n    strings of the same length. Return None in case the input list\
    \ is empty.\n                \n*/\nNullable!(string) longest(string[] strings,\
    \ int maxLength) \n{\n\tstring maxString = null;\n\tforeach(string! s, strings)\
    \ {\n\t\tint length = s.length();\n\t\tif (maxLength == null || length > maxLength)\
    \ {\n\t\t\tmaxLength = length;\n\t\t\tmaxString = s;\n\t\t}\n\t}\n\treturn maxString;\n\
    }\n/*\n Out of list of strings, return the longest one. Return the first one in\
    \ case of multiple\n    strings of the same length. Return None in case the input\
    \ list is empty.\n                \n*/\nNullable!(string) longest(string[] strings,\
    \ int maxLength, int maxLength2) \n{\n\tstring maxString = null;\n\tforeach(string!\
    \ s, strings) {\n\t\tint length = s.length();\n\t\tif (maxLength == null || length\
    \ > maxLength) {\n\t\t\tmaxLength = length;\n\t\t\tmaxString = s;\n\t\t}\n\t}\n\
    \treturn maxString;\n}\n/*\n Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \n*/\nNullable!(string) longest(string[]\
    \ strings, int maxLength, int maxLength2, int maxLength3) \n{\n\tstring maxString\
    \ = null;\n\tforeach(string! s, strings) {\n\t\tint length = s.length();\n\t\t\
    if (maxLength == null || length > maxLength) {\n\t\t\tmaxLength = length;\n\t\t\
    \tmaxString = s;\n\t\t}\n\t}\n\treturn maxString;\n}\n/*\n Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return None in case the input list is empty.\n         \
    \       \n*/\nNullable!(string) longest(string[] strings, int maxLength, int maxLength2,\
    \ int maxLength3, int maxLength4) \n{\n\tstring maxString = null;\n\tforeach(string!\
    \ s, strings) {\n\t\tint length = s.length();\n\t\tif (maxLength == null || length\
    \ > maxLength) {\n\t\t\tmaxLength = length;\n\t\t\tmaxString = s;\n\t\t}\n\t}\n\
    \treturn maxString;\n}\n/*\n Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length\nunittest\n\
    {\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_b7595eq.d(10): Error: no identifier for declarator int\n/tmp/tmp_b7595eq.d(10):
    Error: found \''?\'' instead of statement\n/tmp/tmp_b7595eq.d(12): Error: no identifier
    for declarator string!s\n/tmp/tmp_b7595eq.d(12): Error: no identifier for declarator
    strings\n/tmp/tmp_b7595eq.d(12): Error: found \'')\'' when expecting \'';\''\n/tmp/tmp_b7595eq.d(19):
    Error: found \''return\'' when expecting \'')\''\n/tmp/tmp_b7595eq.d(29): Error:
    no identifier for declarator string!s\n/tmp/tmp_b7595eq.d(29): Error: no identifier
    for declarator strings\n/tmp/tmp_b7595eq.d(29): Error: found \'')\'' when expecting
    \'';\''\n/tmp/tmp_b7595eq.d(36): Error: found \''return\'' when expecting \'')\''\n/tmp/tmp_b7595eq.d(46):
    Error: no identifier for declarator string!s\n/tmp/tmp_b7595eq.d(46): Error: no
    identifier for declarator strings\n/tmp/tmp_b7595eq.d(46): Error: found \'')\''
    when expecting \'';\''\n/tmp/tmp_b7595eq.d(53): Error: found \''return\'' when
    expecting \'')\''\n/tmp/tmp_b7595eq.d(63): Error: no identifier for declarator
    string!s\n/tmp/tmp_b7595eq.d(63): Error: no identifier for declarator strings\n/tmp/tmp_b7595eq.d(63):
    Error: found \'')\'' when expecting \'';\''\n/tmp/tmp_b7595eq.d(70): Error: found
    \''return\'' when expecting \'')\''\n/tmp/tmp_b7595eq.d(80): Error: no identifier
    for declarator string!s\n/tmp/tmp_b7595eq.d(80): Error: no identifier for declarator
    strings\n/tmp/tmp_b7595eq.d(80): Error: found \'')\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_b7595eq.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach(string s in strings)\
    \ {\n        if(s.length() > longest.length()) {\n            longest = s;\n \
    \       }\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpt4emkuny.d(10): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt4emkuny.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    int[] lengths = strings.lengths.toArray();\n\
    \    int maxLength = 0;\n    int maxIndex = 0;\n    for(int i = 0; i < lengths.length;\
    \ i++)\n    {\n        if(lengths[i] > maxLength)\n        {\n            maxLength\
    \ = lengths[i];\n            maxIndex = i;\n        }\n    }\n    return maxIndex\
    \ < lengths.length ? strings[maxIndex] : null;\n}\n/*\n Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return None in case the input list is empty.\n         \
    \       \n*/\nNullable!(string) longest(string[] strings, int startIndex) \n{\n\
    \    int[] lengths = strings.lengths.toArray();\n    int maxLength = 0;\n    int\
    \ maxIndex = 0;\n    for(int i = startIndex; i < lengths.length; i++)\n    {\n\
    \        if(lengths[i] > maxLength)\n        {\n            maxLength = lengths[i];\n\
    \            maxIndex = i;\n        }\n    }\n    return maxIndex < lengths.length\
    \ ? strings[maxIndex] : null;\n}\n/*\n Out of list of strings, return the longest\
    \ one. Return the first one in case of multiple\n    strings of the same length.\
    \ Return None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int startIndex, int endIndex) \n{\n    int[] lengths\
    \ = strings.lengths.toArray();\n    int maxLength = 0;\n    int maxIndex = 0;\n\
    \    for(int i = startIndex; i < lengths.length && i < endIndex; i++)\n    {\n\
    \        if(lengths[i] > maxLength)\n        {\n            maxLength = lengths[i];\n\
    \            maxIndex = i;\n        }\n    }\n    return maxIndex < lengths.length\
    \ ? strings[maxIndex] : null;\n}\n/*\n Out of list of strings, return the longest\
    \ one. Return the first one in case of multiple\n    strings of the same length.\
    \ Return None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int startIndex, int endIndex, int maxLength) \n{\n\
    \    int[] lengths = strings.lengths.toArray();\n    int maxIndex = 0;\n    for(int\
    \ i = startIndex; i < lengths.length && i < endIndex; i++)\n    {\n        if(lengths[i]\
    \ > maxLength)\n        {\n            maxLength = lengths[i];\n            maxIndex\
    \ = i;\n        }\n    }\n    return maxIndex < lengths.length ? strings[maxIndex]\
    \ : null;\n}\n/*\n Out of list of strings, return the longest one. Return the\
    \ first one in case of multiple\n    strings of the same length. Return None in\
    \ case the input list is empty.\n                \n*/\nNullable!(string) longest(string[]\
    \ strings, int startIndex, int endIndex, int max\nunittest\n{\n    alias candidate\
    \ = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpx8lmtls9.d(88): Error: found \''unittest\'' when expecting \'')\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpx8lmtls9.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    int? maxLength = null;\n\
    \    foreach(string? s in strings) {\n        int length = s.length();\n     \
    \   if (maxLength == null || length > maxLength.Value) {\n            maxLength\
    \ = length;\n        }\n    }\n    return maxLength;\n}\n/*\n Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return None in case the input list is empty.\n         \
    \       \n*/\nNullable!(string) longest(string[] strings, int lengthLimit) \n\
    {\n    int? maxLength = null;\n    foreach(string? s in strings) {\n        int\
    \ length = s.length();\n        if (maxLength == null || length > lengthLimit)\
    \ {\n            maxLength = length;\n        }\n    }\n    return maxLength;\n\
    }\n/*\n Out of list of strings, return the longest one. Return the first one in\
    \ case of multiple\n    strings of the same length. Return None in case the input\
    \ list is empty.\n                \n*/\nNullable!(string) longest(string[] strings,\
    \ int lengthLimit, int maxLength) \n{\n    int? maxLength = null;\n    foreach(string?\
    \ s in strings) {\n        int length = s.length();\n        if (maxLength ==\
    \ null || length > lengthLimit || maxLength > length) {\n            maxLength\
    \ = length;\n        }\n    }\n    return maxLength;\n}\n/*\n Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return None in case the input list is empty.\n         \
    \       \n*/\nNullable!(string) longest(string[] strings, int lengthLimit, int\
    \ maxLength, int minLength) \n{\n    int? maxLength = null;\n    foreach(string?\
    \ s in strings) {\n        int length = s.length();\n        if (maxLength ==\
    \ null || length > lengthLimit || maxLength > length || length < minLength) {\n\
    \            maxLength = length;\n        }\n    }\n    return maxLength;\n}\n\
    /*\n Out of list of strings, return the longest one. Return the first one in case\
    \ of multiple\n    strings of the same length. Return None in case the input list\
    \ is empty.\n                \n*/\nNullable!(string) longest(string[] strings,\
    \ int lengthLimit, int maxLength, int minLength, int maxCount) \n{\n    int? maxLength\
    \ = null;\n    foreach(string? s in strings) {\n        int length = s.length();\n\
    \        if (maxLength == null || length > lengthLimit || maxLength > length ||\
    \ length < minLength || maxCount > 1) {\n            maxLength = length;\n   \
    \     }\n    }\n    return maxLength;\n}\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None \nunittest\n{\n    alias candidate = longest;\n\n{\n\
    \        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n\
    \        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmppx_advn_.d(10): Error: no identifier for declarator int\n/tmp/tmppx_advn_.d(10):
    Error: found \''?\'' instead of statement\n/tmp/tmppx_advn_.d(11): Error: no identifier
    for declarator string\n/tmp/tmppx_advn_.d(11): Error: found \''?\'' when expecting
    \'';\''\n/tmp/tmppx_advn_.d(26): Error: no identifier for declarator int\n/tmp/tmppx_advn_.d(26):
    Error: found \''?\'' instead of statement\n/tmp/tmppx_advn_.d(27): Error: no identifier
    for declarator string\n/tmp/tmppx_advn_.d(27): Error: found \''?\'' when expecting
    \'';\''\n/tmp/tmppx_advn_.d(42): Error: no identifier for declarator int\n/tmp/tmppx_advn_.d(42):
    Error: found \''?\'' instead of statement\n/tmp/tmppx_advn_.d(43): Error: no identifier
    for declarator string\n/tmp/tmppx_advn_.d(43): Error: found \''?\'' when expecting
    \'';\''\n/tmp/tmppx_advn_.d(58): Error: no identifier for declarator int\n/tmp/tmppx_advn_.d(58):
    Error: found \''?\'' instead of statement\n/tmp/tmppx_advn_.d(59): Error: no identifier
    for declarator string\n/tmp/tmppx_advn_.d(59): Error: found \''?\'' when expecting
    \'';\''\n/tmp/tmppx_advn_.d(74): Error: no identifier for declarator int\n/tmp/tmppx_advn_.d(74):
    Error: found \''?\'' instead of statement\n/tmp/tmppx_advn_.d(75): Error: no identifier
    for declarator string\n/tmp/tmppx_advn_.d(75): Error: found \''?\'' when expecting
    \'';\''\n/tmp/tmppx_advn_.d(83): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmppx_advn_.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    int? maxLength = null;\n\
    \    foreach(string? s in strings)\n    {\n        if(maxLength == null || s.length()\
    \ > maxLength)\n        {\n            maxLength = s.length;\n        }\n    }\n\
    \    return maxLength;\n}\n/*\n Out of list of strings, return the longest one.\
    \ Return the first one in case of multiple\n    strings of the same length. Return\
    \ None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int maxLength) \n{\n    foreach(string? s in strings)\n\
    \    {\n        if(s.length() > maxLength)\n        {\n            maxLength =\
    \ s.length;\n        }\n    }\n    return maxLength;\n}\n/*\n Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return None in case the input list is empty.\n         \
    \       \n*/\nNullable!(string) longest(string[] strings, int maxLength, int minLength)\
    \ \n{\n    foreach(string? s in strings)\n    {\n        if(s.length() > maxLength\
    \ && s.length() >= minLength)\n        {\n            maxLength = s.length;\n\
    \        }\n    }\n    return maxLength;\n}\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings, int maxLength, int minLength,\
    \ int maxCount) \n{\n    foreach(string? s in strings)\n    {\n        if(s.length()\
    \ > maxLength && s.length() >= minLength && s.count() >= maxCount)\n        {\n\
    \            maxLength = s.length;\n        }\n    }\n    return maxLength;\n\
    }\n/*\n Out of list of strings, return the longest one. Return the first one in\
    \ case of multiple\n    strings of the same length. Return None in case the input\
    \ list is empty.\n                \n*/\nNullable!(string) longest(string[] strings,\
    \ int maxLength, int minLength, int maxCount, int minCount) \n{\n    foreach(string?\
    \ s in strings)\n    {\n        if(s.length() > maxLength && s.length() >= minLength\
    \ && s.count() >= maxCount && s.count() <= minCount)\n        {\n            maxLength\
    \ = s.length;\n        }\n    }\n    return maxLength;\n}\n/*\n Out of list of\
    \ strings, return the longest one. Return the first one in case of multiple\n\
    \    strings of the same length. Return None in case the input list is empty.\n\
    \                \n*/\nNullable!(string) longest(string[] strings, int maxLength,\
    \ int minLength, int maxCount, int minCount, int maxCount2) \n{\n    \nunittest\n\
    {\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp26biarva.d(10): Error: no identifier for declarator int\n/tmp/tmp26biarva.d(10):
    Error: found \''?\'' instead of statement\n/tmp/tmp26biarva.d(11): Error: no identifier
    for declarator string\n/tmp/tmp26biarva.d(11): Error: found \''?\'' when expecting
    \'';\''\n/tmp/tmp26biarva.d(27): Error: no identifier for declarator string\n/tmp/tmp26biarva.d(27):
    Error: found \''?\'' when expecting \'';\''\n/tmp/tmp26biarva.d(43): Error: no
    identifier for declarator string\n/tmp/tmp26biarva.d(43): Error: found \''?\''
    when expecting \'';\''\n/tmp/tmp26biarva.d(59): Error: no identifier for declarator
    string\n/tmp/tmp26biarva.d(59): Error: found \''?\'' when expecting \'';\''\n/tmp/tmp26biarva.d(75):
    Error: no identifier for declarator string\n/tmp/tmp26biarva.d(75): Error: found
    \''?\'' when expecting \'';\''\n/tmp/tmp26biarva.d(92): Error: found \''unittest\''
    instead of statement\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp26biarva.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length ==\
    \ 0) {\n        return null;\n    }\n    int maxLength = 0;\n    string maxString\
    \ = null;\n    for (string s in strings) {\n        if (s.length() > maxLength)\
    \ {\n            maxLength = s.length();\n            maxString = s;\n       \
    \ }\n    }\n    return maxString;\n}\n/*\n Out of list of strings, return the\
    \ longest one. Return the first one in case of multiple\n    strings of the same\
    \ length. Return None in case the input list is empty.\n                \n*/\n\
    Nullable!(string) longest(string[] strings, int lengthLimit) \n{\n    if (strings.length\
    \ == 0) {\n        return null;\n    }\n    int maxLength = 0;\n    string maxString\
    \ = null;\n    for (string s in strings) {\n        if (s.length() > lengthLimit)\
    \ {\n            maxLength = s.length();\n            maxString = s;\n       \
    \ }\n    }\n    return maxString;\n}\n/*\n Out of list of strings, return the\
    \ longest one. Return the first one in case of multiple\n    strings of the same\
    \ length. Return None in case the input list is empty.\n                \n*/\n\
    Nullable!(string) longest(string[] strings, int lengthLimit, int maxLength) \n\
    {\n    if (strings.length == 0) {\n        return null;\n    }\n    int maxLength\
    \ = 0;\n    string maxString = null;\n    for (string s in strings) {\n      \
    \  if (s.length() > lengthLimit) {\n            maxLength = s.length();\n    \
    \        maxString = s;\n        }\n    }\n    return maxString;\n}\n/*\n Out\
    \ of list of strings, return the longest one. Return the first one in case of\
    \ multiple\n    strings of the same length. Return None in case the input list\
    \ is empty.\n                \n*/\nNullable!(string) longest(string[] strings,\
    \ int lengthLimit, int maxLength, int maxCount) \n{\n    if (strings.length ==\
    \ 0) {\n        return null;\n    }\n    int maxLength = 0;\n    string maxString\
    \ = null;\n    for (string s in strings) {\n        if (s.length() > lengthLimit)\
    \ {\n            maxLength = s.length();\n            maxString = s;\n       \
    \ }\n        if (maxLength > maxCount) {\n            return maxString;\n    \
    \    }\n    }\n    return maxString;\n}\n/*\n Out of list of strings, return the\
    \ longest one. Return the first one in case of multiple\n    strings of the same\
    \ length. Return None in case the input list is empty.\n                \n*/\n\
    Nullable!(string) longest(string[] strings, int lengthLimit, int maxLength, int\
    \ maxCount, int maxCountLimit) \n{\n    if (strings.length == 0) {\n        return\
    \ null;\n    }\n    int maxLength = 0;\n    string maxString = null;\n    for\
    \ (string s in strings) {\n        if (s.length() > lengthLimit) {\n         \
    \   maxLength = s.length();\n            maxString = s;\n        }\n        if\
    \ (maxLength > maxCount) {\n            return maxString;\nunittest\n{\n    alias\
    \ candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1xon9w4p.d(15): Error: semicolon expected, not \''in\''\n/tmp/tmp1xon9w4p.d(15):
    Error: expression expected, not \''in\''\n/tmp/tmp1xon9w4p.d(15): Error: found
    \''strings\'' when expecting \'';\'' following for condition\n/tmp/tmp1xon9w4p.d(35):
    Error: semicolon expected, not \''in\''\n/tmp/tmp1xon9w4p.d(35): Error: expression
    expected, not \''in\''\n/tmp/tmp1xon9w4p.d(35): Error: found \''strings\'' when
    expecting \'';\'' following for condition\n/tmp/tmp1xon9w4p.d(55): Error: semicolon
    expected, not \''in\''\n/tmp/tmp1xon9w4p.d(55): Error: expression expected, not
    \''in\''\n/tmp/tmp1xon9w4p.d(55): Error: found \''strings\'' when expecting \'';\''
    following for condition\n/tmp/tmp1xon9w4p.d(75): Error: semicolon expected, not
    \''in\''\n/tmp/tmp1xon9w4p.d(75): Error: expression expected, not \''in\''\n/tmp/tmp1xon9w4p.d(75):
    Error: found \''strings\'' when expecting \'';\'' following for condition\n/tmp/tmp1xon9w4p.d(98):
    Error: semicolon expected, not \''in\''\n/tmp/tmp1xon9w4p.d(98): Error: expression
    expected, not \''in\''\n/tmp/tmp1xon9w4p.d(98): Error: found \''strings\'' when
    expecting \'';\'' following for condition\n/tmp/tmp1xon9w4p.d(105): Error: found
    \''unittest\'' instead of statement\n/tmp/tmp1xon9w4p.d(125): Error: found \''EOF\''
    when expecting \''}\'' following compound statement\n/tmp/tmp1xon9w4p.d(125):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp1xon9w4p.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    var maxLen = strings.length;\n\
    \    var maxLenString = strings[0];\n    for(var i = 1; i < strings.length; ++i)\n\
    \    {\n        var len = strings[i].length;\n        if(len > maxLen)\n     \
    \   {\n            maxLen = len;\n            maxLenString = strings[i];\n   \
    \     }\n    }\n    return maxLenString;\n}\nunittest\n{\n    alias candidate\
    \ = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpr0kfa0ai.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    var maxLength = 0;\n\
    \    var maxString = \"\";\n    foreach(var s in strings) {\n        if(s.length()\
    \ > maxLength) {\n            maxLength = s.length();\n            maxString =\
    \ s;\n        }\n    }\n    return maxString;\n}\nunittest\n{\n    alias candidate\
    \ = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpeq752mh9.d(12): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpeq752mh9.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    var longest = strings[0];\n\
    \    var longestLength = longest.length;\n    for(var i = 1; i < strings.length;\
    \ ++i)\n    {\n        var s = strings[i];\n        if(s.length != longestLength)\n\
    \        {\n            return longest;\n        }\n        if(s.length < longestLength)\n\
    \        {\n            longest = s;\n            longestLength = s.length;\n\
    \        }\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate =\
    \ longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp05viokix.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    var maxLength = 0;\n\
    \    var maxString = \"\";\n    foreach(string; strings) {\n        if(string.length\
    \ > maxLength) {\n            maxLength = string.length;\n            maxString\
    \ = string;\n        }\n    }\n    return maxString;\n}\nunittest\n{\n    alias\
    \ candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmsrk5kl6.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach(string; strings)\
    \ {\n        if(string.length > longest.length)\n            longest = string;\n\
    \    }\n    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\n\
    {\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n\
    {\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqpklbg5c.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach(string s in strings)\
    \ {\n        if(s.length() > longest.length()) {\n            longest = s;\n \
    \       }\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpt4emkuny.d(10): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpt4emkuny.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length ==\
    \ 0) {\n        return null;\n    }\n    \n    int maxLength = 0;\n    string\
    \ maxString = null;\n    \n    for (string s in strings) {\n        int length\
    \ = s.length();\n        if (length > maxLength) {\n            maxLength = length;\n\
    \            maxString = s;\n        }\n    }\n    \n    return maxString;\n}\n\
    unittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpi6i_8roq.d(17): Error: semicolon expected, not \''in\''\n/tmp/tmpi6i_8roq.d(17):
    Error: expression expected, not \''in\''\n/tmp/tmpi6i_8roq.d(17): Error: found
    \''strings\'' when expecting \'';\'' following for condition\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpi6i_8roq.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n\tint? maxLength = null;\n\
    \tforeach(string; strings) {\n\t\tint length = string.length;\n\t\tif(maxLength\
    \ == null || length > maxLength.value)\n\t\t\tmaxLength = length;\n\t}\n\treturn\
    \ maxLength;\n}\n/*\n Out of list of strings, return the longest one. Return the\
    \ first one in case of multiple\n    strings of the same length. Return None in\
    \ case the input list is empty.\n                \n*/\nNullable!(string) longest(string[]\
    \ strings, int lengthLimit) \n{\n\tint? maxLength = null;\n\tforeach(string; strings)\
    \ {\n\t\tint length = string.length;\n\t\tif(maxLength == null || length > maxLength.value)\n\
    \t\t\tmaxLength = length;\n\t\tif(length >= lengthLimit)\n\t\t\tbreak;\n\t}\n\t\
    return maxLength;\n}\n/*\n Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \n*/\nNullable!(string) longest(string[]\
    \ strings, int lengthLimit, int maxLength) \n{\n\tint? maxLength = null;\n\tforeach(string;\
    \ strings) {\n\t\tint length = string.length;\n\t\tif(maxLength == null || length\
    \ > maxLength.value)\n\t\t\tmaxLength = length;\n\t\tif(length >= lengthLimit)\n\
    \t\t\tbreak;\n\t}\n\treturn maxLength;\n}\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings, int lengthLimit, int maxLength,\
    \ int minLength) \n{\n\tint? maxLength = null;\n\tforeach(string; strings) {\n\
    \t\tint length = string.length;\n\t\tif(maxLength == null || length > maxLength.value)\n\
    \t\t\tmaxLength = length;\n\t\tif(length >= lengthLimit && length < minLength)\n\
    \t\t\tbreak;\n\t}\n\treturn maxLength;\n}\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings, int lengthLimit, int maxLength,\
    \ int minLength, int maxCount) \n{\n\tint? maxLength = null;\n\tforeach(string;\
    \ strings) {\n\t\tint length = string.length;\n\t\tif(maxLength == null || length\
    \ > maxLength.value)\n\t\t\tmaxLength = length;\n\t\tif(length >= lengthLimit\
    \ && length < minLength && length < maxCount)\n\t\t\tbreak;\n\t}\n\treturn maxLength;\n\
    }\n/*\n\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result\
    \ = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result\
    \ = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get\
    \ == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\"\
    , \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get ==\
    \ \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpwcl5wnr4.d(10): Error: no identifier for declarator int\n/tmp/tmpwcl5wnr4.d(10):
    Error: found \''?\'' instead of statement\n/tmp/tmpwcl5wnr4.d(25): Error: no identifier
    for declarator int\n/tmp/tmpwcl5wnr4.d(25): Error: found \''?\'' instead of statement\n/tmp/tmpwcl5wnr4.d(42):
    Error: no identifier for declarator int\n/tmp/tmpwcl5wnr4.d(42): Error: found
    \''?\'' instead of statement\n/tmp/tmpwcl5wnr4.d(59): Error: no identifier for
    declarator int\n/tmp/tmpwcl5wnr4.d(59): Error: found \''?\'' instead of statement\n/tmp/tmpwcl5wnr4.d(76):
    Error: no identifier for declarator int\n/tmp/tmpwcl5wnr4.d(76): Error: found
    \''?\'' instead of statement\n/tmp/tmpwcl5wnr4.d(86): Error: unterminated /* */
    comment\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwcl5wnr4.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach(string; strings)\
    \ {\n        if(string.length > longest.length)\n            longest = string;\n\
    \    }\n    return longest;\n}\n/*\n Out of list of strings, return the longest\
    \ one. Return the first one in case of multiple\n    strings of the same length.\
    \ Return None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int start) \n{\n    foreach(string; strings) {\n \
    \       if(string.length > longest.length)\n            longest = string;\n  \
    \  }\n    return longest;\n}\n/*\n Out of list of strings, return the longest\
    \ one. Return the first one in case of multiple\n    strings of the same length.\
    \ Return None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int start, int end) \n{\n    foreach(string; strings)\
    \ {\n        if(string.length > longest.length)\n            longest = string;\n\
    \    }\n    return longest;\n}\n/*\n Out of list of strings, return the longest\
    \ one. Return the first one in case of multiple\n    strings of the same length.\
    \ Return None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int start, int end, int step) \n{\n    foreach(string;\
    \ strings) {\n        if(string.length > longest.length)\n            longest\
    \ = string;\n    }\n    return longest;\n}\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings, int start, int end, int step,\
    \ char separator) \n{\n    foreach(string; strings) {\n        if(string.length\
    \ > longest.length)\n            longest = string;\n    }\n    return longest;\n\
    }\n/*\n Out of list of strings, return the longest one. Return the first one in\
    \ case of multiple\n    strings of the same length. Return None in case the input\
    \ list is empty.\n                \n*/\nNullable!(string) longest(string[] strings,\
    \ int start, int end, int step, char separator, char delimiter) \n{\n    foreach(string;\
    \ strings) {\n        if(string.length > longest.length)\n            longest\
    \ = string;\n    }\n    return longest;\n}\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings, int start, int end, int step,\
    \ char separator, char delimiter, char escape) \n{\n    foreach(string; strings)\
    \ {\n        if(string\nunittest\n{\n    alias candidate = longest;\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpf824ejbl.d(90): Error: found \''unittest\'' when expecting \'')\''\n/tmp/tmpf824ejbl.d(110):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmpf824ejbl.d(110):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf824ejbl.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    int? maxLength = null;\n\
    \    foreach (string s in strings) {\n        if (maxLength == null || s.length()\
    \ > maxLength.value) {\n            maxLength = s.length;\n        }\n    }\n\
    \    return maxLength;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n\
    \        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n\
    \        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpab9xbjs3.d(10): Error: no identifier for declarator int\n/tmp/tmpab9xbjs3.d(10):
    Error: found \''?\'' instead of statement\n/tmp/tmpab9xbjs3.d(11): Error: found
    \''in\'' when expecting \'';\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpab9xbjs3.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    var longest = strings[0];\n\
    \    var longestLength = longest.length;\n    for(var i = 1; i < strings.length;\
    \ ++i)\n    {\n        var s = strings[i];\n        if(s.length == longestLength)\n\
    \        {\n            longest = s;\n        }\n    }\n    return longest;\n\
    }\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe20mzid1.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach(string; strings)\
    \ {\n        if(string.length > longest.length)\n            longest = string;\n\
    \    }\n    return longest;\n}\n/*\n Out of list of strings, return the longest\
    \ one. Return the first one in case of multiple\n    strings of the same length.\
    \ Return None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int startIndex) \n{\n    foreach(string; strings)\
    \ {\n        if(string.length > longest.length)\n            longest = string;\n\
    \    }\n    return longest;\n}\n/*\n Out of list of strings, return the longest\
    \ one. Return the first one in case of multiple\n    strings of the same length.\
    \ Return None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int startIndex, int endIndex) \n{\n    foreach(string;\
    \ strings) {\n        if(string.length > longest.length)\n            longest\
    \ = string;\n    }\n    return longest;\n}\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings, char character) \n{\n    foreach(string;\
    \ strings) {\n        if(string.length > longest.length)\n            longest\
    \ = string;\n    }\n    return longest;\n}\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings, char character, int startIndex)\
    \ \n{\n    foreach(string; strings) {\n        if(string.length > longest.length)\n\
    \            longest = string;\n    }\n    return longest;\n}\n/*\n Out of list\
    \ of strings, return the longest one. Return the first one in case of multiple\n\
    \    strings of the same length. Return None in case the input list is empty.\n\
    \                \n*/\nNullable!(string) longest(string[] strings, char character,\
    \ int startIndex, int endIndex) \n{\n    foreach(string; strings) {\n        if(string.length\
    \ > longest.length)\n            longest = string;\n    }\n    return longest;\n\
    }\n/*\n Out of list of strings, return the longest one. Return the first one in\
    \ case of multiple\n    strings of the same length. Return None in case the input\
    \ list is empty.\n                \n*/\nNullable!(string) longest(string[] strings,\
    \ char character, int startIndex, int endIndex, bool caseSensitive) \n{\n    foreach(string;\
    \ strings) {\n        if(string.length > longest.length)\n\nunittest\n{\n    alias\
    \ candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpb67tkj6s.d(91): Error: found \''unittest\'' instead of statement\n/tmp/tmpb67tkj6s.d(111):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb67tkj6s.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    int? maxLength = null;\n\
    \    foreach(string? s in strings) {\n        if(maxLength == null || s.length()\
    \ > maxLength) {\n            maxLength = s.length;\n        }\n    }\n    return\
    \ maxLength;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto\
    \ result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull &&\
    \ result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\"\
    , \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get\
    \ == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmppbkzhc8s.d(10): Error: no identifier for declarator int\n/tmp/tmppbkzhc8s.d(10):
    Error: found \''?\'' instead of statement\n/tmp/tmppbkzhc8s.d(11): Error: no identifier
    for declarator string\n/tmp/tmppbkzhc8s.d(11): Error: found \''?\'' when expecting
    \'';\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmppbkzhc8s.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    int? maxLength = null;\n\
    \    foreach (string s in strings) {\n        if (maxLength == null || s.length()\
    \ > maxLength.Value()) {\n            maxLength = s.length;\n        }\n    }\n\
    \    return maxLength;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n\
    \        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n\
    \        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpa08odksy.d(10): Error: no identifier for declarator int\n/tmp/tmpa08odksy.d(10):
    Error: found \''?\'' instead of statement\n/tmp/tmpa08odksy.d(11): Error: found
    \''in\'' when expecting \'';\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa08odksy.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach(string; strings)\
    \ {\n        if(string.length > longest.length)\n            longest = string;\n\
    \    }\n    return longest;\n}\n/*\n Out of list of strings, return the longest\
    \ one. Return the first one in case of multiple\n    strings of the same length.\
    \ Return None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int start) \n{\n    foreach(string; strings) {\n \
    \       if(string.length > longest.length)\n            longest = string;\n  \
    \  }\n    return longest;\n}\n/*\n Out of list of strings, return the longest\
    \ one. Return the first one in case of multiple\n    strings of the same length.\
    \ Return None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int start, int end) \n{\n    foreach(string; strings)\
    \ {\n        if(string.length > longest.length)\n            longest = string;\n\
    \    }\n    return longest;\n}\n/*\n Out of list of strings, return the longest\
    \ one. Return the first one in case of multiple\n    strings of the same length.\
    \ Return None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int start, int end, int step) \n{\n    foreach(string;\
    \ strings) {\n        if(string.length > longest.length)\n            longest\
    \ = string;\n    }\n    return longest;\n}\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings, int start, int end, int step,\
    \ string separator) \n{\n    foreach(string; strings) {\n        if(string.length\
    \ > longest.length)\n            longest = string;\n    }\n    return longest;\n\
    }\n/*\n Out of list of strings, return the longest one. Return the first one in\
    \ case of multiple\n    strings of the same length. Return None in case the input\
    \ list is empty.\n                \n*/\nNullable!(string) longest(string[] strings,\
    \ int start, int end, int step, string separator, int startIndex) \n{\n    foreach(string;\
    \ strings) {\n        if(string.length > longest.length)\n            longest\
    \ = string;\n    }\n    return longest;\n}\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings, int start, int end, int step,\
    \ string separator, int startIndex, int endIndex) \n{\n    foreach(string; strings)\
    \ {\n        if(string\nunittest\n{\n    alias candidate = longest;\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpcpa12z0j.d(90): Error: found \''unittest\'' when expecting \'')\''\n/tmp/tmpcpa12z0j.d(110):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmpcpa12z0j.d(110):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcpa12z0j.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    var longest = strings[0];\n\
    \    for(var i = 1; i < strings.length; ++i)\n    {\n        if(strings[i].length\
    \ >= longest.length)\n        {\n            longest = strings[i];\n        }\n\
    \    }\n    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\n\
    {\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n\
    {\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuyyez7aj.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach (string s in\
    \ strings) {\n        if (s.length() > longest.length)\n            longest =\
    \ s;\n    }\n    return longest;\n}\n/*\n Out of list of strings, return the longest\
    \ one. Return the first one in case of multiple\n    strings of the same length.\
    \ Return None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int start) \n{\n    foreach (string s in strings)\
    \ {\n        if (s.length() > longest.length)\n            longest = s;\n    }\n\
    \    return longest;\n}\n/*\n Out of list of strings, return the longest one.\
    \ Return the first one in case of multiple\n    strings of the same length. Return\
    \ None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int start, int end) \n{\n    foreach (string s in\
    \ strings) {\n        if (s.length() > longest.length)\n            longest =\
    \ s;\n    }\n    return longest;\n}\n/*\n Out of list of strings, return the longest\
    \ one. Return the first one in case of multiple\n    strings of the same length.\
    \ Return None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int start, int end, int step) \n{\n    foreach (string\
    \ s in strings) {\n        if (s.length() > longest.length)\n            longest\
    \ = s;\n    }\n    return longest;\n}\n/*\n Out of list of strings, return the\
    \ longest one. Return the first one in case of multiple\n    strings of the same\
    \ length. Return None in case the input list is empty.\n                \n*/\n\
    Nullable!(string) longest(string[] strings, int start, int end, int step, string\
    \ separator) \n{\n    foreach (string s in strings) {\n        if (s.length()\
    \ > longest.length)\n            longest = s;\n    }\n    return longest;\n}\n\
    /*\n Out of list of strings, return the longest one. Return the first one in case\
    \ of multiple\n    strings of the same length. Return None in case the input list\
    \ is empty.\n                \n*/\nNullable!(string) longest(string[] strings,\
    \ int start, int end, int step, string separator, int startIndex) \n{\n    foreach\
    \ (string s in strings) {\n        if (s.length() > longest.length)\n        \
    \    longest = s;\n    }\n    return longest;\n}\n/*\n Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return None in case the input list is empty.\n         \
    \       \n*/\nNullable!(string) longest(string[] strings, int start, int end,\
    \ int step, string separator, int startIndex, int endIndex) \n{\n    foreach (string\
    \ s in strings) {\n        if (s.length\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpl5600006.d(10): Error: found \''in\'' when expecting \'';\''\n/tmp/tmpl5600006.d(23):
    Error: found \''in\'' when expecting \'';\''\n/tmp/tmpl5600006.d(36): Error: found
    \''in\'' when expecting \'';\''\n/tmp/tmpl5600006.d(49): Error: found \''in\''
    when expecting \'';\''\n/tmp/tmpl5600006.d(62): Error: found \''in\'' when expecting
    \'';\''\n/tmp/tmpl5600006.d(75): Error: found \''in\'' when expecting \'';\''\n/tmp/tmpl5600006.d(88):
    Error: found \''in\'' when expecting \'';\''\n/tmp/tmpl5600006.d(90): Error: found
    \''unittest\'' when expecting \'')\''\n/tmp/tmpl5600006.d(110): Error: found \''EOF\''
    when expecting \''}\'' following compound statement\n/tmp/tmpl5600006.d(110):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl5600006.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach (string s in\
    \ strings) {\n        if (s.length() > longest.length)\n            longest =\
    \ s;\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpybbdln8p.d(10): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpybbdln8p.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    int? maxLength = null;\n\
    \    foreach (string s in strings) {\n        if (maxLength == null || s.length()\
    \ > maxLength.Value()) {\n            maxLength = s.length;\n        }\n    }\n\
    \    return maxLength;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n\
    \        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n\
    \        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpa08odksy.d(10): Error: no identifier for declarator int\n/tmp/tmpa08odksy.d(10):
    Error: found \''?\'' instead of statement\n/tmp/tmpa08odksy.d(11): Error: found
    \''in\'' when expecting \'';\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa08odksy.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach(string; strings)\n\
    \    {\n        if(string.length > longest.length)\n        {\n            longest\
    \ = string;\n        }\n    }\n    return longest;\n}\nunittest\n{\n    alias\
    \ candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpic3utxa5.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach(string; strings)\
    \ {\n        if(string.length > longest.length) longest = string;\n    }\n   \
    \ return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n     \
    \   auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n   \
    \     auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp3xrq31dh.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    var maxLength = 0;\n\
    \    var maxString = \"\";\n    foreach(var s in strings)\n    {\n        if(s.length()\
    \ > maxLength)\n        {\n            maxLength = s.length();\n            maxString\
    \ = s;\n        }\n    }\n    return maxString;\n}\n/*\n Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return None in case the input list is empty.\n         \
    \       \n*/\nNullable!(string) longest(string[] strings, int startIndex) \n{\n\
    \    var maxLength = 0;\n    var maxString = \"\";\n    foreach(var s in strings)\n\
    \    {\n        if(s.length() > maxLength)\n        {\n            maxLength =\
    \ s.length();\n            maxString = s;\n        }\n    }\n    return maxString;\n\
    }\n/*\n Out of list of strings, return the longest one. Return the first one in\
    \ case of multiple\n    strings of the same length. Return None in case the input\
    \ list is empty.\n                \n*/\nNullable!(string) longest(string[] strings,\
    \ int startIndex, int endIndex) \n{\n    var maxLength = 0;\n    var maxString\
    \ = \"\";\n    foreach(var s in strings)\n    {\n        if(s.length() > maxLength)\n\
    \        {\n            maxLength = s.length();\n            maxString = s;\n\
    \        }\n    }\n    return maxString;\n}\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings, char separator) \n{\n    var maxLength\
    \ = 0;\n    var maxString = \"\";\n    foreach(var s in strings)\n    {\n    \
    \    if(s.length() > maxLength)\n        {\n            maxLength = s.length();\n\
    \            maxString = s;\n        }\n    }\n    return maxString;\n}\n/*\n\
    \ Out of list of strings, return the longest one. Return the first one in case\
    \ of multiple\n    strings of the same length. Return None in case the input list\
    \ is empty.\n                \n*/\nNullable!(string) longest(string[] strings,\
    \ char separator, int startIndex) \n{\n    var maxLength = 0;\n    var maxString\
    \ = \"\";\n    foreach(var s in strings)\n    {\n        if(s.length() > maxLength)\n\
    \        {\n            maxLength = s.length();\n            maxString = s;\n\
    \        }\n    }\n    return maxString;\n}\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings, char separator, int startIndex,\
    \ int endIndex) \n{\n    var maxLength = 0;\n    var \nunittest\n{\n    alias\
    \ candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpx8y8oac1.d(12): Error: found \''in\'' when expecting \'';\''\n/tmp/tmpx8y8oac1.d(31):
    Error: found \''in\'' when expecting \'';\''\n/tmp/tmpx8y8oac1.d(50): Error: found
    \''in\'' when expecting \'';\''\n/tmp/tmpx8y8oac1.d(69): Error: found \''in\''
    when expecting \'';\''\n/tmp/tmpx8y8oac1.d(88): Error: found \''in\'' when expecting
    \'';\''\n/tmp/tmpx8y8oac1.d(107): Error: found \''unittest\'' when expecting \'';\''
    following statement\n/tmp/tmpx8y8oac1.d(127): Error: found \''EOF\'' when expecting
    \''}\'' following compound statement\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpx8y8oac1.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    int? maxLength = null;\n\
    \    foreach(string[] strings in strings)\n    {\n        int length = strings.length;\n\
    \        if (maxLength == null || length > maxLength)\n        {\n           \
    \ maxLength = length;\n        }\n    }\n    return maxLength;\n}\nunittest\n\
    {\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpmrcqq16u.d(10): Error: no identifier for declarator int\n/tmp/tmpmrcqq16u.d(10):
    Error: found \''?\'' instead of statement\n/tmp/tmpmrcqq16u.d(11): Error: found
    \''in\'' when expecting \'';\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmrcqq16u.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach(string; strings)\
    \ {\n        if(string.length() > longest.length()) {\n            longest = string;\n\
    \        }\n    }\n    return longest;\n}\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings, int startIndex) \n{\n    foreach(string;\
    \ strings) {\n        if(string.length() > longest.length()) {\n            longest\
    \ = string;\n        }\n    }\n    return longest;\n}\n/*\n Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return None in case the input list is empty.\n         \
    \       \n*/\nNullable!(string) longest(string[] strings, int startIndex, int\
    \ endIndex) \n{\n    foreach(string; strings) {\n        if(string.length() >\
    \ longest.length()) {\n            longest = string;\n        }\n    }\n    return\
    \ longest;\n}\n/*\n Out of list of strings, return the longest one. Return the\
    \ first one in case of multiple\n    strings of the same length. Return None in\
    \ case the input list is empty.\n                \n*/\nNullable!(string) longest(string[]\
    \ strings, char character) \n{\n    foreach(string; strings) {\n        if(string.length()\
    \ > longest.length()) {\n            longest = string;\n        }\n    }\n   \
    \ return longest;\n}\n/*\n Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \n*/\nNullable!(string) longest(string[]\
    \ strings, char character, int startIndex) \n{\n    foreach(string; strings) {\n\
    \        if(string.length() > longest.length()) {\n            longest = string;\n\
    \        }\n    }\n    return longest;\n}\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings, char character, int startIndex,\
    \ int endIndex) \n{\n    foreach(string; strings) {\n        if(string.length()\
    \ > longest.length()) {\n            longest = string;\n        }\n    }\n   \
    \ return longest;\n}\n/*\n Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \n*/\nNullable!(string) longest(string[]\
    \ strings, char character, int startIndex, int endIndex, bool caseSensitive\n\
    unittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpwkkwh24d.d(93): Error: found \''unittest\'' when expecting \'')\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwkkwh24d.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length ==\
    \ 0) {\n        return null;\n    }\n    var maxLen = strings[0].length;\n   \
    \ for (var i = 1; i < strings.length; i++) {\n        if (strings[i].length >=\
    \ maxLen) {\n            maxLen = strings[i].length;\n        }\n    }\n    return\
    \ maxLen > 0 ? strings[0] : null;\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpu36uyks8.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach(string; strings)\
    \ {\n        if(string.length > longest.length)\n            longest = string;\n\
    \    }\n    return longest;\n}\n/*\n Out of list of strings, return the longest\
    \ one. Return the first one in case of multiple\n    strings of the same length.\
    \ Return None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int startIndex) \n{\n    foreach(string; strings)\
    \ {\n        if(string.length > longest.length)\n            longest = string;\n\
    \    }\n    return longest;\n}\n/*\n Out of list of strings, return the longest\
    \ one. Return the first one in case of multiple\n    strings of the same length.\
    \ Return None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int startIndex, int endIndex) \n{\n    foreach(string;\
    \ strings) {\n        if(string.length > longest.length)\n            longest\
    \ = string;\n    }\n    return longest;\n}\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings, char character) \n{\n    foreach(string;\
    \ strings) {\n        if(string.length > longest.length)\n            longest\
    \ = string;\n    }\n    return longest;\n}\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings, char character, int startIndex)\
    \ \n{\n    foreach(string; strings) {\n        if(string.length > longest.length)\n\
    \            longest = string;\n    }\n    return longest;\n}\n/*\n Out of list\
    \ of strings, return the longest one. Return the first one in case of multiple\n\
    \    strings of the same length. Return None in case the input list is empty.\n\
    \                \n*/\nNullable!(string) longest(string[] strings, char character,\
    \ int startIndex, int endIndex) \n{\n    foreach(string; strings) {\n        if(string.length\
    \ > longest.length)\n            longest = string;\n    }\n    return longest;\n\
    }\n/*\n Out of list of strings, return the longest one. Return the first one in\
    \ case of multiple\n    strings of the same length. Return None in case the input\
    \ list is empty.\n                \n*/\nNullable!(string) longest(string[] strings,\
    \ char character, int startIndex, int endIndex, bool caseSensitive) \n{\n    foreach(string;\
    \ strings) {\n        if(string.length > longest.length)\n\nunittest\n{\n    alias\
    \ candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpb67tkj6s.d(91): Error: found \''unittest\'' instead of statement\n/tmp/tmpb67tkj6s.d(111):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb67tkj6s.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach(string; strings)\
    \ {\n        if(string.length() > longest.length())\n            longest = string;\n\
    \    }\n    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\n\
    {\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n\
    {\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpm9m17hiw.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    var maxLength = 0;\n\
    \    var maxString = \"\";\n    foreach(var s in strings)\n    {\n        if(s.length()\
    \ > maxLength)\n        {\n            maxLength = s.length();\n            maxString\
    \ = s;\n        }\n    }\n    return maxString;\n}\nunittest\n{\n    alias candidate\
    \ = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp2ob2yva8.d(12): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp2ob2yva8.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    int? maxLength = null;\n\
    \    foreach(string? s in strings) {\n        if (maxLength == null || s.length()\
    \ > maxLength) {\n            maxLength = s.length();\n        }\n    }\n    return\
    \ maxLength;\n}\n/*\n Out of list of strings, return the longest one. Return the\
    \ first one in case of multiple\n    strings of the same length. Return None in\
    \ case the input list is empty.\n                \n*/\nNullable!(string) longest(string[]\
    \ strings, int maxLength) \n{\n    foreach(string? s in strings) {\n        if\
    \ (s.length() > maxLength) {\n            maxLength = s.length();\n        }\n\
    \    }\n    return maxLength;\n}\n/*\n Out of list of strings, return the longest\
    \ one. Return the first one in case of multiple\n    strings of the same length.\
    \ Return None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int maxLength, int minLength) \n{\n    foreach(string?\
    \ s in strings) {\n        if (s.length() > maxLength && s.length() < minLength)\
    \ {\n            maxLength = s.length();\n        }\n    }\n    return maxLength;\n\
    }\n/*\n Out of list of strings, return the longest one. Return the first one in\
    \ case of multiple\n    strings of the same length. Return None in case the input\
    \ list is empty.\n                \n*/\nNullable!(string) longest(string[] strings,\
    \ int maxLength, int minLength, int maxLength) \n{\n    foreach(string? s in strings)\
    \ {\n        if (s.length() > maxLength && s.length() < minLength && s.length()\
    \ > maxLength) {\n            maxLength = s.length();\n        }\n    }\n    return\
    \ maxLength;\n}\n/*\n Out of list of strings, return the longest one. Return the\
    \ first one in case of multiple\n    strings of the same length. Return None in\
    \ case the input list is empty.\n                \n*/\nNullable!(string) longest(string[]\
    \ strings, int maxLength, int minLength, int maxLength, int minLength) \n{\n \
    \   foreach(string? s in strings) {\n        if (s.length() > maxLength && s.length()\
    \ < minLength && s.length() > maxLength && s.length() < minLength) {\n       \
    \     maxLength = s.length();\n        }\n    }\n    return maxLength;\n}\n/*\n\
    \ Out of list of strings, return the longest one. Return the first one in case\
    \ of multiple\n    strings of the same length. Return None in case the input list\
    \ is empty.\n                \n*/\nNullable!(string) longest(string[] strings,\
    \ int maxLength, int minLength, int maxLength, int minLength, int maxLength) \n\
    {\n    foreach(string? s in strings) {\n        if (s.length() > maxLength &&\
    \ s.length() < minLength && s.length() > maxLength && \nunittest\n{\n    alias\
    \ candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmppg5vjqln.d(10): Error: no identifier for declarator int\n/tmp/tmppg5vjqln.d(10):
    Error: found \''?\'' instead of statement\n/tmp/tmppg5vjqln.d(11): Error: no identifier
    for declarator string\n/tmp/tmppg5vjqln.d(11): Error: found \''?\'' when expecting
    \'';\''\n/tmp/tmppg5vjqln.d(25): Error: no identifier for declarator string\n/tmp/tmppg5vjqln.d(25):
    Error: found \''?\'' when expecting \'';\''\n/tmp/tmppg5vjqln.d(39): Error: no
    identifier for declarator string\n/tmp/tmppg5vjqln.d(39): Error: found \''?\''
    when expecting \'';\''\n/tmp/tmppg5vjqln.d(53): Error: no identifier for declarator
    string\n/tmp/tmppg5vjqln.d(53): Error: found \''?\'' when expecting \'';\''\n/tmp/tmppg5vjqln.d(67):
    Error: no identifier for declarator string\n/tmp/tmppg5vjqln.d(67): Error: found
    \''?\'' when expecting \'';\''\n/tmp/tmppg5vjqln.d(81): Error: no identifier for
    declarator string\n/tmp/tmppg5vjqln.d(81): Error: found \''?\'' when expecting
    \'';\''\n/tmp/tmppg5vjqln.d(83): Error: expression expected, not \''unittest\''\n/tmp/tmppg5vjqln.d(84):
    Error: found \''{\'' when expecting \'')\''\n/tmp/tmppg5vjqln.d(103): Error: found
    \''EOF\'' when expecting \''}\'' following compound statement\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmppg5vjqln.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    int? maxLength = null;\n\
    \    foreach (string s in strings) {\n        int length = s.length();\n     \
    \   if (maxLength == null || length > maxLength.Value) {\n            maxLength\
    \ = length;\n        }\n    }\n    return maxLength;\n}\nunittest\n{\n    alias\
    \ candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpsik8bner.d(10): Error: no identifier for declarator int\n/tmp/tmpsik8bner.d(10):
    Error: found \''?\'' instead of statement\n/tmp/tmpsik8bner.d(11): Error: found
    \''in\'' when expecting \'';\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsik8bner.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length ==\
    \ 0)\n        return null;\n    \n    int maxLen = 0;\n    string maxString =\
    \ null;\n    \n    for (string s in strings) {\n        if (s.length() > maxLen)\
    \ {\n            maxLen = s.length();\n            maxString = s;\n        }\n\
    \    }\n    \n    return maxString;\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp1b3qoepo.d(16): Error: semicolon expected, not \''in\''\n/tmp/tmp1b3qoepo.d(16):
    Error: expression expected, not \''in\''\n/tmp/tmp1b3qoepo.d(16): Error: found
    \''strings\'' when expecting \'';\'' following for condition\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp1b3qoepo.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    var longest = strings[0];\n\
    \    foreach(var s in strings)\n    {\n        if(s.length >= longest.length)\n\
    \        {\n            longest = s;\n        }\n    }\n    return longest;\n\
    }\n/*\n Out of list of strings, return the longest one. Return the first one in\
    \ case of multiple\n    strings of the same length. Return None in case the input\
    \ list is empty.\n                \n*/\nNullable!(string) longest(string[] strings,\
    \ int startIndex) \n{\n    var longest = strings[startIndex];\n    foreach(var\
    \ s in strings)\n    {\n        if(s.length >= longest.length)\n        {\n  \
    \          longest = s;\n        }\n    }\n    return longest;\n}\n/*\n Out of\
    \ list of strings, return the longest one. Return the first one in case of multiple\n\
    \    strings of the same length. Return None in case the input list is empty.\n\
    \                \n*/\nNullable!(string) longest(string[] strings, int startIndex,\
    \ int endIndex) \n{\n    var longest = strings[startIndex];\n    foreach(var s\
    \ in strings)\n    {\n        if(s.length >= longest.length)\n        {\n    \
    \        longest = s;\n        }\n    }\n    return longest;\n}\n/*\n Out of list\
    \ of strings, return the longest one. Return the first one in case of multiple\n\
    \    strings of the same length. Return None in case the input list is empty.\n\
    \                \n*/\nNullable!(string) longest(string[] strings, char separator)\
    \ \n{\n    var longest = strings[0];\n    foreach(var s in strings)\n    {\n \
    \       if(s.length >= longest.length)\n        {\n            longest = s;\n\
    \        }\n    }\n    return longest;\n}\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings, char separator, int startIndex)\
    \ \n{\n    var longest = strings[startIndex];\n    foreach(var s in strings)\n\
    \    {\n        if(s.length >= longest.length)\n        {\n            longest\
    \ = s;\n        }\n    }\n    return longest;\n}\n/*\n Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return None in case the input list is empty.\n         \
    \       \n*/\nNullable!(string) longest(string[] strings, char separator, int\
    \ startIndex, int endIndex) \n{\n    var longest = strings[startIndex];\n    foreach(var\
    \ s in strings)\n    {\n        if(s.length >= longest.length)\n        {\n  \
    \          longest = s;\n        }\n    }\n    return \nunittest\n{\n    alias\
    \ candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpq2d2u1nv.d(11): Error: found \''in\'' when expecting \'';\''\n/tmp/tmpq2d2u1nv.d(28):
    Error: found \''in\'' when expecting \'';\''\n/tmp/tmpq2d2u1nv.d(45): Error: found
    \''in\'' when expecting \'';\''\n/tmp/tmpq2d2u1nv.d(62): Error: found \''in\''
    when expecting \'';\''\n/tmp/tmpq2d2u1nv.d(79): Error: found \''in\'' when expecting
    \'';\''\n/tmp/tmpq2d2u1nv.d(96): Error: found \''in\'' when expecting \'';\''\n/tmp/tmpq2d2u1nv.d(104):
    Error: expression expected, not \''unittest\''\n/tmp/tmpq2d2u1nv.d(105): Error:
    found \''{\'' when expecting \'';\'' following return statement\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpq2d2u1nv.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach(string; strings)\
    \ {\n        if(string.length > longest.length)\n            longest = string;\n\
    \    }\n    return longest;\n}\n/*\n Out of list of strings, return the longest\
    \ one. Return the first one in case of multiple\n    strings of the same length.\
    \ Return None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int start) \n{\n    foreach(string; strings) {\n \
    \       if(string.length > longest.length)\n            longest = string;\n  \
    \  }\n    return longest;\n}\n/*\n Out of list of strings, return the longest\
    \ one. Return the first one in case of multiple\n    strings of the same length.\
    \ Return None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int start, int end) \n{\n    foreach(string; strings)\
    \ {\n        if(string.length > longest.length)\n            longest = string;\n\
    \    }\n    return longest;\n}\n/*\n Out of list of strings, return the longest\
    \ one. Return the first one in case of multiple\n    strings of the same length.\
    \ Return None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, char ch) \n{\n    foreach(string; strings) {\n   \
    \     if(string.length > longest.length)\n            longest = string;\n    }\n\
    \    return longest;\n}\n/*\n Out of list of strings, return the longest one.\
    \ Return the first one in case of multiple\n    strings of the same length. Return\
    \ None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, char ch, int start) \n{\n    foreach(string; strings)\
    \ {\n        if(string.length > longest.length)\n            longest = string;\n\
    \    }\n    return longest;\n}\n/*\n Out of list of strings, return the longest\
    \ one. Return the first one in case of multiple\n    strings of the same length.\
    \ Return None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, char ch, int start, int end) \n{\n    foreach(string;\
    \ strings) {\n        if(string.length > longest.length)\n            longest\
    \ = string;\n    }\n    return longest;\n}\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings, char ch, int start, int end, int\
    \ step) \n{\n    foreach(string; strings) {\n        if(string.length > longest.length)\n\
    \            longest = string;\n    }\n    return longest;\n}\n/*\nunittest\n\
    {\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpoe9h1qji.d(94): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpoe9h1qji.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach(string; strings)\
    \ {\n        if (string.length == strings.length)\n            return string;\n\
    \    }\n    return null;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n\
    \        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n\
    \        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmphzk_9rek.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length ==\
    \ 0)\n        return null;\n    var longest = strings[0];\n    for (var i = 1;\
    \ i < strings.length; ++i)\n        if (strings[i].length < longest.length)\n\
    \            longest = strings[i];\n    return longest;\n}\nunittest\n{\n    alias\
    \ candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnvuf9i8g.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n\tassert(strings.length !=\
    \ 0);\n\t\n\tstring longest = strings[0];\n\t\n\tfor (int i = 1; i < strings.length;\
    \ ++i)\n\t{\n\t\tif (strings[i].length() > longest.length())\n\t\t{\n\t\t\tlongest\
    \ = strings[i];\n\t\t}\n\t}\n\t\n\treturn longest;\n}\nunittest\n{\n    alias\
    \ candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpxqu753p6.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    var maxLength = 0;\n\
    \    var maxString = null;\n    foreach(var s in strings) {\n        var length\
    \ = s.length();\n        if(length > maxLength) {\n            maxLength = length;\n\
    \            maxString = s;\n        }\n    }\n    return maxString;\n}\nunittest\n\
    {\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp187uwp__.d(12): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp187uwp__.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    var maxLength = 0;\n\
    \    var maxString = \"\";\n    foreach(string; strings) {\n        if(string.length\
    \ > maxLength) {\n            maxLength = string.length;\n            maxString\
    \ = string;\n        }\n    }\n    return maxString;\n}\nunittest\n{\n    alias\
    \ candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpmsrk5kl6.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n\tint? maxLength = null;\n\
    \tforeach (string s in strings) {\n\t\tif (maxLength == null || s.length() > maxLength.Value())\
    \ {\n\t\t\tmaxLength = s.length;\n\t\t}\n\t}\n\treturn maxLength;\n}\nunittest\n\
    {\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4_gifojx.d(10): Error: no identifier for declarator int\n/tmp/tmp4_gifojx.d(10):
    Error: found \''?\'' instead of statement\n/tmp/tmp4_gifojx.d(11): Error: found
    \''in\'' when expecting \'';\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4_gifojx.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach(string s in strings)\n\
    \    {\n        if(s.length() > longest.length)\n            longest = s;\n  \
    \  }\n    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\n\
    {\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n\
    {\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4ga3pibb.d(10): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4ga3pibb.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    int? maxLength = null;\n\
    \    foreach (string s in strings) {\n        if (maxLength == null || s.length()\
    \ > maxLength.value) {\n            maxLength = s.length;\n        }\n    }\n\
    \    return maxLength;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n\
    \        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n\
    \        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpab9xbjs3.d(10): Error: no identifier for declarator int\n/tmp/tmpab9xbjs3.d(10):
    Error: found \''?\'' instead of statement\n/tmp/tmpab9xbjs3.d(11): Error: found
    \''in\'' when expecting \'';\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpab9xbjs3.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach(string; strings)\
    \ {\n        if (string.length() > strings.length)\n            return string;\n\
    \    }\n    return null;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n\
    \        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n\
    \        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5eoz5h5p.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n\tNullable!(string) longest\
    \ = null;\n\t\n\tforeach(string[] str in strings)\n\t{\n\t\tNullable!(string)\
    \ str = longest;\n\t\t\n\t\tif(str == null || str.length() > longest.length())\n\
    \t\t{\n\t\t\tlongest = str;\n\t\t}\n\t}\n\t\n\treturn longest;\n}\nunittest\n\
    {\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpuhrwbsps.d(12): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuhrwbsps.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    int? maxLength = null;\n\
    \    foreach (string s in strings) {\n        int length = s.length();\n     \
    \   if (maxLength == null || length > maxLength) {\n            maxLength = length;\n\
    \        }\n    }\n    return maxLength;\n}\nunittest\n{\n    alias candidate\
    \ = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp0zklf5fp.d(10): Error: no identifier for declarator int\n/tmp/tmp0zklf5fp.d(10):
    Error: found \''?\'' instead of statement\n/tmp/tmp0zklf5fp.d(11): Error: found
    \''in\'' when expecting \'';\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp0zklf5fp.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    int? maxLength = null;\n\
    \    foreach (string s in strings) {\n        if (maxLength == null || s.length()\
    \ > maxLength) {\n            maxLength = s.length;\n        }\n    }\n    return\
    \ maxLength;\n}\n/*\n In case of multiple strings of the same length, return the\
    \ one with the smallest index.\n*/\nNullable!(string) shortest(string[] strings)\
    \ \n{\n    int? minLength = null;\n    foreach (string s in strings) {\n     \
    \   if (minLength == null || s.length() < minLength) {\n            minLength\
    \ = s.length;\n        }\n    }\n    return minLength;\n}\n/*\n In case of multiple\
    \ strings of the same length, return the one with the largest index.\n*/\nNullable!(string)\
    \ longestIndex(string[] strings) \n{\n    int? maxIndex = null;\n    foreach (string\
    \ s in strings) {\n        if (maxIndex == null || s.indexOf(strings.last()) >\
    \ maxIndex) {\n            maxIndex = s.indexOf(strings.last());\n        }\n\
    \    }\n    return maxIndex;\n}\n/*\n In case of multiple strings of the same\
    \ length, return the one with the smallest index.\n*/\nNullable!(string) shortestIndex(string[]\
    \ strings) \n{\n    int? minIndex = null;\n    foreach (string s in strings) {\n\
    \        if (minIndex == null || s.indexOf(strings.first()) < minIndex) {\n  \
    \          minIndex = s.indexOf(strings.first());\n        }\n    }\n    return\
    \ minIndex;\n}\n/*\n In case of multiple strings of the same length, return the\
    \ one with the largest index.\n*/\nNullable!(string) longestSubstring(string[]\
    \ strings) \n{\n    int? maxIndex = null;\n    foreach (string s in strings) {\n\
    \        if (maxIndex == null || s.indexOf(strings.last()) > maxIndex) {\n   \
    \         maxIndex = s.indexOf(strings.last());\n        }\n    }\n    return\
    \ maxIndex;\n}\n/*\n In case of multiple strings of the same length, return the\
    \ one with the smallest index.\n*/\nNullable!(string) shortestSubstring(string[]\
    \ strings) \n{\n    int? minIndex = null;\n    foreach (string s in strings) {\n\
    \        if (minIndex == null || s.indexOf(strings.first()) < minIndex) {\n  \
    \          minIndex = s.indexOf(strings.first());\n        }\n    }\n    return\
    \ minIndex;\n}\n/*\n In case of multiple strings of the same length, return the\
    \ one with the largest index.\n*/\nNullable!(string) longestCommonPrefix(string[]\
    \ strings) \n{\n    int? maxIndex = null;\n    foreach (string s in strings) {\n\
    \        if (maxIndex == null || s.indexOf(strings.last()) > maxIndex) {\n   \
    \         maxIndex = s.indexOf(strings.last());\n        }\n    }\n    return\
    \ \nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp495ffun0.d(10): Error: no identifier for declarator int\n/tmp/tmp495ffun0.d(10):
    Error: found \''?\'' instead of statement\n/tmp/tmp495ffun0.d(11): Error: found
    \''in\'' when expecting \'';\''\n/tmp/tmp495ffun0.d(23): Error: no identifier
    for declarator int\n/tmp/tmp495ffun0.d(23): Error: found \''?\'' instead of statement\n/tmp/tmp495ffun0.d(24):
    Error: found \''in\'' when expecting \'';\''\n/tmp/tmp495ffun0.d(36): Error: no
    identifier for declarator int\n/tmp/tmp495ffun0.d(36): Error: found \''?\'' instead
    of statement\n/tmp/tmp495ffun0.d(37): Error: found \''in\'' when expecting \'';\''\n/tmp/tmp495ffun0.d(49):
    Error: no identifier for declarator int\n/tmp/tmp495ffun0.d(49): Error: found
    \''?\'' instead of statement\n/tmp/tmp495ffun0.d(50): Error: found \''in\'' when
    expecting \'';\''\n/tmp/tmp495ffun0.d(62): Error: no identifier for declarator
    int\n/tmp/tmp495ffun0.d(62): Error: found \''?\'' instead of statement\n/tmp/tmp495ffun0.d(63):
    Error: found \''in\'' when expecting \'';\''\n/tmp/tmp495ffun0.d(75): Error: no
    identifier for declarator int\n/tmp/tmp495ffun0.d(75): Error: found \''?\'' instead
    of statement\n/tmp/tmp495ffun0.d(76): Error: found \''in\'' when expecting \'';\''\n/tmp/tmp495ffun0.d(88):
    Error: no identifier for declarator int\n/tmp/tmp495ffun0.d(88): Error: found
    \''?\'' instead of statement\n/tmp/tmp495ffun0.d(89): Error: found \''in\'' when
    expecting \'';\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp495ffun0.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach(string s in strings)\n\
    \    {\n        if(s.length() > longest.length)\n        {\n            longest\
    \ = s;\n        }\n    }\n    return longest;\n}\n/*\n Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return None in case the input list is empty.\n         \
    \       \n*/\nNullable!(string) longest(string[] strings, int startIndex) \n{\n\
    \    foreach(string s in strings)\n    {\n        if(s.length() > longest.length)\n\
    \        {\n            longest = s;\n        }\n    }\n    return longest;\n\
    }\n/*\n Out of list of strings, return the longest one. Return the first one in\
    \ case of multiple\n    strings of the same length. Return None in case the input\
    \ list is empty.\n                \n*/\nNullable!(string) longest(string[] strings,\
    \ int startIndex, int endIndex) \n{\n    foreach(string s in strings)\n    {\n\
    \        if(s.length() > longest.length)\n        {\n            longest = s;\n\
    \        }\n    }\n    return longest;\n}\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings, char c, int startIndex) \n{\n\
    \    foreach(string s in strings)\n    {\n        if(s.length() > longest.length)\n\
    \        {\n            longest = s;\n        }\n    }\n    return longest;\n\
    }\n/*\n Out of list of strings, return the longest one. Return the first one in\
    \ case of multiple\n    strings of the same length. Return None in case the input\
    \ list is empty.\n                \n*/\nNullable!(string) longest(string[] strings,\
    \ char c, int startIndex, int endIndex) \n{\n    foreach(string s in strings)\n\
    \    {\n        if(s.length() > longest.length)\n        {\n            longest\
    \ = s;\n        }\n    }\n    return longest;\n}\n/*\n Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return None in case the input list is empty.\n         \
    \       \n*/\nNullable!(string) longest(string[] strings, char c, int startIndex,\
    \ int endIndex, char c2) \n{\n    foreach(string s in strings)\n    {\n      \
    \  if(s.length() > longest.length)\n        {\n            longest = s;\n    \
    \    }\n    }\n    return longest;\n}\n/*\n Out of list of strings, return the\
    \ longest one. Return the first one in case of multiple\n    strings of the same\
    \ length. Return None in case the input \nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp4azwcemc.d(10): Error: found \''in\'' when expecting \'';\''\n/tmp/tmp4azwcemc.d(26):
    Error: found \''in\'' when expecting \'';\''\n/tmp/tmp4azwcemc.d(42): Error: found
    \''in\'' when expecting \'';\''\n/tmp/tmp4azwcemc.d(58): Error: found \''in\''
    when expecting \'';\''\n/tmp/tmp4azwcemc.d(74): Error: found \''in\'' when expecting
    \'';\''\n/tmp/tmp4azwcemc.d(90): Error: found \''in\'' when expecting \'';\''\n/tmp/tmp4azwcemc.d(99):
    Error: unterminated /* */ comment\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp4azwcemc.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    int? maxLength = null;\n\
    \    foreach (string s in strings) {\n        if (maxLength == null || s.length()\
    \ > maxLength.Value()) {\n            maxLength = s.length;\n        }\n    }\n\
    \    return maxLength;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n\
    \        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n\
    \        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpa08odksy.d(10): Error: no identifier for declarator int\n/tmp/tmpa08odksy.d(10):
    Error: found \''?\'' instead of statement\n/tmp/tmpa08odksy.d(11): Error: found
    \''in\'' when expecting \'';\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa08odksy.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length ==\
    \ 0) {\n        return null;\n    }\n    int maxLen = 0;\n    int maxIdx = 0;\n\
    \    for (auto s : strings) {\n        if (s.length() > maxLen) {\n          \
    \  maxLen = s.length();\n            maxIdx = strings.length - 1;\n        }\n\
    \    }\n    return strings[maxIdx];\n}\n/*\n Out of list of strings, return the\
    \ longest one. Return the first one in case of multiple\n    strings of the same\
    \ length. Return None in case the input list is empty.\n                \n*/\n\
    Nullable!(string) longest(string[] strings, int startIdx) \n{\n    if (strings.length\
    \ == 0) {\n        return null;\n    }\n    int maxLen = 0;\n    int maxIdx =\
    \ startIdx;\n    for (auto s : strings) {\n        if (s.length() > maxLen) {\n\
    \            maxLen = s.length();\n            maxIdx = startIdx;\n        }\n\
    \        if (maxIdx >= strings.length - 1) {\n            break;\n        }\n\
    \        maxIdx++;\n    }\n    return strings[maxIdx];\n}\n/*\n Out of list of\
    \ strings, return the longest one. Return the first one in case of multiple\n\
    \    strings of the same length. Return None in case the input list is empty.\n\
    \                \n*/\nNullable!(string) longest(string[] strings, int startIdx,\
    \ int endIdx) \n{\n    if (strings.length == 0) {\n        return null;\n    }\n\
    \    int maxLen = 0;\n    int maxIdx = startIdx;\n    for (auto s : strings) {\n\
    \        if (s.length() > maxLen) {\n            maxLen = s.length();\n      \
    \      maxIdx = startIdx;\n        }\n        if (maxIdx >= endIdx) {\n      \
    \      break;\n        }\n        maxIdx++;\n    }\n    return strings[maxIdx];\n\
    }\n/*\n Out of list of strings, return the longest one. Return the first one in\
    \ case of multiple\n    strings of the same length. Return None in case the input\
    \ list is empty.\n                \n*/\nNullable!(string) longest(string[] strings,\
    \ int startIdx, int endIdx, int step) \n{\n    if (strings.length == 0) {\n  \
    \      return null;\n    }\n    int maxLen = 0;\n    int maxIdx = startIdx;\n\
    \    for (auto s : strings) {\n        if (s.length() > maxLen) {\n          \
    \  maxLen = s.length();\n            maxIdx = startIdx;\n        }\n        if\
    \ (maxIdx >= endIdx) {\n            break;\n        }\n        maxIdx += step;\n\
    \    }\n    return strings[maxIdx];\n}\n/*\n Out of list of strings, return the\
    \ longest one. Return the first one in case of multiple\n    strings of the same\
    \ length. Return None in case the input list is empty.\n                \n*/\n\
    Nullable!(string) longest(string[] strings, int \nunittest\n{\n    alias candidate\
    \ = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpwtyetued.d(15): Error: no identifier for declarator s\n/tmp/tmpwtyetued.d(15):
    Error: expression expected, not \'':\''\n/tmp/tmpwtyetued.d(15): Error: found
    \''strings\'' when expecting \'';\'' following for condition\n/tmp/tmpwtyetued.d(35):
    Error: no identifier for declarator s\n/tmp/tmpwtyetued.d(35): Error: expression
    expected, not \'':\''\n/tmp/tmpwtyetued.d(35): Error: found \''strings\'' when
    expecting \'';\'' following for condition\n/tmp/tmpwtyetued.d(59): Error: no identifier
    for declarator s\n/tmp/tmpwtyetued.d(59): Error: expression expected, not \'':\''\n/tmp/tmpwtyetued.d(59):
    Error: found \''strings\'' when expecting \'';\'' following for condition\n/tmp/tmpwtyetued.d(83):
    Error: no identifier for declarator s\n/tmp/tmpwtyetued.d(83): Error: expression
    expected, not \'':\''\n/tmp/tmpwtyetued.d(83): Error: found \''strings\'' when
    expecting \'';\'' following for condition\n/tmp/tmpwtyetued.d(101): Error: found
    \''unittest\'' when expecting \'')\''\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpwtyetued.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    int? maxLength = null;\n\
    \    foreach (string s in strings) {\n        if (maxLength == null || s.length()\
    \ > maxLength.Value()) {\n            maxLength = s.length;\n        }\n    }\n\
    \    return maxLength;\n}\n/*\n Out of list of strings, return the longest one.\
    \ Return the first one in case of multiple\n    strings of the same length. Return\
    \ None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int maxLength) \n{\n    foreach (string s in strings)\
    \ {\n        if (s.length() > maxLength) {\n            return s;\n        }\n\
    \    }\n    return null;\n}\n/*\n Out of list of strings, return the longest one.\
    \ Return the first one in case of multiple\n    strings of the same length. Return\
    \ None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int maxLength, int startIndex) \n{\n    foreach (string\
    \ s in strings) {\n        if (s.length() > maxLength) {\n            return s;\n\
    \        }\n    }\n    return null;\n}\n/*\n Out of list of strings, return the\
    \ longest one. Return the first one in case of multiple\n    strings of the same\
    \ length. Return None in case the input list is empty.\n                \n*/\n\
    Nullable!(string) longest(string[] strings, int maxLength, int startIndex, int\
    \ endIndex) \n{\n    foreach (string s in strings) {\n        if (s.length() >\
    \ maxLength) {\n            return s;\n        }\n    }\n    return null;\n}\n\
    /*\n Out of list of strings, return the longest one. Return the first one in case\
    \ of multiple\n    strings of the same length. Return None in case the input list\
    \ is empty.\n                \n*/\nNullable!(string) longest(string[] strings,\
    \ int maxLength, int startIndex, int endIndex, int compare) \n{\n    foreach (string\
    \ s in strings) {\n        if (s.length() > maxLength) {\n            return s;\n\
    \        }\n    }\n    return null;\n}\n/*\n Out of list of strings, return the\
    \ longest one. Return the first one in case of multiple\n    strings of the same\
    \ length. Return None in case the input list is empty.\n                \n*/\n\
    Nullable!(string) longest(string[] strings, int maxLength, int startIndex, int\
    \ endIndex, string compare) \n{\n    foreach (string s in strings) {\n       \
    \ if (s.length() > maxLength) {\n            return s;\n        }\n    }\n   \
    \ return null;\n}\n/*\n Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \n*/\nNullable!(string) longest(string[]\
    \ strings, int maxLength, int startIndex, int end\nunittest\n{\n    alias candidate\
    \ = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp77h24yaz.d(10): Error: no identifier for declarator int\n/tmp/tmp77h24yaz.d(10):
    Error: found \''?\'' instead of statement\n/tmp/tmp77h24yaz.d(11): Error: found
    \''in\'' when expecting \'';\''\n/tmp/tmp77h24yaz.d(25): Error: found \''in\''
    when expecting \'';\''\n/tmp/tmp77h24yaz.d(39): Error: found \''in\'' when expecting
    \'';\''\n/tmp/tmp77h24yaz.d(53): Error: found \''in\'' when expecting \'';\''\n/tmp/tmp77h24yaz.d(67):
    Error: found \''in\'' when expecting \'';\''\n/tmp/tmp77h24yaz.d(81): Error: found
    \''in\'' when expecting \'';\''\n/tmp/tmp77h24yaz.d(94): Error: found \''unittest\''
    when expecting \'')\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp77h24yaz.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    int? maxLength = null;\n\
    \    foreach(string! s, strings) {\n        if (s.length() > maxLength) {\n  \
    \          maxLength = s.length;\n        }\n    }\n    return maxLength;\n}\n\
    unittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpugabu1jd.d(10): Error: no identifier for declarator int\n/tmp/tmpugabu1jd.d(10):
    Error: found \''?\'' instead of statement\n/tmp/tmpugabu1jd.d(11): Error: no identifier
    for declarator string!s\n/tmp/tmpugabu1jd.d(11): Error: no identifier for declarator
    strings\n/tmp/tmpugabu1jd.d(11): Error: found \'')\'' when expecting \'';\''\n/tmp/tmpugabu1jd.d(16):
    Error: found \''return\'' when expecting \'')\''\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpugabu1jd.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length ==\
    \ 0) {\n        return null;\n    }\n    \n    string longest = strings[0];\n\
    \    int longestLength = longest.length;\n    \n    for (int i = 1; i < strings.length;\
    \ i++) {\n        if (strings[i].length < longestLength) {\n            longest\
    \ = strings[i];\n            longestLength = longest.length;\n        }\n    }\n\
    \    \n    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\n\
    {\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n\
    {\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpq88ovpl6.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach(string s in strings)\n\
    \    {\n        if(s.length() > longest.length)\n        {\n            longest\
    \ = s;\n        }\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate\
    \ = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_mw2m4tj.d(10): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_mw2m4tj.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach(string; strings)\
    \ \n    {\n        if(string.length > longest.length) longest = string;\n    }\n\
    \    return longest;\n}\n/*\n Out of list of strings, return the longest one.\
    \ Return the first one in case of multiple\n    strings of the same length. Return\
    \ None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int start) \n{\n    foreach(string; strings[start])\
    \ \n    {\n        if(string.length > longest.length) longest = string;\n    }\n\
    \    return longest;\n}\n/*\n Out of list of strings, return the longest one.\
    \ Return the first one in case of multiple\n    strings of the same length. Return\
    \ None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int start, int end) \n{\n    foreach(string; strings[start..end])\
    \ \n    {\n        if(string.length > longest.length) longest = string;\n    }\n\
    \    return longest;\n}\n/*\n Out of list of strings, return the longest one.\
    \ Return the first one in case of multiple\n    strings of the same length. Return\
    \ None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int start, int end, int step) \n{\n    foreach(string;\
    \ strings[start..end..step]) \n    {\n        if(string.length > longest.length)\
    \ longest = string;\n    }\n    return longest;\n}\n/*\n Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return None in case the input list is empty.\n         \
    \       \n*/\nNullable!(string) longest(string[] strings, int start, int end,\
    \ int step, string separator) \n{\n    foreach(string; strings[start..end..step])\
    \ \n    {\n        if(string.split(separator).length > longest.split(separator).length)\
    \ longest = string;\n    }\n    return longest;\n}\n/*\n Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return None in case the input list is empty.\n         \
    \       \n*/\nNullable!(string) longest(string[] strings, int start, int end,\
    \ int step, string separator, string caseSensitive) \n{\n    foreach(string; strings[start..end..step])\
    \ \n    {\n        if(string.split(separator).length > longest.split(separator).length)\
    \ longest = string;\n    }\n    return longest;\n}\n/*\n Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return None in case the input list is empty.\nunittest\n\
    {\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5incb6ue.d(49): Error: found \''..\'' when expecting \'']\''\n/tmp/tmp5incb6ue.d(49):
    Error: found \''step\'' when expecting \'')\''\n/tmp/tmp5incb6ue.d(49): Error:
    found \'']\'' instead of statement\n/tmp/tmp5incb6ue.d(53): Error: Declaration
    expected, not \''return\''\n/tmp/tmp5incb6ue.d(54): Error: unrecognized declaration\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5incb6ue.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length ==\
    \ 0) {\n        return null;\n    }\n    int maxLen = strings[0].Length;\n   \
    \ foreach (string s in strings) {\n        if (s.Length > maxLen) {\n        \
    \    maxLen = s.Length;\n        }\n    }\n    return maxLen == strings[0].Length\
    \ ? strings[0] : null;\n}\n/*\n Out of list of strings, return the longest one.\
    \ Return the first one in case of multiple\n    strings of the same length. Return\
    \ None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int maxLen) \n{\n    if (strings.length == 0) {\n\
    \        return null;\n    }\n    int maxLen = strings[0].Length;\n    foreach\
    \ (string s in strings) {\n        if (s.Length > maxLen) {\n            maxLen\
    \ = s.Length;\n        }\n    }\n    return maxLen == strings[0].Length ? strings[0]\
    \ : null;\n}\n/*\n Out of list of strings, return the longest one. Return the\
    \ first one in case of multiple\n    strings of the same length. Return None in\
    \ case the input list is empty.\n                \n*/\nNullable!(string) longest(string[]\
    \ strings, int maxLen, int startIndex) \n{\n    if (strings.length == 0) {\n \
    \       return null;\n    }\n    int maxLen = strings[0].Length;\n    foreach\
    \ (string s in strings) {\n        if (s.Length > maxLen) {\n            maxLen\
    \ = s.Length;\n        }\n    }\n    return maxLen == strings[0].Length ? strings[0]\
    \ : null;\n}\n/*\n Out of list of strings, return the longest one. Return the\
    \ first one in case of multiple\n    strings of the same length. Return None in\
    \ case the input list is empty.\n                \n*/\nNullable!(string) longest(string[]\
    \ strings, int maxLen, int startIndex, int endIndex) \n{\n    if (strings.length\
    \ == 0) {\n        return null;\n    }\n    int maxLen = strings[0].Length;\n\
    \    foreach (string s in strings) {\n        if (s.Length > maxLen) {\n     \
    \       maxLen = s.Length;\n        }\n    }\n    return maxLen == strings[0].Length\
    \ ? strings[0] : null;\n}\n/*\n Out of list of strings, return the longest one.\
    \ Return the first one in case of multiple\n    strings of the same length. Return\
    \ None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int maxLen, int startIndex, int endIndex, int maxCount)\
    \ \n{\n    if (strings.length == 0) {\n        return null;\n    }\n    int maxLen\
    \ = strings[0].Length;\n    foreach (string s in strings) {\n        if (s.Length\
    \ > maxLen) {\n            maxLen = s.Length;\n        }\n    }\nunittest\n{\n\
    \    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n \
    \       assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp950u52sz.d(14): Error: found \''in\'' when expecting \'';\''\n/tmp/tmp950u52sz.d(32):
    Error: found \''in\'' when expecting \'';\''\n/tmp/tmp950u52sz.d(50): Error: found
    \''in\'' when expecting \'';\''\n/tmp/tmp950u52sz.d(68): Error: found \''in\''
    when expecting \'';\''\n/tmp/tmp950u52sz.d(86): Error: found \''in\'' when expecting
    \'';\''\n/tmp/tmp950u52sz.d(91): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp950u52sz.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    int? maxLength = null;\n\
    \    foreach (string s in strings) {\n        if (maxLength == null || s.length()\
    \ > maxLength.Value()) {\n            maxLength = s.length;\n        }\n    }\n\
    \    return maxLength;\n}\n/*\n Out of list of strings, return the longest one.\
    \ Return the first one in case of multiple\n    strings of the same length. Return\
    \ None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int maxLength) \n{\n    foreach (string s in strings)\
    \ {\n        if (s.length() > maxLength) {\n            maxLength = s.length;\n\
    \        }\n    }\n    return maxLength;\n}\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings, int maxLength, int startIndex)\
    \ \n{\n    foreach (string s in strings) {\n        if (s.length() > maxLength)\
    \ {\n            maxLength = s.length;\n        }\n        if (s.length() > startIndex)\
    \ {\n            return s;\n        }\n    }\n    return null;\n}\n/*\n Out of\
    \ list of strings, return the longest one. Return the first one in case of multiple\n\
    \    strings of the same length. Return None in case the input list is empty.\n\
    \                \n*/\nNullable!(string) longest(string[] strings, int maxLength,\
    \ int startIndex, int endIndex) \n{\n    foreach (string s in strings) {\n   \
    \     if (s.length() > maxLength) {\n            maxLength = s.length;\n     \
    \   }\n        if (s.length() > startIndex && s.length() < endIndex) {\n     \
    \       return s;\n        }\n    }\n    return null;\n}\n/*\n Out of list of\
    \ strings, return the longest one. Return the first one in case of multiple\n\
    \    strings of the same length. Return None in case the input list is empty.\n\
    \                \n*/\nNullable!(string) longest(string[] strings, int maxLength,\
    \ int startIndex, int endIndex, int compare) \n{\n    foreach (string s in strings)\
    \ {\n        if (s.length() > maxLength) {\n            maxLength = s.length;\n\
    \        }\n        if (s.length() > startIndex && s.length() < endIndex) {\n\
    \            if (compare(s.length(), maxLength)) {\n                return s;\n\
    \            }\n        }\n    }\n    return null;\n}\n/*\n Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return None in case the input list is empty.\n         \
    \       \n*/\nNullable!(string) longest(string[] strings, int maxLength, int startIndex,\
    \ int endIndex, int compare, int startIndexInclusive) \n{\n    foreach (string\
    \ s in strings) {\n        if (s.length() > maxLength) {\n\nunittest\n{\n    alias\
    \ candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpu9gppqnn.d(10): Error: no identifier for declarator int\n/tmp/tmpu9gppqnn.d(10):
    Error: found \''?\'' instead of statement\n/tmp/tmpu9gppqnn.d(11): Error: found
    \''in\'' when expecting \'';\''\n/tmp/tmpu9gppqnn.d(25): Error: found \''in\''
    when expecting \'';\''\n/tmp/tmpu9gppqnn.d(39): Error: found \''in\'' when expecting
    \'';\''\n/tmp/tmpu9gppqnn.d(56): Error: found \''in\'' when expecting \'';\''\n/tmp/tmpu9gppqnn.d(73):
    Error: found \''in\'' when expecting \'';\''\n/tmp/tmpu9gppqnn.d(92): Error: found
    \''in\'' when expecting \'';\''\n/tmp/tmpu9gppqnn.d(95): Error: found \''unittest\''
    instead of statement\n/tmp/tmpu9gppqnn.d(115): Error: found \''EOF\'' when expecting
    \''}\'' following compound statement\n/tmp/tmpu9gppqnn.d(115): Error: found \''EOF\''
    when expecting \''}\'' following compound statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpu9gppqnn.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach(string; strings)\
    \ {\n        if(string.length > longest.length)\n            longest = string;\n\
    \    }\n    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\n\
    {\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n\
    {\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqpklbg5c.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    var longest = strings[0];\n\
    \    foreach(var s in strings)\n    {\n        if(s.length >= longest.length)\n\
    \        {\n            longest = s;\n        }\n    }\n    return longest;\n\
    }\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpcq03o4bg.d(11): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcq03o4bg.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach(string; strings)\n\
    \    {\n        if(string.length == strings.length)\n            return string;\n\
    \    }\n    return null;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n\
    \        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n\
    \        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp25phvwj2.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach(string; strings)\
    \ {\n        if(string.length > longest.length)\n            longest = string;\n\
    \    }\n    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\n\
    {\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n\
    {\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqpklbg5c.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length ==\
    \ 0)\n        return null;\n    var longest = strings[0];\n    for (var i = 1;\
    \ i < strings.length; ++i) {\n        if (strings[i].length < longest.length)\n\
    \            longest = strings[i];\n    }\n    return longest;\n}\n/*\n Out of\
    \ list of strings, return the longest one. Return the first one in case of multiple\n\
    \    strings of the same length. Return None in case the input list is empty.\n\
    \                \n*/\nNullable!(string) longest(string[] strings, int startIndex)\
    \ \n{\n    if (strings.length == 0)\n        return null;\n    var longest = strings[startIndex];\n\
    \    for (var i = startIndex + 1; i < strings.length; ++i) {\n        if (strings[i].length\
    \ < longest.length)\n            longest = strings[i];\n    }\n    return longest;\n\
    }\n/*\n Out of list of strings, return the longest one. Return the first one in\
    \ case of multiple\n    strings of the same length. Return None in case the input\
    \ list is empty.\n                \n*/\nNullable!(string) longest(string[] strings,\
    \ int startIndex, int endIndex) \n{\n    if (strings.length == 0)\n        return\
    \ null;\n    var longest = strings[startIndex];\n    for (var i = startIndex +\
    \ 1; i < endIndex; ++i) {\n        if (strings[i].length < longest.length)\n \
    \           longest = strings[i];\n    }\n    return longest;\n}\n/*\n Out of\
    \ list of strings, return the longest one. Return the first one in case of multiple\n\
    \    strings of the same length. Return None in case the input list is empty.\n\
    \                \n*/\nNullable!(string) longest(string[] strings, int startIndex,\
    \ int endIndex, int maxLength) \n{\n    if (strings.length == 0)\n        return\
    \ null;\n    var longest = strings[startIndex];\n    for (var i = startIndex +\
    \ 1; i < endIndex; ++i) {\n        if (strings[i].length < longest.length)\n \
    \           longest = strings[i];\n    }\n    return longest;\n}\n/*\n Out of\
    \ list of strings, return the longest one. Return the first one in case of multiple\n\
    \    strings of the same length. Return None in case the input list is empty.\n\
    \                \n*/\nNullable!(string) longest(string[] strings, int startIndex,\
    \ int endIndex, int maxLength, int startIndexInclusive) \n{\n    if (strings.length\
    \ == 0)\n        return null;\n    var longest = strings[startIndex];\n    for\
    \ (var i = startIndex + 1; i < endIndex; ++i) {\n        if (strings[i].length\
    \ < longest.length)\n            longest = strings[i];\n    }\n    return longest;\n\
    }\n/*\n Out of list of strings, return the longest one. Return the first one in\
    \ case of multiple\n    strings of the same length. Return None in case the input\
    \ list is empty.\n\nunittest\n{\n    alias candidate = longest;\n\n{\n       \
    \ auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n     \
    \   auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphfjr387x.d(83): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmphfjr387x.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach(string[] str\
    \ in strings) {\n        if (str.length > longest.length)\n            longest\
    \ = str;\n    }\n    return longest;\n}\n/*\n Out of list of strings, return the\
    \ longest one. Return the first one in case of multiple\n    strings of the same\
    \ length. Return None in case the input list is empty.\n                \n*/\n\
    Nullable!(string) longest(string[] strings, int startIndex) \n{\n    foreach(string[]\
    \ str in strings) {\n        if (str.length > longest.length)\n            longest\
    \ = str;\n    }\n    return longest;\n}\n/*\n Out of list of strings, return the\
    \ longest one. Return the first one in case of multiple\n    strings of the same\
    \ length. Return None in case the input list is empty.\n                \n*/\n\
    Nullable!(string) longest(string[] strings, int startIndex, int endIndex) \n{\n\
    \    foreach(string[] str in strings) {\n        if (str.length > longest.length)\n\
    \            longest = str;\n    }\n    return longest;\n}\n/*\n Out of list of\
    \ strings, return the longest one. Return the first one in case of multiple\n\
    \    strings of the same length. Return None in case the input list is empty.\n\
    \                \n*/\nNullable!(string) longest(string[] strings, char charToFind)\
    \ \n{\n    foreach(string[] str in strings) {\n        if (str.length > longest.length)\n\
    \            longest = str;\n    }\n    return longest;\n}\n/*\n Out of list of\
    \ strings, return the longest one. Return the first one in case of multiple\n\
    \    strings of the same length. Return None in case the input list is empty.\n\
    \                \n*/\nNullable!(string) longest(string[] strings, char charToFind,\
    \ int startIndex) \n{\n    foreach(string[] str in strings) {\n        if (str.length\
    \ > longest.length)\n            longest = str;\n    }\n    return longest;\n\
    }\n/*\n Out of list of strings, return the longest one. Return the first one in\
    \ case of multiple\n    strings of the same length. Return None in case the input\
    \ list is empty.\n                \n*/\nNullable!(string) longest(string[] strings,\
    \ char charToFind, int startIndex, int endIndex) \n{\n    foreach(string[] str\
    \ in strings) {\n        if (str.length > longest.length)\n            longest\
    \ = str;\n    }\n    return longest;\n}\n/*\n Out of list of strings, return the\
    \ longest one. Return the first one in case of multiple\n    strings of the same\
    \ length. Return None in case the input list is empty.\n                \n*/\n\
    Nullable!(string) longest(string[] strings, char charToFind, char charToFind2)\
    \ \n{\n    \nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result\
    \ = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result\
    \ = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get\
    \ == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\"\
    , \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get ==\
    \ \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_vj74iwq.d(10): Error: found \''in\'' when expecting \'';\''\n/tmp/tmp_vj74iwq.d(23):
    Error: found \''in\'' when expecting \'';\''\n/tmp/tmp_vj74iwq.d(36): Error: found
    \''in\'' when expecting \'';\''\n/tmp/tmp_vj74iwq.d(49): Error: found \''in\''
    when expecting \'';\''\n/tmp/tmp_vj74iwq.d(62): Error: found \''in\'' when expecting
    \'';\''\n/tmp/tmp_vj74iwq.d(75): Error: found \''in\'' when expecting \'';\''\n/tmp/tmp_vj74iwq.d(89):
    Error: found \''unittest\'' instead of statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmp_vj74iwq.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach(string; strings)\
    \ {\n        if(string.length == strings.length)\n            return string;\n\
    \    }\n    return null;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n\
    \        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n\
    \        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp1keq4o4.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    var longest = strings[0];\n\
    \    var longestLength = longest.length;\n    for(var i = 1; i < strings.length;\
    \ ++i)\n    {\n        var thisLength = strings[i].length;\n        if(thisLength\
    \ > longestLength)\n        {\n            longest = strings[i];\n           \
    \ longestLength = thisLength;\n        }\n    }\n    return longest;\n}\nunittest\n\
    {\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpsnapm6wu.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    var maxLength = 0;\n\
    \    var maxString = \"\";\n    foreach(string; strings) {\n        var length\
    \ = string.length;\n        if (length > maxLength) {\n            maxLength =\
    \ length;\n            maxString = string;\n        }\n    }\n    return maxString;\n\
    }\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5jsk_tbg.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    int? maxLength = null;\n\
    \    foreach(string? s in strings) {\n        int length = s.length();\n     \
    \   if (maxLength == null || maxLength.Value < length) {\n            maxLength\
    \ = length;\n        }\n    }\n    return maxLength;\n}\nunittest\n{\n    alias\
    \ candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnypaiiwx.d(10): Error: no identifier for declarator int\n/tmp/tmpnypaiiwx.d(10):
    Error: found \''?\'' instead of statement\n/tmp/tmpnypaiiwx.d(11): Error: no identifier
    for declarator string\n/tmp/tmpnypaiiwx.d(11): Error: found \''?\'' when expecting
    \'';\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpnypaiiwx.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    var longest = strings[0];\n\
    \    var longestLength = 0;\n    foreach(var s in strings)\n    {\n        if(s.length\
    \ > longestLength)\n        {\n            longest = s;\n            longestLength\
    \ = s.length;\n        }\n    }\n    return longest;\n}\nunittest\n{\n    alias\
    \ candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpqfv8l4bn.d(12): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqfv8l4bn.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach(string[] s in\
    \ strings) {\n        if(s.length() > longest(s).len()) {\n            return\
    \ longest(s);\n        }\n    }\n    return None;\n}\n/*\n In case of multiple\
    \ strings of the same length, return the one with the highest index.\n*/\nNullable!(int)\
    \ longestIndex(string[] strings) \n{\n    foreach(string[] s in strings) {\n \
    \       if(s.length() > longestIndex(s).len()) {\n            return longestIndex(s);\n\
    \        }\n    }\n    return None;\n}\n/*\n In case of multiple strings of the\
    \ same length, return the one with the lowest index.\n*/\nNullable!(int) shortestIndex(string[]\
    \ strings) \n{\n    foreach(string[] s in strings) {\n        if(s.length() <\
    \ shortestIndex(s).len()) {\n            return shortestIndex(s);\n        }\n\
    \    }\n    return None;\n}\n/*\n In case of multiple strings of the same length,\
    \ return the one with the lowest index.\n*/\nNullable!(int) shortestIndex(string[]\
    \ strings, int index) \n{\n    foreach(string[] s in strings) {\n        if(s.length()\
    \ < shortestIndex(s, index).len()) {\n            return shortestIndex(s, index);\n\
    \        }\n    }\n    return None;\n}\n/*\n In case of multiple strings of the\
    \ same length, return the one with the highest index.\n*/\nNullable!(int) longestIndex(string[]\
    \ strings, int index) \n{\n    foreach(string[] s in strings) {\n        if(s.length()\
    \ > longestIndex(s, index).len()) {\n            return longestIndex(s, index);\n\
    \        }\n    }\n    return None;\n}\n/*\n In case of multiple strings of the\
    \ same length, return the one with the lowest index.\n*/\nNullable!(int) shortestIndex(string[]\
    \ strings, int index) \n{\n    foreach(string[] s in strings) {\n        if(s.length()\
    \ < shortestIndex(s, index).len()) {\n            return shortestIndex(s, index);\n\
    \        }\n    }\n    return None;\n}\n/*\n In case of multiple strings of the\
    \ same length, return the one with the highest index.\n*/\nNullable!(int) longestIndex(string[]\
    \ strings, int index, int length) \n{\n    foreach(string[] s in strings) {\n\
    \        if(s.length() > longestIndex(s, index, length).len()) {\n           \
    \ return longestIndex(s, index, length);\n        }\n    }\n    return None;\n\
    }\n/*\n In case of multiple strings of the same length, return the one with the\
    \ lowest index.\n*/\nNullable!(int) shortestIndex(string[] strings, int index,\
    \ int length) \n{\n    foreach(string[] s in strings) {\n        if(s.length()\
    \ < shortestIndex(s, index, length).len()) {\n            return shortestIndex(s,\
    \ index, length);\n        }\n    }\n    return None;\n}\n/*\n In case of \nunittest\n\
    {\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpz864hvdu.d(10): Error: found \''in\'' when expecting \'';\''\n/tmp/tmpz864hvdu.d(22):
    Error: found \''in\'' when expecting \'';\''\n/tmp/tmpz864hvdu.d(34): Error: found
    \''in\'' when expecting \'';\''\n/tmp/tmpz864hvdu.d(46): Error: found \''in\''
    when expecting \'';\''\n/tmp/tmpz864hvdu.d(58): Error: found \''in\'' when expecting
    \'';\''\n/tmp/tmpz864hvdu.d(70): Error: found \''in\'' when expecting \'';\''\n/tmp/tmpz864hvdu.d(82):
    Error: found \''in\'' when expecting \'';\''\n/tmp/tmpz864hvdu.d(94): Error: found
    \''in\'' when expecting \'';\''\n/tmp/tmpz864hvdu.d(101): Error: unterminated
    /* */ comment\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpz864hvdu.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n\tint? maxLength = null;\n\
    \tforeach(string! s, strings) {\n\t\tint len = s.length();\n\t\tif(maxLength ==\
    \ null || len > maxLength) {\n\t\t\tmaxLength = len;\n\t\t}\n\t}\n\treturn maxLength;\n\
    }\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp2xca_hk2.d(10): Error: no identifier for declarator int\n/tmp/tmp2xca_hk2.d(10):
    Error: found \''?\'' instead of statement\n/tmp/tmp2xca_hk2.d(11): Error: no identifier
    for declarator string!s\n/tmp/tmp2xca_hk2.d(11): Error: no identifier for declarator
    strings\n/tmp/tmp2xca_hk2.d(11): Error: found \'')\'' when expecting \'';\''\n/tmp/tmp2xca_hk2.d(17):
    Error: found \''return\'' when expecting \'')\''\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmp2xca_hk2.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach(string s in strings)\n\
    \    {\n        if(s.length() > longest.length)\n        {\n            longest\
    \ = s;\n        }\n    }\n    return longest;\n}\n/*\n Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return None in case the input list is empty.\n         \
    \       \n*/\nNullable!(string) longest(string[] strings, int startIndex) \n{\n\
    \    foreach(string s in strings)\n    {\n        if(s.length() > longest.length)\n\
    \        {\n            longest = s;\n        }\n    }\n    return longest;\n\
    }\n/*\n Out of list of strings, return the longest one. Return the first one in\
    \ case of multiple\n    strings of the same length. Return None in case the input\
    \ list is empty.\n                \n*/\nNullable!(string) longest(string[] strings,\
    \ int startIndex, int endIndex) \n{\n    foreach(string s in strings)\n    {\n\
    \        if(s.length() > longest.length)\n        {\n            longest = s;\n\
    \        }\n    }\n    return longest;\n}\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings, char character) \n{\n    foreach(string\
    \ s in strings)\n    {\n        if(s.length() > longest.length)\n        {\n \
    \           longest = s;\n        }\n    }\n    return longest;\n}\n/*\n Out of\
    \ list of strings, return the longest one. Return the first one in case of multiple\n\
    \    strings of the same length. Return None in case the input list is empty.\n\
    \                \n*/\nNullable!(string) longest(string[] strings, char character,\
    \ int startIndex) \n{\n    foreach(string s in strings)\n    {\n        if(s.length()\
    \ > longest.length)\n        {\n            longest = s;\n        }\n    }\n \
    \   return longest;\n}\n/*\n Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \n*/\nNullable!(string) longest(string[]\
    \ strings, char character, int startIndex, int endIndex) \n{\n    foreach(string\
    \ s in strings)\n    {\n        if(s.length() > longest.length)\n        {\n \
    \           longest = s;\n        }\n    }\n    return longest;\n}\n/*\n Out of\
    \ list of strings, return the longest one. Return the first one in case of multiple\n\
    \    strings of the same length. Return None in case the input list is empty.\n\
    \                \n*/\nunittest\n{\n    alias candidate = longest;\n\n{\n    \
    \    auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n  \
    \      auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp6phm6rj5.d(10): Error: found \''in\'' when expecting \'';\''\n/tmp/tmp6phm6rj5.d(26):
    Error: found \''in\'' when expecting \'';\''\n/tmp/tmp6phm6rj5.d(42): Error: found
    \''in\'' when expecting \'';\''\n/tmp/tmp6phm6rj5.d(58): Error: found \''in\''
    when expecting \'';\''\n/tmp/tmp6phm6rj5.d(74): Error: found \''in\'' when expecting
    \'';\''\n/tmp/tmp6phm6rj5.d(90): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp6phm6rj5.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length ==\
    \ 0) {\n        return null;\n    }\n    int maxLen = strings[0].length;\n   \
    \ foreach (string s in strings) {\n        if (s.length() > maxLen) {\n      \
    \      maxLen = s.length;\n        }\n    }\n    return maxLen > 0 ? strings[strings.length\
    \ - 1] : null;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto\
    \ result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull &&\
    \ result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\"\
    , \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get\
    \ == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8_adrsx4.d(14): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8_adrsx4.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach(string; strings)\
    \ {\n        if(string.length > longest.length)\n            longest = string;\n\
    \    }\n    return longest;\n}\n/*\n Out of list of strings, return the longest\
    \ one. Return the first one in case of multiple\n    strings of the same length.\
    \ Return None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int start) \n{\n    foreach(string; strings) {\n \
    \       if(string.length > longest.length)\n            longest = string;\n  \
    \  }\n    return longest;\n}\n/*\n Out of list of strings, return the longest\
    \ one. Return the first one in case of multiple\n    strings of the same length.\
    \ Return None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int start, int end) \n{\n    foreach(string; strings)\
    \ {\n        if(string.length > longest.length)\n            longest = string;\n\
    \    }\n    return longest;\n}\n/*\n Out of list of strings, return the longest\
    \ one. Return the first one in case of multiple\n    strings of the same length.\
    \ Return None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int start, int end, int step) \n{\n    foreach(string;\
    \ strings) {\n        if(string.length > longest.length)\n            longest\
    \ = string;\n    }\n    return longest;\n}\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings, int start, int end, int step,\
    \ string separator) \n{\n    foreach(string; strings) {\n        if(string.length\
    \ > longest.length)\n            longest = string;\n    }\n    return longest;\n\
    }\n/*\n Out of list of strings, return the longest one. Return the first one in\
    \ case of multiple\n    strings of the same length. Return None in case the input\
    \ list is empty.\n                \n*/\nNullable!(string) longest(string[] strings,\
    \ int start, int end, int step, string separator, int startIndex) \n{\n    foreach(string;\
    \ strings) {\n        if(string.length > longest.length)\n            longest\
    \ = string;\n    }\n    return longest;\n}\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings, int start, int end, int step,\
    \ string separator, int startIndex, int endIndex) \n{\n    foreach(string; strings)\
    \ {\n        if(string\nunittest\n{\n    alias candidate = longest;\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpcpa12z0j.d(90): Error: found \''unittest\'' when expecting \'')\''\n/tmp/tmpcpa12z0j.d(110):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\n/tmp/tmpcpa12z0j.d(110):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpcpa12z0j.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    int? maxLength = null;\n\
    \    foreach(string? s in strings)\n    {\n        int length = s.length();\n\
    \        if(maxLength == null || length > maxLength)\n        {\n            maxLength\
    \ = length;\n        }\n    }\n    return maxLength;\n}\nunittest\n{\n    alias\
    \ candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpfudoll4y.d(10): Error: no identifier for declarator int\n/tmp/tmpfudoll4y.d(10):
    Error: found \''?\'' instead of statement\n/tmp/tmpfudoll4y.d(11): Error: no identifier
    for declarator string\n/tmp/tmpfudoll4y.d(11): Error: found \''?\'' when expecting
    \'';\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpfudoll4y.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    int? maxLength = null;\n\
    \    foreach(string? s in strings) {\n        int length = s.length();\n     \
    \   if (maxLength == null || length > maxLength.Value) {\n            maxLength\
    \ = length;\n        }\n    }\n    return maxLength;\n}\nunittest\n{\n    alias\
    \ candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp10ldm784.d(10): Error: no identifier for declarator int\n/tmp/tmp10ldm784.d(10):
    Error: found \''?\'' instead of statement\n/tmp/tmp10ldm784.d(11): Error: no identifier
    for declarator string\n/tmp/tmp10ldm784.d(11): Error: found \''?\'' when expecting
    \'';\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp10ldm784.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    int? maxLength = null;\n\
    \    foreach(string? s in strings) {\n        if(maxLength == null || s.length()\
    \ > maxLength) {\n            maxLength = s.length();\n        }\n    }\n    return\
    \ maxLength;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto\
    \ result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull &&\
    \ result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\"\
    , \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get\
    \ == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpzew26ukg.d(10): Error: no identifier for declarator int\n/tmp/tmpzew26ukg.d(10):
    Error: found \''?\'' instead of statement\n/tmp/tmpzew26ukg.d(11): Error: no identifier
    for declarator string\n/tmp/tmpzew26ukg.d(11): Error: found \''?\'' when expecting
    \'';\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzew26ukg.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    int? maxLength = null;\n\
    \    foreach (string s in strings) {\n        if (maxLength == null || s.length()\
    \ > maxLength.Value()) {\n            maxLength = s.length;\n        }\n    }\n\
    \    return maxLength;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n\
    \        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n\
    \        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpa08odksy.d(10): Error: no identifier for declarator int\n/tmp/tmpa08odksy.d(10):
    Error: found \''?\'' instead of statement\n/tmp/tmpa08odksy.d(11): Error: found
    \''in\'' when expecting \'';\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa08odksy.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    var maxLength = 0;\n\
    \    var maxString = \"\";\n    foreach(var s in strings) {\n        var len =\
    \ s.length();\n        if(len > maxLength) {\n            maxLength = len;\n \
    \           maxString = s;\n        }\n    }\n    return maxString;\n}\nunittest\n\
    {\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbm8sy_l4.d(12): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbm8sy_l4.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    var longest = strings[0];\n\
    \    var longestLength = longest.length;\n    foreach(string[] s in strings)\n\
    \    {\n        if(s.length == longestLength)\n        {\n            longest\
    \ = s;\n            longestLength = longest.length;\n        }\n    }\n    return\
    \ longest;\n}\n/*\n Out of list of strings, return the longest one. Return the\
    \ first one in case of multiple\n    strings of the same length. Return None in\
    \ case the input list is empty.\n                \n*/\nNullable!(string) longest(string[]\
    \ strings, int startIndex) \n{\n    var longest = strings[startIndex];\n    var\
    \ longestLength = longest.length;\n    foreach(string[] s in strings)\n    {\n\
    \        if(s.length == longestLength)\n        {\n            longest = s;\n\
    \            longestLength = longest.length;\n        }\n    }\n    return longest;\n\
    }\n/*\n Out of list of strings, return the longest one. Return the first one in\
    \ case of multiple\n    strings of the same length. Return None in case the input\
    \ list is empty.\n                \n*/\nNullable!(string) longest(string[] strings,\
    \ int startIndex, int endIndex) \n{\n    var longest = strings[startIndex];\n\
    \    var longestLength = longest.length;\n    foreach(string[] s in strings)\n\
    \    {\n        if(s.length == longestLength)\n        {\n            longest\
    \ = s;\n            longestLength = longest.length;\n        }\n    }\n    return\
    \ longest;\n}\n/*\n Out of list of strings, return the longest one. Return the\
    \ first one in case of multiple\n    strings of the same length. Return None in\
    \ case the input list is empty.\n                \n*/\nNullable!(string) longest(string[]\
    \ strings, int startIndex, int endIndex, int maxLength) \n{\n    var longest =\
    \ strings[startIndex];\n    var longestLength = longest.length;\n    foreach(string[]\
    \ s in strings)\n    {\n        if(s.length == longestLength)\n        {\n   \
    \         longest = s;\n            longestLength = longest.length;\n        }\n\
    \    }\n    return longest;\n}\n/*\n Out of list of strings, return the longest\
    \ one. Return the first one in case of multiple\n    strings of the same length.\
    \ Return None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int startIndex, int endIndex, int maxLength, int startIndex2)\
    \ \n{\n    var longest = strings[startIndex];\n    var longestLength = longest.length;\n\
    \    foreach(string[] s in strings)\n    {\n        if(s.length == longestLength)\n\
    \        {\n            longest = s;\n            longestLength = longest.length;\n\
    \        }\n    }\n    return longest;\n}\n/*\n Out of list of strings, return\
    \ the longest one. \nunittest\n{\n    alias candidate = longest;\n\n{\n      \
    \  auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n    \
    \    auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp57nwux5q.d(12): Error: found \''in\'' when expecting \'';\''\n/tmp/tmp57nwux5q.d(31):
    Error: found \''in\'' when expecting \'';\''\n/tmp/tmp57nwux5q.d(50): Error: found
    \''in\'' when expecting \'';\''\n/tmp/tmp57nwux5q.d(69): Error: found \''in\''
    when expecting \'';\''\n/tmp/tmp57nwux5q.d(88): Error: found \''in\'' when expecting
    \'';\''\n/tmp/tmp57nwux5q.d(98): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp57nwux5q.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length ==\
    \ 0) {\n        return null;\n    }\n    var maxLength = 0;\n    var maxString\
    \ = \"\";\n    for (var i = 0; i <strings.length; ++i) {\n        var length =\
    \ strings[i].length;\n        if (length > maxLength) {\n            maxLength\
    \ = length;\n            maxString = strings[i];\n        }\n    }\n    return\
    \ maxString;\n}\n/*\n Out of list of strings, return the longest one. Return the\
    \ first one in case of multiple\n    strings of the same length. Return None in\
    \ case the input list is empty.\n                \n*/\nNullable!(string) longest(string[]\
    \ strings, int startIndex) \n{\n    if (strings.length == 0) {\n        return\
    \ null;\n    }\n    var maxLength = 0;\n    var maxString = \"\";\n    for (var\
    \ i = startIndex; i < strings.length; ++i) {\n        var length = strings[i].length;\n\
    \        if (length > maxLength) {\n            maxLength = length;\n        \
    \    maxString = strings[i];\n        }\n    }\n    return maxString;\n}\n/*\n\
    \ Out of list of strings, return the longest one. Return the first one in case\
    \ of multiple\n    strings of the same length. Return None in case the input list\
    \ is empty.\n                \n*/\nNullable!(string) longest(string[] strings,\
    \ int startIndex, int endIndex) \n{\n    if (strings.length == 0) {\n        return\
    \ null;\n    }\n    var maxLength = 0;\n    var maxString = \"\";\n    for (var\
    \ i = startIndex; i < endIndex; ++i) {\n        var length = strings[i].length;\n\
    \        if (length > maxLength) {\n            maxLength = length;\n        \
    \    maxString = strings[i];\n        }\n    }\n    return maxString;\n}\n/*\n\
    \ Out of list of strings, return the longest one. Return the first one in case\
    \ of multiple\n    strings of the same length. Return None in case the input list\
    \ is empty.\n                \n*/\nNullable!(string) longest(string[] strings,\
    \ char separator) \n{\n    if (strings.length == 0) {\n        return null;\n\
    \    }\n    var maxLength = 0;\n    var maxString = \"\";\n    for (var i = 0;\
    \ i <strings.length; ++i) {\n        var length = strings[i].length;\n       \
    \ if (length > maxLength) {\n            maxLength = length;\n            maxString\
    \ = strings[i];\n        }\n    }\n    return maxString;\n}\n/*\n Out of list\
    \ of strings, return the longest one. Return the first one in case of multiple\n\
    \    strings of the same length. Return None in case the input list is empty.\n\
    \                \n*/\nNullable!(string) longest(string[] strings, char separator,\
    \ int startIndex) \n{\n    if (strings.length == 0) {\n        return null;\n\
    \    }\n    var maxLength = 0;\n    var maxString = \"\";\n    for (var i = startIndex;\
    \ i < strings.length; ++i) {\n        var length = strings[i].length;\n      \
    \  if (length > maxLength) {\n            maxLength = length;\n            maxString\
    \ = strings[i];\n        }\n    }\n    return maxString;\n\nunittest\n{\n    alias\
    \ candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpw3bd0phf.d(108): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpw3bd0phf.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    int? maxLength = null;\n\
    \    foreach (string s in strings) {\n        if (maxLength == null || s.length()\
    \ > maxLength.Value()) {\n            maxLength = s.length;\n        }\n    }\n\
    \    return maxLength;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n\
    \        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n\
    \        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpa08odksy.d(10): Error: no identifier for declarator int\n/tmp/tmpa08odksy.d(10):
    Error: found \''?\'' instead of statement\n/tmp/tmpa08odksy.d(11): Error: found
    \''in\'' when expecting \'';\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpa08odksy.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach(string; strings)\
    \ \n    {\n        if(string.length == strings.length) \n        {\n         \
    \   return string;\n        }\n    }\n    return null;\n}\nunittest\n{\n    alias\
    \ candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpc2rcqd_2.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    var maxLength = 0;\n\
    \    var maxString = \"\";\n    foreach(var s in strings) {\n        var length\
    \ = s.length();\n        if(length > maxLength) {\n            maxLength = length;\n\
    \            maxString = s;\n        }\n    }\n    return maxString;\n}\nunittest\n\
    {\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpf1asstjx.d(12): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpf1asstjx.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach(string; strings)\
    \ {\n        if(string.length > longest.length)\n            longest = string;\n\
    \    }\n    return longest;\n}\n/*\n Out of list of strings, return the longest\
    \ one. Return the first one in case of multiple\n    strings of the same length.\
    \ Return None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int startIndex) \n{\n    foreach(string; strings)\
    \ {\n        if(string.length > longest.length)\n            longest = string;\n\
    \    }\n    return longest;\n}\n/*\n Out of list of strings, return the longest\
    \ one. Return the first one in case of multiple\n    strings of the same length.\
    \ Return None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int startIndex, int endIndex) \n{\n    foreach(string;\
    \ strings) {\n        if(string.length > longest.length)\n            longest\
    \ = string;\n    }\n    return longest;\n}\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings, char character) \n{\n    foreach(string;\
    \ strings) {\n        if(string.length > longest.length)\n            longest\
    \ = string;\n    }\n    return longest;\n}\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings, char character, int startIndex)\
    \ \n{\n    foreach(string; strings) {\n        if(string.length > longest.length)\n\
    \            longest = string;\n    }\n    return longest;\n}\n/*\n Out of list\
    \ of strings, return the longest one. Return the first one in case of multiple\n\
    \    strings of the same length. Return None in case the input list is empty.\n\
    \                \n*/\nNullable!(string) longest(string[] strings, char character,\
    \ int startIndex, int endIndex) \n{\n    foreach(string; strings) {\n        if(string.length\
    \ > longest.length)\n            longest = string;\n    }\n    return longest;\n\
    }\n/*\n Out of list of strings, return the longest one. Return the first one in\
    \ case of multiple\n    strings of the same length. Return None in case the input\
    \ list is empty.\n                \n*/\nNullable!(string) longest(string[] strings,\
    \ char character, int startIndex, int endIndex, bool caseSensitive) \n{\n    foreach(string;\
    \ strings) {\n        if(string.length > longest.length)\n\nunittest\n{\n    alias\
    \ candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpb67tkj6s.d(91): Error: found \''unittest\'' instead of statement\n/tmp/tmpb67tkj6s.d(111):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpb67tkj6s.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    var longest = strings[0];\n\
    \    var longestLength = longest.length;\n    for(var i = 1; i < strings.length;\
    \ ++i)\n    {\n        var s = strings[i];\n        var length = s.length;\n \
    \       if(length > longestLength)\n        {\n            longest = s;\n    \
    \        longestLength = length;\n        }\n    }\n    return longest;\n}\nunittest\n\
    {\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvsc_n_it.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length ==\
    \ 0) {\n        return null;\n    }\n    var longest = strings[0];\n    for (var\
    \ i = 1; i < strings.length; i++) {\n        if (strings[i].length >= longest.length)\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest;\n\
    }\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpca6jy3jt.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach(string s in strings)\n\
    \    {\n        if(s.length() > longest.length)\n            longest = s;\n  \
    \  }\n    return longest;\n}\n/*\n Out of list of strings, return the longest\
    \ one. Return the first one in case of multiple\n    strings of the same length.\
    \ Return None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int start) \n{\n    foreach(string s in strings)\n\
    \    {\n        if(s.length() > longest.length)\n            longest = s;\n  \
    \  }\n    return longest;\n}\n/*\n Out of list of strings, return the longest\
    \ one. Return the first one in case of multiple\n    strings of the same length.\
    \ Return None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int start, int end) \n{\n    foreach(string s in strings)\n\
    \    {\n        if(s.length() > longest.length)\n            longest = s;\n  \
    \  }\n    return longest;\n}\n/*\n Out of list of strings, return the longest\
    \ one. Return the first one in case of multiple\n    strings of the same length.\
    \ Return None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int start, int end, int step) \n{\n    foreach(string\
    \ s in strings)\n    {\n        if(s.length() > longest.length)\n            longest\
    \ = s;\n    }\n    return longest;\n}\n/*\n Out of list of strings, return the\
    \ longest one. Return the first one in case of multiple\n    strings of the same\
    \ length. Return None in case the input list is empty.\n                \n*/\n\
    Nullable!(string) longest(string[] strings, int start, int end, int step, string\
    \ separator) \n{\n    foreach(string s in strings)\n    {\n        if(s.length()\
    \ > longest.length)\n            longest = s;\n    }\n    return longest;\n}\n\
    /*\n Out of list of strings, return the longest one. Return the first one in case\
    \ of multiple\n    strings of the same length. Return None in case the input list\
    \ is empty.\n                \n*/\nNullable!(string) longest(string[] strings,\
    \ int start, int end, int step, string separator, int startIndex) \n{\n    foreach(string\
    \ s in strings)\n    {\n        if(s.length() > longest.length)\n            longest\
    \ = s;\n    }\n    return longest;\n}\n/*\n Out of list of strings, return the\
    \ longest one. Return the first one in case of multiple\n    strings of the same\
    \ length. Return None in case the input list is empty.\n                \n*/\n\
    Nullable!(string) longest(string[] strings, int start, int end, int step, string\
    \ separator, int \nunittest\n{\n    alias candidate = longest;\n\n{\n        auto\
    \ result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull &&\
    \ result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\"\
    , \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get\
    \ == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpf9ob89fl.d(10): Error: found \''in\'' when expecting \'';\''\n/tmp/tmpf9ob89fl.d(24):
    Error: found \''in\'' when expecting \'';\''\n/tmp/tmpf9ob89fl.d(38): Error: found
    \''in\'' when expecting \'';\''\n/tmp/tmpf9ob89fl.d(52): Error: found \''in\''
    when expecting \'';\''\n/tmp/tmpf9ob89fl.d(66): Error: found \''in\'' when expecting
    \'';\''\n/tmp/tmpf9ob89fl.d(80): Error: found \''in\'' when expecting \'';\''\n/tmp/tmpf9ob89fl.d(93):
    Error: found \''unittest\'' when expecting \'')\''\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpf9ob89fl.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach(string; strings)\n\
    \    {\n        if(string.length == strings.length)\n            return string;\n\
    \    }\n    return null;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n\
    \        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n\
    \        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp25phvwj2.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach(string s in strings)\
    \ {\n        if(s.length() > longest.length)\n            longest = s;\n    }\n\
    \    return longest;\n}\n/*\n Out of list of strings, return the longest one.\
    \ Return the first one in case of multiple\n    strings of the same length. Return\
    \ None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int startIndex) \n{\n    foreach(string s in strings)\
    \ {\n        if(s.length() > longest.length)\n            longest = s;\n    }\n\
    \    return longest;\n}\n/*\n Out of list of strings, return the longest one.\
    \ Return the first one in case of multiple\n    strings of the same length. Return\
    \ None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int startIndex, int endIndex) \n{\n    foreach(string\
    \ s in strings) {\n        if(s.length() > longest.length)\n            longest\
    \ = s;\n    }\n    return longest;\n}\n/*\n Out of list of strings, return the\
    \ longest one. Return the first one in case of multiple\n    strings of the same\
    \ length. Return None in case the input list is empty.\n                \n*/\n\
    Nullable!(string) longest(string[] strings, char separator) \n{\n    foreach(string\
    \ s in strings) {\n        if(s.length() > longest.length)\n            longest\
    \ = s;\n    }\n    return longest;\n}\n/*\n Out of list of strings, return the\
    \ longest one. Return the first one in case of multiple\n    strings of the same\
    \ length. Return None in case the input list is empty.\n                \n*/\n\
    Nullable!(string) longest(string[] strings, char separator, int startIndex) \n\
    {\n    foreach(string s in strings) {\n        if(s.length() > longest.length)\n\
    \            longest = s;\n    }\n    return longest;\n}\n/*\n Out of list of\
    \ strings, return the longest one. Return the first one in case of multiple\n\
    \    strings of the same length. Return None in case the input list is empty.\n\
    \                \n*/\nNullable!(string) longest(string[] strings, char separator,\
    \ int startIndex, int endIndex) \n{\n    foreach(string s in strings) {\n    \
    \    if(s.length() > longest.length)\n            longest = s;\n    }\n    return\
    \ longest;\n}\n/*\n Out of list of strings, return the longest one. Return the\
    \ first one in case of multiple\n    strings of the same length. Return None in\
    \ case the input list is empty.\n                \n*/\nNullable!(string) longest(string[]\
    \ strings, char separator, char otherSeparator) \n{\n    foreach(string s in strings)\
    \ {\n        if(s.length() > longest.length)\n            longest = \nunittest\n\
    {\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpnpn0sscw.d(10): Error: found \''in\'' when expecting \'';\''\n/tmp/tmpnpn0sscw.d(23):
    Error: found \''in\'' when expecting \'';\''\n/tmp/tmpnpn0sscw.d(36): Error: found
    \''in\'' when expecting \'';\''\n/tmp/tmpnpn0sscw.d(49): Error: found \''in\''
    when expecting \'';\''\n/tmp/tmpnpn0sscw.d(62): Error: found \''in\'' when expecting
    \'';\''\n/tmp/tmpnpn0sscw.d(75): Error: found \''in\'' when expecting \'';\''\n/tmp/tmpnpn0sscw.d(88):
    Error: found \''in\'' when expecting \'';\''\n/tmp/tmpnpn0sscw.d(91): Error: expression
    expected, not \''unittest\''\n/tmp/tmpnpn0sscw.d(92): Error: found \''{\'' when
    expecting \'';\'' following statement\n/tmp/tmpnpn0sscw.d(111): Error: found \''EOF\''
    when expecting \''}\'' following compound statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpnpn0sscw.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach(string; strings)\
    \ {\n        if(string.length > longest.length)\n            longest = string;\n\
    \    }\n    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\n\
    {\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n\
    {\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqpklbg5c.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach(string s in strings)\n\
    \    {\n        if(s.length() > longest.length)\n        {\n            longest\
    \ = s;\n        }\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate\
    \ = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_mw2m4tj.d(10): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp_mw2m4tj.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    int? maxLength = null;\n\
    \    foreach(string? s in strings) {\n        if (maxLength == null || s.length()\
    \ > maxLength) {\n            maxLength = s.length;\n        }\n    }\n    return\
    \ maxLength;\n}\n/*\n Out of list of strings, return the longest one. Return the\
    \ first one in case of multiple\n    strings of the same length. Return None in\
    \ case the input list is empty.\n                \n*/\nNullable!(string) longest(string[]\
    \ strings, int length) \n{\n    int? maxLength = null;\n    foreach(string? s\
    \ in strings) {\n        if (maxLength == null || s.length() > maxLength) {\n\
    \            maxLength = s.length;\n        }\n    }\n    return maxLength;\n\
    }\n/*\n Out of list of strings, return the longest one. Return the first one in\
    \ case of multiple\n    strings of the same length. Return None in case the input\
    \ list is empty.\n                \n*/\nNullable!(string) longest(string[] strings,\
    \ string length) \n{\n    int? maxLength = null;\n    foreach(string? s in strings)\
    \ {\n        if (maxLength == null || s.length() > maxLength) {\n            maxLength\
    \ = s.length;\n        }\n    }\n    return maxLength;\n}\n/*\n Out of list of\
    \ strings, return the longest one. Return the first one in case of multiple\n\
    \    strings of the same length. Return None in case the input list is empty.\n\
    \                \n*/\nNullable!(string) longest(string[] strings, char length)\
    \ \n{\n    int? maxLength = null;\n    foreach(string? s in strings) {\n     \
    \   if (maxLength == null || s.length() > maxLength) {\n            maxLength\
    \ = s.length;\n        }\n    }\n    return maxLength;\n}\n/*\n Out of list of\
    \ strings, return the longest one. Return the first one in case of multiple\n\
    \    strings of the same length. Return None in case the input list is empty.\n\
    \                \n*/\nNullable!(string) longest(string[] strings, char length,\
    \ int start) \n{\n    int? maxLength = null;\n    foreach(string? s in strings)\
    \ {\n        if (maxLength == null || s.length() > maxLength) {\n            maxLength\
    \ = s.length;\n        }\n    }\n    return maxLength;\n}\n/*\n Out of list of\
    \ strings, return the longest one. Return the first one in case of multiple\n\
    \    strings of the same length. Return None in case the input list is empty.\n\
    \                \n*/\nNullable!(string) longest(string[] strings, char length,\
    \ int start, int end) \n{\n    int? maxLength = null;\n    foreach(string? s in\
    \ strings) {\n        if (maxLength == null || s.length() > maxLength) {\n   \
    \         maxLength = s.length;\n        }\n    }\n    return maxLength;\n}\n\
    /*\n \nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result =\
    \ candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto result\
    \ = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull && result.get\
    \ == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\"\
    , \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get ==\
    \ \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpvpuobhf7.d(10): Error: no identifier for declarator int\n/tmp/tmpvpuobhf7.d(10):
    Error: found \''?\'' instead of statement\n/tmp/tmpvpuobhf7.d(11): Error: no identifier
    for declarator string\n/tmp/tmpvpuobhf7.d(11): Error: found \''?\'' when expecting
    \'';\''\n/tmp/tmpvpuobhf7.d(25): Error: no identifier for declarator int\n/tmp/tmpvpuobhf7.d(25):
    Error: found \''?\'' instead of statement\n/tmp/tmpvpuobhf7.d(26): Error: no identifier
    for declarator string\n/tmp/tmpvpuobhf7.d(26): Error: found \''?\'' when expecting
    \'';\''\n/tmp/tmpvpuobhf7.d(40): Error: no identifier for declarator int\n/tmp/tmpvpuobhf7.d(40):
    Error: found \''?\'' instead of statement\n/tmp/tmpvpuobhf7.d(41): Error: no identifier
    for declarator string\n/tmp/tmpvpuobhf7.d(41): Error: found \''?\'' when expecting
    \'';\''\n/tmp/tmpvpuobhf7.d(55): Error: no identifier for declarator int\n/tmp/tmpvpuobhf7.d(55):
    Error: found \''?\'' instead of statement\n/tmp/tmpvpuobhf7.d(56): Error: no identifier
    for declarator string\n/tmp/tmpvpuobhf7.d(56): Error: found \''?\'' when expecting
    \'';\''\n/tmp/tmpvpuobhf7.d(70): Error: no identifier for declarator int\n/tmp/tmpvpuobhf7.d(70):
    Error: found \''?\'' instead of statement\n/tmp/tmpvpuobhf7.d(71): Error: no identifier
    for declarator string\n/tmp/tmpvpuobhf7.d(71): Error: found \''?\'' when expecting
    \'';\''\n/tmp/tmpvpuobhf7.d(85): Error: no identifier for declarator int\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvpuobhf7.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    int? maxLength = null;\n\
    \    foreach(string? s in strings) {\n        int length = s.length();\n     \
    \   if (maxLength == null || maxLength.Value < length) {\n            maxLength\
    \ = length;\n        }\n    }\n    return maxLength;\n}\n/*\n Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return None in case the input list is empty.\n         \
    \       \n*/\nNullable!(string) longest(string[] strings, int lengthLimit) \n\
    {\n    int? maxLength = null;\n    foreach(string? s in strings) {\n        int\
    \ length = s.length();\n        if (maxLength == null || maxLength.Value < length)\
    \ {\n            maxLength = length;\n        }\n        if (length >= lengthLimit)\
    \ {\n            return s;\n        }\n    }\n    return maxLength;\n}\n/*\n Out\
    \ of list of strings, return the longest one. Return the first one in case of\
    \ multiple\n    strings of the same length. Return None in case the input list\
    \ is empty.\n                \n*/\nNullable!(string) longest(string[] strings,\
    \ int lengthLimit, int maxLength) \n{\n    int? maxLength = null;\n    foreach(string?\
    \ s in strings) {\n        int length = s.length();\n        if (maxLength ==\
    \ null || maxLength.Value < length) {\n            maxLength = length;\n     \
    \   }\n        if (length >= lengthLimit) {\n            return s;\n        }\n\
    \        if (maxLength == null || maxLength.Value > length) {\n            maxLength\
    \ = length;\n        }\n    }\n    return maxLength;\n}\n/*\n Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return None in case the input list is empty.\n         \
    \       \n*/\nNullable!(string) longest(string[] strings, int lengthLimit, int\
    \ maxLength, int minLength) \n{\n    int? maxLength = null;\n    foreach(string?\
    \ s in strings) {\n        int length = s.length();\n        if (maxLength ==\
    \ null || maxLength.Value < length) {\n            maxLength = length;\n     \
    \   }\n        if (length >= lengthLimit) {\n            return s;\n        }\n\
    \        if (maxLength == null || maxLength.Value > length) {\n            maxLength\
    \ = length;\n        }\n        if (length < minLength) {\n            return\
    \ s;\n        }\n    }\n    return maxLength;\n}\n/*\n Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return None in case the input list is empty.\n         \
    \       \n*/\nNullable!(string) longest(string[] strings, int lengthLimit, int\
    \ maxLength, int minLength, int maxCount) \n{\n    int? maxLength = null;\n  \
    \  foreach(string? s in \nunittest\n{\n    alias candidate = longest;\n\n{\n \
    \       auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n\
    \        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpj0fihopr.d(10): Error: no identifier for declarator int\n/tmp/tmpj0fihopr.d(10):
    Error: found \''?\'' instead of statement\n/tmp/tmpj0fihopr.d(11): Error: no identifier
    for declarator string\n/tmp/tmpj0fihopr.d(11): Error: found \''?\'' when expecting
    \'';\''\n/tmp/tmpj0fihopr.d(26): Error: no identifier for declarator int\n/tmp/tmpj0fihopr.d(26):
    Error: found \''?\'' instead of statement\n/tmp/tmpj0fihopr.d(27): Error: no identifier
    for declarator string\n/tmp/tmpj0fihopr.d(27): Error: found \''?\'' when expecting
    \'';\''\n/tmp/tmpj0fihopr.d(45): Error: no identifier for declarator int\n/tmp/tmpj0fihopr.d(45):
    Error: found \''?\'' instead of statement\n/tmp/tmpj0fihopr.d(46): Error: no identifier
    for declarator string\n/tmp/tmpj0fihopr.d(46): Error: found \''?\'' when expecting
    \'';\''\n/tmp/tmpj0fihopr.d(67): Error: no identifier for declarator int\n/tmp/tmpj0fihopr.d(67):
    Error: found \''?\'' instead of statement\n/tmp/tmpj0fihopr.d(68): Error: no identifier
    for declarator string\n/tmp/tmpj0fihopr.d(68): Error: found \''?\'' when expecting
    \'';\''\n/tmp/tmpj0fihopr.d(92): Error: no identifier for declarator int\n/tmp/tmpj0fihopr.d(92):
    Error: found \''?\'' instead of statement\n/tmp/tmpj0fihopr.d(93): Error: no identifier
    for declarator string\n/tmp/tmpj0fihopr.d(93): Error: found \''?\'' when expecting
    \'';\''\n/tmp/tmpj0fihopr.d(94): Error: expression expected, not \''unittest\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpj0fihopr.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    var longest = strings[0];\n\
    \    var longestLength = longest.length;\n    for(var i = 1; i < strings.length;\
    \ ++i)\n    {\n        var s = strings[i];\n        if(s.length != longestLength)\n\
    \        {\n            return longest;\n        }\n        if(s.compare(longest)\
    \ > 0)\n        {\n            longest = s;\n            longestLength = longest.length;\n\
    \        }\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate =\
    \ longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmplhcsw0c4.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach(string; strings)\
    \ \n    {\n        if(string.length > longest.length) longest = string;\n    }\n\
    \    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n  \
    \      auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n\
    \        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzfiio8yy.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    var longest = strings[0];\n\
    \    var longestLength = longest.length;\n    for(var i = 1; i < strings.length;\
    \ ++i)\n    {\n        var s = strings[i];\n        if(s.length != longestLength)\n\
    \        {\n            return longest;\n        }\n        if(s.compare(longest)\
    \ > 0)\n        {\n            longest = s;\n            longestLength = s.length;\n\
    \        }\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate =\
    \ longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpvg65xfh4.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    int? maxLength = null;\n\
    \    foreach (string s in strings) {\n        if (maxLength == null || s.length()\
    \ > maxLength.Value()) {\n            maxLength = s.length;\n        }\n    }\n\
    \    return maxLength;\n}\n/*\n Out of list of strings, return the longest one.\
    \ Return the first one in case of multiple\n    strings of the same length. Return\
    \ None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int maxLength) \n{\n    foreach (string s in strings)\
    \ {\n        if (s.length() > maxLength) {\n            return s;\n        }\n\
    \    }\n    return null;\n}\n/*\n Out of list of strings, return the longest one.\
    \ Return the first one in case of multiple\n    strings of the same length. Return\
    \ None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int maxLength, int startIndex) \n{\n    foreach (string\
    \ s in strings) {\n        if (s.length() > maxLength) {\n            return s;\n\
    \        }\n    }\n    return null;\n}\n/*\n Out of list of strings, return the\
    \ longest one. Return the first one in case of multiple\n    strings of the same\
    \ length. Return None in case the input list is empty.\n                \n*/\n\
    Nullable!(string) longest(string[] strings, int maxLength, int startIndex, int\
    \ endIndex) \n{\n    foreach (string s in strings) {\n        if (s.length() >\
    \ maxLength) {\n            return s;\n        }\n    }\n    return null;\n}\n\
    /*\n Out of list of strings, return the longest one. Return the first one in case\
    \ of multiple\n    strings of the same length. Return None in case the input list\
    \ is empty.\n                \n*/\nNullable!(string) longest(string[] strings,\
    \ int maxLength, int startIndex, int endIndex, int maxLength) \n{\n    foreach\
    \ (string s in strings) {\n        if (s.length() > maxLength) {\n           \
    \ return s;\n        }\n    }\n    return null;\n}\n/*\n Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return None in case the input list is empty.\n         \
    \       \n*/\nNullable!(string) longest(string[] strings, int maxLength, int startIndex,\
    \ int endIndex, int maxLength, int startIndex) \n{\n    foreach (string s in strings)\
    \ {\n        if (s.length() > maxLength) {\n            return s;\n        }\n\
    \    }\n    return null;\n}\n/*\n Out of list of strings, return the longest one.\
    \ Return the first one in case of multiple\n    strings of the same length. Return\
    \ None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int maxLength\nunittest\n{\n    alias candidate =\
    \ longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8dff8ne2.d(10): Error: no identifier for declarator int\n/tmp/tmp8dff8ne2.d(10):
    Error: found \''?\'' instead of statement\n/tmp/tmp8dff8ne2.d(11): Error: found
    \''in\'' when expecting \'';\''\n/tmp/tmp8dff8ne2.d(25): Error: found \''in\''
    when expecting \'';\''\n/tmp/tmp8dff8ne2.d(39): Error: found \''in\'' when expecting
    \'';\''\n/tmp/tmp8dff8ne2.d(53): Error: found \''in\'' when expecting \'';\''\n/tmp/tmp8dff8ne2.d(67):
    Error: found \''in\'' when expecting \'';\''\n/tmp/tmp8dff8ne2.d(81): Error: found
    \''in\'' when expecting \'';\''\n/tmp/tmp8dff8ne2.d(94): Error: found \''unittest\''
    when expecting \'')\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8dff8ne2.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach (string s in\
    \ strings) {\n        if (s.length() > longest.length)\n            longest =\
    \ s;\n    }\n    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpybbdln8p.d(10): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpybbdln8p.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach (string s in\
    \ strings) {\n        if (s.length() > longest.length)\n            longest =\
    \ s;\n    }\n    return longest;\n}\n/*\n Out of list of strings, return the longest\
    \ one. Return the first one in case of multiple\n    strings of the same length.\
    \ Return None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int startIndex) \n{\n    foreach (string s in strings)\
    \ {\n        if (s.length() > longest.length)\n            longest = s;\n    }\n\
    \    return longest;\n}\n/*\n Out of list of strings, return the longest one.\
    \ Return the first one in case of multiple\n    strings of the same length. Return\
    \ None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int startIndex, int endIndex) \n{\n    foreach (string\
    \ s in strings) {\n        if (s.length() > longest.length)\n            longest\
    \ = s;\n    }\n    return longest;\n}\n/*\n Out of list of strings, return the\
    \ longest one. Return the first one in case of multiple\n    strings of the same\
    \ length. Return None in case the input list is empty.\n                \n*/\n\
    Nullable!(string) longest(string[] strings, char separator) \n{\n    foreach (string\
    \ s in strings) {\n        if (s.length() > longest.length)\n            longest\
    \ = s;\n    }\n    return longest;\n}\n/*\n Out of list of strings, return the\
    \ longest one. Return the first one in case of multiple\n    strings of the same\
    \ length. Return None in case the input list is empty.\n                \n*/\n\
    Nullable!(string) longest(string[] strings, char separator, int startIndex) \n\
    {\n    foreach (string s in strings) {\n        if (s.length() > longest.length)\n\
    \            longest = s;\n    }\n    return longest;\n}\n/*\n Out of list of\
    \ strings, return the longest one. Return the first one in case of multiple\n\
    \    strings of the same length. Return None in case the input list is empty.\n\
    \                \n*/\nNullable!(string) longest(string[] strings, char separator,\
    \ int startIndex, int endIndex) \n{\n    foreach (string s in strings) {\n   \
    \     if (s.length() > longest.length)\n            longest = s;\n    }\n    return\
    \ longest;\n}\n/*\n Out of list of strings, return the longest one. Return the\
    \ first one in case of multiple\n    strings of the same length. Return None in\
    \ case the input list is empty.\n                \n*/\nNullable!(string) longest(string[]\
    \ strings, char separator, char otherSeparator) \n{\n    foreach (string s in\
    \ strings) {\n        if (s.length() > longest.length)\n            longest =\
    \ s;\n    }\n    return longest;\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpwppyoshf.d(10): Error: found \''in\'' when expecting \'';\''\n/tmp/tmpwppyoshf.d(23):
    Error: found \''in\'' when expecting \'';\''\n/tmp/tmpwppyoshf.d(36): Error: found
    \''in\'' when expecting \'';\''\n/tmp/tmpwppyoshf.d(49): Error: found \''in\''
    when expecting \'';\''\n/tmp/tmpwppyoshf.d(62): Error: found \''in\'' when expecting
    \'';\''\n/tmp/tmpwppyoshf.d(75): Error: found \''in\'' when expecting \'';\''\n/tmp/tmpwppyoshf.d(88):
    Error: found \''in\'' when expecting \'';\''\n/tmp/tmpwppyoshf.d(93): Error: found
    \''unittest\'' instead of statement\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpwppyoshf.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    int? maxLength = null;\n\
    \    foreach (string s in strings) {\n        if (maxLength == null || s.length()\
    \ > maxLength.Value()) {\n            maxLength = s.length;\n        }\n    }\n\
    \    return maxLength;\n}\n/*\n Out of list of strings, return the longest one.\
    \ Return the first one in case of multiple\n    strings of the same length. Return\
    \ None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int maxLength) \n{\n    int? maxLength = null;\n \
    \   foreach (string s in strings) {\n        if (maxLength == null || s.length()\
    \ > maxLength.Value()) {\n            maxLength = s.length;\n        }\n    }\n\
    \    return maxLength;\n}\n/*\n Out of list of strings, return the longest one.\
    \ Return the first one in case of multiple\n    strings of the same length. Return\
    \ None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int maxLength, int startIndex) \n{\n    int? maxLength\
    \ = null;\n    foreach (string s in strings) {\n        if (maxLength == null\
    \ || s.length() > maxLength.Value()) {\n            maxLength = s.length;\n  \
    \      }\n    }\n    return maxLength;\n}\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings, int maxLength, int startIndex,\
    \ int endIndex) \n{\n    int? maxLength = null;\n    foreach (string s in strings)\
    \ {\n        if (maxLength == null || s.length() > maxLength.Value()) {\n    \
    \        maxLength = s.length;\n        }\n    }\n    return maxLength;\n}\n/*\n\
    \ Out of list of strings, return the longest one. Return the first one in case\
    \ of multiple\n    strings of the same length. Return None in case the input list\
    \ is empty.\n                \n*/\nNullable!(string) longest(string[] strings,\
    \ int maxLength, int startIndex, int endIndex, int maxLength) \n{\n    int? maxLength\
    \ = null;\n    foreach (string s in strings) {\n        if (maxLength == null\
    \ || s.length() > maxLength.Value()) {\n            maxLength = s.length;\n  \
    \      }\n    }\n    return maxLength;\n}\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings, int maxLength, int startIndex,\
    \ int endIndex, int maxLength, int startIndex) \n{\n    int? maxLength = null;\n\
    \    foreach (string \nunittest\n{\n    alias candidate = longest;\n\n{\n    \
    \    auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n  \
    \      auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmphvobgj3p.d(10): Error: no identifier for declarator int\n/tmp/tmphvobgj3p.d(10):
    Error: found \''?\'' instead of statement\n/tmp/tmphvobgj3p.d(11): Error: found
    \''in\'' when expecting \'';\''\n/tmp/tmphvobgj3p.d(25): Error: no identifier
    for declarator int\n/tmp/tmphvobgj3p.d(25): Error: found \''?\'' instead of statement\n/tmp/tmphvobgj3p.d(26):
    Error: found \''in\'' when expecting \'';\''\n/tmp/tmphvobgj3p.d(40): Error: no
    identifier for declarator int\n/tmp/tmphvobgj3p.d(40): Error: found \''?\'' instead
    of statement\n/tmp/tmphvobgj3p.d(41): Error: found \''in\'' when expecting \'';\''\n/tmp/tmphvobgj3p.d(55):
    Error: no identifier for declarator int\n/tmp/tmphvobgj3p.d(55): Error: found
    \''?\'' instead of statement\n/tmp/tmphvobgj3p.d(56): Error: found \''in\'' when
    expecting \'';\''\n/tmp/tmphvobgj3p.d(70): Error: no identifier for declarator
    int\n/tmp/tmphvobgj3p.d(70): Error: found \''?\'' instead of statement\n/tmp/tmphvobgj3p.d(71):
    Error: found \''in\'' when expecting \'';\''\n/tmp/tmphvobgj3p.d(85): Error: no
    identifier for declarator int\n/tmp/tmphvobgj3p.d(85): Error: found \''?\'' instead
    of statement\n/tmp/tmphvobgj3p.d(87): Error: no identifier for declarator string\n/tmp/tmphvobgj3p.d(87):
    Error: found \''unittest\'' when expecting \'';\''\n/tmp/tmphvobgj3p.d(107): Error:
    found \''void\'' when expecting \'')\''\n/tmp/tmphvobgj3p.d(107): Error: found
    \''{\'' when expecting \'';\'' following statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmphvobgj3p.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach(string; strings)\
    \ {\n        if(string.length > longest.length)\n            longest = string;\n\
    \    }\n    return longest;\n}\n/*\n Out of list of strings, return the longest\
    \ one. Return the first one in case of multiple\n    strings of the same length.\
    \ Return None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings) \n{\n    foreach(string; strings) {\n        if(string.length\
    \ > longest.length)\n            longest = string;\n    }\n    return longest;\n\
    }\n/*\n Out of list of strings, return the longest one. Return the first one in\
    \ case of multiple\n    strings of the same length. Return None in case the input\
    \ list is empty.\n                \n*/\nNullable!(string) longest(string[] strings)\
    \ \n{\n    foreach(string; strings) {\n        if(string.length > longest.length)\n\
    \            longest = string;\n    }\n    return longest;\n}\n/*\n Out of list\
    \ of strings, return the longest one. Return the first one in case of multiple\n\
    \    strings of the same length. Return None in case the input list is empty.\n\
    \                \n*/\nNullable!(string) longest(string[] strings) \n{\n    foreach(string;\
    \ strings) {\n        if(string.length > longest.length)\n            longest\
    \ = string;\n    }\n    return longest;\n}\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach(string; strings)\
    \ {\n        if(string.length > longest.length)\n            longest = string;\n\
    \    }\n    return longest;\n}\n/*\n Out of list of strings, return the longest\
    \ one. Return the first one in case of multiple\n    strings of the same length.\
    \ Return None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings) \n{\n    foreach(string; strings) {\n        if(string.length\
    \ > longest.length)\n            longest = string;\n    }\n    return longest;\n\
    }\n/*\n Out of list of strings, return the longest one. Return the first one in\
    \ case of multiple\n    strings of the same length. Return None in case the input\
    \ list is empty.\n                \n*/\nNullable!(string) longest(string[] strings)\
    \ \n{\n    foreach(string; strings) {\n        if(string.length > longest.length)\n\
    \            longest = string;\n    }\n    return longest;\n}\n/*\n Out of list\
    \ of strings, return the longest one. Return the first one in case of multiple\n\
    \    strings of the same length. Return None \nunittest\n{\n    alias candidate\
    \ = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_ep395rc.d(94): Error: unterminated /* */ comment\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp_ep395rc.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach (string s in\
    \ strings) {\n        if (s.length() > longest.length)\n            longest =\
    \ s;\n    }\n    return longest;\n}\n/*\n Out of list of strings, return the longest\
    \ one. Return the first one in case of multiple\n    strings of the same length.\
    \ Return None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int startIndex) \n{\n    foreach (string s in strings)\
    \ {\n        if (s.length() > longest.length)\n            longest = s;\n    }\n\
    \    return longest;\n}\n/*\n Out of list of strings, return the longest one.\
    \ Return the first one in case of multiple\n    strings of the same length. Return\
    \ None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int startIndex, int endIndex) \n{\n    foreach (string\
    \ s in strings) {\n        if (s.length() > longest.length)\n            longest\
    \ = s;\n    }\n    return longest;\n}\n/*\n Out of list of strings, return the\
    \ longest one. Return the first one in case of multiple\n    strings of the same\
    \ length. Return None in case the input list is empty.\n                \n*/\n\
    Nullable!(string) longest(string[] strings, char character) \n{\n    foreach (string\
    \ s in strings) {\n        if (s.length() > longest.length)\n            longest\
    \ = s;\n    }\n    return longest;\n}\n/*\n Out of list of strings, return the\
    \ longest one. Return the first one in case of multiple\n    strings of the same\
    \ length. Return None in case the input list is empty.\n                \n*/\n\
    Nullable!(string) longest(string[] strings, char character, int startIndex) \n\
    {\n    foreach (string s in strings) {\n        if (s.length() > longest.length)\n\
    \            longest = s;\n    }\n    return longest;\n}\n/*\n Out of list of\
    \ strings, return the longest one. Return the first one in case of multiple\n\
    \    strings of the same length. Return None in case the input list is empty.\n\
    \                \n*/\nNullable!(string) longest(string[] strings, char character,\
    \ int startIndex, int endIndex) \n{\n    foreach (string s in strings) {\n   \
    \     if (s.length() > longest.length)\n            longest = s;\n    }\n    return\
    \ longest;\n}\n/*\n Out of list of strings, return the longest one. Return the\
    \ first one in case of multiple\n    strings of the same length. Return None in\
    \ case the input list is empty.\n                \n*/\nNullable!(string) longest(string[]\
    \ strings, char character, int startIndex, int endIndex, bool caseSensitive) \n\
    {\n    foreach (string s in strings) {\n        if (s.length() > longest.length)\n\
    \nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpscg1t2qx.d(10): Error: found \''in\'' when expecting \'';\''\n/tmp/tmpscg1t2qx.d(23):
    Error: found \''in\'' when expecting \'';\''\n/tmp/tmpscg1t2qx.d(36): Error: found
    \''in\'' when expecting \'';\''\n/tmp/tmpscg1t2qx.d(49): Error: found \''in\''
    when expecting \'';\''\n/tmp/tmpscg1t2qx.d(62): Error: found \''in\'' when expecting
    \'';\''\n/tmp/tmpscg1t2qx.d(75): Error: found \''in\'' when expecting \'';\''\n/tmp/tmpscg1t2qx.d(88):
    Error: found \''in\'' when expecting \'';\''\n/tmp/tmpscg1t2qx.d(91): Error: found
    \''unittest\'' instead of statement\n/tmp/tmpscg1t2qx.d(111): Error: found \''EOF\''
    when expecting \''}\'' following compound statement\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmpscg1t2qx.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    var longest = strings[0];\n\
    \    var longestLength = longest.length;\n    for(var i = 1; i < strings.length;\
    \ ++i)\n    {\n        var s = strings[i];\n        if(s.length == longestLength)\n\
    \        {\n            longest = s;\n        }\n    }\n    return longest;\n\
    }\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpe20mzid1.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    int? maxLength = null;\n\
    \    foreach(string? s in strings) {\n        if (maxLength == null || s.length()\
    \ > maxLength.Value()) {\n            maxLength = s;\n        }\n    }\n    return\
    \ maxLength;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto\
    \ result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull &&\
    \ result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\"\
    , \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get\
    \ == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpct1kg8x5.d(10): Error: no identifier for declarator int\n/tmp/tmpct1kg8x5.d(10):
    Error: found \''?\'' instead of statement\n/tmp/tmpct1kg8x5.d(11): Error: no identifier
    for declarator string\n/tmp/tmpct1kg8x5.d(11): Error: found \''?\'' when expecting
    \'';\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpct1kg8x5.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    int? maxLength = null;\n\
    \    foreach (string s in strings) {\n        if (maxLength == null || s.length()\
    \ > maxLength) {\n            maxLength = s.length;\n        }\n    }\n    return\
    \ maxLength;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto\
    \ result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull &&\
    \ result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\"\
    , \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get\
    \ == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp5lad9ctw.d(10): Error: no identifier for declarator int\n/tmp/tmp5lad9ctw.d(10):
    Error: found \''?\'' instead of statement\n/tmp/tmp5lad9ctw.d(11): Error: found
    \''in\'' when expecting \'';\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp5lad9ctw.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach(string; strings)\
    \ {\n        if(string.length > longest.length)\n            longest = string;\n\
    \    }\n    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\n\
    {\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n\
    {\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqpklbg5c.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length ==\
    \ 0) {\n        return null;\n    }\n    int maxLength = 0;\n    string maxString\
    \ = null;\n    for (string s in strings) {\n        if (s.length() > maxLength)\
    \ {\n            maxLength = s.length();\n            maxString = s;\n       \
    \ }\n    }\n    return maxString;\n}\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbxz92ivt.d(15): Error: semicolon expected, not \''in\''\n/tmp/tmpbxz92ivt.d(15):
    Error: expression expected, not \''in\''\n/tmp/tmpbxz92ivt.d(15): Error: found
    \''strings\'' when expecting \'';\'' following for condition\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmpbxz92ivt.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach(string; strings)\
    \ {\n        if(string.length() > longest.length()) {\n            longest = string;\n\
    \        }\n    }\n    return longest;\n}\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings, int startIndex) \n{\n    foreach(string;\
    \ strings) {\n        if(string.length() > longest.length()) {\n            longest\
    \ = string;\n        }\n    }\n    return longest;\n}\n/*\n Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return None in case the input list is empty.\n         \
    \       \n*/\nNullable!(string) longest(string[] strings, int startIndex, int\
    \ endIndex) \n{\n    foreach(string; strings) {\n        if(string.length() >\
    \ longest.length()) {\n            longest = string;\n        }\n    }\n    return\
    \ longest;\n}\n/*\n Out of list of strings, return the longest one. Return the\
    \ first one in case of multiple\n    strings of the same length. Return None in\
    \ case the input list is empty.\n                \n*/\nNullable!(string) longest(string[]\
    \ strings, char character) \n{\n    foreach(string; strings) {\n        if(string.length()\
    \ > longest.length()) {\n            longest = string;\n        }\n    }\n   \
    \ return longest;\n}\n/*\n Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \n*/\nNullable!(string) longest(string[]\
    \ strings, char character, int startIndex) \n{\n    foreach(string; strings) {\n\
    \        if(string.length() > longest.length()) {\n            longest = string;\n\
    \        }\n    }\n    return longest;\n}\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings, char character, int startIndex,\
    \ int endIndex) \n{\n    foreach(string; strings) {\n        if(string.length()\
    \ > longest.length()) {\n            longest = string;\n        }\n    }\n   \
    \ return longest;\n}\n/*\n Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \n*/\nNullable!(string) longest(string[]\
    \ strings, char character, int startIndex, int endIndex, bool caseSensitive\n\
    unittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpwkkwh24d.d(93): Error: found \''unittest\'' when expecting \'')\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwkkwh24d.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach(string; strings)\
    \ {\n        if(string.length == strings.length)\n            return string;\n\
    \    }\n    return None;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n\
    \        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n\
    \        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp22iai38t.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    int? maxLength = null;\n\
    \    foreach(string? s in strings) {\n        if (maxLength == null || s.length()\
    \ > maxLength) {\n            maxLength = s.length();\n        }\n    }\n    return\
    \ maxLength;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto\
    \ result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n        auto\
    \ result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull &&\
    \ result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"yyy\"\
    , \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull && result.get\
    \ == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8kbamswq.d(10): Error: no identifier for declarator int\n/tmp/tmp8kbamswq.d(10):
    Error: found \''?\'' instead of statement\n/tmp/tmp8kbamswq.d(11): Error: no identifier
    for declarator string\n/tmp/tmp8kbamswq.d(11): Error: found \''?\'' when expecting
    \'';\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8kbamswq.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach(string; strings)\
    \ \n    {\n        if(string.length > longest.length) longest = string;\n    }\n\
    \    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n  \
    \      auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n\
    \        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpzfiio8yy.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    var longest:string =\
    \ Null!(string);\n    var longestLength:int = 0;\n    foreach(var s in strings)\
    \ {\n        if(longestLength < s.length) longestLength = s.length;\n        if(longest\
    \ == null || longestLength < s.length) longest = s;\n    }\n    return longest;\n\
    }\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpjl3eslq7.d(10): Error: found \''longest\'' when expecting \'';\''
    following statement\n/tmp/tmpjl3eslq7.d(10): Error: found \'':\'' instead of statement\n/tmp/tmpjl3eslq7.d(11):
    Error: found \''longestLength\'' when expecting \'';\'' following statement\n/tmp/tmpjl3eslq7.d(11):
    Error: found \'':\'' instead of statement\n/tmp/tmpjl3eslq7.d(12): Error: found
    \''in\'' when expecting \'';\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpjl3eslq7.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    var longest = strings[0];\n\
    \    foreach(var s in strings)\n    {\n        if(s.length == longest.length)\n\
    \        {\n            longest = s;\n        }\n    }\n    return longest;\n\
    }\nunittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmph4li9htf.d(11): Error: found \''in\'' when expecting \'';\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmph4li9htf.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    int? maxLength = null;\n\
    \    foreach (string s in strings) {\n        if (maxLength == null || s.length()\
    \ > maxLength.Value()) {\n            maxLength = s.length;\n        }\n    }\n\
    \    return maxLength;\n}\n/*\n Out of list of strings, return the longest one.\
    \ Return the first one in case of multiple\n    strings of the same length. Return\
    \ None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int maxLength) \n{\n    foreach (string s in strings)\
    \ {\n        if (s.length() > maxLength) {\n            maxLength = s.length;\n\
    \        }\n    }\n    return maxLength;\n}\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings, int maxLength, int minLength)\
    \ \n{\n    foreach (string s in strings) {\n        if (s.length() > maxLength)\
    \ {\n            maxLength = s.length;\n        }\n        if (s.length() < minLength)\
    \ {\n            minLength = s.length;\n        }\n    }\n    return maxLength;\n\
    }\n/*\n Out of list of strings, return the longest one. Return the first one in\
    \ case of multiple\n    strings of the same length. Return None in case the input\
    \ list is empty.\n                \n*/\nNullable!(string) longest(string[] strings,\
    \ int maxLength, int minLength, int maxCount) \n{\n    foreach (string s in strings)\
    \ {\n        if (s.length() > maxLength) {\n            maxLength = s.length;\n\
    \        }\n        if (s.length() < minLength) {\n            minLength = s.length;\n\
    \        }\n        if (s.length() > maxCount) {\n            maxCount = s.length;\n\
    \        }\n    }\n    return maxLength;\n}\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings, int maxLength, int minLength,\
    \ int maxCount, int minCount) \n{\n    foreach (string s in strings) {\n     \
    \   if (s.length() > maxLength) {\n            maxLength = s.length;\n       \
    \ }\n        if (s.length() < minLength) {\n            minLength = s.length;\n\
    \        }\n        if (s.length() > maxCount) {\n            maxCount = s.length;\n\
    \        }\n        if (s.length() < minCount) {\n            minCount = s.length;\n\
    \        }\n    }\n    return maxLength;\n}\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpko45e5nw.d(10): Error: no identifier for declarator int\n/tmp/tmpko45e5nw.d(10):
    Error: found \''?\'' instead of statement\n/tmp/tmpko45e5nw.d(11): Error: found
    \''in\'' when expecting \'';\''\n/tmp/tmpko45e5nw.d(25): Error: found \''in\''
    when expecting \'';\''\n/tmp/tmpko45e5nw.d(39): Error: found \''in\'' when expecting
    \'';\''\n/tmp/tmpko45e5nw.d(56): Error: found \''in\'' when expecting \'';\''\n/tmp/tmpko45e5nw.d(76):
    Error: found \''in\'' when expecting \'';\''\n/tmp/tmpko45e5nw.d(98): Error: found
    \''unittest\'' when expecting \'')\''\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpko45e5nw.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach(string; strings)\
    \ {\n        if(string.length == strings.length)\n            return string;\n\
    \    }\n    return null;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n\
    \        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n\
    \        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpp1keq4o4.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach(string; strings)\
    \ {\n        if(string.length > longest.length)\n            longest = string;\n\
    \    }\n    return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\n\
    {\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\n\
    {\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpqpklbg5c.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length ==\
    \ 0)\n        return null;\n    var longest = strings[0];\n    for (var i = 1;\
    \ i < strings.length; ++i) {\n        var length = strings[i].length;\n      \
    \  if (length > longest.length)\n            longest = strings[i];\n    }\n  \
    \  return longest;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n    \
    \    auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n  \
    \      auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''Error: cannot find source code for runtime library file \''object.d\''\n       dmd
    might not be correctly installed. Run \''dmd -man\'' for installation instructions.\nimport
    path[0] = /tmp\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpuhbqx1ml.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach (string s in\
    \ strings) {\n        if (s.length() > longest.length)\n            longest =\
    \ s;\n    }\n    return longest;\n}\n/*\n Out of list of strings, return the longest\
    \ one. Return the first one in case of multiple\n    strings of the same length.\
    \ Return None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int start) \n{\n    foreach (string s in strings)\
    \ {\n        if (s.length() > longest.length)\n            longest = s;\n    }\n\
    \    return longest;\n}\n/*\n Out of list of strings, return the longest one.\
    \ Return the first one in case of multiple\n    strings of the same length. Return\
    \ None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int start, int end) \n{\n    foreach (string s in\
    \ strings) {\n        if (s.length() > longest.length)\n            longest =\
    \ s;\n    }\n    return longest;\n}\n/*\n Out of list of strings, return the longest\
    \ one. Return the first one in case of multiple\n    strings of the same length.\
    \ Return None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int start, int end, int step) \n{\n    foreach (string\
    \ s in strings) {\n        if (s.length() > longest.length)\n            longest\
    \ = s;\n    }\n    return longest;\n}\n/*\n Out of list of strings, return the\
    \ longest one. Return the first one in case of multiple\n    strings of the same\
    \ length. Return None in case the input list is empty.\n                \n*/\n\
    Nullable!(string) longest(string[] strings, int start, int end, int step, string\
    \ separator) \n{\n    foreach (string s in strings) {\n        if (s.length()\
    \ > longest.length)\n            longest = s;\n    }\n    return longest;\n}\n\
    /*\n Out of list of strings, return the longest one. Return the first one in case\
    \ of multiple\n    strings of the same length. Return None in case the input list\
    \ is empty.\n                \n*/\nNullable!(string) longest(string[] strings,\
    \ int start, int end, int step, string separator, int startIndex) \n{\n    foreach\
    \ (string s in strings) {\n        if (s.length() > longest.length)\n        \
    \    longest = s;\n    }\n    return longest;\n}\n/*\n Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return None in case the input list is empty.\n         \
    \       \n*/\nNullable!(string) longest(string[] strings, int start, int end,\
    \ int step, string separator, int startIndex, int endIndex) \n{\n    foreach (string\
    \ s in strings) {\n        if (s.length\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpl5600006.d(10): Error: found \''in\'' when expecting \'';\''\n/tmp/tmpl5600006.d(23):
    Error: found \''in\'' when expecting \'';\''\n/tmp/tmpl5600006.d(36): Error: found
    \''in\'' when expecting \'';\''\n/tmp/tmpl5600006.d(49): Error: found \''in\''
    when expecting \'';\''\n/tmp/tmpl5600006.d(62): Error: found \''in\'' when expecting
    \'';\''\n/tmp/tmpl5600006.d(75): Error: found \''in\'' when expecting \'';\''\n/tmp/tmpl5600006.d(88):
    Error: found \''in\'' when expecting \'';\''\n/tmp/tmpl5600006.d(90): Error: found
    \''unittest\'' when expecting \'')\''\n/tmp/tmpl5600006.d(110): Error: found \''EOF\''
    when expecting \''}\'' following compound statement\n/tmp/tmpl5600006.d(110):
    Error: found \''EOF\'' when expecting \''}\'' following compound statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpl5600006.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach(string s in strings)\
    \ {\n        if(s.length() > longest.length)\n            longest = s;\n    }\n\
    \    return longest;\n}\n/*\n Out of list of strings, return the longest one.\
    \ Return the first one in case of multiple\n    strings of the same length. Return\
    \ None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int startIndex) \n{\n    foreach(string s in strings)\
    \ {\n        if(s.length() > longest.length)\n            longest = s;\n    }\n\
    \    return longest;\n}\n/*\n Out of list of strings, return the longest one.\
    \ Return the first one in case of multiple\n    strings of the same length. Return\
    \ None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int startIndex, int endIndex) \n{\n    foreach(string\
    \ s in strings) {\n        if(s.length() > longest.length)\n            longest\
    \ = s;\n    }\n    return longest;\n}\n/*\n Out of list of strings, return the\
    \ longest one. Return the first one in case of multiple\n    strings of the same\
    \ length. Return None in case the input list is empty.\n                \n*/\n\
    Nullable!(string) longest(string[] strings, char c, int startIndex) \n{\n    foreach(string\
    \ s in strings) {\n        if(s.length() > longest.length)\n            longest\
    \ = s;\n    }\n    return longest;\n}\n/*\n Out of list of strings, return the\
    \ longest one. Return the first one in case of multiple\n    strings of the same\
    \ length. Return None in case the input list is empty.\n                \n*/\n\
    Nullable!(string) longest(string[] strings, char c, int startIndex, int endIndex)\
    \ \n{\n    foreach(string s in strings) {\n        if(s.length() > longest.length)\n\
    \            longest = s;\n    }\n    return longest;\n}\n/*\n Out of list of\
    \ strings, return the longest one. Return the first one in case of multiple\n\
    \    strings of the same length. Return None in case the input list is empty.\n\
    \                \n*/\nNullable!(string) longest(string[] strings, char c, int\
    \ startIndex, int endIndex, bool caseSensitive) \n{\n    foreach(string s in strings)\
    \ {\n        if(s.length() > longest.length)\n            longest = s;\n    }\n\
    \    return longest;\n}\n/*\n Out of list of strings, return the longest one.\
    \ Return the first one in case of multiple\n    strings of the same length. Return\
    \ None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, char c, int startIndex, int endIndex, bool caseSensitive,\
    \ int startIndexInclu\nunittest\n{\n    alias candidate = longest;\n\n{\n    \
    \    auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n  \
    \      auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8u6cxg95.d(10): Error: found \''in\'' when expecting \'';\''\n/tmp/tmp8u6cxg95.d(23):
    Error: found \''in\'' when expecting \'';\''\n/tmp/tmp8u6cxg95.d(36): Error: found
    \''in\'' when expecting \'';\''\n/tmp/tmp8u6cxg95.d(49): Error: found \''in\''
    when expecting \'';\''\n/tmp/tmp8u6cxg95.d(62): Error: found \''in\'' when expecting
    \'';\''\n/tmp/tmp8u6cxg95.d(75): Error: found \''in\'' when expecting \'';\''\n/tmp/tmp8u6cxg95.d(87):
    Error: found \''unittest\'' when expecting \'')\''\nFailed: ["dmd", "-unittest",
    "-v", "-o-", "/tmp/tmp8u6cxg95.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\nunittest\n{\n    alias\
    \ candidate = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpaaeo5791.d(266): Error: found \''unittest\'' instead of statement\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpaaeo5791.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    int? maxLength = null;\n\
    \    foreach (string s in strings) {\n        if (maxLength == null || s.length()\
    \ > maxLength.Value()) {\n            maxLength = s.length;\n        }\n    }\n\
    \    return maxLength;\n}\n/*\n Out of list of strings, return the longest one.\
    \ Return the first one in case of multiple\n    strings of the same length. Return\
    \ None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int maxLength) \n{\n    foreach (string s in strings)\
    \ {\n        if (s.length() > maxLength) {\n            return s;\n        }\n\
    \    }\n    return null;\n}\n/*\n Out of list of strings, return the longest one.\
    \ Return the first one in case of multiple\n    strings of the same length. Return\
    \ None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int maxLength, int startIndex) \n{\n    foreach (string\
    \ s in strings) {\n        if (s.length() > maxLength) {\n            return s;\n\
    \        }\n    }\n    return null;\n}\n/*\n Out of list of strings, return the\
    \ longest one. Return the first one in case of multiple\n    strings of the same\
    \ length. Return None in case the input list is empty.\n                \n*/\n\
    Nullable!(string) longest(string[] strings, int maxLength, int startIndex, int\
    \ endIndex) \n{\n    foreach (string s in strings) {\n        if (s.length() >\
    \ maxLength) {\n            return s;\n        }\n    }\n    return null;\n}\n\
    /*\n Out of list of strings, return the longest one. Return the first one in case\
    \ of multiple\n    strings of the same length. Return None in case the input list\
    \ is empty.\n                \n*/\nNullable!(string) longest(string[] strings,\
    \ int maxLength, int startIndex, int endIndex, int maxLength) \n{\n    foreach\
    \ (string s in strings) {\n        if (s.length() > maxLength) {\n           \
    \ return s;\n        }\n    }\n    return null;\n}\n/*\n Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return None in case the input list is empty.\n         \
    \       \n*/\nNullable!(string) longest(string[] strings, int maxLength, int startIndex,\
    \ int endIndex, int maxLength, int startIndex) \n{\n    foreach (string s in strings)\
    \ {\n        if (s.length() > maxLength) {\n            return s;\n        }\n\
    \    }\n    return null;\n}\n/*\n Out of list of strings, return the longest one.\
    \ Return the first one in case of multiple\n    strings of the same length. Return\
    \ None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int maxLength\nunittest\n{\n    alias candidate =\
    \ longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp8dff8ne2.d(10): Error: no identifier for declarator int\n/tmp/tmp8dff8ne2.d(10):
    Error: found \''?\'' instead of statement\n/tmp/tmp8dff8ne2.d(11): Error: found
    \''in\'' when expecting \'';\''\n/tmp/tmp8dff8ne2.d(25): Error: found \''in\''
    when expecting \'';\''\n/tmp/tmp8dff8ne2.d(39): Error: found \''in\'' when expecting
    \'';\''\n/tmp/tmp8dff8ne2.d(53): Error: found \''in\'' when expecting \'';\''\n/tmp/tmp8dff8ne2.d(67):
    Error: found \''in\'' when expecting \'';\''\n/tmp/tmp8dff8ne2.d(81): Error: found
    \''in\'' when expecting \'';\''\n/tmp/tmp8dff8ne2.d(94): Error: found \''unittest\''
    when expecting \'')\''\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp8dff8ne2.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach(string; strings)\
    \ {\n        if(string.length > longest.length)\n            longest = string;\n\
    \    }\n    return longest;\n}\n/*\n Out of list of strings, return the longest\
    \ one. Return the first one in case of multiple\n    strings of the same length.\
    \ Return None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int startIndex) \n{\n    foreach(string; strings)\
    \ {\n        if(string.length > longest.length)\n            longest = string;\n\
    \        if(startIndex == strings.length - 1)\n            return longest;\n \
    \   }\n    return longest;\n}\n/*\n Out of list of strings, return the longest\
    \ one. Return the first one in case of multiple\n    strings of the same length.\
    \ Return None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int startIndex, int endIndex) \n{\n    foreach(string;\
    \ strings) {\n        if(string.length > longest.length)\n            longest\
    \ = string;\n        if(startIndex == strings.length - 1 && endIndex == strings.length\
    \ - 1)\n            return longest;\n    }\n    return longest;\n}\n/*\n Out of\
    \ list of strings, return the longest one. Return the first one in case of multiple\n\
    \    strings of the same length. Return None in case the input list is empty.\n\
    \                \n*/\nNullable!(string) longest(string[] strings, int startIndex,\
    \ int endIndex, int maxLength) \n{\n    foreach(string; strings) {\n        if(string.length\
    \ > longest.length)\n            longest = string;\n        if(startIndex == strings.length\
    \ - 1 && endIndex == strings.length - 1 && maxLength == string.length)\n     \
    \       return longest;\n    }\n    return longest;\n}\n/*\n Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return None in case the input list is empty.\n         \
    \       \n*/\nNullable!(string) longest(string[] strings, int startIndex, int\
    \ endIndex, int maxLength, int minLength) \n{\n    foreach(string; strings) {\n\
    \        if(string.length > longest.length)\n            longest = string;\n \
    \       if(startIndex == strings.length - 1 && endIndex == strings.length - 1\
    \ && maxLength == string.length && minLength == string.length)\n            return\
    \ longest;\n    }\n    return longest;\n}\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings, int startIndex, int endIndex,\
    \ int maxLength, int minLength, int maxCount\nunittest\n{\n    alias candidate\
    \ = longest;\n\n{\n        auto result = candidate([]);\n        assert(result.isNull);\n\
    }\n\n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp44wga2cv.d(82): Error: found \''unittest\'' when expecting \'')\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp44wga2cv.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach(string; strings)\
    \ {\n        if(string.length() > longest.length()) {\n            longest = string;\n\
    \        }\n    }\n    return longest;\n}\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings, int startIndex) \n{\n    foreach(string;\
    \ strings) {\n        if(string.length() > longest.length()) {\n            longest\
    \ = string;\n        }\n    }\n    return longest;\n}\n/*\n Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return None in case the input list is empty.\n         \
    \       \n*/\nNullable!(string) longest(string[] strings, int startIndex, int\
    \ endIndex) \n{\n    foreach(string; strings) {\n        if(string.length() >\
    \ longest.length()) {\n            longest = string;\n        }\n    }\n    return\
    \ longest;\n}\n/*\n Out of list of strings, return the longest one. Return the\
    \ first one in case of multiple\n    strings of the same length. Return None in\
    \ case the input list is empty.\n                \n*/\nNullable!(string) longest(string[]\
    \ strings, char character) \n{\n    foreach(string; strings) {\n        if(string.length()\
    \ > longest.length()) {\n            longest = string;\n        }\n    }\n   \
    \ return longest;\n}\n/*\n Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \n*/\nNullable!(string) longest(string[]\
    \ strings, char character, int startIndex) \n{\n    foreach(string; strings) {\n\
    \        if(string.length() > longest.length()) {\n            longest = string;\n\
    \        }\n    }\n    return longest;\n}\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings, char character, int startIndex,\
    \ int endIndex) \n{\n    foreach(string; strings) {\n        if(string.length()\
    \ > longest.length()) {\n            longest = string;\n        }\n    }\n   \
    \ return longest;\n}\n/*\n Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \n*/\nNullable!(string) longest(string[]\
    \ strings, char character, int startIndex, int endIndex, bool caseSensitive\n\
    unittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
    \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
    , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\
    \n{\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
    , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n\
    }\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpwkkwh24d.d(93): Error: found \''unittest\'' when expecting \'')\''\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpwkkwh24d.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    if (strings.length ==\
    \ 0) {\n        return null;\n    }\n    int maxLen = 0;\n    string maxStr =\
    \ null;\n    for (string str : strings) {\n        if (str.length > maxLen) {\n\
    \            maxLen = str.length;\n            maxStr = str;\n        }\n    }\n\
    \    return maxStr;\n}\nunittest\n{\n    alias candidate = longest;\n\n{\n   \
    \     auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n \
    \       auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp7h3zqqkn.d(15): Error: found \''str\'' when expecting \'';\''
    following statement\n/tmp/tmp7h3zqqkn.d(15): Error: expression expected, not \'':\''\n/tmp/tmp7h3zqqkn.d(15):
    Error: found \''strings\'' when expecting \'';\'' following for condition\nFailed:
    ["dmd", "-unittest", "-v", "-o-", "/tmp/tmp7h3zqqkn.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    int? maxLength = null;\n\
    \    foreach(string? s in strings)\n    {\n        if(maxLength == null || s.length()\
    \ > maxLength)\n        {\n            maxLength = s.length;\n        }\n    }\n\
    \    return maxLength;\n}\n/*\n Out of list of strings, return the longest one.\
    \ Return the first one in case of multiple\n    strings of the same length. Return\
    \ None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int maxLength) \n{\n    foreach(string? s in strings)\n\
    \    {\n        if(s.length() > maxLength)\n        {\n            maxLength =\
    \ s.length;\n        }\n    }\n    return maxLength;\n}\n/*\n Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n    strings\
    \ of the same length. Return None in case the input list is empty.\n         \
    \       \n*/\nNullable!(string) longest(string[] strings, int maxLength, int minLength)\
    \ \n{\n    foreach(string? s in strings)\n    {\n        if(s.length() > maxLength\
    \ && s.length() < minLength)\n        {\n            maxLength = s.length;\n \
    \       }\n    }\n    return maxLength;\n}\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings, int maxLength, int minLength,\
    \ int maxCount) \n{\n    foreach(string? s in strings)\n    {\n        if(s.length()\
    \ > maxLength && s.length() < minLength && s.length() <= maxCount)\n        {\n\
    \            maxLength = s.length;\n        }\n    }\n    return maxLength;\n\
    }\n/*\n Out of list of strings, return the longest one. Return the first one in\
    \ case of multiple\n    strings of the same length. Return None in case the input\
    \ list is empty.\n                \n*/\nNullable!(string) longest(string[] strings,\
    \ int maxLength, int minLength, int maxCount, int minCount) \n{\n    foreach(string?\
    \ s in strings)\n    {\n        if(s.length() > maxLength && s.length() < minLength\
    \ && s.length() <= maxCount && s.length() >= minCount)\n        {\n          \
    \  maxLength = s.length;\n        }\n    }\n    return maxLength;\n}\n/*\n Out\
    \ of list of strings, return the longest one. Return the first one in case of\
    \ multiple\n    strings of the same length. Return None in case the input list\
    \ is empty.\n                \n*/\nNullable!(string) longest(string[] strings,\
    \ int maxLength, int minLength, int maxCount, int minCount, int maxCount2) \n\
    {\n    foreach(string\nunittest\n{\n    alias candidate = longest;\n\n{\n    \
    \    auto result = candidate([]);\n        assert(result.isNull);\n}\n\n{\n  \
    \      auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmp_51mqtvj.d(10): Error: no identifier for declarator int\n/tmp/tmp_51mqtvj.d(10):
    Error: found \''?\'' instead of statement\n/tmp/tmp_51mqtvj.d(11): Error: no identifier
    for declarator string\n/tmp/tmp_51mqtvj.d(11): Error: found \''?\'' when expecting
    \'';\''\n/tmp/tmp_51mqtvj.d(27): Error: no identifier for declarator string\n/tmp/tmp_51mqtvj.d(27):
    Error: found \''?\'' when expecting \'';\''\n/tmp/tmp_51mqtvj.d(43): Error: no
    identifier for declarator string\n/tmp/tmp_51mqtvj.d(43): Error: found \''?\''
    when expecting \'';\''\n/tmp/tmp_51mqtvj.d(59): Error: no identifier for declarator
    string\n/tmp/tmp_51mqtvj.d(59): Error: found \''?\'' when expecting \'';\''\n/tmp/tmp_51mqtvj.d(75):
    Error: no identifier for declarator string\n/tmp/tmp_51mqtvj.d(75): Error: found
    \''?\'' when expecting \'';\''\n/tmp/tmp_51mqtvj.d(92): Error: no identifier for
    declarator string\n/tmp/tmp_51mqtvj.d(92): Error: found \''unittest\'' when expecting
    \'';\''\n/tmp/tmp_51mqtvj.d(112): Error: found \''void\'' when expecting \'')\''\n/tmp/tmp_51mqtvj.d(112):
    Error: found \''{\'' when expecting \'';\'' following statement\nFailed: ["dmd",
    "-unittest", "-v", "-o-", "/tmp/tmp_51mqtvj.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    int? maxLength = null;\n\
    \    foreach(string[] strs in strings)\n    {\n        int length = strs.Length;\n\
    \        if(maxLength == null || maxLength > length)\n        {\n            maxLength\
    \ = length;\n        }\n    }\n    return maxLength;\n}\n</code>\n<|/ a tags=c#,string,arrays\
    \ |>\n<| a tags=c#,string,arrays |>\n<code>\npublic static string LongestString(string[]\
    \ strings)\n{\n    string longest = null;\n    foreach (string s in strings)\n\
    \    {\n        if (longest == null || s.Length > longest.Length)\n        {\n\
    \            longest = s;\n        }\n    }\n    return longest;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\npublic static string LongestString(string[]\
    \ strings)\n{\n    string longest = null;\n    foreach (string s in strings)\n\
    \    {\n        if (longest == null || s.Length > longest.Length)\n        {\n\
    \            longest = s;\n        }\n    }\n    return longest;\n}\n</code>\n\
    <|/ a tags=c#,string,arrays |>\n<| a tags=c#,string,arrays |>\n<code>\npublic\
    \ static string LongestString(string[] strings)\n{\n    string longest = null;\n\
    \    foreach (string s in strings)\n    {\n        if (longest == null || s.Length\
    \ > longest.Length)\n        {\n            longest = s;\n        }\n    }\n \
    \   return longest;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=c#,string,arrays\
    \ |>\n<code>\npublic static string LongestString(string[] strings)\n{\n    string\
    \ longest = null;\n    foreach (string s in strings)\n    {\n        if (longest\
    \ == null || s.Length > longest.Length)\n        {\n            longest = s;\n\
    \        }\n    }\n    return longest;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=c#,string,arrays\
    \ |>\n<code>\npublic static string LongestString(string[] strings)\n{\n    string\
    \ longest = null;\n    foreach (string s in strings)\n    {\n        if (longest\
    \ == null || s.Length > longest.Length)\n        {\n            longest = s;\n\
    \        }\n    }\n    return longest;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=c#,string,arrays\
    \ |>\n<code>\npublic static string LongestString(string[] strings)\n{\n    string\
    \ longest = null;\n    foreach (string s in strings)\n    {\n        if (longest\
    \ == null || s.Length > longest.Length\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpbmf89fw_.d(10): Error: no identifier for declarator int\n/tmp/tmpbmf89fw_.d(10):
    Error: found \''?\'' instead of statement\n/tmp/tmpbmf89fw_.d(11): Error: found
    \''in\'' when expecting \'';\''\n/tmp/tmpbmf89fw_.d(21): Error: Declaration expected,
    not \''<\''\n/tmp/tmpbmf89fw_.d(28): Error: Declaration expected, not \''foreach\''\n/tmp/tmpbmf89fw_.d(33):
    Error: unrecognized declaration\nFailed: ["dmd", "-unittest", "-v", "-o-", "/tmp/tmpbmf89fw_.d",
    "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
- exit_code: 1
  program: "import std.math;\nimport std.typecons;\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings) \n{\n    foreach(string; strings)\n\
    \    {\n        if(string.length > longest.length)\n            longest = string;\n\
    \    }\n    return longest;\n}\n/*\n Out of list of strings, return the longest\
    \ one. Return the first one in case of multiple\n    strings of the same length.\
    \ Return None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int startIndex) \n{\n    foreach(string; strings)\n\
    \    {\n        if(string.length > longest.length)\n            longest = string;\n\
    \    }\n    return longest;\n}\n/*\n Out of list of strings, return the longest\
    \ one. Return the first one in case of multiple\n    strings of the same length.\
    \ Return None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, int startIndex, int endIndex) \n{\n    foreach(string;\
    \ strings)\n    {\n        if(string.length > longest.length)\n            longest\
    \ = string;\n    }\n    return longest;\n}\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings, char character) \n{\n    foreach(string;\
    \ strings)\n    {\n        if(string.length > longest.length)\n            longest\
    \ = string;\n    }\n    return longest;\n}\n/*\n Out of list of strings, return\
    \ the longest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return None in case the input list is empty.\n                \n\
    */\nNullable!(string) longest(string[] strings, char character, int startIndex)\
    \ \n{\n    foreach(string; strings)\n    {\n        if(string.length > longest.length)\n\
    \            longest = string;\n    }\n    return longest;\n}\n/*\n Out of list\
    \ of strings, return the longest one. Return the first one in case of multiple\n\
    \    strings of the same length. Return None in case the input list is empty.\n\
    \                \n*/\nNullable!(string) longest(string[] strings, char character,\
    \ int startIndex, int endIndex) \n{\n    foreach(string; strings)\n    {\n   \
    \     if(string.length > longest.length)\n            longest = string;\n    }\n\
    \    return longest;\n}\n/*\n Out of list of strings, return the longest one.\
    \ Return the first one in case of multiple\n    strings of the same length. Return\
    \ None in case the input list is empty.\n                \n*/\nNullable!(string)\
    \ longest(string[] strings, char character, int startIndex, int endIndex, bool\
    \ caseSensitive) \n{\n    foreach\nunittest\n{\n    alias candidate = longest;\n\
    \n{\n        auto result = candidate([]);\n        assert(result.isNull);\n}\n\
    \n{\n        auto result = candidate([\"x\", \"y\", \"z\"]);\n        assert(!result.isNull\
    \ && result.get == \"x\");\n}\n\n{\n        auto result = candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]);\n        assert(!result.isNull\
    \ && result.get == \"zzzz\");\n}\n\n}\nvoid main(){}"
  status: SyntaxError
  stderr: 'b''/tmp/tmpo5yx1hzj.d(95): Error: found \''unittest\'' when expecting \''(\''\n/tmp/tmpo5yx1hzj.d(96):
    Error: basic type expected, not {\n/tmp/tmpo5yx1hzj.d(96): Error: no identifier
    for declarator int\n/tmp/tmpo5yx1hzj.d(96): Error: found \''{\'' when expecting
    \'';\''\n/tmp/tmpo5yx1hzj.d(97): Error: expression expected, not \''alias\''\n/tmp/tmpo5yx1hzj.d(97):
    Error: found \''candidate\'' when expecting \'')\''\n/tmp/tmpo5yx1hzj.d(97): Error:
    found \''=\'' instead of statement\nFailed: ["dmd", "-unittest", "-v", "-o-",
    "/tmp/tmpo5yx1hzj.d", "-I/tmp"]\n'''
  stdout: b''
  timestamp: 1660015571
