name: HumanEval_35_max_element
language: d
prompt: "import std.math;\n/*\nReturn maximum element in the list.\n            \n\
  */\nlong max_element(long[] l) \n"
tests: "unittest\n{\n    alias candidate = max_element;\n\n    assert(candidate([1L,\
  \ 2L, 3L]) == 3L);\n    assert(candidate([5L, 3L, -5L, 2L, -3L, 3L, 9L, 0L, 124L,\
  \ 1L, -10L]) == 124L);\n}\nvoid main(){}"
completions: ["{\n\tlong max;\n\tmax = l[0];\n\tfor (int i = 1; i < l.length; i++)\
    \ \n\t{\n\t\tif (l[i] > max) \n\t\t{\n\t\t\tmax = l[i];\n\t\t}\n\t}\n\treturn\
    \ max;\n}\n/*\nReturn minimum element in the list.\n            \n*/\nlong min_element(long[]\
    \ l) \n{\n\tlong min;\n\tmin = l[0];\n\tfor (int i = 1; i < l.length; i++) \n\t\
    {\n\t\tif (l[i] < min) \n\t\t{\n\t\t\tmin = l[i];\n\t\t}\n\t}\n\treturn min;\n\
    }\n/*\nReturn sum of all elements in the list.\n            \n*/\nlong sum_element(long[]\
    \ l) \n{\n\tlong sum = 0;\n\tfor (int i = 0; i < l.length; i++) \n\t{\n\t\tsum\
    \ += l[i];\n\t}\n\treturn sum;\n}\n/*\nReturn product of all elements in the list.\n\
    \            \n*/\nlong prod_element(long[] l) \n{\n\tlong prod = 1;\n\tfor (int\
    \ i = 0; i < l.length; i++) \n\t{\n\t\tprod *= l[i];\n\t}\n\treturn prod;\n}\n\
    /*\nReturn square of all elements in the list.\n            \n*/\nlong square_element(long[]\
    \ l) \n{\n\tlong square = 0;\n\tfor (int i = 0; i < l.length; i++) \n\t{\n\t\t\
    square = square + l[i] * l[i];\n\t}\n\treturn square;\n}\n/*\nReturn sum of all\
    \ elements in the list.\n            \n*/\ndouble sum_elements(double[] l) \n\
    {\n\tdouble sum = 0;\n\tfor (int i = 0; i < l.length; i++) \n\t{\n\t\tsum += l[i];\n\
    \t}\n\treturn sum;\n}\n/*\nReturn product of all elements in the list.\n     \
    \       \n*/\ndouble prod_elements(double[] l) \n{\n\tdouble prod = 1;\n\tfor\
    \ (int i = 0; i < l.length; i++) \n\t{\n\t\tprod *= l[i];\n\t}\n\treturn prod;\n\
    }\n/*\nReturn square of all elements in the list.\n            \n*/\ndouble square_elements(double[]\
    \ l) \n{\n\tdouble square = 0;\n\tfor (int i = 0; i < l.length; i++) \n\t{\n\t\
    \tsquare = square + l[i] * l[i];\n\t}\n\treturn square;\n}\n/*\nReturn sum of\
    \ all elements in the list.\n            \n*/\nfloat sum_elements(float[] l) \n\
    {\n\tfloat sum = 0;\n\tfor (int i = 0; i < l.length; i++) \n\t{\n\t\tsum += l[i];\n\
    \t}\n\treturn sum;\n}\n/*\nReturn product of all elements in the list.\n     \
    \       \n*/\nfloat prod_", "{\n\tlong max;\n\tstd.sort(l);\n\tmax = l[0];\n\t\
    for (int i = 1; i < l.length; ++i)\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\t\
    return max;\n}", "{\n\tlong max = l[0];\n\tfor (int i = 1; i < l.length; ++i)\n\
    \t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\treturn max;\n}", "{\n\tlong max = l[0];\n\
    \tlong i;\n\tfor (i = 1; i < l.length; i++) {\n\t\tif (l[i] > max) {\n\t\t\tmax\
    \ = l[i];\n\t\t}\n\t}\n\treturn max;\n}\n/*\nReturn minimum element in the list.\n\
    \            \n*/\nlong min_element(long[] l) \n{\n\tlong min = l[0];\n\tlong\
    \ i;\n\tfor (i = 1; i < l.length; i++) {\n\t\tif (l[i] < min) {\n\t\t\tmin = l[i];\n\
    \t\t}\n\t}\n\treturn min;\n}\n/*\nReturn sum of all elements in the list.\n  \
    \          \n*/\nlong sum_element(long[] l) \n{\n\tlong sum = 0;\n\tlong i;\n\t\
    for (i = 0; i < l.length; i++) {\n\t\tsum += l[i];\n\t}\n\treturn sum;\n}\n/*\n\
    Return product of all elements in the list.\n            \n*/\nlong prod_element(long[]\
    \ l) \n{\n\tlong prod = 1;\n\tlong i;\n\tfor (i = 0; i < l.length; i++) {\n\t\t\
    prod *= l[i];\n\t}\n\treturn prod;\n}\n/*\nReturn absolute value of all elements\
    \ in the list.\n            \n*/\nlong abs_element(long[] l) \n{\n\tlong i;\n\t\
    for (i = 0; i < l.length; i++) {\n\t\tl[i] = abs(l[i]);\n\t}\n\treturn l;\n}\n\
    /*\nReturn absolute value of all elements in the list.\n            \n*/\ndouble\
    \ abs_element(double[] l) \n{\n\tdouble i;\n\tfor (i = 0; i < l.length; i++) {\n\
    \t\tl[i] = abs(l[i]);\n\t}\n\treturn l;\n}\n/*\nReturn absolute value of all elements\
    \ in the list.\n            \n*/\nfloat abs_element(float[] l) \n{\n\tfloat i;\n\
    \tfor (i = 0; i < l.length; i++) {\n\t\tl[i] = abs(l[i]);\n\t}\n\treturn l;\n\
    }\n/*\nReturn absolute value of all elements in the list.\n            \n*/",
  "{\n\tint i;\n\tlong max = l[0];\n\tfor (i = 1; i < l.length; i++) \n\t\tif (l[i]\
    \ > max) \n\t\t\tmax = l[i];\n\treturn max;\n}\n/*\nReturn minimum element in\
    \ the list.\n            \n*/\nlong min_element(long[] l) \n{\n\tint i;\n\tlong\
    \ min = l[0];\n\tfor (i = 1; i < l.length; i++) \n\t\tif (l[i] < min) \n\t\t\t\
    min = l[i];\n\treturn min;\n}\n/*\nReturn sum of all elements in the list.\n \
    \           \n*/\nlong sum_element(long[] l) \n{\n\tint i;\n\tlong sum = 0;\n\t\
    for (i = 0; i < l.length; i++) \n\t\tsum += l[i];\n\treturn sum;\n}\n/*\nReturn\
    \ product of all elements in the list.\n            \n*/\nlong product_element(long[]\
    \ l) \n{\n\tint i;\n\tlong prod = 1;\n\tfor (i = 0; i < l.length; i++) \n\t\t\
    prod *= l[i];\n\treturn prod;\n}\n/*\nReturn absolute value of all elements in\
    \ the list.\n            \n*/\nlong abs_element(long[] l) \n{\n\tint i;\n\tlong\
    \ abs = 0;\n\tfor (i = 0; i < l.length; i++) \n\t\tabs = max(abs, l[i]);\n\treturn\
    \ abs;\n}\n/*\nReturn absolute value of all elements in the list.\n          \
    \  \n*/\ndouble abs_element(double[] l) \n{\n\tint i;\n\tdouble abs = 0;\n\tfor\
    \ (i = 0; i < l.length; i++) \n\t\tabs = max(abs, l[i]);\n\treturn abs;\n}\n/*\n\
    Return absolute value of all elements in the list.\n            \n*/\nfloat abs_element(float[]\
    \ l) \n{\n\tint i;\n\tfloat abs = 0;\n\tfor (i = 0; i < l.length; i++) \n\t\t\
    abs = max(abs, l[i]);\n\treturn abs;\n}\n/*\nReturn absolute value of all elements\
    \ in the list.\n            \n*/", "{\n\tlong max = l[0];\n\tfor (int i = 1; i\
    \ < l.length; ++i)\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\treturn max;\n}",
  "{\n\tlong max = l[0];\n\tfor (int i = 1; i < l.length; i++)\n\t\tif (l[i] > max)\n\
    \t\t\tmax = l[i];\n\treturn max;\n}\n/*\nReturn minimum element in the list.\n\
    \            \n*/\nlong min_element(long[] l) \n{\n\tlong min = l[0];\n\tfor (int\
    \ i = 1; i < l.length; i++)\n\t\tif (l[i] < min)\n\t\t\tmin = l[i];\n\treturn\
    \ min;\n}\n/*\nReturn sum of all elements in the list.\n            \n*/\nlong\
    \ sum_element(long[] l) \n{\n\tlong sum = 0;\n\tfor (int i = 0; i < l.length;\
    \ i++)\n\t\tsum += l[i];\n\treturn sum;\n}\n/*\nReturn product of all elements\
    \ in the list.\n            \n*/\nlong prod_element(long[] l) \n{\n\tlong prod\
    \ = 1;\n\tfor (int i = 0; i < l.length; i++)\n\t\tprod *= l[i];\n\treturn prod;\n\
    }\n/*\nReturn median of all elements in the list.\n            \n*/\nlong median_element(long[]\
    \ l) \n{\n\tlong mid = l.length / 2;\n\tlong median = l[mid];\n\tfor (int i =\
    \ mid; i < l.length; i++)\n\t\tif (l[i] < median)\n\t\t\tmedian = l[i];\n\tfor\
    \ (int i = mid; i > 0; i--)\n\t\tif (l[i] > median)\n\t\t\tmedian = l[i];\n\t\
    return median;\n}\n/*\nReturn standard deviation of all elements in the list.\n\
    \            \n*/\ndouble std_element(long[] l) \n{\n\tdouble sum = 0;\n\tfor\
    \ (int i = 0; i < l.length; i++)\n\t\tsum += pow(l[i] - median_element(l), 2);\n\
    \treturn sqrt(sum / (l.length - 1));\n}\n/*\nReturn sum of all elements in the\
    \ list.\n            \n*/\ndouble sum_element(double[] l) \n{\n\tdouble sum =\
    \ 0;\n\tfor (int i = 0; i < l.length; i++)\n\t\tsum += l[i];\n\treturn sum;\n\
    }\n/*\nReturn product of all elements in the list.\n            \n*/\ndouble prod_element(double[]\
    \ l) \n{\n\tdouble prod = 1;\n\tfor (int i = 0; i < l.length; i++)\n\t\tprod *=\
    \ l[i];\n\treturn prod;\n}\n/*\nReturn median of all elements in the list.\n \
    \           \n*/\ndouble median_element(double[] l) \n{\n\tdouble mid = l.length\
    \ / 2;\n\tdouble median = l[mid];\n\tfor (int i = mid; i < l.length; i++)\n\t\t\
    if (l[i] < median)\n\t\t\tmedian = l[i];\n\tfor (int i = mid; i > 0; i--)\n\t\t\
    if (l[i] > median)", "{\n\tlong max_element = 0;\n\tlong i;\n\tfor(i = 0; i <\
    \ l.length; i++){\n\t\tif(l[i] > max_element){\n\t\t\tmax_element = l[i];\n\t\t\
    }\n\t}\n\treturn max_element;\n}", "{\n\tlong max = l[0];\n\tfor (int i = 1; i\
    \ < l.length; i++)\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\treturn max;\n}\n\
    /*\nReturn minimum element in the list.\n            \n*/\nlong min_element(long[]\
    \ l) \n{\n\tlong min = l[0];\n\tfor (int i = 1; i < l.length; i++)\n\t\tif (l[i]\
    \ < min)\n\t\t\tmin = l[i];\n\treturn min;\n}\n/*\nReturn sum of all elements\
    \ in the list.\n            \n*/\nlong sum_element(long[] l) \n{\n\tlong sum =\
    \ 0;\n\tfor (int i = 0; i < l.length; i++)\n\t\tsum += l[i];\n\treturn sum;\n\
    }\n/*\nReturn product of all elements in the list.\n            \n*/\nlong product_element(long[]\
    \ l) \n{\n\tlong product = 1;\n\tfor (int i = 0; i < l.length; i++)\n\t\tproduct\
    \ *= l[i];\n\treturn product;\n}\n/*\nReturn sum of all elements in the list that\
    \ are less than the given value.\n            \n*/\nlong sum_element_less_than(long[]\
    \ l, long value) \n{\n\tlong sum = 0;\n\tfor (int i = 0; i < l.length; i++)\n\t\
    \tif (l[i] < value)\n\t\t\tsum += l[i];\n\treturn sum;\n}\n/*\nReturn product\
    \ of all elements in the list that are less than the given value.\n          \
    \  \n*/\nlong product_element_less_than(long[] l, long value) \n{\n\tlong product\
    \ = 1;\n\tfor (int i = 0; i < l.length; i++)\n\t\tif (l[i] < value)\n\t\t\tproduct\
    \ *= l[i];\n\treturn product;\n}\n/*\nReturn sum of all elements in the list that\
    \ are greater than the given value.\n            \n*/\nlong sum_element_greater_than(long[]\
    \ l, long value) \n{\n\tlong sum = 0;\n\tfor (int i = 0; i < l.length; i++)\n\t\
    \tif (l[i] > value)\n\t\t\tsum += l[i];\n\treturn sum;\n}\n/*\nReturn product\
    \ of all elements in the list that are greater than the given value.\n       \
    \     \n*/\nlong product_element_greater_than(long[] l, long value) \n{\n\tlong\
    \ product = 1;\n\tfor (int i = 0; i < l.length; i++)\n\t\tif (l[i] > value)\n\t\
    \t\tproduct *= l[i];\n\treturn product;\n}\n/*\nReturn sum of all elements in\
    \ the list that are equal to the given value.\n            \n*/\nlong sum_element_equal_to(long[]\
    \ l, long value) \n{\n\tlong sum = 0;\n\tfor (int i = 0; i < l.length; i++)\n\t\
    \tif (l[i] == value)\n\t\t\tsum += l[i];\n\treturn sum;\n}\n/*\nReturn product\
    \ of all elements in the list that are equal to the given value.\n           \
    \ \n*/\nlong product_element_equal_to(long[] ", "{\n\tint i,j;\n\tlong max;\n\t\
    for(i=0;i<l.length;i++)\n\t{\n\t\tmax=l[i];\n\t\tfor(j=i+1;j<l.length;j++)\n\t\
    \t{\n\t\t\tif(l[j]>max)\n\t\t\t{\n\t\t\t\tmax=l[j];\n\t\t\t}\n\t\t}\n\t}\n\treturn\
    \ max;\n}\n/*\nReturn minimum element in the list.\n            \n*/\nlong min_element(long[]\
    \ l) \n{\n\tint i,j;\n\tlong min;\n\tfor(i=0;i<l.length;i++)\n\t{\n\t\tmin=l[i];\n\
    \t\tfor(j=i+1;j<l.length;j++)\n\t\t{\n\t\t\tif(l[j]<min)\n\t\t\t{\n\t\t\t\tmin=l[j];\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn min;\n}\n/*\nReturn sum of all elements in the list.\n\
    \            \n*/\nlong sum_element(long[] l) \n{\n\tint i;\n\tlong sum=0;\n\t\
    for(i=0;i<l.length;i++)\n\t{\n\t\tsum+=l[i];\n\t}\n\treturn sum;\n}\n/*\nReturn\
    \ product of all elements in the list.\n            \n*/\nlong product_element(long[]\
    \ l) \n{\n\tint i;\n\tlong prod=1;\n\tfor(i=0;i<l.length;i++)\n\t{\n\t\tprod*=l[i];\n\
    \t}\n\treturn prod;\n}\n/*\nReturn sum of all elements in the list.\n        \
    \    \n*/\ndouble sum_element_double(double[] l) \n{\n\tint i;\n\tdouble sum=0;\n\
    \tfor(i=0;i<l.length;i++)\n\t{\n\t\tsum+=l[i];\n\t}\n\treturn sum;\n}\n/*\nReturn\
    \ product of all elements in the list.\n            \n*/\ndouble product_element_double(double[]\
    \ l) \n{\n\tint i;\n\tdouble prod=1;\n\tfor(i=0;i<l.length;i++)\n\t{\n\t\tprod*=l[i];\n\
    \t}\n\treturn prod;\n}\n/*\nReturn sum of all elements in the list.\n        \
    \    \n*/\nfloat sum_element_float(float[] l) \n{\n\tint i;\n\tfloat sum=0;\n\t\
    for(i=0;i<l.length;i++)\n\t{\n\t\tsum+=l[i];\n\t}\n\treturn sum;\n}\n/*\nReturn\
    \ product of all elements in the list.\n            \n*/\nfloat product_element_float(float[]\
    \ l) \n{\n\tint i;\n\tfloat prod=1;\n\tfor(i=0;i<l.length;i++)\n\t{\n\t\tprod*=l[i];\n\
    \t}\n\treturn prod;\n}\n/*\nReturn sum of all elements in the list.\n        \
    \    \n*/", "{\n\tlong max = l[0];\n\tfor(int i = 1; i < l.length; ++i)\n\t\t\
    if(l[i] > max)\n\t\t\tmax = l[i];\n\treturn max;\n}", "{\n\tlong max;\n\tstd.sort(l);\n\
    \tmax = l[0];\n\tfor (int i = 1; i < l.length; ++i) {\n\t\tif (l[i] > max) {\n\
    \t\t\tmax = l[i];\n\t\t}\n\t}\n\treturn max;\n}\n/*\nReturn minimum element in\
    \ the list.\n            \n*/\nlong min_element(long[] l) \n{\n\tlong min;\n\t\
    std.sort(l);\n\tmin = l[0];\n\tfor (int i = 1; i < l.length; ++i) {\n\t\tif (l[i]\
    \ < min) {\n\t\t\tmin = l[i];\n\t\t}\n\t}\n\treturn min;\n}\n/*\nReturn sum of\
    \ all elements in the list.\n            \n*/\nlong sum_array(long[] l) \n{\n\t\
    long sum = 0;\n\tfor (int i = 0; i < l.length; ++i) {\n\t\tsum += l[i];\n\t}\n\
    \treturn sum;\n}\n/*\nReturn product of all elements in the list.\n          \
    \  \n*/\nlong prod_array(long[] l) \n{\n\tlong prod = 1;\n\tfor (int i = 0; i\
    \ < l.length; ++i) {\n\t\tprod *= l[i];\n\t}\n\treturn prod;\n}\n/*\nReturn sum\
    \ of all elements in the list.\n            \n*/\ndouble sum_array(double[] l)\
    \ \n{\n\tdouble sum = 0;\n\tfor (int i = 0; i < l.length; ++i) {\n\t\tsum += l[i];\n\
    \t}\n\treturn sum;\n}\n/*\nReturn product of all elements in the list.\n     \
    \       \n*/\ndouble prod_array(double[] l) \n{\n\tdouble prod = 1;\n\tfor (int\
    \ i = 0; i < l.length; ++i) {\n\t\tprod *= l[i];\n\t}\n\treturn prod;\n}\n/*\n\
    Return sum of all elements in the list.\n            \n*/\nfloat sum_array(float[]\
    \ l) \n{\n\tfloat sum = 0;\n\tfor (int i = 0; i < l.length; ++i) {\n\t\tsum +=\
    \ l[i];\n\t}\n\treturn sum;\n}\n/*\nReturn product of all elements in the list.\n\
    \            \n*/\nfloat prod_array(float[] l) \n{\n\tfloat prod = 1;\n\tfor (int\
    \ i = 0; i < l.length; ++i) {\n\t\tprod *= l[i];\n\t}\n\treturn prod;\n}\n/*\n\
    Return sum of all elements in the list.\n            \n*/", "{\n\tlong max = l[0];\n\
    \tlong i;\n\tfor (i = 1; i < l.length; i++) {\n\t\tif (l[i] > max)\n\t\t\tmax\
    \ = l[i];\n\t}\n\treturn max;\n}\n/*\nReturn minimum element in the list.\n  \
    \          \n*/\nlong min_element(long[] l) \n{\n\tlong min = l[0];\n\tlong i;\n\
    \tfor (i = 1; i < l.length; i++) {\n\t\tif (l[i] < min)\n\t\t\tmin = l[i];\n\t\
    }\n\treturn min;\n}\n/*\nReturn sum of all elements in the list.\n           \
    \ \n*/\nlong sum_element(long[] l) \n{\n\tlong sum = 0;\n\tlong i;\n\tfor (i =\
    \ 0; i < l.length; i++) {\n\t\tsum += l[i];\n\t}\n\treturn sum;\n}\n/*\nReturn\
    \ product of all elements in the list.\n            \n*/\nlong product_element(long[]\
    \ l) \n{\n\tlong product = 1;\n\tlong i;\n\tfor (i = 0; i < l.length; i++) {\n\
    \t\tproduct *= l[i];\n\t}\n\treturn product;\n}\n/*\nReturn sum of all elements\
    \ in the list.\n            \n*/\ndouble sum_element_double(double[] l) \n{\n\t\
    double sum = 0;\n\tdouble i;\n\tfor (i = 0; i < l.length; i++) {\n\t\tsum += l[i];\n\
    \t}\n\treturn sum;\n}\n/*\nReturn product of all elements in the list.\n     \
    \       \n*/\ndouble product_element_double(double[] l) \n{\n\tdouble product\
    \ = 1;\n\tdouble i;\n\tfor (i = 0; i < l.length; i++) {\n\t\tproduct *= l[i];\n\
    \t}\n\treturn product;\n}\n/*\nReturn sum of all elements in the list.\n     \
    \       \n*/\nfloat sum_element_float(float[] l) \n{\n\tfloat sum = 0;\n\tfloat\
    \ i;\n\tfor (i = 0; i < l.length; i++) {\n\t\tsum += l[i];\n\t}\n\treturn sum;\n\
    }\n/*\nReturn product of all elements in the list.\n            \n*/\nfloat product_element_float(float[]\
    \ l) \n{\n\tfloat product = 1;\n\tfloat i;\n\tfor (i = 0; i < l.length; i++) {\n\
    \t\tproduct *= l[i];\n\t}\n\treturn product;\n}\n/*\nReturn sum of all elements\
    \ in the list.\n            \n*/", "{\n\tint i;\n\tlong max;\n\tmax = l[0];\n\t\
    for (i = 1; i < l.length; i++)\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\treturn\
    \ max;\n}", "{\n\tlong max = l[0];\n\tfor (int i = 1; i < l.length; i++) \n\t\
    {\n\t\tif (l[i] > max) \n\t\t{\n\t\t\tmax = l[i];\n\t\t}\n\t}\n\treturn max;\n\
    }\n/*\nReturn minimum element in the list.\n            \n*/\nlong min_element(long[]\
    \ l) \n{\n\tlong min = l[0];\n\tfor (int i = 1; i < l.length; i++) \n\t{\n\t\t\
    if (l[i] < min) \n\t\t{\n\t\t\tmin = l[i];\n\t\t}\n\t}\n\treturn min;\n}\n/*\n\
    Return sum of all elements in the list.\n            \n*/\nlong sum_element(long[]\
    \ l) \n{\n\tlong sum = 0;\n\tfor (int i = 0; i < l.length; i++) \n\t{\n\t\tsum\
    \ += l[i];\n\t}\n\treturn sum;\n}\n/*\nReturn product of all elements in the list.\n\
    \            \n*/\nlong product_element(long[] l) \n{\n\tlong product = 1;\n\t\
    for (int i = 0; i < l.length; i++) \n\t{\n\t\tproduct *= l[i];\n\t}\n\treturn\
    \ product;\n}\n/*\nReturn absolute value of all elements in the list.\n      \
    \      \n*/\nlong abs_element(long[] l) \n{\n\tlong abs = 0;\n\tfor (int i = 0;\
    \ i < l.length; i++) \n\t{\n\t\tabs = abs(l[i]);\n\t}\n\treturn abs;\n}\n/*\n\
    Return absolute value of all elements in the list.\n            \n*/\ndouble abs_element(double[]\
    \ l) \n{\n\tdouble abs = 0;\n\tfor (int i = 0; i < l.length; i++) \n\t{\n\t\t\
    abs = abs(l[i]);\n\t}\n\treturn abs;\n}\n/*\nReturn absolute value of all elements\
    \ in the list.\n            \n*/\nfloat abs_element(float[] l) \n{\n\tfloat abs\
    \ = 0;\n\tfor (int i = 0; i < l.length; i++) \n\t{\n\t\tabs = abs(l[i]);\n\t}\n\
    \treturn abs;\n}\n/*\nReturn absolute value of all elements in the list.\n   \
    \         \n*/", "{\n\tint i;\n\tlong max = l[0];\n\tfor(i=1; i<l.length; i++)\n\
    \t\tif(l[i] > max)\n\t\t\tmax = l[i];\n\treturn max;\n}\n/*\nReturn minimum element\
    \ in the list.\n            \n*/\nlong min_element(long[] l) \n{\n\tint i;\n\t\
    long min = l[0];\n\tfor(i=1; i<l.length; i++)\n\t\tif(l[i] < min)\n\t\t\tmin =\
    \ l[i];\n\treturn min;\n}\n/*\nReturn sum of all elements in the list.\n     \
    \       \n*/\nlong sum_elements(long[] l) \n{\n\tint i;\n\tlong sum = 0;\n\tfor(i=1;\
    \ i<l.length; i++)\n\t\tsum += l[i];\n\treturn sum;\n}\n/*\nReturn product of\
    \ all elements in the list.\n            \n*/\nlong product_elements(long[] l)\
    \ \n{\n\tint i;\n\tlong product = 1;\n\tfor(i=1; i<l.length; i++)\n\t\tproduct\
    \ *= l[i];\n\treturn product;\n}\n/*\nReturn absolute value of all elements in\
    \ the list.\n            \n*/\nlong abs_elements(long[] l) \n{\n\tint i;\n\tlong\
    \ abs = 0;\n\tfor(i=1; i<l.length; i++)\n\t\tabs = max(abs, l[i]);\n\treturn abs;\n\
    }\n/*\nReturn absolute value of all elements in the list.\n            \n*/\n\
    double abs_elements(double[] l) \n{\n\tint i;\n\tdouble abs = 0;\n\tfor(i=1; i<l.length;\
    \ i++)\n\t\tabs = max(abs, l[i]);\n\treturn abs;\n}\n/*\nReturn absolute value\
    \ of all elements in the list.\n            \n*/\nfloat abs_elements(float[] l)\
    \ \n{\n\tint i;\n\tfloat abs = 0;\n\tfor(i=1; i<l.length; i++)\n\t\tabs = max(abs,\
    \ l[i]);\n\treturn abs;\n}\n/*\nReturn absolute value of all elements in the list.\n\
    \            \n*/", "{\n\tint i;\n\tlong max;\n\tmax = l[0];\n\tfor (i = 1; i\
    \ < l.length; ++i) {\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\t}\n\treturn max;\n\
    }\n/*\nReturn minimum element in the list.\n            \n*/\nlong min_element(long[]\
    \ l) \n{\n\tint i;\n\tlong min;\n\tmin = l[0];\n\tfor (i = 1; i < l.length; ++i)\
    \ {\n\t\tif (l[i] < min)\n\t\t\tmin = l[i];\n\t}\n\treturn min;\n}\n/*\nReturn\
    \ sum of all elements in the list.\n            \n*/\nlong sum_element(long[]\
    \ l) \n{\n\tint i;\n\tlong sum;\n\tsum = 0;\n\tfor (i = 0; i < l.length; ++i)\n\
    \t\tsum += l[i];\n\treturn sum;\n}\n/*\nReturn product of all elements in the\
    \ list.\n            \n*/\nlong prod_element(long[] l) \n{\n\tint i;\n\tlong prod;\n\
    \tprod = 1;\n\tfor (i = 0; i < l.length; ++i)\n\t\tprod *= l[i];\n\treturn prod;\n\
    }\n/*\nReturn absolute value of all elements in the list.\n            \n*/\n\
    long abs_element(long[] l) \n{\n\tint i;\n\tlong abs;\n\tabs = 0;\n\tfor (i =\
    \ 0; i < l.length; ++i)\n\t\tabs = max(abs, l[i]);\n\treturn abs;\n}\n/*\nReturn\
    \ absolute value of all elements in the list.\n            \n*/\ndouble abs_element(double[]\
    \ l) \n{\n\tint i;\n\tdouble abs;\n\tabs = 0;\n\tfor (i = 0; i < l.length; ++i)\n\
    \t\tabs = max(abs, l[i]);\n\treturn abs;\n}\n/*\nReturn absolute value of all\
    \ elements in the list.\n            \n*/\nfloat abs_element(float[] l) \n{\n\t\
    int i;\n\tfloat abs;\n\tabs = 0;\n\tfor (i = 0; i < l.length; ++i)\n\t\tabs =\
    \ max(abs, l[i]);\n\treturn abs;\n}\n/*\nReturn absolute value of all elements\
    \ in the list.\n            \n*/", "{\n\tint i;\n\tlong max;\n\tmax = l[0];\n\t\
    for (i = 1; i < l.length; i++) \n\t{\n\t\tif (l[i] > max) \n\t\t{\n\t\t\tmax =\
    \ l[i];\n\t\t}\n\t}\n\treturn max;\n}\n/*\nReturn minimum element in the list.\n\
    \            \n*/\nlong min_element(long[] l) \n{\n\tint i;\n\tlong min;\n\tmin\
    \ = l[0];\n\tfor (i = 1; i < l.length; i++) \n\t{\n\t\tif (l[i] < min) \n\t\t\
    {\n\t\t\tmin = l[i];\n\t\t}\n\t}\n\treturn min;\n}\n/*\nReturn sum of all elements\
    \ in the list.\n            \n*/\nlong sum_element(long[] l) \n{\n\tint i;\n\t\
    long sum;\n\tsum = 0;\n\tfor (i = 0; i < l.length; i++) \n\t{\n\t\tsum += l[i];\n\
    \t}\n\treturn sum;\n}\n/*\nReturn product of all elements in the list.\n     \
    \       \n*/\nlong product_element(long[] l) \n{\n\tint i;\n\tlong prod;\n\tprod\
    \ = 1;\n\tfor (i = 0; i < l.length; i++) \n\t{\n\t\tprod *= l[i];\n\t}\n\treturn\
    \ prod;\n}\n/*\nReturn absolute value of all elements in the list.\n         \
    \   \n*/\nlong abs_element(long[] l) \n{\n\tint i;\n\tlong abs;\n\tabs = 0;\n\t\
    for (i = 0; i < l.length; i++) \n\t{\n\t\tabs += l[i];\n\t}\n\treturn abs;\n}\n\
    /*\nReturn absolute value of all elements in the list.\n            \n*/\ndouble\
    \ abs_element(double[] l) \n{\n\tint i;\n\tdouble abs;\n\tabs = 0;\n\tfor (i =\
    \ 0; i < l.length; i++) \n\t{\n\t\tabs += l[i];\n\t}\n\treturn abs;\n}\n/*\nReturn\
    \ absolute value of all elements in the list.\n            \n*/\nfloat abs_element(float[]\
    \ l) \n{\n\tint i;\n\tfloat abs;\n\tabs = 0;\n\tfor (i = 0; i < l.length; i++)\
    \ \n\t{\n\t\tabs += l[i];\n\t}\n\treturn abs;\n}\n/*\nReturn absolute value of\
    \ all elements in the list.\n            \n*/", "{\n\tint i,j;\n\tlong max;\n\t\
    for(i=0,j=l.length-1;i<j;i++,j--)\n\t{\n\t\tif(l[i]>l[j])\n\t\t{\n\t\t\tmax=l[i];\n\
    \t\t}\n\t\telse\n\t\t{\n\t\t\tmax=l[j];\n\t\t}\n\t}\n\treturn max;\n}\n/*\nReturn\
    \ minimum element in the list.\n            \n*/\nlong min_element(long[] l) \n\
    {\n\tint i,j;\n\tlong min;\n\tfor(i=0,j=l.length-1;i<j;i++,j--)\n\t{\n\t\tif(l[i]<l[j])\n\
    \t\t{\n\t\t\tmin=l[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tmin=l[j];\n\t\t}\n\t}\n\t\
    return min;\n}\n/*\nReturn sum of all elements in the list.\n            \n*/\n\
    long sum_element(long[] l) \n{\n\tint i;\n\tlong sum=0;\n\tfor(i=0;i<l.length;i++)\n\
    \t{\n\t\tsum+=l[i];\n\t}\n\treturn sum;\n}\n/*\nReturn product of all elements\
    \ in the list.\n            \n*/\nlong product_element(long[] l) \n{\n\tint i;\n\
    \tlong prod=1;\n\tfor(i=0;i<l.length;i++)\n\t{\n\t\tprod=prod*l[i];\n\t}\n\treturn\
    \ prod;\n}\n/*\nReturn absolute value of all elements in the list.\n         \
    \   \n*/\nlong abs_element(long[] l) \n{\n\tint i;\n\tlong abs=0;\n\tfor(i=0;i<l.length;i++)\n\
    \t{\n\t\tabs=abs+l[i]*l[i];\n\t}\n\treturn abs;\n}\n/*\nReturn absolute value\
    \ of all elements in the list.\n            \n*/\ndouble abs_element(double[]\
    \ l) \n{\n\tint i;\n\tdouble abs=0;\n\tfor(i=0;i<l.length;i++)\n\t{\n\t\tabs=abs+l[i]*l[i];\n\
    \t}\n\treturn abs;\n}\n/*\nReturn absolute value of all elements in the list.\n\
    \            \n*/\nfloat abs_element(float[] l) \n{\n\tint i;\n\tfloat abs=0;\n\
    \tfor(i=0;i<l.length;i++)\n\t{\n\t\tabs=abs+l[i]*l[i];\n\t}\n\treturn abs;\n}\n\
    /*\nReturn absolute value of all elements in the list.\n            \n*/", "{\n\
    \tint i;\n\tlong max;\n\tmax = l[0];\n\tfor (i = 1; i < l.length; ++i)\n\t\tif\
    \ (l[i] > max)\n\t\t\tmax = l[i];\n\treturn max;\n}\n/*\nReturn minimum element\
    \ in the list.\n            \n*/\nlong min_element(long[] l) \n{\n\tint i;\n\t\
    long min;\n\tmin = l[0];\n\tfor (i = 1; i < l.length; ++i)\n\t\tif (l[i] < min)\n\
    \t\t\tmin = l[i];\n\treturn min;\n}\n/*\nReturn sum of all elements in the list.\n\
    \            \n*/\nlong sum_element(long[] l) \n{\n\tint i;\n\tlong sum = 0;\n\
    \tfor (i = 0; i < l.length; ++i)\n\t\tsum += l[i];\n\treturn sum;\n}\n/*\nReturn\
    \ product of all elements in the list.\n            \n*/\nlong product_element(long[]\
    \ l) \n{\n\tint i;\n\tlong prod = 1;\n\tfor (i = 0; i < l.length; ++i)\n\t\tprod\
    \ *= l[i];\n\treturn prod;\n}\n/*\nReturn absolute value of all elements in the\
    \ list.\n            \n*/\nlong abs_element(long[] l) \n{\n\tint i;\n\tlong abs\
    \ = 0;\n\tfor (i = 0; i < l.length; ++i)\n\t\tabs = max(abs, l[i]);\n\treturn\
    \ abs;\n}\n/*\nReturn absolute value of all elements in the list.\n          \
    \  \n*/\ndouble abs_element(double[] l) \n{\n\tint i;\n\tdouble abs = 0;\n\tfor\
    \ (i = 0; i < l.length; ++i)\n\t\tabs = max(abs, l[i]);\n\treturn abs;\n}\n/*\n\
    Return absolute value of all elements in the list.\n            \n*/\nfloat abs_element(float[]\
    \ l) \n{\n\tint i;\n\tfloat abs = 0;\n\tfor (i = 0; i < l.length; ++i)\n\t\tabs\
    \ = max(abs, l[i]);\n\treturn abs;\n}\n/*\nReturn absolute value of all elements\
    \ in the list.\n            \n*/\nlong long abs_element(long long[] l) \n{\n\t\
    int i;\n\tlong long abs = 0;\n\tfor (i = 0; i < l.length; ++i)\n\t\tabs = max(abs,\
    \ l[i]);\n\treturn abs;\n}\n/*\nReturn absolute value of all elements in the list.\n\
    \            \n*/\ndouble abs_element(double[] l, int size) \n{\n\tint i;\n\t\
    double abs = 0;\n\tfor (i = 0; i < size; ++i)\n\t\tabs = max(abs, l[i]);\n\treturn\
    \ abs;\n}\n/*\nReturn absolute value of all elements in the list.\n          \
    \  \n*/\nfloat abs_element(float[] l, int size) \n{\n\tint i;\n\tfloat abs = 0;\n\
    \tfor (i = 0; i < ", "{\n\tlong max = l[0];\n\tfor(int i = 1; i < l.length; ++i)\n\
    \t{\n\t\tif(l[i] > max)\n\t\t\tmax = l[i];\n\t}\n\treturn max;\n}", "{\n\tlong\
    \ max = l[0];\n\tlong i;\n\tfor (i = 1; i < l.length; i++)\n\t\tif (l[i] > max)\n\
    \t\t\tmax = l[i];\n\treturn max;\n}", "{\n\tlong max = l[0];\n\tlong i;\n\tfor\
    \ (i = 1; i < l.length; ++i)\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\treturn\
    \ max;\n}\n/*\nReturn minimum element in the list.\n            \n*/\nlong min_element(long[]\
    \ l) \n{\n\tlong min = l[0];\n\tlong i;\n\tfor (i = 1; i < l.length; ++i)\n\t\t\
    if (l[i] < min)\n\t\t\tmin = l[i];\n\treturn min;\n}\n/*\nReturn sum of all elements\
    \ in the list.\n            \n*/\nlong sum_array(long[] l) \n{\n\tlong sum = 0;\n\
    \tlong i;\n\tfor (i = 0; i < l.length; ++i)\n\t\tsum += l[i];\n\treturn sum;\n\
    }\n/*\nReturn product of all elements in the list.\n            \n*/\nlong prod_array(long[]\
    \ l) \n{\n\tlong prod = 1;\n\tlong i;\n\tfor (i = 0; i < l.length; ++i)\n\t\t\
    prod *= l[i];\n\treturn prod;\n}\n/*\nReturn absolute value of all elements in\
    \ the list.\n            \n*/\nlong abs_array(long[] l) \n{\n\tlong i;\n\tfor\
    \ (i = 0; i < l.length; ++i)\n\t\tl[i] = abs(l[i]);\n\treturn l;\n}\n/*\nReturn\
    \ absolute value of all elements in the list.\n            \n*/\nlong abs_array(long[]\
    \ l, long d) \n{\n\tlong i;\n\tfor (i = 0; i < l.length; ++i)\n\t\tl[i] = abs(l[i]);\n\
    \treturn l;\n}\n/*\nReturn absolute value of all elements in the list.\n     \
    \       \n*/\nlong abs_array(long[] l, long d, long e) \n{\n\tlong i;\n\tfor (i\
    \ = 0; i < l.length; ++i)\n\t\tl[i] = abs(l[i]);\n\treturn l;\n}\n/*\nReturn absolute\
    \ value of all elements in the list.\n            \n*/\nlong abs_array(long[]\
    \ l, long d, long e, long f) \n{\n\tlong i;\n\tfor (i = 0; i < l.length; ++i)\n\
    \t\tl[i] = abs(l[i]);\n\treturn l;\n}\n/*\nReturn absolute value of all elements\
    \ in the list.\n            \n*/\nlong abs_array(long[] l, long d, long e, long\
    \ f, long g) \n{\n\tlong i;\n\tfor (i = 0; i < l.length; ++i)\n\t\tl[i] = abs(l[i]);\n\
    \treturn l;\n}\n/*\nReturn absolute value of all elements in the list.\n     \
    \       \n*/\nlong abs_array(long[] l, long d, long e, long f, long g, long h)\
    \ \n{\n\tlong i;\n\tfor (i = 0; i < l.length; ++i)\n\t\tl[i] = abs(l[i]);\n\t\
    return l;\n}\n/*\n", "{\n\tlong max = 0;\n\tfor (int i = 0; i < l.length; i++)\
    \ \n\t{\n\t\tif (l[i] > max) \n\t\t{\n\t\t\tmax = l[i];\n\t\t}\n\t}\n\treturn\
    \ max;\n}", "{\n\tlong max = l[0];\n\tfor (int i = 1; i < l.length; ++i)\n\t\t\
    if (l[i] > max)\n\t\t\tmax = l[i];\n\treturn max;\n}", "{\n\tlong max = 0;\n\t\
    long i;\n\tfor(i = 0; i < l.length; i++){\n\t\tif(l[i] > max){\n\t\t\tmax = l[i];\n\
    \t\t}\n\t}\n\treturn max;\n}", "{\n\tlong max = l[0];\n\tfor (int i = 1; i < l.length;\
    \ ++i)\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\treturn max;\n}\n/*\nReturn minimum\
    \ element in the list.\n            \n*/\nlong min_element(long[] l) \n{\n\tlong\
    \ min = l[0];\n\tfor (int i = 1; i < l.length; ++i)\n\t\tif (l[i] < min)\n\t\t\
    \tmin = l[i];\n\treturn min;\n}\n/*\nReturn sum of all elements in the list.\n\
    \            \n*/\nlong sum_elements(long[] l) \n{\n\tlong sum = 0;\n\tfor (int\
    \ i = 0; i < l.length; ++i)\n\t\tsum += l[i];\n\treturn sum;\n}\n/*\nReturn product\
    \ of all elements in the list.\n            \n*/\nlong product_elements(long[]\
    \ l) \n{\n\tlong product = 1;\n\tfor (int i = 0; i < l.length; ++i)\n\t\tproduct\
    \ *= l[i];\n\treturn product;\n}\n/*\nReturn sum of all elements in the list.\n\
    \            \n*/\ndouble sum_elements(double[] l) \n{\n\tdouble sum = 0;\n\t\
    for (int i = 0; i < l.length; ++i)\n\t\tsum += l[i];\n\treturn sum;\n}\n/*\nReturn\
    \ product of all elements in the list.\n            \n*/\ndouble product_elements(double[]\
    \ l) \n{\n\tdouble product = 1;\n\tfor (int i = 0; i < l.length; ++i)\n\t\tproduct\
    \ *= l[i];\n\treturn product;\n}\n/*\nReturn sum of all elements in the list.\n\
    \            \n*/\nfloat sum_elements(float[] l) \n{\n\tfloat sum = 0;\n\tfor\
    \ (int i = 0; i < l.length; ++i)\n\t\tsum += l[i];\n\treturn sum;\n}\n/*\nReturn\
    \ product of all elements in the list.\n            \n*/\nfloat product_elements(float[]\
    \ l) \n{\n\tfloat product = 1;\n\tfor (int i = 0; i < l.length; ++i)\n\t\tproduct\
    \ *= l[i];\n\treturn product;\n}\n/*\nReturn sum of all elements in the list.\n\
    \            \n*/\nlong long sum_elements(long long[] l) \n{\n\tlong long sum\
    \ = 0;\n\tfor (int i = 0; i < l.length; ++i)\n\t\tsum += l[i];\n\treturn sum;\n\
    }\n/*\nReturn product of all elements in the list.\n            \n*/\nlong long\
    \ product_elements(long long[] l) \n{\n\tlong long product = 1;\n\tfor (int i\
    \ = 0; i < l.length; ++i)\n\t\tproduct *= l[i];\n\treturn product;\n}\n/*\nReturn\
    \ sum of all elements in the list.\n            \n*/\nulong sum_elements(ulong[]\
    \ l) \n{\n\tulong sum = 0;", "{\n\tlong max = l[0];\n\tfor (int i = 1; i < l.length;\
    \ ++i)\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\treturn max;\n}\n/*\nReturn minimum\
    \ element in the list.\n            \n*/\nlong min_element(long[] l) \n{\n\tlong\
    \ min = l[0];\n\tfor (int i = 1; i < l.length; ++i)\n\t\tif (l[i] < min)\n\t\t\
    \tmin = l[i];\n\treturn min;\n}\n/*\nReturn sum of all elements in the list.\n\
    \            \n*/\nlong sum_elements(long[] l) \n{\n\tlong sum = 0;\n\tfor (int\
    \ i = 0; i < l.length; ++i)\n\t\tsum += l[i];\n\treturn sum;\n}\n/*\nReturn product\
    \ of all elements in the list.\n            \n*/\nlong product_elements(long[]\
    \ l) \n{\n\tlong product = 1;\n\tfor (int i = 0; i < l.length; ++i)\n\t\tproduct\
    \ *= l[i];\n\treturn product;\n}\n/*\nReturn absolute value of all elements in\
    \ the list.\n            \n*/\nlong abs_elements(long[] l) \n{\n\tlong abs = 0;\n\
    \tfor (int i = 0; i < l.length; ++i)\n\t\tabs = max(abs, l[i]);\n\treturn abs;\n\
    }\n/*\nReturn absolute value of all elements in the list.\n            \n*/\n\
    double abs_elements(double[] l) \n{\n\tdouble abs = 0;\n\tfor (int i = 0; i <\
    \ l.length; ++i)\n\t\tabs = max(abs, l[i]);\n\treturn abs;\n}\n/*\nReturn absolute\
    \ value of all elements in the list.\n            \n*/\nfloat abs_elements(float[]\
    \ l) \n{\n\tfloat abs = 0;\n\tfor (int i = 0; i < l.length; ++i)\n\t\tabs = max(abs,\
    \ l[i]);\n\treturn abs;\n}\n/*\nReturn absolute value of all elements in the list.\n\
    \            \n*/", "{\n\tlong max = l[0];\n\tfor (int i = 1; i < l.length; ++i)\n\
    \t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\treturn max;\n}\n/*\nReturn minimum element\
    \ in the list.\n            \n*/\nlong min_element(long[] l) \n{\n\tlong min =\
    \ l[0];\n\tfor (int i = 1; i < l.length; ++i)\n\t\tif (l[i] < min)\n\t\t\tmin\
    \ = l[i];\n\treturn min;\n}\n/*\nReturn sum of all elements in the list.\n   \
    \         \n*/\nlong sum_element(long[] l) \n{\n\tlong sum = 0;\n\tfor (int i\
    \ = 0; i < l.length; ++i)\n\t\tsum += l[i];\n\treturn sum;\n}\n/*\nReturn product\
    \ of all elements in the list.\n            \n*/\nlong product_element(long[]\
    \ l) \n{\n\tlong prod = 1;\n\tfor (int i = 0; i < l.length; ++i)\n\t\tprod *=\
    \ l[i];\n\treturn prod;\n}\n/*\nReturn absolute value of all elements in the list.\n\
    \            \n*/\nlong abs_element(long[] l) \n{\n\tlong abs = 0;\n\tfor (int\
    \ i = 0; i < l.length; ++i)\n\t\tabs = max(abs, abs(l[i]));\n\treturn abs;\n}\n\
    /*\nReturn absolute value of all elements in the list.\n            \n*/\ndouble\
    \ abs_element(double[] l) \n{\n\tdouble abs = 0;\n\tfor (int i = 0; i < l.length;\
    \ ++i)\n\t\tabs = max(abs, abs(l[i]));\n\treturn abs;\n}\n/*\nReturn absolute\
    \ value of all elements in the list.\n            \n*/\nfloat abs_element(float[]\
    \ l) \n{\n\tfloat abs = 0;\n\tfor (int i = 0; i < l.length; ++i)\n\t\tabs = max(abs,\
    \ abs(l[i]));\n\treturn abs;\n}\n/*\nReturn absolute value of all elements in\
    \ the list.\n            \n*/", "{\n\tlong max = l[0];\n\tfor (int i = 1; i <\
    \ l.length; ++i)\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\treturn max;\n}", "{\n\
    \tlong max = l[0];\n\tfor (int i = 1; i < l.length; ++i)\n\t\tif (l[i] > max)\n\
    \t\t\tmax = l[i];\n\treturn max;\n}", "{\n\tlong max = l[0];\n\tfor (int i = 1;\
    \ i < l.length; i++)\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\treturn max;\n\
    }\n/*\nReturn minimum element in the list.\n            \n*/\nlong min_element(long[]\
    \ l) \n{\n\tlong min = l[0];\n\tfor (int i = 1; i < l.length; i++)\n\t\tif (l[i]\
    \ < min)\n\t\t\tmin = l[i];\n\treturn min;\n}\n/*\nReturn sum of all elements\
    \ in the list.\n            \n*/\nlong sum_element(long[] l) \n{\n\tlong sum =\
    \ 0;\n\tfor (int i = 0; i < l.length; i++)\n\t\tsum += l[i];\n\treturn sum;\n\
    }\n/*\nReturn product of all elements in the list.\n            \n*/\nlong product_element(long[]\
    \ l) \n{\n\tlong product = 1;\n\tfor (int i = 0; i < l.length; i++)\n\t\tproduct\
    \ *= l[i];\n\treturn product;\n}\n/*\nReturn absolute value of all elements in\
    \ the list.\n            \n*/\nlong abs_element(long[] l) \n{\n\tlong abs = 0;\n\
    \tfor (int i = 0; i < l.length; i++)\n\t\tabs = max(abs, l[i]);\n\treturn abs;\n\
    }\n/*\nReturn absolute value of all elements in the list.\n            \n*/\n\
    double abs_element(double[] l) \n{\n\tdouble abs = 0;\n\tfor (int i = 0; i < l.length;\
    \ i++)\n\t\tabs = max(abs, l[i]);\n\treturn abs;\n}\n/*\nReturn absolute value\
    \ of all elements in the list.\n            \n*/\nfloat abs_element(float[] l)\
    \ \n{\n\tfloat abs = 0;\n\tfor (int i = 0; i < l.length; i++)\n\t\tabs = max(abs,\
    \ l[i]);\n\treturn abs;\n}\n/*\nReturn absolute value of all elements in the list.\n\
    \            \n*/", "{\n\tlong max = l[0];\n\tfor (int i = 1; i < l.length; ++i)\n\
    \t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\treturn max;\n}\n/*\nReturn minimum element\
    \ in the list.\n            \n*/\nlong min_element(long[] l) \n{\n\tlong min =\
    \ l[0];\n\tfor (int i = 1; i < l.length; ++i)\n\t\tif (l[i] < min)\n\t\t\tmin\
    \ = l[i];\n\treturn min;\n}\n/*\nReturn sum of all elements in the list.\n   \
    \         \n*/\nlong sum_element(long[] l) \n{\n\tlong sum = 0;\n\tfor (int i\
    \ = 0; i < l.length; ++i)\n\t\tsum += l[i];\n\treturn sum;\n}\n/*\nReturn product\
    \ of all elements in the list.\n            \n*/\nlong prod_element(long[] l)\
    \ \n{\n\tlong prod = 1;\n\tfor (int i = 0; i < l.length; ++i)\n\t\tprod *= l[i];\n\
    \treturn prod;\n}\n/*\nReturn absolute value of all elements in the list.\n  \
    \          \n*/\nlong abs_element(long[] l) \n{\n\tlong abs = 0;\n\tfor (int i\
    \ = 0; i < l.length; ++i)\n\t\tabs = max(abs, l[i]);\n\treturn abs;\n}\n/*\nReturn\
    \ absolute value of all elements in the list.\n            \n*/\ndouble abs_element(double[]\
    \ l) \n{\n\tdouble abs = 0;\n\tfor (int i = 0; i < l.length; ++i)\n\t\tabs = max(abs,\
    \ l[i]);\n\treturn abs;\n}\n/*\nReturn absolute value of all elements in the list.\n\
    \            \n*/\nfloat abs_element(float[] l) \n{\n\tfloat abs = 0;\n\tfor (int\
    \ i = 0; i < l.length; ++i)\n\t\tabs = max(abs, l[i]);\n\treturn abs;\n}\n/*\n\
    Return absolute value of all elements in the list.\n            \n*/", "{\n\t\
    int i;\n\tlong max = l[0];\n\tfor (i = 1; i < l.length; ++i)\n\t\tif (l[i] > max)\n\
    \t\t\tmax = l[i];\n\treturn max;\n}", "{\n\tlong max = 0;\n\tlong i = 0;\n\twhile\
    \ (i < l.length) \n\t{\n\t\tif (l[i] > max) \n\t\t{\n\t\t\tmax = l[i];\n\t\t}\n\
    \t\ti++;\n\t}\n\treturn max;\n}", "{\n\tlong max = l[0];\n\tfor (int i = 1; i\
    \ < l.length; i++)\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\treturn max;\n}\n\
    /*\nReturn minimum element in the list.\n            \n*/\nlong min_element(long[]\
    \ l) \n{\n\tlong min = l[0];\n\tfor (int i = 1; i < l.length; i++)\n\t\tif (l[i]\
    \ < min)\n\t\t\tmin = l[i];\n\treturn min;\n}\n/*\nReturn sum of all elements\
    \ in the list.\n            \n*/\nlong sum_element(long[] l) \n{\n\tlong sum =\
    \ 0;\n\tfor (int i = 0; i < l.length; i++)\n\t\tsum += l[i];\n\treturn sum;\n\
    }\n/*\nReturn product of all elements in the list.\n            \n*/\nlong product_element(long[]\
    \ l) \n{\n\tlong product = 1;\n\tfor (int i = 0; i < l.length; i++)\n\t\tproduct\
    \ *= l[i];\n\treturn product;\n}\n/*\nReturn absolute value of all elements in\
    \ the list.\n            \n*/\nlong abs_element(long[] l) \n{\n\tlong abs = 0;\n\
    \tfor (int i = 0; i < l.length; i++)\n\t\tabs = max(abs, l[i]);\n\treturn abs;\n\
    }\n/*\nReturn absolute value of all elements in the list.\n            \n*/\n\
    double abs_element(double[] l) \n{\n\tdouble abs = 0;\n\tfor (int i = 0; i < l.length;\
    \ i++)\n\t\tabs = max(abs, l[i]);\n\treturn abs;\n}\n/*\nReturn absolute value\
    \ of all elements in the list.\n            \n*/\nfloat abs_element(float[] l)\
    \ \n{\n\tfloat abs = 0;\n\tfor (int i = 0; i < l.length; i++)\n\t\tabs = max(abs,\
    \ l[i]);\n\treturn abs;\n}\n/*\nReturn absolute value of all elements in the list.\n\
    \            \n*/", "{\n\tlong max = 0;\n\tlong i;\n\tfor(i = 0; i < l.length;\
    \ i++) \n\t{\n\t\tif(l[i] > max) \n\t\t{\n\t\t\tmax = l[i];\n\t\t}\n\t}\n\treturn\
    \ max;\n}\n/*\nReturn minimum element in the list.\n            \n*/\nlong min_element(long[]\
    \ l) \n{\n\tlong min = 0;\n\tlong i;\n\tfor(i = 0; i < l.length; i++) \n\t{\n\t\
    \tif(l[i] < min) \n\t\t{\n\t\t\tmin = l[i];\n\t\t}\n\t}\n\treturn min;\n}\n/*\n\
    Return sum of all elements in the list.\n            \n*/\nlong sum_element(long[]\
    \ l) \n{\n\tlong sum = 0;\n\tlong i;\n\tfor(i = 0; i < l.length; i++) \n\t{\n\t\
    \tsum += l[i];\n\t}\n\treturn sum;\n}\n/*\nReturn product of all elements in the\
    \ list.\n            \n*/\nlong product_element(long[] l) \n{\n\tlong product\
    \ = 1;\n\tlong i;\n\tfor(i = 0; i < l.length; i++) \n\t{\n\t\tproduct *= l[i];\n\
    \t}\n\treturn product;\n}\n/*\nReturn sum of all elements in the list.\n     \
    \       \n*/\ndouble sum_element_double(double[] l) \n{\n\tdouble sum = 0;\n\t\
    double i;\n\tfor(i = 0; i < l.length; i++) \n\t{\n\t\tsum += l[i];\n\t}\n\treturn\
    \ sum;\n}\n/*\nReturn product of all elements in the list.\n            \n*/\n\
    double product_element_double(double[] l) \n{\n\tdouble product = 1;\n\tdouble\
    \ i;\n\tfor(i = 0; i < l.length; i++) \n\t{\n\t\tproduct *= l[i];\n\t}\n\treturn\
    \ product;\n}\n/*\nReturn sum of all elements in the list.\n            \n*/\n\
    float sum_element_float(float[] l) \n{\n\tfloat sum = 0;\n\tfloat i;\n\tfor(i\
    \ = 0; i < l.length; i++) \n\t{\n\t\tsum += l[i];\n\t}\n\treturn sum;\n}\n/*\n\
    Return product of all elements in the list.\n            \n*/\nfloat product_element_float(float[]\
    \ l) \n{\n\tfloat product = 1;\n\tfloat i;\n\tfor(i = 0; i < l.length; i++) \n\
    \t{\n\t\tproduct *= l[i];\n\t}\n\treturn product;\n}\n/*\nReturn sum of all elements\
    \ in the list.\n            \n*/", "{\n\tlong max;\n\tmax = l[0];\n\tfor (int\
    \ i = 1; i < l.length; i++)\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\treturn\
    \ max;\n}\n/*\nReturn minimum element in the list.\n            \n*/\nlong min_element(long[]\
    \ l) \n{\n\tlong min;\n\tmin = l[0];\n\tfor (int i = 1; i < l.length; i++)\n\t\
    \tif (l[i] < min)\n\t\t\tmin = l[i];\n\treturn min;\n}\n/*\nReturn sum of all\
    \ elements in the list.\n            \n*/\nlong sum_element(long[] l) \n{\n\t\
    long sum = 0;\n\tfor (int i = 0; i < l.length; i++)\n\t\tsum += l[i];\n\treturn\
    \ sum;\n}\n/*\nReturn product of all elements in the list.\n            \n*/\n\
    long prod_element(long[] l) \n{\n\tlong prod = 1;\n\tfor (int i = 0; i < l.length;\
    \ i++)\n\t\tprod *= l[i];\n\treturn prod;\n}\n/*\nReturn absolute value of all\
    \ elements in the list.\n            \n*/\nlong abs_element(long[] l) \n{\n\t\
    long abs = 0;\n\tfor (int i = 0; i < l.length; i++)\n\t\tabs = max(abs, l[i]);\n\
    \treturn abs;\n}\n/*\nReturn absolute value of all elements in the list.\n   \
    \         \n*/\ndouble abs_element(double[] l) \n{\n\tdouble abs = 0;\n\tfor (int\
    \ i = 0; i < l.length; i++)\n\t\tabs = max(abs, l[i]);\n\treturn abs;\n}\n/*\n\
    Return absolute value of all elements in the list.\n            \n*/\nfloat abs_element(float[]\
    \ l) \n{\n\tfloat abs = 0;\n\tfor (int i = 0; i < l.length; i++)\n\t\tabs = max(abs,\
    \ l[i]);\n\treturn abs;\n}\n/*\nReturn absolute value of all elements in the list.\n\
    \            \n*/", "{\n\tlong max = 0;\n\tfor (int i = 0; i < l.length; i++)\n\
    \t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\treturn max;\n}", "{\n\tlong max;\n\t\
    std.csort(l);\n\tmax = l[0];\n\tfor(int i = 1; i < l.length; ++i)\n\t\tif(l[i]\
    \ > max)\n\t\t\tmax = l[i];\n\treturn max;\n}", "{\n\tlong max;\n\tlong i;\n\t\
    for(i = 0; i < (long)l.length; i++) \n\t{\n\t\tif(l[i] > max) \n\t\t{\n\t\t\t\
    max = l[i];\n\t\t}\n\t}\n\treturn max;\n}", "{\n\tint i;\n\tlong max;\n\tfor(i=0;i<l.length;i++){\n\
    \t\tif(l[i]>max){\n\t\t\tmax=l[i];\n\t\t}\n\t}\n\treturn max;\n}\n/*\nReturn minimum\
    \ element in the list.\n            \n*/\nlong min_element(long[] l) \n{\n\tint\
    \ i;\n\tlong min;\n\tfor(i=0;i<l.length;i++){\n\t\tif(l[i]<min){\n\t\t\tmin=l[i];\n\
    \t\t}\n\t}\n\treturn min;\n}\n/*\nReturn sum of all elements in the list.\n  \
    \          \n*/\nlong sum_element(long[] l) \n{\n\tint i;\n\tlong sum=0;\n\tfor(i=0;i<l.length;i++){\n\
    \t\tsum+=l[i];\n\t}\n\treturn sum;\n}\n/*\nReturn product of all elements in the\
    \ list.\n            \n*/\nlong prod_element(long[] l) \n{\n\tint i;\n\tlong prod=1;\n\
    \tfor(i=0;i<l.length;i++){\n\t\tprod*=l[i];\n\t}\n\treturn prod;\n}\n/*\nReturn\
    \ absolute value of all elements in the list.\n            \n*/\nlong abs_element(long[]\
    \ l) \n{\n\tint i;\n\tlong abs=0;\n\tfor(i=0;i<l.length;i++){\n\t\tabs=abs(l[i]);\n\
    \t}\n\treturn abs;\n}\n/*\nReturn absolute value of all elements in the list.\n\
    \            \n*/\nlong abs_sum(long[] l) \n{\n\tint i;\n\tlong abs=0;\n\tfor(i=0;i<l.length;i++){\n\
    \t\tabs=abs(l[i]);\n\t}\n\treturn abs;\n}\n/*\nReturn absolute value of all elements\
    \ in the list.\n            \n*/\nlong abs_prod(long[] l) \n{\n\tint i;\n\tlong\
    \ abs=1;\n\tfor(i=0;i<l.length;i++){\n\t\tabs*=l[i];\n\t}\n\treturn abs;\n}\n\
    /*\nReturn absolute value of all elements in the list.\n            \n*/\nlong\
    \ abs_max(long[] l) \n{\n\tint i;\n\tlong abs=0;\n\tfor(i=0;i<l.length;i++){\n\
    \t\tabs=max(abs,l[i]);\n\t}\n\treturn abs;\n}\n/*\nReturn absolute value of all\
    \ elements in the list.\n            \n*/\nlong abs_min(long[] l) \n{\n\tint i;\n\
    \tlong abs=0;\n\tfor(i=0;i<l.length;i++){\n\t\tabs=min(abs,l[i]);\n\t}\n\treturn\
    \ abs;\n}\n/*\nReturn absolute value of all elements in the list.\n          \
    \  \n*/\nlong abs_avg(long[] l", "{\n\tlong max = l[0];\n\tfor (int i = 1; i <\
    \ l.length; i++) \n\t{\n\t\tif (l[i] > max) \n\t\t{\n\t\t\tmax = l[i];\n\t\t}\n\
    \t}\n\treturn max;\n}\n/*\nReturn minimum element in the list.\n            \n\
    */\nlong min_element(long[] l) \n{\n\tlong min = l[0];\n\tfor (int i = 1; i <\
    \ l.length; i++) \n\t{\n\t\tif (l[i] < min) \n\t\t{\n\t\t\tmin = l[i];\n\t\t}\n\
    \t}\n\treturn min;\n}\n/*\nReturn sum of all elements in the list.\n         \
    \   \n*/\nlong sum_elements(long[] l) \n{\n\tlong sum = 0;\n\tfor (int i = 0;\
    \ i < l.length; i++) \n\t{\n\t\tsum += l[i];\n\t}\n\treturn sum;\n}\n/*\nReturn\
    \ product of all elements in the list.\n            \n*/\nlong product_elements(long[]\
    \ l) \n{\n\tlong prod = 1;\n\tfor (int i = 0; i < l.length; i++) \n\t{\n\t\tprod\
    \ *= l[i];\n\t}\n\treturn prod;\n}\n/*\nReturn sum of all elements in the list.\n\
    \            \n*/\ndouble sum_elements(double[] l) \n{\n\tdouble sum = 0;\n\t\
    for (int i = 0; i < l.length; i++) \n\t{\n\t\tsum += l[i];\n\t}\n\treturn sum;\n\
    }\n/*\nReturn product of all elements in the list.\n            \n*/\ndouble product_elements(double[]\
    \ l) \n{\n\tdouble prod = 1;\n\tfor (int i = 0; i < l.length; i++) \n\t{\n\t\t\
    prod *= l[i];\n\t}\n\treturn prod;\n}\n/*\nReturn sum of all elements in the list.\n\
    \            \n*/\nfloat sum_elements(float[] l) \n{\n\tfloat sum = 0;\n\tfor\
    \ (int i = 0; i < l.length; i++) \n\t{\n\t\tsum += l[i];\n\t}\n\treturn sum;\n\
    }\n/*\nReturn product of all elements in the list.\n            \n*/\nfloat product_elements(float[]\
    \ l) \n{\n\tfloat prod = 1;\n\tfor (int i = 0; i < l.length; i++) \n\t{\n\t\t\
    prod *= l[i];\n\t}\n\treturn prod;\n}\n/*\nReturn sum of all elements in the list.\n\
    \            \n*/", "{\n\tint i;\n\tlong max;\n\tmax = l[0];\n\tfor(i=1; i<l.length;\
    \ i++)\n\t{\n\t\tif(l[i] > max)\n\t\t\tmax = l[i];\n\t}\n\treturn max;\n}\n/*\n\
    Return minimum element in the list.\n            \n*/\nlong min_element(long[]\
    \ l) \n{\n\tint i;\n\tlong min;\n\tmin = l[0];\n\tfor(i=1; i<l.length; i++)\n\t\
    {\n\t\tif(l[i] < min)\n\t\t\tmin = l[i];\n\t}\n\treturn min;\n}\n/*\nReturn sum\
    \ of all elements in the list.\n            \n*/\nlong sum_elements(long[] l)\
    \ \n{\n\tint i;\n\tlong sum;\n\tsum = 0;\n\tfor(i=0; i<l.length; i++)\n\t\tsum\
    \ += l[i];\n\treturn sum;\n}\n/*\nReturn product of all elements in the list.\n\
    \            \n*/\nlong product_elements(long[] l) \n{\n\tint i;\n\tlong prod;\n\
    \tprod = 1;\n\tfor(i=0; i<l.length; i++)\n\t\tprod *= l[i];\n\treturn prod;\n\
    }\n/*\nReturn sum of all elements in the list.\n            \n*/\ndouble sum_elements(double[]\
    \ l) \n{\n\tint i;\n\tdouble sum;\n\tsum = 0;\n\tfor(i=0; i<l.length; i++)\n\t\
    \tsum += l[i];\n\treturn sum;\n}\n/*\nReturn product of all elements in the list.\n\
    \            \n*/\ndouble product_elements(double[] l) \n{\n\tint i;\n\tdouble\
    \ prod;\n\tprod = 1;\n\tfor(i=0; i<l.length; i++)\n\t\tprod *= l[i];\n\treturn\
    \ prod;\n}\n/*\nReturn sum of all elements in the list.\n            \n*/\nfloat\
    \ sum_elements(float[] l) \n{\n\tint i;\n\tfloat sum;\n\tsum = 0;\n\tfor(i=0;\
    \ i<l.length; i++)\n\t\tsum += l[i];\n\treturn sum;\n}\n/*\nReturn product of\
    \ all elements in the list.\n            \n*/\nfloat product_elements(float[]\
    \ l) \n{\n\tint i;\n\tfloat prod;\n\tprod = 1;\n\tfor(i=0; i<l.length; i++)\n\t\
    \tprod *= l[i];\n\treturn prod;\n}\n/*\nReturn sum of all elements in the list.\n\
    \            \n*/", "{\n\tint i;\n\tlong max = 0;\n\tfor(i = 0; i < l.length;\
    \ i++)\n\t{\n\t\tif(l[i] > max)\n\t\t\tmax = l[i];\n\t}\n\treturn max;\n}\n/*\n\
    Return minimum element in the list.\n            \n*/\nlong min_element(long[]\
    \ l) \n{\n\tint i;\n\tlong min = 0;\n\tfor(i = 0; i < l.length; i++)\n\t{\n\t\t\
    if(l[i] < min)\n\t\t\tmin = l[i];\n\t}\n\treturn min;\n}\n/*\nReturn sum of all\
    \ elements in the list.\n            \n*/\nlong sum_element(long[] l) \n{\n\t\
    int i;\n\tlong sum = 0;\n\tfor(i = 0; i < l.length; i++)\n\t\tsum += l[i];\n\t\
    return sum;\n}\n/*\nReturn product of all elements in the list.\n            \n\
    */\nlong product_element(long[] l) \n{\n\tint i;\n\tlong product = 1;\n\tfor(i\
    \ = 0; i < l.length; i++)\n\t\tproduct *= l[i];\n\treturn product;\n}\n/*\nReturn\
    \ sum of all elements in the list with specified type.\n            \n*/\nlong\
    \ sum_elements(long[] l, int type) \n{\n\tint i;\n\tlong sum = 0;\n\tfor(i = 0;\
    \ i < l.length; i++)\n\t\tsum += l[i];\n\treturn sum;\n}\n/*\nReturn product of\
    \ all elements in the list with specified type.\n            \n*/\nlong product_elements(long[]\
    \ l, int type) \n{\n\tint i;\n\tlong product = 1;\n\tfor(i = 0; i < l.length;\
    \ i++)\n\t\tproduct *= l[i];\n\treturn product;\n}\n/*\nReturn sum of all elements\
    \ in the list with specified type.\n            \n*/\ndouble sum_elements(double[]\
    \ l, int type) \n{\n\tint i;\n\tdouble sum = 0;\n\tfor(i = 0; i < l.length; i++)\n\
    \t\tsum += l[i];\n\treturn sum;\n}\n/*\nReturn product of all elements in the\
    \ list with specified type.\n            \n*/\ndouble product_elements(double[]\
    \ l, int type) \n{\n\tint i;\n\tdouble product = 1;\n\tfor(i = 0; i < l.length;\
    \ i++)\n\t\tproduct *= l[i];\n\treturn product;\n}\n/*\nReturn sum of all elements\
    \ in the list with specified type.\n            \n*/\nfloat sum_elements(float[]\
    \ l, int type) \n{\n\tint i;\n\tfloat sum = 0;\n\tfor(i = 0; i < l.length; i++)\n\
    \t\tsum += l[i];\n\treturn sum;\n}\n/*\nReturn product of all elements in the\
    \ list with specified type.\n            \n*/\nfloat product_elements(float[]\
    \ l, int type) \n{\n\tint i;\n\tfloat product = 1;\n\tfor(i = 0; i < ", "{\n\t\
    long max = l[0];\n\tfor (int i = 1; i < l.length; i++)\n\t\tif (l[i] > max)\n\t\
    \t\tmax = l[i];\n\treturn max;\n}\n/*\nReturn minimum element in the list.\n \
    \           \n*/\nlong min_element(long[] l) \n{\n\tlong min = l[0];\n\tfor (int\
    \ i = 1; i < l.length; i++)\n\t\tif (l[i] < min)\n\t\t\tmin = l[i];\n\treturn\
    \ min;\n}\n/*\nReturn sum of all elements in the list.\n            \n*/\nlong\
    \ sum_elements(long[] l) \n{\n\tlong sum = 0;\n\tfor (int i = 0; i < l.length;\
    \ i++)\n\t\tsum += l[i];\n\treturn sum;\n}\n/*\nReturn product of all elements\
    \ in the list.\n            \n*/\nlong product_elements(long[] l) \n{\n\tlong\
    \ product = 1;\n\tfor (int i = 0; i < l.length; i++)\n\t\tproduct *= l[i];\n\t\
    return product;\n}\n/*\nReturn sum of all elements in the list.\n            \n\
    */\ndouble sum_elements(double[] l) \n{\n\tdouble sum = 0;\n\tfor (int i = 0;\
    \ i < l.length; i++)\n\t\tsum += l[i];\n\treturn sum;\n}\n/*\nReturn product of\
    \ all elements in the list.\n            \n*/\ndouble product_elements(double[]\
    \ l) \n{\n\tdouble product = 1;\n\tfor (int i = 0; i < l.length; i++)\n\t\tproduct\
    \ *= l[i];\n\treturn product;\n}\n/*\nReturn sum of all elements in the list.\n\
    \            \n*/\nfloat sum_elements(float[] l) \n{\n\tfloat sum = 0;\n\tfor\
    \ (int i = 0; i < l.length; i++)\n\t\tsum += l[i];\n\treturn sum;\n}\n/*\nReturn\
    \ product of all elements in the list.\n            \n*/\nfloat product_elements(float[]\
    \ l) \n{\n\tfloat product = 1;\n\tfor (int i = 0; i < l.length; i++)\n\t\tproduct\
    \ *= l[i];\n\treturn product;\n}\n/*\nReturn sum of all elements in the list.\n\
    \            \n*/", "{\n\tint i;\n\tlong max;\n\t\n\tmax = l[0];\n\tfor(i=1; i<l.length;\
    \ i++)\n\t{\n\t\tif(l[i] > max)\n\t\t\tmax = l[i];\n\t}\n\treturn max;\n}", "{\n\
    \tlong max = l[0];\n\tlong i;\n\tfor (i = 1; i < l.length; ++i)\n\t\tif (l[i]\
    \ > max)\n\t\t\tmax = l[i];\n\treturn max;\n}\n/*\nReturn minimum element in the\
    \ list.\n            \n*/\nlong min_element(long[] l) \n{\n\tlong min = l[0];\n\
    \tlong i;\n\tfor (i = 1; i < l.length; ++i)\n\t\tif (l[i] < min)\n\t\t\tmin =\
    \ l[i];\n\treturn min;\n}\n/*\nReturn sum of all elements in the list.\n     \
    \       \n*/\nlong sum_element(long[] l) \n{\n\tlong sum = 0;\n\tlong i;\n\tfor\
    \ (i = 0; i < l.length; ++i)\n\t\tsum += l[i];\n\treturn sum;\n}\n/*\nReturn product\
    \ of all elements in the list.\n            \n*/\nlong prod_element(long[] l)\
    \ \n{\n\tlong prod = 1;\n\tlong i;\n\tfor (i = 0; i < l.length; ++i)\n\t\tprod\
    \ *= l[i];\n\treturn prod;\n}\n/*\nReturn absolute value of all elements in the\
    \ list.\n            \n*/\nlong abs_element(long[] l) \n{\n\tlong i;\n\tfor (i\
    \ = 0; i < l.length; ++i)\n\t\tl[i] = abs(l[i]);\n\treturn l;\n}\n/*\nReturn absolute\
    \ value of all elements in the list.\n            \n*/\nlong abs_element2(long[]\
    \ l) \n{\n\tlong i;\n\tfor (i = 0; i < l.length; ++i)\n\t\tl[i] = abs(l[i]);\n\
    \treturn l;\n}\n/*\nReturn absolute value of all elements in the list.\n     \
    \       \n*/\nlong abs_element3(long[] l) \n{\n\tlong i;\n\tfor (i = 0; i < l.length;\
    \ ++i)\n\t\tl[i] = abs(l[i]);\n\treturn l;\n}\n/*\nReturn absolute value of all\
    \ elements in the list.\n            \n*/\nlong abs_element4(long[] l) \n{\n\t\
    long i;\n\tfor (i = 0; i < l.length; ++i)\n\t\tl[i] = abs(l[i]);\n\treturn l;\n\
    }\n/*\nReturn absolute value of all elements in the list.\n            \n*/\n\
    long abs_element5(long[] l) \n{\n\tlong i;\n\tfor (i = 0; i < l.length; ++i)\n\
    \t\tl[i] = abs(l[i]);\n\treturn l;\n}\n/*\nReturn absolute value of all elements\
    \ in the list.\n            \n*/\nlong abs_element6(long[] l) \n{\n\tlong i;\n\
    \tfor (i = 0; i < l.length; ++i)\n\t\tl[i] = abs(l[i]);\n\treturn l;\n}\n/*\n\
    Return absolute value of all elements in the list.\n            \n*/\nlong abs_element7(long[]\
    \ l) \n{\n\t", "{\n\tint i;\n\tlong max = 0;\n\tfor(i = 0; i < l.length; ++i)\n\
    \t{\n\t\tif(l[i] > max)\n\t\t\tmax = l[i];\n\t}\n\treturn max;\n}\n/*\nReturn\
    \ minimum element in the list.\n            \n*/\nlong min_element(long[] l) \n\
    {\n\tint i;\n\tlong min = 0;\n\tfor(i = 0; i < l.length; ++i)\n\t{\n\t\tif(l[i]\
    \ < min)\n\t\t\tmin = l[i];\n\t}\n\treturn min;\n}\n/*\nReturn sum of all elements\
    \ in the list.\n            \n*/\nlong sum_element(long[] l) \n{\n\tint i;\n\t\
    long sum = 0;\n\tfor(i = 0; i < l.length; ++i)\n\t\tsum += l[i];\n\treturn sum;\n\
    }\n/*\nReturn product of all elements in the list.\n            \n*/\nlong product_element(long[]\
    \ l) \n{\n\tint i;\n\tlong prod = 1;\n\tfor(i = 0; i < l.length; ++i)\n\t\tprod\
    \ *= l[i];\n\treturn prod;\n}\n/*\nReturn sum of all elements in the list.\n \
    \           \n*/\ndouble sum_elements(double[] l) \n{\n\tint i;\n\tdouble sum\
    \ = 0;\n\tfor(i = 0; i < l.length; ++i)\n\t\tsum += l[i];\n\treturn sum;\n}\n\
    /*\nReturn product of all elements in the list.\n            \n*/\ndouble product_elements(double[]\
    \ l) \n{\n\tint i;\n\tdouble prod = 1;\n\tfor(i = 0; i < l.length; ++i)\n\t\t\
    prod *= l[i];\n\treturn prod;\n}\n/*\nReturn sum of all elements in the list.\n\
    \            \n*/\nfloat sum_elements(float[] l) \n{\n\tint i;\n\tfloat sum =\
    \ 0;\n\tfor(i = 0; i < l.length; ++i)\n\t\tsum += l[i];\n\treturn sum;\n}\n/*\n\
    Return product of all elements in the list.\n            \n*/\nfloat product_elements(float[]\
    \ l) \n{\n\tint i;\n\tfloat prod = 1;\n\tfor(i = 0; i < l.length; ++i)\n\t\tprod\
    \ *= l[i];\n\treturn prod;\n}\n/*\nReturn sum of all elements in the list.\n \
    \           \n*/", "{\n\tint i;\n\tlong max = l[0];\n\tfor(i=1; i<l.length; i++)\n\
    \t\tif(l[i] > max)\n\t\t\tmax = l[i];\n\treturn max;\n}\n/*\nReturn minimum element\
    \ in the list.\n            \n*/\nlong min_element(long[] l) \n{\n\tint i;\n\t\
    long min = l[0];\n\tfor(i=1; i<l.length; i++)\n\t\tif(l[i] < min)\n\t\t\tmin =\
    \ l[i];\n\treturn min;\n}\n/*\nReturn sum of all elements in the list.\n     \
    \       \n*/\nlong sum_element(long[] l) \n{\n\tint i;\n\tlong sum = 0;\n\tfor(i=1;\
    \ i<l.length; i++)\n\t\tsum += l[i];\n\treturn sum;\n}\n/*\nReturn product of\
    \ all elements in the list.\n            \n*/\nlong product_element(long[] l)\
    \ \n{\n\tint i;\n\tlong product = 1;\n\tfor(i=1; i<l.length; i++)\n\t\tproduct\
    \ *= l[i];\n\treturn product;\n}\n/*\nReturn sum of all elements in the list with\
    \ specified type.\n            \n*/\nlong sum_elements(long[] l, int type) \n\
    {\n\tint i;\n\tlong sum = 0;\n\tfor(i=1; i<l.length; i++)\n\t\tif(type == 0)\n\
    \t\t\tsum += l[i];\n\t\telse if(type == 1)\n\t\t\tsum += l[i] * l[i];\n\t\telse\
    \ if(type == 2)\n\t\t\tsum += l[i] * l[i] * l[i];\n\t\telse if(type == 3)\n\t\t\
    \tsum += l[i] * l[i] * l[i] * l[i];\n\t\telse if(type == 4)\n\t\t\tsum += l[i]\
    \ * l[i] * l[i] * l[i] * l[i];\n\t\telse if(type == 5)\n\t\t\tsum += l[i] * l[i]\
    \ * l[i] * l[i] * l[i] * l[i];\n\t\telse if(type == 6)\n\t\t\tsum += l[i] * l[i]\
    \ * l[i] * l[i] * l[i] * l[i] * l[i];\n\t\telse if(type == 7)\n\t\t\tsum += l[i]\
    \ * l[i] * l[i] * l[i] * l[i] * l[i] * l[i] * l[i];\n\t\telse if(type == 8)\n\t\
    \t\tsum += l[i] * l[i] * l[i] * l[i] * l[i] * l[i] * l[i] * l[i] * l[i];\n\t\t\
    else if(type == 9)\n\t\t\tsum += l[i] * l[i] * l[i] * l[i] * l[i] * l[i] * l[i]\
    \ * l[i] * l[i] * l[i];\n\t\telse if(type == 10)\n\t\t\tsum += l[i] * l[i] * l[i]\
    \ * l[i] * l[i] * l[i] * l[i] * l[i] * l[i] * l", "{\n\tlong max = l[0];\n\tfor\
    \ (int i = 1; i < l.length; ++i)\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\treturn\
    \ max;\n}\n/*\nReturn minimum element in the list.\n            \n*/\nlong min_element(long[]\
    \ l) \n{\n\tlong min = l[0];\n\tfor (int i = 1; i < l.length; ++i)\n\t\tif (l[i]\
    \ < min)\n\t\t\tmin = l[i];\n\treturn min;\n}\n/*\nReturn sum of all elements\
    \ in the list.\n            \n*/\nlong sum_element(long[] l) \n{\n\tlong sum =\
    \ 0;\n\tfor (int i = 0; i < l.length; ++i)\n\t\tsum += l[i];\n\treturn sum;\n\
    }\n/*\nReturn product of all elements in the list.\n            \n*/\nlong product_element(long[]\
    \ l) \n{\n\tlong prod = 1;\n\tfor (int i = 0; i < l.length; ++i)\n\t\tprod *=\
    \ l[i];\n\treturn prod;\n}\n/*\nReturn absolute value of all elements in the list.\n\
    \            \n*/\nlong abs_element(long[] l) \n{\n\tlong abs = 0;\n\tfor (int\
    \ i = 0; i < l.length; ++i)\n\t\tabs = max(abs, abs(l[i]));\n\treturn abs;\n}\n\
    /*\nReturn absolute value of all elements in the list.\n            \n*/\ndouble\
    \ abs_element(double[] l) \n{\n\tdouble abs = 0;\n\tfor (int i = 0; i < l.length;\
    \ ++i)\n\t\tabs = max(abs, abs(l[i]));\n\treturn abs;\n}\n/*\nReturn absolute\
    \ value of all elements in the list.\n            \n*/\nfloat abs_element(float[]\
    \ l) \n{\n\tfloat abs = 0;\n\tfor (int i = 0; i < l.length; ++i)\n\t\tabs = max(abs,\
    \ abs(l[i]));\n\treturn abs;\n}\n/*\nReturn absolute value of all elements in\
    \ the list.\n            \n*/", "{\n\tlong max = 0;\n\tlong i;\n\tfor(i = 0; i\
    \ < l.length; ++i)\n\t{\n\t\tif(l[i] > max)\n\t\t\tmax = l[i];\n\t}\n\treturn\
    \ max;\n}\n/*\nReturn minimum element in the list.\n            \n*/\nlong min_element(long[]\
    \ l) \n{\n\tlong min = 0;\n\tlong i;\n\tfor(i = 0; i < l.length; ++i)\n\t{\n\t\
    \tif(l[i] < min)\n\t\t\tmin = l[i];\n\t}\n\treturn min;\n}\n/*\nReturn sum of\
    \ all elements in the list.\n            \n*/\nlong sum_elements(long[] l) \n\
    {\n\tlong sum = 0;\n\tlong i;\n\tfor(i = 0; i < l.length; ++i)\n\t\tsum += l[i];\n\
    \treturn sum;\n}\n/*\nReturn product of all elements in the list.\n          \
    \  \n*/\nlong product_elements(long[] l) \n{\n\tlong product = 1;\n\tlong i;\n\
    \tfor(i = 0; i < l.length; ++i)\n\t\tproduct *= l[i];\n\treturn product;\n}\n\
    /*\nReturn sum of all elements in the list.\n            \n*/\ndouble sum_elements_double(double[]\
    \ l) \n{\n\tdouble sum = 0;\n\tlong i;\n\tfor(i = 0; i < l.length; ++i)\n\t\t\
    sum += l[i];\n\treturn sum;\n}\n/*\nReturn product of all elements in the list.\n\
    \            \n*/\ndouble product_elements_double(double[] l) \n{\n\tdouble product\
    \ = 1;\n\tlong i;\n\tfor(i = 0; i < l.length; ++i)\n\t\tproduct *= l[i];\n\treturn\
    \ product;\n}\n/*\nReturn sum of all elements in the list.\n            \n*/\n\
    float sum_elements_float(float[] l) \n{\n\tfloat sum = 0;\n\tlong i;\n\tfor(i\
    \ = 0; i < l.length; ++i)\n\t\tsum += l[i];\n\treturn sum;\n}\n/*\nReturn product\
    \ of all elements in the list.\n            \n*/\nfloat product_elements_float(float[]\
    \ l) \n{\n\tfloat product = 1;\n\tlong i;\n\tfor(i = 0; i < l.length; ++i)\n\t\
    \tproduct *= l[i];\n\treturn product;\n}\n/*\nReturn sum of all elements in the\
    \ list.\n            \n*/", "{\n\tlong max = 0;\n\tlong i;\n\tfor (i = 0; i <\
    \ l.length; i++)\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\treturn max;\n}\n/*\n\
    Return minimum element in the list.\n            \n*/\nlong min_element(long[]\
    \ l) \n{\n\tlong min = 0;\n\tlong i;\n\tfor (i = 0; i < l.length; i++)\n\t\tif\
    \ (l[i] < min)\n\t\t\tmin = l[i];\n\treturn min;\n}\n/*\nReturn sum of all elements\
    \ in the list.\n            \n*/\nlong sum_element(long[] l) \n{\n\tlong sum =\
    \ 0;\n\tlong i;\n\tfor (i = 0; i < l.length; i++)\n\t\tsum += l[i];\n\treturn\
    \ sum;\n}\n/*\nReturn product of all elements in the list.\n            \n*/\n\
    long product_element(long[] l) \n{\n\tlong product = 1;\n\tlong i;\n\tfor (i =\
    \ 0; i < l.length; i++)\n\t\tproduct *= l[i];\n\treturn product;\n}\n/*\nReturn\
    \ sum of all elements in the list.\n            \n*/\ndouble sum_element_double(double[]\
    \ l) \n{\n\tdouble sum = 0;\n\tdouble i;\n\tfor (i = 0; i < l.length; i++)\n\t\
    \tsum += l[i];\n\treturn sum;\n}\n/*\nReturn product of all elements in the list.\n\
    \            \n*/\ndouble product_element_double(double[] l) \n{\n\tdouble product\
    \ = 1;\n\tdouble i;\n\tfor (i = 0; i < l.length; i++)\n\t\tproduct *= l[i];\n\t\
    return product;\n}\n/*\nReturn sum of all elements in the list.\n            \n\
    */\nfloat sum_element_float(float[] l) \n{\n\tfloat sum = 0;\n\tfloat i;\n\tfor\
    \ (i = 0; i < l.length; i++)\n\t\tsum += l[i];\n\treturn sum;\n}\n/*\nReturn product\
    \ of all elements in the list.\n            \n*/\nfloat product_element_float(float[]\
    \ l) \n{\n\tfloat product = 1;\n\tfloat i;\n\tfor (i = 0; i < l.length; i++)\n\
    \t\tproduct *= l[i];\n\treturn product;\n}\n/*\nReturn sum of all elements in\
    \ the list.\n            \n*/", "{\n\tint i;\n\tlong max = l[0];\n\tfor (i = 1;\
    \ i < l.length; ++i)\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\treturn max;\n}",
  "{\n\tint i;\n\tlong max;\n\tmax = l[0];\n\tfor (i = 1; i < l.length; i++)\n\t\t\
    if (l[i] > max)\n\t\t\tmax = l[i];\n\treturn max;\n}", "{\n\tlong max = 0;\n\t\
    long i = 0;\n\twhile (i < l.length) \n\t{\n\t\tif (l[i] > max) \n\t\t{\n\t\t\t\
    max = l[i];\n\t\t}\n\t\ti++;\n\t}\n\treturn max;\n}\n/*\nReturn minimum element\
    \ in the list.\n            \n*/\nlong min_element(long[] l) \n{\n\tlong min =\
    \ 0;\n\tlong i = 0;\n\twhile (i < l.length) \n\t{\n\t\tif (l[i] < min) \n\t\t\
    {\n\t\t\tmin = l[i];\n\t\t}\n\t\ti++;\n\t}\n\treturn min;\n}\n/*\nReturn sum of\
    \ all elements in the list.\n            \n*/\nlong sum_elements(long[] l) \n\
    {\n\tlong sum = 0;\n\tlong i = 0;\n\twhile (i < l.length) \n\t{\n\t\tsum += l[i];\n\
    \t\ti++;\n\t}\n\treturn sum;\n}\n/*\nReturn product of all elements in the list.\n\
    \            \n*/\nlong product_elements(long[] l) \n{\n\tlong product = 1;\n\t\
    long i = 0;\n\twhile (i < l.length) \n\t{\n\t\tproduct *= l[i];\n\t\ti++;\n\t\
    }\n\treturn product;\n}\n/*\nReturn mean of all elements in the list.\n      \
    \      \n*/\ndouble mean_elements(long[] l) \n{\n\tlong sum = 0;\n\tlong i = 0;\n\
    \twhile (i < l.length) \n\t{\n\t\tsum += l[i];\n\t\ti++;\n\t}\n\treturn (double)sum\
    \ / l.length;\n}\n/*\nReturn median of all elements in the list.\n           \
    \ \n*/\ndouble median_elements(long[] l) \n{\n\tlong mid = l.length / 2;\n\tlong\
    \ sum = 0;\n\tlong i = 0;\n\twhile (i < l.length) \n\t{\n\t\tsum += l[i];\n\t\t\
    i++;\n\t}\n\tif (l.length % 2 == 0) \n\t{\n\t\treturn (double)sum / mid;\n\t}\
    \ \n\telse \n\t{\n\t\treturn (double)sum / mid + l[mid];\n\t}\n}\n/*\nReturn standard\
    \ deviation of all elements in the list.\n            \n*/\ndouble std_dev_elements(long[]\
    \ l) \n{\n\tlong sum = 0;\n\tlong i = 0;\n\twhile (i < l.length) \n\t{\n\t\tsum\
    \ += l[i] * l[i];\n\t\ti++;\n\t}\n\treturn (double)Math.sqrt(sum / (l.length -\
    \ 1));\n}\n/*\nReturn sum of all elements in the list.\n            \n*/\ndouble\
    \ sum_elements_double(double[] l) \n{\n\tdouble sum = 0;\n\tlong i = 0;\n\twhile\
    \ (i < l.length", "{\n\tlong max;\n\tstd.sort(l);\n\tmax = l[0];\n\tfor (int i\
    \ = 1; i < l.length; ++i)\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\treturn max;\n\
    }", "{\n\tint i;\n\tlong max = l[0];\n\tfor(i = 1; i < l.length; i++){\n\t\tif(l[i]\
    \ > max){\n\t\t\tmax = l[i];\n\t\t}\n\t}\n\treturn max;\n}\n/*\nReturn minimum\
    \ element in the list.\n            \n*/\nlong min_element(long[] l) \n{\n\tint\
    \ i;\n\tlong min = l[0];\n\tfor(i = 1; i < l.length; i++){\n\t\tif(l[i] < min){\n\
    \t\t\tmin = l[i];\n\t\t}\n\t}\n\treturn min;\n}\n/*\nReturn sum of all elements\
    \ in the list.\n            \n*/\nlong sum_element(long[] l) \n{\n\tint i;\n\t\
    long sum = 0;\n\tfor(i = 0; i < l.length; i++){\n\t\tsum += l[i];\n\t}\n\treturn\
    \ sum;\n}\n/*\nReturn product of all elements in the list.\n            \n*/\n\
    long product_element(long[] l) \n{\n\tint i;\n\tlong product = 1;\n\tfor(i = 0;\
    \ i < l.length; i++){\n\t\tproduct *= l[i];\n\t}\n\treturn product;\n}\n/*\nReturn\
    \ absolute value of all elements in the list.\n            \n*/\nlong abs_element(long[]\
    \ l) \n{\n\tint i;\n\tlong abs = 0;\n\tfor(i = 0; i < l.length; i++){\n\t\tabs\
    \ = abs(l[i]);\n\t}\n\treturn abs;\n}\n/*\nReturn absolute value of all elements\
    \ in the list.\n            \n*/\ndouble abs_element(double[] l) \n{\n\tint i;\n\
    \tdouble abs = 0;\n\tfor(i = 0; i < l.length; i++){\n\t\tabs = abs(l[i]);\n\t\
    }\n\treturn abs;\n}\n/*\nReturn absolute value of all elements in the list.\n\
    \            \n*/\nfloat abs_element(float[] l) \n{\n\tint i;\n\tfloat abs = 0;\n\
    \tfor(i = 0; i < l.length; i++){\n\t\tabs = abs(l[i]);\n\t}\n\treturn abs;\n}\n\
    /*\nReturn absolute value of all elements in the list.\n            \n*/", "{\n\
    \tint i;\n\tlong max;\n\tmax = l[0];\n\tfor (i = 1; i < l.length; ++i)\n\t\tif\
    \ (l[i] > max)\n\t\t\tmax = l[i];\n\treturn max;\n}\n/*\nReturn minimum element\
    \ in the list.\n            \n*/\nlong min_element(long[] l) \n{\n\tint i;\n\t\
    long min;\n\tmin = l[0];\n\tfor (i = 1; i < l.length; ++i)\n\t\tif (l[i] < min)\n\
    \t\t\tmin = l[i];\n\treturn min;\n}\n/*\nReturn sum of all elements in the list.\n\
    \            \n*/\nlong sum_elements(long[] l) \n{\n\tint i;\n\tlong sum;\n\t\
    sum = 0;\n\tfor (i = 0; i < l.length; ++i)\n\t\tsum += l[i];\n\treturn sum;\n\
    }\n/*\nReturn product of all elements in the list.\n            \n*/\nlong product_elements(long[]\
    \ l) \n{\n\tint i;\n\tlong product;\n\tproduct = 1;\n\tfor (i = 0; i < l.length;\
    \ ++i)\n\t\tproduct *= l[i];\n\treturn product;\n}\n/*\nReturn absolute value\
    \ of all elements in the list.\n            \n*/\nlong abs_elements(long[] l)\
    \ \n{\n\tint i;\n\tlong abs;\n\tabs = 0;\n\tfor (i = 0; i < l.length; ++i)\n\t\
    \tabs = max(abs, l[i]);\n\treturn abs;\n}\n/*\nReturn absolute value of all elements\
    \ in the list.\n            \n*/\ndouble abs_elements(double[] l) \n{\n\tint i;\n\
    \tdouble abs;\n\tabs = 0;\n\tfor (i = 0; i < l.length; ++i)\n\t\tabs = max(abs,\
    \ l[i]);\n\treturn abs;\n}\n/*\nReturn absolute value of all elements in the list.\n\
    \            \n*/\nfloat abs_elements(float[] l) \n{\n\tint i;\n\tfloat abs;\n\
    \tabs = 0;\n\tfor (i = 0; i < l.length; ++i)\n\t\tabs = max(abs, l[i]);\n\treturn\
    \ abs;\n}\n/*\nReturn absolute value of all elements in the list.\n          \
    \  \n*/\nlong long abs_elements(long long[] l) \n{\n\tint i;\n\tlong long abs;\n\
    \tabs = 0;\n\tfor (i = 0; i < l.length; ++i)\n\t\tabs = max(abs, l[i]);\n\treturn\
    \ abs;\n}\n/*\nReturn absolute value of all elements in the list.\n          \
    \  \n*/\ndouble abs_elements(double[] l, int size) \n{\n\tint i;\n\tdouble abs;\n\
    \tabs = 0;\n\tfor (i = 0; i < size; ++i)\n\t\tabs = max(abs, l[i]);\n\treturn\
    \ abs;\n}\n/*\nReturn ", "{\n\tlong max = l[0];\n\tfor(int i = 1; i < l.length;\
    \ i++)\n\t\tif(l[i] > max)\n\t\t\tmax = l[i];\n\treturn max;\n}\n/*\nReturn minimum\
    \ element in the list.\n            \n*/\nlong min_element(long[] l) \n{\n\tlong\
    \ min = l[0];\n\tfor(int i = 1; i < l.length; i++)\n\t\tif(l[i] < min)\n\t\t\t\
    min = l[i];\n\treturn min;\n}\n/*\nReturn sum of all elements in the list.\n \
    \           \n*/\nlong sum_array(long[] l) \n{\n\tlong sum = 0;\n\tfor(int i =\
    \ 0; i < l.length; i++)\n\t\tsum += l[i];\n\treturn sum;\n}\n/*\nReturn product\
    \ of all elements in the list.\n            \n*/\nlong prod_array(long[] l) \n\
    {\n\tlong prod = 1;\n\tfor(int i = 0; i < l.length; i++)\n\t\tprod *= l[i];\n\t\
    return prod;\n}\n/*\nReturn sum of all elements in the list.\n            \n*/\n\
    double sum_array(double[] l) \n{\n\tdouble sum = 0;\n\tfor(int i = 0; i < l.length;\
    \ i++)\n\t\tsum += l[i];\n\treturn sum;\n}\n/*\nReturn product of all elements\
    \ in the list.\n            \n*/\ndouble prod_array(double[] l) \n{\n\tdouble\
    \ prod = 1;\n\tfor(int i = 0; i < l.length; i++)\n\t\tprod *= l[i];\n\treturn\
    \ prod;\n}\n/*\nReturn sum of all elements in the list.\n            \n*/\nfloat\
    \ sum_array(float[] l) \n{\n\tfloat sum = 0;\n\tfor(int i = 0; i < l.length; i++)\n\
    \t\tsum += l[i];\n\treturn sum;\n}\n/*\nReturn product of all elements in the\
    \ list.\n            \n*/\nfloat prod_array(float[] l) \n{\n\tfloat prod = 1;\n\
    \tfor(int i = 0; i < l.length; i++)\n\t\tprod *= l[i];\n\treturn prod;\n}\n/*\n\
    Return sum of all elements in the list.\n            \n*/", "{\n\tlong max = l[0];\n\
    \tfor (int i = 1; i < l.length; i++)\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\
    \treturn max;\n}\n/*\nReturn minimum element in the list.\n            \n*/\n\
    long min_element(long[] l) \n{\n\tlong min = l[0];\n\tfor (int i = 1; i < l.length;\
    \ i++)\n\t\tif (l[i] < min)\n\t\t\tmin = l[i];\n\treturn min;\n}\n/*\nReturn sum\
    \ of all elements in the list.\n            \n*/\nlong sum_element(long[] l) \n\
    {\n\tlong sum = 0;\n\tfor (int i = 0; i < l.length; i++)\n\t\tsum += l[i];\n\t\
    return sum;\n}\n/*\nReturn product of all elements in the list.\n            \n\
    */\nlong product_element(long[] l) \n{\n\tlong product = 1;\n\tfor (int i = 0;\
    \ i < l.length; i++)\n\t\tproduct *= l[i];\n\treturn product;\n}\n/*\nReturn absolute\
    \ value of all elements in the list.\n            \n*/\nlong abs_element(long[]\
    \ l) \n{\n\tlong abs = 0;\n\tfor (int i = 0; i < l.length; i++)\n\t\tabs = max(abs,\
    \ l[i]);\n\treturn abs;\n}\n/*\nReturn absolute value of all elements in the list.\n\
    \            \n*/\ndouble abs_element(double[] l) \n{\n\tdouble abs = 0;\n\tfor\
    \ (int i = 0; i < l.length; i++)\n\t\tabs = max(abs, l[i]);\n\treturn abs;\n}\n\
    /*\nReturn absolute value of all elements in the list.\n            \n*/\nfloat\
    \ abs_element(float[] l) \n{\n\tfloat abs = 0;\n\tfor (int i = 0; i < l.length;\
    \ i++)\n\t\tabs = max(abs, l[i]);\n\treturn abs;\n}\n/*\nReturn absolute value\
    \ of all elements in the list.\n            \n*/", "{\n\tlong max = l[0];\n\t\
    for (int i = 1; i < l.length; ++i)\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\t\
    return max;\n}", "{\n\tlong max;\n\tmax = l[0];\n\tfor(int i=1; i<l.length; i++)\n\
    \t{\n\t\tif(l[i] > max)\n\t\t\tmax = l[i];\n\t}\n\treturn max;\n}", "{\n\tlong\
    \ max = l[0];\n\tfor (int i = 1; i < l.length; ++i)\n\t\tif (l[i] > max)\n\t\t\
    \tmax = l[i];\n\treturn max;\n}\n/*\nReturn minimum element in the list.\n   \
    \         \n*/\nlong min_element(long[] l) \n{\n\tlong min = l[0];\n\tfor (int\
    \ i = 1; i < l.length; ++i)\n\t\tif (l[i] < min)\n\t\t\tmin = l[i];\n\treturn\
    \ min;\n}\n/*\nReturn sum of all elements in the list.\n            \n*/\nlong\
    \ sum_array(long[] l) \n{\n\tlong sum = 0;\n\tfor (int i = 0; i < l.length; ++i)\n\
    \t\tsum += l[i];\n\treturn sum;\n}\n/*\nReturn product of all elements in the\
    \ list.\n            \n*/\nlong product_array(long[] l) \n{\n\tlong prod = 1;\n\
    \tfor (int i = 0; i < l.length; ++i)\n\t\tprod *= l[i];\n\treturn prod;\n}\n/*\n\
    Return sum of all elements in the list.\n            \n*/\ndouble sum_array(double[]\
    \ l) \n{\n\tdouble sum = 0;\n\tfor (int i = 0; i < l.length; ++i)\n\t\tsum +=\
    \ l[i];\n\treturn sum;\n}\n/*\nReturn product of all elements in the list.\n \
    \           \n*/\ndouble product_array(double[] l) \n{\n\tdouble prod = 1;\n\t\
    for (int i = 0; i < l.length; ++i)\n\t\tprod *= l[i];\n\treturn prod;\n}\n/*\n\
    Return sum of all elements in the list.\n            \n*/\nfloat sum_array(float[]\
    \ l) \n{\n\tfloat sum = 0;\n\tfor (int i = 0; i < l.length; ++i)\n\t\tsum += l[i];\n\
    \treturn sum;\n}\n/*\nReturn product of all elements in the list.\n          \
    \  \n*/\nfloat product_array(float[] l) \n{\n\tfloat prod = 1;\n\tfor (int i =\
    \ 0; i < l.length; ++i)\n\t\tprod *= l[i];\n\treturn prod;\n}\n/*\nReturn sum\
    \ of all elements in the list.\n            \n*/", "{\n\tint i;\n\tlong max =\
    \ l[0];\n\tfor(i = 1; i < l.length; ++i)\n\t\tif(l[i] > max)\n\t\t\tmax = l[i];\n\
    \treturn max;\n}\n/*\nReturn minimum element in the list.\n            \n*/\n\
    long min_element(long[] l) \n{\n\tint i;\n\tlong min = l[0];\n\tfor(i = 1; i <\
    \ l.length; ++i)\n\t\tif(l[i] < min)\n\t\t\tmin = l[i];\n\treturn min;\n}\n/*\n\
    Return sum of all elements in the list.\n            \n*/\nlong sum_element(long[]\
    \ l) \n{\n\tint i;\n\tlong sum = 0;\n\tfor(i = 0; i < l.length; ++i)\n\t\tsum\
    \ += l[i];\n\treturn sum;\n}\n/*\nReturn product of all elements in the list.\n\
    \            \n*/\nlong product_element(long[] l) \n{\n\tint i;\n\tlong product\
    \ = 1;\n\tfor(i = 0; i < l.length; ++i)\n\t\tproduct *= l[i];\n\treturn product;\n\
    }\n/*\nReturn absolute value of all elements in the list.\n            \n*/\n\
    long abs_element(long[] l) \n{\n\tint i;\n\tlong abs = 0;\n\tfor(i = 0; i < l.length;\
    \ ++i)\n\t\tabs = max(abs, l[i]);\n\treturn abs;\n}\n/*\nReturn absolute value\
    \ of all elements in the list.\n            \n*/\nlong abs_max(long[] l) \n{\n\
    \tint i;\n\tlong abs = 0;\n\tfor(i = 0; i < l.length; ++i)\n\t\tabs = max(abs,\
    \ l[i]);\n\treturn abs;\n}\n/*\nReturn absolute value of all elements in the list.\n\
    \            \n*/\nlong abs_min(long[] l) \n{\n\tint i;\n\tlong abs = 0;\n\tfor(i\
    \ = 0; i < l.length; ++i)\n\t\tabs = max(abs, l[i]);\n\treturn abs;\n}\n/*\nReturn\
    \ absolute value of all elements in the list.\n            \n*/\nlong abs_sum(long[]\
    \ l) \n{\n\tint i;\n\tlong abs = 0;\n\tfor(i = 0; i < l.length; ++i)\n\t\tabs\
    \ = max(abs, l[i]);\n\treturn abs;\n}\n/*\nReturn absolute value of all elements\
    \ in the list.\n            \n*/\nlong abs_product(long[] l) \n{\n\tint i;\n\t\
    long abs = 0;\n\tfor(i = 0; i < l.length; ++i)\n\t\tabs = max(abs, l[i]);\n\t\
    return abs;\n}\n/*\nReturn absolute value of all elements in the list.\n     \
    \       \n*/\nlong abs_max(long[] l) \n{\n\tint i;\n\tlong abs = 0;\n\tfor(i =\
    \ 0; i < l.length; ++i)\n", "{\n\tlong max = l[0];\n\tlong i;\n\tfor (i = 1; i\
    \ < l.length; i++) {\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\t}\n\treturn max;\n\
    }\n/*\nReturn minimum element in the list.\n            \n*/\nlong min_element(long[]\
    \ l) \n{\n\tlong min = l[0];\n\tlong i;\n\tfor (i = 1; i < l.length; i++) {\n\t\
    \tif (l[i] < min)\n\t\t\tmin = l[i];\n\t}\n\treturn min;\n}\n/*\nReturn sum of\
    \ all elements in the list.\n            \n*/\nlong sum_elements(long[] l) \n\
    {\n\tlong sum = 0;\n\tlong i;\n\tfor (i = 0; i < l.length; i++)\n\t\tsum += l[i];\n\
    \treturn sum;\n}\n/*\nReturn product of all elements in the list.\n          \
    \  \n*/\nlong product_elements(long[] l) \n{\n\tlong product = 1;\n\tlong i;\n\
    \tfor (i = 0; i < l.length; i++)\n\t\tproduct *= l[i];\n\treturn product;\n}\n\
    /*\nReturn sum of all elements in the list.\n            \n*/\ndouble sum_elements(double[]\
    \ l) \n{\n\tdouble sum = 0;\n\tlong i;\n\tfor (i = 0; i < l.length; i++)\n\t\t\
    sum += l[i];\n\treturn sum;\n}\n/*\nReturn product of all elements in the list.\n\
    \            \n*/\ndouble product_elements(double[] l) \n{\n\tdouble product =\
    \ 1;\n\tlong i;\n\tfor (i = 0; i < l.length; i++)\n\t\tproduct *= l[i];\n\treturn\
    \ product;\n}\n/*\nReturn sum of all elements in the list.\n            \n*/\n\
    float sum_elements(float[] l) \n{\n\tfloat sum = 0;\n\tlong i;\n\tfor (i = 0;\
    \ i < l.length; i++)\n\t\tsum += l[i];\n\treturn sum;\n}\n/*\nReturn product of\
    \ all elements in the list.\n            \n*/\nfloat product_elements(float[]\
    \ l) \n{\n\tfloat product = 1;\n\tlong i;\n\tfor (i = 0; i < l.length; i++)\n\t\
    \tproduct *= l[i];\n\treturn product;\n}\n/*\nReturn sum of all elements in the\
    \ list.\n            \n*/", "{\n\tlong max = l[0];\n\tfor (int i = 1; i < l.length;\
    \ i++) \n\t\tif (l[i] > max) \n\t\t\tmax = l[i];\n\treturn max;\n}\n/*\nReturn\
    \ minimum element in the list.\n            \n*/\nlong min_element(long[] l) \n\
    {\n\tlong min = l[0];\n\tfor (int i = 1; i < l.length; i++) \n\t\tif (l[i] < min)\
    \ \n\t\t\tmin = l[i];\n\treturn min;\n}\n/*\nReturn sum of all elements in the\
    \ list.\n            \n*/\nlong sum_element(long[] l) \n{\n\tlong sum = 0;\n\t\
    for (int i = 0; i < l.length; i++) \n\t\tsum += l[i];\n\treturn sum;\n}\n/*\n\
    Return product of all elements in the list.\n            \n*/\nlong product_element(long[]\
    \ l) \n{\n\tlong product = 1;\n\tfor (int i = 0; i < l.length; i++) \n\t\tproduct\
    \ *= l[i];\n\treturn product;\n}\n/*\nReturn sum of all elements in the list.\n\
    \            \n*/\ndouble sum_element_double(double[] l) \n{\n\tdouble sum = 0;\n\
    \tfor (int i = 0; i < l.length; i++) \n\t\tsum += l[i];\n\treturn sum;\n}\n/*\n\
    Return product of all elements in the list.\n            \n*/\ndouble product_element_double(double[]\
    \ l) \n{\n\tdouble product = 1;\n\tfor (int i = 0; i < l.length; i++) \n\t\tproduct\
    \ *= l[i];\n\treturn product;\n}\n/*\nReturn sum of all elements in the list.\n\
    \            \n*/\nfloat sum_element_float(float[] l) \n{\n\tfloat sum = 0;\n\t\
    for (int i = 0; i < l.length; i++) \n\t\tsum += l[i];\n\treturn sum;\n}\n/*\n\
    Return product of all elements in the list.\n            \n*/\nfloat product_element_float(float[]\
    \ l) \n{\n\tfloat product = 1;\n\tfor (int i = 0; i < l.length; i++) \n\t\tproduct\
    \ *= l[i];\n\treturn product;\n}\n/*\nReturn sum of all elements in the list.\n\
    \            \n*/", "{\n\tint i;\n\tlong max = l[0];\n\tfor(i = 1; i < l.length;\
    \ i++){\n\t\tif(l[i] > max){\n\t\t\tmax = l[i];\n\t\t}\n\t}\n\treturn max;\n}\n\
    /*\nReturn minimum element in the list.\n            \n*/\nlong min_element(long[]\
    \ l) \n{\n\tint i;\n\tlong min = l[0];\n\tfor(i = 1; i < l.length; i++){\n\t\t\
    if(l[i] < min){\n\t\t\tmin = l[i];\n\t\t}\n\t}\n\treturn min;\n}\n/*\nReturn sum\
    \ of all elements in the list.\n            \n*/\nlong sum_element(long[] l) \n\
    {\n\tint i;\n\tlong sum = 0;\n\tfor(i = 0; i < l.length; i++){\n\t\tsum += l[i];\n\
    \t}\n\treturn sum;\n}\n/*\nReturn product of all elements in the list.\n     \
    \       \n*/\nlong prod_element(long[] l) \n{\n\tint i;\n\tlong prod = 1;\n\t\
    for(i = 0; i < l.length; i++){\n\t\tprod *= l[i];\n\t}\n\treturn prod;\n}\n/*\n\
    Return absolute value of all elements in the list.\n            \n*/\nlong abs_element(long[]\
    \ l) \n{\n\tint i;\n\tlong abs = 0;\n\tfor(i = 0; i < l.length; i++){\n\t\tabs\
    \ = abs(l[i]);\n\t}\n\treturn abs;\n}\n/*\nReturn absolute value of all elements\
    \ in the list.\n            \n*/\ndouble abs_element(double[] l) \n{\n\tint i;\n\
    \tdouble abs = 0;\n\tfor(i = 0; i < l.length; i++){\n\t\tabs = abs(l[i]);\n\t\
    }\n\treturn abs;\n}\n/*\nReturn absolute value of all elements in the list.\n\
    \            \n*/\nfloat abs_element(float[] l) \n{\n\tint i;\n\tfloat abs = 0;\n\
    \tfor(i = 0; i < l.length; i++){\n\t\tabs = abs(l[i]);\n\t}\n\treturn abs;\n}\n\
    /*\nReturn absolute value of all elements in the list.\n            \n*/", "{\n\
    \tint i;\n\tlong max_val;\n\t\n\tmax_val = l[0];\n\tfor(i = 1; i < l.length; i++){\n\
    \t\tif(l[i] > max_val)\n\t\t\tmax_val = l[i];\n\t}\n\treturn max_val;\n}", "{\n\
    \tlong max = l[0];\n\tlong i;\n\tfor (i = 1; i < l.length; i++)\n\t\tif (l[i]\
    \ > max)\n\t\t\tmax = l[i];\n\treturn max;\n}\n/*\nReturn minimum element in the\
    \ list.\n            \n*/\nlong min_element(long[] l) \n{\n\tlong min = l[0];\n\
    \tlong i;\n\tfor (i = 1; i < l.length; i++)\n\t\tif (l[i] < min)\n\t\t\tmin =\
    \ l[i];\n\treturn min;\n}\n/*\nReturn sum of all elements in the list.\n     \
    \       \n*/\nlong sum_element(long[] l) \n{\n\tlong sum = 0;\n\tlong i;\n\tfor\
    \ (i = 0; i < l.length; i++)\n\t\tsum += l[i];\n\treturn sum;\n}\n/*\nReturn product\
    \ of all elements in the list.\n            \n*/\nlong product_element(long[]\
    \ l) \n{\n\tlong product = 1;\n\tlong i;\n\tfor (i = 0; i < l.length; i++)\n\t\
    \tproduct *= l[i];\n\treturn product;\n}\n/*\nReturn absolute value of all elements\
    \ in the list.\n            \n*/\nlong abs_element(long[] l) \n{\n\tlong i;\n\t\
    for (i = 0; i < l.length; i++)\n\t\tl[i] = abs(l[i]);\n\treturn l;\n}\n/*\nReturn\
    \ absolute value of all elements in the list.\n            \n*/\ndouble abs_element(double[]\
    \ l) \n{\n\tdouble i;\n\tfor (i = 0; i < l.length; i++)\n\t\tl[i] = abs(l[i]);\n\
    \treturn l;\n}\n/*\nReturn absolute value of all elements in the list.\n     \
    \       \n*/\nfloat abs_element(float[] l) \n{\n\tfloat i;\n\tfor (i = 0; i <\
    \ l.length; i++)\n\t\tl[i] = abs(l[i]);\n\treturn l;\n}\n/*\nReturn absolute value\
    \ of all elements in the list.\n            \n*/", "{\n\tlong max = 0;\n\tfor\
    \ (int i = 0; i < l.length; i++)\n\t{\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\
    \t}\n\treturn max;\n}\n/*\nReturn minimum element in the list.\n            \n\
    */\nlong min_element(long[] l) \n{\n\tlong min = 0;\n\tfor (int i = 0; i < l.length;\
    \ i++)\n\t{\n\t\tif (l[i] < min)\n\t\t\tmin = l[i];\n\t}\n\treturn min;\n}\n/*\n\
    Return sum of all elements in the list.\n            \n*/\nlong sum_elements(long[]\
    \ l) \n{\n\tlong sum = 0;\n\tfor (int i = 0; i < l.length; i++)\n\t\tsum += l[i];\n\
    \treturn sum;\n}\n/*\nReturn product of all elements in the list.\n          \
    \  \n*/\nlong product_elements(long[] l) \n{\n\tlong product = 1;\n\tfor (int\
    \ i = 0; i < l.length; i++)\n\t\tproduct *= l[i];\n\treturn product;\n}\n/*\n\
    Return sum of all elements in the list.\n            \n*/\ndouble sum_elements(double[]\
    \ l) \n{\n\tdouble sum = 0;\n\tfor (int i = 0; i < l.length; i++)\n\t\tsum +=\
    \ l[i];\n\treturn sum;\n}\n/*\nReturn product of all elements in the list.\n \
    \           \n*/\ndouble product_elements(double[] l) \n{\n\tdouble product =\
    \ 1;\n\tfor (int i = 0; i < l.length; i++)\n\t\tproduct *= l[i];\n\treturn product;\n\
    }\n/*\nReturn sum of all elements in the list.\n            \n*/\nfloat sum_elements(float[]\
    \ l) \n{\n\tfloat sum = 0;\n\tfor (int i = 0; i < l.length; i++)\n\t\tsum += l[i];\n\
    \treturn sum;\n}\n/*\nReturn product of all elements in the list.\n          \
    \  \n*/\nfloat product_elements(float[] l) \n{\n\tfloat product = 1;\n\tfor (int\
    \ i = 0; i < l.length; i++)\n\t\tproduct *= l[i];\n\treturn product;\n}\n/*\n\
    Return sum of all elements in the list.\n            \n*/", "{\n\tint i;\n\tlong\
    \ max = l[0];\n\tfor (i = 1; i < l.length; i++)\n\t\tif (l[i] > max)\n\t\t\tmax\
    \ = l[i];\n\treturn max;\n}\n/*\nReturn minimum element in the list.\n       \
    \     \n*/\nlong min_element(long[] l) \n{\n\tint i;\n\tlong min = l[0];\n\tfor\
    \ (i = 1; i < l.length; i++)\n\t\tif (l[i] < min)\n\t\t\tmin = l[i];\n\treturn\
    \ min;\n}\n/*\nReturn sum of all elements in the list.\n            \n*/\nlong\
    \ sum_element(long[] l) \n{\n\tint i;\n\tlong sum = 0;\n\tfor (i = 0; i < l.length;\
    \ i++)\n\t\tsum += l[i];\n\treturn sum;\n}\n/*\nReturn product of all elements\
    \ in the list.\n            \n*/\nlong product_element(long[] l) \n{\n\tint i;\n\
    \tlong prod = 1;\n\tfor (i = 0; i < l.length; i++)\n\t\tprod *= l[i];\n\treturn\
    \ prod;\n}\n/*\nReturn sum of all elements in the list.\n            \n*/\ndouble\
    \ sum_element_double(double[] l) \n{\n\tint i;\n\tdouble sum = 0;\n\tfor (i =\
    \ 0; i < l.length; i++)\n\t\tsum += l[i];\n\treturn sum;\n}\n/*\nReturn product\
    \ of all elements in the list.\n            \n*/\ndouble product_element_double(double[]\
    \ l) \n{\n\tint i;\n\tdouble prod = 1;\n\tfor (i = 0; i < l.length; i++)\n\t\t\
    prod *= l[i];\n\treturn prod;\n}\n/*\nReturn sum of all elements in the list.\n\
    \            \n*/\nfloat sum_element_float(float[] l) \n{\n\tint i;\n\tfloat sum\
    \ = 0;\n\tfor (i = 0; i < l.length; i++)\n\t\tsum += l[i];\n\treturn sum;\n}\n\
    /*\nReturn product of all elements in the list.\n            \n*/\nfloat product_element_float(float[]\
    \ l) \n{\n\tint i;\n\tfloat prod = 1;\n\tfor (i = 0; i < l.length; i++)\n\t\t\
    prod *= l[i];\n\treturn prod;\n}\n/*\nReturn sum of all elements in the list.\n\
    \            \n*/", "{\n\tint i;\n\tlong max;\n\t\n\tmax = l[0];\n\t\n\tfor (i\
    \ = 1; i < l.length; i++) \n\t{\n\t\tif (l[i] > max) \n\t\t{\n\t\t\tmax = l[i];\n\
    \t\t}\n\t}\n\t\n\treturn max;\n}\n/*\nReturn minimum element in the list.\n  \
    \          \n*/\nlong min_element(long[] l) \n{\n\tint i;\n\tlong min;\n\t\n\t\
    min = l[0];\n\t\n\tfor (i = 1; i < l.length; i++) \n\t{\n\t\tif (l[i] < min) \n\
    \t\t{\n\t\t\tmin = l[i];\n\t\t}\n\t}\n\t\n\treturn min;\n}\n/*\nReturn sum of\
    \ all elements in the list.\n            \n*/\nlong sum_element(long[] l) \n{\n\
    \tint i;\n\tlong sum;\n\t\n\tsum = 0;\n\t\n\tfor (i = 0; i < l.length; i++) \n\
    \t{\n\t\tsum += l[i];\n\t}\n\t\n\treturn sum;\n}\n/*\nReturn product of all elements\
    \ in the list.\n            \n*/\nlong prod_element(long[] l) \n{\n\tint i;\n\t\
    long prod;\n\t\n\tprod = 1;\n\t\n\tfor (i = 0; i < l.length; i++) \n\t{\n\t\t\
    prod *= l[i];\n\t}\n\t\n\treturn prod;\n}\n/*\nReturn absolute value of all elements\
    \ in the list.\n            \n*/\nlong abs_element(long[] l) \n{\n\tint i;\n\t\
    long abs;\n\t\n\tabs = 0;\n\t\n\tfor (i = 0; i < l.length; i++) \n\t{\n\t\tabs\
    \ += l[i];\n\t}\n\t\n\treturn abs;\n}\n/*\nReturn absolute value of all elements\
    \ in the list.\n            \n*/\ndouble abs_element(double[] l) \n{\n\tint i;\n\
    \tdouble abs;\n\t\n\tabs = 0;\n\t\n\tfor (i = 0; i < l.length; i++) \n\t{\n\t\t\
    abs += l[i];\n\t}\n\t\n\treturn abs;\n}\n/*\nReturn absolute value of all elements\
    \ in the list.\n            \n*/\nfloat abs_element(float[] l) \n{\n\tint i;\n\
    \tfloat abs;\n\t\n\tabs = 0;\n\t\n\tfor (i = 0; i < l.length; i++) \n\t{\n\t\t\
    abs += l[i];\n\t}\n\t\n\treturn abs;\n}\n/*\nReturn absolute value of all elements\
    \ in the list.\n            \n*/", "{\n\tlong max_element = 0;\n\tlong i;\n\t\
    for(i = 0; i < l.length; ++i)\n\t{\n\t\tif(l[i] > max_element)\n\t\t\tmax_element\
    \ = l[i];\n\t}\n\treturn max_element;\n}\n/*\nReturn minimum element in the list.\n\
    \            \n*/\nlong min_element(long[] l) \n{\n\tlong min_element = 0;\n\t\
    long i;\n\tfor(i = 0; i < l.length; ++i)\n\t{\n\t\tif(l[i] < min_element)\n\t\t\
    \tmin_element = l[i];\n\t}\n\treturn min_element;\n}\n/*\nReturn sum of all elements\
    \ in the list.\n            \n*/\nlong sum_element(long[] l) \n{\n\tlong sum =\
    \ 0;\n\tlong i;\n\tfor(i = 0; i < l.length; ++i)\n\t\tsum += l[i];\n\treturn sum;\n\
    }\n/*\nReturn product of all elements in the list.\n            \n*/\nlong product_element(long[]\
    \ l) \n{\n\tlong product = 1;\n\tlong i;\n\tfor(i = 0; i < l.length; ++i)\n\t\t\
    product *= l[i];\n\treturn product;\n}\n/*\nReturn sum of all elements in the\
    \ list.\n            \n*/\ndouble sum_element_double(double[] l) \n{\n\tdouble\
    \ sum = 0;\n\tlong i;\n\tfor(i = 0; i < l.length; ++i)\n\t\tsum += l[i];\n\treturn\
    \ sum;\n}\n/*\nReturn product of all elements in the list.\n            \n*/\n\
    double product_element_double(double[] l) \n{\n\tdouble product = 1;\n\tlong i;\n\
    \tfor(i = 0; i < l.length; ++i)\n\t\tproduct *= l[i];\n\treturn product;\n}\n\
    /*\nReturn sum of all elements in the list.\n            \n*/\nfloat sum_element_float(float[]\
    \ l) \n{\n\tfloat sum = 0;\n\tlong i;\n\tfor(i = 0; i < l.length; ++i)\n\t\tsum\
    \ += l[i];\n\treturn sum;\n}\n/*\nReturn product of all elements in the list.\n\
    \            \n*/\nfloat product_element_float(float[] l) \n{\n\tfloat product\
    \ = 1;\n\tlong i;\n\tfor(i = 0; i < l.length; ++i)\n\t\tproduct *= l[i];\n\treturn\
    \ product;\n}\n/*\nReturn sum of all elements in the list.\n            \n*/",
  "{\n\tint i;\n\tlong max;\n\tmax = l[0];\n\tfor(i = 1; i < l.length; i++){\n\t\t\
    if(l[i] > max){\n\t\t\tmax = l[i];\n\t\t}\n\t}\n\treturn max;\n}\n/*\nReturn minimum\
    \ element in the list.\n            \n*/\nlong min_element(long[] l) \n{\n\tint\
    \ i;\n\tlong min;\n\tmin = l[0];\n\tfor(i = 1; i < l.length; i++){\n\t\tif(l[i]\
    \ < min){\n\t\t\tmin = l[i];\n\t\t}\n\t}\n\treturn min;\n}\n/*\nReturn sum of\
    \ all elements in the list.\n            \n*/\nlong sum_element(long[] l) \n{\n\
    \tint i;\n\tlong sum;\n\tsum = 0;\n\tfor(i = 0; i < l.length; i++){\n\t\tsum +=\
    \ l[i];\n\t}\n\treturn sum;\n}\n/*\nReturn product of all elements in the list.\n\
    \            \n*/\nlong product_element(long[] l) \n{\n\tint i;\n\tlong product;\n\
    \tproduct = 1;\n\tfor(i = 0; i < l.length; i++){\n\t\tproduct *= l[i];\n\t}\n\t\
    return product;\n}\n/*\nReturn absolute value of all elements in the list.\n \
    \           \n*/\nlong abs_element(long[] l) \n{\n\tint i;\n\tlong abs;\n\tabs\
    \ = 0;\n\tfor(i = 0; i < l.length; i++){\n\t\tabs = abs(l[i]);\n\t}\n\treturn\
    \ abs;\n}\n/*\nReturn absolute value of all elements in the list.\n          \
    \  \n*/\ndouble abs_element(double[] l) \n{\n\tint i;\n\tdouble abs;\n\tabs =\
    \ 0;\n\tfor(i = 0; i < l.length; i++){\n\t\tabs = abs(l[i]);\n\t}\n\treturn abs;\n\
    }\n/*\nReturn absolute value of all elements in the list.\n            \n*/\n\
    float abs_element(float[] l) \n{\n\tint i;\n\tfloat abs;\n\tabs = 0;\n\tfor(i\
    \ = 0; i < l.length; i++){\n\t\tabs = abs(l[i]);\n\t}\n\treturn abs;\n}\n/*\n\
    Return absolute value of all elements in the list.\n            \n*/", "{\n\t\
    int i;\n\tlong max;\n\tfor(i=0;i<l.length;i++)\n\t{\n\t\tif(l[i]>max)\n\t\t\t\
    max=l[i];\n\t}\n\treturn max;\n}\n/*\nReturn minimum element in the list.\n  \
    \          \n*/\nlong min_element(long[] l) \n{\n\tint i;\n\tlong min;\n\tfor(i=0;i<l.length;i++)\n\
    \t{\n\t\tif(l[i]<min)\n\t\t\tmin=l[i];\n\t}\n\treturn min;\n}\n/*\nReturn sum\
    \ of all elements in the list.\n            \n*/\nlong sum_elements(long[] l)\
    \ \n{\n\tint i;\n\tlong sum=0;\n\tfor(i=0;i<l.length;i++)\n\t{\n\t\tsum+=l[i];\n\
    \t}\n\treturn sum;\n}\n/*\nReturn product of all elements in the list.\n     \
    \       \n*/\nlong product_elements(long[] l) \n{\n\tint i;\n\tlong prod=1;\n\t\
    for(i=0;i<l.length;i++)\n\t{\n\t\tprod*=l[i];\n\t}\n\treturn prod;\n}\n/*\nReturn\
    \ absolute value of all elements in the list.\n            \n*/\nlong abs_elements(long[]\
    \ l) \n{\n\tint i;\n\tlong abs=0;\n\tfor(i=0;i<l.length;i++)\n\t{\n\t\tabs=abs(l[i]);\n\
    \t}\n\treturn abs;\n}\n/*\nReturn absolute value of all elements in the list.\n\
    \            \n*/\nlong abs_elements(long[] l, int n) \n{\n\tint i;\n\tlong abs=0;\n\
    \tfor(i=0;i<n;i++)\n\t{\n\t\tabs=abs(l[i]);\n\t}\n\treturn abs;\n}\n/*\nReturn\
    \ absolute value of all elements in the list.\n            \n*/\nlong abs_elements(long[]\
    \ l, int n, int m) \n{\n\tint i;\n\tlong abs=0;\n\tfor(i=0;i<n;i++)\n\t{\n\t\t\
    abs=abs(l[i]);\n\t}\n\treturn abs;\n}\n/*\nReturn absolute value of all elements\
    \ in the list.\n            \n*/\nlong abs_elements(long[] l, int n, int m, int\
    \ n) \n{\n\tint i;\n\tlong abs=0;\n\tfor(i=0;i<n;i++)\n\t{\n\t\tabs=abs(l[i]);\n\
    \t}\n\treturn abs;\n}\n/*\nReturn absolute value of all elements in the list.\n\
    \            \n*/\nlong abs_elements(long[] l, int n, int m, int n, int m) \n\
    {\n\tint i;\n\tlong abs=0;\n\tfor(i=0;i<n;i++)\n\t{\n\t\tabs=abs(l[i]);\n\t}\n\
    \treturn abs;\n", "{\n\tint i;\n\tlong max;\n\tmax = l[0];\n\tfor (i = 1; i <\
    \ l.length; i++) \n\t{\n\t\tif (l[i] > max) \n\t\t{\n\t\t\tmax = l[i];\n\t\t}\n\
    \t}\n\treturn max;\n}\n/*\nReturn minimum element in the list.\n            \n\
    */\nlong min_element(long[] l) \n{\n\tint i;\n\tlong min;\n\tmin = l[0];\n\tfor\
    \ (i = 1; i < l.length; i++) \n\t{\n\t\tif (l[i] < min) \n\t\t{\n\t\t\tmin = l[i];\n\
    \t\t}\n\t}\n\treturn min;\n}\n/*\nReturn sum of all elements in the list.\n  \
    \          \n*/\nlong sum_elements(long[] l) \n{\n\tint i;\n\tlong sum;\n\tsum\
    \ = 0;\n\tfor (i = 0; i < l.length; i++) \n\t{\n\t\tsum += l[i];\n\t}\n\treturn\
    \ sum;\n}\n/*\nReturn product of all elements in the list.\n            \n*/\n\
    long product_elements(long[] l) \n{\n\tint i;\n\tlong product;\n\tproduct = 1;\n\
    \tfor (i = 0; i < l.length; i++) \n\t{\n\t\tproduct *= l[i];\n\t}\n\treturn product;\n\
    }\n/*\nReturn sum of all elements in the list.\n            \n*/\ndouble sum_elements(double[]\
    \ l) \n{\n\tint i;\n\tdouble sum;\n\tsum = 0;\n\tfor (i = 0; i < l.length; i++)\
    \ \n\t{\n\t\tsum += l[i];\n\t}\n\treturn sum;\n}\n/*\nReturn product of all elements\
    \ in the list.\n            \n*/\ndouble product_elements(double[] l) \n{\n\t\
    int i;\n\tdouble product;\n\tproduct = 1;\n\tfor (i = 0; i < l.length; i++) \n\
    \t{\n\t\tproduct *= l[i];\n\t}\n\treturn product;\n}\n/*\nReturn sum of all elements\
    \ in the list.\n            \n*/\nfloat sum_elements(float[] l) \n{\n\tint i;\n\
    \tfloat sum;\n\tsum = 0;\n\tfor (i = 0; i < l.length; i++) \n\t{\n\t\tsum += l[i];\n\
    \t}\n\treturn sum;\n}\n/*\nReturn product of all elements in the list.\n     \
    \       \n*/\nfloat product_elements(float[] l) \n{\n\tint i;\n\tfloat product;\n\
    \tproduct = 1;\n\tfor (i = 0; i < l.length; i++) \n\t{\n\t\tproduct *= l[i];\n\
    \t}\n\treturn product;\n}\n/*\nReturn sum of all elements in the list.\n     \
    \       \n*/", "{\n\tint i;\n\tlong max = l[0];\n\tfor(i = 1; i < l.length; i++)\n\
    \t\tif(l[i] > max)\n\t\t\tmax = l[i];\n\treturn max;\n}\n/*\nReturn minimum element\
    \ in the list.\n            \n*/\nlong min_element(long[] l) \n{\n\tint i;\n\t\
    long min = l[0];\n\tfor(i = 1; i < l.length; i++)\n\t\tif(l[i] < min)\n\t\t\t\
    min = l[i];\n\treturn min;\n}\n/*\nReturn sum of all elements in the list.\n \
    \           \n*/\nlong sum_elements(long[] l) \n{\n\tint i;\n\tlong sum = 0;\n\
    \tfor(i = 0; i < l.length; i++)\n\t\tsum += l[i];\n\treturn sum;\n}\n/*\nReturn\
    \ product of all elements in the list.\n            \n*/\nlong product_elements(long[]\
    \ l) \n{\n\tint i;\n\tlong prod = 1;\n\tfor(i = 0; i < l.length; i++)\n\t\tprod\
    \ *= l[i];\n\treturn prod;\n}\n/*\nReturn sum of all elements in the list with\
    \ given predicate.\n            \n*/\nlong sum_elements_pred(long[] l, bool pred)\
    \ \n{\n\tint i;\n\tlong sum = 0;\n\tfor(i = 0; i < l.length; i++)\n\t\tif(pred(l[i]))\n\
    \t\t\tsum += l[i];\n\treturn sum;\n}\n/*\nReturn product of all elements in the\
    \ list with given predicate.\n            \n*/\nlong product_elements_pred(long[]\
    \ l, bool pred) \n{\n\tint i;\n\tlong prod = 1;\n\tfor(i = 0; i < l.length; i++)\n\
    \t\tif(pred(l[i]))\n\t\t\tprod *= l[i];\n\treturn prod;\n}\n/*\nReturn sum of\
    \ all elements in the list with given predicate.\n            \n*/\nlong sum_elements_not_pred(long[]\
    \ l, bool pred) \n{\n\tint i;\n\tlong sum = 0;\n\tfor(i = 0; i < l.length; i++)\n\
    \t\tif(!pred(l[i]))\n\t\t\tsum += l[i];\n\treturn sum;\n}\n/*\nReturn product\
    \ of all elements in the list with given predicate.\n            \n*/\nlong product_elements_not_pred(long[]\
    \ l, bool pred) \n{\n\tint i;\n\tlong prod = 1;\n\tfor(i = 0; i < l.length; i++)\n\
    \t\tif(!pred(l[i]))\n\t\t\tprod *= l[i];\n\treturn prod;\n}\n/*\nReturn sum of\
    \ all elements in the list with given predicate.\n            \n*/\nlong sum_elements_not_pred(long[]\
    \ l, bool pred, long init) \n{\n\tint i;\n\tlong sum = 0;\n\tfor(i = 0; i < l.length;\
    \ i++)", "{\n\tlong max;\n\tstd.sort(l);\n\tmax = l[0];\n\tfor(int i = 1; i <\
    \ l.length; ++i)\n\t\tif(l[i] > max)\n\t\t\tmax = l[i];\n\treturn max;\n}\n/*\n\
    Return minimum element in the list.\n            \n*/\nlong min_element(long[]\
    \ l) \n{\n\tlong min;\n\tstd.sort(l);\n\tmin = l[0];\n\tfor(int i = 1; i < l.length;\
    \ ++i)\n\t\tif(l[i] < min)\n\t\t\tmin = l[i];\n\treturn min;\n}\n/*\nReturn sum\
    \ of all elements in the list.\n            \n*/\nlong sum_element(long[] l) \n\
    {\n\tlong sum = 0;\n\tfor(int i = 0; i < l.length; ++i)\n\t\tsum += l[i];\n\t\
    return sum;\n}\n/*\nReturn product of all elements in the list.\n            \n\
    */\nlong prod_element(long[] l) \n{\n\tlong prod = 1;\n\tfor(int i = 0; i < l.length;\
    \ ++i)\n\t\tprod *= l[i];\n\treturn prod;\n}\n/*\nReturn absolute value of all\
    \ elements in the list.\n            \n*/\nlong abs_element(long[] l) \n{\n\t\
    long abs = 0;\n\tfor(int i = 0; i < l.length; ++i)\n\t\tabs = l[i] < 0 ? -l[i]\
    \ : l[i];\n\treturn abs;\n}\n/*\nReturn absolute value of all elements in the\
    \ list.\n            \n*/\ndouble abs_element(double[] l) \n{\n\tdouble abs =\
    \ 0;\n\tfor(int i = 0; i < l.length; ++i)\n\t\tabs = l[i] < 0 ? -l[i] : l[i];\n\
    \treturn abs;\n}\n/*\nReturn absolute value of all elements in the list.\n   \
    \         \n*/\nfloat abs_element(float[] l) \n{\n\tfloat abs = 0;\n\tfor(int\
    \ i = 0; i < l.length; ++i)\n\t\tabs = l[i] < 0 ? -l[i] : l[i];\n\treturn abs;\n\
    }\n/*\nReturn absolute value of all elements in the list.\n            \n*/",
  "{\n\tint i;\n\tlong max;\n\tmax = l[0];\n\tfor (i=1; i<l.length; i++)\n\t\tif (l[i]\
    \ > max)\n\t\t\tmax = l[i];\n\treturn max;\n}\n/*\nReturn minimum element in the\
    \ list.\n            \n*/\nlong min_element(long[] l) \n{\n\tint i;\n\tlong min;\n\
    \tmin = l[0];\n\tfor (i=1; i<l.length; i++)\n\t\tif (l[i] < min)\n\t\t\tmin =\
    \ l[i];\n\treturn min;\n}\n/*\nReturn sum of all elements in the list.\n     \
    \       \n*/\nlong sum_element(long[] l) \n{\n\tint i;\n\tlong sum;\n\tsum = 0;\n\
    \tfor (i=1; i<l.length; i++)\n\t\tsum += l[i];\n\treturn sum;\n}\n/*\nReturn product\
    \ of all elements in the list.\n            \n*/\nlong prod_element(long[] l)\
    \ \n{\n\tint i;\n\tlong prod;\n\tprod = 1;\n\tfor (i=1; i<l.length; i++)\n\t\t\
    prod *= l[i];\n\treturn prod;\n}\n/*\nReturn absolute value of all elements in\
    \ the list.\n            \n*/\nlong abs_element(long[] l) \n{\n\tint i;\n\tlong\
    \ abs;\n\tabs = 0;\n\tfor (i=1; i<l.length; i++)\n\t\tabs = max(abs, l[i]);\n\t\
    return abs;\n}\n/*\nReturn absolute value of all elements in the list.\n     \
    \       \n*/\ndouble abs_element(double[] l) \n{\n\tint i;\n\tdouble abs;\n\t\
    abs = 0;\n\tfor (i=1; i<l.length; i++)\n\t\tabs = max(abs, l[i]);\n\treturn abs;\n\
    }\n/*\nReturn absolute value of all elements in the list.\n            \n*/\n\
    float abs_element(float[] l) \n{\n\tint i;\n\tfloat abs;\n\tabs = 0;\n\tfor (i=1;\
    \ i<l.length; i++)\n\t\tabs = max(abs, l[i]);\n\treturn abs;\n}\n/*\nReturn absolute\
    \ value of all elements in the list.\n            \n*/", "{\n\tlong max;\n\tstd.sort(l);\n\
    \tmax = l[0];\n\tfor (int i = 1; i < l.length; ++i) {\n\t\tif (l[i] > max) {\n\
    \t\t\tmax = l[i];\n\t\t}\n\t}\n\treturn max;\n}", "{\n\tlong max = 0;\n\tfor (int\
    \ i = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] > max) \n\t\t{\n\t\t\tmax = l[i];\n\
    \t\t}\n\t}\n\treturn max;\n}\n/*\nReturn minimum element in the list.\n      \
    \      \n*/\nlong min_element(long[] l) \n{\n\tlong min = 0;\n\tfor (int i = 0;\
    \ i < l.length; i++) \n\t{\n\t\tif (l[i] < min) \n\t\t{\n\t\t\tmin = l[i];\n\t\
    \t}\n\t}\n\treturn min;\n}\n/*\nReturn sum of all elements in the list.\n    \
    \        \n*/\nlong sum_element(long[] l) \n{\n\tlong sum = 0;\n\tfor (int i =\
    \ 0; i < l.length; i++) \n\t{\n\t\tsum += l[i];\n\t}\n\treturn sum;\n}\n/*\nReturn\
    \ product of all elements in the list.\n            \n*/\nlong prod_element(long[]\
    \ l) \n{\n\tlong prod = 1;\n\tfor (int i = 0; i < l.length; i++) \n\t{\n\t\tprod\
    \ *= l[i];\n\t}\n\treturn prod;\n}\n/*\nReturn absolute value of all elements\
    \ in the list.\n            \n*/\nlong abs_element(long[] l) \n{\n\tlong abs =\
    \ 0;\n\tfor (int i = 0; i < l.length; i++) \n\t{\n\t\tabs = l[i] < 0 ? -l[i] :\
    \ l[i];\n\t}\n\treturn abs;\n}\n/*\nReturn absolute value of all elements in the\
    \ list.\n            \n*/\ndouble abs_element(double[] l) \n{\n\tdouble abs =\
    \ 0;\n\tfor (int i = 0; i < l.length; i++) \n\t{\n\t\tabs = l[i] < 0 ? -l[i] :\
    \ l[i];\n\t}\n\treturn abs;\n}\n/*\nReturn absolute value of all elements in the\
    \ list.\n            \n*/\nfloat abs_element(float[] l) \n{\n\tfloat abs = 0;\n\
    \tfor (int i = 0; i < l.length; i++) \n\t{\n\t\tabs = l[i] < 0 ? -l[i] : l[i];\n\
    \t}\n\treturn abs;\n}\n/*\nReturn absolute value of all elements in the list.\n\
    \            \n*/", "{\n\tlong max = 0;\n\tlong i = 0;\n\twhile (i < l.length)\
    \ \n\t{\n\t\tif (l[i] > max) \n\t\t{\n\t\t\tmax = l[i];\n\t\t}\n\t\ti++;\n\t}\n\
    \treturn max;\n}\n/*\nReturn minimum element in the list.\n            \n*/\n\
    long min_element(long[] l) \n{\n\tlong min = 0;\n\tlong i = 0;\n\twhile (i < l.length)\
    \ \n\t{\n\t\tif (l[i] < min) \n\t\t{\n\t\t\tmin = l[i];\n\t\t}\n\t\ti++;\n\t}\n\
    \treturn min;\n}\n/*\nReturn sum of all elements in the list.\n            \n\
    */\nlong sum_element(long[] l) \n{\n\tlong sum = 0;\n\tlong i = 0;\n\twhile (i\
    \ < l.length) \n\t{\n\t\tsum += l[i];\n\t\ti++;\n\t}\n\treturn sum;\n}\n/*\nReturn\
    \ product of all elements in the list.\n            \n*/\nlong product_element(long[]\
    \ l) \n{\n\tlong product = 1;\n\tlong i = 0;\n\twhile (i < l.length) \n\t{\n\t\
    \tproduct *= l[i];\n\t\ti++;\n\t}\n\treturn product;\n}\n/*\nReturn absolute value\
    \ of all elements in the list.\n            \n*/\nlong abs_element(long[] l) \n\
    {\n\tlong i = 0;\n\tlong sum = 0;\n\twhile (i < l.length) \n\t{\n\t\tsum += l[i];\n\
    \t\ti++;\n\t}\n\treturn sum;\n}\n/*\nReturn absolute value of all elements in\
    \ the list.\n            \n*/\ndouble abs_element(double[] l) \n{\n\tdouble i\
    \ = 0;\n\tdouble sum = 0;\n\twhile (i < l.length) \n\t{\n\t\tsum += l[i];\n\t\t\
    i++;\n\t}\n\treturn sum;\n}\n/*\nReturn absolute value of all elements in the\
    \ list.\n            \n*/\nfloat abs_element(float[] l) \n{\n\tfloat i = 0;\n\t\
    float sum = 0;\n\twhile (i < l.length) \n\t{\n\t\tsum += l[i];\n\t\ti++;\n\t}\n\
    \treturn sum;\n}\n/*\nReturn absolute value of all elements in the list.\n   \
    \         \n*/", "{\n\tlong max = 0;\n\tfor (int i = 0; i < l.length; i++) \n\t\
    {\n\t\tif (l[i] > max) \n\t\t{\n\t\t\tmax = l[i];\n\t\t}\n\t}\n\treturn max;\n\
    }", "{\n\tlong max;\n\tlong i;\n\tfor(i = 0; i < (long)l.length; i++){\n\t\tif(l[i]\
    \ > max){\n\t\t\tmax = l[i];\n\t\t}\n\t}\n\treturn max;\n}", "{\n\tint i;\n\t\
    long max = l[0];\n\tfor(i = 1; i < l.length; i++) \n\t{\n\t\tif(l[i] > max) \n\
    \t\t\tmax = l[i];\n\t}\n\treturn max;\n}", "{\n\tlong max = l[0];\n\tlong i;\n\
    \tfor (i = 1; i < l.length; i++) {\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\t\
    }\n\treturn max;\n}\n/*\nReturn minimum element in the list.\n            \n*/\n\
    long min_element(long[] l) \n{\n\tlong min = l[0];\n\tlong i;\n\tfor (i = 1; i\
    \ < l.length; i++) {\n\t\tif (l[i] < min)\n\t\t\tmin = l[i];\n\t}\n\treturn min;\n\
    }\n/*\nReturn sum of all elements in the list.\n            \n*/\nlong sum_array(long[]\
    \ l) \n{\n\tlong sum = 0;\n\tlong i;\n\tfor (i = 0; i < l.length; i++)\n\t\tsum\
    \ += l[i];\n\treturn sum;\n}\n/*\nReturn product of all elements in the list.\n\
    \            \n*/\nlong prod_array(long[] l) \n{\n\tlong prod = 1;\n\tlong i;\n\
    \tfor (i = 0; i < l.length; i++)\n\t\tprod *= l[i];\n\treturn prod;\n}\n/*\nReturn\
    \ absolute value of all elements in the list.\n            \n*/\nlong abs_array(long[]\
    \ l) \n{\n\tlong i;\n\tfor (i = 0; i < l.length; i++)\n\t\tl[i] = abs(l[i]);\n\
    \treturn l;\n}\n/*\nReturn absolute value of all elements in the list.\n     \
    \       \n*/\ndouble abs_array(double[] l) \n{\n\tdouble i;\n\tfor (i = 0; i <\
    \ l.length; i++)\n\t\tl[i] = abs(l[i]);\n\treturn l;\n}\n/*\nReturn absolute value\
    \ of all elements in the list.\n            \n*/\nfloat abs_array(float[] l) \n\
    {\n\tfloat i;\n\tfor (i = 0; i < l.length; i++)\n\t\tl[i] = abs(l[i]);\n\treturn\
    \ l;\n}\n/*\nReturn absolute value of all elements in the list.\n            \n\
    */", "{\n\tint i;\n\tlong max = l[0];\n\t\n\tfor (i = 1; i < l.length; i++)\n\t\
    {\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\t}\n\t\n\treturn max;\n}\n/*\nReturn\
    \ minimum element in the list.\n            \n*/\nlong min_element(long[] l) \n\
    {\n\tint i;\n\tlong min = l[0];\n\t\n\tfor (i = 1; i < l.length; i++)\n\t{\n\t\
    \tif (l[i] < min)\n\t\t\tmin = l[i];\n\t}\n\t\n\treturn min;\n}\n/*\nReturn sum\
    \ of all elements in the list.\n            \n*/\nlong sum_element(long[] l) \n\
    {\n\tint i;\n\tlong sum = 0;\n\t\n\tfor (i = 0; i < l.length; i++)\n\t\tsum +=\
    \ l[i];\n\t\n\treturn sum;\n}\n/*\nReturn product of all elements in the list.\n\
    \            \n*/\nlong product_element(long[] l) \n{\n\tint i;\n\tlong prod =\
    \ 1;\n\t\n\tfor (i = 0; i < l.length; i++)\n\t\tprod *= l[i];\n\t\n\treturn prod;\n\
    }\n/*\nReturn absolute value of all elements in the list.\n            \n*/\n\
    long abs_element(long[] l) \n{\n\tint i;\n\tlong abs = 0;\n\t\n\tfor (i = 0; i\
    \ < l.length; i++)\n\t\tabs = max(abs, abs(l[i]));\n\t\n\treturn abs;\n}\n/*\n\
    Return absolute value of all elements in the list.\n            \n*/\ndouble abs_element(double[]\
    \ l) \n{\n\tint i;\n\tdouble abs = 0;\n\t\n\tfor (i = 0; i < l.length; i++)\n\t\
    \tabs = max(abs, abs(l[i]));\n\t\n\treturn abs;\n}\n/*\nReturn absolute value\
    \ of all elements in the list.\n            \n*/\nfloat abs_element(float[] l)\
    \ \n{\n\tint i;\n\tfloat abs = 0;\n\t\n\tfor (i = 0; i < l.length; i++)\n\t\t\
    abs = max(abs, abs(l[i]));\n\t\n\treturn abs;\n}\n/*\nReturn absolute value of\
    \ all elements in the list.\n            \n*/", "{\n\tlong max = l[0];\n\tfor\
    \ (int i = 1; i < l.length; ++i)\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\treturn\
    \ max;\n}", "{\n\tlong max = l[0];\n\tfor (int i = 1; i < l.length; i++)\n\t\t\
    if (l[i] > max)\n\t\t\tmax = l[i];\n\treturn max;\n}", "{\n\tint i;\n\tlong max;\n\
    \tmax = l[0];\n\tfor (i = 1; i < l.length; i++) \n\t{\n\t\tif (l[i] > max) \n\t\
    \t{\n\t\t\tmax = l[i];\n\t\t}\n\t}\n\treturn max;\n}\n/*\nReturn minimum element\
    \ in the list.\n            \n*/\nlong min_element(long[] l) \n{\n\tint i;\n\t\
    long min;\n\tmin = l[0];\n\tfor (i = 1; i < l.length; i++) \n\t{\n\t\tif (l[i]\
    \ < min) \n\t\t{\n\t\t\tmin = l[i];\n\t\t}\n\t}\n\treturn min;\n}\n/*\nReturn\
    \ sum of all elements in the list.\n            \n*/\nlong sum_element(long[]\
    \ l) \n{\n\tint i;\n\tlong sum;\n\tsum = 0;\n\tfor (i = 0; i < l.length; i++)\
    \ \n\t{\n\t\tsum += l[i];\n\t}\n\treturn sum;\n}\n/*\nReturn product of all elements\
    \ in the list.\n            \n*/\nlong product_element(long[] l) \n{\n\tint i;\n\
    \tlong product;\n\tproduct = 1;\n\tfor (i = 0; i < l.length; i++) \n\t{\n\t\t\
    product *= l[i];\n\t}\n\treturn product;\n}\n/*\nReturn absolute value of all\
    \ elements in the list.\n            \n*/\nlong abs_element(long[] l) \n{\n\t\
    int i;\n\tlong abs;\n\tabs = 0;\n\tfor (i = 0; i < l.length; i++) \n\t{\n\t\t\
    abs = abs(l[i]);\n\t}\n\treturn abs;\n}\n/*\nReturn absolute value of all elements\
    \ in the list.\n            \n*/\nlong abs_max(long[] l) \n{\n\tint i;\n\tlong\
    \ abs;\n\tabs = l[0];\n\tfor (i = 1; i < l.length; i++) \n\t{\n\t\tif (l[i] >\
    \ abs) \n\t\t{\n\t\t\tabs = l[i];\n\t\t}\n\t}\n\treturn abs;\n}\n/*\nReturn absolute\
    \ value of all elements in the list.\n            \n*/\nlong abs_min(long[] l)\
    \ \n{\n\tint i;\n\tlong abs;\n\tabs = l[0];\n\tfor (i = 1; i < l.length; i++)\
    \ \n\t{\n\t\tif (l[i] < abs) \n\t\t{\n\t\t\tabs = l[i];\n\t\t}\n\t}\n\treturn\
    \ abs;\n}\n/*\nReturn absolute value of all elements in the list.\n          \
    \  \n*/\nlong abs_sum(long[] l) \n{\n\tint i;\n\tlong abs;\n\tabs = 0;\n\tfor\
    \ (i = 0; i < l.length; i++) \n\t{\n\t\tabs = abs(l[i]);\n\t}\n\treturn abs;\n\
    }\n/*\nReturn absolute value of all elements in the list.", "{\n\tlong max = l[0];\n\
    \tfor(int i = 1; i < l.length; i++){\n\t\tif(l[i] > max){\n\t\t\tmax = l[i];\n\
    \t\t}\n\t}\n\treturn max;\n}\n/*\nReturn minimum element in the list.\n      \
    \      \n*/\nlong min_element(long[] l) \n{\n\tlong min = l[0];\n\tfor(int i =\
    \ 1; i < l.length; i++){\n\t\tif(l[i] < min){\n\t\t\tmin = l[i];\n\t\t}\n\t}\n\
    \treturn min;\n}\n/*\nReturn sum of all elements in the list.\n            \n\
    */\nlong sum_elements(long[] l) \n{\n\tlong sum = 0;\n\tfor(int i = 0; i < l.length;\
    \ i++){\n\t\tsum += l[i];\n\t}\n\treturn sum;\n}\n/*\nReturn product of all elements\
    \ in the list.\n            \n*/\nlong product_elements(long[] l) \n{\n\tlong\
    \ product = 1;\n\tfor(int i = 0; i < l.length; i++){\n\t\tproduct *= l[i];\n\t\
    }\n\treturn product;\n}\n/*\nReturn absolute value of all elements in the list.\n\
    \            \n*/\nlong abs_elements(long[] l) \n{\n\tlong abs = 0;\n\tfor(int\
    \ i = 0; i < l.length; i++){\n\t\tabs = abs(l[i]);\n\t}\n\treturn abs;\n}\n/*\n\
    Return absolute value of all elements in the list.\n            \n*/\ndouble abs_elements(double[]\
    \ l) \n{\n\tdouble abs = 0;\n\tfor(int i = 0; i < l.length; i++){\n\t\tabs = abs(l[i]);\n\
    \t}\n\treturn abs;\n}\n/*\nReturn absolute value of all elements in the list.\n\
    \            \n*/\nfloat abs_elements(float[] l) \n{\n\tfloat abs = 0;\n\tfor(int\
    \ i = 0; i < l.length; i++){\n\t\tabs = abs(l[i]);\n\t}\n\treturn abs;\n}\n/*\n\
    Return absolute value of all elements in the list.\n            \n*/", "{\n\t\
    long max = l[0];\n\tfor (int i = 1; i < l.length; ++i)\n\t\tif (l[i] > max)\n\t\
    \t\tmax = l[i];\n\treturn max;\n}\n/*\nReturn minimum element in the list.\n \
    \           \n*/\nlong min_element(long[] l) \n{\n\tlong min = l[0];\n\tfor (int\
    \ i = 1; i < l.length; ++i)\n\t\tif (l[i] < min)\n\t\t\tmin = l[i];\n\treturn\
    \ min;\n}\n/*\nReturn sum of all elements in the list.\n            \n*/\nlong\
    \ sum_elements(long[] l) \n{\n\tlong sum = 0;\n\tfor (int i = 0; i < l.length;\
    \ ++i)\n\t\tsum += l[i];\n\treturn sum;\n}\n/*\nReturn product of all elements\
    \ in the list.\n            \n*/\nlong product_elements(long[] l) \n{\n\tlong\
    \ prod = 1;\n\tfor (int i = 0; i < l.length; ++i)\n\t\tprod *= l[i];\n\treturn\
    \ prod;\n}\n/*\nReturn sum of all elements in the list.\n            \n*/\ndouble\
    \ sum_elements(double[] l) \n{\n\tdouble sum = 0;\n\tfor (int i = 0; i < l.length;\
    \ ++i)\n\t\tsum += l[i];\n\treturn sum;\n}\n/*\nReturn product of all elements\
    \ in the list.\n            \n*/\ndouble product_elements(double[] l) \n{\n\t\
    double prod = 1;\n\tfor (int i = 0; i < l.length; ++i)\n\t\tprod *= l[i];\n\t\
    return prod;\n}\n/*\nReturn sum of all elements in the list.\n            \n*/\n\
    float sum_elements(float[] l) \n{\n\tfloat sum = 0;\n\tfor (int i = 0; i < l.length;\
    \ ++i)\n\t\tsum += l[i];\n\treturn sum;\n}\n/*\nReturn product of all elements\
    \ in the list.\n            \n*/\nfloat product_elements(float[] l) \n{\n\tfloat\
    \ prod = 1;\n\tfor (int i = 0; i < l.length; ++i)\n\t\tprod *= l[i];\n\treturn\
    \ prod;\n}\n/*\nReturn sum of all elements in the list.\n            \n*/", "{\n\
    \tint i;\n\tlong max = l[0];\n\tfor (i = 1; i < l.length; i++)\n\t\tif (l[i] >\
    \ max)\n\t\t\tmax = l[i];\n\treturn max;\n}\n/*\nReturn minimum element in the\
    \ list.\n            \n*/\nlong min_element(long[] l) \n{\n\tint i;\n\tlong min\
    \ = l[0];\n\tfor (i = 1; i < l.length; i++)\n\t\tif (l[i] < min)\n\t\t\tmin =\
    \ l[i];\n\treturn min;\n}\n/*\nReturn sum of all elements in the list.\n     \
    \       \n*/\nlong sum_element(long[] l) \n{\n\tint i;\n\tlong sum = 0;\n\tfor\
    \ (i = 0; i < l.length; i++)\n\t\tsum += l[i];\n\treturn sum;\n}\n/*\nReturn product\
    \ of all elements in the list.\n            \n*/\nlong product_element(long[]\
    \ l) \n{\n\tint i;\n\tlong prod = 1;\n\tfor (i = 0; i < l.length; i++)\n\t\tprod\
    \ *= l[i];\n\treturn prod;\n}\n/*\nReturn sum of all elements in the list.\n \
    \           \n*/\ndouble sum_elements(double[] l) \n{\n\tint i;\n\tdouble sum\
    \ = 0;\n\tfor (i = 0; i < l.length; i++)\n\t\tsum += l[i];\n\treturn sum;\n}\n\
    /*\nReturn product of all elements in the list.\n            \n*/\ndouble product_elements(double[]\
    \ l) \n{\n\tint i;\n\tdouble prod = 1;\n\tfor (i = 0; i < l.length; i++)\n\t\t\
    prod *= l[i];\n\treturn prod;\n}\n/*\nReturn sum of all elements in the list.\n\
    \            \n*/\nfloat sum_elements(float[] l) \n{\n\tint i;\n\tfloat sum =\
    \ 0;\n\tfor (i = 0; i < l.length; i++)\n\t\tsum += l[i];\n\treturn sum;\n}\n/*\n\
    Return product of all elements in the list.\n            \n*/\nfloat product_elements(float[]\
    \ l) \n{\n\tint i;\n\tfloat prod = 1;\n\tfor (i = 0; i < l.length; i++)\n\t\t\
    prod *= l[i];\n\treturn prod;\n}\n/*\nReturn sum of all elements in the list.\n\
    \            \n*/", "{\n\tlong max = l[0];\n\tlong i;\n\tfor (i = 1; i < l.length;\
    \ i++) {\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\t}\n\treturn max;\n}", "{\n\
    \tlong max = l[0];\n\tlong i;\n\tfor (i = 1; i < l.length; i++) \n\t{\n\t\tif\
    \ (l[i] > max) \n\t\t{\n\t\t\tmax = l[i];\n\t\t}\n\t}\n\treturn max;\n}\n/*\n\
    Return minimum element in the list.\n            \n*/\nlong min_element(long[]\
    \ l) \n{\n\tlong min = l[0];\n\tlong i;\n\tfor (i = 1; i < l.length; i++) \n\t\
    {\n\t\tif (l[i] < min) \n\t\t{\n\t\t\tmin = l[i];\n\t\t}\n\t}\n\treturn min;\n\
    }\n/*\nReturn sum of all elements in the list.\n            \n*/\nlong sum_element(long[]\
    \ l) \n{\n\tlong sum = 0;\n\tlong i;\n\tfor (i = 0; i < l.length; i++) \n\t{\n\
    \t\tsum += l[i];\n\t}\n\treturn sum;\n}\n/*\nReturn product of all elements in\
    \ the list.\n            \n*/\nlong product_element(long[] l) \n{\n\tlong product\
    \ = 1;\n\tlong i;\n\tfor (i = 0; i < l.length; i++) \n\t{\n\t\tproduct *= l[i];\n\
    \t}\n\treturn product;\n}\n/*\nReturn sum of all elements in the list that are\
    \ less than the given value.\n            \n*/\nlong sum_element_less_than(long[]\
    \ l, long value) \n{\n\tlong sum = 0;\n\tlong i;\n\tfor (i = 0; i < l.length;\
    \ i++) \n\t{\n\t\tif (l[i] < value) \n\t\t{\n\t\t\tsum += l[i];\n\t\t}\n\t}\n\t\
    return sum;\n}\n/*\nReturn product of all elements in the list that are less than\
    \ the given value.\n            \n*/\nlong product_element_less_than(long[] l,\
    \ long value) \n{\n\tlong product = 1;\n\tlong i;\n\tfor (i = 0; i < l.length;\
    \ i++) \n\t{\n\t\tif (l[i] < value) \n\t\t{\n\t\t\tproduct *= l[i];\n\t\t}\n\t\
    }\n\treturn product;\n}\n/*\nReturn sum of all elements in the list that are greater\
    \ than the given value.\n            \n*/\nlong sum_element_greater_than(long[]\
    \ l, long value) \n{\n\tlong sum = 0;\n\tlong i;\n\tfor (i = 0; i < l.length;\
    \ i++) \n\t{\n\t\tif (l[i] > value) \n\t\t{\n\t\t\tsum += l[i];\n\t\t}\n\t}\n\t\
    return sum;\n}\n/*\nReturn product of all elements in the list that are greater\
    \ than the given value.\n            \n*/\nlong product_element_greater_than(long[]\
    \ l, long value) \n{\n\tlong product = 1;\n\tlong i;\n\tfor (i = 0; i < l.length;\
    \ i++) \n\t{\n\t\tif (l[i] > value) \n\t\t{\n\t\t\tproduct *= l[i];", "{\n\tlong\
    \ max;\n\tstd.sort(l);\n\tmax = l[0];\n\tfor(int i = 1; i < l.length; ++i)\n\t\
    \tif(l[i] > max)\n\t\t\tmax = l[i];\n\treturn max;\n}", "{\n\tlong max = l[0];\n\
    \tlong i;\n\tfor (i = 1; i < l.length; ++i)\n\t{\n\t\tif (l[i] > max)\n\t\t\t\
    max = l[i];\n\t}\n\treturn max;\n}\n/*\nReturn minimum element in the list.\n\
    \            \n*/\nlong min_element(long[] l) \n{\n\tlong min = l[0];\n\tlong\
    \ i;\n\tfor (i = 1; i < l.length; ++i)\n\t{\n\t\tif (l[i] < min)\n\t\t\tmin =\
    \ l[i];\n\t}\n\treturn min;\n}\n/*\nReturn sum of all elements in the list.\n\
    \            \n*/\nlong sum_element(long[] l) \n{\n\tlong sum = 0;\n\tlong i;\n\
    \tfor (i = 0; i < l.length; ++i)\n\t\tsum += l[i];\n\treturn sum;\n}\n/*\nReturn\
    \ product of all elements in the list.\n            \n*/\nlong product_element(long[]\
    \ l) \n{\n\tlong product = 1;\n\tlong i;\n\tfor (i = 0; i < l.length; ++i)\n\t\
    \tproduct *= l[i];\n\treturn product;\n}\n/*\nReturn absolute value of all elements\
    \ in the list.\n            \n*/\nlong abs_element(long[] l) \n{\n\tlong i;\n\t\
    long sum = 0;\n\tfor (i = 0; i < l.length; ++i)\n\t\tsum += l[i] * l[i];\n\treturn\
    \ sum;\n}\n/*\nReturn absolute value of all elements in the list.\n          \
    \  \n*/\nlong abs_sum(long[] l) \n{\n\tlong i;\n\tlong sum = 0;\n\tfor (i = 0;\
    \ i < l.length; ++i)\n\t\tsum += l[i] * l[i];\n\treturn sum;\n}\n/*\nReturn absolute\
    \ value of all elements in the list.\n            \n*/\nlong abs_product(long[]\
    \ l) \n{\n\tlong i;\n\tlong product = 1;\n\tfor (i = 0; i < l.length; ++i)\n\t\
    \tproduct *= l[i] * l[i];\n\treturn product;\n}\n/*\nReturn absolute value of\
    \ all elements in the list.\n            \n*/\nlong abs_max(long[] l) \n{\n\t\
    long i;\n\tlong max = 0;\n\tfor (i = 0; i < l.length; ++i)\n\t\tif (l[i] > max)\n\
    \t\t\tmax = l[i];\n\treturn max;\n}\n/*\nReturn absolute value of all elements\
    \ in the list.\n            \n*/\nlong abs_min(long[] l) \n{\n\tlong i;\n\tlong\
    \ min = 0;\n\tfor (i = 0; i < l.length; ++i)\n\t\tif (l[i] < min)\n\t\t\tmin =\
    \ l[i];\n\treturn min;\n}\n/*\nReturn absolute value of all elements in the list.\n\
    \            \n*/\nlong abs_sum(long[] l) \n{\n\tlong i;\n\tlong ", "{\n\tlong\
    \ max;\n\tstd.csort(l);\n\tmax = l[0];\n\tfor (int i = 1; i < l.length; ++i)\n\
    \t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\treturn max;\n}\n/*\nReturn minimum element\
    \ in the list.\n            \n*/\nlong min_element(long[] l) \n{\n\tlong min;\n\
    \tstd.csort(l);\n\tmin = l[0];\n\tfor (int i = 1; i < l.length; ++i)\n\t\tif (l[i]\
    \ < min)\n\t\t\tmin = l[i];\n\treturn min;\n}\n/*\nReturn sum of all elements\
    \ in the list.\n            \n*/\nlong sum_array(long[] l) \n{\n\tlong sum = 0;\n\
    \tfor (int i = 0; i < l.length; ++i)\n\t\tsum += l[i];\n\treturn sum;\n}\n/*\n\
    Return sum of all elements in the list.\n            \n*/\ndouble sum_array(double[]\
    \ l) \n{\n\tdouble sum = 0;\n\tfor (int i = 0; i < l.length; ++i)\n\t\tsum +=\
    \ l[i];\n\treturn sum;\n}\n/*\nReturn sum of all elements in the list.\n     \
    \       \n*/\nfloat sum_array(float[] l) \n{\n\tfloat sum = 0;\n\tfor (int i =\
    \ 0; i < l.length; ++i)\n\t\tsum += l[i];\n\treturn sum;\n}\n/*\nReturn sum of\
    \ all elements in the list.\n            \n*/\nlong sum_array(int[] l) \n{\n\t\
    long sum = 0;\n\tfor (int i = 0; i < l.length; ++i)\n\t\tsum += l[i];\n\treturn\
    \ sum;\n}\n/*\nReturn sum of all elements in the list.\n            \n*/\ndouble\
    \ sum_array(double2[] l) \n{\n\tdouble sum = 0;\n\tfor (int i = 0; i < l.length;\
    \ ++i)\n\t\tsum += l[i].x;\n\treturn sum;\n}\n/*\nReturn sum of all elements in\
    \ the list.\n            \n*/\nfloat sum_array(float2[] l) \n{\n\tfloat sum =\
    \ 0;\n\tfor (int i = 0; i < l.length; ++i)\n\t\tsum += l[i].x;\n\treturn sum;\n\
    }\n/*\nReturn sum of all elements in the list.\n            \n*/\nlong sum_array(int2[]\
    \ l) \n{\n\tlong sum = 0;\n\tfor (int i = 0; i < l.length; ++i)\n\t\tsum += l[i].x;\n\
    \treturn sum;\n}\n/*\nReturn sum of all elements in the list.\n            \n\
    */\ndouble sum_array(double3[] l) \n{\n\tdouble sum = 0;\n\tfor (int i = 0; i\
    \ < l.length; ++i)\n\t\tsum += l[i].x;\n\treturn sum;\n}\n/*\nReturn sum of all\
    \ elements in the list.\n            \n*/\nfloat sum_array(", "{\n\tlong max_val\
    \ = l[0];\n\tlong max_idx = 1;\n\tfor(int i = 1; i < l.length; ++i)\n\t{\n\t\t\
    if(l[i] > max_val)\n\t\t{\n\t\t\tmax_val = l[i];\n\t\t\tmax_idx = i;\n\t\t}\n\t\
    }\n\treturn max_idx;\n}", "{\n\tlong max = l[0];\n\tfor (int i = 1; i < l.length;\
    \ ++i)\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\treturn max;\n}\n/*\nReturn minimum\
    \ element in the list.\n            \n*/\nlong min_element(long[] l) \n{\n\tlong\
    \ min = l[0];\n\tfor (int i = 1; i < l.length; ++i)\n\t\tif (l[i] < min)\n\t\t\
    \tmin = l[i];\n\treturn min;\n}\n/*\nReturn sum of all elements in the list.\n\
    \            \n*/\nlong sum_element(long[] l) \n{\n\tlong sum = 0;\n\tfor (int\
    \ i = 0; i < l.length; ++i)\n\t\tsum += l[i];\n\treturn sum;\n}\n/*\nReturn product\
    \ of all elements in the list.\n            \n*/\nlong product_element(long[]\
    \ l) \n{\n\tlong prod = 1;\n\tfor (int i = 0; i < l.length; ++i)\n\t\tprod *=\
    \ l[i];\n\treturn prod;\n}\n/*\nReturn sum of all elements in the list with specified\
    \ type.\n            \n*/\nlong sum_elements(long[] l, int type) \n{\n\tlong sum\
    \ = 0;\n\tfor (int i = 0; i < l.length; ++i)\n\t\tif (type == 0)\n\t\t\tsum +=\
    \ l[i];\n\t\telse if (type == 1)\n\t\t\tsum += l[i] * l[i];\n\t\telse if (type\
    \ == 2)\n\t\t\tsum += l[i] * l[i] * l[i];\n\t\telse if (type == 3)\n\t\t\tsum\
    \ += l[i] * l[i] * l[i] * l[i];\n\t\telse if (type == 4)\n\t\t\tsum += l[i] *\
    \ l[i] * l[i] * l[i] * l[i];\n\t\telse if (type == 5)\n\t\t\tsum += l[i] * l[i]\
    \ * l[i] * l[i] * l[i] * l[i];\n\t\telse if (type == 6)\n\t\t\tsum += l[i] * l[i]\
    \ * l[i] * l[i] * l[i] * l[i] * l[i];\n\t\telse if (type == 7)\n\t\t\tsum += l[i]\
    \ * l[i] * l[i] * l[i] * l[i] * l[i] * l[i] * l[i];\n\t\telse if (type == 8)\n\
    \t\t\tsum += l[i] * l[i] * l[i] * l[i] * l[i] * l[i] * l[i] * l[i] * l[i];\n\t\
    \telse if (type == 9)\n\t\t\tsum += l[i] * l[i] * l[i] * l[i] * l[i] * l[i] *\
    \ l[i] * l[i] * l[i] * l[i];\n\t\telse if (type == 10)\n\t\t\tsum += l[i] * l[i]\
    \ * l[i] * l[i] * l[i] * l[i] * l[i] * l[i] * l[i] * l[i] * l[i];\n\t\telse if\
    \ (type == 11)\n\t\t\tsum += l[i]", "{\n\tlong max = l[0];\n\tlong i;\n\tfor(i=1;\
    \ i<l.length; i++)\n\t{\n\t\tif(l[i] > max)\n\t\t\tmax = l[i];\n\t}\n\treturn\
    \ max;\n}", "{\n\tint i;\n\tlong max = l[0];\n\tfor (i = 1; i < l.length; i++)\
    \ \n\t{\n\t\tif (l[i] > max) \n\t\t{\n\t\t\tmax = l[i];\n\t\t}\n\t}\n\treturn\
    \ max;\n}\n/*\nReturn minimum element in the list.\n            \n*/\nlong min_element(long[]\
    \ l) \n{\n\tint i;\n\tlong min = l[0];\n\tfor (i = 1; i < l.length; i++) \n\t\
    {\n\t\tif (l[i] < min) \n\t\t{\n\t\t\tmin = l[i];\n\t\t}\n\t}\n\treturn min;\n\
    }\n/*\nReturn sum of all elements in the list.\n            \n*/\nlong sum_elements(long[]\
    \ l) \n{\n\tint i;\n\tlong sum = 0;\n\tfor (i = 0; i < l.length; i++) \n\t{\n\t\
    \tsum += l[i];\n\t}\n\treturn sum;\n}\n/*\nReturn product of all elements in the\
    \ list.\n            \n*/\nlong product_elements(long[] l) \n{\n\tint i;\n\tlong\
    \ prod = 1;\n\tfor (i = 0; i < l.length; i++) \n\t{\n\t\tprod *= l[i];\n\t}\n\t\
    return prod;\n}\n/*\nReturn square root of sum of all elements in the list.\n\
    \            \n*/\ndouble sqrt(long sum) \n{\n\tdouble root;\n\troot = sqrt(sum);\n\
    \treturn root;\n}\n/*\nReturn square root of product of all elements in the list.\n\
    \            \n*/\ndouble sqrt(long prod) \n{\n\tdouble root;\n\troot = sqrt(prod);\n\
    \treturn root;\n}\n/*\nReturn square root of sum of all elements in the list.\n\
    \            \n*/\ndouble sqrt(double sum) \n{\n\tdouble root;\n\troot = sqrt(sum);\n\
    \treturn root;\n}\n/*\nReturn square root of product of all elements in the list.\n\
    \            \n*/\ndouble sqrt(double prod) \n{\n\tdouble root;\n\troot = sqrt(prod);\n\
    \treturn root;\n}\n/*\nReturn square root of sum of all elements in the list.\n\
    \            \n*/\ndouble sqrt(int sum) \n{\n\tdouble root;\n\troot = sqrt(sum);\n\
    \treturn root;\n}\n/*\nReturn square root of product of all elements in the list.\n\
    \            \n*/\ndouble sqrt(int prod) \n{\n\tdouble root;\n\troot = sqrt(prod);\n\
    \treturn root;\n}\n/*\nReturn square root of sum of all elements in the list.\n\
    \            \n*/\ndouble sqrt(short sum) \n{\n\tdouble root;\n\troot = sqrt(sum);\n\
    \treturn root;\n}\n/*\n", "{\n\tlong max = 0;\n\tfor (int i = 0; i < l.length;\
    \ i++) \n\t{\n\t\tif (l[i] > max) \n\t\t{\n\t\t\tmax = l[i];\n\t\t}\n\t}\n\treturn\
    \ max;\n}", "{\n\tint i;\n\tlong max;\n\tstd.carray<long, 1> a(l);\n\tmax = a[0];\n\
    \tfor(i = 1; i < a.length; i++)\n\t{\n\t\tif(a[i] > max)\n\t\t\tmax = a[i];\n\t\
    }\n\treturn max;\n}", "{\n\tlong max = l[0];\n\tfor (int i = 1; i < l.length;\
    \ i++)\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\treturn max;\n}\n/*\nReturn minimum\
    \ element in the list.\n            \n*/\nlong min_element(long[] l) \n{\n\tlong\
    \ min = l[0];\n\tfor (int i = 1; i < l.length; i++)\n\t\tif (l[i] < min)\n\t\t\
    \tmin = l[i];\n\treturn min;\n}\n/*\nReturn sum of all elements in the list.\n\
    \            \n*/\nlong sum_elements(long[] l) \n{\n\tlong sum = 0;\n\tfor (int\
    \ i = 0; i < l.length; i++)\n\t\tsum += l[i];\n\treturn sum;\n}\n/*\nReturn product\
    \ of all elements in the list.\n            \n*/\nlong product_elements(long[]\
    \ l) \n{\n\tlong product = 1;\n\tfor (int i = 0; i < l.length; i++)\n\t\tproduct\
    \ *= l[i];\n\treturn product;\n}\n/*\nReturn sum of all elements in the list.\n\
    \            \n*/\ndouble sum_elements(double[] l) \n{\n\tdouble sum = 0;\n\t\
    for (int i = 0; i < l.length; i++)\n\t\tsum += l[i];\n\treturn sum;\n}\n/*\nReturn\
    \ product of all elements in the list.\n            \n*/\ndouble product_elements(double[]\
    \ l) \n{\n\tdouble product = 1;\n\tfor (int i = 0; i < l.length; i++)\n\t\tproduct\
    \ *= l[i];\n\treturn product;\n}\n/*\nReturn sum of all elements in the list.\n\
    \            \n*/\nfloat sum_elements(float[] l) \n{\n\tfloat sum = 0;\n\tfor\
    \ (int i = 0; i < l.length; i++)\n\t\tsum += l[i];\n\treturn sum;\n}\n/*\nReturn\
    \ product of all elements in the list.\n            \n*/\nfloat product_elements(float[]\
    \ l) \n{\n\tfloat product = 1;\n\tfor (int i = 0; i < l.length; i++)\n\t\tproduct\
    \ *= l[i];\n\treturn product;\n}\n/*\nReturn sum of all elements in the list.\n\
    \            \n*/", "{\n\tint i;\n\tlong max;\n\tmax = l[0];\n\tfor (i = 1; i\
    \ < l.length; i++)\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\treturn max;\n}",
  "{\n\tlong max = l[0];\n\tlong i;\n\tfor (i = 1; i < l.length; i++) \n\t{\n\t\t\
    if (l[i] > max) \n\t\t{\n\t\t\tmax = l[i];\n\t\t}\n\t}\n\treturn max;\n}\n/*\n\
    Return minimum element in the list.\n            \n*/\nlong min_element(long[]\
    \ l) \n{\n\tlong min = l[0];\n\tlong i;\n\tfor (i = 1; i < l.length; i++) \n\t\
    {\n\t\tif (l[i] < min) \n\t\t{\n\t\t\tmin = l[i];\n\t\t}\n\t}\n\treturn min;\n\
    }\n/*\nReturn sum of all elements in the list.\n            \n*/\nlong sum_element(long[]\
    \ l) \n{\n\tlong sum = 0;\n\tlong i;\n\tfor (i = 0; i < l.length; i++) \n\t{\n\
    \t\tsum += l[i];\n\t}\n\treturn sum;\n}\n/*\nReturn product of all elements in\
    \ the list.\n            \n*/\nlong product_element(long[] l) \n{\n\tlong product\
    \ = 1;\n\tlong i;\n\tfor (i = 0; i < l.length; i++) \n\t{\n\t\tproduct *= l[i];\n\
    \t}\n\treturn product;\n}\n/*\nReturn absolute value of all elements in the list.\n\
    \            \n*/\nlong abs_element(long[] l) \n{\n\tlong i;\n\tfor (i = 0; i\
    \ < l.length; i++) \n\t{\n\t\tl[i] = abs(l[i]);\n\t}\n\treturn l;\n}\n/*\nReturn\
    \ absolute value of all elements in the list.\n            \n*/\nlong abs_element_long(long[]\
    \ l) \n{\n\tlong i;\n\tfor (i = 0; i < l.length; i++) \n\t{\n\t\tl[i] = abs(l[i]);\n\
    \t}\n\treturn l;\n}\n/*\nReturn absolute value of all elements in the list.\n\
    \            \n*/\ndouble abs_element_double(double[] l) \n{\n\tdouble i;\n\t\
    for (i = 0; i < l.length; i++) \n\t{\n\t\tl[i] = abs(l[i]);\n\t}\n\treturn l;\n\
    }\n/*\nReturn absolute value of all elements in the list.\n            \n*/\n\
    float abs_element_float(float[] l) \n{\n\tfloat i;\n\tfor (i = 0; i < l.length;\
    \ i++) \n\t{\n\t\tl[i] = abs(l[i]);\n\t}\n\treturn l;\n}\n/*\nReturn absolute\
    \ value of all elements in the list.\n            \n*/", "{\n\tint i;\n\tlong\
    \ max;\n\tmax = l[0];\n\tfor (i = 1; i < l.length; i++) \n\t{\n\t\tif (l[i] >\
    \ max) \n\t\t{\n\t\t\tmax = l[i];\n\t\t}\n\t}\n\treturn max;\n}\n/*\nReturn minimum\
    \ element in the list.\n            \n*/\nlong min_element(long[] l) \n{\n\tint\
    \ i;\n\tlong min;\n\tmin = l[0];\n\tfor (i = 1; i < l.length; i++) \n\t{\n\t\t\
    if (l[i] < min) \n\t\t{\n\t\t\tmin = l[i];\n\t\t}\n\t}\n\treturn min;\n}\n/*\n\
    Return sum of all elements in the list.\n            \n*/\nlong sum_element(long[]\
    \ l) \n{\n\tint i;\n\tlong sum;\n\tsum = 0;\n\tfor (i = 0; i < l.length; i++)\
    \ \n\t{\n\t\tsum += l[i];\n\t}\n\treturn sum;\n}\n/*\nReturn product of all elements\
    \ in the list.\n            \n*/\nlong product_element(long[] l) \n{\n\tint i;\n\
    \tlong prod;\n\tprod = 1;\n\tfor (i = 0; i < l.length; i++) \n\t{\n\t\tprod *=\
    \ l[i];\n\t}\n\treturn prod;\n}\n/*\nReturn absolute value of all elements in\
    \ the list.\n            \n*/\nlong abs_element(long[] l) \n{\n\tint i;\n\tlong\
    \ abs;\n\tabs = 0;\n\tfor (i = 0; i < l.length; i++) \n\t{\n\t\tabs += l[i] *\
    \ l[i];\n\t}\n\treturn abs;\n}\n/*\nReturn absolute value of all elements in the\
    \ list.\n            \n*/\ndouble abs_element(double[] l) \n{\n\tint i;\n\tdouble\
    \ abs;\n\tabs = 0;\n\tfor (i = 0; i < l.length; i++) \n\t{\n\t\tabs += l[i] *\
    \ l[i];\n\t}\n\treturn abs;\n}\n/*\nReturn absolute value of all elements in the\
    \ list.\n            \n*/\nfloat abs_element(float[] l) \n{\n\tint i;\n\tfloat\
    \ abs;\n\tabs = 0;\n\tfor (i = 0; i < l.length; i++) \n\t{\n\t\tabs += l[i] *\
    \ l[i];\n\t}\n\treturn abs;\n}\n/*\nReturn absolute value of all elements in the\
    \ list.\n            \n*/", "{\n\tlong max = l[0];\n\tlong i;\n\tfor (i = 1; i\
    \ < l.length; ++i)\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\treturn max;\n}\n\
    /*\nReturn minimum element in the list.\n            \n*/\nlong min_element(long[]\
    \ l) \n{\n\tlong min = l[0];\n\tlong i;\n\tfor (i = 1; i < l.length; ++i)\n\t\t\
    if (l[i] < min)\n\t\t\tmin = l[i];\n\treturn min;\n}\n/*\nReturn sum of all elements\
    \ in the list.\n            \n*/\nlong sum_element(long[] l) \n{\n\tlong sum =\
    \ 0;\n\tlong i;\n\tfor (i = 0; i < l.length; ++i)\n\t\tsum += l[i];\n\treturn\
    \ sum;\n}\n/*\nReturn product of all elements in the list.\n            \n*/\n\
    long product_element(long[] l) \n{\n\tlong product = 1;\n\tlong i;\n\tfor (i =\
    \ 0; i < l.length; ++i)\n\t\tproduct *= l[i];\n\treturn product;\n}\n/*\nReturn\
    \ absolute value of all elements in the list.\n            \n*/\nlong abs_element(long[]\
    \ l) \n{\n\tlong i;\n\tlong sum = 0;\n\tfor (i = 0; i < l.length; ++i)\n\t\tsum\
    \ += l[i] * l[i];\n\treturn sum;\n}\n/*\nReturn absolute value of all elements\
    \ in the list.\n            \n*/\ndouble abs_element(double[] l) \n{\n\tdouble\
    \ i;\n\tdouble sum = 0;\n\tfor (i = 0; i < l.length; ++i)\n\t\tsum += l[i] * l[i];\n\
    \treturn sum;\n}\n/*\nReturn absolute value of all elements in the list.\n   \
    \         \n*/\nfloat abs_element(float[] l) \n{\n\tfloat i;\n\tfloat sum = 0;\n\
    \tfor (i = 0; i < l.length; ++i)\n\t\tsum += l[i] * l[i];\n\treturn sum;\n}\n\
    /*\nReturn absolute value of all elements in the list.\n            \n*/", "{\n\
    \tlong max_val = 0;\n\tlong max_pos = 0;\n\tfor(int i = 0; i < l.length; i++)\n\
    \t{\n\t\tif(l[i] > max_val)\n\t\t{\n\t\t\tmax_val = l[i];\n\t\t\tmax_pos = i;\n\
    \t\t}\n\t}\n\treturn max_pos;\n}\n/*\nReturn minimum element in the list.\n  \
    \          \n*/\nlong min_element(long[] l) \n{\n\tlong min_val = 0;\n\tlong min_pos\
    \ = 0;\n\tfor(int i = 0; i < l.length; i++)\n\t{\n\t\tif(l[i] < min_val)\n\t\t\
    {\n\t\t\tmin_val = l[i];\n\t\t\tmin_pos = i;\n\t\t}\n\t}\n\treturn min_pos;\n\
    }\n/*\nReturn sum of all elements in the list.\n            \n*/\nlong sum_elements(long[]\
    \ l) \n{\n\tlong sum = 0;\n\tfor(int i = 0; i < l.length; i++)\n\t{\n\t\tsum +=\
    \ l[i];\n\t}\n\treturn sum;\n}\n/*\nReturn product of all elements in the list.\n\
    \            \n*/\nlong product_elements(long[] l) \n{\n\tlong product = 1;\n\t\
    for(int i = 0; i < l.length; i++)\n\t{\n\t\tproduct *= l[i];\n\t}\n\treturn product;\n\
    }\n/*\nReturn sum of all elements in the list.\n            \n*/\ndouble sum_elements(double[]\
    \ l) \n{\n\tdouble sum = 0;\n\tfor(int i = 0; i < l.length; i++)\n\t{\n\t\tsum\
    \ += l[i];\n\t}\n\treturn sum;\n}\n/*\nReturn product of all elements in the list.\n\
    \            \n*/\ndouble product_elements(double[] l) \n{\n\tdouble product =\
    \ 1;\n\tfor(int i = 0; i < l.length; i++)\n\t{\n\t\tproduct *= l[i];\n\t}\n\t\
    return product;\n}\n/*\nReturn sum of all elements in the list.\n            \n\
    */\nfloat sum_elements(float[] l) \n{\n\tfloat sum = 0;\n\tfor(int i = 0; i <\
    \ l.length; i++)\n\t{\n\t\tsum += l[i];\n\t}\n\treturn sum;\n}\n/*\nReturn product\
    \ of all elements in the list.\n            \n*/\nfloat product_elements(float[]\
    \ l) \n{\n\tfloat product = 1;\n\tfor(int i = 0; i < l.length; i++)\n\t{\n\t\t\
    product *= l[i];\n\t}\n\treturn product;\n}\n/*\nReturn sum of all elements in\
    \ the list.\n            \n*/", "{\n\tlong max = l[0];\n\tfor (int i = 1; i <\
    \ l.length; ++i)\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\treturn max;\n}\n/*\n\
    Return minimum element in the list.\n            \n*/\nlong min_element(long[]\
    \ l) \n{\n\tlong min = l[0];\n\tfor (int i = 1; i < l.length; ++i)\n\t\tif (l[i]\
    \ < min)\n\t\t\tmin = l[i];\n\treturn min;\n}\n/*\nReturn sum of all elements\
    \ in the list.\n            \n*/\nlong sum_elements(long[] l) \n{\n\tlong sum\
    \ = 0;\n\tfor (int i = 0; i < l.length; ++i)\n\t\tsum += l[i];\n\treturn sum;\n\
    }\n/*\nReturn product of all elements in the list.\n            \n*/\nlong product_elements(long[]\
    \ l) \n{\n\tlong product = 1;\n\tfor (int i = 0; i < l.length; ++i)\n\t\tproduct\
    \ *= l[i];\n\treturn product;\n}\n/*\nReturn sum of all elements in the list with\
    \ specified type.\n            \n*/\nlong sum_elements(long[] l, int type) \n\
    {\n\tlong sum = 0;\n\tfor (int i = 0; i < l.length; ++i)\n\t\tif (type == 0)\n\
    \t\t\tsum += l[i];\n\t\telse if (type == 1)\n\t\t\tsum += l[i] * l[i];\n\t\telse\
    \ if (type == 2)\n\t\t\tsum += l[i] * l[i] * l[i];\n\t\telse if (type == 3)\n\t\
    \t\tsum += l[i] * l[i] * l[i] * l[i];\n\t\telse if (type == 4)\n\t\t\tsum += l[i]\
    \ * l[i] * l[i] * l[i] * l[i];\n\t\telse if (type == 5)\n\t\t\tsum += l[i] * l[i]\
    \ * l[i] * l[i] * l[i] * l[i];\n\t\telse if (type == 6)\n\t\t\tsum += l[i] * l[i]\
    \ * l[i] * l[i] * l[i] * l[i] * l[i];\n\t\telse if (type == 7)\n\t\t\tsum += l[i]\
    \ * l[i] * l[i] * l[i] * l[i] * l[i] * l[i] * l[i];\n\t\telse if (type == 8)\n\
    \t\t\tsum += l[i] * l[i] * l[i] * l[i] * l[i] * l[i] * l[i] * l[i] * l[i];\n\t\
    \telse if (type == 9)\n\t\t\tsum += l[i] * l[i] * l[i] * l[i] * l[i] * l[i] *\
    \ l[i] * l[i] * l[i] * l[i];\n\t\telse if (type == 10)\n\t\t\tsum += l[i] * l[i]\
    \ * l[i] * l[i] * l[i] * l[i] * l[i] * l[i] * l[i] * l[i] * l[i];\n\t\telse if\
    \ (type == 11)\n\t\t\tsum += l[i]", "{\n\tint i;\n\tlong max;\n\tmax = l[0];\n\
    \tfor (i = 1; i < l.length; ++i)\n\t{\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\
    \t}\n\treturn max;\n}\n/*\nReturn minimum element in the list.\n            \n\
    */\nlong min_element(long[] l) \n{\n\tint i;\n\tlong min;\n\tmin = l[0];\n\tfor\
    \ (i = 1; i < l.length; ++i)\n\t{\n\t\tif (l[i] < min)\n\t\t\tmin = l[i];\n\t\
    }\n\treturn min;\n}\n/*\nReturn sum of all elements in the list.\n           \
    \ \n*/\nlong sum_elements(long[] l) \n{\n\tint i;\n\tlong sum = 0;\n\tfor (i =\
    \ 0; i < l.length; ++i)\n\t\tsum += l[i];\n\treturn sum;\n}\n/*\nReturn product\
    \ of all elements in the list.\n            \n*/\nlong product_elements(long[]\
    \ l) \n{\n\tint i;\n\tlong prod = 1;\n\tfor (i = 0; i < l.length; ++i)\n\t\tprod\
    \ *= l[i];\n\treturn prod;\n}\n/*\nReturn sum of all elements in the list divided\
    \ by number of elements in the list.\n            \n*/\ndouble sum_elements_divided_by_elements(long[]\
    \ l, int n) \n{\n\tint i;\n\tdouble sum = 0;\n\tfor (i = 0; i < n; ++i)\n\t\t\
    sum += l[i];\n\treturn sum;\n}\n/*\nReturn product of all elements in the list\
    \ divided by number of elements in the list.\n            \n*/\ndouble product_elements_divided_by_elements(long[]\
    \ l, int n) \n{\n\tint i;\n\tdouble prod = 1;\n\tfor (i = 0; i < n; ++i)\n\t\t\
    prod *= l[i];\n\treturn prod;\n}\n/*\nReturn sum of all elements in the list divided\
    \ by number of elements in the list.\n            \n*/\nfloat sum_elements_divided_by_elements(long[]\
    \ l, int n) \n{\n\tint i;\n\tfloat sum = 0;\n\tfor (i = 0; i < n; ++i)\n\t\tsum\
    \ += l[i];\n\treturn sum;\n}\n/*\nReturn product of all elements in the list divided\
    \ by number of elements in the list.\n            \n*/\nfloat product_elements_divided_by_elements(long[]\
    \ l, int n) \n{\n\tint i;\n\tfloat prod = 1;\n\tfor (i = 0; i < n; ++i)\n\t\t\
    prod *= l[i];\n\treturn prod;\n}\n/*\nReturn sum of all elements in the list divided\
    \ by number of elements in the list.\n            \n*/\ndouble sum_elements_divided_by_elements(double[]\
    \ l, int n) \n{\n\tint i;\n\tdouble sum = 0;\n", "{\n\tlong max = l[0];\n\tfor\
    \ (int i = 1; i < l.length; ++i)\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\treturn\
    \ max;\n}\n/*\nReturn minimum element in the list.\n            \n*/\nlong min_element(long[]\
    \ l) \n{\n\tlong min = l[0];\n\tfor (int i = 1; i < l.length; ++i)\n\t\tif (l[i]\
    \ < min)\n\t\t\tmin = l[i];\n\treturn min;\n}\n/*\nReturn sum of all elements\
    \ in the list.\n            \n*/\nlong sum_elements(long[] l) \n{\n\tlong sum\
    \ = 0;\n\tfor (int i = 0; i < l.length; ++i)\n\t\tsum += l[i];\n\treturn sum;\n\
    }\n/*\nReturn product of all elements in the list.\n            \n*/\nlong product_elements(long[]\
    \ l) \n{\n\tlong product = 1;\n\tfor (int i = 0; i < l.length; ++i)\n\t\tproduct\
    \ *= l[i];\n\treturn product;\n}\n/*\nReturn sum of all elements in the list.\n\
    \            \n*/\ndouble sum_elements_double(double[] l) \n{\n\tdouble sum =\
    \ 0;\n\tfor (int i = 0; i < l.length; ++i)\n\t\tsum += l[i];\n\treturn sum;\n\
    }\n/*\nReturn product of all elements in the list.\n            \n*/\ndouble product_elements_double(double[]\
    \ l) \n{\n\tdouble product = 1;\n\tfor (int i = 0; i < l.length; ++i)\n\t\tproduct\
    \ *= l[i];\n\treturn product;\n}\n/*\nReturn sum of all elements in the list.\n\
    \            \n*/\nfloat sum_elements_float(float[] l) \n{\n\tfloat sum = 0;\n\
    \tfor (int i = 0; i < l.length; ++i)\n\t\tsum += l[i];\n\treturn sum;\n}\n/*\n\
    Return product of all elements in the list.\n            \n*/\nfloat product_elements_float(float[]\
    \ l) \n{\n\tfloat product = 1;\n\tfor (int i = 0; i < l.length; ++i)\n\t\tproduct\
    \ *= l[i];\n\treturn product;\n}\n/*\nReturn sum of all elements in the list.\n\
    \            \n*/", "{\n\tlong max = l[0];\n\tfor (int i = 1; i < l.length; ++i)\n\
    \t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\treturn max;\n}\n/*\nReturn minimum element\
    \ in the list.\n            \n*/\nlong min_element(long[] l) \n{\n\tlong min =\
    \ l[0];\n\tfor (int i = 1; i < l.length; ++i)\n\t\tif (l[i] < min)\n\t\t\tmin\
    \ = l[i];\n\treturn min;\n}\n/*\nReturn sum of all elements in the list.\n   \
    \         \n*/\nlong sum_element(long[] l) \n{\n\tlong sum = 0;\n\tfor (int i\
    \ = 0; i < l.length; ++i)\n\t\tsum += l[i];\n\treturn sum;\n}\n/*\nReturn product\
    \ of all elements in the list.\n            \n*/\nlong product_element(long[]\
    \ l) \n{\n\tlong prod = 1;\n\tfor (int i = 0; i < l.length; ++i)\n\t\tprod *=\
    \ l[i];\n\treturn prod;\n}\n/*\nReturn absolute value of all elements in the list.\n\
    \            \n*/\nlong abs_element(long[] l) \n{\n\tlong abs = 0;\n\tfor (int\
    \ i = 0; i < l.length; ++i)\n\t\tabs = max(abs, l[i]);\n\treturn abs;\n}\n/*\n\
    Return absolute value of all elements in the list.\n            \n*/\ndouble abs_element(double[]\
    \ l) \n{\n\tdouble abs = 0;\n\tfor (int i = 0; i < l.length; ++i)\n\t\tabs = max(abs,\
    \ l[i]);\n\treturn abs;\n}\n/*\nReturn absolute value of all elements in the list.\n\
    \            \n*/\nfloat abs_element(float[] l) \n{\n\tfloat abs = 0;\n\tfor (int\
    \ i = 0; i < l.length; ++i)\n\t\tabs = max(abs, l[i]);\n\treturn abs;\n}\n/*\n\
    Return absolute value of all elements in the list.\n            \n*/", "{\n\t\
    long max = l[0];\n\tfor (int i = 1; i < l.length; ++i)\n\t\tif (l[i] > max)\n\t\
    \t\tmax = l[i];\n\treturn max;\n}\n/*\nReturn minimum element in the list.\n \
    \           \n*/\nlong min_element(long[] l) \n{\n\tlong min = l[0];\n\tfor (int\
    \ i = 1; i < l.length; ++i)\n\t\tif (l[i] < min)\n\t\t\tmin = l[i];\n\treturn\
    \ min;\n}\n/*\nReturn sum of all elements in the list.\n            \n*/\nlong\
    \ sum_elements(long[] l) \n{\n\tlong sum = 0;\n\tfor (int i = 0; i < l.length;\
    \ ++i)\n\t\tsum += l[i];\n\treturn sum;\n}\n/*\nReturn product of all elements\
    \ in the list.\n            \n*/\nlong product_elements(long[] l) \n{\n\tlong\
    \ product = 1;\n\tfor (int i = 0; i < l.length; ++i)\n\t\tproduct *= l[i];\n\t\
    return product;\n}\n/*\nReturn absolute value of all elements in the list.\n \
    \           \n*/\nlong abs_elements(long[] l) \n{\n\tlong sum = 0;\n\tfor (int\
    \ i = 0; i < l.length; ++i)\n\t\tsum += l[i] * l[i];\n\treturn sum;\n}\n/*\nReturn\
    \ absolute value of all elements in the list.\n            \n*/\ndouble abs_elements(double[]\
    \ l) \n{\n\tdouble sum = 0;\n\tfor (int i = 0; i < l.length; ++i)\n\t\tsum +=\
    \ l[i] * l[i];\n\treturn sum;\n}\n/*\nReturn absolute value of all elements in\
    \ the list.\n            \n*/\nfloat abs_elements(float[] l) \n{\n\tfloat sum\
    \ = 0;\n\tfor (int i = 0; i < l.length; ++i)\n\t\tsum += l[i] * l[i];\n\treturn\
    \ sum;\n}\n/*\nReturn absolute value of all elements in the list.\n          \
    \  \n*/", "{\n\tlong max = l[0];\n\tfor (int i = 1; i < l.length; i++)\n\t\tif\
    \ (l[i] > max)\n\t\t\tmax = l[i];\n\treturn max;\n}\n/*\nReturn minimum element\
    \ in the list.\n            \n*/\nlong min_element(long[] l) \n{\n\tlong min =\
    \ l[0];\n\tfor (int i = 1; i < l.length; i++)\n\t\tif (l[i] < min)\n\t\t\tmin\
    \ = l[i];\n\treturn min;\n}\n/*\nReturn sum of all elements in the list.\n   \
    \         \n*/\nlong sum_element(long[] l) \n{\n\tlong sum = 0;\n\tfor (int i\
    \ = 0; i < l.length; i++)\n\t\tsum += l[i];\n\treturn sum;\n}\n/*\nReturn product\
    \ of all elements in the list.\n            \n*/\nlong product_element(long[]\
    \ l) \n{\n\tlong prod = 1;\n\tfor (int i = 0; i < l.length; i++)\n\t\tprod *=\
    \ l[i];\n\treturn prod;\n}\n/*\nReturn absolute value of all elements in the list.\n\
    \            \n*/\nlong abs_element(long[] l) \n{\n\tlong abs = 0;\n\tfor (int\
    \ i = 0; i < l.length; i++)\n\t\tabs = max(abs, l[i]);\n\treturn abs;\n}\n/*\n\
    Return absolute value of all elements in the list.\n            \n*/\ndouble abs_element(double[]\
    \ l) \n{\n\tdouble abs = 0;\n\tfor (int i = 0; i < l.length; i++)\n\t\tabs = max(abs,\
    \ l[i]);\n\treturn abs;\n}\n/*\nReturn absolute value of all elements in the list.\n\
    \            \n*/\nfloat abs_element(float[] l) \n{\n\tfloat abs = 0;\n\tfor (int\
    \ i = 0; i < l.length; i++)\n\t\tabs = max(abs, l[i]);\n\treturn abs;\n}\n/*\n\
    Return absolute value of all elements in the list.\n            \n*/", "{\n\t\
    long max = l[0];\n\tlong i;\n\tfor (i = 1; i < l.length; i++)\n\t\tif (l[i] >\
    \ max)\n\t\t\tmax = l[i];\n\treturn max;\n}\n/*\nReturn minimum element in the\
    \ list.\n            \n*/\nlong min_element(long[] l) \n{\n\tlong min = l[0];\n\
    \tlong i;\n\tfor (i = 1; i < l.length; i++)\n\t\tif (l[i] < min)\n\t\t\tmin =\
    \ l[i];\n\treturn min;\n}\n/*\nReturn sum of all elements in the list.\n     \
    \       \n*/\nlong sum_element(long[] l) \n{\n\tlong sum = 0;\n\tlong i;\n\tfor\
    \ (i = 0; i < l.length; i++)\n\t\tsum += l[i];\n\treturn sum;\n}\n/*\nReturn product\
    \ of all elements in the list.\n            \n*/\nlong prod_element(long[] l)\
    \ \n{\n\tlong prod = 1;\n\tlong i;\n\tfor (i = 0; i < l.length; i++)\n\t\tprod\
    \ *= l[i];\n\treturn prod;\n}\n/*\nReturn absolute value of all elements in the\
    \ list.\n            \n*/\nlong abs_element(long[] l) \n{\n\tlong i;\n\tfor (i\
    \ = 0; i < l.length; i++)\n\t\tl[i] = abs(l[i]);\n\treturn l;\n}\n/*\nReturn absolute\
    \ value of all elements in the list.\n            \n*/\nlong abs_sum(long[] l)\
    \ \n{\n\tlong i;\n\tfor (i = 0; i < l.length; i++)\n\t\tl[i] = abs(l[i]);\n\t\
    return sum_element(l);\n}\n/*\nReturn absolute value of all elements in the list.\n\
    \            \n*/\nlong abs_prod(long[] l) \n{\n\tlong i;\n\tfor (i = 0; i < l.length;\
    \ i++)\n\t\tl[i] = abs(l[i]);\n\treturn prod_element(l);\n}\n/*\nReturn absolute\
    \ value of all elements in the list.\n            \n*/\nlong abs_max(long[] l)\
    \ \n{\n\tlong i;\n\tfor (i = 0; i < l.length; i++)\n\t\tl[i] = abs(l[i]);\n\t\
    return max_element(l);\n}\n/*\nReturn absolute value of all elements in the list.\n\
    \            \n*/\nlong abs_min(long[] l) \n{\n\tlong i;\n\tfor (i = 0; i < l.length;\
    \ i++)\n\t\tl[i] = abs(l[i]);\n\treturn min_element(l);\n}\n/*\nReturn absolute\
    \ value of all elements in the list.\n            \n*/\nlong abs_avg(long[] l)\
    \ \n{\n\tlong i;\n\tfor (i = 0; i < l.length; i++)\n\t\tl[i] = abs(l[i]);\n\t\
    return sum_element(l) / l.length;\n}\n/*\nReturn absolute value of all elements\
    \ in the list.\n            \n*/\nlong abs_max(long[] l, long x) \n{\n\tlong i;",
  "{\n\tint i;\n\tlong max = l[0];\n\tfor (i = 1; i < l.length; i++) \n\t\tif (l[i]\
    \ > max) \n\t\t\tmax = l[i];\n\treturn max;\n}", "{\n\tlong max = l[0];\n\tfor\
    \ (int i = 1; i < l.length; ++i)\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\treturn\
    \ max;\n}\n/*\nReturn minimum element in the list.\n            \n*/\nlong min_element(long[]\
    \ l) \n{\n\tlong min = l[0];\n\tfor (int i = 1; i < l.length; ++i)\n\t\tif (l[i]\
    \ < min)\n\t\t\tmin = l[i];\n\treturn min;\n}\n/*\nReturn sum of all elements\
    \ in the list.\n            \n*/\nlong sum_elements(long[] l) \n{\n\tlong sum\
    \ = 0;\n\tfor (int i = 0; i < l.length; ++i)\n\t\tsum += l[i];\n\treturn sum;\n\
    }\n/*\nReturn product of all elements in the list.\n            \n*/\nlong product_elements(long[]\
    \ l) \n{\n\tlong prod = 1;\n\tfor (int i = 0; i < l.length; ++i)\n\t\tprod *=\
    \ l[i];\n\treturn prod;\n}\n/*\nReturn sum of all elements in the list.\n    \
    \        \n*/\ndouble sum_elements(double[] l) \n{\n\tdouble sum = 0;\n\tfor (int\
    \ i = 0; i < l.length; ++i)\n\t\tsum += l[i];\n\treturn sum;\n}\n/*\nReturn product\
    \ of all elements in the list.\n            \n*/\ndouble product_elements(double[]\
    \ l) \n{\n\tdouble prod = 1;\n\tfor (int i = 0; i < l.length; ++i)\n\t\tprod *=\
    \ l[i];\n\treturn prod;\n}\n/*\nReturn sum of all elements in the list.\n    \
    \        \n*/\nfloat sum_elements(float[] l) \n{\n\tfloat sum = 0;\n\tfor (int\
    \ i = 0; i < l.length; ++i)\n\t\tsum += l[i];\n\treturn sum;\n}\n/*\nReturn product\
    \ of all elements in the list.\n            \n*/\nfloat product_elements(float[]\
    \ l) \n{\n\tfloat prod = 1;\n\tfor (int i = 0; i < l.length; ++i)\n\t\tprod *=\
    \ l[i];\n\treturn prod;\n}\n/*\nReturn sum of all elements in the list.\n    \
    \        \n*/", "{\n\tlong max = 0;\n\tlong i;\n\tfor(i = 0; i < l.length; i++){\n\
    \t\tif(l[i] > max){\n\t\t\tmax = l[i];\n\t\t}\n\t}\n\treturn max;\n}\n/*\nReturn\
    \ minimum element in the list.\n            \n*/\nlong min_element(long[] l) \n\
    {\n\tlong min = 0;\n\tlong i;\n\tfor(i = 0; i < l.length; i++){\n\t\tif(l[i] <\
    \ min){\n\t\t\tmin = l[i];\n\t\t}\n\t}\n\treturn min;\n}\n/*\nReturn sum of all\
    \ elements in the list.\n            \n*/\nlong sum_element(long[] l) \n{\n\t\
    long sum = 0;\n\tlong i;\n\tfor(i = 0; i < l.length; i++){\n\t\tsum += l[i];\n\
    \t}\n\treturn sum;\n}\n/*\nReturn product of all elements in the list.\n     \
    \       \n*/\nlong prod_element(long[] l) \n{\n\tlong prod = 1;\n\tlong i;\n\t\
    for(i = 0; i < l.length; i++){\n\t\tprod *= l[i];\n\t}\n\treturn prod;\n}\n/*\n\
    Return absolute value of all elements in the list.\n            \n*/\nlong abs_element(long[]\
    \ l) \n{\n\tlong i;\n\tfor(i = 0; i < l.length; i++){\n\t\tl[i] = abs(l[i]);\n\
    \t}\n\treturn l;\n}\n/*\nReturn absolute value of all elements in the list.\n\
    \            \n*/\nlong abs_element_long(long[] l) \n{\n\tlong i;\n\tfor(i = 0;\
    \ i < l.length; i++){\n\t\tl[i] = abs(l[i]);\n\t}\n\treturn l;\n}\n/*\nReturn\
    \ absolute value of all elements in the list.\n            \n*/\nlong abs_element_int(long[]\
    \ l) \n{\n\tlong i;\n\tfor(i = 0; i < l.length; i++){\n\t\tl[i] = abs(l[i]);\n\
    \t}\n\treturn l;\n}\n/*\nReturn absolute value of all elements in the list.\n\
    \            \n*/\nlong abs_element_double(long[] l) \n{\n\tlong i;\n\tfor(i =\
    \ 0; i < l.length; i++){\n\t\tl[i] = abs(l[i]);\n\t}\n\treturn l;\n}\n/*\nReturn\
    \ absolute value of all elements in the list.\n            \n*/\nlong abs_element_float(long[]\
    \ l) \n{\n\tlong i;\n\tfor(i = 0; i < l.length; i++){\n\t\tl[i] = abs(l[i]);\n\
    \t}\n\treturn l;\n}\n/*\nReturn absolute value of all elements in the list.\n\
    \            \n*/\nlong abs_element_byte(long[] l) \n{\n\tlong i;\n\tfor(i = 0;\
    \ i < l.length; i++){\n\t\tl[i] = abs(l[i]);\n\t}\n\treturn ", "{\n\tlong max\
    \ = l[0];\n\tfor (int i = 1; i < l.length; ++i)\n\t\tif (l[i] > max)\n\t\t\tmax\
    \ = l[i];\n\treturn max;\n}\n/*\nReturn minimum element in the list.\n       \
    \     \n*/\nlong min_element(long[] l) \n{\n\tlong min = l[0];\n\tfor (int i =\
    \ 1; i < l.length; ++i)\n\t\tif (l[i] < min)\n\t\t\tmin = l[i];\n\treturn min;\n\
    }\n/*\nReturn sum of all elements in the list.\n            \n*/\nlong sum_elements(long[]\
    \ l) \n{\n\tlong sum = 0;\n\tfor (int i = 0; i < l.length; ++i)\n\t\tsum += l[i];\n\
    \treturn sum;\n}\n/*\nReturn product of all elements in the list.\n          \
    \  \n*/\nlong product_elements(long[] l) \n{\n\tlong product = 1;\n\tfor (int\
    \ i = 0; i < l.length; ++i)\n\t\tproduct *= l[i];\n\treturn product;\n}\n/*\n\
    Return sum of all elements in the list.\n            \n*/\ndouble sum_elements(double[]\
    \ l) \n{\n\tdouble sum = 0;\n\tfor (int i = 0; i < l.length; ++i)\n\t\tsum +=\
    \ l[i];\n\treturn sum;\n}\n/*\nReturn product of all elements in the list.\n \
    \           \n*/\ndouble product_elements(double[] l) \n{\n\tdouble product =\
    \ 1;\n\tfor (int i = 0; i < l.length; ++i)\n\t\tproduct *= l[i];\n\treturn product;\n\
    }\n/*\nReturn sum of all elements in the list.\n            \n*/\nfloat sum_elements(float[]\
    \ l) \n{\n\tfloat sum = 0;\n\tfor (int i = 0; i < l.length; ++i)\n\t\tsum += l[i];\n\
    \treturn sum;\n}\n/*\nReturn product of all elements in the list.\n          \
    \  \n*/\nfloat product_elements(float[] l) \n{\n\tfloat product = 1;\n\tfor (int\
    \ i = 0; i < l.length; ++i)\n\t\tproduct *= l[i];\n\treturn product;\n}\n/*\n\
    Return sum of all elements in the list.\n            \n*/", "{\n\tlong max;\n\t\
    std.csort(l);\n\tmax = l[0];\n\tfor(int i = 1; i < l.length; ++i)\n\t\tif(l[i]\
    \ > max)\n\t\t\tmax = l[i];\n\treturn max;\n}\n/*\nReturn minimum element in the\
    \ list.\n            \n*/\nlong min_element(long[] l) \n{\n\tlong min;\n\tstd.csort(l);\n\
    \tmin = l[0];\n\tfor(int i = 1; i < l.length; ++i)\n\t\tif(l[i] < min)\n\t\t\t\
    min = l[i];\n\treturn min;\n}\n/*\nReturn sum of all elements in the list.\n \
    \           \n*/\nlong sum_array(long[] l) \n{\n\tlong sum = 0;\n\tfor(int i =\
    \ 0; i < l.length; ++i)\n\t\tsum += l[i];\n\treturn sum;\n}\n/*\nReturn product\
    \ of all elements in the list.\n            \n*/\nlong prod_array(long[] l) \n\
    {\n\tlong prod = 1;\n\tfor(int i = 0; i < l.length; ++i)\n\t\tprod *= l[i];\n\t\
    return prod;\n}\n/*\nReturn absolute value of all elements in the list.\n    \
    \        \n*/\nlong abs_array(long[] l) \n{\n\tlong abs = 0;\n\tfor(int i = 0;\
    \ i < l.length; ++i)\n\t\tabs = std.abs(l[i]);\n\treturn abs;\n}\n/*\nReturn absolute\
    \ value of all elements in the list.\n            \n*/\ndouble abs_array(double[]\
    \ l) \n{\n\tdouble abs = 0;\n\tfor(int i = 0; i < l.length; ++i)\n\t\tabs = std.abs(l[i]);\n\
    \treturn abs;\n}\n/*\nReturn absolute value of all elements in the list.\n   \
    \         \n*/\nfloat abs_array(float[] l) \n{\n\tfloat abs = 0;\n\tfor(int i\
    \ = 0; i < l.length; ++i)\n\t\tabs = std.abs(l[i]);\n\treturn abs;\n}\n/*\nReturn\
    \ absolute value of all elements in the list.\n            \n*/", "{\n\tlong max\
    \ = l[0];\n\tfor (int i = 1; i < l.length; ++i)\n\t\tif (l[i] > max)\n\t\t\tmax\
    \ = l[i];\n\treturn max;\n}\n/*\nReturn minimum element in the list.\n       \
    \     \n*/\nlong min_element(long[] l) \n{\n\tlong min = l[0];\n\tfor (int i =\
    \ 1; i < l.length; ++i)\n\t\tif (l[i] < min)\n\t\t\tmin = l[i];\n\treturn min;\n\
    }\n/*\nReturn sum of all elements in the list.\n            \n*/\nlong sum_element(long[]\
    \ l) \n{\n\tlong sum = 0;\n\tfor (int i = 0; i < l.length; ++i)\n\t\tsum += l[i];\n\
    \treturn sum;\n}\n/*\nReturn product of all elements in the list.\n          \
    \  \n*/\nlong prod_element(long[] l) \n{\n\tlong prod = 1;\n\tfor (int i = 0;\
    \ i < l.length; ++i)\n\t\tprod *= l[i];\n\treturn prod;\n}\n/*\nReturn absolute\
    \ value of all elements in the list.\n            \n*/\nlong abs_element(long[]\
    \ l) \n{\n\tlong abs = 0;\n\tfor (int i = 0; i < l.length; ++i)\n\t\tabs = max(abs,\
    \ abs(l[i]));\n\treturn abs;\n}\n/*\nReturn absolute value of all elements in\
    \ the list.\n            \n*/\ndouble abs_element(double[] l) \n{\n\tdouble abs\
    \ = 0;\n\tfor (int i = 0; i < l.length; ++i)\n\t\tabs = max(abs, abs(l[i]));\n\
    \treturn abs;\n}\n/*\nReturn absolute value of all elements in the list.\n   \
    \         \n*/\nfloat abs_element(float[] l) \n{\n\tfloat abs = 0;\n\tfor (int\
    \ i = 0; i < l.length; ++i)\n\t\tabs = max(abs, abs(l[i]));\n\treturn abs;\n}\n\
    /*\nReturn absolute value of all elements in the list.\n            \n*/\nlong\
    \ abs_element(long l) \n{\n\tlong abs = 0;\n\tfor (int i = 0; i < l.length; ++i)\n\
    \t\tabs = max(abs, abs(l));\n\treturn abs;\n}\n/*\nReturn absolute value of all\
    \ elements in the list.\n            \n*/\ndouble abs_element(double l) \n{\n\t\
    double abs = 0;\n\tfor (int i = 0; i < l.length; ++i)\n\t\tabs = max(abs, abs(l));\n\
    \treturn abs;\n}\n/*\nReturn absolute value of all elements in the list.\n   \
    \         \n*/\nfloat abs_element(float l) \n{\n\tfloat abs = 0;\n\tfor (int i\
    \ = 0; i < l.length; ++i)\n\t\tabs = max(abs, abs(l));\n\treturn abs;\n}\n/*\n\
    Return absolute value of all elements in the list.\n", "{\n\tint i;\n\tlong max\
    \ = l[0];\n\tfor (i = 1; i < l.length; i++)\n\t\tif (l[i] > max)\n\t\t\tmax =\
    \ l[i];\n\treturn max;\n}\n/*\nReturn minimum element in the list.\n         \
    \   \n*/\nlong min_element(long[] l) \n{\n\tint i;\n\tlong min = l[0];\n\tfor\
    \ (i = 1; i < l.length; i++)\n\t\tif (l[i] < min)\n\t\t\tmin = l[i];\n\treturn\
    \ min;\n}\n/*\nReturn sum of all elements in the list.\n            \n*/\nlong\
    \ sum_element(long[] l) \n{\n\tint i;\n\tlong sum = 0;\n\tfor (i = 0; i < l.length;\
    \ i++)\n\t\tsum += l[i];\n\treturn sum;\n}\n/*\nReturn product of all elements\
    \ in the list.\n            \n*/\nlong prod_element(long[] l) \n{\n\tint i;\n\t\
    long prod = 1;\n\tfor (i = 0; i < l.length; i++)\n\t\tprod *= l[i];\n\treturn\
    \ prod;\n}\n/*\nReturn absolute value of all elements in the list.\n         \
    \   \n*/\nlong abs_element(long[] l) \n{\n\tint i;\n\tlong abs = 0;\n\tfor (i\
    \ = 0; i < l.length; i++)\n\t\tabs = max(abs, abs(l[i]));\n\treturn abs;\n}\n\
    /*\nReturn absolute value of all elements in the list.\n            \n*/\ndouble\
    \ abs_element(double[] l) \n{\n\tint i;\n\tdouble abs = 0;\n\tfor (i = 0; i <\
    \ l.length; i++)\n\t\tabs = max(abs, abs(l[i]));\n\treturn abs;\n}\n/*\nReturn\
    \ absolute value of all elements in the list.\n            \n*/\nfloat abs_element(float[]\
    \ l) \n{\n\tint i;\n\tfloat abs = 0;\n\tfor (i = 0; i < l.length; i++)\n\t\tabs\
    \ = max(abs, abs(l[i]));\n\treturn abs;\n}\n/*\nReturn absolute value of all elements\
    \ in the list.\n            \n*/\nlong long abs_element(long long[] l) \n{\n\t\
    int i;\n\tlong long abs = 0;\n\tfor (i = 0; i < l.length; i++)\n\t\tabs = max(abs,\
    \ abs(l[i]));\n\treturn abs;\n}\n/*\nReturn absolute value of all elements in\
    \ the list.\n            \n*/\ndouble abs_element(double[] l, int i) \n{\n\tint\
    \ j;\n\tdouble abs = 0;\n\tfor (j = 0; j < i; j++)\n\t\tabs = max(abs, abs(l[j]));\n\
    \treturn abs;\n}\n/*\nReturn absolute value of all elements in the list.\n   \
    \         \n*/\nfloat abs_element(float[] l, int i) \n{\n\tint j;\n\tfloat abs\
    \ = 0;\n\tfor (j = 0; j < i; j++)\n\t\tabs = max(", "{\n\tint i;\n\tlong max =\
    \ l[0];\n\tfor(i=1; i<l.length; i++)\n\t\tif(l[i] > max)\n\t\t\tmax = l[i];\n\t\
    return max;\n}", "{\n\tlong max = l[0];\n\tlong i;\n\tfor (i = 1; i < l.length;\
    \ i++) \n\t{\n\t\tif (l[i] > max) \n\t\t{\n\t\t\tmax = l[i];\n\t\t}\n\t}\n\treturn\
    \ max;\n}\n/*\nReturn minimum element in the list.\n            \n*/\nlong min_element(long[]\
    \ l) \n{\n\tlong min = l[0];\n\tlong i;\n\tfor (i = 1; i < l.length; i++) \n\t\
    {\n\t\tif (l[i] < min) \n\t\t{\n\t\t\tmin = l[i];\n\t\t}\n\t}\n\treturn min;\n\
    }\n/*\nReturn sum of all elements in the list.\n            \n*/\nlong sum_element(long[]\
    \ l) \n{\n\tlong sum = 0;\n\tlong i;\n\tfor (i = 0; i < l.length; i++) \n\t{\n\
    \t\tsum += l[i];\n\t}\n\treturn sum;\n}\n/*\nReturn product of all elements in\
    \ the list.\n            \n*/\nlong product_element(long[] l) \n{\n\tlong product\
    \ = 1;\n\tlong i;\n\tfor (i = 0; i < l.length; i++) \n\t{\n\t\tproduct *= l[i];\n\
    \t}\n\treturn product;\n}\n/*\nReturn absolute value of all elements in the list.\n\
    \            \n*/\nlong abs_element(long[] l) \n{\n\tlong i;\n\tlong sum = 0;\n\
    \tfor (i = 0; i < l.length; i++) \n\t{\n\t\tsum += l[i];\n\t}\n\treturn sum;\n\
    }\n/*\nReturn absolute value of all elements in the list.\n            \n*/\n\
    long abs_element(double[] l) \n{\n\tlong i;\n\tlong sum = 0;\n\tfor (i = 0; i\
    \ < l.length; i++) \n\t{\n\t\tsum += l[i];\n\t}\n\treturn sum;\n}\n/*\nReturn\
    \ absolute value of all elements in the list.\n            \n*/\nlong abs_element(float[]\
    \ l) \n{\n\tlong i;\n\tlong sum = 0;\n\tfor (i = 0; i < l.length; i++) \n\t{\n\
    \t\tsum += l[i];\n\t}\n\treturn sum;\n}\n/*\nReturn absolute value of all elements\
    \ in the list.\n            \n*/\nlong abs_element(int[] l) \n{\n\tlong i;\n\t\
    long sum = 0;\n\tfor (i = 0; i < l.length; i++) \n\t{\n\t\tsum += l[i];\n\t}\n\
    \treturn sum;\n}\n/*\nReturn absolute value of all elements in the list.\n   \
    \         \n*/\nlong abs_element(short[] l) \n{\n\tlong i;\n\tlong sum = 0;\n\t\
    for (i = 0; i < l.length; i++) \n\t{\n\t\tsum += l[i];\n\t}\n\treturn sum;\n}\n\
    /*\nReturn absolute value of all elements in the list.\n            \n*/\n", "{\n\
    \tlong max = l[0];\n\tfor (int i = 1; i < l.length; ++i)\n\t\tif (l[i] > max)\n\
    \t\t\tmax = l[i];\n\treturn max;\n}", "{\n\tlong max = 0;\n\tlong i = 0;\n\twhile\
    \ (i < l.length) {\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\t\ti++;\n\t}\n\t\
    return max;\n}\n/*\nReturn minimum element in the list.\n            \n*/\nlong\
    \ min_element(long[] l) \n{\n\tlong min = 0;\n\tlong i = 0;\n\twhile (i < l.length)\
    \ {\n\t\tif (l[i] < min)\n\t\t\tmin = l[i];\n\t\ti++;\n\t}\n\treturn min;\n}\n\
    /*\nReturn sum of all elements in the list.\n            \n*/\nlong sum_element(long[]\
    \ l) \n{\n\tlong sum = 0;\n\tlong i = 0;\n\twhile (i < l.length) {\n\t\tsum +=\
    \ l[i];\n\t\ti++;\n\t}\n\treturn sum;\n}\n/*\nReturn product of all elements in\
    \ the list.\n            \n*/\nlong prod_element(long[] l) \n{\n\tlong prod =\
    \ 1;\n\tlong i = 0;\n\twhile (i < l.length) {\n\t\tprod *= l[i];\n\t\ti++;\n\t\
    }\n\treturn prod;\n}\n/*\nReturn absolute value of all elements in the list.\n\
    \            \n*/\nlong abs_element(long[] l) \n{\n\tlong i = 0;\n\tlong abs =\
    \ 0;\n\twhile (i < l.length) {\n\t\tabs = abs(l[i]);\n\t\ti++;\n\t}\n\treturn\
    \ abs;\n}\n/*\nReturn absolute value of all elements in the list.\n          \
    \  \n*/\ndouble abs_element(double[] l) \n{\n\tdouble i = 0;\n\tdouble abs = 0;\n\
    \twhile (i < l.length) {\n\t\tabs = abs(l[i]);\n\t\ti++;\n\t}\n\treturn abs;\n\
    }\n/*\nReturn absolute value of all elements in the list.\n            \n*/\n\
    float abs_element(float[] l) \n{\n\tfloat i = 0;\n\tfloat abs = 0;\n\twhile (i\
    \ < l.length) {\n\t\tabs = abs(l[i]);\n\t\ti++;\n\t}\n\treturn abs;\n}\n/*\nReturn\
    \ absolute value of all elements in the list.\n            \n*/", "{\n\tlong max\
    \ = l[0];\n\tlong i;\n\tfor (i = 1; i < l.length; i++) \n\t{\n\t\tif (l[i] > max)\
    \ \n\t\t{\n\t\t\tmax = l[i];\n\t\t}\n\t}\n\treturn max;\n}", "{\n\tlong max =\
    \ l[0];\n\tfor (int i = 1; i < l.length; ++i)\n\t\tif (l[i] > max)\n\t\t\tmax\
    \ = l[i];\n\treturn max;\n}\n/*\nReturn minimum element in the list.\n       \
    \     \n*/\nlong min_element(long[] l) \n{\n\tlong min = l[0];\n\tfor (int i =\
    \ 1; i < l.length; ++i)\n\t\tif (l[i] < min)\n\t\t\tmin = l[i];\n\treturn min;\n\
    }\n/*\nReturn sum of all elements in the list.\n            \n*/\nlong sum_array(long[]\
    \ l) \n{\n\tlong sum = 0;\n\tfor (int i = 0; i < l.length; ++i)\n\t\tsum += l[i];\n\
    \treturn sum;\n}\n/*\nReturn product of all elements in the list.\n          \
    \  \n*/\nlong prod_array(long[] l) \n{\n\tlong prod = 1;\n\tfor (int i = 0; i\
    \ < l.length; ++i)\n\t\tprod *= l[i];\n\treturn prod;\n}\n/*\nReturn sum of all\
    \ elements in the list.\n            \n*/\ndouble sum_array(double[] l) \n{\n\t\
    double sum = 0;\n\tfor (int i = 0; i < l.length; ++i)\n\t\tsum += l[i];\n\treturn\
    \ sum;\n}\n/*\nReturn product of all elements in the list.\n            \n*/\n\
    double prod_array(double[] l) \n{\n\tdouble prod = 1;\n\tfor (int i = 0; i < l.length;\
    \ ++i)\n\t\tprod *= l[i];\n\treturn prod;\n}\n/*\nReturn sum of all elements in\
    \ the list.\n            \n*/\nfloat sum_array(float[] l) \n{\n\tfloat sum = 0;\n\
    \tfor (int i = 0; i < l.length; ++i)\n\t\tsum += l[i];\n\treturn sum;\n}\n/*\n\
    Return product of all elements in the list.\n            \n*/\nfloat prod_array(float[]\
    \ l) \n{\n\tfloat prod = 1;\n\tfor (int i = 0; i < l.length; ++i)\n\t\tprod *=\
    \ l[i];\n\treturn prod;\n}\n/*\nReturn sum of all elements in the list.\n    \
    \        \n*/", "{\n\tlong max = l[0];\n\tfor (int i = 1; i < l.length; ++i)\n\
    \t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\treturn max;\n}\n/*\nReturn minimum element\
    \ in the list.\n            \n*/\nlong min_element(long[] l) \n{\n\tlong min =\
    \ l[0];\n\tfor (int i = 1; i < l.length; ++i)\n\t\tif (l[i] < min)\n\t\t\tmin\
    \ = l[i];\n\treturn min;\n}\n/*\nReturn sum of all elements in the list.\n   \
    \         \n*/\nlong sum_element(long[] l) \n{\n\tlong sum = 0;\n\tfor (int i\
    \ = 0; i < l.length; ++i)\n\t\tsum += l[i];\n\treturn sum;\n}\n/*\nReturn product\
    \ of all elements in the list.\n            \n*/\nlong prod_element(long[] l)\
    \ \n{\n\tlong prod = 1;\n\tfor (int i = 0; i < l.length; ++i)\n\t\tprod *= l[i];\n\
    \treturn prod;\n}\n/*\nReturn absolute value of all elements in the list.\n  \
    \          \n*/\nlong abs_element(long[] l) \n{\n\tlong abs = 0;\n\tfor (int i\
    \ = 0; i < l.length; ++i)\n\t\tabs = max(abs, l[i]);\n\treturn abs;\n}\n/*\nReturn\
    \ absolute value of all elements in the list.\n            \n*/\ndouble abs_element(double[]\
    \ l) \n{\n\tdouble abs = 0;\n\tfor (int i = 0; i < l.length; ++i)\n\t\tabs = max(abs,\
    \ l[i]);\n\treturn abs;\n}\n/*\nReturn absolute value of all elements in the list.\n\
    \            \n*/\nfloat abs_element(float[] l) \n{\n\tfloat abs = 0;\n\tfor (int\
    \ i = 0; i < l.length; ++i)\n\t\tabs = max(abs, l[i]);\n\treturn abs;\n}\n/*\n\
    Return absolute value of all elements in the list.\n            \n*/", "{\n\t\
    int i;\n\tlong max = l[0];\n\tfor(i = 1; i < l.length; i++)\n\t{\n\t\tif(l[i]\
    \ > max)\n\t\t\tmax = l[i];\n\t}\n\treturn max;\n}", "{\n\tlong max = l[0];\n\t\
    long i;\n\tfor (i = 1; i < l.length; i++)\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\
    \treturn max;\n}\n/*\nReturn minimum element in the list.\n            \n*/\n\
    long min_element(long[] l) \n{\n\tlong min = l[0];\n\tlong i;\n\tfor (i = 1; i\
    \ < l.length; i++)\n\t\tif (l[i] < min)\n\t\t\tmin = l[i];\n\treturn min;\n}\n\
    /*\nReturn sum of all elements in the list.\n            \n*/\nlong sum_element(long[]\
    \ l) \n{\n\tlong sum = 0;\n\tlong i;\n\tfor (i = 0; i < l.length; i++)\n\t\tsum\
    \ += l[i];\n\treturn sum;\n}\n/*\nReturn product of all elements in the list.\n\
    \            \n*/\nlong prod_element(long[] l) \n{\n\tlong prod = 1;\n\tlong i;\n\
    \tfor (i = 0; i < l.length; i++)\n\t\tprod *= l[i];\n\treturn prod;\n}\n/*\nReturn\
    \ sum of all elements in the list.\n            \n*/\ndouble sum_elements(double[]\
    \ l) \n{\n\tdouble sum = 0;\n\tlong i;\n\tfor (i = 0; i < l.length; i++)\n\t\t\
    sum += l[i];\n\treturn sum;\n}\n/*\nReturn product of all elements in the list.\n\
    \            \n*/\ndouble prod_elements(double[] l) \n{\n\tdouble prod = 1;\n\t\
    long i;\n\tfor (i = 0; i < l.length; i++)\n\t\tprod *= l[i];\n\treturn prod;\n\
    }\n/*\nReturn sum of all elements in the list.\n            \n*/\nfloat sum_elements(float[]\
    \ l) \n{\n\tfloat sum = 0;\n\tlong i;\n\tfor (i = 0; i < l.length; i++)\n\t\t\
    sum += l[i];\n\treturn sum;\n}\n/*\nReturn product of all elements in the list.\n\
    \            \n*/\nfloat prod_elements(float[] l) \n{\n\tfloat prod = 1;\n\tlong\
    \ i;\n\tfor (i = 0; i < l.length; i++)\n\t\tprod *= l[i];\n\treturn prod;\n}\n\
    /*\nReturn sum of all elements in the list.\n            \n*/", "{\n\tint i;\n\
    \tlong max = l[0];\n\tfor (i = 1; i < l.length; ++i)\n\t\tif (l[i] > max)\n\t\t\
    \tmax = l[i];\n\treturn max;\n}", "{\n\tint i;\n\tlong max;\n\tmax = l[0];\n\t\
    for(i=1; i<l.length; i++)\n\t\tif(l[i] > max)\n\t\t\tmax = l[i];\n\treturn max;\n\
    }\n/*\nReturn minimum element in the list.\n            \n*/\nlong min_element(long[]\
    \ l) \n{\n\tint i;\n\tlong min;\n\tmin = l[0];\n\tfor(i=1; i<l.length; i++)\n\t\
    \tif(l[i] < min)\n\t\t\tmin = l[i];\n\treturn min;\n}\n/*\nReturn sum of all elements\
    \ in the list.\n            \n*/\nlong sum_element(long[] l) \n{\n\tint i;\n\t\
    long sum;\n\tsum = 0;\n\tfor(i=0; i<l.length; i++)\n\t\tsum += l[i];\n\treturn\
    \ sum;\n}\n/*\nReturn product of all elements in the list.\n            \n*/\n\
    long prod_element(long[] l) \n{\n\tint i;\n\tlong prod;\n\tprod = 1;\n\tfor(i=0;\
    \ i<l.length; i++)\n\t\tprod *= l[i];\n\treturn prod;\n}\n/*\nReturn absolute\
    \ value of all elements in the list.\n            \n*/\nlong abs_element(long[]\
    \ l) \n{\n\tint i;\n\tlong abs;\n\tabs = 0;\n\tfor(i=0; i<l.length; i++)\n\t\t\
    abs = max(abs, abs(l[i]));\n\treturn abs;\n}\n/*\nReturn absolute value of all\
    \ elements in the list.\n            \n*/\ndouble abs_element(double[] l) \n{\n\
    \tint i;\n\tdouble abs;\n\tabs = 0;\n\tfor(i=0; i<l.length; i++)\n\t\tabs = max(abs,\
    \ abs(l[i]));\n\treturn abs;\n}\n/*\nReturn absolute value of all elements in\
    \ the list.\n            \n*/\nfloat abs_element(float[] l) \n{\n\tint i;\n\t\
    float abs;\n\tabs = 0;\n\tfor(i=0; i<l.length; i++)\n\t\tabs = max(abs, abs(l[i]));\n\
    \treturn abs;\n}\n/*\nReturn absolute value of all elements in the list.\n   \
    \         \n*/", "{\n\tlong max = 0;\n\tfor (int i = 0; i < l.length; i++) \n\t\
    {\n\t\tif (l[i] > max) \n\t\t{\n\t\t\tmax = l[i];\n\t\t}\n\t}\n\treturn max;\n\
    }\n/*\nReturn minimum element in the list.\n            \n*/\nlong min_element(long[]\
    \ l) \n{\n\tlong min = 0;\n\tfor (int i = 0; i < l.length; i++) \n\t{\n\t\tif\
    \ (l[i] < min) \n\t\t{\n\t\t\tmin = l[i];\n\t\t}\n\t}\n\treturn min;\n}\n/*\n\
    Return sum of all elements in the list.\n            \n*/\nlong sum_element(long[]\
    \ l) \n{\n\tlong sum = 0;\n\tfor (int i = 0; i < l.length; i++) \n\t{\n\t\tsum\
    \ += l[i];\n\t}\n\treturn sum;\n}\n/*\nReturn product of all elements in the list.\n\
    \            \n*/\nlong product_element(long[] l) \n{\n\tlong product = 1;\n\t\
    for (int i = 0; i < l.length; i++) \n\t{\n\t\tproduct *= l[i];\n\t}\n\treturn\
    \ product;\n}\n/*\nReturn absolute value of all elements in the list.\n      \
    \      \n*/\nlong abs_element(long[] l) \n{\n\tlong abs = 0;\n\tfor (int i = 0;\
    \ i < l.length; i++) \n\t{\n\t\tabs = abs(l[i]);\n\t}\n\treturn abs;\n}\n/*\n\
    Return absolute value of all elements in the list.\n            \n*/\nlong abs_max(long[]\
    \ l) \n{\n\tlong abs = 0;\n\tfor (int i = 0; i < l.length; i++) \n\t{\n\t\tabs\
    \ = max(abs, abs(l[i]));\n\t}\n\treturn abs;\n}\n/*\nReturn absolute value of\
    \ all elements in the list.\n            \n*/\nlong abs_min(long[] l) \n{\n\t\
    long abs = 0;\n\tfor (int i = 0; i < l.length; i++) \n\t{\n\t\tabs = min(abs,\
    \ abs(l[i]));\n\t}\n\treturn abs;\n}\n/*\nReturn absolute value of all elements\
    \ in the list.\n            \n*/\nlong abs_sum(long[] l) \n{\n\tlong abs = 0;\n\
    \tfor (int i = 0; i < l.length; i++) \n\t{\n\t\tabs += abs(l[i]);\n\t}\n\treturn\
    \ abs;\n}\n/*\nReturn absolute value of all elements in the list.\n          \
    \  \n*/\nlong abs_product(long[] l) \n{\n\tlong abs = 0;\n\tfor (int i = 0; i\
    \ < l.length; i++) \n\t{\n\t\tabs *= abs(l[i]);\n\t}\n\treturn abs;\n}\n/*\nReturn\
    \ absolute value of all elements in the list.\n            \n*/\nlong abs_max(long[]\
    \ l, long max) \n{\n\tlong abs = 0;", "{\n\tlong max;\n\tmax = l[0];\n\tfor (int\
    \ i = 1; i < l.length; i++)\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\treturn\
    \ max;\n}\n/*\nReturn minimum element in the list.\n            \n*/\nlong min_element(long[]\
    \ l) \n{\n\tlong min;\n\tmin = l[0];\n\tfor (int i = 1; i < l.length; i++)\n\t\
    \tif (l[i] < min)\n\t\t\tmin = l[i];\n\treturn min;\n}\n/*\nReturn sum of all\
    \ elements in the list.\n            \n*/\nlong sum_elements(long[] l) \n{\n\t\
    long sum = 0;\n\tfor (int i = 0; i < l.length; i++)\n\t\tsum += l[i];\n\treturn\
    \ sum;\n}\n/*\nReturn product of all elements in the list.\n            \n*/\n\
    long product_elements(long[] l) \n{\n\tlong product = 1;\n\tfor (int i = 0; i\
    \ < l.length; i++)\n\t\tproduct *= l[i];\n\treturn product;\n}\n/*\nReturn sum\
    \ of all elements in the list.\n            \n*/\ndouble sum_elements(double[]\
    \ l) \n{\n\tdouble sum = 0;\n\tfor (int i = 0; i < l.length; i++)\n\t\tsum +=\
    \ l[i];\n\treturn sum;\n}\n/*\nReturn product of all elements in the list.\n \
    \           \n*/\ndouble product_elements(double[] l) \n{\n\tdouble product =\
    \ 1;\n\tfor (int i = 0; i < l.length; i++)\n\t\tproduct *= l[i];\n\treturn product;\n\
    }\n/*\nReturn sum of all elements in the list.\n            \n*/\nfloat sum_elements(float[]\
    \ l) \n{\n\tfloat sum = 0;\n\tfor (int i = 0; i < l.length; i++)\n\t\tsum += l[i];\n\
    \treturn sum;\n}\n/*\nReturn product of all elements in the list.\n          \
    \  \n*/\nfloat product_elements(float[] l) \n{\n\tfloat product = 1;\n\tfor (int\
    \ i = 0; i < l.length; i++)\n\t\tproduct *= l[i];\n\treturn product;\n}\n/*\n\
    Return sum of all elements in the list.\n            \n*/", "{\n\tlong max;\n\t\
    max = l[0];\n\tfor (int i = 1; i < l.length; i++)\n\t{\n\t\tif (l[i] > max)\n\t\
    \t\tmax = l[i];\n\t}\n\treturn max;\n}\n/*\nReturn minimum element in the list.\n\
    \            \n*/\nlong min_element(long[] l) \n{\n\tlong min;\n\tmin = l[0];\n\
    \tfor (int i = 1; i < l.length; i++)\n\t{\n\t\tif (l[i] < min)\n\t\t\tmin = l[i];\n\
    \t}\n\treturn min;\n}\n/*\nReturn sum of all elements in the list.\n         \
    \   \n*/\nlong sum_element(long[] l) \n{\n\tlong sum = 0;\n\tfor (int i = 0; i\
    \ < l.length; i++)\n\t\tsum += l[i];\n\treturn sum;\n}\n/*\nReturn product of\
    \ all elements in the list.\n            \n*/\nlong product_element(long[] l)\
    \ \n{\n\tlong product = 1;\n\tfor (int i = 0; i < l.length; i++)\n\t\tproduct\
    \ *= l[i];\n\treturn product;\n}\n/*\nReturn sum of all elements in the list.\n\
    \            \n*/\ndouble sum_element_double(double[] l) \n{\n\tdouble sum = 0;\n\
    \tfor (int i = 0; i < l.length; i++)\n\t\tsum += l[i];\n\treturn sum;\n}\n/*\n\
    Return product of all elements in the list.\n            \n*/\ndouble product_element_double(double[]\
    \ l) \n{\n\tdouble product = 1;\n\tfor (int i = 0; i < l.length; i++)\n\t\tproduct\
    \ *= l[i];\n\treturn product;\n}\n/*\nReturn sum of all elements in the list.\n\
    \            \n*/\nfloat sum_element_float(float[] l) \n{\n\tfloat sum = 0;\n\t\
    for (int i = 0; i < l.length; i++)\n\t\tsum += l[i];\n\treturn sum;\n}\n/*\nReturn\
    \ product of all elements in the list.\n            \n*/\nfloat product_element_float(float[]\
    \ l) \n{\n\tfloat product = 1;\n\tfor (int i = 0; i < l.length; i++)\n\t\tproduct\
    \ *= l[i];\n\treturn product;\n}\n/*\nReturn sum of all elements in the list.\n\
    \            \n*/", "{\n\tlong max = l[0];\n\tfor (int i = 1; i < l.length; ++i)\n\
    \t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\treturn max;\n}", "{\n\tlong max = 0;\n\
    \tfor (int i = 0; i < l.length; i++)\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\
    \treturn max;\n}\n/*\nReturn minimum element in the list.\n            \n*/\n\
    long min_element(long[] l) \n{\n\tlong min = 0;\n\tfor (int i = 0; i < l.length;\
    \ i++)\n\t\tif (l[i] < min)\n\t\t\tmin = l[i];\n\treturn min;\n}\n/*\nReturn sum\
    \ of all elements in the list.\n            \n*/\nlong sum_element(long[] l) \n\
    {\n\tlong sum = 0;\n\tfor (int i = 0; i < l.length; i++)\n\t\tsum += l[i];\n\t\
    return sum;\n}\n/*\nReturn product of all elements in the list.\n            \n\
    */\nlong prod_element(long[] l) \n{\n\tlong prod = 1;\n\tfor (int i = 0; i < l.length;\
    \ i++)\n\t\tprod *= l[i];\n\treturn prod;\n}\n/*\nReturn absolute value of all\
    \ elements in the list.\n            \n*/\nlong abs_element(long[] l) \n{\n\t\
    long abs = 0;\n\tfor (int i = 0; i < l.length; i++)\n\t\tabs = l[i] < 0 ? -l[i]\
    \ : l[i];\n\treturn abs;\n}\n/*\nReturn absolute value of all elements in the\
    \ list.\n            \n*/\ndouble abs_element(double[] l) \n{\n\tdouble abs =\
    \ 0;\n\tfor (int i = 0; i < l.length; i++)\n\t\tabs = l[i] < 0 ? -l[i] : l[i];\n\
    \treturn abs;\n}\n/*\nReturn absolute value of all elements in the list.\n   \
    \         \n*/\nfloat abs_element(float[] l) \n{\n\tfloat abs = 0;\n\tfor (int\
    \ i = 0; i < l.length; i++)\n\t\tabs = l[i] < 0 ? -l[i] : l[i];\n\treturn abs;\n\
    }\n/*\nReturn absolute value of all elements in the list.\n            \n*/",
  "{\n\tlong max = l[0];\n\tfor(int i=1; i<l.length; i++)\n\t\tif(l[i] > max)\n\t\t\
    \tmax = l[i];\n\treturn max;\n}", "{\n\tlong max = l[0];\n\tfor (int i = 1; i\
    \ < l.length; ++i)\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\treturn max;\n}",
  "{\n\tlong max = 0;\n\tlong i;\n\tfor(i = 0; i < l.length; ++i)\n\t{\n\t\tif(l[i]\
    \ > max)\n\t\t\tmax = l[i];\n\t}\n\treturn max;\n}\n/*\nReturn minimum element\
    \ in the list.\n            \n*/\nlong min_element(long[] l) \n{\n\tlong min =\
    \ 0;\n\tlong i;\n\tfor(i = 0; i < l.length; ++i)\n\t{\n\t\tif(l[i] < min)\n\t\t\
    \tmin = l[i];\n\t}\n\treturn min;\n}\n/*\nReturn sum of all elements in the list.\n\
    \            \n*/\nlong sum_element(long[] l) \n{\n\tlong sum = 0;\n\tlong i;\n\
    \tfor(i = 0; i < l.length; ++i)\n\t{\n\t\tsum += l[i];\n\t}\n\treturn sum;\n}\n\
    /*\nReturn product of all elements in the list.\n            \n*/\nlong product_element(long[]\
    \ l) \n{\n\tlong product = 1;\n\tlong i;\n\tfor(i = 0; i < l.length; ++i)\n\t\
    {\n\t\tproduct *= l[i];\n\t}\n\treturn product;\n}\n/*\nReturn sum of all elements\
    \ in the list.\n            \n*/\ndouble sum_elements(double[] l) \n{\n\tdouble\
    \ sum = 0;\n\tdouble i;\n\tfor(i = 0; i < l.length; ++i)\n\t{\n\t\tsum += l[i];\n\
    \t}\n\treturn sum;\n}\n/*\nReturn product of all elements in the list.\n     \
    \       \n*/\ndouble product_elements(double[] l) \n{\n\tdouble product = 1;\n\
    \tdouble i;\n\tfor(i = 0; i < l.length; ++i)\n\t{\n\t\tproduct *= l[i];\n\t}\n\
    \treturn product;\n}\n/*\nReturn sum of all elements in the list.\n          \
    \  \n*/\nfloat sum_elements(float[] l) \n{\n\tfloat sum = 0;\n\tfloat i;\n\tfor(i\
    \ = 0; i < l.length; ++i)\n\t{\n\t\tsum += l[i];\n\t}\n\treturn sum;\n}\n/*\n\
    Return product of all elements in the list.\n            \n*/\nfloat product_elements(float[]\
    \ l) \n{\n\tfloat product = 1;\n\tfloat i;\n\tfor(i = 0; i < l.length; ++i)\n\t\
    {\n\t\tproduct *= l[i];\n\t}\n\treturn product;\n}\n/*\nReturn sum of all elements\
    \ in the list.\n            \n*/", "{\n\tint i;\n\tlong max = 0;\n\tfor(i = 0;\
    \ i < l.length; i++) \n\t{\n\t\tif(l[i] > max) \n\t\t\tmax = l[i];\n\t}\n\treturn\
    \ max;\n}\n/*\nReturn minimum element in the list.\n            \n*/\nlong min_element(long[]\
    \ l) \n{\n\tint i;\n\tlong min = 0;\n\tfor(i = 0; i < l.length; i++) \n\t{\n\t\
    \tif(l[i] < min) \n\t\t\tmin = l[i];\n\t}\n\treturn min;\n}\n/*\nReturn sum of\
    \ all elements in the list.\n            \n*/\nlong sum_elements(long[] l) \n\
    {\n\tint i;\n\tlong sum = 0;\n\tfor(i = 0; i < l.length; i++) \n\t{\n\t\tsum +=\
    \ l[i];\n\t}\n\treturn sum;\n}\n/*\nReturn product of all elements in the list.\n\
    \            \n*/\nlong product_elements(long[] l) \n{\n\tint i;\n\tlong product\
    \ = 1;\n\tfor(i = 0; i < l.length; i++) \n\t{\n\t\tproduct *= l[i];\n\t}\n\treturn\
    \ product;\n}\n/*\nReturn sum of all elements in the list that are less than the\
    \ given value.\n            \n*/\nlong sum_less_than(long[] l, long value) \n\
    {\n\tint i;\n\tlong sum = 0;\n\tfor(i = 0; i < l.length; i++) \n\t{\n\t\tif(l[i]\
    \ < value) \n\t\t\tsum += l[i];\n\t}\n\treturn sum;\n}\n/*\nReturn product of\
    \ all elements in the list that are less than the given value.\n            \n\
    */\nlong product_less_than(long[] l, long value) \n{\n\tint i;\n\tlong product\
    \ = 1;\n\tfor(i = 0; i < l.length; i++) \n\t{\n\t\tif(l[i] < value) \n\t\t\tproduct\
    \ *= l[i];\n\t}\n\treturn product;\n}\n/*\nReturn sum of all elements in the list\
    \ that are greater than the given value.\n            \n*/\nlong sum_greater_than(long[]\
    \ l, long value) \n{\n\tint i;\n\tlong sum = 0;\n\tfor(i = 0; i < l.length; i++)\
    \ \n\t{\n\t\tif(l[i] > value) \n\t\t\tsum += l[i];\n\t}\n\treturn sum;\n}\n/*\n\
    Return product of all elements in the list that are greater than the given value.\n\
    \            \n*/\nlong product_greater_than(long[] l, long value) \n{\n\tint\
    \ i;\n\tlong product = 1;\n\tfor(i = 0; i < l.length; i++) \n\t{\n\t\tif(l[i]\
    \ > value) \n\t\t\tproduct *= l[i];\n\t}\n\treturn product;\n}\n/*\nReturn sum\
    \ of all elements in the list that are equal to the given value.\n           \
    \ \n*/\nlong sum_equal(long", "{\n\tint i;\n\tlong max_el = l[0];\n\tfor(i=1;\
    \ i<l.length; i++)\n\t\tif(l[i] > max_el)\n\t\t\tmax_el = l[i];\n\treturn max_el;\n\
    }", "{\n\tint i;\n\tlong max = l[0];\n\tfor(i = 1; i < l.length; ++i)\n\t\tif(l[i]\
    \ > max)\n\t\t\tmax = l[i];\n\treturn max;\n}", "{\n\tlong max = 0;\n\tlong i;\n\
    \tfor(i=0;i<l.length;i++)\n\t{\n\t\tif(l[i] > max)\n\t\t\tmax = l[i];\n\t}\n\t\
    return max;\n}\n/*\nReturn minimum element in the list.\n            \n*/\nlong\
    \ min_element(long[] l) \n{\n\tlong min = 0;\n\tlong i;\n\tfor(i=0;i<l.length;i++)\n\
    \t{\n\t\tif(l[i] < min)\n\t\t\tmin = l[i];\n\t}\n\treturn min;\n}\n/*\nReturn\
    \ sum of all elements in the list.\n            \n*/\nlong sum_elements(long[]\
    \ l) \n{\n\tlong sum = 0;\n\tlong i;\n\tfor(i=0;i<l.length;i++)\n\t{\n\t\tsum\
    \ += l[i];\n\t}\n\treturn sum;\n}\n/*\nReturn product of all elements in the list.\n\
    \            \n*/\nlong product_elements(long[] l) \n{\n\tlong prod = 1;\n\tlong\
    \ i;\n\tfor(i=0;i<l.length;i++)\n\t{\n\t\tprod *= l[i];\n\t}\n\treturn prod;\n\
    }\n/*\nReturn absolute value of all elements in the list.\n            \n*/\n\
    long abs_elements(long[] l) \n{\n\tlong i;\n\tlong abs = 0;\n\tfor(i=0;i<l.length;i++)\n\
    \t{\n\t\tabs = abs(l[i]);\n\t}\n\treturn abs;\n}\n/*\nReturn absolute value of\
    \ all elements in the list.\n            \n*/\nlong abs_max(long[] l) \n{\n\t\
    long i;\n\tlong abs = 0;\n\tfor(i=0;i<l.length;i++)\n\t{\n\t\tif(l[i] > abs)\n\
    \t\t\tabs = l[i];\n\t}\n\treturn abs;\n}\n/*\nReturn absolute value of all elements\
    \ in the list.\n            \n*/\nlong abs_min(long[] l) \n{\n\tlong i;\n\tlong\
    \ abs = 0;\n\tfor(i=0;i<l.length;i++)\n\t{\n\t\tif(l[i] < abs)\n\t\t\tabs = l[i];\n\
    \t}\n\treturn abs;\n}\n/*\nReturn absolute value of all elements in the list.\n\
    \            \n*/\nlong abs_sum(long[] l) \n{\n\tlong i;\n\tlong abs = 0;\n\t\
    for(i=0;i<l.length;i++)\n\t{\n\t\tabs += l[i];\n\t}\n\treturn abs;\n}\n/*\nReturn\
    \ absolute value of all elements in the list.\n            \n*/\nlong abs_product(long[]\
    \ l) \n{\n\tlong i;\n\tlong abs = 0;\n\tfor(i=0;i<l.length;i++)\n\t{\n\t\tabs\
    \ *= l[i];\n\t}\n\treturn abs;\n}\n/*\nReturn absolute ", "{\n\tlong max = l[0];\n\
    \tlong i;\n\tfor (i = 1; i < l.length; i++) \n\t{\n\t\tif (l[i] > max) \n\t\t\
    {\n\t\t\tmax = l[i];\n\t\t}\n\t}\n\treturn max;\n}", "{\n\tlong max;\n\tmax =\
    \ l[0];\n\tfor (int i = 1; i < l.length; i++)\n\t\tif (l[i] > max)\n\t\t\tmax\
    \ = l[i];\n\treturn max;\n}", "{\n\tlong max = l[0];\n\tlong i;\n\tfor (i = 1;\
    \ i < l.length; i++) \n\t\tif (l[i] > max) \n\t\t\tmax = l[i];\n\treturn max;\n\
    }\n/*\nReturn minimum element in the list.\n            \n*/\nlong min_element(long[]\
    \ l) \n{\n\tlong min = l[0];\n\tlong i;\n\tfor (i = 1; i < l.length; i++) \n\t\
    \tif (l[i] < min) \n\t\t\tmin = l[i];\n\treturn min;\n}\n/*\nReturn sum of all\
    \ elements in the list.\n            \n*/\nlong sum_elements(long[] l) \n{\n\t\
    long sum = 0;\n\tlong i;\n\tfor (i = 0; i < l.length; i++) \n\t\tsum += l[i];\n\
    \treturn sum;\n}\n/*\nReturn product of all elements in the list.\n          \
    \  \n*/\nlong product_elements(long[] l) \n{\n\tlong product = 1;\n\tlong i;\n\
    \tfor (i = 0; i < l.length; i++) \n\t\tproduct *= l[i];\n\treturn product;\n}\n\
    /*\nReturn sum of all elements in the list.\n            \n*/\ndouble sum_elements(double[]\
    \ l) \n{\n\tdouble sum = 0;\n\tlong i;\n\tfor (i = 0; i < l.length; i++) \n\t\t\
    sum += l[i];\n\treturn sum;\n}\n/*\nReturn product of all elements in the list.\n\
    \            \n*/\ndouble product_elements(double[] l) \n{\n\tdouble product =\
    \ 1;\n\tlong i;\n\tfor (i = 0; i < l.length; i++) \n\t\tproduct *= l[i];\n\treturn\
    \ product;\n}\n/*\nReturn sum of all elements in the list.\n            \n*/\n\
    float sum_elements(float[] l) \n{\n\tfloat sum = 0;\n\tlong i;\n\tfor (i = 0;\
    \ i < l.length; i++) \n\t\tsum += l[i];\n\treturn sum;\n}\n/*\nReturn product\
    \ of all elements in the list.\n            \n*/\nfloat product_elements(float[]\
    \ l) \n{\n\tfloat product = 1;\n\tlong i;\n\tfor (i = 0; i < l.length; i++) \n\
    \t\tproduct *= l[i];\n\treturn product;\n}\n/*\nReturn sum of all elements in\
    \ the list.\n            \n*/\nlong sum_elements(short[] l) \n{\n\tlong sum =\
    \ 0;\n\tlong i;\n\tfor (i = 0; i < l.length; i++) \n\t\tsum += l[i];\n\treturn\
    \ sum;\n}\n/*\nReturn product of all elements in the list.\n            \n*/\n\
    long product_elements(short[] l) \n{\n\tlong product = 1;\n\tlong i;\n\tfor (i\
    \ = 0; i < l.length; i++) \n\t\tproduct *= l[i];\n\treturn product;\n}\n/*\n",
  "{\n\tlong max = l[0];\n\tfor (int i = 1; i < l.length; ++i)\n\t\tif (l[i] > max)\n\
    \t\t\tmax = l[i];\n\treturn max;\n}", "{\n\tlong max = l[0];\n\tfor(int i = 1;\
    \ i < l.length; ++i)\n\t\tif(l[i] > max)\n\t\t\tmax = l[i];\n\treturn max;\n}",
  "{\n\tlong max = l[0];\n\tfor(int i = 1; i < l.length; i++)\n\t{\n\t\tif(l[i] >\
    \ max)\n\t\t\tmax = l[i];\n\t}\n\treturn max;\n}", "{\n\tlong max = l[0];\n\t\
    long i;\n\tfor (i = 1; i < l.length; ++i)\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\
    \treturn max;\n}\n/*\nReturn minimum element in the list.\n            \n*/\n\
    long min_element(long[] l) \n{\n\tlong min = l[0];\n\tlong i;\n\tfor (i = 1; i\
    \ < l.length; ++i)\n\t\tif (l[i] < min)\n\t\t\tmin = l[i];\n\treturn min;\n}\n\
    /*\nReturn sum of all elements in the list.\n            \n*/\nlong sum_elements(long[]\
    \ l) \n{\n\tlong sum = 0;\n\tlong i;\n\tfor (i = 0; i < l.length; ++i)\n\t\tsum\
    \ += l[i];\n\treturn sum;\n}\n/*\nReturn product of all elements in the list.\n\
    \            \n*/\nlong product_elements(long[] l) \n{\n\tlong product = 1;\n\t\
    long i;\n\tfor (i = 0; i < l.length; ++i)\n\t\tproduct *= l[i];\n\treturn product;\n\
    }\n/*\nReturn sum of all elements in the list.\n            \n*/\ndouble sum_elements(double[]\
    \ l) \n{\n\tdouble sum = 0;\n\tlong i;\n\tfor (i = 0; i < l.length; ++i)\n\t\t\
    sum += l[i];\n\treturn sum;\n}\n/*\nReturn product of all elements in the list.\n\
    \            \n*/\ndouble product_elements(double[] l) \n{\n\tdouble product =\
    \ 1;\n\tlong i;\n\tfor (i = 0; i < l.length; ++i)\n\t\tproduct *= l[i];\n\treturn\
    \ product;\n}\n/*\nReturn sum of all elements in the list.\n            \n*/\n\
    float sum_elements(float[] l) \n{\n\tfloat sum = 0;\n\tlong i;\n\tfor (i = 0;\
    \ i < l.length; ++i)\n\t\tsum += l[i];\n\treturn sum;\n}\n/*\nReturn product of\
    \ all elements in the list.\n            \n*/\nfloat product_elements(float[]\
    \ l) \n{\n\tfloat product = 1;\n\tlong i;\n\tfor (i = 0; i < l.length; ++i)\n\t\
    \tproduct *= l[i];\n\treturn product;\n}\n/*\nReturn sum of all elements in the\
    \ list.\n            \n*/", "{\n\tint i;\n\tlong max;\n\tfor(i = 0; i < (int)(l.length\
    \ / 2); ++i)\n\t{\n\t\tif(l[i] > max)\n\t\t\tmax = l[i];\n\t}\n\treturn max;\n\
    }\n/*\nReturn minimum element in the list.\n            \n*/\nlong min_element(long[]\
    \ l) \n{\n\tint i;\n\tlong min;\n\tfor(i = 0; i < (int)(l.length / 2); ++i)\n\t\
    {\n\t\tif(l[i] < min)\n\t\t\tmin = l[i];\n\t}\n\treturn min;\n}\n/*\nReturn sum\
    \ of all elements in the list.\n            \n*/\nlong sum_elements(long[] l)\
    \ \n{\n\tint i;\n\tlong sum = 0;\n\tfor(i = 0; i < (int)(l.length / 2); ++i)\n\
    \t{\n\t\tsum += l[i];\n\t}\n\treturn sum;\n}\n/*\nReturn product of all elements\
    \ in the list.\n            \n*/\nlong product_elements(long[] l) \n{\n\tint i;\n\
    \tlong product = 1;\n\tfor(i = 0; i < (int)(l.length / 2); ++i)\n\t{\n\t\tproduct\
    \ *= l[i];\n\t}\n\treturn product;\n}\n/*\nReturn absolute value of all elements\
    \ in the list.\n            \n*/\nlong abs_elements(long[] l) \n{\n\tint i;\n\t\
    long abs = 0;\n\tfor(i = 0; i < (int)(l.length / 2); ++i)\n\t{\n\t\tabs = abs(l[i]);\n\
    \t}\n\treturn abs;\n}\n/*\nReturn absolute value of all elements in the list.\n\
    \            \n*/\ndouble abs_elements(double[] l) \n{\n\tint i;\n\tdouble abs\
    \ = 0;\n\tfor(i = 0; i < (int)(l.length / 2); ++i)\n\t{\n\t\tabs = abs(l[i]);\n\
    \t}\n\treturn abs;\n}\n/*\nReturn absolute value of all elements in the list.\n\
    \            \n*/\nfloat abs_elements(float[] l) \n{\n\tint i;\n\tfloat abs =\
    \ 0;\n\tfor(i = 0; i < (int)(l.length / 2); ++i)\n\t{\n\t\tabs = abs(l[i]);\n\t\
    }\n\treturn abs;\n}\n/*\nReturn absolute value of all elements in the list.\n\
    \            \n*/\nlong abs_elements(long l) \n{\n\tint i;\n\tlong abs = 0;\n\t\
    for(i = 0; i < (int)(l.length / 2); ++i)\n\t{\n\t\tabs = abs(l[i]);\n\t}\n\treturn\
    \ abs;\n}\n/*\nReturn absolute value of all elements in the ", "{\n\tlong max\
    \ = 0;\n\tfor (int i = 0; i < l.length; i++)\n\t\tif (l[i] > max)\n\t\t\tmax =\
    \ l[i];\n\treturn max;\n}\n/*\nReturn minimum element in the list.\n         \
    \   \n*/\nlong min_element(long[] l) \n{\n\tlong min = 0;\n\tfor (int i = 0; i\
    \ < l.length; i++)\n\t\tif (l[i] < min)\n\t\t\tmin = l[i];\n\treturn min;\n}\n\
    /*\nReturn sum of all elements in the list.\n            \n*/\nlong sum_elements(long[]\
    \ l) \n{\n\tlong sum = 0;\n\tfor (int i = 0; i < l.length; i++)\n\t\tsum += l[i];\n\
    \treturn sum;\n}\n/*\nReturn product of all elements in the list.\n          \
    \  \n*/\nlong product_elements(long[] l) \n{\n\tlong product = 1;\n\tfor (int\
    \ i = 0; i < l.length; i++)\n\t\tproduct *= l[i];\n\treturn product;\n}\n/*\n\
    Return sum of all elements in the list.\n            \n*/\ndouble sum_elements(double[]\
    \ l) \n{\n\tdouble sum = 0;\n\tfor (int i = 0; i < l.length; i++)\n\t\tsum +=\
    \ l[i];\n\treturn sum;\n}\n/*\nReturn product of all elements in the list.\n \
    \           \n*/\ndouble product_elements(double[] l) \n{\n\tdouble product =\
    \ 1;\n\tfor (int i = 0; i < l.length; i++)\n\t\tproduct *= l[i];\n\treturn product;\n\
    }\n/*\nReturn sum of all elements in the list.\n            \n*/\nfloat sum_elements(float[]\
    \ l) \n{\n\tfloat sum = 0;\n\tfor (int i = 0; i < l.length; i++)\n\t\tsum += l[i];\n\
    \treturn sum;\n}\n/*\nReturn product of all elements in the list.\n          \
    \  \n*/\nfloat product_elements(float[] l) \n{\n\tfloat product = 1;\n\tfor (int\
    \ i = 0; i < l.length; i++)\n\t\tproduct *= l[i];\n\treturn product;\n}\n/*\n\
    Return sum of all elements in the list.\n            \n*/", "{\n\tint i;\n\tlong\
    \ max;\n\tmax = l[0];\n\tfor (i = 1; i < l.length; ++i)\n\t\tif (l[i] > max)\n\
    \t\t\tmax = l[i];\n\treturn max;\n}", "{\n\tlong max = l[0];\n\tfor (int i = 1;\
    \ i < l.length; i++)\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\treturn max;\n}",
  "{\n\tlong max;\n\tmax = l[0];\n\tfor (int i = 1; i < l.length; i++)\n\t\tif (l[i]\
    \ > max)\n\t\t\tmax = l[i];\n\treturn max;\n}\n/*\nReturn minimum element in the\
    \ list.\n            \n*/\nlong min_element(long[] l) \n{\n\tlong min;\n\tmin\
    \ = l[0];\n\tfor (int i = 1; i < l.length; i++)\n\t\tif (l[i] < min)\n\t\t\tmin\
    \ = l[i];\n\treturn min;\n}\n/*\nReturn sum of all elements in the list.\n   \
    \         \n*/\nlong sum_elements(long[] l) \n{\n\tlong sum = 0;\n\tfor (int i\
    \ = 0; i < l.length; i++)\n\t\tsum += l[i];\n\treturn sum;\n}\n/*\nReturn product\
    \ of all elements in the list.\n            \n*/\nlong product_elements(long[]\
    \ l) \n{\n\tlong product = 1;\n\tfor (int i = 0; i < l.length; i++)\n\t\tproduct\
    \ *= l[i];\n\treturn product;\n}\n/*\nReturn absolute value of all elements in\
    \ the list.\n            \n*/\nlong abs_elements(long[] l) \n{\n\tlong abs = 0;\n\
    \tfor (int i = 0; i < l.length; i++)\n\t\tabs = max(abs, l[i]);\n\treturn abs;\n\
    }\n/*\nReturn absolute value of all elements in the list.\n            \n*/\n\
    long abs_elements(long[] l, long max) \n{\n\tlong abs = 0;\n\tfor (int i = 0;\
    \ i < l.length; i++)\n\t\tabs = max(abs, l[i]);\n\treturn abs;\n}\n/*\nReturn\
    \ absolute value of all elements in the list.\n            \n*/\nlong abs_elements(long[]\
    \ l, long min, long max) \n{\n\tlong abs = 0;\n\tfor (int i = 0; i < l.length;\
    \ i++)\n\t\tabs = max(abs, l[i]);\n\treturn abs;\n}\n/*\nReturn absolute value\
    \ of all elements in the list.\n            \n*/\nlong abs_elements(long[] l,\
    \ long min, long max, long step) \n{\n\tlong abs = 0;\n\tfor (int i = 0; i < l.length;\
    \ i++)\n\t\tabs = max(abs, l[i]);\n\treturn abs;\n}\n/*\nReturn absolute value\
    \ of all elements in the list.\n            \n*/\nlong abs_elements(long[] l,\
    \ long min, long max, long step, long scale) \n{\n\tlong abs = 0;\n\tfor (int\
    \ i = 0; i < l.length; i++)\n\t\tabs = max(abs, l[i]);\n\treturn abs;\n}\n/*\n\
    Return absolute value of all elements in the list.\n            \n*/\nlong abs_elements(long[]\
    \ l, long min, long max, long step, long scale, long offset) \n{\n\tlong abs =\
    \ 0;\n\t", "{\n\tlong max = l[0];\n\tlong i;\n\tfor (i = 1; i < l.length; i++)\
    \ \n\t{\n\t\tif (l[i] > max) \n\t\t{\n\t\t\tmax = l[i];\n\t\t}\n\t}\n\treturn\
    \ max;\n}\n/*\nReturn minimum element in the list.\n            \n*/\nlong min_element(long[]\
    \ l) \n{\n\tlong min = l[0];\n\tlong i;\n\tfor (i = 1; i < l.length; i++) \n\t\
    {\n\t\tif (l[i] < min) \n\t\t{\n\t\t\tmin = l[i];\n\t\t}\n\t}\n\treturn min;\n\
    }\n/*\nReturn sum of all elements in the list.\n            \n*/\nlong sum_element(long[]\
    \ l) \n{\n\tlong sum = 0;\n\tlong i;\n\tfor (i = 0; i < l.length; i++) \n\t{\n\
    \t\tsum += l[i];\n\t}\n\treturn sum;\n}\n/*\nReturn product of all elements in\
    \ the list.\n            \n*/\nlong product_element(long[] l) \n{\n\tlong product\
    \ = 1;\n\tlong i;\n\tfor (i = 0; i < l.length; i++) \n\t{\n\t\tproduct *= l[i];\n\
    \t}\n\treturn product;\n}\n/*\nReturn sum of all elements in the list.\n     \
    \       \n*/\ndouble sum_element_double(double[] l) \n{\n\tdouble sum = 0;\n\t\
    double i;\n\tfor (i = 0; i < l.length; i++) \n\t{\n\t\tsum += l[i];\n\t}\n\treturn\
    \ sum;\n}\n/*\nReturn product of all elements in the list.\n            \n*/\n\
    double product_element_double(double[] l) \n{\n\tdouble product = 1;\n\tdouble\
    \ i;\n\tfor (i = 0; i < l.length; i++) \n\t{\n\t\tproduct *= l[i];\n\t}\n\treturn\
    \ product;\n}\n/*\nReturn sum of all elements in the list.\n            \n*/\n\
    float sum_element_float(float[] l) \n{\n\tfloat sum = 0;\n\tfloat i;\n\tfor (i\
    \ = 0; i < l.length; i++) \n\t{\n\t\tsum += l[i];\n\t}\n\treturn sum;\n}\n/*\n\
    Return product of all elements in the list.\n            \n*/\nfloat product_element_float(float[]\
    \ l) \n{\n\tfloat product = 1;\n\tfloat i;\n\tfor (i = 0; i < l.length; i++) \n\
    \t{\n\t\tproduct *= l[i];\n\t}\n\treturn product;\n}\n/*\nReturn sum of all elements\
    \ in the list.\n            \n*/", "{\n\tint i;\n\tlong max;\n\tmax = l[0];\n\t\
    for (i = 1; i < l.length; ++i)\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\treturn\
    \ max;\n}\n/*\nReturn minimum element in the list.\n            \n*/\nlong min_element(long[]\
    \ l) \n{\n\tint i;\n\tlong min;\n\tmin = l[0];\n\tfor (i = 1; i < l.length; ++i)\n\
    \t\tif (l[i] < min)\n\t\t\tmin = l[i];\n\treturn min;\n}\n/*\nReturn sum of all\
    \ elements in the list.\n            \n*/\nlong sum_element(long[] l) \n{\n\t\
    int i;\n\tlong sum = 0;\n\tfor (i = 0; i < l.length; ++i)\n\t\tsum += l[i];\n\t\
    return sum;\n}\n/*\nReturn product of all elements in the list.\n            \n\
    */\nlong prod_element(long[] l) \n{\n\tint i;\n\tlong prod = 1;\n\tfor (i = 0;\
    \ i < l.length; ++i)\n\t\tprod *= l[i];\n\treturn prod;\n}\n/*\nReturn absolute\
    \ value of all elements in the list.\n            \n*/\nlong abs_element(long[]\
    \ l) \n{\n\tint i;\n\tlong abs = 0;\n\tfor (i = 0; i < l.length; ++i)\n\t\tabs\
    \ = max(abs, abs(l[i]));\n\treturn abs;\n}\n/*\nReturn absolute value of all elements\
    \ in the list.\n            \n*/\ndouble abs_element(double[] l) \n{\n\tint i;\n\
    \tdouble abs = 0;\n\tfor (i = 0; i < l.length; ++i)\n\t\tabs = max(abs, abs(l[i]));\n\
    \treturn abs;\n}\n/*\nReturn absolute value of all elements in the list.\n   \
    \         \n*/\nfloat abs_element(float[] l) \n{\n\tint i;\n\tfloat abs = 0;\n\
    \tfor (i = 0; i < l.length; ++i)\n\t\tabs = max(abs, abs(l[i]));\n\treturn abs;\n\
    }\n/*\nReturn absolute value of all elements in the list.\n            \n*/",
  "{\n\tlong max = 0;\n\tfor (int i = 0; i < l.length; i++)\n\t\tif (l[i] > max)\n\
    \t\t\tmax = l[i];\n\treturn max;\n}\n/*\nReturn minimum element in the list.\n\
    \            \n*/\nlong min_element(long[] l) \n{\n\tlong min = 0;\n\tfor (int\
    \ i = 0; i < l.length; i++)\n\t\tif (l[i] < min)\n\t\t\tmin = l[i];\n\treturn\
    \ min;\n}\n/*\nReturn sum of all elements in the list.\n            \n*/\nlong\
    \ sum_element(long[] l) \n{\n\tlong sum = 0;\n\tfor (int i = 0; i < l.length;\
    \ i++)\n\t\tsum += l[i];\n\treturn sum;\n}\n/*\nReturn product of all elements\
    \ in the list.\n            \n*/\nlong product_element(long[] l) \n{\n\tlong product\
    \ = 1;\n\tfor (int i = 0; i < l.length; i++)\n\t\tproduct *= l[i];\n\treturn product;\n\
    }\n/*\nReturn absolute value of all elements in the list.\n            \n*/\n\
    long abs_element(long[] l) \n{\n\tlong abs = 0;\n\tfor (int i = 0; i < l.length;\
    \ i++)\n\t\tabs = max(abs, l[i]);\n\treturn abs;\n}\n/*\nReturn absolute value\
    \ of all elements in the list.\n            \n*/\nlong abs_max(long[] l) \n{\n\
    \tlong abs = 0;\n\tfor (int i = 0; i < l.length; i++)\n\t\tabs = max(abs, l[i]);\n\
    \treturn abs;\n}\n/*\nReturn absolute value of all elements in the list.\n   \
    \         \n*/\nlong abs_min(long[] l) \n{\n\tlong abs = 0;\n\tfor (int i = 0;\
    \ i < l.length; i++)\n\t\tabs = min(abs, l[i]);\n\treturn abs;\n}\n/*\nReturn\
    \ absolute value of all elements in the list.\n            \n*/\nlong abs_sum(long[]\
    \ l) \n{\n\tlong abs = 0;\n\tfor (int i = 0; i < l.length; i++)\n\t\tabs += l[i];\n\
    \treturn abs;\n}\n/*\nReturn absolute value of all elements in the list.\n   \
    \         \n*/\nlong abs_product(long[] l) \n{\n\tlong abs = 0;\n\tfor (int i\
    \ = 0; i < l.length; i++)\n\t\tabs *= l[i];\n\treturn abs;\n}\n/*\nReturn absolute\
    \ value of all elements in the list.\n            \n*/\nlong abs_max(long[] l)\
    \ \n{\n\tlong abs = 0;\n\tfor (int i = 0; i < l.length; i++)\n\t\tabs = max(abs,\
    \ l[i]);\n\treturn abs;\n}\n/*\nReturn absolute value of all elements in the list.\n\
    \            \n*/\nlong abs_min(long[] l) \n{\n\tlong abs = 0;\n\tfor (int i =\
    \ 0; i < l.length; i++)\n", "{\n\tint i;\n\tlong max;\n\t\n\tmax = l[0];\n\tfor\
    \ (i = 1; i < l.length; i++) \n\t{\n\t\tif (l[i] > max) \n\t\t{\n\t\t\tmax = l[i];\n\
    \t\t}\n\t}\n\treturn max;\n}\n/*\nReturn minimum element in the list.\n      \
    \      \n*/\nlong min_element(long[] l) \n{\n\tint i;\n\tlong min;\n\t\n\tmin\
    \ = l[0];\n\tfor (i = 1; i < l.length; i++) \n\t{\n\t\tif (l[i] < min) \n\t\t\
    {\n\t\t\tmin = l[i];\n\t\t}\n\t}\n\treturn min;\n}\n/*\nReturn sum of all elements\
    \ in the list.\n            \n*/\nlong sum_element(long[] l) \n{\n\tint i;\n\t\
    long sum;\n\t\n\tsum = 0;\n\tfor (i = 0; i < l.length; i++) \n\t{\n\t\tsum +=\
    \ l[i];\n\t}\n\treturn sum;\n}\n/*\nReturn product of all elements in the list.\n\
    \            \n*/\nlong prod_element(long[] l) \n{\n\tint i;\n\tlong prod;\n\t\
    \n\tprod = 1;\n\tfor (i = 0; i < l.length; i++) \n\t{\n\t\tprod *= l[i];\n\t}\n\
    \treturn prod;\n}\n/*\nReturn sum of all elements in the list.\n            \n\
    */\ndouble sum_elements(double[] l) \n{\n\tint i;\n\tdouble sum;\n\t\n\tsum =\
    \ 0;\n\tfor (i = 0; i < l.length; i++) \n\t{\n\t\tsum += l[i];\n\t}\n\treturn\
    \ sum;\n}\n/*\nReturn product of all elements in the list.\n            \n*/\n\
    double prod_elements(double[] l) \n{\n\tint i;\n\tdouble prod;\n\t\n\tprod = 1;\n\
    \tfor (i = 0; i < l.length; i++) \n\t{\n\t\tprod *= l[i];\n\t}\n\treturn prod;\n\
    }\n/*\nReturn sum of all elements in the list.\n            \n*/\nfloat sum_elements(float[]\
    \ l) \n{\n\tint i;\n\tfloat sum;\n\t\n\tsum = 0;\n\tfor (i = 0; i < l.length;\
    \ i++) \n\t{\n\t\tsum += l[i];\n\t}\n\treturn sum;\n}\n/*\nReturn product of all\
    \ elements in the list.\n            \n*/\nfloat prod_elements(float[] l) \n{\n\
    \tint i;\n\tfloat prod;\n\t\n\tprod = 1;\n\tfor (i = 0; i < l.length; i++) \n\t\
    {\n\t\tprod *= l[i];\n\t}\n\treturn prod;\n}\n/*\nReturn sum of all elements in\
    \ the list.\n            \n*/", "{\n\tlong max = 0;\n\tlong i;\n\tfor (i = 0;\
    \ i < l.length; i++) \n\t{\n\t\tif (l[i] > max) \n\t\t{\n\t\t\tmax = l[i];\n\t\
    \t}\n\t}\n\treturn max;\n}\n/*\nReturn minimum element in the list.\n        \
    \    \n*/\nlong min_element(long[] l) \n{\n\tlong min = 0;\n\tlong i;\n\tfor (i\
    \ = 0; i < l.length; i++) \n\t{\n\t\tif (l[i] < min) \n\t\t{\n\t\t\tmin = l[i];\n\
    \t\t}\n\t}\n\treturn min;\n}\n/*\nReturn sum of all elements in the list.\n  \
    \          \n*/\nlong sum_elements(long[] l) \n{\n\tlong sum = 0;\n\tlong i;\n\
    \tfor (i = 0; i < l.length; i++) \n\t{\n\t\tsum += l[i];\n\t}\n\treturn sum;\n\
    }\n/*\nReturn product of all elements in the list.\n            \n*/\nlong product_elements(long[]\
    \ l) \n{\n\tlong product = 1;\n\tlong i;\n\tfor (i = 0; i < l.length; i++) \n\t\
    {\n\t\tproduct *= l[i];\n\t}\n\treturn product;\n}\n/*\nReturn sum of all elements\
    \ in the list.\n            \n*/\ndouble sum_elements(double[] l) \n{\n\tdouble\
    \ sum = 0;\n\tlong i;\n\tfor (i = 0; i < l.length; i++) \n\t{\n\t\tsum += l[i];\n\
    \t}\n\treturn sum;\n}\n/*\nReturn product of all elements in the list.\n     \
    \       \n*/\ndouble product_elements(double[] l) \n{\n\tdouble product = 1;\n\
    \tlong i;\n\tfor (i = 0; i < l.length; i++) \n\t{\n\t\tproduct *= l[i];\n\t}\n\
    \treturn product;\n}\n/*\nReturn sum of all elements in the list.\n          \
    \  \n*/\nfloat sum_elements(float[] l) \n{\n\tfloat sum = 0;\n\tlong i;\n\tfor\
    \ (i = 0; i < l.length; i++) \n\t{\n\t\tsum += l[i];\n\t}\n\treturn sum;\n}\n\
    /*\nReturn product of all elements in the list.\n            \n*/\nfloat product_elements(float[]\
    \ l) \n{\n\tfloat product = 1;\n\tlong i;\n\tfor (i = 0; i < l.length; i++) \n\
    \t{\n\t\tproduct *= l[i];\n\t}\n\treturn product;\n}\n/*\nReturn sum of all elements\
    \ in the list.\n            \n*/", "{\n\tlong max;\n\tmax = l[0];\n\tfor (int\
    \ i = 1; i < l.length; ++i)\n\t{\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\t}\n\
    \treturn max;\n}\n/*\nReturn minimum element in the list.\n            \n*/\n\
    long min_element(long[] l) \n{\n\tlong min;\n\tmin = l[0];\n\tfor (int i = 1;\
    \ i < l.length; ++i)\n\t{\n\t\tif (l[i] < min)\n\t\t\tmin = l[i];\n\t}\n\treturn\
    \ min;\n}\n/*\nReturn sum of all elements in the list.\n            \n*/\nlong\
    \ sum_elements(long[] l) \n{\n\tlong sum = 0;\n\tfor (int i = 0; i < l.length;\
    \ ++i)\n\t\tsum += l[i];\n\treturn sum;\n}\n/*\nReturn product of all elements\
    \ in the list.\n            \n*/\nlong product_elements(long[] l) \n{\n\tlong\
    \ product = 1;\n\tfor (int i = 0; i < l.length; ++i)\n\t\tproduct *= l[i];\n\t\
    return product;\n}\n/*\nReturn sum of all elements in the list.\n            \n\
    */\ndouble sum_elements(double[] l) \n{\n\tdouble sum = 0;\n\tfor (int i = 0;\
    \ i < l.length; ++i)\n\t\tsum += l[i];\n\treturn sum;\n}\n/*\nReturn product of\
    \ all elements in the list.\n            \n*/\ndouble product_elements(double[]\
    \ l) \n{\n\tdouble product = 1;\n\tfor (int i = 0; i < l.length; ++i)\n\t\tproduct\
    \ *= l[i];\n\treturn product;\n}\n/*\nReturn sum of all elements in the list.\n\
    \            \n*/\nfloat sum_elements(float[] l) \n{\n\tfloat sum = 0;\n\tfor\
    \ (int i = 0; i < l.length; ++i)\n\t\tsum += l[i];\n\treturn sum;\n}\n/*\nReturn\
    \ product of all elements in the list.\n            \n*/\nfloat product_elements(float[]\
    \ l) \n{\n\tfloat product = 1;\n\tfor (int i = 0; i < l.length; ++i)\n\t\tproduct\
    \ *= l[i];\n\treturn product;\n}\n/*\nReturn sum of all elements in the list.\n\
    \            \n*/", "{\n\tlong max = l[0];\n\tfor (int i = 1; i < l.length; ++i)\n\
    \t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\treturn max;\n}", "{\n\tlong max = l[0];\n\
    \tfor (int i = 1; i < l.length; ++i)\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\
    \treturn max;\n}\n/*\nReturn minimum element in the list.\n            \n*/\n\
    long min_element(long[] l) \n{\n\tlong min = l[0];\n\tfor (int i = 1; i < l.length;\
    \ ++i)\n\t\tif (l[i] < min)\n\t\t\tmin = l[i];\n\treturn min;\n}\n/*\nReturn sum\
    \ of all elements in the list.\n            \n*/\nlong sum_element(long[] l) \n\
    {\n\tlong sum = 0;\n\tfor (int i = 0; i < l.length; ++i)\n\t\tsum += l[i];\n\t\
    return sum;\n}\n/*\nReturn product of all elements in the list.\n            \n\
    */\nlong product_element(long[] l) \n{\n\tlong product = 1;\n\tfor (int i = 0;\
    \ i < l.length; ++i)\n\t\tproduct *= l[i];\n\treturn product;\n}\n/*\nReturn absolute\
    \ value of all elements in the list.\n            \n*/\nlong abs_element(long[]\
    \ l) \n{\n\tlong abs = 0;\n\tfor (int i = 0; i < l.length; ++i)\n\t\tabs = max(abs,\
    \ abs(l[i]));\n\treturn abs;\n}\n/*\nReturn absolute value of all elements in\
    \ the list.\n            \n*/\ndouble abs_element(double[] l) \n{\n\tdouble abs\
    \ = 0;\n\tfor (int i = 0; i < l.length; ++i)\n\t\tabs = max(abs, abs(l[i]));\n\
    \treturn abs;\n}\n/*\nReturn absolute value of all elements in the list.\n   \
    \         \n*/\nfloat abs_element(float[] l) \n{\n\tfloat abs = 0;\n\tfor (int\
    \ i = 0; i < l.length; ++i)\n\t\tabs = max(abs, abs(l[i]));\n\treturn abs;\n}\n\
    /*\nReturn absolute value of all elements in the list.\n            \n*/", "{\n\
    \tlong max = l[0];\n\tlong i;\n\tfor (i = 1; i < l.length; ++i)\n\t\tif (l[i]\
    \ > max)\n\t\t\tmax = l[i];\n\treturn max;\n}\n/*\nReturn minimum element in the\
    \ list.\n            \n*/\nlong min_element(long[] l) \n{\n\tlong min = l[0];\n\
    \tlong i;\n\tfor (i = 1; i < l.length; ++i)\n\t\tif (l[i] < min)\n\t\t\tmin =\
    \ l[i];\n\treturn min;\n}\n/*\nReturn sum of all elements in the list.\n     \
    \       \n*/\nlong sum_element(long[] l) \n{\n\tlong sum = 0;\n\tlong i;\n\tfor\
    \ (i = 0; i < l.length; ++i)\n\t\tsum += l[i];\n\treturn sum;\n}\n/*\nReturn product\
    \ of all elements in the list.\n            \n*/\nlong product_element(long[]\
    \ l) \n{\n\tlong product = 1;\n\tlong i;\n\tfor (i = 0; i < l.length; ++i)\n\t\
    \tproduct *= l[i];\n\treturn product;\n}\n/*\nReturn sum of all elements in the\
    \ list.\n            \n*/\ndouble sum_element_double(double[] l) \n{\n\tdouble\
    \ sum = 0;\n\tlong i;\n\tfor (i = 0; i < l.length; ++i)\n\t\tsum += l[i];\n\t\
    return sum;\n}\n/*\nReturn product of all elements in the list.\n            \n\
    */\ndouble product_element_double(double[] l) \n{\n\tdouble product = 1;\n\tlong\
    \ i;\n\tfor (i = 0; i < l.length; ++i)\n\t\tproduct *= l[i];\n\treturn product;\n\
    }\n/*\nReturn sum of all elements in the list.\n            \n*/\nfloat sum_element_float(float[]\
    \ l) \n{\n\tfloat sum = 0;\n\tlong i;\n\tfor (i = 0; i < l.length; ++i)\n\t\t\
    sum += l[i];\n\treturn sum;\n}\n/*\nReturn product of all elements in the list.\n\
    \            \n*/\nfloat product_element_float(float[] l) \n{\n\tfloat product\
    \ = 1;\n\tlong i;\n\tfor (i = 0; i < l.length; ++i)\n\t\tproduct *= l[i];\n\t\
    return product;\n}\n/*\nReturn sum of all elements in the list.\n            \n\
    */", "{\n\tlong max;\n\tlong i;\n\tfor(i = 0; i < (long)l.length; i++)\n\t{\n\t\
    \tif(l[i] > max)\n\t\t\tmax = l[i];\n\t}\n\treturn max;\n}\n/*\nReturn minimum\
    \ element in the list.\n            \n*/\nlong min_element(long[] l) \n{\n\tlong\
    \ min;\n\tlong i;\n\tfor(i = 0; i < (long)l.length; i++)\n\t{\n\t\tif(l[i] < min)\n\
    \t\t\tmin = l[i];\n\t}\n\treturn min;\n}\n/*\nReturn sum of all elements in the\
    \ list.\n            \n*/\nlong sum_elements(long[] l) \n{\n\tlong sum = 0;\n\t\
    long i;\n\tfor(i = 0; i < (long)l.length; i++)\n\t{\n\t\tsum += l[i];\n\t}\n\t\
    return sum;\n}\n/*\nReturn product of all elements in the list.\n            \n\
    */\nlong product_elements(long[] l) \n{\n\tlong product = 1;\n\tlong i;\n\tfor(i\
    \ = 0; i < (long)l.length; i++)\n\t{\n\t\tproduct *= l[i];\n\t}\n\treturn product;\n\
    }\n/*\nReturn sum of all elements in the list.\n            \n*/\ndouble sum_elements(double[]\
    \ l) \n{\n\tdouble sum = 0;\n\tdouble i;\n\tfor(i = 0; i < (double)l.length; i++)\n\
    \t{\n\t\tsum += l[i];\n\t}\n\treturn sum;\n}\n/*\nReturn product of all elements\
    \ in the list.\n            \n*/\ndouble product_elements(double[] l) \n{\n\t\
    double product = 1;\n\tdouble i;\n\tfor(i = 0; i < (double)l.length; i++)\n\t\
    {\n\t\tproduct *= l[i];\n\t}\n\treturn product;\n}\n/*\nReturn sum of all elements\
    \ in the list.\n            \n*/\nfloat sum_elements(float[] l) \n{\n\tfloat sum\
    \ = 0;\n\tfloat i;\n\tfor(i = 0; i < (float)l.length; i++)\n\t{\n\t\tsum += l[i];\n\
    \t}\n\treturn sum;\n}\n/*\nReturn product of all elements in the list.\n     \
    \       \n*/\nfloat product_elements(float[] l) \n{\n\tfloat product = 1;\n\t\
    float i;\n\tfor(i = 0; i < (float)l.length; i++)\n\t{\n\t\tproduct *= l[i];\n\t\
    }\n\treturn product;\n}\n/*\nReturn sum of all elements in the list.\n       \
    \     \n*/", "{\n\tlong max = l[0];\n\tfor (int i = 1; i < l.length; ++i)\n\t\t\
    if (l[i] > max)\n\t\t\tmax = l[i];\n\treturn max;\n}\n/*\nReturn minimum element\
    \ in the list.\n            \n*/\nlong min_element(long[] l) \n{\n\tlong min =\
    \ l[0];\n\tfor (int i = 1; i < l.length; ++i)\n\t\tif (l[i] < min)\n\t\t\tmin\
    \ = l[i];\n\treturn min;\n}\n/*\nReturn sum of all elements in the list.\n   \
    \         \n*/\nlong sum_elements(long[] l) \n{\n\tlong sum = 0;\n\tfor (int i\
    \ = 0; i < l.length; ++i)\n\t\tsum += l[i];\n\treturn sum;\n}\n/*\nReturn product\
    \ of all elements in the list.\n            \n*/\nlong product_elements(long[]\
    \ l) \n{\n\tlong product = 1;\n\tfor (int i = 0; i < l.length; ++i)\n\t\tproduct\
    \ *= l[i];\n\treturn product;\n}\n/*\nReturn sum of all elements in the list.\n\
    \            \n*/\ndouble sum_elements(double[] l) \n{\n\tdouble sum = 0;\n\t\
    for (int i = 0; i < l.length; ++i)\n\t\tsum += l[i];\n\treturn sum;\n}\n/*\nReturn\
    \ product of all elements in the list.\n            \n*/\ndouble product_elements(double[]\
    \ l) \n{\n\tdouble product = 1;\n\tfor (int i = 0; i < l.length; ++i)\n\t\tproduct\
    \ *= l[i];\n\treturn product;\n}\n/*\nReturn sum of all elements in the list.\n\
    \            \n*/\nfloat sum_elements(float[] l) \n{\n\tfloat sum = 0;\n\tfor\
    \ (int i = 0; i < l.length; ++i)\n\t\tsum += l[i];\n\treturn sum;\n}\n/*\nReturn\
    \ product of all elements in the list.\n            \n*/\nfloat product_elements(float[]\
    \ l) \n{\n\tfloat product = 1;\n\tfor (int i = 0; i < l.length; ++i)\n\t\tproduct\
    \ *= l[i];\n\treturn product;\n}\n/*\nReturn sum of all elements in the list.\n\
    \            \n*/", "{\n\tlong max;\n\tmax = l[0];\n\tfor (int i = 1; i < l.length;\
    \ i++)\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\treturn max;\n}\n/*\nReturn minimum\
    \ element in the list.\n            \n*/\nlong min_element(long[] l) \n{\n\tlong\
    \ min;\n\tmin = l[0];\n\tfor (int i = 1; i < l.length; i++)\n\t\tif (l[i] < min)\n\
    \t\t\tmin = l[i];\n\treturn min;\n}\n/*\nReturn sum of all elements in the list.\n\
    \            \n*/\nlong sum_element(long[] l) \n{\n\tlong sum = 0;\n\tfor (int\
    \ i = 0; i < l.length; i++)\n\t\tsum += l[i];\n\treturn sum;\n}\n/*\nReturn product\
    \ of all elements in the list.\n            \n*/\nlong product_element(long[]\
    \ l) \n{\n\tlong prod = 1;\n\tfor (int i = 0; i < l.length; i++)\n\t\tprod *=\
    \ l[i];\n\treturn prod;\n}\n/*\nReturn absolute value of all elements in the list.\n\
    \            \n*/\nlong abs_element(long[] l) \n{\n\tlong abs = 0;\n\tfor (int\
    \ i = 0; i < l.length; i++)\n\t\tabs = abs(l[i]);\n\treturn abs;\n}\n/*\nReturn\
    \ absolute value of all elements in the list.\n            \n*/\ndouble abs_element(double[]\
    \ l) \n{\n\tdouble abs = 0;\n\tfor (int i = 0; i < l.length; i++)\n\t\tabs = abs(l[i]);\n\
    \treturn abs;\n}\n/*\nReturn absolute value of all elements in the list.\n   \
    \         \n*/\nfloat abs_element(float[] l) \n{\n\tfloat abs = 0;\n\tfor (int\
    \ i = 0; i < l.length; i++)\n\t\tabs = abs(l[i]);\n\treturn abs;\n}\n/*\nReturn\
    \ absolute value of all elements in the list.\n            \n*/", "{\n\tlong max\
    \ = l[0];\n\tfor (int i = 1; i < l.length; ++i)\n\t\tif (l[i] > max)\n\t\t\tmax\
    \ = l[i];\n\treturn max;\n}\n/*\nReturn minimum element in the list.\n       \
    \     \n*/\nlong min_element(long[] l) \n{\n\tlong min = l[0];\n\tfor (int i =\
    \ 1; i < l.length; ++i)\n\t\tif (l[i] < min)\n\t\t\tmin = l[i];\n\treturn min;\n\
    }\n/*\nReturn sum of all elements in the list.\n            \n*/\nlong sum_element(long[]\
    \ l) \n{\n\tlong sum = 0;\n\tfor (int i = 0; i < l.length; ++i)\n\t\tsum += l[i];\n\
    \treturn sum;\n}\n/*\nReturn product of all elements in the list.\n          \
    \  \n*/\nlong product_element(long[] l) \n{\n\tlong product = 1;\n\tfor (int i\
    \ = 0; i < l.length; ++i)\n\t\tproduct *= l[i];\n\treturn product;\n}\n/*\nReturn\
    \ absolute value of all elements in the list.\n            \n*/\nlong abs_element(long[]\
    \ l) \n{\n\tlong abs = 0;\n\tfor (int i = 0; i < l.length; ++i)\n\t\tabs = max(abs,\
    \ l[i]);\n\treturn abs;\n}\n/*\nReturn absolute value of all elements in the list.\n\
    \            \n*/\ndouble abs_element(double[] l) \n{\n\tdouble abs = 0;\n\tfor\
    \ (int i = 0; i < l.length; ++i)\n\t\tabs = max(abs, l[i]);\n\treturn abs;\n}\n\
    /*\nReturn absolute value of all elements in the list.\n            \n*/\nfloat\
    \ abs_element(float[] l) \n{\n\tfloat abs = 0;\n\tfor (int i = 0; i < l.length;\
    \ ++i)\n\t\tabs = max(abs, l[i]);\n\treturn abs;\n}\n/*\nReturn absolute value\
    \ of all elements in the list.\n            \n*/", "{\n\tint i;\n\tlong max =\
    \ l[0];\n\tfor(i = 1; i < l.length; i++)\n\t\tif(l[i] > max)\n\t\t\tmax = l[i];\n\
    \treturn max;\n}", "{\n\tint i;\n\tlong max;\n\tmax = l[0];\n\tfor (i = 1; i <\
    \ l.length; i++)\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\treturn max;\n}\n/*\n\
    Return minimum element in the list.\n            \n*/\nlong min_element(long[]\
    \ l) \n{\n\tint i;\n\tlong min;\n\tmin = l[0];\n\tfor (i = 1; i < l.length; i++)\n\
    \t\tif (l[i] < min)\n\t\t\tmin = l[i];\n\treturn min;\n}\n/*\nReturn sum of all\
    \ elements in the list.\n            \n*/\nlong sum_elements(long[] l) \n{\n\t\
    int i;\n\tlong sum;\n\tsum = 0;\n\tfor (i = 0; i < l.length; i++)\n\t\tsum +=\
    \ l[i];\n\treturn sum;\n}\n/*\nReturn product of all elements in the list.\n \
    \           \n*/\nlong product_elements(long[] l) \n{\n\tint i;\n\tlong prod;\n\
    \tprod = 1;\n\tfor (i = 0; i < l.length; i++)\n\t\tprod *= l[i];\n\treturn prod;\n\
    }\n/*\nReturn absolute value of all elements in the list.\n            \n*/\n\
    long abs_elements(long[] l) \n{\n\tint i;\n\tlong abs;\n\tabs = 0;\n\tfor (i =\
    \ 0; i < l.length; i++)\n\t\tabs = max(abs, abs(l[i]));\n\treturn abs;\n}\n/*\n\
    Return absolute value of all elements in the list.\n            \n*/\ndouble abs_elements(double[]\
    \ l) \n{\n\tint i;\n\tdouble abs;\n\tabs = 0;\n\tfor (i = 0; i < l.length; i++)\n\
    \t\tabs = max(abs, abs(l[i]));\n\treturn abs;\n}\n/*\nReturn absolute value of\
    \ all elements in the list.\n            \n*/\nfloat abs_elements(float[] l) \n\
    {\n\tint i;\n\tfloat abs;\n\tabs = 0;\n\tfor (i = 0; i < l.length; i++)\n\t\t\
    abs = max(abs, abs(l[i]));\n\treturn abs;\n}\n/*\nReturn absolute value of all\
    \ elements in the list.\n            \n*/", "{\n\tlong max = l[0];\n\tfor(int\
    \ i = 1; i < l.length; i++) \n\t{\n\t\tif(l[i] > max) \n\t\t\tmax = l[i];\n\t\
    }\n\treturn max;\n}", "{\n\tlong max = l[0];\n\tfor(int i=1; i<l.length; i++)\n\
    \t\tif(l[i] > max)\n\t\t\tmax = l[i];\n\treturn max;\n}\n/*\nReturn minimum element\
    \ in the list.\n            \n*/\nlong min_element(long[] l) \n{\n\tlong min =\
    \ l[0];\n\tfor(int i=1; i<l.length; i++)\n\t\tif(l[i] < min)\n\t\t\tmin = l[i];\n\
    \treturn min;\n}\n/*\nReturn sum of all elements in the list.\n            \n\
    */\nlong sum_elements(long[] l) \n{\n\tlong sum = 0;\n\tfor(int i=0; i<l.length;\
    \ i++)\n\t\tsum += l[i];\n\treturn sum;\n}\n/*\nReturn product of all elements\
    \ in the list.\n            \n*/\nlong product_elements(long[] l) \n{\n\tlong\
    \ product = 1;\n\tfor(int i=0; i<l.length; i++)\n\t\tproduct *= l[i];\n\treturn\
    \ product;\n}\n/*\nReturn sum of all elements in the list with specified type.\n\
    \            \n*/\nlong sum_elements(long[] l, long type) \n{\n\tlong sum = 0;\n\
    \tfor(int i=0; i<l.length; i++)\n\t\tif(l[i] == type)\n\t\t\tsum += l[i];\n\t\
    return sum;\n}\n/*\nReturn product of all elements in the list with specified\
    \ type.\n            \n*/\nlong product_elements(long[] l, long type) \n{\n\t\
    long product = 1;\n\tfor(int i=0; i<l.length; i++)\n\t\tif(l[i] == type)\n\t\t\
    \tproduct *= l[i];\n\treturn product;\n}\n/*\nReturn sum of all elements in the\
    \ list with specified type.\n            \n*/\ndouble sum_elements(double[] l,\
    \ double type) \n{\n\tdouble sum = 0;\n\tfor(int i=0; i<l.length; i++)\n\t\tif(l[i]\
    \ == type)\n\t\t\tsum += l[i];\n\treturn sum;\n}\n/*\nReturn product of all elements\
    \ in the list with specified type.\n            \n*/\ndouble product_elements(double[]\
    \ l, double type) \n{\n\tdouble product = 1;\n\tfor(int i=0; i<l.length; i++)\n\
    \t\tif(l[i] == type)\n\t\t\tproduct *= l[i];\n\treturn product;\n}\n/*\nReturn\
    \ sum of all elements in the list with specified type.\n            \n*/\nfloat\
    \ sum_elements(float[] l, float type) \n{\n\tfloat sum = 0;\n\tfor(int i=0; i<l.length;\
    \ i++)\n\t\tif(l[i] == type)\n\t\t\tsum += l[i];\n\treturn sum;\n}\n/*\nReturn\
    \ product of all elements in the list with specified type.\n            \n*/\n\
    float product_elements(float[] l, float type) \n{\n\tfloat product = 1;\n\tfor(int\
    \ i=0; i<l.length; i++)\n\t\tif(", "{\n\tlong max = l[0];\n\tfor (int i = 1; i\
    \ < l.length; ++i)\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\treturn max;\n}",
  "{\n\tlong max;\n\tlong i;\n\tfor(i = 0; i < (long)l.length; i++)\n\t{\n\t\tif(l[i]\
    \ > max)\n\t\t\tmax = l[i];\n\t}\n\treturn max;\n}", "{\n\tlong max = 0;\n\tlong\
    \ i = 0;\n\twhile (i < l.length) \n\t{\n\t\tif (l[i] > max) \n\t\t{\n\t\t\tmax\
    \ = l[i];\n\t\t}\n\t\ti++;\n\t}\n\treturn max;\n}", "{\n\tlong max = l[0];\n\t\
    for (int i = 1; i < l.length; ++i)\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\t\
    return max;\n}\n/*\nReturn minimum element in the list.\n            \n*/\nlong\
    \ min_element(long[] l) \n{\n\tlong min = l[0];\n\tfor (int i = 1; i < l.length;\
    \ ++i)\n\t\tif (l[i] < min)\n\t\t\tmin = l[i];\n\treturn min;\n}\n/*\nReturn sum\
    \ of all elements in the list.\n            \n*/\nlong sum_elements(long[] l)\
    \ \n{\n\tlong sum = 0;\n\tfor (int i = 0; i < l.length; ++i)\n\t\tsum += l[i];\n\
    \treturn sum;\n}\n/*\nReturn product of all elements in the list.\n          \
    \  \n*/\nlong product_elements(long[] l) \n{\n\tlong product = 1;\n\tfor (int\
    \ i = 0; i < l.length; ++i)\n\t\tproduct *= l[i];\n\treturn product;\n}\n/*\n\
    Return sum of all elements in the list with specified type.\n            \n*/\n\
    long sum_elements(long[] l, int type) \n{\n\tlong sum = 0;\n\tfor (int i = 0;\
    \ i < l.length; ++i)\n\t\tif (type == 0)\n\t\t\tsum += l[i];\n\t\telse if (type\
    \ == 1)\n\t\t\tsum += l[i] * l[i];\n\t\telse if (type == 2)\n\t\t\tsum += l[i]\
    \ * l[i] * l[i];\n\t\telse if (type == 3)\n\t\t\tsum += l[i] * l[i] * l[i] * l[i];\n\
    \t\telse if (type == 4)\n\t\t\tsum += l[i] * l[i] * l[i] * l[i] * l[i];\n\t\t\
    else if (type == 5)\n\t\t\tsum += l[i] * l[i] * l[i] * l[i] * l[i] * l[i];\n\t\
    \telse if (type == 6)\n\t\t\tsum += l[i] * l[i] * l[i] * l[i] * l[i] * l[i] *\
    \ l[i];\n\t\telse if (type == 7)\n\t\t\tsum += l[i] * l[i] * l[i] * l[i] * l[i]\
    \ * l[i] * l[i] * l[i];\n\t\telse if (type == 8)\n\t\t\tsum += l[i] * l[i] * l[i]\
    \ * l[i] * l[i] * l[i] * l[i] * l[i] * l[i];\n\t\telse if (type == 9)\n\t\t\t\
    sum += l[i] * l[i] * l[i] * l[i] * l[i] * l[i] * l[i] * l[i] * l[i] * l[i];\n\t\
    \telse if (type == 10)\n\t\t\tsum += l[i] * l[i] * l[i] * l[i] * l[i] * l[i] *\
    \ l[i] * l[i] * l[i] * l[i] * l[i];\n\t\telse if (type == 11)\n\t\t\tsum += l[i]",
  "{\n\tint i;\n\tlong max_el = l[0];\n\tfor (i = 1; i < l.length; i++)\n\t\tif (l[i]\
    \ > max_el)\n\t\t\tmax_el = l[i];\n\treturn max_el;\n}\n/*\nReturn minimum element\
    \ in the list.\n            \n*/\nlong min_element(long[] l) \n{\n\tint i;\n\t\
    long min_el = l[0];\n\tfor (i = 1; i < l.length; i++)\n\t\tif (l[i] < min_el)\n\
    \t\t\tmin_el = l[i];\n\treturn min_el;\n}\n/*\nReturn sum of all elements in the\
    \ list.\n            \n*/\nlong sum_elements(long[] l) \n{\n\tint i;\n\tlong sum\
    \ = 0;\n\tfor (i = 0; i < l.length; i++)\n\t\tsum += l[i];\n\treturn sum;\n}\n\
    /*\nReturn product of all elements in the list.\n            \n*/\nlong product_elements(long[]\
    \ l) \n{\n\tint i;\n\tlong product = 1;\n\tfor (i = 0; i < l.length; i++)\n\t\t\
    product *= l[i];\n\treturn product;\n}\n/*\nReturn sum of all elements in the\
    \ list.\n            \n*/\ndouble sum_elements(double[] l) \n{\n\tint i;\n\tdouble\
    \ sum = 0;\n\tfor (i = 0; i < l.length; i++)\n\t\tsum += l[i];\n\treturn sum;\n\
    }\n/*\nReturn product of all elements in the list.\n            \n*/\ndouble product_elements(double[]\
    \ l) \n{\n\tint i;\n\tdouble product = 1;\n\tfor (i = 0; i < l.length; i++)\n\t\
    \tproduct *= l[i];\n\treturn product;\n}\n/*\nReturn sum of all elements in the\
    \ list.\n            \n*/\nfloat sum_elements(float[] l) \n{\n\tint i;\n\tfloat\
    \ sum = 0;\n\tfor (i = 0; i < l.length; i++)\n\t\tsum += l[i];\n\treturn sum;\n\
    }\n/*\nReturn product of all elements in the list.\n            \n*/\nfloat product_elements(float[]\
    \ l) \n{\n\tint i;\n\tfloat product = 1;\n\tfor (i = 0; i < l.length; i++)\n\t\
    \tproduct *= l[i];\n\treturn product;\n}\n/*\nReturn sum of all elements in the\
    \ list.\n            \n*/", "{\n\tlong max = l[0];\n\tfor (int i = 1; i < l.length;\
    \ ++i)\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\treturn max;\n}\n/*\nReturn minimum\
    \ element in the list.\n            \n*/\nlong min_element(long[] l) \n{\n\tlong\
    \ min = l[0];\n\tfor (int i = 1; i < l.length; ++i)\n\t\tif (l[i] < min)\n\t\t\
    \tmin = l[i];\n\treturn min;\n}\n/*\nReturn sum of all elements in the list.\n\
    \            \n*/\nlong sum_element(long[] l) \n{\n\tlong sum = 0;\n\tfor (int\
    \ i = 0; i < l.length; ++i)\n\t\tsum += l[i];\n\treturn sum;\n}\n/*\nReturn product\
    \ of all elements in the list.\n            \n*/\nlong product_element(long[]\
    \ l) \n{\n\tlong product = 1;\n\tfor (int i = 0; i < l.length; ++i)\n\t\tproduct\
    \ *= l[i];\n\treturn product;\n}\n/*\nReturn absolute value of all elements in\
    \ the list.\n            \n*/\nlong abs_element(long[] l) \n{\n\tlong abs = 0;\n\
    \tfor (int i = 0; i < l.length; ++i)\n\t\tabs = max(abs, abs(l[i]));\n\treturn\
    \ abs;\n}\n/*\nReturn absolute value of all elements in the list.\n          \
    \  \n*/\ndouble abs_element(double[] l) \n{\n\tdouble abs = 0;\n\tfor (int i =\
    \ 0; i < l.length; ++i)\n\t\tabs = max(abs, abs(l[i]));\n\treturn abs;\n}\n/*\n\
    Return absolute value of all elements in the list.\n            \n*/\nfloat abs_element(float[]\
    \ l) \n{\n\tfloat abs = 0;\n\tfor (int i = 0; i < l.length; ++i)\n\t\tabs = max(abs,\
    \ abs(l[i]));\n\treturn abs;\n}\n/*\nReturn absolute value of all elements in\
    \ the list.\n            \n*/", "{\n\tint i;\n\tlong max;\n\tmax = l[0];\n\tfor\
    \ (i = 1; i < l.length; i++)\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\treturn\
    \ max;\n}\n/*\nReturn minimum element in the list.\n            \n*/\nlong min_element(long[]\
    \ l) \n{\n\tint i;\n\tlong min;\n\tmin = l[0];\n\tfor (i = 1; i < l.length; i++)\n\
    \t\tif (l[i] < min)\n\t\t\tmin = l[i];\n\treturn min;\n}\n/*\nReturn sum of all\
    \ elements in the list.\n            \n*/\nlong sum_element(long[] l) \n{\n\t\
    int i;\n\tlong sum;\n\tsum = 0;\n\tfor (i = 0; i < l.length; i++)\n\t\tsum +=\
    \ l[i];\n\treturn sum;\n}\n/*\nReturn product of all elements in the list.\n \
    \           \n*/\nlong prod_element(long[] l) \n{\n\tint i;\n\tlong prod;\n\t\
    prod = 1;\n\tfor (i = 0; i < l.length; i++)\n\t\tprod *= l[i];\n\treturn prod;\n\
    }\n/*\nReturn absolute value of all elements in the list.\n            \n*/\n\
    long abs_element(long[] l) \n{\n\tint i;\n\tlong abs;\n\tabs = 0;\n\tfor (i =\
    \ 0; i < l.length; i++)\n\t\tabs = max(abs, l[i]);\n\treturn abs;\n}\n/*\nReturn\
    \ absolute value of all elements in the list.\n            \n*/\ndouble abs_element(double[]\
    \ l) \n{\n\tint i;\n\tdouble abs;\n\tabs = 0;\n\tfor (i = 0; i < l.length; i++)\n\
    \t\tabs = max(abs, l[i]);\n\treturn abs;\n}\n/*\nReturn absolute value of all\
    \ elements in the list.\n            \n*/\nfloat abs_element(float[] l) \n{\n\t\
    int i;\n\tfloat abs;\n\tabs = 0;\n\tfor (i = 0; i < l.length; i++)\n\t\tabs =\
    \ max(abs, l[i]);\n\treturn abs;\n}\n/*\nReturn absolute value of all elements\
    \ in the list.\n            \n*/", "{\n\tlong max = l[0];\n\tfor (int i = 1; i\
    \ < l.length; ++i)\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\treturn max;\n}",
  "{\n\tlong max;\n\tstd.sort(l);\n\tmax = l[0];\n\tfor (int i = 1; i < l.length;\
    \ ++i) {\n\t\tif (l[i] > max) {\n\t\t\tmax = l[i];\n\t\t}\n\t}\n\treturn max;\n\
    }", "{\n\tint i;\n\tlong max_val = l[0];\n\tfor (i = 1; i < l.length; ++i)\n\t\
    \tif (l[i] > max_val)\n\t\t\tmax_val = l[i];\n\treturn max_val;\n}\n/*\nReturn\
    \ minimum element in the list.\n            \n*/\nlong min_element(long[] l) \n\
    {\n\tint i;\n\tlong min_val = l[0];\n\tfor (i = 1; i < l.length; ++i)\n\t\tif\
    \ (l[i] < min_val)\n\t\t\tmin_val = l[i];\n\treturn min_val;\n}\n/*\nReturn sum\
    \ of all elements in the list.\n            \n*/\nlong sum_element(long[] l) \n\
    {\n\tint i;\n\tlong sum = 0;\n\tfor (i = 0; i < l.length; ++i)\n\t\tsum += l[i];\n\
    \treturn sum;\n}\n/*\nReturn product of all elements in the list.\n          \
    \  \n*/\nlong prod_element(long[] l) \n{\n\tint i;\n\tlong prod = 1;\n\tfor (i\
    \ = 0; i < l.length; ++i)\n\t\tprod *= l[i];\n\treturn prod;\n}\n/*\nReturn absolute\
    \ value of all elements in the list.\n            \n*/\nlong abs_element(long[]\
    \ l) \n{\n\tint i;\n\tlong abs = 0;\n\tfor (i = 0; i < l.length; ++i)\n\t\tabs\
    \ = max(abs, abs(l[i]));\n\treturn abs;\n}\n/*\nReturn absolute value of all elements\
    \ in the list.\n            \n*/\ndouble abs_element(double[] l) \n{\n\tint i;\n\
    \tdouble abs = 0;\n\tfor (i = 0; i < l.length; ++i)\n\t\tabs = max(abs, abs(l[i]));\n\
    \treturn abs;\n}\n/*\nReturn absolute value of all elements in the list.\n   \
    \         \n*/\nfloat abs_element(float[] l) \n{\n\tint i;\n\tfloat abs = 0;\n\
    \tfor (i = 0; i < l.length; ++i)\n\t\tabs = max(abs, abs(l[i]));\n\treturn abs;\n\
    }\n/*\nReturn absolute value of all elements in the list.\n            \n*/\n\
    long abs_element(long l) \n{\n\treturn abs(l);\n}\n/*\nReturn absolute value of\
    \ all elements in the list.\n            \n*/\ndouble abs_element(double l) \n\
    {\n\treturn abs(l);\n}\n/*\nReturn absolute value of all elements in the list.\n\
    \            \n*/\nfloat abs_element(float l) \n{\n\treturn abs(l);\n}\n/*\nReturn\
    \ absolute value of all elements in the list.\n            \n*/\nlong abs_element(long\
    \ l) \n{\n\treturn abs(l);\n}\n/*\nReturn absolute value of all elements in the\
    \ list.\n            \n*/\ndouble abs_element(double l) \n{\n\treturn abs(l);\n\
    }\n/*", "{\n\tint i;\n\tlong max;\n\tmax = l[0];\n\tfor (i = 1; i < l.length;\
    \ ++i) {\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\t}\n\treturn max;\n}\n/*\n\
    Return minimum element in the list.\n            \n*/\nlong min_element(long[]\
    \ l) \n{\n\tint i;\n\tlong min;\n\tmin = l[0];\n\tfor (i = 1; i < l.length; ++i)\
    \ {\n\t\tif (l[i] < min)\n\t\t\tmin = l[i];\n\t}\n\treturn min;\n}\n/*\nReturn\
    \ sum of all elements in the list.\n            \n*/\nlong sum_element(long[]\
    \ l) \n{\n\tint i;\n\tlong sum;\n\tsum = 0;\n\tfor (i = 0; i < l.length; ++i)\n\
    \t\tsum += l[i];\n\treturn sum;\n}\n/*\nReturn product of all elements in the\
    \ list.\n            \n*/\nlong product_element(long[] l) \n{\n\tint i;\n\tlong\
    \ prod;\n\tprod = 1;\n\tfor (i = 0; i < l.length; ++i)\n\t\tprod *= l[i];\n\t\
    return prod;\n}\n/*\nReturn absolute value of all elements in the list.\n    \
    \        \n*/\nlong abs_element(long[] l) \n{\n\tint i;\n\tlong abs;\n\tabs =\
    \ 0;\n\tfor (i = 0; i < l.length; ++i)\n\t\tabs = max(abs, l[i]);\n\treturn abs;\n\
    }\n/*\nReturn absolute value of all elements in the list.\n            \n*/\n\
    double abs_element(double[] l) \n{\n\tint i;\n\tdouble abs;\n\tabs = 0;\n\tfor\
    \ (i = 0; i < l.length; ++i)\n\t\tabs = max(abs, l[i]);\n\treturn abs;\n}\n/*\n\
    Return absolute value of all elements in the list.\n            \n*/\nfloat abs_element(float[]\
    \ l) \n{\n\tint i;\n\tfloat abs;\n\tabs = 0;\n\tfor (i = 0; i < l.length; ++i)\n\
    \t\tabs = max(abs, l[i]);\n\treturn abs;\n}\n/*\nReturn absolute value of all\
    \ elements in the list.\n            \n*/", "{\n\tlong max = l[0];\n\tlong i;\n\
    \tfor (i = 1; i < l.length; i++) \n\t{\n\t\tif (l[i] > max) \n\t\t{\n\t\t\tmax\
    \ = l[i];\n\t\t}\n\t}\n\treturn max;\n}\n/*\nReturn minimum element in the list.\n\
    \            \n*/\nlong min_element(long[] l) \n{\n\tlong min = l[0];\n\tlong\
    \ i;\n\tfor (i = 1; i < l.length; i++) \n\t{\n\t\tif (l[i] < min) \n\t\t{\n\t\t\
    \tmin = l[i];\n\t\t}\n\t}\n\treturn min;\n}\n/*\nReturn sum of all elements in\
    \ the list.\n            \n*/\nlong sum_element(long[] l) \n{\n\tlong sum = 0;\n\
    \tlong i;\n\tfor (i = 0; i < l.length; i++) \n\t{\n\t\tsum += l[i];\n\t}\n\treturn\
    \ sum;\n}\n/*\nReturn product of all elements in the list.\n            \n*/\n\
    long product_element(long[] l) \n{\n\tlong product = 1;\n\tlong i;\n\tfor (i =\
    \ 0; i < l.length; i++) \n\t{\n\t\tproduct *= l[i];\n\t}\n\treturn product;\n\
    }\n/*\nReturn absolute value of all elements in the list.\n            \n*/\n\
    long abs_element(long[] l) \n{\n\tlong i;\n\tlong sum = 0;\n\tfor (i = 0; i <\
    \ l.length; i++) \n\t{\n\t\tsum += l[i];\n\t}\n\treturn sum;\n}\n/*\nReturn absolute\
    \ value of all elements in the list.\n            \n*/\ndouble abs_element(double[]\
    \ l) \n{\n\tdouble i;\n\tdouble sum = 0;\n\tfor (i = 0; i < l.length; i++) \n\t\
    {\n\t\tsum += l[i];\n\t}\n\treturn sum;\n}\n/*\nReturn absolute value of all elements\
    \ in the list.\n            \n*/\nfloat abs_element(float[] l) \n{\n\tfloat i;\n\
    \tfloat sum = 0;\n\tfor (i = 0; i < l.length; i++) \n\t{\n\t\tsum += l[i];\n\t\
    }\n\treturn sum;\n}\n/*\nReturn absolute value of all elements in the list.\n\
    \            \n*/", "{\n\tlong max = l[0];\n\tlong i;\n\tfor (i = 1; i < l.length;\
    \ i++) \n\t\tif (l[i] > max) \n\t\t\tmax = l[i];\n\treturn max;\n}\n/*\nReturn\
    \ minimum element in the list.\n            \n*/\nlong min_element(long[] l) \n\
    {\n\tlong min = l[0];\n\tlong i;\n\tfor (i = 1; i < l.length; i++) \n\t\tif (l[i]\
    \ < min) \n\t\t\tmin = l[i];\n\treturn min;\n}\n/*\nReturn sum of all elements\
    \ in the list.\n            \n*/\nlong sum_element(long[] l) \n{\n\tlong sum =\
    \ 0;\n\tlong i;\n\tfor (i = 0; i < l.length; i++) \n\t\tsum += l[i];\n\treturn\
    \ sum;\n}\n/*\nReturn product of all elements in the list.\n            \n*/\n\
    long product_element(long[] l) \n{\n\tlong prod = 1;\n\tlong i;\n\tfor (i = 0;\
    \ i < l.length; i++) \n\t\tprod *= l[i];\n\treturn prod;\n}\n/*\nReturn absolute\
    \ value of all elements in the list.\n            \n*/\nlong abs_element(long[]\
    \ l) \n{\n\tlong i;\n\tfor (i = 0; i < l.length; i++) \n\t\tl[i] = abs(l[i]);\n\
    \treturn l;\n}\n/*\nReturn absolute value of all elements in the list.\n     \
    \       \n*/\ndouble abs_element(double[] l) \n{\n\tdouble i;\n\tfor (i = 0; i\
    \ < l.length; i++) \n\t\tl[i] = abs(l[i]);\n\treturn l;\n}\n/*\nReturn absolute\
    \ value of all elements in the list.\n            \n*/\nfloat abs_element(float[]\
    \ l) \n{\n\tfloat i;\n\tfor (i = 0; i < l.length; i++) \n\t\tl[i] = abs(l[i]);\n\
    \treturn l;\n}\n/*\nReturn absolute value of all elements in the list.\n     \
    \       \n*/", "{\n\tlong max = l[0];\n\tlong i;\n\tfor (i = 1; i < l.length;\
    \ i++) \n\t{\n\t\tif (l[i] > max) \n\t\t{\n\t\t\tmax = l[i];\n\t\t}\n\t}\n\treturn\
    \ max;\n}\n/*\nReturn minimum element in the list.\n            \n*/\nlong min_element(long[]\
    \ l) \n{\n\tlong min = l[0];\n\tlong i;\n\tfor (i = 1; i < l.length; i++) \n\t\
    {\n\t\tif (l[i] < min) \n\t\t{\n\t\t\tmin = l[i];\n\t\t}\n\t}\n\treturn min;\n\
    }\n/*\nReturn sum of all elements in the list.\n            \n*/\nlong sum_element(long[]\
    \ l) \n{\n\tlong sum = 0;\n\tlong i;\n\tfor (i = 0; i < l.length; i++) \n\t{\n\
    \t\tsum += l[i];\n\t}\n\treturn sum;\n}\n/*\nReturn product of all elements in\
    \ the list.\n            \n*/\nlong product_element(long[] l) \n{\n\tlong product\
    \ = 1;\n\tlong i;\n\tfor (i = 0; i < l.length; i++) \n\t{\n\t\tproduct *= l[i];\n\
    \t}\n\treturn product;\n}\n/*\nReturn sum of all elements in the list.\n     \
    \       \n*/\ndouble sum_element_double(double[] l) \n{\n\tdouble sum = 0;\n\t\
    long i;\n\tfor (i = 0; i < l.length; i++) \n\t{\n\t\tsum += l[i];\n\t}\n\treturn\
    \ sum;\n}\n/*\nReturn product of all elements in the list.\n            \n*/\n\
    double product_element_double(double[] l) \n{\n\tdouble product = 1;\n\tlong i;\n\
    \tfor (i = 0; i < l.length; i++) \n\t{\n\t\tproduct *= l[i];\n\t}\n\treturn product;\n\
    }\n/*\nReturn sum of all elements in the list.\n            \n*/\nfloat sum_element_float(float[]\
    \ l) \n{\n\tfloat sum = 0;\n\tlong i;\n\tfor (i = 0; i < l.length; i++) \n\t{\n\
    \t\tsum += l[i];\n\t}\n\treturn sum;\n}\n/*\nReturn product of all elements in\
    \ the list.\n            \n*/\nfloat product_element_float(float[] l) \n{\n\t\
    float product = 1;\n\tlong i;\n\tfor (i = 0; i < l.length; i++) \n\t{\n\t\tproduct\
    \ *= l[i];\n\t}\n\treturn product;\n}\n/*\nReturn sum of all elements in the list.\n\
    \            \n*/", "{\n\tlong max = l[0];\n\tfor (int i = 1; i < l.length; i++)\n\
    \t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\treturn max;\n}", "{\n\tint i;\n\tlong\
    \ max;\n\tmax = l[0];\n\tfor (i = 1; i < l.length; i++)\n\t\tif (l[i] > max)\n\
    \t\t\tmax = l[i];\n\treturn max;\n}\n/*\nReturn minimum element in the list.\n\
    \            \n*/\nlong min_element(long[] l) \n{\n\tint i;\n\tlong min;\n\tmin\
    \ = l[0];\n\tfor (i = 1; i < l.length; i++)\n\t\tif (l[i] < min)\n\t\t\tmin =\
    \ l[i];\n\treturn min;\n}\n/*\nReturn sum of all elements in the list.\n     \
    \       \n*/\nlong sum_element(long[] l) \n{\n\tint i;\n\tlong sum;\n\tsum = 0;\n\
    \tfor (i = 0; i < l.length; i++)\n\t\tsum += l[i];\n\treturn sum;\n}\n/*\nReturn\
    \ product of all elements in the list.\n            \n*/\nlong product_element(long[]\
    \ l) \n{\n\tint i;\n\tlong product;\n\tproduct = 1;\n\tfor (i = 0; i < l.length;\
    \ i++)\n\t\tproduct *= l[i];\n\treturn product;\n}\n/*\nReturn absolute value\
    \ of all elements in the list.\n            \n*/\nlong abs_element(long[] l) \n\
    {\n\tint i;\n\tlong abs;\n\tabs = 0;\n\tfor (i = 0; i < l.length; i++)\n\t\tabs\
    \ = max(abs, l[i]);\n\treturn abs;\n}\n/*\nReturn absolute value of all elements\
    \ in the list.\n            \n*/\ndouble abs_element(double[] l) \n{\n\tint i;\n\
    \tdouble abs;\n\tabs = 0;\n\tfor (i = 0; i < l.length; i++)\n\t\tabs = max(abs,\
    \ l[i]);\n\treturn abs;\n}\n/*\nReturn absolute value of all elements in the list.\n\
    \            \n*/\nfloat abs_element(float[] l) \n{\n\tint i;\n\tfloat abs;\n\t\
    abs = 0;\n\tfor (i = 0; i < l.length; i++)\n\t\tabs = max(abs, l[i]);\n\treturn\
    \ abs;\n}\n/*\nReturn absolute value of all elements in the list.\n          \
    \  \n*/\nlong long abs_element(long long[] l) \n{\n\tint i;\n\tlong long abs;\n\
    \tabs = 0;\n\tfor (i = 0; i < l.length; i++)\n\t\tabs = max(abs, l[i]);\n\treturn\
    \ abs;\n}\n/*\nReturn absolute value of all elements in the list.\n          \
    \  \n*/\ndouble abs_element(double[] l, int size) \n{\n\tint i;\n\tdouble abs;\n\
    \tabs = 0;\n\tfor (i = 0; i < size; i++)\n\t\tabs = max(abs, l[i]);\n\treturn\
    \ abs;\n}\n/*\nReturn absolute value of all elements in the list.\n          \
    \  \n*/\nfloat abs_element(float[] ", "{\n\tlong max = l[0];\n\tfor (int i = 1;\
    \ i < l.length; i++)\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\treturn max;\n\
    }\n/*\nReturn minimum element in the list.\n            \n*/\nlong min_element(long[]\
    \ l) \n{\n\tlong min = l[0];\n\tfor (int i = 1; i < l.length; i++)\n\t\tif (l[i]\
    \ < min)\n\t\t\tmin = l[i];\n\treturn min;\n}\n/*\nReturn sum of all elements\
    \ in the list.\n            \n*/\nlong sum_elements(long[] l) \n{\n\tlong sum\
    \ = 0;\n\tfor (int i = 0; i < l.length; i++)\n\t\tsum += l[i];\n\treturn sum;\n\
    }\n/*\nReturn product of all elements in the list.\n            \n*/\nlong product_elements(long[]\
    \ l) \n{\n\tlong product = 1;\n\tfor (int i = 0; i < l.length; i++)\n\t\tproduct\
    \ *= l[i];\n\treturn product;\n}\n/*\nReturn sum of all elements in the list divided\
    \ by number of elements in the list.\n            \n*/\ndouble sum_elements_divided_by_length(long[]\
    \ l) \n{\n\tdouble sum = 0;\n\tfor (int i = 0; i < l.length; i++)\n\t\tsum +=\
    \ l[i] / l.length;\n\treturn sum;\n}\n/*\nReturn product of all elements in the\
    \ list divided by number of elements in the list.\n            \n*/\ndouble product_elements_divided_by_length(long[]\
    \ l) \n{\n\tdouble product = 1;\n\tfor (int i = 0; i < l.length; i++)\n\t\tproduct\
    \ *= l[i] / l.length;\n\treturn product;\n}\n/*\nReturn sum of all elements in\
    \ the list divided by number of elements in the list.\n            \n*/\ndouble\
    \ sum_elements_divided_by_length(double[] l) \n{\n\tdouble sum = 0;\n\tfor (int\
    \ i = 0; i < l.length; i++)\n\t\tsum += l[i] / l.length;\n\treturn sum;\n}\n/*\n\
    Return product of all elements in the list divided by number of elements in the\
    \ list.\n            \n*/\ndouble product_elements_divided_by_length(double[]\
    \ l) \n{\n\tdouble product = 1;\n\tfor (int i = 0; i < l.length; i++)\n\t\tproduct\
    \ *= l[i] / l.length;\n\treturn product;\n}\n/*\nReturn sum of all elements in\
    \ the list divided by number of elements in the list.\n            \n*/\ndouble\
    \ sum_elements_divided_by_length(float[] l) \n{\n\tdouble sum = 0;\n\tfor (int\
    \ i = 0; i < l.length; i++)\n\t\tsum += l[i] / l.length;\n\treturn sum;\n}\n/*\n\
    Return product of all elements in the list divided by number of elements in the\
    \ list.\n            \n*/\ndouble product_elements_divided_by_length", "{\n\t\
    int i;\n\tlong max;\n\t\n\tmax = l[0];\n\tfor(i=1; i<l.length; i++)\n\t{\n\t\t\
    if(l[i] > max)\n\t\t\tmax = l[i];\n\t}\n\t\n\treturn max;\n}\n/*\nReturn minimum\
    \ element in the list.\n            \n*/\nlong min_element(long[] l) \n{\n\tint\
    \ i;\n\tlong min;\n\t\n\tmin = l[0];\n\tfor(i=1; i<l.length; i++)\n\t{\n\t\tif(l[i]\
    \ < min)\n\t\t\tmin = l[i];\n\t}\n\t\n\treturn min;\n}\n/*\nReturn sum of all\
    \ elements in the list.\n            \n*/\nlong sum_elements(long[] l) \n{\n\t\
    int i;\n\tlong sum;\n\t\n\tsum = 0;\n\tfor(i=1; i<l.length; i++)\n\t\tsum += l[i];\n\
    \t\n\treturn sum;\n}\n/*\nReturn product of all elements in the list.\n      \
    \      \n*/\nlong product_elements(long[] l) \n{\n\tint i;\n\tlong prod;\n\t\n\
    \tprod = 1;\n\tfor(i=1; i<l.length; i++)\n\t\tprod *= l[i];\n\t\n\treturn prod;\n\
    }\n/*\nReturn sum of all elements in the list.\n            \n*/\ndouble sum_elements_double(double[]\
    \ l) \n{\n\tint i;\n\tdouble sum;\n\t\n\tsum = 0;\n\tfor(i=1; i<l.length; i++)\n\
    \t\tsum += l[i];\n\t\n\treturn sum;\n}\n/*\nReturn product of all elements in\
    \ the list.\n            \n*/\ndouble product_elements_double(double[] l) \n{\n\
    \tint i;\n\tdouble prod;\n\t\n\tprod = 1;\n\tfor(i=1; i<l.length; i++)\n\t\tprod\
    \ *= l[i];\n\t\n\treturn prod;\n}\n/*\nReturn sum of all elements in the list.\n\
    \            \n*/\nfloat sum_elements_float(float[] l) \n{\n\tint i;\n\tfloat\
    \ sum;\n\t\n\tsum = 0;\n\tfor(i=1; i<l.length; i++)\n\t\tsum += l[i];\n\t\n\t\
    return sum;\n}\n/*\nReturn product of all elements in the list.\n            \n\
    */\nfloat product_elements_float(float[] l) \n{\n\tint i;\n\tfloat prod;\n\t\n\
    \tprod = 1;\n\tfor(i=1; i<l.length; i++)\n\t\tprod *= l[i];\n\t\n\treturn prod;\n\
    }\n/*\nReturn sum of all elements in the list.\n            \n*/", "{\n\tint i;\n\
    \tlong max = l[0];\n\tfor (i = 1; i < l.length; i++)\n\t\tif (l[i] > max)\n\t\t\
    \tmax = l[i];\n\treturn max;\n}\n/*\nReturn minimum element in the list.\n   \
    \         \n*/\nlong min_element(long[] l) \n{\n\tint i;\n\tlong min = l[0];\n\
    \tfor (i = 1; i < l.length; i++)\n\t\tif (l[i] < min)\n\t\t\tmin = l[i];\n\treturn\
    \ min;\n}\n/*\nReturn sum of all elements in the list.\n            \n*/\nlong\
    \ sum_element(long[] l) \n{\n\tint i;\n\tlong sum = 0;\n\tfor (i = 0; i < l.length;\
    \ i++)\n\t\tsum += l[i];\n\treturn sum;\n}\n/*\nReturn product of all elements\
    \ in the list.\n            \n*/\nlong prod_element(long[] l) \n{\n\tint i;\n\t\
    long prod = 1;\n\tfor (i = 0; i < l.length; i++)\n\t\tprod *= l[i];\n\treturn\
    \ prod;\n}\n/*\nReturn absolute value of all elements in the list.\n         \
    \   \n*/\nlong abs_element(long[] l) \n{\n\tint i;\n\tlong abs = 0;\n\tfor (i\
    \ = 0; i < l.length; i++)\n\t\tabs = max(abs, l[i]);\n\treturn abs;\n}\n/*\nReturn\
    \ absolute value of all elements in the list.\n            \n*/\ndouble abs_element(double[]\
    \ l) \n{\n\tint i;\n\tdouble abs = 0;\n\tfor (i = 0; i < l.length; i++)\n\t\t\
    abs = max(abs, l[i]);\n\treturn abs;\n}\n/*\nReturn absolute value of all elements\
    \ in the list.\n            \n*/\nfloat abs_element(float[] l) \n{\n\tint i;\n\
    \tfloat abs = 0;\n\tfor (i = 0; i < l.length; i++)\n\t\tabs = max(abs, l[i]);\n\
    \treturn abs;\n}\n/*\nReturn absolute value of all elements in the list.\n   \
    \         \n*/", "{\n\tlong max = l[0];\n\tlong i;\n\tfor (i = 1; i < l.length;\
    \ ++i)\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\treturn max;\n}", "{\n\tlong\
    \ max = l[0];\n\tlong i;\n\tfor (i = 1; i < l.length; i++)\n\t\tif (l[i] > max)\n\
    \t\t\tmax = l[i];\n\treturn max;\n}", "{\n\tlong max = l[0];\n\tfor (int i = 1;\
    \ i < l.length; ++i)\n\t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\treturn max;\n\
    }\n/*\nReturn minimum element in the list.\n            \n*/\nlong min_element(long[]\
    \ l) \n{\n\tlong min = l[0];\n\tfor (int i = 1; i < l.length; ++i)\n\t\tif (l[i]\
    \ < min)\n\t\t\tmin = l[i];\n\treturn min;\n}\n/*\nReturn sum of all elements\
    \ in the list.\n            \n*/\nlong sum_elements(long[] l) \n{\n\tlong sum\
    \ = 0;\n\tfor (int i = 0; i < l.length; ++i)\n\t\tsum += l[i];\n\treturn sum;\n\
    }\n/*\nReturn product of all elements in the list.\n            \n*/\nlong product_elements(long[]\
    \ l) \n{\n\tlong prod = 1;\n\tfor (int i = 0; i < l.length; ++i)\n\t\tprod *=\
    \ l[i];\n\treturn prod;\n}\n/*\nReturn sum of all elements in the list.\n    \
    \        \n*/\ndouble sum_elements_double(double[] l) \n{\n\tdouble sum = 0;\n\
    \tfor (int i = 0; i < l.length; ++i)\n\t\tsum += l[i];\n\treturn sum;\n}\n/*\n\
    Return product of all elements in the list.\n            \n*/\ndouble product_elements_double(double[]\
    \ l) \n{\n\tdouble prod = 1;\n\tfor (int i = 0; i < l.length; ++i)\n\t\tprod *=\
    \ l[i];\n\treturn prod;\n}\n/*\nReturn sum of all elements in the list.\n    \
    \        \n*/\nfloat sum_elements_float(float[] l) \n{\n\tfloat sum = 0;\n\tfor\
    \ (int i = 0; i < l.length; ++i)\n\t\tsum += l[i];\n\treturn sum;\n}\n/*\nReturn\
    \ product of all elements in the list.\n            \n*/\nfloat product_elements_float(float[]\
    \ l) \n{\n\tfloat prod = 1;\n\tfor (int i = 0; i < l.length; ++i)\n\t\tprod *=\
    \ l[i];\n\treturn prod;\n}\n/*\nReturn sum of all elements in the list.\n    \
    \        \n*/", "{\n\tlong max = l[0];\n\tfor (int i = 1; i < l.length; ++i)\n\
    \t\tif (l[i] > max)\n\t\t\tmax = l[i];\n\treturn max;\n}\n/*\nReturn minimum element\
    \ in the list.\n            \n*/\nlong min_element(long[] l) \n{\n\tlong min =\
    \ l[0];\n\tfor (int i = 1; i < l.length; ++i)\n\t\tif (l[i] < min)\n\t\t\tmin\
    \ = l[i];\n\treturn min;\n}\n/*\nReturn sum of all elements in the list.\n   \
    \         \n*/\nlong sum_elements(long[] l) \n{\n\tlong sum = 0;\n\tfor (int i\
    \ = 0; i < l.length; ++i)\n\t\tsum += l[i];\n\treturn sum;\n}\n/*\nReturn product\
    \ of all elements in the list.\n            \n*/\nlong product_elements(long[]\
    \ l) \n{\n\tlong prod = 1;\n\tfor (int i = 0; i < l.length; ++i)\n\t\tprod *=\
    \ l[i];\n\treturn prod;\n}\n/*\nReturn mean of all elements in the list.\n   \
    \         \n*/\ndouble mean_elements(long[] l) \n{\n\tlong sum = 0;\n\tfor (int\
    \ i = 0; i < l.length; ++i)\n\t\tsum += l[i];\n\treturn (double)sum / l.length;\n\
    }\n/*\nReturn standard deviation of all elements in the list.\n            \n\
    */\ndouble std_dev_elements(long[] l) \n{\n\tlong sum = 0;\n\tfor (int i = 0;\
    \ i < l.length; ++i)\n\t\tsum += l[i];\n\treturn (double)Math.sqrt((double)l.length\
    \ / sum);\n}\n/*\nReturn sum of all elements in the list.\n            \n*/\n\
    double sum_elements(double[] l) \n{\n\tdouble sum = 0;\n\tfor (int i = 0; i <\
    \ l.length; ++i)\n\t\tsum += l[i];\n\treturn sum;\n}\n/*\nReturn product of all\
    \ elements in the list.\n            \n*/\ndouble product_elements(double[] l)\
    \ \n{\n\tdouble prod = 1;\n\tfor (int i = 0; i < l.length; ++i)\n\t\tprod *= l[i];\n\
    \treturn prod;\n}\n/*\nReturn mean of all elements in the list.\n            \n\
    */\ndouble mean_elements(double[] l) \n{\n\tdouble sum = 0;\n\tfor (int i = 0;\
    \ i < l.length; ++i)\n\t\tsum += l[i];\n\treturn (double)sum / l.length;\n}\n\
    /*\nReturn standard deviation of all elements in the list.\n            \n*/\n\
    double std_dev_elements(double[] l) \n{\n\tdouble sum = 0;\n\tfor (int i = 0;\
    \ i < l.length; ++i)\n\t\tsum += l[i];\n\treturn (double)Math.sqrt((double)l.length\
    \ / sum);\n}\n/*\n"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
