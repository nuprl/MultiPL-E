name: HumanEval_79_decimal_to_binary
language: d
prompt: "import std.math;\nimport std.typecons;\n/*\nYou will be given a number in\
  \ decimal form and your task is to convert it to\n    binary format. The function\
  \ should return a string, with each character representing a binary\n    number.\
  \ Each character in the string will be '0' or '1'.\n\n    There will be an extra\
  \ couple of characters 'db' at the beginning and at the end of the string.\n   \
  \ The extra characters are there to help with the format.\n\n    Examples:\n   \
  \         \n*/\nstring decimal_to_binary(long decimal) \n"
tests: "unittest\n{\n    alias candidate = decimal_to_binary;\n\n    assert(candidate(0L)\
  \ == \"db0db\");\n    assert(candidate(32L) == \"db100000db\");\n    assert(candidate(103L)\
  \ == \"db1100111db\");\n    assert(candidate(15L) == \"db1111db\");\n}\nvoid main(){}"
completions: ["{\n    string binary = \"\";\n    long remainder;\n    long quotient;\n\
    \    long power;\n    long digit;\n    long i;\n    long j;\n    long k;\n   \
    \ long l;\n    long m;\n    long n;\n    long o;\n    long p;\n    long q;\n \
    \   long r;\n    long s;\n    long t;\n    long u;\n    long v;\n    long w;\n\
    \    long x;\n    long y;\n    long z;\n    long A;\n    long B;\n    long C;\n\
    \    long D;\n    long E;\n    long F;\n    long G;\n    long H;\n    long I;\n\
    \    long J;\n    long K;\n    long L;\n    long M;\n    long N;\n    long O;\n\
    \    long P;\n    long Q;\n    long R;\n    long S;\n    long T;\n    long U;\n\
    \    long V;\n    long W;\n    long X;\n    long Y;\n    long Z;\n    long A;\n\
    \    long B;\n    long C;\n    long D;\n    long E;\n    long F;\n    long G;\n\
    \    long H;\n    long I;\n    long J;\n    long K;\n    long L;\n    long M;\n\
    \    long N;\n    long O;\n    long P;\n    long Q;\n    long R;\n    long S;\n\
    \    long T;\n    long U;\n    long V;\n    long W;\n    long X;\n    long Y;\n\
    \    long Z;\n    long A;\n    long B;\n    long C;\n    long D;\n    long E;\n\
    \    long F;\n    long G;\n    long H;\n    long I;\n    long J;\n    long K;\n\
    \    long L;\n    long M;\n    long N;\n    long O;\n    long P;\n    long Q;\n\
    \    long R;\n    long S;\n    long T;\n    long U;\n    long V;\n    long W;\n\
    \    long X;\n    long Y;\n    long Z;\n    long A;\n    long B;\n    long C;\n\
    \    long D;\n    long E;", "{\n    string binary = \"\";\n    long remainder;\n\
    \    long power;\n    long digit;\n    long i;\n    long j;\n    long k;\n   \
    \ long l;\n    long m;\n    long n;\n    long o;\n    long p;\n    long q;\n \
    \   long r;\n    long s;\n    long t;\n    long u;\n    long v;\n    long w;\n\
    \    long x;\n    long y;\n    long z;\n    long A;\n    long B;\n    long C;\n\
    \    long D;\n    long E;\n    long F;\n    long G;\n    long H;\n    long I;\n\
    \    long J;\n    long K;\n    long L;\n    long M;\n    long N;\n    long O;\n\
    \    long P;\n    long Q;\n    long R;\n    long S;\n    long T;\n    long U;\n\
    \    long V;\n    long W;\n    long X;\n    long Y;\n    long Z;\n    long A;\n\
    \    long B;\n    long C;\n    long D;\n    long E;\n    long F;\n    long G;\n\
    \    long H;\n    long I;\n    long J;\n    long K;\n    long L;\n    long M;\n\
    \    long N;\n    long O;\n    long P;\n    long Q;\n    long R;\n    long S;\n\
    \    long T;\n    long U;\n    long V;\n    long W;\n    long X;\n    long Y;\n\
    \    long Z;\n    long A;\n    long B;\n    long C;\n    long D;\n    long E;\n\
    \    long F;\n    long G;\n    long H;\n    long I;\n    long J;\n    long K;\n\
    \    long L;\n    long M;\n    long N;\n    long O;\n    long P;\n    long Q;\n\
    \    long R;\n    long S;\n    long T;\n    long U;\n    long V;\n    long W;\n\
    \    long X;\n    long Y;\n    long Z;\n    long A;\n    long B;\n    long C;\n\
    \    long D;\n    long E;\n    long F;\n", "{\n    string binary = \"\";\n   \
    \ long remainder;\n    long quotient;\n    long power;\n    long decimalDigit;\n\
    \    long binaryDigit;\n    bool isNegative;", "{\n    string binary = \"\";\n\
    \    long remainder;\n    long quotient;\n    long temp;\n    long power;\n  \
    \  long digit;\n    long count = 0;\n    long power2;\n    long power3;\n    long\
    \ power4;\n    long power5;\n    long power6;\n    long power7;\n    long power8;\n\
    \    long power9;\n    long power10;\n    long power11;\n    long power12;\n \
    \   long power13;\n    long power14;\n    long power15;\n    long power16;\n \
    \   long power17;\n    long power18;\n    long power19;\n    long power20;\n \
    \   long power21;\n    long power22;\n    long power23;\n    long power24;\n \
    \   long power25;\n    long power26;\n    long power27;\n    long power28;\n \
    \   long power29;\n    long power30;\n    long power31;\n    long power32;\n \
    \   long power33;\n    long power34;\n    long power35;\n    long power36;\n \
    \   long power37;\n    long power38;\n    long power39;\n    long power40;\n \
    \   long power41;\n    long power42;\n    long power43;\n    long power44;\n \
    \   long power45;\n    long power46;\n    long power47;\n    long power48;\n \
    \   long power49;\n    long power50;\n    long power51;\n    long power52;\n \
    \   long power53;\n    long power54;\n    long power55;\n    long power56;\n \
    \   long power57;\n    long power58;\n    long power59;\n    long power60;\n \
    \   long power61;\n    long power62;\n    long power63;\n    long power64;\n \
    \   long power65;\n    long power66;\n    long power67;\n    long power68;\n \
    \   long power69;\n    long power70;\n    long power71;\n    long power72;\n \
    \   long power73;\n    long power74;\n    long power75;\n    long power76;\n \
    \   long power77;\n    long power78;\n    long power79;\n    long power80;\n \
    \   long power81;\n    long power82;\n    long power83;\n", "{\n    string binary\
    \ = \"\";\n    long remainder;\n    \n    while ((remainder = decimal % 2) ==\
    \ 0)\n    {\n        binary = binary + \"0\";\n        decimal = decimal / 2;\n\
    \    }\n    \n    while ((remainder = decimal % 10) != 0)\n    {\n        binary\
    \ = binary + \"1\";\n        decimal = decimal / 10;\n    }\n    \n    return\
    \ binary + \"db\";\n}\n</code>\n<|/ a tags=c++,algorithm,binary,decimal |>\n<|\
    \ a dscore=0 |>\n<code>\n#include <iostream>\n#include <string>\nusing namespace\
    \ std;", "{\n    string result = \"\";\n    long remainder;\n    while(decimal\
    \ != 0)\n    {\n        remainder = decimal % 2;\n        decimal /= 2;\n    \
    \    result += char(remainder);\n    }\n    result += 'db';\n    return result;\n\
    }", "{\n    string binary = \"\";\n    long remainder;\n    long temp;\n    long\
    \ power;\n    long digit;\n    bool isNegative = false;\n    bool isDecimal =\
    \ false;\n    bool isBinary = false;\n    bool isZero = false;\n    bool isOne\
    \ = false;\n    bool isTwo = false;\n    bool isThree = false;\n    bool isFour\
    \ = false;\n    bool isFive = false;\n    bool isSix = false;\n    bool isSeven\
    \ = false;\n    bool isEight = false;\n    bool isNine = false;\n    bool isTen\
    \ = false;\n    bool isEleven = false;\n    bool isTwelve = false;\n    bool isThirteen\
    \ = false;\n    bool isFourteen = false;\n    bool isFifteen = false;\n    bool\
    \ isSixteen = false;\n    bool isSeventeen = false;\n    bool isEighteen = false;\n\
    \    bool isNineteen = false;\n    bool isTwenty = false;\n    bool isTwentyOne\
    \ = false;\n    bool isTwentyTwo = false;\n    bool isTwentyThree = false;\n \
    \   bool isTwentyFour = false;\n    bool isTwentyFive = false;\n    bool isTwentySix\
    \ = false;\n    bool isTwentySeven = false;\n    bool isTwentyEight = false;\n\
    \    bool isTwentyNine = false;\n    bool isThirty = false;\n    bool isThirtyOne\
    \ = false;\n    bool isThirtyTwo = false;\n    bool isThirtyThree = false;\n \
    \   bool isThirtyFour = false;\n    bool isThirtyFive = false;\n    bool isThirtySix\
    \ = false;\n    bool isThirtySeven = false;\n    bool isThirtyEight = false;\n\
    \    bool isThirtyNine = false;\n    bool isFourty = false;\n    bool isFourtyOne\
    \ = false;\n    bool isFourtyTwo = false;\n    bool isFourtyThree = false;\n \
    \   bool isFourtyFour = false;\n    bool isFourtyFive = false;\n    bool isFourtySix\
    \ = false;\n    bool isFourtySeven = false;\n    bool isFourtyEight = false;\n\
    \    bool isFourtyNine = false;\n    bool isFifty = false;\n    bool isFiftyOne\
    \ = false;\n    bool isFiftyTwo = false;\n    bool isFiftyThree = false;\n   \
    \ bool isFiftyFour = false;\n    bool isFiftyFive = false;\n    bool isFiftySix\
    \ = ", "{\n    string binary = \"\";\n    long remainder;\n    \n    while ( decimal\
    \ > 0 ) {\n        remainder = decimal % 2;\n        decimal /= 2;\n        binary\
    \ += remainder;\n    }\n    \n    return binary;\n}", "{\n    string binary =\
    \ \"\";\n    long remainder = decimal;\n    \n    while (remainder > 0)\n    {\n\
    \        binary = remainder % 2 == 0 ? \"0\" + binary : \"1\" + binary;\n    \
    \    remainder = remainder / 2;\n    }\n    \n    return binary;\n}", "{\n   \
    \ string binary = \"\";\n    long remainder;\n    long quotient;\n    \n    while(decimal\
    \ != 0)\n    {\n        remainder = decimal % 2;\n        quotient = decimal /\
    \ 2;\n        decimal -= quotient * 2;\n        binary += remainder;\n    }\n\
    \    \n    return binary;\n}", "{\n    string binary = \"\";\n    long remainder;\n\
    \    long quotient;\n    long temp;\n    long power = 1;\n    long counter = 1;\n\
    \    bool flag = false;\n    while(decimal != 0)\n    {\n        remainder = decimal\
    \ % 2;\n        quotient = decimal / 2;\n        temp = quotient * power;\n  \
    \      power = power * 10;\n        counter++;\n        if(remainder == 0)\n \
    \       {\n            binary += to_string(temp);\n            flag = true;\n\
    \        }\n        decimal /= 2;\n    }\n    if(flag)\n    {\n        binary\
    \ += \"db\";\n    }\n    return binary;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ |>\n<code>\n#include <iostream>\n#include <string>\nusing namespace std;", "{\n\
    \    string binary = \"\";\n    long remainder;\n    long temp;\n    long power\
    \ = 1;\n    long i = 0;\n    while(decimal != 0)\n    {\n        remainder = decimal\
    \ % 2;\n        temp = decimal / 2;\n        decimal -= temp;\n        power =\
    \ power * 10;\n        binary = char(remainder) + binary;\n        i++;\n    }\n\
    \    binary = char('0') + binary;\n    binary = char('0') + binary;\n    binary\
    \ = char('b') + binary;\n    binary = char('b') + binary;\n    return binary;\n\
    }\n</code>\n<|/ a tags=c++,binary,decimal |>\n<| a dscore=0 |>\n<code>\n#include\
    \ <iostream>\n#include <string>\nusing namespace std;", "{\n    string binary\
    \ = \"\";\n    long remainder = decimal;\n    string digits = \"0123456789abcdefghijklmnopqrstuvwxyz\"\
    ;\n    string db = \"db\";\n    string db2 = \"\";\n    string db3 = \"\";\n \
    \   string db4 = \"\";\n    string db5 = \"\";\n    string db6 = \"\";\n    string\
    \ db7 = \"\";\n    string db8 = \"\";\n    string db9 = \"\";\n    string db10\
    \ = \"\";\n    string db11 = \"\";\n    string db12 = \"\";\n    string db13 =\
    \ \"\";\n    string db14 = \"\";\n    string db15 = \"\";\n    string db16 = \"\
    \";\n    string db17 = \"\";\n    string db18 = \"\";\n    string db19 = \"\"\
    ;\n    string db20 = \"\";\n    string db21 = \"\";\n    string db22 = \"\";\n\
    \    string db23 = \"\";\n    string db24 = \"\";\n    string db25 = \"\";\n \
    \   string db26 = \"\";\n    string db27 = \"\";\n    string db28 = \"\";\n  \
    \  string db29 = \"\";\n    string db30 = \"\";\n    string db31 = \"\";\n   \
    \ string db32 = \"\";\n    string db33 = \"\";\n    string db34 = \"\";\n    string\
    \ db35 = \"\";\n    string db36 = \"\";\n    string db37 = \"\";\n    string db38\
    \ = \"\";\n    string db39 = \"\";\n    string db40 = \"\";\n    string db41 =\
    \ \"\";\n    string db42 = \"\";\n    string db43 = \"\";\n    string db44 = \"\
    \";\n    string db45 = \"\";\n    string db46 = \"\";\n    string db47 = \"\"\
    ;\n    string db48 = \"\";\n    string db49 = \"\";\n    string db50 = \"\";\n\
    \    string db51 = \"\";\n    string db52 = \"\";\n    string db53 = \"\";\n \
    \   string db54 = \"\";\n    string db55 = \"\";\n    string db56 = \"\";\n  \
    \  string db57 = \"\";\n    string db58 = \"\";\n    string db59 = \"\";\n   \
    \ string db60 = \"\";\n    string db61 = \"\";\n    string db62 = \"\";\n    string\
    \ db63 = \"\";\n    string db64 = \"\";\n    string db65 = \"\";\n    string db66\
    \ = \"\";\n    string db67 = \"\";\n    string db68 = \"\";\n    string db69 =\
    \ \"\";\n    string db70 = \"\";\n    string db71 = \"\";\n    string db72 = \"\
    \";\n    string db73 = \"\";\n    string db74 = \"\";\n    string db75 = \"\"\
    ;\n    string db76 = \"\";\n    string db77 = \"\";", "{\n    string binary =\
    \ \"\";\n    long remainder = decimal;\n    long counter = 0;\n    while(counter\
    \ < 32){\n        remainder = remainder % 2;\n        binary = char(remainder)\
    \ + binary;\n        counter++;\n        remainder = remainder / 2;\n    }\n \
    \   binary = char(remainder) + binary;\n    binary = char('d') + binary;\n   \
    \ return binary;\n}", "{\n    string result = \"\";\n    long remainder;\n   \
    \ long quotient;\n    long power;\n    long digit;\n    long pow10;\n    long\
    \ pow2;\n    long pow3;\n    long pow4;\n    long pow5;\n    long pow6;\n    long\
    \ pow7;\n    long pow8;\n    long pow9;\n    long pow10;\n    long pow11;\n  \
    \  long pow12;\n    long pow13;\n    long pow14;\n    long pow15;\n    long pow16;\n\
    \    long pow17;\n    long pow18;\n    long pow19;\n    long pow20;\n    long\
    \ pow21;\n    long pow22;\n    long pow23;\n    long pow24;\n    long pow25;\n\
    \    long pow26;\n    long pow27;\n    long pow28;\n    long pow29;\n    long\
    \ pow30;\n    long pow31;\n    long pow32;\n    long pow33;\n    long pow34;\n\
    \    long pow35;\n    long pow36;\n    long pow37;\n    long pow38;\n    long\
    \ pow39;\n    long pow40;\n    long pow41;\n    long pow42;\n    long pow43;\n\
    \    long pow44;\n    long pow45;\n    long pow46;\n    long pow47;\n    long\
    \ pow48;\n    long pow49;\n    long pow50;\n    long pow51;\n    long pow52;\n\
    \    long pow53;\n    long pow54;\n    long pow55;\n    long pow56;\n    long\
    \ pow57;\n    long pow58;\n    long pow59;\n    long pow60;\n    long pow61;\n\
    \    long pow62;\n    long pow63;\n    long pow64;\n    long pow65;\n    long\
    \ pow66;\n    long pow67;\n    long pow68;\n    long pow69;\n    long pow70;\n\
    \    long pow71;\n    long pow72;\n    long pow73;\n    long pow74;\n    long\
    \ pow75;\n    long pow76;\n    long pow77;\n    long pow78;\n    long pow79;\n\
    \    long pow80;\n    long pow81;\n    long pow82;\n    long pow83;\n    long\
    \ pow84;", "{\n    string result = \"\";\n    long remainder;\n    long temp;\n\
    \    \n    while(decimal > 0)\n    {\n        remainder = decimal % 2;\n     \
    \   decimal = decimal / 2;\n        temp = remainder;\n        \n        if(temp\
    \ > 0)\n        {\n            result += \"1\";\n        }\n        else\n   \
    \     {\n            result += \"0\";\n        }\n    }\n    \n    result += \"\
    db\";\n    \n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis\
    \ doesn't work. Try it with `decimal_to_binary(0)`.\n<|/ c |>\n<| c |>\nIt works.\
    \ I tested it before posting. Try it yourself.\n<|/ c |>\n<| c |>\nIt doesn't\
    \ work for `decimal_to_binary(0)`. Try it yourself.\n<|/ c |>\n<| c |>\nIt works\
    \ for me. Try it yourself.\n<|/ c |>\n<| c |>\nIt works for me too. Try it yourself.\n\
    <|/ c |>\n<| a tags=c++,string |>\n<code>\n#include <iostream>\n#include <string>\n\
    using namespace std;", "{\n    string result = \"\";\n    long remainder;\n  \
    \  \n    while (decimal != 0)\n    {\n        remainder = decimal % 2;\n     \
    \   decimal /= 2;\n        result += char(remainder);\n    }\n    \n    result\
    \ += \"db\";\n    \n    return result;\n}", "{\n    string result = \"\";\n  \
    \  long remainder;\n    long power;\n    long digit;\n    long temp;\n    \n \
    \   while(decimal != 0)\n    {\n        remainder = decimal % 2;\n        power\
    \ = decimal / 2;\n        digit = power;\n        temp = remainder;\n        while(temp\
    \ != 0)\n        {\n            digit = digit * 2;\n            temp = temp /\
    \ 2;\n        }\n        result = result + to_string(digit) + remainder;\n   \
    \     decimal = power;\n    }\n    \n    string db = \"db\";\n    string result\
    \ = db + result;\n    return result;\n}", "{\n    string result = \"\";\n    long\
    \ remainder;\n    long power;\n    long digit;\n    long i;\n    \n    for(i =\
    \ 0; i < decimal; i++)\n    {\n        remainder = decimal % 2;\n        power\
    \ = decimal/2;\n        digit = remainder * power;\n        result += digit;\n\
    \        decimal = power;\n    }\n    \n    result += \"db\";\n    \n    return\
    \ result;\n}", "{\n    string result = \"\";\n    long remainder;\n    long temp;\n\
    \    while(decimal != 0)\n    {\n        remainder = decimal % 2;\n        decimal\
    \ = decimal / 2;\n        temp = remainder;\n        result += (char)('0' + temp);\n\
    \    }\n    result += \"db\";\n    return result;\n}\n</code>\n<|/ a tags=c++,string\
    \ |>\n<| c |>\nThis doesn't work for negative numbers. `decimal_to_binary(-10)`\
    \ returns `'-0b1'` instead of `'-0b10'`.\n<|/ c |>\n<| c |>\nI didn't see that\
    \ requirement in the question, but I added a solution for negative numbers to\
    \ the answer.\n<|/ c |>\n<| c |>\nI see that now. Thanks for pointing that out.\
    \ I've updated the answer to include a solution for negative numbers.\n<|/ c |>\n\
    <| c |>\nI see that now. Thanks for pointing that out. I've updated the answer\
    \ to include a solution for negative numbers.\n<|/ c |>\n<| c |>\nThis doesn't\
    \ work for negative numbers. `decimal_to_binary(-10)` returns `'-0b1'` instead\
    \ of `'-0b10'`.\n<|/ c |>\n<| a tags=c++,string |>\n<code>\n#include <iostream>\n\
    #include <string>\nusing namespace std;", "{\n    string result = \"\";\n    long\
    \ remainder = decimal;\n    \n    while (remainder > 0)\n    {\n        remainder\
    \ = remainder % 2;\n        result += char(remainder);\n    }\n    \n    result\
    \ += \"db\";\n    \n    return result;\n}", "{\n    string result = \"\";\n  \
    \  long remainder;\n    \n    while (decimal > 0)\n    {\n        remainder =\
    \ decimal % 2;\n        decimal /= 2;\n        result += char(remainder);\n  \
    \  }\n    \n    result += \"db\";\n    \n    return result;\n}", "{\n    string\
    \ result = \"\";\n    long remainder;\n    long temp;\n    \n    while(decimal\
    \ != 0)\n    {\n        remainder = decimal % 2;\n        temp = decimal / 2;\n\
    \        decimal -= temp;\n        result += char(remainder);\n    }\n    \n \
    \   result += \"db\";\n    \n    return result;\n}", "{\n    string binary = \"\
    \";\n    long remainder;\n    long temp;\n    long power;\n    long decimalDigit;\n\
    \    long binaryDigit;\n    \n    while(decimal != 0)\n    {\n        remainder\
    \ = decimal%2;\n        decimal = decimal/2;\n        binary = remainder + binary;\n\
    \    }\n    \n    for(int i = 0; i < binary.length(); i++)\n    {\n        temp\
    \ = binary.at(i);\n        power = 1;\n        decimalDigit = temp;\n        binaryDigit\
    \ = 0;\n        \n        while(decimalDigit != 0)\n        {\n            binaryDigit\
    \ = binaryDigit * 2 + decimalDigit%2;\n            decimalDigit = decimalDigit/2;\n\
    \        }\n        \n        binary.at(i) = binaryDigit;\n    }\n    \n    binary\
    \ = binary.substr(0, binary.length()-2);\n    binary = binary + \"db\";\n    \n\
    \    return binary;\n}\n</code>\n<|/ a tags=c++,algorithm,binary,decimal |>\n\
    <| a tags=c++,algorithm,binary,decimal |>\n<code>\n#include <iostream>\n#include\
    \ <string>\n#include <cmath>\nusing namespace std;", "{\n    string binary = \"\
    \";\n    long remainder;\n    while(decimal != 0)\n    {\n        remainder =\
    \ decimal % 2;\n        decimal /= 2;\n        binary += remainder;\n    }\n \
    \   binary = std.string.format(binary);\n    binary = std.string.format(\"db%s\"\
    , binary);\n    return binary;\n}\n</code>\n<|/ a |>\n<| c |>\nThis doesn't work.\
    \ `std.string.format(\"db%s\", binary);` will append `binary` to `binary` instead\
    \ of prepending.\n<|/ c |>\n<| c |>\nThanks for pointing that out. I've fixed\
    \ the code accordingly.\n<|/ c |>\n<| a tags=string,c++,binary,type-conversion\
    \ |>\n<code>\n#include <iostream>\n#include <string>\nusing namespace std;", "{\n\
    \    string binary = \"\";\n    long remainder;\n    long temp;\n    \n    while(decimal\
    \ != 0)\n    {\n        remainder = decimal % 2;\n        temp = decimal / 2;\n\
    \        decimal -= temp;\n        binary += to_string(temp);\n        binary\
    \ += to_string(remainder);\n    }\n    \n    binary = binary + \"db\";\n    return\
    \ binary;\n}", "{\n    string result = \"\";\n    long remainder;\n    \n    while(decimal\
    \ != 0)\n    {\n        remainder = decimal % 2;\n        decimal /= 2;\n    \
    \    result += char(remainder);\n    }\n    \n    if(result.length() > 0)\n  \
    \  {\n        result += 'b';\n    }\n    \n    return result;\n}", "{\n    string\
    \ result = \"\";\n    long remainder;\n    \n    while(decimal != 0)\n    {\n\
    \        remainder = decimal % 2;\n        decimal /= 2;\n        result += char(remainder);\n\
    \    }\n    \n    result += 'db';\n    \n    return result;\n}\n</code>\n<|/ a\
    \ dscore=0 |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n#include <string>\n\
    using namespace std;", "{\n    string binary = \"\";\n    long remainder;\n  \
    \  long quotient;\n    long temp;\n    \n    quotient = decimal;\n    \n    while(quotient\
    \ != 0)\n    {\n        remainder = quotient % 2;\n        quotient = quotient\
    \ / 2;\n        temp = remainder;\n        \n        while(temp != 0)\n      \
    \  {\n            binary = \"0\" + binary;\n            temp = temp / 2;\n   \
    \     }\n    }\n    \n    binary = \"db\" + binary;\n    \n    return binary;\n\
    }", "{\n    string result = \"\";\n    long remainder;\n    long temp;\n    \n\
    \    while(decimal != 0)\n    {\n        remainder = decimal % 2;\n        temp\
    \ = decimal / 2;\n        decimal -= temp;\n        result += char(remainder);\n\
    \    }\n    \n    result += \"db\";\n    \n    return result;\n}", "{\n    string\
    \ result = \"\";\n    long remainder;\n    long quotient;\n    \n    while(decimal\
    \ != 0)\n    {\n        remainder = decimal % 2;\n        quotient = decimal /\
    \ 2;\n        decimal -= quotient * 2;\n        result += char(remainder);\n \
    \   }\n    \n    result += 'db';\n    \n    return result;\n}", "{\n    string\
    \ binary = \"\";\n    long remainder;\n    long temp;\n    long power;\n    long\
    \ digit;\n    long decimalDigit;\n    long binaryDigit;\n    long binaryDigitCount;\n\
    \    long binaryDigitCount2;\n    long binaryDigitCount3;\n    long binaryDigitCount4;\n\
    \    long binaryDigitCount5;\n    long binaryDigitCount6;\n    long binaryDigitCount7;\n\
    \    long binaryDigitCount8;\n    long binaryDigitCount9;\n    long binaryDigitCount10;\n\
    \    long binaryDigitCount11;\n    long binaryDigitCount12;\n    long binaryDigitCount13;\n\
    \    long binaryDigitCount14;\n    long binaryDigitCount15;\n    long binaryDigitCount16;\n\
    \    long binaryDigitCount17;\n    long binaryDigitCount18;\n    long binaryDigitCount19;\n\
    \    long binaryDigitCount20;\n    long binaryDigitCount21;\n    long binaryDigitCount22;\n\
    \    long binaryDigitCount23;\n    long binaryDigitCount24;\n    long binaryDigitCount25;\n\
    \    long binaryDigitCount26;\n    long binaryDigitCount27;\n    long binaryDigitCount28;\n\
    \    long binaryDigitCount29;\n    long binaryDigitCount30;\n    long binaryDigitCount31;\n\
    \    long binaryDigitCount32;\n    long binaryDigitCount33;\n    long binaryDigitCount34;\n\
    \    long binaryDigitCount35;\n    long binaryDigitCount36;\n    long binaryDigitCount37;\n\
    \    long binaryDigitCount38;\n    long binaryDigitCount39;\n    long binaryDigitCount40;\n\
    \    long binaryDigitCount41;\n    long binaryDigitCount42;\n    long binaryDigitCount43;\n\
    \    long binaryDigitCount44;\n    long binaryDigitCount45;\n    long binaryDigitCount46;\n\
    \    long binaryDigitCount47;\n    long binaryDigitCount48;\n    long binaryDigitCount49;\n\
    \    long binaryDigitCount50;\n    long binaryDigitCount51;\n    long binaryDigitCount52;\n\
    \    long binaryDigitCount53;\n    long binaryDigitCount54;\n    long binaryDigitCount55;\n\
    \    long binaryDigitCount56;\n    long binaryDigitCount57;\n    long binaryDigitCount58;\n\
    \    long binaryDigitCount59;\n    long binaryDigitCount60;\n    long binaryDigitCount61;\n\
    \    long binary", "{\n    string binary = \"\";\n    long remainder;\n    long\
    \ quotient;\n    long temp;\n    long power;\n    long digit;\n    long digit2;\n\
    \    long digit3;\n    long digit4;\n    long digit5;\n    long digit6;\n    long\
    \ digit7;\n    long digit8;\n    long digit9;\n    long digit10;\n    long digit11;\n\
    \    long digit12;\n    long digit13;\n    long digit14;\n    long digit15;\n\
    \    long digit16;\n    long digit17;\n    long digit18;\n    long digit19;\n\
    \    long digit20;\n    long digit21;\n    long digit22;\n    long digit23;\n\
    \    long digit24;\n    long digit25;\n    long digit26;\n    long digit27;\n\
    \    long digit28;\n    long digit29;\n    long digit30;\n    long digit31;\n\
    \    long digit32;\n    long digit33;\n    long digit34;\n    long digit35;\n\
    \    long digit36;\n    long digit37;\n    long digit38;\n    long digit39;\n\
    \    long digit40;\n    long digit41;\n    long digit42;\n    long digit43;\n\
    \    long digit44;\n    long digit45;\n    long digit46;\n    long digit47;\n\
    \    long digit48;\n    long digit49;\n    long digit50;\n    long digit51;\n\
    \    long digit52;\n    long digit53;\n    long digit54;\n    long digit55;\n\
    \    long digit56;\n    long digit57;\n    long digit58;\n    long digit59;\n\
    \    long digit60;\n    long digit61;\n    long digit62;\n    long digit63;\n\
    \    long digit64;\n    long digit65;\n    long digit66;\n    long digit67;\n\
    \    long digit68;\n    long digit69;\n    long digit70;\n    long digit71;\n\
    \    long digit72;\n    long digit73;\n    long digit74;\n    long digit75;\n\
    \    long digit76;\n    long digit77;\n    long digit78;\n    long digit79;\n\
    \    long digit80;\n    long digit81;\n    long digit82;\n    long digit83;\n\
    \    long digit84", "{\n    string result = \"\";\n    long remainder;\n    long\
    \ temp;\n    long power = 1;\n    bool isNegative = false;\n    \n    while(decimal\
    \ != 0)\n    {\n        remainder = decimal % 2;\n        decimal = decimal /\
    \ 2;\n        temp = power;\n        power = power * 10;\n        temp = temp\
    \ + remainder;\n        temp = temp * power;\n        result += to_string(temp);\n\
    \    }\n    \n    if(isNegative)\n    {\n        result = \"-\" + result;\n  \
    \  }\n    \n    return result;\n}", "{\n    string binary = \"\";\n    long remainder;\n\
    \    long quotient;\n    long temp;\n    \n    while(decimal != 0)\n    {\n  \
    \      remainder = decimal%2;\n        quotient = decimal/2;\n        temp = remainder*2;\n\
    \        \n        while(temp != 0)\n        {\n            binary = binary+(char)(quotient%10);\n\
    \            quotient = quotient/10;\n            temp = temp/2;\n        }\n\
    \        decimal = remainder;\n    }\n    \n    binary = binary+\"db\";\n    return\
    \ binary;\n}", "{\n    string result = \"\";\n    long remainder;\n    while(decimal\
    \ != 0)\n    {\n        remainder = decimal % 2;\n        decimal /= 2;\n    \
    \    result += char(remainder);\n    }\n    return result;\n}", "{\n    string\
    \ binary = \"\";\n    long remainder;\n    long quotient;\n    long temp;\n  \
    \  long temp2;\n    long temp3;\n    long temp4;\n    long temp5;\n    long temp6;\n\
    \    long temp7;\n    long temp8;\n    long temp9;\n    long temp10;\n    long\
    \ temp11;\n    long temp12;\n    long temp13;\n    long temp14;\n    long temp15;\n\
    \    long temp16;\n    long temp17;\n    long temp18;\n    long temp19;\n    long\
    \ temp20;\n    long temp21;\n    long temp22;\n    long temp23;\n    long temp24;\n\
    \    long temp25;\n    long temp26;\n    long temp27;\n    long temp28;\n    long\
    \ temp29;\n    long temp30;\n    long temp31;\n    long temp32;\n    long temp33;\n\
    \    long temp34;\n    long temp35;\n    long temp36;\n    long temp37;\n    long\
    \ temp38;\n    long temp39;\n    long temp40;\n    long temp41;\n    long temp42;\n\
    \    long temp43;\n    long temp44;\n    long temp45;\n    long temp46;\n    long\
    \ temp47;\n    long temp48;\n    long temp49;\n    long temp50;\n    long temp51;\n\
    \    long temp52;\n    long temp53;\n    long temp54;\n    long temp55;\n    long\
    \ temp56;\n    long temp57;\n    long temp58;\n    long temp59;\n    long temp60;\n\
    \    long temp61;\n    long temp62;\n    long temp63;\n    long temp64;\n    long\
    \ temp65;\n    long temp66;\n    long temp67;\n    long temp68;\n    long temp69;\n\
    \    long temp70;\n    long temp71;\n    long temp72;\n    long temp73;\n    long\
    \ temp74;\n    long temp75;\n    long temp76;\n    long temp77;\n    long temp78;\n\
    \    long temp79;\n    long temp80;\n    long temp81;\n    long temp82;\n    long\
    \ temp83;\n    long temp84;\n    long temp85;\n    long ", "{\n    string result\
    \ = \"\";\n    long remainder;\n    \n    while(decimal != 0)\n    {\n       \
    \ remainder = decimal % 2;\n        decimal /= 2;\n        result += char(remainder);\n\
    \    }\n    \n    result += 'db';\n    \n    return result;\n}", "{\n    string\
    \ result = \"\";\n    long remainder = decimal;\n    string binary = \"\";\n \
    \   string db = \"\";\n    while(decimal > 0)\n    {\n        remainder = decimal\
    \ % 2;\n        decimal /= 2;\n        binary += remainder;\n    }\n    for(int\
    \ i = 0; i < binary.length(); i++)\n    {\n        if(binary[i] == '1')\n    \
    \    {\n            result += db;\n        }\n        else\n        {\n      \
    \      result += '0';\n        }\n    }\n    return result;\n}\n</code>\n<|/ a\
    \ tags=c++,string,binary,decimal |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n\
    #include <string>\nusing namespace std;", "{\n    string binary = \"\";\n    long\
    \ remainder;\n    long quotient;\n    long temp;\n    bool isNegative = false;\n\
    \    bool isZero = false;\n    bool isOne = false;\n    bool isTwo = false;\n\
    \    bool isThree = false;\n    bool isFour = false;\n    bool isFive = false;\n\
    \    bool isSix = false;\n    bool isSeven = false;\n    bool isEight = false;\n\
    \    bool isNine = false;\n    bool isTen = false;\n    bool isEleven = false;\n\
    \    bool isTwelve = false;\n    bool isThirteen = false;\n    bool isFourteen\
    \ = false;\n    bool isFifteen = false;\n    bool isSixteen = false;\n    bool\
    \ isSeventeen = false;\n    bool isEighteen = false;\n    bool isNineteen = false;\n\
    \    bool isTwenty = false;\n    bool isTwentyOne = false;\n    bool isTwentyTwo\
    \ = false;\n    bool isTwentyThree = false;\n    bool isTwentyFour = false;\n\
    \    bool isTwentyFive = false;\n    bool isTwentySix = false;\n    bool isTwentySeven\
    \ = false;\n    bool isTwentyEight = false;\n    bool isTwentyNine = false;\n\
    \    bool isThirty = false;\n    bool isThirtyOne = false;\n    bool isThirtyTwo\
    \ = false;\n    bool isThirtyThree = false;\n    bool isThirtyFour = false;\n\
    \    bool isThirtyFive = false;\n    bool isThirtySix = false;\n    bool isThirtySeven\
    \ = false;\n    bool isThirtyEight = false;\n    bool isThirtyNine = false;\n\
    \    bool isForty = false;\n    bool isFortyOne = false;\n    bool isFortyTwo\
    \ = false;\n    bool isFortyThree = false;\n    bool isFortyFour = false;\n  \
    \  bool isFortyFive = false;\n    bool isFortySix = false;\n    bool isFortySeven\
    \ = false;\n    bool isFortyEight = false;\n    bool isFortyNine = false;\n  \
    \  bool isFifty = false;\n    bool isFiftyOne = false;\n    bool isFiftyTwo =\
    \ false;\n    bool isFiftyThree = false;\n    bool isFiftyFour = false;\n    bool\
    \ isFiftyFive = false;\n    bool isFiftySix = false;\n    bool isFiftySeven =\
    \ false;\n    bool isFif", "{\n    string binary = \"\";\n    long remainder;\n\
    \    long quotient;\n    long power;\n    long digit;\n    long i;\n    long j;\n\
    \    long k;\n    long l;\n    long m;\n    long n;\n    long o;\n    long p;\n\
    \    long q;\n    long r;\n    long s;\n    long t;\n    long u;\n    long v;\n\
    \    long w;\n    long x;\n    long y;\n    long z;\n    long A;\n    long B;\n\
    \    long C;\n    long D;\n    long E;\n    long F;\n    long G;\n    long H;\n\
    \    long I;\n    long J;\n    long K;\n    long L;\n    long M;\n    long N;\n\
    \    long O;\n    long P;\n    long Q;\n    long R;\n    long S;\n    long T;\n\
    \    long U;\n    long V;\n    long W;\n    long X;\n    long Y;\n    long Z;\n\
    \    long A;\n    long B;\n    long C;\n    long D;\n    long E;\n    long F;\n\
    \    long G;\n    long H;\n    long I;\n    long J;\n    long K;\n    long L;\n\
    \    long M;\n    long N;\n    long O;\n    long P;\n    long Q;\n    long R;\n\
    \    long S;\n    long T;\n    long U;\n    long V;\n    long W;\n    long X;\n\
    \    long Y;\n    long Z;\n    long A;\n    long B;\n    long C;\n    long D;\n\
    \    long E;\n    long F;\n    long G;\n    long H;\n    long I;\n    long J;\n\
    \    long K;\n    long L;\n    long M;\n    long N;\n    long O;\n    long P;\n\
    \    long Q;\n    long R;\n    long S;\n    long T;\n    long U;\n    long V;\n\
    \    long W;\n    long X;\n    long Y;\n    long Z;\n    long A;\n    long B;\n\
    \    long C;\n    long D;\n    long E;", "{\n    string result = \"\";\n    long\
    \ remainder;\n    long temp;\n    bool isNegative = false;\n    bool isEven =\
    \ false;\n    bool isOdd = false;\n    bool isPositive = false;\n    bool isZero\
    \ = false;\n    bool isOne = false;\n    bool isTwo = false;\n    bool isThree\
    \ = false;\n    bool isFour = false;\n    bool isFive = false;\n    bool isSix\
    \ = false;\n    bool isSeven = false;\n    bool isEight = false;\n    bool isNine\
    \ = false;\n    bool isTen = false;\n    bool isEleven = false;\n    bool isTwelve\
    \ = false;\n    bool isThirteen = false;\n    bool isFourteen = false;\n    bool\
    \ isFifteen = false;\n    bool isSixteen = false;\n    bool isSeventeen = false;\n\
    \    bool isEighteen = false;\n    bool isNineteen = false;\n    bool isTwenty\
    \ = false;\n    bool isTwentyOne = false;\n    bool isTwentyTwo = false;\n   \
    \ bool isTwentyThree = false;\n    bool isTwentyFour = false;\n    bool isTwentyFive\
    \ = false;\n    bool isTwentySix = false;\n    bool isTwentySeven = false;\n \
    \   bool isTwentyEight = false;\n    bool isTwentyNine = false;\n    bool isThirty\
    \ = false;\n    bool isThirtyOne = false;\n    bool isThirtyTwo = false;\n   \
    \ bool isThirtyThree = false;\n    bool isThirtyFour = false;\n    bool isThirtyFive\
    \ = false;\n    bool isThirtySix = false;\n    bool isThirtySeven = false;\n \
    \   bool isThirtyEight = false;\n    bool isThirtyNine = false;\n    bool isForty\
    \ = false;\n    bool isFortyOne = false;\n    bool isFortyTwo = false;\n    bool\
    \ isFortyThree = false;\n    bool isFortyFour = false;\n    bool isFortyFive =\
    \ false;\n    bool isFortySix = false;\n    bool isFortySeven = false;\n    bool\
    \ isFortyEight = false;\n    bool isFortyNine = false;\n    bool isFifty = false;\n\
    \    bool isFiftyOne = false;\n    bool isFiftyTwo = false;\n    bool isFiftyThree\
    \ = false;\n    bool isFiftyFour = false;\n    bool isFiftyFive = false;\n   \
    \ bool isFiftySix = false;\n    bool is", "{\n    string result = \"\";\n    long\
    \ remainder;\n    long quotient;\n    long power;\n    long decimal2;\n    long\
    \ decimal3;\n    long decimal4;\n    long decimal5;\n    long decimal6;\n    long\
    \ decimal7;\n    long decimal8;\n    long decimal9;\n    long decimal10;\n   \
    \ long decimal11;\n    long decimal12;\n    long decimal13;\n    long decimal14;\n\
    \    long decimal15;\n    long decimal16;\n    long decimal17;\n    long decimal18;\n\
    \    long decimal19;\n    long decimal20;\n    long decimal21;\n    long decimal22;\n\
    \    long decimal23;\n    long decimal24;\n    long decimal25;\n    long decimal26;\n\
    \    long decimal27;\n    long decimal28;\n    long decimal29;\n    long decimal30;\n\
    \    long decimal31;\n    long decimal32;\n    long decimal33;\n    long decimal34;\n\
    \    long decimal35;\n    long decimal36;\n    long decimal37;\n    long decimal38;\n\
    \    long decimal39;\n    long decimal40;\n    long decimal41;\n    long decimal42;\n\
    \    long decimal43;\n    long decimal44;\n    long decimal45;\n    long decimal46;\n\
    \    long decimal47;\n    long decimal48;\n    long decimal49;\n    long decimal50;\n\
    \    long decimal51;\n    long decimal52;\n    long decimal53;\n    long decimal54;\n\
    \    long decimal55;\n    long decimal56;\n    long decimal57;\n    long decimal58;\n\
    \    long decimal59;\n    long decimal60;\n    long decimal61;\n    long decimal62;\n\
    \    long decimal63;\n    long decimal64;\n    long decimal65;\n    long decimal66;\n\
    \    long decimal67;\n    long decimal68;\n    long decimal69;\n    long decimal70;\n\
    \    long decimal71;\n    long decimal72;\n    long decimal73;\n    long decimal74;\n\
    \    long decimal75;\n    long decimal76;\n    long decimal77;\n    long decimal78;\n\
    \    long decimal79;\n    long decimal80;\n    long decimal81;\n    long decimal82;\n\
    \    long decimal83;\n    long decimal84;\n    long decimal85;\n    long decimal",
  "{\n    string binary = \"\";\n    long remainder;\n    long counter = 0;\n    while(decimal\
    \ != 0)\n    {\n        remainder = decimal % 2;\n        decimal /= 2;\n    \
    \    binary += char(remainder);\n        counter++;\n    }\n    for(int i = 0;\
    \ i < counter; i++)\n    {\n        binary += \"0\";\n    }\n    binary += \"\
    db\";\n    return binary;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't\
    \ answer the question. OP wants to convert decimal to binary, not binary to decimal.\n\
    <|/ c |>\n<| c |>\nI see what you mean. I've edited my answer to reflect this.\n\
    <|/ c |>\n<| a tags=c++,c++11 |>\n<code>\n#include <iostream>\n#include <string>\n\
    using namespace std;", "{\n    string result = \"\";\n    long remainder;\n  \
    \  long power;\n    long temp;\n    bool flag = false;\n    \n    while(decimal\
    \ != 0)\n    {\n        remainder = decimal%2;\n        decimal = decimal/2;\n\
    \        power = 1;\n        temp = remainder;\n        \n        while(temp !=\
    \ 0)\n        {\n            power = power * 10;\n            temp = temp/2;\n\
    \        }\n        \n        if(flag)\n        {\n            result += \"1\"\
    ;\n            flag = false;\n        }\n        else\n        {\n           \
    \ result += \"0\";\n            flag = true;\n        }\n        \n        result\
    \ += to_string(power);\n    }\n    \n    if(result.length() > 1)\n    {\n    \
    \    result += \"db\";\n    }\n    \n    return result;\n}", "{\n    string binary\
    \ = \"\";\n    long remainder;\n    long temp;\n    \n    while(decimal != 0)\n\
    \    {\n        remainder = decimal % 2;\n        temp = decimal / 2;\n      \
    \  decimal -= temp;\n        \n        if(remainder == 1)\n        {\n       \
    \     binary += \"1\";\n        }\n        else\n        {\n            binary\
    \ += \"0\";\n        }\n    }\n    \n    return binary;\n}\n</code>\n<|/ a tags=c++,binary,decimal\
    \ |>\n<| a tags=c++,binary,decimal |>\n<code>\n#include <iostream>\n#include <string>\n\
    using namespace std;", "{\n    string binary = \"\";\n    long remainder;\n  \
    \  long quotient;\n    long temp;\n    long digit;\n    \n    quotient = decimal;\n\
    \    \n    while(quotient > 0)\n    {\n        remainder = quotient % 2;\n   \
    \     quotient = quotient / 2;\n        temp = remainder;\n        digit = temp;\n\
    \        \n        while(temp > 0)\n        {\n            binary = char('0' +\
    \ digit) + binary;\n            temp = temp / 2;\n            digit = temp;\n\
    \        }\n    }\n    \n    binary = char('0' + remainder) + binary;\n    \n\
    \    return binary;\n}", "{\n    string binary = \"\";\n    long remainder;\n\
    \    long temp;\n    \n    while(decimal != 0)\n    {\n        remainder = decimal\
    \ % 2;\n        temp = decimal / 2;\n        decimal -= temp;\n        binary\
    \ += to_string(remainder);\n    }\n    \n    binary = binary + \"db\";\n    return\
    \ binary;\n}\n</code>\n<|/ a |>\n<| a tags=c++,string |>\n<code>\n#include <iostream>\n\
    #include <string>\nusing namespace std;", "{\n    string binary = \"\";\n    long\
    \ remainder;\n    long quotient;\n    long temp;\n    bool isNegative = false;\n\
    \    bool isZero = false;\n    bool isOne = false;\n    bool isTwo = false;\n\
    \    bool isThree = false;\n    bool isFour = false;\n    bool isFive = false;\n\
    \    bool isSix = false;\n    bool isSeven = false;\n    bool isEight = false;\n\
    \    bool isNine = false;\n    bool isTen = false;\n    bool isEleven = false;\n\
    \    bool isTwelve = false;\n    bool isThirteen = false;\n    bool isFourteen\
    \ = false;\n    bool isFifteen = false;\n    bool isSixteen = false;\n    bool\
    \ isSeventeen = false;\n    bool isEighteen = false;\n    bool isNineteen = false;\n\
    \    bool isTwenty = false;\n    bool isTwentyOne = false;\n    bool isTwentyTwo\
    \ = false;\n    bool isTwentyThree = false;\n    bool isTwentyFour = false;\n\
    \    bool isTwentyFive = false;\n    bool isTwentySix = false;\n    bool isTwentySeven\
    \ = false;\n    bool isTwentyEight = false;\n    bool isTwentyNine = false;\n\
    \    bool isThirty = false;\n    bool isThirtyOne = false;\n    bool isThirtyTwo\
    \ = false;\n    bool isThirtyThree = false;\n    bool isThirtyFour = false;\n\
    \    bool isThirtyFive = false;\n    bool isThirtySix = false;\n    bool isThirtySeven\
    \ = false;\n    bool isThirtyEight = false;\n    bool isThirtyNine = false;\n\
    \    bool isForty = false;\n    bool isFortyOne = false;\n    bool isFortyTwo\
    \ = false;\n    bool isFortyThree = false;\n    bool isFortyFour = false;\n  \
    \  bool isFortyFive = false;\n    bool isFortySix = false;\n    bool isFortySeven\
    \ = false;\n    bool isFortyEight = false;\n    bool isFortyNine = false;\n  \
    \  bool isFifty = false;\n    bool isFiftyOne = false;\n    bool isFiftyTwo =\
    \ false;\n    bool isFiftyThree = false;\n    bool isFiftyFour = false;\n    bool\
    \ isFiftyFive = false;\n    bool isFiftySix = false;\n    bool isFiftySeven =\
    \ false;\n    bool isFif", "{\n    string binary = \"\";\n    long remainder =\
    \ decimal;\n    long quotient = 0;\n    while(quotient != 0)\n    {\n        remainder\
    \ = remainder % 2;\n        quotient = decimal / 2;\n        binary = remainder\
    \ + binary;\n    }\n    binary = binary + \"db\";\n    return binary;\n}\n</code>\n\
    <|/ a tags=c++,binary,decimal |>\n<| c |>\nThe `string` class has a constructor\
    \ that takes a `char*` so you can just use `binary = binary + remainder;` instead\
    \ of `binary = remainder + binary;`\n<|/ c |>\n<| c |>\nYes, I know, but I wanted\
    \ to show how it could be done without using strings. I wanted to show how it\
    \ could be done without using strings. I wanted to show how it could be done without\
    \ using strings. I wanted to show how it could be done without using strings.\
    \ I wanted to show how it could be done without using strings. I wanted to show\
    \ how it could be done without using strings. I wanted to show how it could be\
    \ done without using strings. I wanted to show how it could be done without using\
    \ strings. I wanted to show how it could be done without using strings. I wanted\
    \ to show how it could be done without using strings. I wanted to show how it\
    \ could be done without using strings. I wanted to show how it could be done without\
    \ using strings. I wanted to show how it could be done without using strings.\
    \ I wanted to show how it could be done without using strings. I wanted to show\
    \ how it could be done without using strings. I wanted to show how it could be\
    \ done without using strings. I wanted to show how it could be done without using\
    \ strings. I wanted to show how it could be done without using strings. I wanted\
    \ to show how it could be done without using strings. I wanted to show how it\
    \ could be done without using strings. I wanted to show how it could be done without\
    \ using strings. I wanted to show how it could be done without using strings.\
    \ I wanted to show how it could be done without using strings. I wanted to show\
    \ how it could be done without using strings. I wanted to show how it could be\
    \ done without using strings. I wanted to show how it could be done without using\
    \ strings. I wanted to show how it could be done without using strings. I wanted\
    \ to show how it could be done without using strings. I wanted to show how it\
    \ could be done without using strings. I wanted to show how it could be done without\
    \ using strings. I wanted to show how it could be done without using strings.\
    \ I wanted to show how it could be done without using strings. I wanted to show\
    \ how it could be done without using strings. I wanted to show how it could be\
    \ done without ", "{\n    string binary = \"\";\n    long remainder;\n    long\
    \ quotient;\n    long temp;\n    \n    quotient = decimal;\n    \n    while(quotient\
    \ != 0)\n    {\n        remainder = quotient % 2;\n        quotient = quotient\
    \ / 2;\n        temp = remainder;\n        \n        while(temp != 0)\n      \
    \  {\n            binary = binary + \"0\";\n            temp = temp - 1;\n   \
    \     }\n        \n        binary = binary + remainder;\n    }\n    \n    return\
    \ binary;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n\
    #include <string>\nusing namespace std;", "{\n    string binary = \"\";\n    long\
    \ remainder;\n    \n    while ( decimal > 0 ) {\n        remainder = decimal %\
    \ 2;\n        decimal /= 2;\n        binary += remainder;\n    }\n    \n    return\
    \ binary;\n}", "{\n    string result = \"\";\n    long remainder;\n    long quotient;\n\
    \    long power;\n    long digit;\n    long i;\n    long j;\n    long k;\n   \
    \ long l;\n    long m;\n    long n;\n    long o;\n    long p;\n    long q;\n \
    \   long r;\n    long s;\n    long t;\n    long u;\n    long v;\n    long w;\n\
    \    long x;\n    long y;\n    long z;\n    long A;\n    long B;\n    long C;\n\
    \    long D;\n    long E;\n    long F;\n    long G;\n    long H;\n    long I;\n\
    \    long J;\n    long K;\n    long L;\n    long M;\n    long N;\n    long O;\n\
    \    long P;\n    long Q;\n    long R;\n    long S;\n    long T;\n    long U;\n\
    \    long V;\n    long W;\n    long X;\n    long Y;\n    long Z;\n    long AA;\n\
    \    long BB;\n    long CC;\n    long DD;\n    long EE;\n    long FF;\n    long\
    \ GG;\n    long HH;\n    long II;\n    long JJ;\n    long KK;\n    long LL;\n\
    \    long MM;\n    long NN;\n    long OO;\n    long PP;\n    long QQ;\n    long\
    \ RR;\n    long SS;\n    long TT;\n    long UU;\n    long VV;\n    long WW;\n\
    \    long XX;\n    long YY;\n    long ZZ;\n    long AAA;\n    long BBB;\n    long\
    \ CCC;\n    long DDD;\n    long EEE;\n    long FFF;\n    long GGG;\n    long HHH;\n\
    \    long III;\n    long JJJ;\n    long KKK;\n    long LLL;\n    long MMM;\n \
    \   long NNN;\n    long OOO;\n    long PPP;\n    long QQQ;\n    long RRR;\n  \
    \  long SSS;\n    long TTT;\n    long UUU;\n    long VVV;\n    long WWW;\n   \
    \ long XXXX;\n    long YYYY;\n    long ", "{\n    string binary = \"\";\n    long\
    \ remainder;\n    long temp;\n    \n    while(decimal != 0)\n    {\n        remainder\
    \ = decimal % 2;\n        temp = decimal / 2;\n        decimal -= temp;\n    \
    \    binary += to_string(temp);\n        binary += to_string(remainder);\n   \
    \ }\n    \n    return binary;\n}", "{\n    string binary = \"\";\n    long remainder;\n\
    \    long power;\n    long digit;\n    long i;\n    long j;\n    long k;\n   \
    \ long l;\n    long m;\n    long n;\n    long o;\n    long p;\n    long q;\n \
    \   long r;\n    long s;\n    long t;\n    long u;\n    long v;\n    long w;\n\
    \    long x;\n    long y;\n    long z;\n    long A;\n    long B;\n    long C;\n\
    \    long D;\n    long E;\n    long F;\n    long G;\n    long H;\n    long I;\n\
    \    long J;\n    long K;\n    long L;\n    long M;\n    long N;\n    long O;\n\
    \    long P;\n    long Q;\n    long R;\n    long S;\n    long T;\n    long U;\n\
    \    long V;\n    long W;\n    long X;\n    long Y;\n    long Z;\n    long A;\n\
    \    long B;\n    long C;\n    long D;\n    long E;\n    long F;\n    long G;\n\
    \    long H;\n    long I;\n    long J;\n    long K;\n    long L;\n    long M;\n\
    \    long N;\n    long O;\n    long P;\n    long Q;\n    long R;\n    long S;\n\
    \    long T;\n    long U;\n    long V;\n    long W;\n    long X;\n    long Y;\n\
    \    long Z;\n    long A;\n    long B;\n    long C;\n    long D;\n    long E;\n\
    \    long F;\n    long G;\n    long H;\n    long I;\n    long J;\n    long K;\n\
    \    long L;\n    long M;\n    long N;\n    long O;\n    long P;\n    long Q;\n\
    \    long R;\n    long S;\n    long T;\n    long U;\n    long V;\n    long W;\n\
    \    long X;\n    long Y;\n    long Z;\n    long A;\n    long B;\n    long C;\n\
    \    long D;\n    long E;\n    long F;\n", "{\n    string result = \"\";\n   \
    \ long remainder = decimal;\n    long temp = 0;\n    while(decimal != 0)\n   \
    \ {\n        remainder = decimal % 2;\n        decimal = decimal / 2;\n      \
    \  temp = remainder;\n        result = temp.to_string() + result;\n    }\n   \
    \ result += \"db\";\n    return result;\n}", "{\n    string binary = \"\";\n \
    \   long remainder;\n    long temp;\n    long temp2;\n    long temp3;\n    long\
    \ temp4;\n    long temp5;\n    long temp6;\n    long temp7;\n    long temp8;\n\
    \    long temp9;\n    long temp10;\n    long temp11;\n    long temp12;\n    long\
    \ temp13;\n    long temp14;\n    long temp15;\n    long temp16;\n    long temp17;\n\
    \    long temp18;\n    long temp19;\n    long temp20;\n    long temp21;\n    long\
    \ temp22;\n    long temp23;\n    long temp24;\n    long temp25;\n    long temp26;\n\
    \    long temp27;\n    long temp28;\n    long temp29;\n    long temp30;\n    long\
    \ temp31;\n    long temp32;\n    long temp33;\n    long temp34;\n    long temp35;\n\
    \    long temp36;\n    long temp37;\n    long temp38;\n    long temp39;\n    long\
    \ temp40;\n    long temp41;\n    long temp42;\n    long temp43;\n    long temp44;\n\
    \    long temp45;\n    long temp46;\n    long temp47;\n    long temp48;\n    long\
    \ temp49;\n    long temp50;\n    long temp51;\n    long temp52;\n    long temp53;\n\
    \    long temp54;\n    long temp55;\n    long temp56;\n    long temp57;\n    long\
    \ temp58;\n    long temp59;\n    long temp60;\n    long temp61;\n    long temp62;\n\
    \    long temp63;\n    long temp64;\n    long temp65;\n    long temp66;\n    long\
    \ temp67;\n    long temp68;\n    long temp69;\n    long temp70;\n    long temp71;\n\
    \    long temp72;\n    long temp73;\n    long temp74;\n    long temp75;\n    long\
    \ temp76;\n    long temp77;\n    long temp78;\n    long temp79;\n    long temp80;\n\
    \    long temp81;\n    long temp82;\n    long temp83;\n    long temp84;\n    long\
    \ temp85;\n    long temp86;\n    long ", "{\n    string result = \"\";\n    long\
    \ remainder;\n    long quotient;\n    long temp;\n    \n    while(decimal != 0)\n\
    \    {\n        remainder = decimal%2;\n        quotient = decimal/2;\n      \
    \  temp = quotient;\n        \n        if(temp > 0)\n        {\n            result\
    \ += binary_to_string(temp);\n        }\n        \n        decimal -= remainder;\n\
    \        \n        if(decimal != 0)\n        {\n            result += binary_to_string(decimal);\n\
    \        }\n    }\n    \n    if(result.length() > 0)\n    {\n        result +=\
    \ \"db\";\n    }\n    \n    return result;\n}", "{\n    string result = \"\";\n\
    \    long remainder;\n    long power = 1;\n    long temp;\n    long digit;\n \
    \   \n    while (decimal != 0)\n    {\n        remainder = decimal % 2;\n    \
    \    temp = decimal / 2;\n        digit = temp * power;\n        power = power\
    \ * 10;\n        result += char(remainder + digit);\n        decimal = temp;\n\
    \    }\n    \n    result += \"db\";\n    return result;\n}", "{\n    string binary\
    \ = \"\";\n    long remainder;\n    \n    while(decimal != 0)\n    {\n       \
    \ remainder = decimal % 2;\n        decimal /= 2;\n        binary += remainder;\n\
    \    }\n    \n    return binary;\n}", "{\n    string binary = \"\";\n    long\
    \ remainder;\n    long temp;\n    \n    while(decimal != 0)\n    {\n        remainder\
    \ = decimal%2;\n        temp = decimal/2;\n        decimal -= temp;\n        binary\
    \ += char(remainder);\n    }\n    \n    return binary;\n}\n</code>\n<|/ a tags=c++,algorithm\
    \ |>\n<| a |>\n<code>\n#include <iostream>\n#include <string>\nusing namespace\
    \ std;", "{\n    string result = \"\";\n    long remainder;\n    \n    while (decimal\
    \ > 0)\n    {\n        remainder = decimal % 2;\n        decimal /= 2;\n     \
    \   result += char(remainder);\n    }\n    \n    result += \"db\";\n    \n   \
    \ return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n#include\
    \ <iostream>\n#include <string>\nusing namespace std;", "{\n    string result\
    \ = \"\";\n    long remainder;\n    \n    while(decimal != 0)\n    {\n       \
    \ remainder = decimal % 2;\n        decimal /= 2;\n        result += char(remainder);\n\
    \    }\n    \n    result += \"db\";\n    \n    return result;\n}\n</code>\n<|/\
    \ a tags=c++,algorithm,binary,decimal |>\n<| c |>\nThis doesn't work for negative\
    \ numbers. `decimal_to_binary(-10)` returns `'-0b10'` instead of `'-0b11'`.\n\
    <|/ c |>\n<| c |>\nI fixed the negative number issue. Thanks for pointing that\
    \ out.\n<|/ c |>\n<| c |>\nThis doesn't work for negative numbers. `decimal_to_binary(-10)`\
    \ returns `'-0b10'` instead of `'-0b11'`.\n<|/ c |>\n<| c |>\nI fixed the negative\
    \ number issue. Thanks for pointing that out.\n<|/ c |>\n<| a dscore=2 |>\n<code>\n\
    #include <iostream>\n#include <string>\n#include <sstream>\n#include <iomanip>",
  "{\n    string binary = \"\";\n    long remainder;\n    long quotient;\n    \n \
    \   quotient = decimal;\n    \n    while (remainder != 0)\n    {\n        remainder\
    \ = quotient % 2;\n        quotient = quotient / 2;\n        binary = remainder\
    \ + binary;\n    }\n    \n    return binary;\n}", "{\n    string binary = \"\"\
    ;\n    long remainder;\n    long power;\n    long quotient;\n    long temp;\n\
    \    long temp2;\n    long temp3;\n    long temp4;\n    long temp5;\n    long\
    \ temp6;\n    long temp7;\n    long temp8;\n    long temp9;\n    long temp10;\n\
    \    long temp11;\n    long temp12;\n    long temp13;\n    long temp14;\n    long\
    \ temp15;\n    long temp16;\n    long temp17;\n    long temp18;\n    long temp19;\n\
    \    long temp20;\n    long temp21;\n    long temp22;\n    long temp23;\n    long\
    \ temp24;\n    long temp25;\n    long temp26;\n    long temp27;\n    long temp28;\n\
    \    long temp29;\n    long temp30;\n    long temp31;\n    long temp32;\n    long\
    \ temp33;\n    long temp34;\n    long temp35;\n    long temp36;\n    long temp37;\n\
    \    long temp38;\n    long temp39;\n    long temp40;\n    long temp41;\n    long\
    \ temp42;\n    long temp43;\n    long temp44;\n    long temp45;\n    long temp46;\n\
    \    long temp47;\n    long temp48;\n    long temp49;\n    long temp50;\n    long\
    \ temp51;\n    long temp52;\n    long temp53;\n    long temp54;\n    long temp55;\n\
    \    long temp56;\n    long temp57;\n    long temp58;\n    long temp59;\n    long\
    \ temp60;\n    long temp61;\n    long temp62;\n    long temp63;\n    long temp64;\n\
    \    long temp65;\n    long temp66;\n    long temp67;\n    long temp68;\n    long\
    \ temp69;\n    long temp70;\n    long temp71;\n    long temp72;\n    long temp73;\n\
    \    long temp74;\n    long temp75;\n    long temp76;\n    long temp77;\n    long\
    \ temp78;\n    long temp79;\n    long temp80;\n    long temp81;\n    long temp82;\n\
    \    long temp83;\n    long temp84;\n    long temp", "{\n    string result = \"\
    \";\n    long remainder;\n    long quotient;\n    long temp;\n    \n    quotient\
    \ = decimal;\n    \n    while(quotient != 0)\n    {\n        remainder = quotient\
    \ % 2;\n        quotient = quotient / 2;\n        temp = remainder;\n        \n\
    \        while(temp != 0)\n        {\n            result += binary_digits[temp];\n\
    \            temp = temp / 2;\n        }\n    }\n    \n    result += \"db\";\n\
    \    \n    return result;\n}", "{\n    string result = \"\";\n    long remainder;\n\
    \    long temp;\n    \n    while(decimal != 0)\n    {\n        remainder = decimal\
    \ % 2;\n        temp = decimal / 2;\n        decimal -= temp;\n        result\
    \ += char(remainder);\n    }\n    \n    result += \"db\";\n    \n    return result;\n\
    }", "{\n    string binary = \"\";\n    long remainder;\n    long temp;\n    long\
    \ temp2;\n    long temp3;\n    long temp4;\n    long temp5;\n    long temp6;\n\
    \    long temp7;\n    long temp8;\n    long temp9;\n    long temp10;\n    long\
    \ temp11;\n    long temp12;\n    long temp13;\n    long temp14;\n    long temp15;\n\
    \    long temp16;\n    long temp17;\n    long temp18;\n    long temp19;\n    long\
    \ temp20;\n    long temp21;\n    long temp22;\n    long temp23;\n    long temp24;\n\
    \    long temp25;\n    long temp26;\n    long temp27;\n    long temp28;\n    long\
    \ temp29;\n    long temp30;\n    long temp31;\n    long temp32;\n    long temp33;\n\
    \    long temp34;\n    long temp35;\n    long temp36;\n    long temp37;\n    long\
    \ temp38;\n    long temp39;\n    long temp40;\n    long temp41;\n    long temp42;\n\
    \    long temp43;\n    long temp44;\n    long temp45;\n    long temp46;\n    long\
    \ temp47;\n    long temp48;\n    long temp49;\n    long temp50;\n    long temp51;\n\
    \    long temp52;\n    long temp53;\n    long temp54;\n    long temp55;\n    long\
    \ temp56;\n    long temp57;\n    long temp58;\n    long temp59;\n    long temp60;\n\
    \    long temp61;\n    long temp62;\n    long temp63;\n    long temp64;\n    long\
    \ temp65;\n    long temp66;\n    long temp67;\n    long temp68;\n    long temp69;\n\
    \    long temp70;\n    long temp71;\n    long temp72;\n    long temp73;\n    long\
    \ temp74;\n    long temp75;\n    long temp76;\n    long temp77;\n    long temp78;\n\
    \    long temp79;\n    long temp80;\n    long temp81;\n    long temp82;\n    long\
    \ temp83;\n    long temp84;\n    long temp85;\n    long temp86;\n    long ", "{\n\
    \    string result = \"\";\n    long remainder;\n    \n    while (decimal > 0)\n\
    \    {\n        remainder = decimal % 2;\n        decimal /= 2;\n        \n  \
    \      if (remainder == 0)\n        {\n            result += \"0\";\n        }\n\
    \        else\n        {\n            result += \"1\";\n        }\n    }\n   \
    \ \n    if (result.length() > 0)\n    {\n        result += \"db\";\n    }\n  \
    \  \n    return result;\n}", "{\n    string result = \"\";\n    long remainder;\n\
    \    \n    while ((remainder = decimal % 2) == 0)\n    {\n        decimal /= 2;\n\
    \        result += \"0\";\n    }\n    \n    while ((remainder = decimal % 10)\
    \ != 0)\n    {\n        decimal /= 10;\n        result += \"1\";\n    }\n    \n\
    \    result += \"db\";\n    \n    return result;\n}", "{\n    string result =\
    \ \"\";\n    long remainder;\n    bool isNegative = false;\n    \n    if(decimal\
    \ < 0)\n    {\n        isNegative = true;\n        decimal = -decimal;\n    }\n\
    \    \n    remainder = decimal;\n    \n    while(decimal > 0)\n    {\n       \
    \ remainder = remainder % 2;\n        decimal /= 2;\n        \n        if(remainder\
    \ == 1)\n        {\n            result += \"1\";\n        }\n        else\n  \
    \      {\n            result += \"0\";\n        }\n    }\n    \n    if(isNegative)\n\
    \    {\n        result = \"-\" + result;\n    }\n    \n    result += \"db\";\n\
    \    \n    return result;\n}", "{\n    string binary = \"\";\n    long remainder;\n\
    \    \n    while (decimal != 0)\n    {\n        remainder = decimal % 2;\n   \
    \     decimal /= 2;\n        binary += remainder;\n    }\n    \n    return binary;\n\
    }", "{\n    string result = \"\";\n    long remainder;\n    \n    while(decimal\
    \ != 0)\n    {\n        remainder = decimal % 2;\n        decimal /= 2;\n    \
    \    result += char(remainder);\n    }\n    \n    result += \"db\";\n    \n  \
    \  return result;\n}", "{\n    string result = \"\";\n    long remainder;\n  \
    \  long temp;\n    long power = 1;\n    long pow;\n    long digit;\n    long i;\n\
    \    \n    while(decimal != 0)\n    {\n        remainder = decimal % 2;\n    \
    \    temp = decimal / 2;\n        pow = power;\n        power = power * 10;\n\
    \        digit = temp;\n        \n        for(i = 0; i < digit; i++)\n       \
    \ {\n            result += (remainder % 2) + \"0\";\n            remainder = remainder\
    \ / 2;\n        }\n        \n        power = power * 10;\n        temp = temp\
    \ * pow;\n        pow = pow;\n        decimal = decimal;\n    }\n    \n    if(result\
    \ == \"0\")\n    {\n        result = \"0\";\n    }\n    \n    if(result == \"\
    1\")\n    {\n        result = \"1\";\n    }\n    \n    if(result == \"10\")\n\
    \    {\n        result = \"b\";\n    }\n    \n    if(result == \"11\")\n    {\n\
    \        result = \"b\";\n    }\n    \n    if(result == \"100\")\n    {\n    \
    \    result = \"b\";\n    }\n    \n    if(result == \"101\")\n    {\n        result\
    \ = \"b\";\n    }\n    \n    if(result == \"110\")\n    {\n        result = \"\
    b\";\n    }\n    \n    if(result == \"111\")\n    {\n        result = \"b\";\n\
    \    }\n    \n    if(result == \"1000\")\n    {\n        result = \"b\";\n   \
    \ }\n    \n    if(result == \"1001\")\n    {\n        result = \"b\";\n    }\n\
    \    \n    if(result == \"1010\")\n    {\n        result = \"b\";\n    }\n   \
    \ \n    if(result == \"1011\")\n    {\n        result = \"b\";\n    }\n    \n\
    \    if(result == \"1100\")\n    {\n        result = \"b\";\n    }\n    \n   \
    \ if(result == \"1101\")\n    {\n        result = \"b\";\n    }\n    \n    if(result\
    \ == \"1110\")\n    {\n        result = \"b\";\n    }\n    \n    if(result ==\
    \ \"1111\")\n    {\n        result = \"b\";\n    }\n    \n    if(result == \"\
    10010\")\n    {\n        result = \"b\";\n    }\n    \n    if(result == \"10011\"\
    )\n    {\n        result = \"b\";\n    }\n    \n    if(result == \"10100\")\n\
    \    {\n        result = \"b\";\n    }\n    \n    if(result == \"10101\")\n  \
    \  {\n        result = \"b\";\n    }\n    \n    if(result == \"10110\")\n    {\n\
    \        result = \"b\";\n    }\n    \n    if(result == \"10111\")\n    {\n",
  "{\n    string binary = \"\";\n    long remainder;\n    long temp;\n    while(decimal\
    \ != 0)\n    {\n        remainder = decimal % 2;\n        decimal = decimal /\
    \ 2;\n        temp = remainder;\n        while(temp != 0)\n        {\n       \
    \     binary = binary + \"0\";\n            temp--;\n        }\n        binary\
    \ = binary + \"1\";\n    }\n    return binary;\n}\n</code>\n<|/ a tags=c++,binary,decimal\
    \ |>\n<| a |>\n<code>\n#include <iostream>\n#include <string>\nusing namespace\
    \ std;", "{\n    string result = \"\";\n    long remainder = decimal;\n    string\
    \ remainderAsString = to_string(decimal);\n    for(int i = 0; i < remainderAsString.length();\
    \ i++)\n    {\n        result += remainderAsString[i];\n    }\n    string remainderAsString2\
    \ = to_string(remainder);\n    for(int i = 0; i < remainderAsString2.length();\
    \ i++)\n    {\n        result += \"0\";\n    }\n    result += \"db\";\n    return\
    \ result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=c++,string,binary,decimal\
    \ |>\n<code>\n#include <iostream>\n#include <string>\nusing namespace std;", "{\n\
    \    string result = \"\";\n    long remainder;\n    long quotient;\n    \n  \
    \  quotient = decimal;\n    \n    while(quotient != 0)\n    {\n        remainder\
    \ = quotient % 2;\n        quotient = quotient / 2;\n        result += remainder;\n\
    \    }\n    \n    result += \"db\";\n    \n    return result;\n}", "{\n    string\
    \ binary = \"\";\n    long remainder;\n    long temp;\n    \n    while(decimal\
    \ != 0)\n    {\n        remainder = decimal % 2;\n        temp = decimal / 2;\n\
    \        decimal -= temp;\n        binary += to_string(temp);\n        binary\
    \ += to_string(remainder);\n    }\n    \n    return binary;\n}", "{\n    string\
    \ binary = \"\";\n    long remainder;\n    long temp;\n    while(decimal != 0)\n\
    \    {\n        remainder = decimal % 2;\n        decimal = decimal / 2;\n   \
    \     temp = remainder;\n        while(temp != 0)\n        {\n            binary\
    \ = \"1\" + binary;\n            temp = temp / 2;\n        }\n    }\n    return\
    \ binary;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=c++,binary,decimal |>\n<code>\n\
    #include <iostream>\n#include <string>\nusing namespace std;", "{\n    string\
    \ result = \"\";\n    long remainder;\n    \n    while(decimal != 0)\n    {\n\
    \        remainder = decimal % 2;\n        decimal /= 2;\n        result += char(remainder);\n\
    \    }\n    \n    result += 'db';\n    \n    return result;\n}", "{\n    string\
    \ result = \"\";\n    long remainder;\n    bool isNegative = false;\n    \n  \
    \  if(decimal < 0)\n    {\n        isNegative = true;\n        decimal = -decimal;\n\
    \    }\n    \n    remainder = decimal;\n    \n    while(remainder > 0)\n    {\n\
    \        long digit = remainder % 2;\n        remainder = remainder / 2;\n   \
    \     \n        if(digit == 1)\n        {\n            result += \"1\";\n    \
    \    }\n        else\n        {\n            result += \"0\";\n        }\n   \
    \ }\n    \n    if(isNegative)\n    {\n        result = \"-db\" + result;\n   \
    \ }\n    \n    return result;\n}", "{\n    string binary = \"\";\n    long remainder;\n\
    \    long counter = 0;\n    \n    while(decimal != 0)\n    {\n        remainder\
    \ = decimal % 2;\n        decimal /= 2;\n        \n        if(remainder == 0)\n\
    \        {\n            binary += \"0\";\n        }\n        else\n        {\n\
    \            binary += \"1\";\n        }\n        \n        counter += 1;\n  \
    \  }\n    \n    binary = binary.substr(0, counter);\n    \n    return binary;\n\
    }", "{\n    string binary = \"\";\n    long remainder;\n    long temp;\n    \n\
    \    while(decimal != 0)\n    {\n        remainder = decimal % 2;\n        temp\
    \ = decimal / 2;\n        decimal -= temp;\n        binary += remainder;\n   \
    \ }\n    \n    binary = \"db\" + binary;\n    return binary;\n}", "{\n    string\
    \ binary = \"\";\n    long remainder;\n    \n    while (decimal != 0)\n    {\n\
    \        remainder = decimal % 2;\n        decimal /= 2;\n        binary += remainder;\n\
    \    }\n    \n    return binary;\n}", "{\n    string binary = \"\";\n    long\
    \ remainder;\n    long temp;\n    while(decimal != 0)\n    {\n        remainder\
    \ = decimal % 2;\n        temp = decimal / 2;\n        decimal -= temp;\n    \
    \    binary += to_string(temp) + to_string(remainder);\n    }\n    binary = binary.substr(0,\
    \ binary.length() - 2);\n    binary = \"db\" + binary;\n    return binary;\n}\n\
    </code>\n<|/ a tags=c++,algorithm,binary,decimal |>\n<| a dscore=0 |>\n<code>\n\
    #include <iostream>\n#include <string>\nusing namespace std;", "{\n    string\
    \ binary = \"\";\n    long remainder;\n    long power;\n    long digit;\n    long\
    \ i;\n    \n    while(decimal != 0)\n    {\n        remainder = decimal % 2;\n\
    \        power = decimal / 2;\n        digit = remainder * power;\n        binary\
    \ = char('0' + digit) + binary;\n        decimal = power;\n    }\n    \n    binary\
    \ = char('0' + decimal) + binary;\n    \n    binary = char('db' + binary);\n \
    \   \n    return binary;\n}", "{\n    string binary = \"\";\n    long remainder;\n\
    \    \n    while(decimal != 0)\n    {\n        remainder = decimal % 2;\n    \
    \    decimal /= 2;\n        binary += remainder;\n    }\n    \n    return binary;\n\
    }\n</code>\n<|/ a |>\n<| c |>\nThis doesn't work for negative numbers. Try `decimal_to_binary(-10)`.\n\
    <|/ c |>\n<| c |>\nI didn't see that requirement in the question. I'll update\
    \ my answer accordingly.\n<|/ c |>\n<| c |>\nI added a solution that works for\
    \ negative numbers. I hope it helps.\n<|/ c |>\n<| a dscore=2 |>\n<code>\nstring\
    \ decimal_to_binary(long decimal)\n{\n    string binary = \"\";\n    long remainder;\n\
    \    \n    while(decimal != 0)\n    {\n        remainder = decimal % 2;\n    \
    \    decimal /= 2;\n        binary += remainder;\n    }\n    \n    return binary;\n\
    }\n</code>\n<|/ a tags=c++ |>\n<| c |>\nPlease add some explanation to your answer.\n\
    <|/ c |>\n<| a tags=c++ |>\n<code>\nstring decimal_to_binary(long decimal)\n{\n\
    \    string binary = \"\";\n    long remainder;\n    \n    while(decimal != 0)\n\
    \    {\n        remainder = decimal % 2;\n        decimal /= 2;\n        binary\
    \ += remainder;\n    }\n    \n    return binary;\n}\n</code>\n<|/ a dscore=2 |>\n\
    <| a dscore=1 |>\n<code>\nstring decimal_to_binary(long decimal)\n{\n    string\
    \ binary = \"\";\n    long remainder;\n    \n    while(decimal != 0)\n    {\n\
    \        remainder = decimal % 2;\n        decimal /= 2;\n        binary += remainder;\n\
    \    }\n    \n    return binary;\n}\n</code>\n<|/ a tags=c++ |>\n<| a |>\n<code>\n\
    string decimal_to_binary(long decimal)\n{\n    string binary = \"\";\n    long\
    \ remainder;\n    \n    while(decimal != 0)\n    {\n        remainder = decimal\
    \ % 2;\n        decimal /= 2;\n        binary += remainder;\n    }\n    \n   \
    \ return binary;\n}\n</code>\n<|/ a tags=c++ dscore=1 |>\n<| a tags=c++ |>\n<code>\n\
    string decimal_to_binary(long decimal)\n{\n    string binary = \"\";\n    long\
    \ remain", "{\n    string binary = \"\";\n    long remainder = decimal;\n    \n\
    \    while (remainder > 0)\n    {\n        binary = char(remainder % 2) + binary;\n\
    \        remainder = remainder / 2;\n    }\n    \n    return binary + \"db\";\n\
    }", "{\n    string binary = \"\";\n    long remainder;\n    \n    while(decimal\
    \ != 0)\n    {\n        remainder = decimal % 2;\n        decimal /= 2;\n    \
    \    binary += remainder;\n    }\n    \n    return binary;\n}", "{\n    string\
    \ binary = \"\";\n    long remainder;\n    long power;\n    long digit;\n    long\
    \ i;\n    \n    for(i = decimal; i >= 1; i--)\n    {\n        remainder = i %\
    \ 2;\n        power = 1;\n        digit = i / 2;\n        while(digit > 0)\n \
    \       {\n            power = power * 10;\n            digit = digit / 2;\n \
    \       }\n        binary = binary + to_string(remainder) + to_string(power);\n\
    \    }\n    return binary;\n}", "{\n    string result = \"\";\n    long remainder;\n\
    \    long digit;\n    bool isNegative = false;\n    bool isEven = false;\n   \
    \ bool isOdd = false;\n    bool isZero = false;\n    bool isOne = false;\n   \
    \ bool isTwo = false;\n    bool isThree = false;\n    bool isFour = false;\n \
    \   bool isFive = false;\n    bool isSix = false;\n    bool isSeven = false;\n\
    \    bool isEight = false;\n    bool isNine = false;\n    bool isTen = false;\n\
    \    bool isEleven = false;\n    bool isTwelve = false;\n    bool isThirteen =\
    \ false;\n    bool isFourteen = false;\n    bool isFifteen = false;\n    bool\
    \ isSixteen = false;\n    bool isSeventeen = false;\n    bool isEighteen = false;\n\
    \    bool isNineteen = false;\n    bool isTwenty = false;\n    bool isTwentyOne\
    \ = false;\n    bool isTwentyTwo = false;\n    bool isTwentyThree = false;\n \
    \   bool isTwentyFour = false;\n    bool isTwentyFive = false;\n    bool isTwentySix\
    \ = false;\n    bool isTwentySeven = false;\n    bool isTwentyEight = false;\n\
    \    bool isTwentyNine = false;\n    bool isThirty = false;\n    bool isThirtyOne\
    \ = false;\n    bool isThirtyTwo = false;\n    bool isThirtyThree = false;\n \
    \   bool isThirtyFour = false;\n    bool isThirtyFive = false;\n    bool isThirtySix\
    \ = false;\n    bool isThirtySeven = false;\n    bool isThirtyEight = false;\n\
    \    bool isThirtyNine = false;\n    bool isFourty = false;\n    bool isFourtyOne\
    \ = false;\n    bool isFourtyTwo = false;\n    bool isFourtyThree = false;\n \
    \   bool isFourtyFour = false;\n    bool isFourtyFive = false;\n    bool isFourtySix\
    \ = false;\n    bool isFourtySeven = false;\n    bool isFourtyEight = false;\n\
    \    bool isFourtyNine = false;\n    bool isFifty = false;\n    bool isFiftyOne\
    \ = false;\n    bool isFiftyTwo = false;\n    bool isFiftyThree = false;\n   \
    \ bool isFiftyFour = false;\n    bool isFiftyFive = false;\n    bool isFiftySix\
    \ = false;\n    bool isFiftySeven = false;", "{\n    string result = \"\";\n \
    \   long remainder;\n    long power;\n    long digit;\n    long base;\n    bool\
    \ isNegative = false;", "{\n    string result = \"\";\n    long remainder;\n \
    \   long temp;\n    \n    while(decimal != 0)\n    {\n        remainder = decimal\
    \ % 2;\n        decimal = decimal / 2;\n        temp = remainder;\n        \n\
    \        while(temp != 0)\n        {\n            result += char(temp % 2);\n\
    \            temp = temp / 2;\n        }\n    }\n    \n    result += \"db\";\n\
    \    \n    return result;\n}\n</code>\n<|/ a tags=c++,binary,decimal |>\n<| c\
    \ |>\nThis doesn't work for negative numbers. Try `decimal_to_binary(-10)`.\n\
    <|/ c |>\n<| c |>\nI didn't see that requirement in the question. Thanks for pointing\
    \ it out.\n<|/ c |>\n<| c |>\nI added a solution that works for negative numbers\
    \ as well.\n<|/ c |>\n<| c |>\nI added a solution that works for negative numbers\
    \ as well.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n#include\
    \ <string>\nusing namespace std;", "{\n    string result = \"\";\n    long remainder;\n\
    \    long temp;\n    bool isNegative = false;\n    bool isEven = true;\n    bool\
    \ isOdd = false;\n    bool isPositive = true;\n    bool isEven = true;\n    bool\
    \ isOdd = false;\n    bool isPositive = true;\n    bool isEven = true;\n    bool\
    \ isOdd = false;\n    bool isPositive = true;\n    bool isEven = true;\n    bool\
    \ isOdd = false;\n    bool isPositive = true;\n    bool isEven = true;\n    bool\
    \ isOdd = false;\n    bool isPositive = true;\n    bool isEven = true;\n    bool\
    \ isOdd = false;\n    bool isPositive = true;\n    bool isEven = true;\n    bool\
    \ isOdd = false;\n    bool isPositive = true;\n    bool isEven = true;\n    bool\
    \ isOdd = false;\n    bool isPositive = true;\n    bool isEven = true;\n    bool\
    \ isOdd = false;\n    bool isPositive = true;\n    bool isEven = true;\n    bool\
    \ isOdd = false;\n    bool isPositive = true;\n    bool isEven = true;\n    bool\
    \ isOdd = false;\n    bool isPositive = true;\n    bool isEven = true;\n    bool\
    \ isOdd = false;\n    bool isPositive = true;\n    bool isEven = true;\n    bool\
    \ isOdd = false;\n    bool isPositive = true;\n    bool isEven = true;\n    bool\
    \ isOdd = false;\n    bool isPositive = true;\n    bool isEven = true;\n    bool\
    \ isOdd = false;\n    bool isPositive = true;\n    bool isEven = true;\n    bool\
    \ isOdd = false;\n    bool isPositive = true;\n    bool isEven = true;\n    bool\
    \ isOdd = false;\n    bool isPositive = true;\n    bool isEven = true;\n    bool\
    \ isOdd = false;\n    bool isPositive = true;\n    bool isEven = true;\n    bool\
    \ isOdd = false;\n    bool isPositive = true;\n    bool isEven = true;\n    bool\
    \ isOdd = false;\n    bool isPositive = true;\n    bool isEven = true;\n    bool\
    \ isOdd = false;\n    bool isPositive = true;\n    bool isEven = true;\n    bool\
    \ isOdd = false;\n    bool isPositive = true;\n    bool isEven = true;\n    bool\
    \ isOdd = false;\n    bool isPositive = true;\n    bool isEven = true;\n    bool\
    \ isOdd = false;\n    bool isPositive = true;\n    bool isEven = true;\n    bool\
    \ isOdd = false;\n    bool isPositive = true;\n    bool isEven = true;\n    bool\
    \ isOdd = false;\n", "{\n    string result = \"\";\n    long remainder;\n    long\
    \ power;\n    long digit;\n    long counter;\n    bool flag = false;\n    bool\
    \ flag2 = false;\n    bool flag3 = false;\n    bool flag4 = false;\n    bool flag5\
    \ = false;\n    bool flag6 = false;\n    bool flag7 = false;\n    bool flag8 =\
    \ false;\n    bool flag9 = false;\n    bool flag10 = false;\n    bool flag11 =\
    \ false;\n    bool flag12 = false;\n    bool flag13 = false;\n    bool flag14\
    \ = false;\n    bool flag15 = false;\n    bool flag16 = false;\n    bool flag17\
    \ = false;\n    bool flag18 = false;\n    bool flag19 = false;\n    bool flag20\
    \ = false;\n    bool flag21 = false;\n    bool flag22 = false;\n    bool flag23\
    \ = false;\n    bool flag24 = false;\n    bool flag25 = false;\n    bool flag26\
    \ = false;\n    bool flag27 = false;\n    bool flag28 = false;\n    bool flag29\
    \ = false;\n    bool flag30 = false;\n    bool flag31 = false;\n    bool flag32\
    \ = false;\n    bool flag33 = false;\n    bool flag34 = false;\n    bool flag35\
    \ = false;\n    bool flag36 = false;\n    bool flag37 = false;\n    bool flag38\
    \ = false;\n    bool flag39 = false;\n    bool flag40 = false;\n    bool flag41\
    \ = false;\n    bool flag42 = false;\n    bool flag43 = false;\n    bool flag44\
    \ = false;\n    bool flag45 = false;\n    bool flag46 = false;\n    bool flag47\
    \ = false;\n    bool flag48 = false;\n    bool flag49 = false;\n    bool flag50\
    \ = false;\n    bool flag51 = false;\n    bool flag52 = false;\n    bool flag53\
    \ = false;\n    bool flag54 = false;\n    bool flag55 = false;\n    bool flag56\
    \ = false;\n    bool flag57 = false;\n    bool flag58 = false;\n    bool flag59\
    \ = false;\n    bool flag60 = false;\n    bool flag61 = false;\n    bool flag62\
    \ = false;\n    bool flag63 = false;\n    bool flag64 = false;\n    bool flag65\
    \ = false;\n    bool flag66 = false;\n    bool flag67 = false;\n    bool flag68\
    \ = false;\n    bool flag69 = false;\n    bool flag70 = false;\n    bool flag71\
    \ = false;\n    bool flag72 = false;\n    bool flag73 = false;\n    bool flag74\
    \ = false;\n    bool flag75 = false;\n    bool flag76 = false;\n    bool flag77\
    \ = false;\n    bool flag78 = false;\n", "{\n    string binary = \"\";\n    long\
    \ remainder;\n    \n    while(decimal != 0)\n    {\n        remainder = decimal\
    \ % 2;\n        decimal /= 2;\n        binary += remainder;\n    }\n    \n   \
    \ string db = \"db\";\n    binary = db + binary;\n    \n    return binary;\n}",
  "{\n    string binary = \"\";\n    long remainder;\n    while(decimal != 0)\n  \
    \  {\n        remainder = decimal % 2;\n        decimal /= 2;\n        binary\
    \ += remainder;\n    }\n    binary = std.string.rep(binary,2);\n    binary = std.string.rep(binary,2);\n\
    \    binary = std.string.rep(binary,2);\n    binary = std.string.rep(binary,2);\n\
    \    binary = std.string.rep(binary,2);\n    binary = std.string.rep(binary,2);\n\
    \    binary = std.string.rep(binary,2);\n    binary = std.string.rep(binary,2);\n\
    \    binary = std.string.rep(binary,2);\n    binary = std.string.rep(binary,2);\n\
    \    binary = std.string.rep(binary,2);\n    binary = std.string.rep(binary,2);\n\
    \    binary = std.string.rep(binary,2);\n    binary = std.string.rep(binary,2);\n\
    \    binary = std.string.rep(binary,2);\n    binary = std.string.rep(binary,2);\n\
    \    binary = std.string.rep(binary,2);\n    binary = std.string.rep(binary,2);\n\
    \    binary = std.string.rep(binary,2);\n    binary = std.string.rep(binary,2);\n\
    \    binary = std.string.rep(binary,2);\n    binary = std.string.rep(binary,2);\n\
    \    binary = std.string.rep(binary,2);\n    binary = std.string.rep(binary,2);\n\
    \    binary = std.string.rep(binary,2);\n    binary = std.string.rep(binary,2);\n\
    \    binary = std.string.rep(binary,2);\n    binary = std.string.rep(binary,2);\n\
    \    binary = std.string.rep(binary,2);\n    binary = std.string.rep(binary,2);\n\
    \    binary = std.string.rep(binary,2);\n    binary = std.string.rep(binary,2);\n\
    \    binary = std.string.rep(binary,2);\n    binary = std.string.rep(binary,2);\n\
    \    binary = std.string.rep(binary,2);\n    binary = std.string.rep(binary,2);\n\
    \    binary = std.string.rep(binary,2);\n    binary = std.string.rep(binary,2);\n\
    \    binary = std.string.rep(binary,2);\n    ", "{\n    string result = \"\";\n\
    \    long remainder;\n    long power;\n    long temp;\n    long digit;\n    bool\
    \ isNegative = false;\n    bool isZero = false;\n    bool isOne = false;\n   \
    \ bool isTwo = false;\n    bool isThree = false;\n    bool isFour = false;\n \
    \   bool isFive = false;\n    bool isSix = false;\n    bool isSeven = false;\n\
    \    bool isEight = false;\n    bool isNine = false;\n    bool isTen = false;\n\
    \    bool isEleven = false;\n    bool isTwelve = false;\n    bool isThirteen =\
    \ false;\n    bool isFourteen = false;\n    bool isFifteen = false;\n    bool\
    \ isSixteen = false;\n    bool isSeventeen = false;\n    bool isEighteen = false;\n\
    \    bool isNineteen = false;\n    bool isTwenty = false;\n    bool isTwentyOne\
    \ = false;\n    bool isTwentyTwo = false;\n    bool isTwentyThree = false;\n \
    \   bool isTwentyFour = false;\n    bool isTwentyFive = false;\n    bool isTwentySix\
    \ = false;\n    bool isTwentySeven = false;\n    bool isTwentyEight = false;\n\
    \    bool isTwentyNine = false;\n    bool isThirty = false;\n    bool isThirtyOne\
    \ = false;\n    bool isThirtyTwo = false;\n    bool isThirtyThree = false;\n \
    \   bool isThirtyFour = false;\n    bool isThirtyFive = false;\n    bool isThirtySix\
    \ = false;\n    bool isThirtySeven = false;\n    bool isThirtyEight = false;\n\
    \    bool isThirtyNine = false;\n    bool isFourty = false;\n    bool isFourtyOne\
    \ = false;\n    bool isFourtyTwo = false;\n    bool isFourtyThree = false;\n \
    \   bool isFourtyFour = false;\n    bool isFourtyFive = false;\n    bool isFourtySix\
    \ = false;\n    bool isFourtySeven = false;\n    bool isFourtyEight = false;\n\
    \    bool isFourtyNine = false;\n    bool isFifty = false;\n    bool isFiftyOne\
    \ = false;\n    bool isFiftyTwo = false;\n    bool isFiftyThree = false;\n   \
    \ bool isFiftyFour = false;\n    bool isFiftyFive = false;\n    bool isFiftySix\
    \ = false;\n    bool isFiftySeven = false;\n    bool ", "{\n    string result\
    \ = \"\";\n    long remainder;\n    long temp;\n    \n    while(decimal != 0)\n\
    \    {\n        remainder = decimal % 2;\n        temp = decimal / 2;\n      \
    \  decimal -= temp;\n        result += char(remainder);\n    }\n    \n    result\
    \ += \"db\";\n    \n    return result;\n}", "{\n    string binary = \"\";\n  \
    \  long remainder;\n    long temp;\n    long temp2;\n    long temp3;\n    long\
    \ temp4;\n    long temp5;\n    long temp6;\n    long temp7;\n    long temp8;\n\
    \    long temp9;\n    long temp10;\n    long temp11;\n    long temp12;\n    long\
    \ temp13;\n    long temp14;\n    long temp15;\n    long temp16;\n    long temp17;\n\
    \    long temp18;\n    long temp19;\n    long temp20;\n    long temp21;\n    long\
    \ temp22;\n    long temp23;\n    long temp24;\n    long temp25;\n    long temp26;\n\
    \    long temp27;\n    long temp28;\n    long temp29;\n    long temp30;\n    long\
    \ temp31;\n    long temp32;\n    long temp33;\n    long temp34;\n    long temp35;\n\
    \    long temp36;\n    long temp37;\n    long temp38;\n    long temp39;\n    long\
    \ temp40;\n    long temp41;\n    long temp42;\n    long temp43;\n    long temp44;\n\
    \    long temp45;\n    long temp46;\n    long temp47;\n    long temp48;\n    long\
    \ temp49;\n    long temp50;\n    long temp51;\n    long temp52;\n    long temp53;\n\
    \    long temp54;\n    long temp55;\n    long temp56;\n    long temp57;\n    long\
    \ temp58;\n    long temp59;\n    long temp60;\n    long temp61;\n    long temp62;\n\
    \    long temp63;\n    long temp64;\n    long temp65;\n    long temp66;\n    long\
    \ temp67;\n    long temp68;\n    long temp69;\n    long temp70;\n    long temp71;\n\
    \    long temp72;\n    long temp73;\n    long temp74;\n    long temp75;\n    long\
    \ temp76;\n    long temp77;\n    long temp78;\n    long temp79;\n    long temp80;\n\
    \    long temp81;\n    long temp82;\n    long temp83;\n    long temp84;\n    long\
    \ temp85;\n    long temp86;\n    long ", "{\n    string binary = \"\";\n    long\
    \ remainder;\n    \n    while(decimal != 0)\n    {\n        remainder = decimal\
    \ % 2;\n        decimal /= 2;\n        binary += remainder;\n    }\n    \n   \
    \ binary = std.string.format(binary);\n    binary = std.string.format(\"db%s\"\
    , binary);\n    \n    return binary;\n}\n</code>\n<|/ a |>\n<| c |>\nThis does\
    \ not work. Try it with `decimal_to_binary(-10)`.\n<|/ c |>\n<| c |>\nI tested\
    \ it and it works fine. Can you give me an example where it fails?\n<|/ c |>\n\
    <| c |>\n`decimal_to_binary(-10)` returns `
  "{\n    string result = \"\";\n    long remainder;\n    \n    while(decimal != 0)\n\
    \    {\n        remainder = decimal % 2;\n        decimal /= 2;\n        result\
    \ += char(remainder);\n    }\n    \n    result += \"db\";\n    \n    return result;\n\
    }", "{\n    string result = \"\";\n    long remainder;\n    long power;\n    long\
    \ temp;\n    long temp2;\n    long temp3;\n    long temp4;\n    long temp5;\n\
    \    long temp6;\n    long temp7;\n    long temp8;\n    long temp9;\n    long\
    \ temp10;\n    long temp11;\n    long temp12;\n    long temp13;\n    long temp14;\n\
    \    long temp15;\n    long temp16;\n    long temp17;\n    long temp18;\n    long\
    \ temp19;\n    long temp20;\n    long temp21;\n    long temp22;\n    long temp23;\n\
    \    long temp24;\n    long temp25;\n    long temp26;\n    long temp27;\n    long\
    \ temp28;\n    long temp29;\n    long temp30;\n    long temp31;\n    long temp32;\n\
    \    long temp33;\n    long temp34;\n    long temp35;\n    long temp36;\n    long\
    \ temp37;\n    long temp38;\n    long temp39;\n    long temp40;\n    long temp41;\n\
    \    long temp42;\n    long temp43;\n    long temp44;\n    long temp45;\n    long\
    \ temp46;\n    long temp47;\n    long temp48;\n    long temp49;\n    long temp50;\n\
    \    long temp51;\n    long temp52;\n    long temp53;\n    long temp54;\n    long\
    \ temp55;\n    long temp56;\n    long temp57;\n    long temp58;\n    long temp59;\n\
    \    long temp60;\n    long temp61;\n    long temp62;\n    long temp63;\n    long\
    \ temp64;\n    long temp65;\n    long temp66;\n    long temp67;\n    long temp68;\n\
    \    long temp69;\n    long temp70;\n    long temp71;\n    long temp72;\n    long\
    \ temp73;\n    long temp74;\n    long temp75;\n    long temp76;\n    long temp77;\n\
    \    long temp78;\n    long temp79;\n    long temp80;\n    long temp81;\n    long\
    \ temp82;\n    long temp83;\n    long temp84;\n    long temp85;\n    long temp86",
  "{\n    string binary = \"\";\n    long remainder;\n    long temp;\n    long power;\n\
    \    long digit;\n    bool isNegative = false;\n    \n    if(decimal < 0)\n  \
    \  {\n        isNegative = true;\n        decimal = -decimal;\n    }\n    \n \
    \   while(decimal != 0)\n    {\n        remainder = decimal%2;\n        temp =\
    \ decimal/2;\n        power = temp;\n        digit = remainder;\n        \n  \
    \      while(temp != 0)\n        {\n            power *= 10;\n            digit\
    \ = digit*2;\n            temp--;\n        }\n        \n        if(isNegative)\n\
    \        {\n            binary = char.ToLower(remainder) + char.ToLower(char.ToLower(digit))\
    \ + binary;\n        }\n        else\n        {\n            binary = char.ToLower(char.ToLower(digit))\
    \ + binary;\n        }\n        \n        decimal = power;\n    }\n    \n    if(isNegative)\n\
    \    {\n        binary = \"-\" + binary;\n    }\n    \n    return binary;\n}\n\
    </code>\n<|/ a tags=c#,algorithm |>\n<| c |>\nThis code does not work for negative\
    \ numbers. Try with -128.\n<|/ c |>\n<| c |>\nIt works for negative numbers. Try\
    \ with -128.\n<|/ c |>\n<| c |>\nIt works for negative numbers. Try with -128.\n\
    <|/ c |>\n<| c |>\nIt works for negative numbers. Try with -128.\n<|/ c |>\n<|\
    \ c |>\nIt works for negative numbers. Try with -128.\n<|/ c |>\n<| a tags=c#,algorithm\
    \ |>\n<code>\npublic static string DecimalToBinary(int number)\n{\n    string\
    \ binary = \"\";\n    int remainder;\n    int temp;\n    int power;\n    int digit;\n\
    \    bool isNegative = false;", "{\n    string binary = \"\";\n    long remainder;\n\
    \    while(decimal != 0)\n    {\n        remainder = decimal % 2;\n        decimal\
    \ /= 2;\n        binary += remainder;\n    }\n    return binary;\n}", "{\n   \
    \ string binary = \"\";\n    long remainder;\n    long quotient;\n    long temp;\n\
    \    long power;\n    long digit;\n    long i;\n    long j;\n    long k;\n   \
    \ long l;\n    long m;\n    long n;\n    long o;\n    long p;\n    long q;\n \
    \   long r;\n    long s;\n    long t;\n    long u;\n    long v;\n    long w;\n\
    \    long x;\n    long y;\n    long z;\n    long A;\n    long B;\n    long C;\n\
    \    long D;\n    long E;\n    long F;\n    long G;\n    long H;\n    long I;\n\
    \    long J;\n    long K;\n    long L;\n    long M;\n    long N;\n    long O;\n\
    \    long P;\n    long Q;\n    long R;\n    long S;\n    long T;\n    long U;\n\
    \    long V;\n    long W;\n    long X;\n    long Y;\n    long Z;\n    long AA;\n\
    \    long BB;\n    long CC;\n    long DD;\n    long EE;\n    long FF;\n    long\
    \ GG;\n    long HH;\n    long II;\n    long JJ;\n    long KK;\n    long LL;\n\
    \    long MM;\n    long NN;\n    long OO;\n    long PP;\n    long QQ;\n    long\
    \ RR;\n    long SS;\n    long TT;\n    long UU;\n    long VV;\n    long WW;\n\
    \    long XX;\n    long YY;\n    long ZZ;\n    long AAA;\n    long BBB;\n    long\
    \ CCC;\n    long DDD;\n    long EEE;\n    long FFF;\n    long GGG;\n    long HHH;\n\
    \    long III;\n    long JJJ;\n    long KKK;\n    long LLL;\n    long MMM;\n \
    \   long NNN;\n    long OOO;\n    long PPP;\n    long QQQ;\n    long RRR;\n  \
    \  long SSS;\n    long TTT;\n    long UUU;\n    long VVV;\n    long WWW;\n   \
    \ long XXX;\n", "{\n    string binary = \"\";\n    long remainder;\n    while(decimal\
    \ != 0)\n    {\n        remainder = decimal % 2;\n        decimal /= 2;\n    \
    \    binary += remainder;\n    }\n    binary = std.string.format(binary);\n  \
    \  binary = std.string.format(\"db%s\", binary);\n    return binary;\n}", "{\n\
    \    string binary = \"\";\n    long remainder;\n    long temp;\n    bool isNegative\
    \ = false;\n    bool isEven = false;\n    bool isOdd = false;\n    bool isPositive\
    \ = false;\n    bool isZero = false;\n    bool isDecimal = false;\n    bool isBinary\
    \ = false;\n    bool isDecimalOrBinary = false;\n    bool isDecimalOrBinaryOrZero\
    \ = false;\n    bool isDecimalOrBinaryOrZeroOrNegative = false;\n    bool isDecimalOrBinaryOrZeroOrNegativeOrEven\
    \ = false;\n    bool isDecimalOrBinaryOrZeroOrNegativeOrEvenOrOdd = false;\n \
    \   bool isDecimalOrBinaryOrZeroOrNegativeOrEvenOrOddOrDecimal = false;\n    bool\
    \ isDecimalOrBinaryOrZeroOrNegativeOrEvenOrOddOrDecimalOrBinary = false;\n   \
    \ bool isDecimalOrBinaryOrZeroOrNegativeOrEvenOrOddOrDecimalOrBinaryOrZero = false;\n\
    \    bool isDecimalOrBinaryOrZeroOrNegativeOrEvenOrOddOrDecimalOrBinaryOrZeroOrNegative\
    \ = false;\n    bool isDecimalOrBinaryOrZeroOrNegativeOrEvenOrOddOrDecimalOrBinaryOrZeroOrNegativeOrEven\
    \ = false;\n    bool isDecimalOrBinaryOrZeroOrNegativeOrEvenOrOddOrDecimalOrBinaryOrZeroOrNegativeOrEvenOrOdd\
    \ = false;\n    bool isDecimalOrBinaryOrZeroOrNegativeOrEvenOrOddOrDecimalOrBinaryOrZeroOrNegativeOrEvenOrOddOrDecimal\
    \ = false;\n    bool isDecimalOrBinaryOrZeroOrNegativeOrEvenOrOddOrDecimalOrBinaryOrZeroOrNegativeOrEvenOrOddOrDecimalOrBinary\
    \ = false;\n    bool isDecimalOrBinaryOrZeroOrNegativeOrEvenOrOddOrDecimalOrBinaryOrZeroOrNegativeOrEvenOrOddOrDecimalOrBinaryOrZero\
    \ = false;\n    bool isDecimalOrBinaryOrZeroOrNegativeOrEvenOrOddOrDecimalOrBinaryOrZeroOrNegativeOrEvenOrOddOrDecimalOrBinaryOrZeroOrNegative\
    \ = false;\n    bool isDecimalOrBinaryOrZeroOrNegativeOrEvenOrOddOrDecimalOrBinaryOrZeroOrNegativeOrEvenOrOddOrDecimalOrBinaryOrZeroOrNegativeOrEven\
    \ = false;\n    bool isDecimalOrBinaryOrZeroOrNegativeOrEvenOrOddOrDecimalOrBinaryOrZeroOrNegativeOrEvenOrOddOrDecimalOrBinaryOrZeroOrNegativeOrEvenOrOdd\
    \ = false;\n    bool isDecimalOrBinaryOrZeroOrNegativeOrEvenOrOddOrDecimal", "{\n\
    \    string binary = \"\";\n    long remainder;\n    long temp;\n    long temp2;\n\
    \    long temp3;\n    long temp4;\n    long temp5;\n    long temp6;\n    long\
    \ temp7;\n    long temp8;\n    long temp9;\n    long temp10;\n    long temp11;\n\
    \    long temp12;\n    long temp13;\n    long temp14;\n    long temp15;\n    long\
    \ temp16;\n    long temp17;\n    long temp18;\n    long temp19;\n    long temp20;\n\
    \    long temp21;\n    long temp22;\n    long temp23;\n    long temp24;\n    long\
    \ temp25;\n    long temp26;\n    long temp27;\n    long temp28;\n    long temp29;\n\
    \    long temp30;\n    long temp31;\n    long temp32;\n    long temp33;\n    long\
    \ temp34;\n    long temp35;\n    long temp36;\n    long temp37;\n    long temp38;\n\
    \    long temp39;\n    long temp40;\n    long temp41;\n    long temp42;\n    long\
    \ temp43;\n    long temp44;\n    long temp45;\n    long temp46;\n    long temp47;\n\
    \    long temp48;\n    long temp49;\n    long temp50;\n    long temp51;\n    long\
    \ temp52;\n    long temp53;\n    long temp54;\n    long temp55;\n    long temp56;\n\
    \    long temp57;\n    long temp58;\n    long temp59;\n    long temp60;\n    long\
    \ temp61;\n    long temp62;\n    long temp63;\n    long temp64;\n    long temp65;\n\
    \    long temp66;\n    long temp67;\n    long temp68;\n    long temp69;\n    long\
    \ temp70;\n    long temp71;\n    long temp72;\n    long temp73;\n    long temp74;\n\
    \    long temp75;\n    long temp76;\n    long temp77;\n    long temp78;\n    long\
    \ temp79;\n    long temp80;\n    long temp81;\n    long temp82;\n    long temp83;\n\
    \    long temp84;\n    long temp85;\n    long temp86;\n    long ", "{\n    string\
    \ binary = \"\";\n    long remainder;\n    \n    while(decimal != 0)\n    {\n\
    \        remainder = decimal % 2;\n        decimal /= 2;\n        binary += remainder;\n\
    \    }\n    \n    return binary;\n}", "{\n    string result = \"\";\n    long\
    \ remainder;\n    long digit;\n    long power;\n    long base;\n    bool isNegative\
    \ = false;\n    bool isNegativeFound = false;\n    bool isZero = false;\n    bool\
    \ isZeroFound = false;\n    bool isOne = false;\n    bool isOneFound = false;\n\
    \    bool isTwo = false;\n    bool isTwoFound = false;\n    bool isThree = false;\n\
    \    bool isThreeFound = false;\n    bool isFour = false;\n    bool isFourFound\
    \ = false;\n    bool isFive = false;\n    bool isFiveFound = false;\n    bool\
    \ isSix = false;\n    bool isSixFound = false;\n    bool isSeven = false;\n  \
    \  bool isSevenFound = false;\n    bool isEight = false;\n    bool isEightFound\
    \ = false;\n    bool isNine = false;\n    bool isNineFound = false;\n    bool\
    \ isDecimal = false;\n    bool isDecimalFound = false;\n    bool isBinary = false;\n\
    \    bool isBinaryFound = false;\n    bool isOctal = false;\n    bool isOctalFound\
    \ = false;\n    bool isHex = false;\n    bool isHexFound = false;\n    bool isDb\
    \ = false;\n    bool isDbFound = false;\n    bool isDb = false;\n    bool isDb\
    \ = false;\n    bool isDb = false;\n    bool isDb = false;\n    bool isDb = false;\n\
    \    bool isDb = false;\n    bool isDb = false;\n    bool isDb = false;\n    bool\
    \ isDb = false;\n    bool isDb = false;\n    bool isDb = false;\n    bool isDb\
    \ = false;\n    bool isDb = false;\n    bool isDb = false;\n    bool isDb = false;\n\
    \    bool isDb = false;\n    bool isDb = false;\n    bool isDb = false;\n    bool\
    \ isDb = false;\n    bool isDb = false;\n    bool isDb = false;\n    bool isDb\
    \ = false;\n    bool isDb = false;\n    bool isDb = false;\n    bool isDb = false;\n\
    \    bool isDb = false;\n    bool isDb = false;\n    bool isDb = false;\n    bool\
    \ isDb = false;\n    bool isDb = false;\n    bool isDb = false;\n    bool isDb\
    \ = false;\n    bool isDb = false;\n    bool isDb = false;\n    bool isDb = false;\n\
    \    bool isDb = false;\n    bool isDb = false;\n    bool is", "{\n    string\
    \ result = \"\";\n    long remainder;\n    long temp;\n    bool isNegative = false;\n\
    \    bool isEven = false;\n    bool isOdd = false;\n    bool isPositive = false;\n\
    \    bool isZero = false;\n    bool isOne = false;\n    bool isTwo = false;\n\
    \    bool isThree = false;\n    bool isFour = false;\n    bool isFive = false;\n\
    \    bool isSix = false;\n    bool isSeven = false;\n    bool isEight = false;\n\
    \    bool isNine = false;\n    bool isTen = false;\n    bool isEleven = false;\n\
    \    bool isTwelve = false;\n    bool isThirteen = false;\n    bool isFourteen\
    \ = false;\n    bool isFifteen = false;\n    bool isSixteen = false;\n    bool\
    \ isSeventeen = false;\n    bool isEighteen = false;\n    bool isNineteen = false;\n\
    \    bool isTwenty = false;\n    bool isTwentyOne = false;\n    bool isTwentyTwo\
    \ = false;\n    bool isTwentyThree = false;\n    bool isTwentyFour = false;\n\
    \    bool isTwentyFive = false;\n    bool isTwentySix = false;\n    bool isTwentySeven\
    \ = false;\n    bool isTwentyEight = false;\n    bool isTwentyNine = false;\n\
    \    bool isThirty = false;\n    bool isThirtyOne = false;\n    bool isThirtyTwo\
    \ = false;\n    bool isThirtyThree = false;\n    bool isThirtyFour = false;\n\
    \    bool isThirtyFive = false;\n    bool isThirtySix = false;\n    bool isThirtySeven\
    \ = false;\n    bool isThirtyEight = false;\n    bool isThirtyNine = false;\n\
    \    bool isForty = false;\n    bool isFortyOne = false;\n    bool isFortyTwo\
    \ = false;\n    bool isFortyThree = false;\n    bool isFortyFour = false;\n  \
    \  bool isFortyFive = false;\n    bool isFortySix = false;\n    bool isFortySeven\
    \ = false;\n    bool isFortyEight = false;\n    bool isFortyNine = false;\n  \
    \  bool isFifty = false;\n    bool isFiftyOne = false;\n    bool isFiftyTwo =\
    \ false;\n    bool isFiftyThree = false;\n    bool isFiftyFour = false;\n    bool\
    \ isFiftyFive = false;\n    bool isFiftySix = false;\n    bool is", "{\n    string\
    \ result = \"\";\n    long remainder;\n    \n    while (decimal > 0)\n    {\n\
    \        remainder = decimal % 2;\n        decimal /= 2;\n        result += char(remainder);\n\
    \    }\n    \n    result += \"db\";\n    \n    return result;\n}\n/*\n    You\
    \ will be given a string of characters and your task is to convert it to decimal\
    \ form.\n    The function should return a long integer representing the decimal\
    \ value of the string.\n    \n    There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    The extra characters\
    \ are there to help with the format.", "{\n    string binary = \"\";\n    long\
    \ remainder;\n    long power = 1;\n    long temp;\n    \n    while(decimal !=\
    \ 0)\n    {\n        remainder = decimal % 2;\n        temp = decimal / 2;\n \
    \       decimal -= temp;\n        power = power * 10;\n        \n        while(temp\
    \ != 0)\n        {\n            binary = temp % 2 + binary;\n            temp\
    \ = temp / 2;\n        }\n        \n        binary = remainder + binary + \"db\"\
    ;\n    }\n    \n    return binary;\n}", "{\n    string result = \"\";\n    long\
    \ remainder;\n    \n    while(decimal > 0)\n    {\n        remainder = decimal\
    \ % 2;\n        decimal /= 2;\n        result += char(remainder);\n    }\n   \
    \ \n    result += \"db\";\n    \n    return result;\n}", "{\n    string result\
    \ = \"\";\n    long remainder;\n    bool isNegative = false;\n    long power =\
    \ 1;\n    long temp;\n    while(decimal != 0)\n    {\n        remainder = decimal\
    \ % 2;\n        decimal = decimal / 2;\n        if(decimal > 0)\n        {\n \
    \           temp = power;\n            power = power * 10;\n            temp =\
    \ temp + power;\n            power = power * 10;\n            temp = temp + power;\n\
    \            power = power * 10;\n            temp = temp + power;\n         \
    \   power = power * 10;\n            temp = temp + power;\n            power =\
    \ power * 10;\n            temp = temp + power;\n            power = power * 10;\n\
    \            temp = temp + power;\n            power = power * 10;\n         \
    \   temp = temp + power;\n            power = power * 10;\n            temp =\
    \ temp + power;\n            power = power * 10;\n            temp = temp + power;\n\
    \            power = power * 10;\n            temp = temp + power;\n         \
    \   power = power * 10;\n            temp = temp + power;\n            power =\
    \ power * 10;\n            temp = temp + power;\n            power = power * 10;\n\
    \            temp = temp + power;\n            power = power * 10;\n         \
    \   temp = temp + power;\n            power = power * 10;\n            temp =\
    \ temp + power;\n            power = power * 10;\n            temp = temp + power;\n\
    \            power = power * 10;\n            temp = temp + power;\n         \
    \   power = power * 10;\n            temp = temp + power;\n            power =\
    \ power * 10;\n            temp = temp + power;\n            power = power * 10;\n\
    \            temp = temp + power;\n            power = power * 10;\n         \
    \   temp = temp + power;\n            power = power * 10;\n            temp =\
    \ temp + power;\n            power = power * 10;\n            temp = temp + power;\n\
    \            power = power * 10;\n            temp = temp + power;\n         \
    \   power = power * 10;\n            temp = temp + power;\n            power =\
    \ power * 10;\n            temp = temp + power;\n            power = power * 10;\n\
    \            temp = temp + power;\n            power = power * 10;\n         \
    \   temp = temp + power;\n            power = power * 10;\n            temp =\
    \ temp + power;\n            power = power * 10;\n            temp = temp + power;\n\
    \            power = power * 10;\n            temp = temp + power;\n         \
    \   power = power * 10;\n            temp = temp + power;\n", "{\n    string result\
    \ = \"\";\n    long remainder;\n    \n    while ((remainder = decimal % 2) ==\
    \ 0)\n    {\n        decimal /= 2;\n        result += \"0\";\n    }\n    \n  \
    \  while ((remainder = decimal % 10) != 0)\n    {\n        decimal /= 10;\n  \
    \      result += \"1\";\n    }\n    \n    result += \"db\";\n    \n    return\
    \ result;\n}\n</code>\n<|/ a |>\n<| a tags=c++,binary,decimal |>\n<code>\n#include\
    \ <iostream>\n#include <string>\nusing namespace std;", "{\n    string result\
    \ = \"\";\n    long remainder;\n    \n    while(decimal != 0)\n    {\n       \
    \ remainder = decimal % 2;\n        decimal /= 2;\n        result += char(remainder);\n\
    \    }\n    \n    result += \"db\";\n    \n    return result;\n}", "{\n    string\
    \ binary = \"\";\n    long remainder;\n    \n    while(decimal != 0)\n    {\n\
    \        remainder = decimal % 2;\n        decimal /= 2;\n        binary += remainder;\n\
    \    }\n    \n    return binary;\n}\n</code>\n<|/ a tags=c++,binary,decimal |>\n\
    <| a tags=c++,binary,decimal |>\n<code>\n#include <iostream>\n#include <string>\n\
    using namespace std;", "{\n    string result = \"\";\n    long remainder;\n  \
    \  long temp;\n    bool isNegative = false;\n    bool isEven = false;\n    bool\
    \ isOdd = false;\n    bool isPositive = false;\n    bool isZero = false;\n   \
    \ bool isOne = false;\n    bool isTwo = false;\n    bool isThree = false;\n  \
    \  bool isFour = false;\n    bool isFive = false;\n    bool isSix = false;\n \
    \   bool isSeven = false;\n    bool isEight = false;\n    bool isNine = false;\n\
    \    bool isTen = false;\n    bool isEleven = false;\n    bool isTwelve = false;\n\
    \    bool isThirteen = false;\n    bool isFourteen = false;\n    bool isFifteen\
    \ = false;\n    bool isSixteen = false;\n    bool isSeventeen = false;\n    bool\
    \ isEighteen = false;\n    bool isNineteen = false;\n    bool isTwenty = false;\n\
    \    bool isTwentyOne = false;\n    bool isTwentyTwo = false;\n    bool isTwentyThree\
    \ = false;\n    bool isTwentyFour = false;\n    bool isTwentyFive = false;\n \
    \   bool isTwentySix = false;\n    bool isTwentySeven = false;\n    bool isTwentyEight\
    \ = false;\n    bool isTwentyNine = false;\n    bool isThirty = false;\n    bool\
    \ isThirtyOne = false;\n    bool isThirtyTwo = false;\n    bool isThirtyThree\
    \ = false;\n    bool isThirtyFour = false;\n    bool isThirtyFive = false;\n \
    \   bool isThirtySix = false;\n    bool isThirtySeven = false;\n    bool isThirtyEight\
    \ = false;\n    bool isThirtyNine = false;\n    bool isFourty = false;\n    bool\
    \ isFourtyOne = false;\n    bool isFourtyTwo = false;\n    bool isFourtyThree\
    \ = false;\n    bool isFourtyFour = false;\n    bool isFourtyFive = false;\n \
    \   bool isFourtySix = false;\n    bool isFourtySeven = false;\n    bool isFourtyEight\
    \ = false;\n    bool isFourtyNine = false;\n    bool isFifty = false;\n    bool\
    \ isFiftyOne = false;\n    bool isFiftyTwo = false;\n    bool isFiftyThree = false;\n\
    \    bool isFiftyFour = false;\n    bool isFiftyFive = false;\n    bool isFiftySix\
    \ = false;\n    bool is", "{\n    string binary = \"\";\n    long remainder;\n\
    \    \n    while(decimal != 0)\n    {\n        remainder = decimal % 2;\n    \
    \    decimal /= 2;\n        binary += remainder;\n    }\n    \n    binary = std.string.format(binary);\n\
    \    \n    binary = std.string.format(\"db\" + binary);\n    \n    return binary;\n\
    }", "{\n    string result = \"\";\n    long remainder;\n    long power;\n    long\
    \ digit;\n    long digit2;\n    long digit3;\n    long digit4;\n    long digit5;\n\
    \    long digit6;\n    long digit7;\n    long digit8;\n    long digit9;\n    long\
    \ digit10;\n    long digit11;\n    long digit12;\n    long digit13;\n    long\
    \ digit14;\n    long digit15;\n    long digit16;\n    long digit17;\n    long\
    \ digit18;\n    long digit19;\n    long digit20;\n    long digit21;\n    long\
    \ digit22;\n    long digit23;\n    long digit24;\n    long digit25;\n    long\
    \ digit26;\n    long digit27;\n    long digit28;\n    long digit29;\n    long\
    \ digit30;\n    long digit31;\n    long digit32;\n    long digit33;\n    long\
    \ digit34;\n    long digit35;\n    long digit36;\n    long digit37;\n    long\
    \ digit38;\n    long digit39;\n    long digit40;\n    long digit41;\n    long\
    \ digit42;\n    long digit43;\n    long digit44;\n    long digit45;\n    long\
    \ digit46;\n    long digit47;\n    long digit48;\n    long digit49;\n    long\
    \ digit50;\n    long digit51;\n    long digit52;\n    long digit53;\n    long\
    \ digit54;\n    long digit55;\n    long digit56;\n    long digit57;\n    long\
    \ digit58;\n    long digit59;\n    long digit60;\n    long digit61;\n    long\
    \ digit62;\n    long digit63;\n    long digit64;\n    long digit65;\n    long\
    \ digit66;\n    long digit67;\n    long digit68;\n    long digit69;\n    long\
    \ digit70;\n    long digit71;\n    long digit72;\n    long digit73;\n    long\
    \ digit74;\n    long digit75;\n    long digit76;\n    long digit77;\n    long\
    \ digit78;\n    long digit79;\n    long digit80;\n    long digit81;\n    long\
    \ digit82;\n    long digit83;\n    long digit84;\n    long digit85;\n    long\
    \ digit86", "{\n    string result = \"\";\n    long remainder;\n    long power;\n\
    \    bool isNegative = false;\n    bool isEven = false;\n    bool isOdd = false;\n\
    \    bool isZero = false;\n    bool isOne = false;\n    bool isTwo = false;\n\
    \    bool isThree = false;\n    bool isFour = false;\n    bool isFive = false;\n\
    \    bool isSix = false;\n    bool isSeven = false;\n    bool isEight = false;\n\
    \    bool isNine = false;\n    bool isTen = false;\n    bool isEleven = false;\n\
    \    bool isTwelve = false;\n    bool isThirteen = false;\n    bool isFourteen\
    \ = false;\n    bool isFifteen = false;\n    bool isSixteen = false;\n    bool\
    \ isSeventeen = false;\n    bool isEighteen = false;\n    bool isNineteen = false;\n\
    \    bool isTwenty = false;\n    bool isTwentyOne = false;\n    bool isTwentyTwo\
    \ = false;\n    bool isTwentyThree = false;\n    bool isTwentyFour = false;\n\
    \    bool isTwentyFive = false;\n    bool isTwentySix = false;\n    bool isTwentySeven\
    \ = false;\n    bool isTwentyEight = false;\n    bool isTwentyNine = false;\n\
    \    bool isThirty = false;\n    bool isThirtyOne = false;\n    bool isThirtyTwo\
    \ = false;\n    bool isThirtyThree = false;\n    bool isThirtyFour = false;\n\
    \    bool isThirtyFive = false;\n    bool isThirtySix = false;\n    bool isThirtySeven\
    \ = false;\n    bool isThirtyEight = false;\n    bool isThirtyNine = false;\n\
    \    bool isForty = false;\n    bool isFortyOne = false;\n    bool isFortyTwo\
    \ = false;\n    bool isFortyThree = false;\n    bool isFortyFour = false;\n  \
    \  bool isFortyFive = false;\n    bool isFortySix = false;\n    bool isFortySeven\
    \ = false;\n    bool isFortyEight = false;\n    bool isFortyNine = false;\n  \
    \  bool isFifty = false;\n    bool isFiftyOne = false;\n    bool isFiftyTwo =\
    \ false;\n    bool isFiftyThree = false;\n    bool isFiftyFour = false;\n    bool\
    \ isFiftyFive = false;\n    bool isFiftySix = false;\n    bool isFiftySeven =\
    \ false;", "{\n    string binary = \"\";\n    long remainder;\n    \n    while(decimal\
    \ != 0)\n    {\n        remainder = decimal % 2;\n        decimal /= 2;\n    \
    \    binary += remainder;\n    }\n    \n    return binary;\n}", "{\n    string\
    \ result = \"\";\n    long remainder;\n    \n    while(decimal != 0)\n    {\n\
    \        remainder = decimal % 2;\n        decimal /= 2;\n        result += char(remainder);\n\
    \    }\n    \n    if(result.length() > 0)\n    {\n        result += 'b';\n   \
    \ }\n    \n    return result;\n}", "{\n    string result = \"\";\n    long remainder;\n\
    \    bool isNegative = false;\n    bool isEven = false;\n    bool isOdd = false;\n\
    \    bool isPositive = false;\n    bool isZero = false;\n    bool isOne = false;\n\
    \    bool isTwo = false;\n    bool isThree = false;\n    bool isFour = false;\n\
    \    bool isFive = false;\n    bool isSix = false;\n    bool isSeven = false;\n\
    \    bool isEight = false;\n    bool isNine = false;\n    bool isTen = false;\n\
    \    bool isEleven = false;\n    bool isTwelve = false;\n    bool isThirteen =\
    \ false;\n    bool isFourteen = false;\n    bool isFifteen = false;\n    bool\
    \ isSixteen = false;\n    bool isSeventeen = false;\n    bool isEighteen = false;\n\
    \    bool isNineteen = false;\n    bool isTwenty = false;\n    bool isTwentyOne\
    \ = false;\n    bool isTwentyTwo = false;\n    bool isTwentyThree = false;\n \
    \   bool isTwentyFour = false;\n    bool isTwentyFive = false;\n    bool isTwentySix\
    \ = false;\n    bool isTwentySeven = false;\n    bool isTwentyEight = false;\n\
    \    bool isTwentyNine = false;\n    bool isThirty = false;\n    bool isThirtyOne\
    \ = false;\n    bool isThirtyTwo = false;\n    bool isThirtyThree = false;\n \
    \   bool isThirtyFour = false;\n    bool isThirtyFive = false;\n    bool isThirtySix\
    \ = false;\n    bool isThirtySeven = false;\n    bool isThirtyEight = false;\n\
    \    bool isThirtyNine = false;\n    bool isForty = false;\n    bool isFortyOne\
    \ = false;\n    bool isFortyTwo = false;\n    bool isFortyThree = false;\n   \
    \ bool isFortyFour = false;\n    bool isFortyFive = false;\n    bool isFortySix\
    \ = false;\n    bool isFortySeven = false;\n    bool isFortyEight = false;\n \
    \   bool isFortyNine = false;\n    bool isFifty = false;\n    bool isFiftyOne\
    \ = false;\n    bool isFiftyTwo = false;\n    bool isFiftyThree = false;\n   \
    \ bool isFiftyFour = false;\n    bool isFiftyFive = false;\n    bool isFiftySix\
    \ = false;\n    bool isFiftySeven", "{\n    string result = \"\";\n    long remainder;\n\
    \    long power;\n    long digit;\n    long base;\n    long i;\n    long j;\n\
    \    long k;\n    \n    base = decimal;\n    \n    while(base > 0)\n    {\n  \
    \      remainder = base % 2;\n        base = base / 2;\n        \n        power\
    \ = 1;\n        \n        for(i = remainder; i > 0; i--)\n        {\n        \
    \    digit = power;\n            power = power * 2;\n            \n          \
    \  for(j = digit; j > 0; j--)\n            {\n                k = j;\n       \
    \         \n                while(k >= base)\n                {\n            \
    \        k = k - base;\n                    \n                    if(k == 0)\n\
    \                    {\n                        result += \"1\";\n           \
    \             break;\n                    }\n                    else\n      \
    \              {\n                        result += \"0\";\n                 \
    \   }\n                }\n                \n                result += k;\n   \
    \         }\n        }\n    }\n    \n    result += \"db\";\n    \n    return result;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a tags=c++,algorithm,binary,decimal |>\n<code>\n\
    #include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>",
  "{\n    string result = \"\";\n    long remainder;\n    long temp;\n    \n    while(decimal\
    \ != 0)\n    {\n        remainder = decimal % 2;\n        decimal = decimal /\
    \ 2;\n        temp = remainder;\n        \n        if(temp > 9)\n        {\n \
    \           temp = temp - 10;\n        }\n        \n        result += to_string(temp);\n\
    \    }\n    \n    result += \"db\";\n    \n    return result;\n}", "{\n    string\
    \ result = \"\";\n    long remainder = decimal;\n    long counter = 1;\n    while(counter\
    \ <= decimal)\n    {\n        remainder = remainder % 2;\n        result += char(remainder);\n\
    \        remainder = remainder / 2;\n        counter++;\n    }\n    result +=\
    \ \"db\";\n    return result;\n}\n</code>\n<|/ a |>\n<| c |>\nThis code does not\
    \ work. `remainder` will never be `0` because `remainder = remainder / 2` will\
    \ always round down to `0`.\n<|/ c |>\n<| c |>\nThe code works, I tested it before\
    \ posting it. The remainder will never be 0 because remainder = remainder / 2\
    \ will always round down to 0.\n<|/ c |>\n<| c |>\nI tested it and it works. I\
    \ tested it before posting it. The remainder will never be 0 because remainder\
    \ = remainder / 2 will always round down to 0.\n<|/ c |>\n<| c |>\nI tested it\
    \ and it works. I tested it before posting it. The remainder will never be 0 because\
    \ remainder = remainder / 2 will always round down to 0.\n<|/ c |>\n<| c |>\n\
    I tested it and it works. I tested it before posting it. The remainder will never\
    \ be 0 because remainder = remainder / 2 will always round down to 0.\n<|/ c |>\n\
    <| a dscore=0 |>\n<code>\n#include <iostream>\n#include <string>\nusing namespace\
    \ std;", "{\n    string result = \"\";\n    long remainder;\n    \n    while(decimal\
    \ != 0)\n    {\n        remainder = decimal % 2;\n        decimal /= 2;\n    \
    \    \n        if(remainder == 1)\n        {\n            result += \"1\";\n \
    \       }\n        else\n        {\n            result += \"0\";\n        }\n\
    \    }\n    \n    if(result.length() > 1)\n    {\n        result += \"db\";\n\
    \    }\n    \n    return result;\n}", "{\n    string binary = \"\";\n    long\
    \ remainder;\n    long quotient;\n    long temp;\n    \n    while(decimal != 0)\n\
    \    {\n        remainder = decimal % 2;\n        quotient = decimal / 2;\n  \
    \      temp = remainder;\n        \n        while(temp != 0)\n        {\n    \
    \        binary += \"0\";\n            temp--;\n        }\n        \n        binary\
    \ += quotient;\n        decimal = quotient;\n    }\n    \n    return binary;\n\
    }", "{\n    string result = \"\";\n    long remainder;\n    long power = 1;\n\
    \    long temp;\n    bool isNegative = false;\n    bool isEven = false;\n    bool\
    \ isOdd = false;\n    bool isZero = false;\n    bool isOne = false;\n    bool\
    \ isTwo = false;\n    bool isThree = false;\n    bool isFour = false;\n    bool\
    \ isFive = false;\n    bool isSix = false;\n    bool isSeven = false;\n    bool\
    \ isEight = false;\n    bool isNine = false;\n    bool isTen = false;\n    bool\
    \ isEleven = false;\n    bool isTwelve = false;\n    bool isThirteen = false;\n\
    \    bool isFourteen = false;\n    bool isFifteen = false;\n    bool isSixteen\
    \ = false;\n    bool isSeventeen = false;\n    bool isEighteen = false;\n    bool\
    \ isNineteen = false;\n    bool isTwenty = false;\n    bool isTwentyOne = false;\n\
    \    bool isTwentyTwo = false;\n    bool isTwentyThree = false;\n    bool isTwentyFour\
    \ = false;\n    bool isTwentyFive = false;\n    bool isTwentySix = false;\n  \
    \  bool isTwentySeven = false;\n    bool isTwentyEight = false;\n    bool isTwentyNine\
    \ = false;\n    bool isThirty = false;\n    bool isThirtyOne = false;\n    bool\
    \ isThirtyTwo = false;\n    bool isThirtyThree = false;\n    bool isThirtyFour\
    \ = false;\n    bool isThirtyFive = false;\n    bool isThirtySix = false;\n  \
    \  bool isThirtySeven = false;\n    bool isThirtyEight = false;\n    bool isThirtyNine\
    \ = false;\n    bool isFourty = false;\n    bool isFourtyOne = false;\n    bool\
    \ isFourtyTwo = false;\n    bool isFourtyThree = false;\n    bool isFourtyFour\
    \ = false;\n    bool isFourtyFive = false;\n    bool isFourtySix = false;\n  \
    \  bool isFourtySeven = false;\n    bool isFourtyEight = false;\n    bool isFourtyNine\
    \ = false;\n    bool isFifty = false;\n    bool isFiftyOne = false;\n    bool\
    \ isFiftyTwo = false;\n    bool isFiftyThree = false;\n    bool isFiftyFour =\
    \ false;\n    bool isFiftyFive = false;\n    bool isFiftySix = false;\n    bool\
    \ is", "{\n    string result = \"\";\n    long remainder;\n    \n    while(decimal\
    \ != 0)\n    {\n        remainder = decimal % 2;\n        decimal /= 2;\n    \
    \    result += char(remainder);\n    }\n    \n    result += 'db';\n    \n    return\
    \ result;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThe question was about a specific\
    \ language, C#. Your answer does not answer the question.\n<|/ c |>\n<| c |>\n\
    The question was about a specific language, C#. Your answer does not answer the\
    \ question.\n<|/ c |>\n<| c |>\nThe question was about a specific language, C#.\
    \ Your answer does not answer the question.\n<|/ c |>\n<| c |>\nThe question was\
    \ about a specific language, C#. Your answer does not answer the question.\n<|/\
    \ c |>\n<| c |>\nThe question was about a specific language, C#. Your answer does\
    \ not answer the question.\n<|/ c |>\n<| a dscore=0 |>\n<code>\npublic string\
    \ DecimalToBinary(int number)\n{\n    string result = \"\";\n    while(number\
    \ != 0)\n    {\n        int remainder = number % 2;\n        number /= 2;\n  \
    \      result += remainder;\n    }\n    result += 'db';\n    return result;\n\
    }\n</code>\n<|/ a tags=c#,algorithm |>\n<| c |>\nThe question was about a specific\
    \ language, C#. Your answer does not answer the question.\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>\npublic static string DecimalToBinary(int number)\n{\n    string\
    \ result = \"\";\n    while(number != 0)\n    {\n        int remainder = number\
    \ % 2;\n        number /= 2;\n        result += remainder;\n    }\n    result\
    \ += 'db';\n    return result;\n}\n</code>\n<|/ a tags=c#,algorithm |>\n<| c |>\n\
    The question was about a specific language, C#. Your answer does not answer the\
    \ question.\n<|/ c |>\n<| a tags=c#,algorithm |>\n<code>\npublic static string\
    \ DecimalToBinary(int number)\n{\n    string result = \"\";\n    while(number\
    \ != 0)\n    {\n        int remainder = number % 2;\n        number /= 2;\n  \
    \      result += remainder;\n    }\n    result += 'db';\n    return result;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThe question was about a specific language,\
    \ C#. Your answer does not ", "{\n    string binary = \"\";\n    long remainder;\n\
    \    while(decimal != 0)\n    {\n        remainder = decimal%2;\n        decimal\
    \ /= 2;\n        binary += remainder;\n    }\n    return binary;\n}\n</code>\n\
    <|/ a tags=c++,algorithm |>\n<| c |>\nThis doesn't work. Try it with decimal `0`.\n\
    <|/ c |>\n<| c |>\nI tested it and it works fine. Can you give me an example where\
    \ it fails?\n<|/ c |>\n<| c |>\nI tested it with decimal `0` and it returns `1`\
    \ instead of `0`.\n<|/ c |>\n<| c |>\nI tested it with decimal `0` and it returns\
    \ `1` instead of `0`. Can you give me an example where it fails?\n<|/ c |>\n<|\
    \ c |>\nI tested it with decimal `0` and it returns `1` instead of `0`. Can you\
    \ give me an example where it fails?\n<|/ c |>\n<| a dscore=2 |>\n<code>\n#include\
    \ <iostream>\n#include <string>\n#include <sstream>\nusing namespace std;", "{\n\
    \    string binary = \"\";\n    long remainder;\n    long quotient;\n    long\
    \ power;\n    long i;\n    long j;\n    long k;\n    long l;\n    long m;\n  \
    \  long n;\n    long o;\n    long p;\n    long q;\n    long r;\n    long s;\n\
    \    long t;\n    long u;\n    long v;\n    long w;\n    long x;\n    long y;\n\
    \    long z;\n    long A;\n    long B;\n    long C;\n    long D;\n    long E;\n\
    \    long F;\n    long G;\n    long H;\n    long I;\n    long J;\n    long K;\n\
    \    long L;\n    long M;\n    long N;\n    long O;\n    long P;\n    long Q;\n\
    \    long R;\n    long S;\n    long T;\n    long U;\n    long V;\n    long W;\n\
    \    long X;\n    long Y;\n    long Z;\n    long AA;\n    long BB;\n    long CC;\n\
    \    long DD;\n    long EE;\n    long FF;\n    long GG;\n    long HH;\n    long\
    \ II;\n    long JJ;\n    long KK;\n    long LL;\n    long MM;\n    long NN;\n\
    \    long OO;\n    long PP;\n    long QQ;\n    long RR;\n    long SS;\n    long\
    \ TT;\n    long UU;\n    long VV;\n    long WW;\n    long XX;\n    long YY;\n\
    \    long ZZ;\n    long AAA;\n    long BBB;\n    long CCC;\n    long DDD;\n  \
    \  long EEE;\n    long FFF;\n    long GGG;\n    long HHH;\n    long III;\n   \
    \ long JJJ;\n    long KKK;\n    long LLL;\n    long MMM;\n    long NNN;\n    long\
    \ OOO;\n    long PPP;\n    long QQQ;\n    long RRR;\n    long SSS;\n    long TTT;\n\
    \    long UUU;\n    long VVV;\n    long WWW;\n    long XXX;\n    long YYY;\n \
    \   long ZZZ;", "{\n    string result = \"\";\n    long remainder;\n    long power;\n\
    \    long digit;\n    long power2;\n    long power3;\n    long power4;\n    long\
    \ power5;\n    long power6;\n    long power7;\n    long power8;\n    long power9;\n\
    \    long power10;\n    long power11;\n    long power12;\n    long power13;\n\
    \    long power14;\n    long power15;\n    long power16;\n    long power17;\n\
    \    long power18;\n    long power19;\n    long power20;\n    long power21;\n\
    \    long power22;\n    long power23;\n    long power24;\n    long power25;\n\
    \    long power26;\n    long power27;\n    long power28;\n    long power29;\n\
    \    long power30;\n    long power31;\n    long power32;\n    long power33;\n\
    \    long power34;\n    long power35;\n    long power36;\n    long power37;\n\
    \    long power38;\n    long power39;\n    long power40;\n    long power41;\n\
    \    long power42;\n    long power43;\n    long power44;\n    long power45;\n\
    \    long power46;\n    long power47;\n    long power48;\n    long power49;\n\
    \    long power50;\n    long power51;\n    long power52;\n    long power53;\n\
    \    long power54;\n    long power55;\n    long power56;\n    long power57;\n\
    \    long power58;\n    long power59;\n    long power60;\n    long power61;\n\
    \    long power62;\n    long power63;\n    long power64;\n    long power65;\n\
    \    long power66;\n    long power67;\n    long power68;\n    long power69;\n\
    \    long power70;\n    long power71;\n    long power72;\n    long power73;\n\
    \    long power74;\n    long power75;\n    long power76;\n    long power77;\n\
    \    long power78;\n    long power79;\n    long power80;\n    long power81;\n\
    \    long power82;\n    long power83;\n    long power84;\n    long power85;\n\
    \    long power86", "{\n    string binary = \"\";\n    long remainder;\n    long\
    \ temp;\n    \n    while(decimal != 0)\n    {\n        remainder = decimal % 2;\n\
    \        temp = decimal / 2;\n        decimal -= temp;\n        \n        binary\
    \ += to_string(remainder);\n    }\n    \n    binary = binary + \"db\";\n    \n\
    \    return binary;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis does not provide\
    \ an answer to the question. To critique or request clarification from an author,\
    \ leave a comment below their post. - [From Review](/review/low-quality-posts/27812180)\n\
    <|/ c |>\n<| c |>\nI believe it does answer the question. He is asking how to\
    \ convert a decimal number to a binary number in C#. He has already written the\
    \ code to do that. He is asking how to do it better. He has already written the\
    \ code to do that. He is asking how to do it better. He has already written the\
    \ code to do that. He is asking how to do it better. He has already written the\
    \ code to do that. He is asking how to do it better. He has already written the\
    \ code to do that. He is asking how to do it better. He has already written the\
    \ code to do that. He is asking how to do it better. He has already written the\
    \ code to do that. He is asking how to do it better. He has already written the\
    \ code to do that. He is asking how to do it better. He has already written the\
    \ code to do that. He is asking how to do it better. He has already written the\
    \ code to do that. He is asking how to do it better. He has already written the\
    \ code to do that. He is asking how to do it better. He has already written the\
    \ code to do that. He is asking how to do it better. He has already written the\
    \ code to do that. He is asking how to do it better. He has already written the\
    \ code to do that. He is asking how to do it better. He has already written the\
    \ code to do that. He is asking how to do it better. He has already written the\
    \ code to do that. He is asking how to do it better. He has already written the\
    \ code to do that. He is asking how to do it better. He has already written the\
    \ code to do that. He is ", "{\n    string result = \"\";\n    long remainder;\n\
    \    long temp;\n    long power;\n    bool isNegative = false;\n    bool isEven\
    \ = false;\n    bool isOdd = false;\n    bool isPositive = false;\n    bool isZero\
    \ = false;\n    bool isOne = false;\n    bool isTwo = false;\n    bool isThree\
    \ = false;\n    bool isFour = false;\n    bool isFive = false;\n    bool isSix\
    \ = false;\n    bool isSeven = false;\n    bool isEight = false;\n    bool isNine\
    \ = false;\n    bool isTen = false;\n    bool isEleven = false;\n    bool isTwelve\
    \ = false;\n    bool isThirteen = false;\n    bool isFourteen = false;\n    bool\
    \ isFifteen = false;\n    bool isSixteen = false;\n    bool isSeventeen = false;\n\
    \    bool isEighteen = false;\n    bool isNineteen = false;\n    bool isTwenty\
    \ = false;\n    bool isTwentyOne = false;\n    bool isTwentyTwo = false;\n   \
    \ bool isTwentyThree = false;\n    bool isTwentyFour = false;\n    bool isTwentyFive\
    \ = false;\n    bool isTwentySix = false;\n    bool isTwentySeven = false;\n \
    \   bool isTwentyEight = false;\n    bool isTwentyNine = false;\n    bool isThirty\
    \ = false;\n    bool isThirtyOne = false;\n    bool isThirtyTwo = false;\n   \
    \ bool isThirtyThree = false;\n    bool isThirtyFour = false;\n    bool isThirtyFive\
    \ = false;\n    bool isThirtySix = false;\n    bool isThirtySeven = false;\n \
    \   bool isThirtyEight = false;\n    bool isThirtyNine = false;\n    bool isForty\
    \ = false;\n    bool isFortyOne = false;\n    bool isFortyTwo = false;\n    bool\
    \ isFortyThree = false;\n    bool isFortyFour = false;\n    bool isFortyFive =\
    \ false;\n    bool isFortySix = false;\n    bool isFortySeven = false;\n    bool\
    \ isFortyEight = false;\n    bool isFortyNine = false;\n    bool isFifty = false;\n\
    \    bool isFiftyOne = false;\n    bool isFiftyTwo = false;\n    bool isFiftyThree\
    \ = false;\n    bool isFiftyFour = false;\n    bool isFiftyFive = false;\n   \
    \ bool isFiftySix = ", "{\n    string binary = \"\";\n    long remainder;\n  \
    \  while(decimal != 0)\n    {\n        remainder = decimal % 2;\n        decimal\
    \ /= 2;\n        binary += remainder;\n    }\n    return binary;\n}\n</code>\n\
    <|/ a tags=c++,algorithm |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n#include\
    \ <string>\nusing namespace std;", "{\n    string binary = \"\";\n    long remainder;\n\
    \    long quotient;\n    \n    while(decimal != 0)\n    {\n        remainder =\
    \ decimal%2;\n        quotient = decimal/2;\n        decimal -= quotient;\n  \
    \      binary += remainder;\n        binary += quotient;\n    }\n    \n    string\
    \ db = \"db\";\n    binary = db + binary;\n    \n    return binary;\n}", "{\n\
    \    string result = \"\";\n    long remainder;\n    \n    while (decimal > 0)\n\
    \    {\n        remainder = decimal % 2;\n        decimal /= 2;\n        result\
    \ += char(remainder);\n    }\n    \n    result += \"db\";\n    \n    return result;\n\
    }\n/*\n    You will be given a number in binary format and your task is to convert\
    \ it to\n    decimal format. The function should return a string, with each character\
    \ representing a decimal\n    number. Each character in the string will be a digit\
    \ 0-9.", "{\n    string binary = \"\";\n    long remainder;\n    long quotient;\n\
    \    long temp;\n    bool flag = false;\n    \n    while(decimal != 0)\n    {\n\
    \        remainder = decimal%2;\n        quotient = decimal/2;\n        temp =\
    \ remainder*2;\n        \n        if(temp > 9)\n        {\n            temp =\
    \ temp - 10;\n            flag = true;\n        }\n        \n        if(quotient\
    \ > 9)\n        {\n            quotient = quotient - 10;\n            flag = true;\n\
    \        }\n        \n        if(flag)\n        {\n            binary = \"1\"\
    \ + binary;\n        }\n        else\n        {\n            binary = \"0\" +\
    \ binary;\n        }\n        \n        decimal = quotient;\n    }\n    \n   \
    \ if(binary == \"0\")\n    {\n        binary = \"db\";\n    }\n    \n    return\
    \ binary;\n}", "{\n    string result = \"\";\n    long remainder;\n    long temp;\n\
    \    bool isNegative = false;\n    bool isEven = false;\n    bool isOdd = false;\n\
    \    bool isPositive = false;\n    bool isZero = false;\n    bool isOne = false;\n\
    \    bool isTwo = false;\n    bool isThree = false;\n    bool isFour = false;\n\
    \    bool isFive = false;\n    bool isSix = false;\n    bool isSeven = false;\n\
    \    bool isEight = false;\n    bool isNine = false;\n    bool isTen = false;\n\
    \    bool isEleven = false;\n    bool isTwelve = false;\n    bool isThirteen =\
    \ false;\n    bool isFourteen = false;\n    bool isFifteen = false;\n    bool\
    \ isSixteen = false;\n    bool isSeventeen = false;\n    bool isEighteen = false;\n\
    \    bool isNineteen = false;\n    bool isTwenty = false;\n    bool isTwentyOne\
    \ = false;\n    bool isTwentyTwo = false;\n    bool isTwentyThree = false;\n \
    \   bool isTwentyFour = false;\n    bool isTwentyFive = false;\n    bool isTwentySix\
    \ = false;\n    bool isTwentySeven = false;\n    bool isTwentyEight = false;\n\
    \    bool isTwentyNine = false;\n    bool isThirty = false;\n    bool isThirtyOne\
    \ = false;\n    bool isThirtyTwo = false;\n    bool isThirtyThree = false;\n \
    \   bool isThirtyFour = false;\n    bool isThirtyFive = false;\n    bool isThirtySix\
    \ = false;\n    bool isThirtySeven = false;\n    bool isThirtyEight = false;\n\
    \    bool isThirtyNine = false;\n    bool isForty = false;\n    bool isFortyOne\
    \ = false;\n    bool isFortyTwo = false;\n    bool isFortyThree = false;\n   \
    \ bool isFortyFour = false;\n    bool isFortyFive = false;\n    bool isFortySix\
    \ = false;\n    bool isFortySeven = false;\n    bool isFortyEight = false;\n \
    \   bool isFortyNine = false;\n    bool isFifty = false;\n    bool isFiftyOne\
    \ = false;\n    bool isFiftyTwo = false;\n    bool isFiftyThree = false;\n   \
    \ bool isFiftyFour = false;\n    bool isFiftyFive = false;\n    bool isFiftySix\
    \ = false;\n    bool is", "{\n    string result = \"\";\n    long remainder;\n\
    \    long temp;\n    \n    while(decimal != 0)\n    {\n        remainder = decimal\
    \ % 2;\n        temp = decimal / 2;\n        decimal -= temp;\n        result\
    \ += char(remainder);\n    }\n    \n    result += \"db\";\n    \n    return result;\n\
    }\n</code>\n<|/ a tags=c++,string,binary,decimal |>\n<| c |>\nThis doesn't work.\
    \ `decimal` will never be `0` because `decimal` is a `long` and not a `long long`.\n\
    <|/ c |>\n<| c |>\nI believe that `decimal` will never be `0` because `decimal`\
    \ is a `long` and not a `long long`.  It will always be `0` because `decimal`\
    \ is a `long` and not a `long long`.  `decimal` will never be `0` because `decimal`\
    \ is a `long` and not a `long long`.  `decimal` will never be `0` because `decimal`\
    \ is a `long` and not a `long long`.  `decimal` will never be `0` because `decimal`\
    \ is a `long` and not a `long long`.  `decimal` will never be `0` because `decimal`\
    \ is a `long` and not a `long long`.  `decimal` will never be `0` because `decimal`\
    \ is a `long` and not a `long long`.  `decimal` will never be `0` because `decimal`\
    \ is a `long` and not a `long long`.  `decimal` will never be `0` because `decimal`\
    \ is a `long` and not a `long long`.  `decimal` will never be `0` because `decimal`\
    \ is a `long` and not a `long long`.  `decimal` will never be `0` because `decimal`\
    \ is a `long` and not a `long long`.  `decimal` will never be `0` because `decimal`\
    \ is a `long` and not a `long long`.  `decimal` will never be `0` because `decimal`\
    \ is a `long` and not a `long long`.  `decimal` will never be `0` because `decimal`\
    \ is a `long` and not a `long long`.  `decimal` will never be `0` because `decimal`\
    \ is a `long` and not a `long long`.  `decimal` will never be `0` because `decimal`\
    \ is a `long` and not a `long long`.  `decimal` will never be `0` because `decimal`\
    \ is a `long` and not a `long long`.  `decimal` will never be `0` because `decimal`\
    \ is a `long` and not a `long long`.  `decimal` will never be `0", "{\n    string\
    \ binary = \"\";\n    long remainder;\n    \n    while ((remainder = decimal %\
    \ 2) == 0)\n    {\n        binary = std.string.format(\"%c\", remainder) + binary;\n\
    \        decimal /= 2;\n    }\n    \n    while ((remainder = decimal % 10) ==\
    \ 0)\n    {\n        binary = std.string.format(\"%c\", remainder) + binary;\n\
    \        decimal /= 10;\n    }\n    \n    return binary;\n}\n</code>\n<|/ a tags=c++,algorithm\
    \ |>\n<| c |>\nThis doesn't work. Try it with `decimal = 123456789`\n<|/ c |>\n\
    <| c |>\nIt works. I tested it before posting it. The problem was with the string\
    \ concatenation. Fixed now.\n<|/ c |>\n<| c |>\nIt doesn't work. Try it with `decimal\
    \ = 123456789`\n<|/ c |>\n<| c |>\nIt works. I tested it before posting it. The\
    \ problem was with the string concatenation. Fixed now.\n<|/ c |>\n<| c |>\nIt\
    \ doesn't work. Try it with `decimal = 123456789`\n<|/ c |>\n<| a |>\n<code>\n\
    #include <iostream>\n#include <string>\nusing namespace std;", "{\n    string\
    \ binary = \"\";\n    long remainder;\n    \n    while(decimal != 0)\n    {\n\
    \        remainder = decimal % 2;\n        decimal /= 2;\n        binary += remainder;\n\
    \    }\n    \n    return binary;\n}", "{\n    string result = \"\";\n    long\
    \ remainder;\n    long temp;\n    long power;\n    long digit;\n    long i;\n\
    \    bool flag = false;\n    \n    temp = decimal;\n    \n    while(temp != 0)\n\
    \    {\n        remainder = temp % 2;\n        temp = temp / 2;\n        \n  \
    \      power = 1;\n        \n        for(i = 0; i < remainder; i++)\n        {\n\
    \            digit = power;\n            power = power * 10;\n            \n \
    \           if(i == 0)\n            {\n                result += char(digit);\n\
    \            }\n            else\n            {\n                result += char(digit\
    \ + remainder);\n            }\n        }\n    }\n    \n    if(flag)\n    {\n\
    \        result += \"db\";\n    }\n    \n    return result;\n}", "{\n    string\
    \ binary = \"\";\n    long remainder;\n    long temp;\n    \n    while(decimal\
    \ != 0)\n    {\n        remainder = decimal % 2;\n        temp = decimal / 2;\n\
    \        decimal -= temp;\n        binary += string(remainder, 2);\n    }\n  \
    \  \n    return binary;\n}", "{\n    string result = \"\";\n    long remainder;\n\
    \    long counter = 0;\n    long power = 1;\n    \n    while (remainder != 0)\n\
    \    {\n        remainder = decimal % 2;\n        decimal /= 2;\n        counter++;\n\
    \        power = power * 2;\n    }\n    \n    string binary = \"\";\n    \n  \
    \  while (counter > 0)\n    {\n        binary = binary + to_string(power);\n \
    \       counter --;\n        power = power * 2;\n    }\n    \n    string db =\
    \ \"db\";\n    \n    binary = db + binary;\n    \n    result += binary;\n    \n\
    \    return result;\n}", "{\n    string result = \"\";\n    long remainder;\n\
    \    long quotient;\n    long power;\n    long i;\n    long j;\n    long k;\n\
    \    long l;\n    long m;\n    long n;\n    long o;\n    long p;\n    long q;\n\
    \    long r;\n    long s;\n    long t;\n    long u;\n    long v;\n    long w;\n\
    \    long x;\n    long y;\n    long z;\n    long A;\n    long B;\n    long C;\n\
    \    long D;\n    long E;\n    long F;\n    long G;\n    long H;\n    long I;\n\
    \    long J;\n    long K;\n    long L;\n    long M;\n    long N;\n    long O;\n\
    \    long P;\n    long Q;\n    long R;\n    long S;\n    long T;\n    long U;\n\
    \    long V;\n    long W;\n    long X;\n    long Y;\n    long Z;\n    long A;\n\
    \    long B;\n    long C;\n    long D;\n    long E;\n    long F;\n    long G;\n\
    \    long H;\n    long I;\n    long J;\n    long K;\n    long L;\n    long M;\n\
    \    long N;\n    long O;\n    long P;\n    long Q;\n    long R;\n    long S;\n\
    \    long T;\n    long U;\n    long V;\n    long W;\n    long X;\n    long Y;\n\
    \    long Z;\n    long A;\n    long B;\n    long C;\n    long D;\n    long E;\n\
    \    long F;\n    long G;\n    long H;\n    long I;\n    long J;\n    long K;\n\
    \    long L;\n    long M;\n    long N;\n    long O;\n    long P;\n    long Q;\n\
    \    long R;\n    long S;\n    long T;\n    long U;\n    long V;\n    long W;\n\
    \    long X;\n    long Y;\n    long Z;\n    long A;\n    long B;\n    long C;\n\
    \    long D;\n    long E;\n    long F;\n", "{\n    string binary = \"\";\n   \
    \ long remainder;\n    \n    while(decimal != 0)\n    {\n        remainder = decimal\
    \ % 2;\n        decimal /= 2;\n        binary += remainder;\n    }\n    \n   \
    \ return binary;\n}", "{\n    string binary = \"\";\n    long remainder;\n   \
    \ long counter = 0;\n    long remainder_counter = 0;\n    long remainder_counter2\
    \ = 0;\n    long remainder_counter3 = 0;\n    long remainder_counter4 = 0;\n \
    \   long remainder_counter5 = 0;\n    long remainder_counter6 = 0;\n    long remainder_counter7\
    \ = 0;\n    long remainder_counter8 = 0;\n    long remainder_counter9 = 0;\n \
    \   long remainder_counter10 = 0;\n    long remainder_counter11 = 0;\n    long\
    \ remainder_counter12 = 0;\n    long remainder_counter13 = 0;\n    long remainder_counter14\
    \ = 0;\n    long remainder_counter15 = 0;\n    long remainder_counter16 = 0;\n\
    \    long remainder_counter17 = 0;\n    long remainder_counter18 = 0;\n    long\
    \ remainder_counter19 = 0;\n    long remainder_counter20 = 0;\n    long remainder_counter21\
    \ = 0;\n    long remainder_counter22 = 0;\n    long remainder_counter23 = 0;\n\
    \    long remainder_counter24 = 0;\n    long remainder_counter25 = 0;\n    long\
    \ remainder_counter26 = 0;\n    long remainder_counter27 = 0;\n    long remainder_counter28\
    \ = 0;\n    long remainder_counter29 = 0;\n    long remainder_counter30 = 0;\n\
    \    long remainder_counter31 = 0;\n    long remainder_counter32 = 0;\n    long\
    \ remainder_counter33 = 0;\n    long remainder_counter34 = 0;\n    long remainder_counter35\
    \ = 0;\n    long remainder_counter36 = 0;\n    long remainder_counter37 = 0;\n\
    \    long remainder_counter38 = 0;\n    long remainder_counter39 = 0;\n    long\
    \ remainder_counter40 = 0;\n    long remainder_counter41 = 0;\n    long remainder_counter42\
    \ = 0;\n    long remainder_counter43 = 0;\n    long remainder_counter44 = 0;\n\
    \    long remainder_counter45 = 0;\n    long remainder_counter46 = 0;\n    long\
    \ remainder_counter47 = 0;\n    long remainder_counter48 = 0;\n    long remainder_counter49\
    \ = 0;\n    long remainder_counter50 = 0;\n    long remainder_counter51 = 0;\n\
    \    long remainder_counter52 = 0;\n    long remainder_counter53 = 0;\n    long\
    \ remainder_counter54 = 0;\n    long remainder_counter55 = 0;\n    long remainder_counter56\
    \ = 0;\n    long remainder_counter57 = 0;\n    long remainder_counter58 = 0;\n\
    \    long remainder_counter59 = 0;\n    long remainder_counter60 = 0;\n    long\
    \ remainder_counter61 = 0;\n    long remainder_counter62 = 0;\n    long ", "{\n\
    \    string binary = \"\";\n    long remainder;\n    while(decimal != 0)\n   \
    \ {\n        remainder = decimal%2;\n        decimal /= 2;\n        binary +=\
    \ remainder;\n    }\n    return binary;\n}", "{\n    string binary = \"\";\n \
    \   long remainder;\n    long quotient;\n    long power;\n    long digit;\n  \
    \  long base;\n    long i;", "{\n    string binary = \"\";\n    long remainder;\n\
    \    long quotient;\n    long temp;\n    \n    while(decimal != 0)\n    {\n  \
    \      remainder = decimal%2;\n        quotient = decimal/2;\n        temp = quotient;\n\
    \        \n        while(temp != 0)\n        {\n            binary = binary+\"\
    1\";\n            temp = temp/2;\n        }\n        \n        binary = binary+\"\
    0\";\n        decimal = remainder;\n    }\n    \n    return binary;\n}", "{\n\
    \    string result = \"\";\n    long remainder;\n    \n    while (decimal != 0)\n\
    \    {\n        remainder = decimal % 2;\n        decimal /= 2;\n        result\
    \ += char(remainder);\n    }\n    \n    result += 'db';\n    \n    return result;\n\
    }", "{\n    string result = \"\";\n    long remainder;\n    long temp;\n    long\
    \ power;\n    long digit;\n    bool isNegative;\n    bool isEven;\n    bool isOdd;\n\
    \    bool isZero;\n    bool isOne;\n    bool isTwo;\n    bool isThree;\n    bool\
    \ isFour;\n    bool isFive;\n    bool isSix;\n    bool isSeven;\n    bool isEight;\n\
    \    bool isNine;\n    bool isTen;\n    bool isEleven;\n    bool isTwelve;\n \
    \   bool isThirteen;\n    bool isFourteen;\n    bool isFifteen;\n    bool isSixteen;\n\
    \    bool isSeventeen;\n    bool isEighteen;\n    bool isNineteen;\n    bool isTwenty;\n\
    \    bool isTwentyOne;\n    bool isTwentyTwo;\n    bool isTwentyThree;\n    bool\
    \ isTwentyFour;\n    bool isTwentyFive;\n    bool isTwentySix;\n    bool isTwentySeven;\n\
    \    bool isTwentyEight;\n    bool isTwentyNine;\n    bool isThirty;\n    bool\
    \ isThirtyOne;\n    bool isThirtyTwo;\n    bool isThirtyThree;\n    bool isThirtyFour;\n\
    \    bool isThirtyFive;\n    bool isThirtySix;\n    bool isThirtySeven;\n    bool\
    \ isThirtyEight;\n    bool isThirtyNine;\n    bool isForty;\n    bool isFortyOne;\n\
    \    bool isFortyTwo;\n    bool isFortyThree;\n    bool isFortyFour;\n    bool\
    \ isFortyFive;\n    bool isFortySix;\n    bool isFortySeven;\n    bool isFortyEight;\n\
    \    bool isFortyNine;\n    bool isFifty;\n    bool isFiftyOne;\n    bool isFiftyTwo;\n\
    \    bool isFiftyThree;\n    bool isFiftyFour;\n    bool isFiftyFive;\n    bool\
    \ isFiftySix;\n", "{\n    string binary = \"\";\n    long remainder;\n    long\
    \ temp;\n    long power;\n    long digit;\n    long digit2;\n    long digit3;\n\
    \    long digit4;\n    long digit5;\n    long digit6;\n    long digit7;\n    long\
    \ digit8;\n    long digit9;\n    long digit10;\n    long digit11;\n    long digit12;\n\
    \    long digit13;\n    long digit14;\n    long digit15;\n    long digit16;\n\
    \    long digit17;\n    long digit18;\n    long digit19;\n    long digit20;\n\
    \    long digit21;\n    long digit22;\n    long digit23;\n    long digit24;\n\
    \    long digit25;\n    long digit26;\n    long digit27;\n    long digit28;\n\
    \    long digit29;\n    long digit30;\n    long digit31;\n    long digit32;\n\
    \    long digit33;\n    long digit34;\n    long digit35;\n    long digit36;\n\
    \    long digit37;\n    long digit38;\n    long digit39;\n    long digit40;\n\
    \    long digit41;\n    long digit42;\n    long digit43;\n    long digit44;\n\
    \    long digit45;\n    long digit46;\n    long digit47;\n    long digit48;\n\
    \    long digit49;\n    long digit50;\n    long digit51;\n    long digit52;\n\
    \    long digit53;\n    long digit54;\n    long digit55;\n    long digit56;\n\
    \    long digit57;\n    long digit58;\n    long digit59;\n    long digit60;\n\
    \    long digit61;\n    long digit62;\n    long digit63;\n    long digit64;\n\
    \    long digit65;\n    long digit66;\n    long digit67;\n    long digit68;\n\
    \    long digit69;\n    long digit70;\n    long digit71;\n    long digit72;\n\
    \    long digit73;\n    long digit74;\n    long digit75;\n    long digit76;\n\
    \    long digit77;\n    long digit78;\n    long digit79;\n    long digit80;\n\
    \    long digit81;\n    long digit82;\n    long digit83;\n    long digit84;\n\
    \    long digit85", "{\n    string binary = \"\";\n    long remainder;\n    long\
    \ temp;\n    \n    while(decimal != 0)\n    {\n        remainder = decimal % 2;\n\
    \        temp = decimal / 2;\n        decimal = temp;\n        \n        if(remainder\
    \ == 1)\n        {\n            binary += \"1\";\n        }\n        else\n  \
    \      {\n            binary += \"0\";\n        }\n    }\n    \n    return binary;\n\
    }", "{\n    string binary = \"\";\n    long remainder;\n    long quotient;\n \
    \   long power;\n    long digit;\n    long i;\n    long j;\n    long k;\n    long\
    \ l;\n    long m;\n    long n;\n    long o;\n    long p;\n    long q;\n    long\
    \ r;\n    long s;\n    long t;\n    long u;\n    long v;\n    long w;\n    long\
    \ x;\n    long y;\n    long z;\n    long A;\n    long B;\n    long C;\n    long\
    \ D;\n    long E;\n    long F;\n    long G;\n    long H;\n    long I;\n    long\
    \ J;\n    long K;\n    long L;\n    long M;\n    long N;\n    long O;\n    long\
    \ P;\n    long Q;\n    long R;\n    long S;\n    long T;\n    long U;\n    long\
    \ V;\n    long W;\n    long X;\n    long Y;\n    long Z;\n    long AA;\n    long\
    \ BB;\n    long CC;\n    long DD;\n    long EE;\n    long FF;\n    long GG;\n\
    \    long HH;\n    long II;\n    long JJ;\n    long KK;\n    long LL;\n    long\
    \ MM;\n    long NN;\n    long OO;\n    long PP;\n    long QQ;\n    long RR;\n\
    \    long SS;\n    long TT;\n    long UU;\n    long VV;\n    long WW;\n    long\
    \ XX;\n    long YY;\n    long ZZ;\n    long AAA;\n    long BBB;\n    long CCC;\n\
    \    long DDD;\n    long EEE;\n    long FFF;\n    long GGG;\n    long HHH;\n \
    \   long III;\n    long JJJ;\n    long KKK;\n    long LLL;\n    long MMM;\n  \
    \  long NNN;\n    long OOO;\n    long PPP;\n    long QQQ;\n    long RRR;\n   \
    \ long SSS;\n    long TTT;\n    long UUU;\n    long VVV;\n    long WWW;\n    long\
    \ XXXX;\n    long YYYY;\n    ", "{\n    string result = \"\";\n    long remainder;\n\
    \    long power;\n    long temp;\n    long decimal2;\n    long decimal3;\n   \
    \ long decimal4;\n    long decimal5;\n    long decimal6;\n    long decimal7;\n\
    \    long decimal8;\n    long decimal9;\n    long decimal10;\n    long decimal11;\n\
    \    long decimal12;\n    long decimal13;\n    long decimal14;\n    long decimal15;\n\
    \    long decimal16;\n    long decimal17;\n    long decimal18;\n    long decimal19;\n\
    \    long decimal20;\n    long decimal21;\n    long decimal22;\n    long decimal23;\n\
    \    long decimal24;\n    long decimal25;\n    long decimal26;\n    long decimal27;\n\
    \    long decimal28;\n    long decimal29;\n    long decimal30;\n    long decimal31;\n\
    \    long decimal32;\n    long decimal33;\n    long decimal34;\n    long decimal35;\n\
    \    long decimal36;\n    long decimal37;\n    long decimal38;\n    long decimal39;\n\
    \    long decimal40;\n    long decimal41;\n    long decimal42;\n    long decimal43;\n\
    \    long decimal44;\n    long decimal45;\n    long decimal46;\n    long decimal47;\n\
    \    long decimal48;\n    long decimal49;\n    long decimal50;\n    long decimal51;\n\
    \    long decimal52;\n    long decimal53;\n    long decimal54;\n    long decimal55;\n\
    \    long decimal56;\n    long decimal57;\n    long decimal58;\n    long decimal59;\n\
    \    long decimal60;\n    long decimal61;\n    long decimal62;\n    long decimal63;\n\
    \    long decimal64;\n    long decimal65;\n    long decimal66;\n    long decimal67;\n\
    \    long decimal68;\n    long decimal69;\n    long decimal70;\n    long decimal71;\n\
    \    long decimal72;\n    long decimal73;\n    long decimal74;\n    long decimal75;\n\
    \    long decimal76;\n    long decimal77;\n    long decimal78;\n    long decimal79;\n\
    \    long decimal80;\n    long decimal81;\n    long decimal82;\n    long decimal83;\n\
    \    long decimal84;\n    long decimal85;\n    long decimal86", "{\n    string\
    \ binary = \"\";\n    long remainder;\n    long temp;\n    \n    while(decimal\
    \ != 0)\n    {\n        remainder = decimal % 2;\n        decimal = decimal /\
    \ 2;\n        temp = remainder;\n        \n        while(temp != 0)\n        {\n\
    \            binary = binary + \"1\";\n            temp = temp / 2;\n        }\n\
    \        \n        binary = binary + \"0\";\n    }\n    \n    return binary;\n\
    }", "{\n    string binary = \"\";\n    long remainder;\n    long temp;\n    \n\
    \    while(decimal != 0)\n    {\n        remainder = decimal%2;\n        decimal\
    \ = decimal/2;\n        temp = remainder;\n        while(temp != 0)\n        {\n\
    \            binary = binary+\"0\";\n            temp = temp/2;\n        }\n \
    \       binary = binary+\"1\";\n    }\n    binary = binary+\"db\";\n    return\
    \ binary;\n}", "{\n    string binary = \"\";\n    long remainder;\n    \n    while\
    \ (decimal != 0)\n    {\n        remainder = decimal % 2;\n        decimal /=\
    \ 2;\n        binary += remainder;\n    }\n    \n    return binary;\n}", "{\n\
    \    string result = \"\";\n    long remainder;\n    long quotient;\n    long\
    \ power;\n    long digit;\n    long i;\n    long j;\n    long k;\n    long l;\n\
    \    long m;\n    long n;\n    long o;\n    long p;\n    long q;\n    long r;\n\
    \    long s;\n    long t;\n    long u;\n    long v;\n    long w;\n    long x;\n\
    \    long y;\n    long z;\n    long A;\n    long B;\n    long C;\n    long D;\n\
    \    long E;\n    long F;\n    long G;\n    long H;\n    long I;\n    long J;\n\
    \    long K;\n    long L;\n    long M;\n    long N;\n    long O;\n    long P;\n\
    \    long Q;\n    long R;\n    long S;\n    long T;\n    long U;\n    long V;\n\
    \    long W;\n    long X;\n    long Y;\n    long Z;\n    long A;\n    long B;\n\
    \    long C;\n    long D;\n    long E;\n    long F;\n    long G;\n    long H;\n\
    \    long I;\n    long J;\n    long K;\n    long L;\n    long M;\n    long N;\n\
    \    long O;\n    long P;\n    long Q;\n    long R;\n    long S;\n    long T;\n\
    \    long U;\n    long V;\n    long W;\n    long X;\n    long Y;\n    long Z;\n\
    \    long A;\n    long B;\n    long C;\n    long D;\n    long E;\n    long F;\n\
    \    long G;\n    long H;\n    long I;\n    long J;\n    long K;\n    long L;\n\
    \    long M;\n    long N;\n    long O;\n    long P;\n    long Q;\n    long R;\n\
    \    long S;\n    long T;\n    long U;\n    long V;\n    long W;\n    long X;\n\
    \    long Y;\n    long Z;\n    long A;\n    long B;\n    long C;\n    long D;\n\
    \    long E;\n", "{\n    string result = \"\";\n    long remainder;\n    long\
    \ power = 1;\n    long temp;\n    \n    while(decimal != 0)\n    {\n        remainder\
    \ = decimal % 2;\n        temp = decimal / 2;\n        decimal -= temp;\n    \
    \    power = power * 10;\n        result += char(remainder);\n    }\n    \n  \
    \  result += \"db\";\n    \n    while(power > 0)\n    {\n        remainder = power\
    \ % 2;\n        temp = power / 2;\n        power = temp;\n        result += char(remainder);\n\
    \    }\n    \n    return result;\n}", "{\n    string binary = \"\";\n    long\
    \ remainder;\n    long temp;\n    \n    while(decimal != 0)\n    {\n        remainder\
    \ = decimal % 2;\n        decimal = decimal / 2;\n        temp = remainder;\n\
    \        \n        if(temp == 1)\n        {\n            binary = \"1\" + binary;\n\
    \        }\n        else\n        {\n            binary = \"0\" + binary;\n  \
    \      }\n    }\n    \n    return binary;\n}", "{\n    string binary = \"\";\n\
    \    long remainder;\n    \n    while (decimal != 0)\n    {\n        remainder\
    \ = decimal % 2;\n        decimal /= 2;\n        binary += remainder;\n    }\n\
    \    \n    return binary;\n}", "{\n    string result = \"\";\n    long remainder;\n\
    \    \n    while ( decimal != 0 )\n    {\n        remainder = decimal % 2;\n \
    \       decimal /= 2;\n        \n        if ( remainder == 0 )\n        {\n  \
    \          result += \"0\";\n        }\n        else\n        {\n            result\
    \ += \"1\";\n        }\n    }\n    \n    return \"db\" + result + \"db\";\n}\n\
    </code>\n<|/ a tags=c++,binary,decimal |>\n<| c |>\nThis doesn't work. `decimal`\
    \ will never be `0` because `decimal` will never be `0` because `decimal` will\
    \ never be `0` because `decimal` will never be `0` because `decimal` will never\
    \ be `0` because `decimal` will never be `0` because `decimal` will never be `0`\
    \ because `decimal` will never be `0` because `decimal` will never be `0` because\
    \ `decimal` will never be `0` because `decimal` will never be `0` because `decimal`\
    \ will never be `0` because `decimal` will never be `0` because `decimal` will\
    \ never be `0` because `decimal` will never be `0` because `decimal` will never\
    \ be `0` because `decimal` will never be `0` because `decimal` will never be `0`\
    \ because `decimal` will never be `0` because `decimal` will never be `0` because\
    \ `decimal` will never be `0` because `decimal` will never be `0` because `decimal`\
    \ will never be `0` because `decimal` will never be `0` because `decimal` will\
    \ never be `0` because `decimal` will never be `0` because `decimal` will never\
    \ be `0` because `decimal` will never be `0` because `decimal` will never be `0`\
    \ because `decimal` will never be `0` because `decimal` will never be `0` because\
    \ `decimal` will never be `0` because `decimal` will never be `0` because `decimal`\
    \ will never be `0` because `decimal` will never be `0` because `decimal` will\
    \ never be `0` because `decimal` will never be `0` because `decimal` will never\
    \ be `0` because `decimal` will never be `0` because `decimal` will never be `0`\
    \ because `decimal` will never be `0` ", "{\n    string binary = \"\";\n    long\
    \ remainder;\n    long quotient;\n    long power;\n    long i;\n    long j;\n\
    \    long k;\n    long l;\n    long m;\n    long n;\n    long o;\n    long p;\n\
    \    long q;\n    long r;\n    long s;\n    long t;\n    long u;\n    long v;\n\
    \    long w;\n    long x;\n    long y;\n    long z;\n    long A;\n    long B;\n\
    \    long C;\n    long D;\n    long E;\n    long F;\n    long G;\n    long H;\n\
    \    long I;\n    long J;\n    long K;\n    long L;\n    long M;\n    long N;\n\
    \    long O;\n    long P;\n    long Q;\n    long R;\n    long S;\n    long T;\n\
    \    long U;\n    long V;\n    long W;\n    long X;\n    long Y;\n    long Z;\n\
    \    long AA;\n    long BB;\n    long CC;\n    long DD;\n    long EE;\n    long\
    \ FF;\n    long GG;\n    long HH;\n    long II;\n    long JJ;\n    long KK;\n\
    \    long LL;\n    long MM;\n    long NN;\n    long OO;\n    long PP;\n    long\
    \ QQ;\n    long RR;\n    long SS;\n    long TT;\n    long UU;\n    long VV;\n\
    \    long WW;\n    long XX;\n    long YY;\n    long ZZ;\n    long AAA;\n    long\
    \ BBB;\n    long CCC;\n    long DDD;\n    long EEE;\n    long FFF;\n    long GGG;\n\
    \    long HHH;\n    long III;\n    long JJJ;\n    long KKK;\n    long LLL;\n \
    \   long MMM;\n    long NNN;\n    long OOO;\n    long PPP;\n    long QQQ;\n  \
    \  long RRR;\n    long SSS;\n    long TTT;\n    long UUU;\n    long VVV;\n   \
    \ long WWW;\n    long XXX;\n    long YYY;\n    long ZZZ;", "{\n    string binary\
    \ = \"\";\n    long remainder;\n    long temp;\n    bool isNegative = false;\n\
    \    bool isEven = false;\n    bool isOdd = false;\n    bool isPositive = false;\n\
    \    bool isZero = false;\n    bool isOne = false;\n    bool isTwo = false;\n\
    \    bool isThree = false;\n    bool isFour = false;\n    bool isFive = false;\n\
    \    bool isSix = false;\n    bool isSeven = false;\n    bool isEight = false;\n\
    \    bool isNine = false;\n    bool isTen = false;\n    bool isEleven = false;\n\
    \    bool isTwelve = false;\n    bool isThirteen = false;\n    bool isFourteen\
    \ = false;\n    bool isFifteen = false;\n    bool isSixteen = false;\n    bool\
    \ isSeventeen = false;\n    bool isEighteen = false;\n    bool isNineteen = false;\n\
    \    bool isTwenty = false;\n    bool isTwentyOne = false;\n    bool isTwentyTwo\
    \ = false;\n    bool isTwentyThree = false;\n    bool isTwentyFour = false;\n\
    \    bool isTwentyFive = false;\n    bool isTwentySix = false;\n    bool isTwentySeven\
    \ = false;\n    bool isTwentyEight = false;\n    bool isTwentyNine = false;\n\
    \    bool isThirty = false;\n    bool isThirtyOne = false;\n    bool isThirtyTwo\
    \ = false;\n    bool isThirtyThree = false;\n    bool isThirtyFour = false;\n\
    \    bool isThirtyFive = false;\n    bool isThirtySix = false;\n    bool isThirtySeven\
    \ = false;\n    bool isThirtyEight = false;\n    bool isThirtyNine = false;\n\
    \    bool isFourty = false;\n    bool isFourtyOne = false;\n    bool isFourtyTwo\
    \ = false;\n    bool isFourtyThree = false;\n    bool isFourtyFour = false;\n\
    \    bool isFourtyFive = false;\n    bool isFourtySix = false;\n    bool isFourtySeven\
    \ = false;\n    bool isFourtyEight = false;\n    bool isFourtyNine = false;\n\
    \    bool isFifty = false;\n    bool isFiftyOne = false;\n    bool isFiftyTwo\
    \ = false;\n    bool isFiftyThree = false;\n    bool isFiftyFour = false;\n  \
    \  bool isFiftyFive = false;\n    bool isFiftySix = false;\n    bool ", "{\n \
    \   string binary = \"\";\n    long remainder;\n    long temp;\n    bool isNegative\
    \ = false;", "{\n    string result = \"\";\n    long remainder = decimal;\n  \
    \  string remainderAsString = to_string(remainder);\n    \n    while (remainder\
    \ > 0)\n    {\n        remainder = remainder / 2;\n        result += remainderAsString[remainder];\n\
    \    }\n    \n    result += \"db\";\n    \n    return result;\n}\n</code>\n<|/\
    \ a tags=c++,string,binary,decimal |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n\
    #include <string>\nusing namespace std;", "{\n    string result = \"\";\n    long\
    \ remainder;\n    long power;\n    long temp;\n    long temp2;\n    long temp3;\n\
    \    long temp4;\n    long temp5;\n    long temp6;\n    long temp7;\n    long\
    \ temp8;\n    long temp9;\n    long temp10;\n    long temp11;\n    long temp12;\n\
    \    long temp13;\n    long temp14;\n    long temp15;\n    long temp16;\n    long\
    \ temp17;\n    long temp18;\n    long temp19;\n    long temp20;\n    long temp21;\n\
    \    long temp22;\n    long temp23;\n    long temp24;\n    long temp25;\n    long\
    \ temp26;\n    long temp27;\n    long temp28;\n    long temp29;\n    long temp30;\n\
    \    long temp31;\n    long temp32;\n    long temp33;\n    long temp34;\n    long\
    \ temp35;\n    long temp36;\n    long temp37;\n    long temp38;\n    long temp39;\n\
    \    long temp40;\n    long temp41;\n    long temp42;\n    long temp43;\n    long\
    \ temp44;\n    long temp45;\n    long temp46;\n    long temp47;\n    long temp48;\n\
    \    long temp49;\n    long temp50;\n    long temp51;\n    long temp52;\n    long\
    \ temp53;\n    long temp54;\n    long temp55;\n    long temp56;\n    long temp57;\n\
    \    long temp58;\n    long temp59;\n    long temp60;\n    long temp61;\n    long\
    \ temp62;\n    long temp63;\n    long temp64;\n    long temp65;\n    long temp66;\n\
    \    long temp67;\n    long temp68;\n    long temp69;\n    long temp70;\n    long\
    \ temp71;\n    long temp72;\n    long temp73;\n    long temp74;\n    long temp75;\n\
    \    long temp76;\n    long temp77;\n    long temp78;\n    long temp79;\n    long\
    \ temp80;\n    long temp81;\n    long temp82;\n    long temp83;\n    long temp84;\n\
    \    long temp85;\n    long temp86", "{\n    string result = \"\";\n    long remainder;\n\
    \    \n    while(decimal != 0)\n    {\n        remainder = decimal % 2;\n    \
    \    decimal /= 2;\n        result += char(remainder);\n    }\n    \n    result\
    \ += \"db\";\n    \n    return result;\n}", "{\n    string binary = \"\";\n  \
    \  long remainder;\n    long quotient;\n    long digit;\n    bool flag = false;\n\
    \    while(decimal != 0)\n    {\n        remainder = decimal % 2;\n        quotient\
    \ = decimal / 2;\n        digit = quotient % 10;\n        decimal /= 10;\n   \
    \     flag = flag ? false : true;\n        binary += flag ? \"1\" : \"0\";\n \
    \       binary += digit;\n    }\n    binary = binary + \"db\";\n    return binary;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a tags=c++,binary,decimal |>\n<code>\n#include\
    \ <iostream>\n#include <string>\nusing namespace std;", "{\n    string binary\
    \ = \"\";\n    long remainder;\n    long power;\n    long temp;\n    long digit;\n\
    \    long counter;\n    bool flag = false;\n    \n    while(decimal != 0)\n  \
    \  {\n        remainder = decimal % 2;\n        temp = decimal / 2;\n        power\
    \ = temp;\n        \n        for(counter = 1; counter < power; counter++)\n  \
    \      {\n            digit = remainder * 2;\n            \n            if(digit\
    \ > 9)\n            {\n                digit -= 9;\n                flag = true;\n\
    \            }\n            \n            binary += digit;\n            \n   \
    \         remainder = remainder % 2;\n        }\n        \n        decimal = temp;\n\
    \    }\n    \n    if(flag)\n    {\n        binary += \"db\";\n    }\n    \n  \
    \  return binary;\n}\n</code>\n<|/ a tags=c++,algorithm,binary,decimal |>\n<|\
    \ a tags=c++,algorithm,binary,decimal |>\n<code>\n#include <iostream>\n#include\
    \ <string>\nusing namespace std;", "{\n    string result = \"\";\n    long remainder;\n\
    \    long power;\n    bool isNegative;\n    \n    while(decimal != 0)\n    {\n\
    \        remainder = decimal % 2;\n        decimal = decimal / 2;\n        power\
    \ = 1;\n        \n        while(decimal != 0)\n        {\n            power =\
    \ power * 10;\n            decimal = decimal / 2;\n        }\n        \n     \
    \   if(remainder == 1)\n        {\n            result += \"1\";\n        }\n \
    \       else\n        {\n            result += \"0\";\n        }\n        \n \
    \       if(power != 0)\n        {\n            result += \"db\" + to_string(power);\n\
    \        }\n    }\n    \n    if(result.length() > 0)\n    {\n        result =\
    \ \"db\" + result;\n    }\n    \n    if(isNegative)\n    {\n        result = \"\
    -\" + result;\n    }\n    \n    return result;\n}", "{\n    string binary = \"\
    \";\n    long remainder;\n    \n    while (decimal > 0)\n    {\n        remainder\
    \ = decimal % 2;\n        decimal /= 2;\n        binary = char(remainder) + binary;\n\
    \    }\n    \n    return binary;\n}", "{\n    string result = \"\";\n    long\
    \ remainder;\n    long counter = 0;\n    long power = 1;\n    bool isNegative\
    \ = false;\n    \n    while (decimal != 0)\n    {\n        remainder = decimal\
    \ % 2;\n        decimal /= 2;\n        \n        if (remainder == 1)\n       \
    \ {\n            counter++;\n        }\n        else\n        {\n            counter\
    \ += 2;\n        }\n    }\n    \n    while (counter > 0)\n    {\n        result\
    \ += (char)('0' + remainder);\n        counter -= 1;\n        power = power *\
    \ 10;\n    }\n    \n    if (isNegative)\n    {\n        result = '-' + result;\n\
    \    }\n    \n    result += 'db';\n    \n    return result;\n}\n</code>\n<|/ a\
    \ tags=c++,algorithm |>\n<| a |>\n<code>\n#include <iostream>\n#include <string>\n\
    using namespace std;", "{\n    string binary = \"\";\n    long remainder;\n  \
    \  long quotient;\n    long temp;\n    long power;\n    long digit;\n    long\
    \ i;\n    long j;\n    long k;\n    long l;\n    long m;\n    long n;\n    long\
    \ o;\n    long p;\n    long q;\n    long r;\n    long s;\n    long t;\n    long\
    \ u;\n    long v;\n    long w;\n    long x;\n    long y;\n    long z;\n    long\
    \ A;\n    long B;\n    long C;\n    long D;\n    long E;\n    long F;\n    long\
    \ G;\n    long H;\n    long I;\n    long J;\n    long K;\n    long L;\n    long\
    \ M;\n    long N;\n    long O;\n    long P;\n    long Q;\n    long R;\n    long\
    \ S;\n    long T;\n    long U;\n    long V;\n    long W;\n    long X;\n    long\
    \ Y;\n    long Z;\n    long A;\n    long B;\n    long C;\n    long D;\n    long\
    \ E;\n    long F;\n    long G;\n    long H;\n    long I;\n    long J;\n    long\
    \ K;\n    long L;\n    long M;\n    long N;\n    long O;\n    long P;\n    long\
    \ Q;\n    long R;\n    long S;\n    long T;\n    long U;\n    long V;\n    long\
    \ W;\n    long X;\n    long Y;\n    long Z;\n    long A;\n    long B;\n    long\
    \ C;\n    long D;\n    long E;\n    long F;\n    long G;\n    long H;\n    long\
    \ I;\n    long J;\n    long K;\n    long L;\n    long M;\n    long N;\n    long\
    \ O;\n    long P;\n    long Q;\n    long R;\n    long S;\n    long T;\n    long\
    \ U;\n    long V;\n    long W;\n    long X;\n    long Y;\n    long Z;\n    long\
    \ A;\n    long B;\n    long C;\n    long D;", "{\n    string result = \"\";\n\
    \    long remainder = decimal;\n    long power = 1;\n    string binary = \"\"\
    ;\n    string db = \"\";\n    \n    while(decimal != 0)\n    {\n        remainder\
    \ = decimal % 2;\n        decimal /= 2;\n        \n        binary = to_string(power)\
    \ + binary;\n        power = power * 10;\n    }\n    \n    for(int i = 0; i <\
    \ binary.length(); i++)\n    {\n        if(binary[i] == '1')\n        {\n    \
    \        result += db;\n        }\n        else\n        {\n            result\
    \ += '0';\n        }\n    }\n    \n    return result;\n}", "{\n    string result\
    \ = \"\";\n    long remainder;\n    bool isNegative = false;\n    \n    if (decimal\
    \ < 0)\n    {\n        isNegative = true;\n        decimal = -decimal;\n    }\n\
    \    \n    remainder = decimal;\n    \n    while (decimal > 0)\n    {\n      \
    \  remainder = remainder % 2;\n        decimal /= 2;\n        result += char(remainder);\n\
    \    }\n    \n    if (isNegative)\n    {\n        result = \"-db\" + result;\n\
    \    }\n    \n    return result;\n}", "{\n    string binary = \"\";\n    long\
    \ remainder;\n    long temp;\n    long power;\n    long digit;\n    long i;\n\
    \    long j;\n    long k;\n    long l;\n    long m;\n    long n;\n    long o;\n\
    \    long p;\n    long q;\n    long r;\n    long s;\n    long t;\n    long u;\n\
    \    long v;\n    long w;\n    long x;\n    long y;\n    long z;\n    long A;\n\
    \    long B;\n    long C;\n    long D;\n    long E;\n    long F;\n    long G;\n\
    \    long H;\n    long I;\n    long J;\n    long K;\n    long L;\n    long M;\n\
    \    long N;\n    long O;\n    long P;\n    long Q;\n    long R;\n    long S;\n\
    \    long T;\n    long U;\n    long V;\n    long W;\n    long X;\n    long Y;\n\
    \    long Z;\n    long A;\n    long B;\n    long C;\n    long D;\n    long E;\n\
    \    long F;\n    long G;\n    long H;\n    long I;\n    long J;\n    long K;\n\
    \    long L;\n    long M;\n    long N;\n    long O;\n    long P;\n    long Q;\n\
    \    long R;\n    long S;\n    long T;\n    long U;\n    long V;\n    long W;\n\
    \    long X;\n    long Y;\n    long Z;\n    long A;\n    long B;\n    long C;\n\
    \    long D;\n    long E;\n    long F;\n    long G;\n    long H;\n    long I;\n\
    \    long J;\n    long K;\n    long L;\n    long M;\n    long N;\n    long O;\n\
    \    long P;\n    long Q;\n    long R;\n    long S;\n    long T;\n    long U;\n\
    \    long V;\n    long W;\n    long X;\n    long Y;\n    long Z;\n    long A;\n\
    \    long B;\n    long C;\n    long D;\n    long E;\n", "{\n    string result\
    \ = \"\";\n    long remainder;\n    bool isNegative = decimal < 0;\n    long power\
    \ = 1;\n    while(decimal > 0)\n    {\n        remainder = decimal % 2;\n    \
    \    decimal /= 2;\n        power *= 10;\n        result += char(remainder);\n\
    \    }\n    if(isNegative)\n    {\n        result += \"-\";\n    }\n    result\
    \ += \"db\";\n    while(power > 0)\n    {\n        remainder = power % 2;\n  \
    \      power /= 2;\n        result += char(remainder);\n    }\n    return result;\n\
    }\n</code>\n<|/ a |>\n<| c |>\nThis code doesn't work for negative numbers. I\
    \ changed it a little bit to make it work for negative numbers. Please take a\
    \ look at my answer.\n<|/ c |>\n<| a tags=c++,algorithm |>\n<code>\n#include <iostream>\n\
    #include <string>\nusing namespace std;", "{\n    string binary = \"\";\n    long\
    \ remainder;\n    \n    while (decimal != 0)\n    {\n        remainder = decimal\
    \ % 2;\n        decimal /= 2;\n        binary += remainder;\n    }\n    \n   \
    \ return binary;\n}", "{\n    string binary = \"\";\n    long remainder;\n   \
    \ long temp;\n    long power = 1;\n    long digit;\n    long pow;\n    long digits;\n\
    \    long digits_pow;\n    long digits_pow2;\n    long digits_pow3;\n    long\
    \ digits_pow4;\n    long digits_pow5;\n    long digits_pow6;\n    long digits_pow7;\n\
    \    long digits_pow8;\n    long digits_pow9;\n    long digits_pow10;\n    long\
    \ digits_pow11;\n    long digits_pow12;\n    long digits_pow13;\n    long digits_pow14;\n\
    \    long digits_pow15;\n    long digits_pow16;\n    long digits_pow17;\n    long\
    \ digits_pow18;\n    long digits_pow19;\n    long digits_pow20;\n    long digits_pow21;\n\
    \    long digits_pow22;\n    long digits_pow23;\n    long digits_pow24;\n    long\
    \ digits_pow25;\n    long digits_pow26;\n    long digits_pow27;\n    long digits_pow28;\n\
    \    long digits_pow29;\n    long digits_pow30;\n    long digits_pow31;\n    long\
    \ digits_pow32;\n    long digits_pow33;\n    long digits_pow34;\n    long digits_pow35;\n\
    \    long digits_pow36;\n    long digits_pow37;\n    long digits_pow38;\n    long\
    \ digits_pow39;\n    long digits_pow40;\n    long digits_pow41;\n    long digits_pow42;\n\
    \    long digits_pow43;\n    long digits_pow44;\n    long digits_pow45;\n    long\
    \ digits_pow46;\n    long digits_pow47;\n    long digits_pow48;\n    long digits_pow49;\n\
    \    long digits_pow50;\n    long digits_pow51;\n    long digits_pow52;\n    long\
    \ digits_pow53;\n    long digits_pow54;\n    long digits_pow55;\n    long digits_pow56;\n\
    \    long digits_pow57;\n    long digits_pow58;\n    long digits_pow59;\n    long\
    \ digits_pow60;\n    long digits_pow61;\n    long digits_", "{\n    string result\
    \ = \"\";\n    long remainder = decimal;\n    string remainderString = to_string(remainder);\n\
    \    \n    for(int i = 0; i < remainderString.length(); i++)\n    {\n        if(remainder\
    \ >= 2)\n        {\n            result += \"1\";\n            remainder -= 2;\n\
    \        }\n        else\n        {\n            result += \"0\";\n        }\n\
    \    }\n    \n    result += \"db\";\n    \n    return result;\n}\n</code>\n<|/\
    \ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n#include <string>\n\
    using namespace std;", "{\n    string binary = \"\";\n    long remainder;\n  \
    \  long quotient;\n    long power;\n    long temp;\n    long temp2;\n    long\
    \ temp3;\n    long temp4;\n    long temp5;\n    long temp6;\n    long temp7;\n\
    \    long temp8;\n    long temp9;\n    long temp10;\n    long temp11;\n    long\
    \ temp12;\n    long temp13;\n    long temp14;\n    long temp15;\n    long temp16;\n\
    \    long temp17;\n    long temp18;\n    long temp19;\n    long temp20;\n    long\
    \ temp21;\n    long temp22;\n    long temp23;\n    long temp24;\n    long temp25;\n\
    \    long temp26;\n    long temp27;\n    long temp28;\n    long temp29;\n    long\
    \ temp30;\n    long temp31;\n    long temp32;\n    long temp33;\n    long temp34;\n\
    \    long temp35;\n    long temp36;\n    long temp37;\n    long temp38;\n    long\
    \ temp39;\n    long temp40;\n    long temp41;\n    long temp42;\n    long temp43;\n\
    \    long temp44;\n    long temp45;\n    long temp46;\n    long temp47;\n    long\
    \ temp48;\n    long temp49;\n    long temp50;\n    long temp51;\n    long temp52;\n\
    \    long temp53;\n    long temp54;\n    long temp55;\n    long temp56;\n    long\
    \ temp57;\n    long temp58;\n    long temp59;\n    long temp60;\n    long temp61;\n\
    \    long temp62;\n    long temp63;\n    long temp64;\n    long temp65;\n    long\
    \ temp66;\n    long temp67;\n    long temp68;\n    long temp69;\n    long temp70;\n\
    \    long temp71;\n    long temp72;\n    long temp73;\n    long temp74;\n    long\
    \ temp75;\n    long temp76;\n    long temp77;\n    long temp78;\n    long temp79;\n\
    \    long temp80;\n    long temp81;\n    long temp82;\n    long temp83;\n    long\
    \ temp84;\n    long temp", "{\n    string binary = \"\";\n    long remainder;\n\
    \    long quotient;\n    \n    quotient = decimal;\n    \n    while(quotient !=\
    \ 0)\n    {\n        remainder = quotient % 2;\n        quotient = quotient /\
    \ 2;\n        binary = char(remainder) + binary;\n    }\n    \n    binary = char('d')\
    \ + binary;\n    binary = char('b') + binary;\n    \n    return binary;\n}", "{\n\
    \    string binary = \"\";\n    long remainder;\n    long temp;\n    bool isNegative\
    \ = false;\n    bool isEven = false;\n    bool isOdd = false;\n    bool isPositive\
    \ = false;\n    bool isZero = false;\n    bool isDecimal = false;\n    bool isBinary\
    \ = false;\n    bool isDecimalOrBinary = false;\n    bool isDecimalOrBinaryOrZero\
    \ = false;\n    bool isDecimalOrBinaryOrZeroOrNegative = false;\n    bool isDecimalOrBinaryOrZeroOrNegativeOrEven\
    \ = false;\n    bool isDecimalOrBinaryOrZeroOrNegativeOrEvenOrOdd = false;\n \
    \   bool isDecimalOrBinaryOrZeroOrNegativeOrEvenOrOddOrDecimal = false;\n    bool\
    \ isDecimalOrBinaryOrZeroOrNegativeOrEvenOrOddOrDecimalOrBinary = false;\n   \
    \ bool isDecimalOrBinaryOrZeroOrNegativeOrEvenOrOddOrDecimalOrBinaryOrZero = false;\n\
    \    bool isDecimalOrBinaryOrZeroOrNegativeOrEvenOrOddOrDecimalOrBinaryOrZeroOrNegative\
    \ = false;\n    bool isDecimalOrBinaryOrZeroOrNegativeOrEvenOrOddOrDecimalOrBinaryOrZeroOrNegativeOrEven\
    \ = false;\n    bool isDecimalOrBinaryOrZeroOrNegativeOrEvenOrOddOrDecimalOrBinaryOrZeroOrNegativeOrEvenOrOdd\
    \ = false;\n    bool isDecimalOrBinaryOrZeroOrNegativeOrEvenOrOddOrDecimalOrBinaryOrZeroOrNegativeOrEvenOrOddOrDecimal\
    \ = false;\n    bool isDecimalOrBinaryOrZeroOrNegativeOrEvenOrOddOrDecimalOrBinaryOrZeroOrNegativeOrEvenOrOddOrDecimalOrBinary\
    \ = false;\n    bool isDecimalOrBinaryOrZeroOrNegativeOrEvenOrOddOrDecimalOrBinaryOrZeroOrNegativeOrEvenOrOddOrDecimalOrBinaryOrZero\
    \ = false;\n    bool isDecimalOrBinaryOrZeroOrNegativeOrEvenOrOddOrDecimalOrBinaryOrZeroOrNegativeOrEvenOrOddOrDecimalOrBinaryOrZeroOrNegative\
    \ = false;\n    bool isDecimalOrBinaryOrZeroOrNegativeOrEvenOrOddOrDecimalOrBinaryOrZeroOrNegativeOrEvenOrOddOrDecimalOrBinaryOrZeroOrNegativeOrEven\
    \ = false;\n    bool isDecimalOrBinaryOrZeroOrNegativeOrEvenOrOddOrDecimalOrBinaryOrZeroOrNegativeOrEvenOrOddOrDecimalOrBinaryOrZeroOrNegativeOrEvenOrOdd\
    \ = false;\n    bool isDecimalOrBinaryOrZeroOrNegativeOrEvenOrOddOrDecimal", "{\n\
    \    string binary = \"\";\n    long remainder;\n    \n    while(decimal != 0)\n\
    \    {\n        remainder = decimal % 2;\n        decimal /= 2;\n        binary\
    \ += remainder;\n    }\n    \n    return binary;\n}", "{\n    string binary =\
    \ \"\";\n    long remainder = decimal;\n    long quotient = 1;\n    while(quotient\
    \ != 0)\n    {\n        remainder = remainder % 2;\n        quotient = quotient\
    \ / 2;\n        binary = char(remainder) + binary;\n    }\n    return binary;\n\
    }\n</code>\n<|/ a tags=c++,binary,decimal |>\n<| c |>\nThis doesn't work. Try\
    \ it for decimal `0`.\n<|/ c |>\n<| c |>\nIt works. Try it for decimal `0`.\n\
    <|/ c |>\n<| c |>\nIt doesn't work for `0`. Try it for decimal `0`.\n<|/ c |>\n\
    <| c |>\nIt works for decimal `0`. Try it for decimal `0`.\n<|/ c |>\n<| c |>\n\
    It works for decimal `0`. Try it for decimal `0`.\n<|/ c |>\n<| a |>\n<code>\n\
    #include <iostream>\n#include <string>", "{\n    string result = \"\";\n    long\
    \ remainder;\n    \n    while(decimal > 0)\n    {\n        remainder = decimal\
    \ % 2;\n        decimal /= 2;\n        result += \"0\" + remainder;\n    }\n \
    \   \n    result += \"db\";\n    \n    return result;\n}\n</code>\n<|/ a tags=c++,string,binary,decimal\
    \ |>\n<| c |>\nThis doesn't work. Try it with `decimal = 15`.\n<|/ c |>\n<| c\
    \ |>\nIt works. I tested it before posting it. The result was \"1111\".\n<|/ c\
    \ |>\n<| c |>\nI tested it again and it works. I must have had a typo when I first\
    \ tested it. Sorry.\n<|/ c |>\n<| c |>\nNo problem. Thanks for your help.\n<|/\
    \ c |>\n<| c |>\nI tested it again and it works. I must have had a typo when I\
    \ first tested it. Sorry.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n\
    #include <string>\nusing namespace std;", "{\n    string binary = \"\";\n    long\
    \ remainder;\n    \n    while (decimal != 0)\n    {\n        remainder = decimal\
    \ % 2;\n        decimal /= 2;\n        binary += remainder;\n    }\n    \n   \
    \ return binary;\n}", "{\n    string result = \"\";\n    long remainder = decimal;\n\
    \    string remainderStr = \"\";\n    string decimalStr = \"\";\n    string binaryStr\
    \ = \"\";\n    \n    while (remainder > 0)\n    {\n        remainderStr += remainder%2;\n\
    \        remainder = remainder/2;\n    }\n    \n    decimalStr = decimalStr +\
    \ remainderStr;\n    \n    while (remainder > 0)\n    {\n        binaryStr +=\
    \ remainder%2;\n        remainder = remainder/2;\n    }\n    \n    result += decimalStr;\n\
    \    result += \"db\";\n    result += binaryStr;\n    \n    return result;\n}\n\
    </code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work for negative numbers. You\
    \ have to add an extra character to the beginning of the string for negative numbers.\
    \ Also, your function doesn't work for negative numbers. You have to add an extra\
    \ character to the beginning of the string for negative numbers. Also, your function\
    \ doesn't work for negative numbers. You have to add an extra character to the\
    \ beginning of the string for negative numbers. Also, your function doesn't work\
    \ for negative numbers. You have to add an extra character to the beginning of\
    \ the string for negative numbers. Also, your function doesn't work for negative\
    \ numbers. You have to add an extra character to the beginning of the string for\
    \ negative numbers. Also, your function doesn't work for negative numbers. You\
    \ have to add an extra character to the beginning of the string for negative numbers.\
    \ Also, your function doesn't work for negative numbers. You have to add an extra\
    \ character to the beginning of the string for negative numbers. Also, your function\
    \ doesn't work for negative numbers. You have to add an extra character to the\
    \ beginning of the string for negative numbers. Also, your function doesn't work\
    \ for negative numbers. You have to add an extra character to the beginning of\
    \ the string for negative numbers.\n<|/ c |>\n<| c |>\nThis doesn't work for negative\
    \ numbers. You have to add an extra character to the beginning of the string for\
    \ negative numbers. Also, your function doesn't work for negative numbers. You\
    \ have to add an extra character to the beginning of the string for negative numbers.\
    \ Also, your function doesn't work for negative numbers. You have to add an extra\
    \ character to the beginning of the string for negative numbers. Also, your function\
    \ doesn't work for negative numbers. You have to add an extra character to the\
    \ beginning of the string for negative numbers. Also, your function doesn't work\
    \ for negative numbers. You have to add an extra character to the beginning of\
    \ the string for negative numbers. Also, your function doesn't work for negative\
    \ numbers. You have to add an extra character to the beginning of the string for\
    \ negative numbers. Also, your function doesn't work for negative numbers. You\
    \ have to add an extra character to the beginning of the string for negative numbers.\
    \ Also, your function doesn't work for negative ", "{\n    string result = \"\"\
    ;\n    long remainder;\n    long temp;\n    \n    while(decimal != 0)\n    {\n\
    \        remainder = decimal % 2;\n        decimal = decimal / 2;\n        temp\
    \ = remainder;\n        \n        if(temp == 0)\n        {\n            result\
    \ = \"0\" + result;\n        }\n        else\n        {\n            result =\
    \ \"1\" + result;\n        }\n    }\n    \n    if(result.length() > 1)\n    {\n\
    \        result = \"db\" + result;\n    }\n    \n    return result;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n#include <iostream>\n#include <string>\n\
    using namespace std;", "{\n    string result = \"\";\n    long remainder;\n  \
    \  long power;\n    long temp;\n    long temp2;\n    long temp3;\n    long temp4;\n\
    \    long temp5;\n    long temp6;\n    long temp7;\n    long temp8;\n    long\
    \ temp9;\n    long temp10;\n    long temp11;\n    long temp12;\n    long temp13;\n\
    \    long temp14;\n    long temp15;\n    long temp16;\n    long temp17;\n    long\
    \ temp18;\n    long temp19;\n    long temp20;\n    long temp21;\n    long temp22;\n\
    \    long temp23;\n    long temp24;\n    long temp25;\n    long temp26;\n    long\
    \ temp27;\n    long temp28;\n    long temp29;\n    long temp30;\n    long temp31;\n\
    \    long temp32;\n    long temp33;\n    long temp34;\n    long temp35;\n    long\
    \ temp36;\n    long temp37;\n    long temp38;\n    long temp39;\n    long temp40;\n\
    \    long temp41;\n    long temp42;\n    long temp43;\n    long temp44;\n    long\
    \ temp45;\n    long temp46;\n    long temp47;\n    long temp48;\n    long temp49;\n\
    \    long temp50;\n    long temp51;\n    long temp52;\n    long temp53;\n    long\
    \ temp54;\n    long temp55;\n    long temp56;\n    long temp57;\n    long temp58;\n\
    \    long temp59;\n    long temp60;\n    long temp61;\n    long temp62;\n    long\
    \ temp63;\n    long temp64;\n    long temp65;\n    long temp66;\n    long temp67;\n\
    \    long temp68;\n    long temp69;\n    long temp70;\n    long temp71;\n    long\
    \ temp72;\n    long temp73;\n    long temp74;\n    long temp75;\n    long temp76;\n\
    \    long temp77;\n    long temp78;\n    long temp79;\n    long temp80;\n    long\
    \ temp81;\n    long temp82;\n    long temp83;\n    long temp84;\n    long temp85;\n\
    \    long temp86", "{\n    string binary = \"\";\n    long remainder;\n    \n\
    \    while (decimal > 0)\n    {\n        remainder = decimal % 2;\n        decimal\
    \ /= 2;\n        binary += remainder;\n    }\n    \n    return binary;\n}", "{\n\
    \    string result = \"\";\n    long remainder;\n    \n    while (decimal != 0)\n\
    \    {\n        remainder = decimal % 2;\n        decimal /= 2;\n        result\
    \ += char(remainder);\n    }\n    \n    result += \"db\";\n    \n    return result;\n\
    }"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
