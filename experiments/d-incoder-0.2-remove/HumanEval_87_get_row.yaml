name: HumanEval_87_get_row
language: d
prompt: "import std.math;\nimport std.typecons;\n/*\n\n    You are given a 2 dimensional\
  \ data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n\
  \    each row may contain a different number of columns.\n    Given lst, and integer\
  \ x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2,\
  \ y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting\
  \ with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also,\
  \ sort coordinates of the row by columns in descending order.\n    \n    Examples:\n\
  \                \n*/\nTuple!(long, long)[] get_row(long[][] lst, long x) \n"
tests: "unittest\n{\n    alias candidate = get_row;\n\n    assert(candidate([[1L,\
  \ 2L, 3L, 4L, 5L, 6L], [1L, 2L, 3L, 4L, 1L, 6L], [1L, 2L, 3L, 4L, 5L, 1L]], 1L)\
  \ == [tuple(0L, 0L), tuple(1L, 4L), tuple(1L, 0L), tuple(2L, 5L), tuple(2L, 0L)]);\n\
  \    assert(candidate([[1L, 2L, 3L, 4L, 5L, 6L], [1L, 2L, 3L, 4L, 5L, 6L], [1L,\
  \ 2L, 3L, 4L, 5L, 6L], [1L, 2L, 3L, 4L, 5L, 6L], [1L, 2L, 3L, 4L, 5L, 6L], [1L,\
  \ 2L, 3L, 4L, 5L, 6L]], 2L) == [tuple(0L, 1L), tuple(1L, 1L), tuple(2L, 1L), tuple(3L,\
  \ 1L), tuple(4L, 1L), tuple(5L, 1L)]);\n    assert(candidate([[1L, 2L, 3L, 4L, 5L,\
  \ 6L], [1L, 2L, 3L, 4L, 5L, 6L], [1L, 1L, 3L, 4L, 5L, 6L], [1L, 2L, 1L, 4L, 5L,\
  \ 6L], [1L, 2L, 3L, 1L, 5L, 6L], [1L, 2L, 3L, 4L, 1L, 6L], [1L, 2L, 3L, 4L, 5L,\
  \ 1L]], 1L) == [tuple(0L, 0L), tuple(1L, 0L), tuple(2L, 1L), tuple(2L, 0L), tuple(3L,\
  \ 2L), tuple(3L, 0L), tuple(4L, 3L), tuple(4L, 0L), tuple(5L, 4L), tuple(5L, 0L),\
  \ tuple(6L, 5L), tuple(6L, 0L)]);\n    assert(candidate([], 1L) == []);\n    assert(candidate([[1L]],\
  \ 2L) == []);\n    assert(candidate([[], [1L], [1L, 2L, 3L]], 3L) == [tuple(2L,\
  \ 2L)]);\n}\nvoid main(){}"
completions: ["{\n    Tuple!(long, long)[] res = new Tuple!(long, long)[0];\n    foreach(i\
    \ : 0..lst.lenght-1) {\n        foreach(j : 0..lst[i].lenght-1) {\n          \
    \  if(lst[i][j] == x) {\n                res = append(res, Tuple!(i, j));\n  \
    \          }\n        }\n    }\n    sort(res);\n    return res;\n}", "{\n    Tuple!(long,\
    \ long)[] result = null;\n    \n    foreach(row: lst, row_index: 0) \n    {\n\
    \        foreach(column: row, column_index: 0) \n        {\n            if(column_index\
    \ == x) \n            {\n                result = Tuple!(long, long)[](row_index,\
    \ column_index);\n                break;\n            }\n        }\n    }\n  \
    \  \n    return result;\n}", "{\n    Tuple!(long, long)[] res = null;\n    \n\
    \    foreach(row: lst, row: row) \n    {\n        foreach(col: row, col: col)\
    \ \n        {\n            if(col == x) \n            {\n                res =\
    \ Tuple!(long, long)[Tuple!(0, row), Tuple!(1, row)];\n                break;\n\
    \            }\n        }\n    }\n    \n    sort(res);\n    sort(res[1], res[1]);\n\
    \    \n    return res;\n}", "{\n    Tuple!(long, long)[] result = null;\n    foreach(row:\
    \ lst, row: row) \n    {\n        foreach(col: row, col: col) \n        {\n  \
    \          if(col == x) \n            {\n                result = Tuple!(long,\
    \ long)[](row, col);\n                break;\n            }\n        }\n    }\n\
    \    return result;\n}", "{\n    long n = lst.length;\n    long[] res = new long[n];\n\
    \    for(int i = 0; i < n; i++)\n    {\n        if(lst[i][0] == x)\n        {\n\
    \            res[i] = i;\n            break;\n        }\n    }\n    return Tuple!(long,\
    \ long)[](res, n - 1);\n}", "{\n    long rows = 0;\n    long cols = 0;\n    for(long\
    \ i = 0; i < lst.length; i++){\n        if(lst[i][0] == x){\n            rows++;\n\
    \        }\n        if(lst[i][1] == x){\n            cols++;\n        }\n    }\n\
    \    Tuple!(long, long)[] res = Tuple!(long, long)[(0, 0)];\n    for(long i =\
    \ 0; i < lst.length; i++){\n        if(lst[i][0] == x){\n            res[rows]\
    \ = Tuple!(long, long)[lst[i][1], lst[i][0]];\n            rows++;\n        }\n\
    \        if(lst[i][1] == x){\n            res[rows] = Tuple!(long, long)[lst[i][0],\
    \ lst[i][1]];\n            cols--;\n        }\n    }\n    return res;\n}", "{\n\
    \    long n = lst.length;\n    long m = lst[0].length;\n    long i, j, k, m, n;\n\
    \    long[][] coords = new long[n][2];\n    \n    for(i = 0; i < n; i++)\n   \
    \ {\n        for(j = 0; j < m; j++)\n        {\n            if(lst[i][j] == x)\n\
    \            {\n                coords[i][0] = 0;\n                coords[i][1]\
    \ = j;\n                break;\n            }\n        }\n    }\n    \n    for(i\
    \ = 0; i < n; i++)\n    {\n        for(j = 0; j < m; j++)\n        {\n       \
    \     if(coords[i][0] == 0)\n            {\n                coords[i][0] = i;\n\
    \                coords[i][1] = j;\n                break;\n            }\n  \
    \      }\n    }\n    \n    for(i = 0; i < n; i++)\n    {\n        for(j = 0; j\
    \ < m; j++)\n        {\n            if(coords[i][0] == i)\n            {\n   \
    \             coords[i][0] = i;\n                coords[i][1] = j;\n         \
    \       break;\n            }\n        }\n    }\n    \n    for(i = 0; i < n; i++)\n\
    \    {\n        for(j = 0; j < m; j++)\n        {\n            if(coords[i][0]\
    \ == j)\n            {\n                coords[i][0] = i;\n                coords[i][1]\
    \ = j;\n                break;\n            }\n        }\n    }\n    \n    for(i\
    \ = 0; i < n; i++)\n    {\n        for(j = 0; j < m; j++)\n        {\n       \
    \     if(coords[i][0] == j)\n            {\n                coords[i][0] = i;\n\
    \                coords[i][1] = j;\n                break;\n            }\n  \
    \      }\n    }\n    \n    for(i = 0; i < n; i++)\n    {\n        for(j = 0; j\
    \ < m; j++)\n        {\n            if(coords[i][0] == j)\n            {\n   \
    \             coords[i][0] = i;\n                coords[i][1] = j;\n         \
    \       break;\n            }\n        }\n    }\n    \n    for(i = 0; i < n; i++)\n\
    \    {\n        for(j = 0; j < m; j++)\n        {\n            if(coords[i][0]\
    \ == j)\n            {\n                coords[i][0] = i;\n                coords[i][1]\
    \ = j;\n                break;\n            }\n        }\n    }\n    \n    for(i\
    \ = 0; i < n; i++)\n    {\n        for(j = 0; j < m; j++)\n        {\n       \
    \     if(coords[i][0] == j)\n            {\n                coords[i][0] = i;\n\
    \                coords[i][1] = j;\n                break;\n            }\n  \
    \      }\n    }\n    \n    for(i = 0; i < n; i++)\n    {\n        for(j = 0; j\
    \ < m; j++)\n        {\n            if(coords[i][0] == j)\n            {\n   \
    \             coords[i][0] = i;\n                coords[i][1] = j;\n         \
    \       break;\n            }\n        }\n    }\n    \n    for(i = 0; i < n; i++)\n\
    \    {\n        for(j = 0; j < m; j++)\n        {\n            if(coords[i][0]\
    \ == j)\n            {\n                coords[i][0] = i;\n                coords[i][1]\
    \ = j;\n                break;\n            }\n        }\n", "{\n    Tuple!(long,\
    \ long)[] res = new Tuple!(long, long)[lst.length];\n    for(int i = 0; i < lst.length;\
    \ i++)\n    {\n        if(lst[i][0] == x)\n        {\n            res[i] = Tuple!(lst[i][0],\
    \ lst[i][1]);\n        }\n    }\n    Arrays.sort(res);\n    return res;\n}", "{\n\
    \    Tuple!(long, long)[] result = new Tuple!(long, long)[0];\n    \n    foreach(i\
    \ : 0..lst.len())\n    {\n        foreach(j : 0..lst[i].len())\n        {\n  \
    \          if(lst[i][j] == x)\n            {\n                result.push(Tuple!(i,\
    \ j));\n            }\n        }\n    }\n    \n    result.sort(function(a, b)\
    \ -> a.first < b.first ? -1 : a.first > b.first ? 1 : 0);\n    result.sort(function(a,\
    \ b) -> a.second > b.second ? -1 : a.second < b.second ? 1 : 0);\n    \n    return\
    \ result;\n}", "{\n    long n = lst.length;\n    long m = lst[0].length;\n   \
    \ long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n    long m1\
    \ = m;\n    long n1 = n;\n    long m2 = m;\n    long n2 = n;\n    long m3 = m;\n\
    \    long n3 = n;\n    long m4 = m;\n    long n4 = n;\n    long m5 = m;\n    long\
    \ n5 = n;\n    long m6 = m;\n    long n6 = n;\n    long m7 = m;\n    long n7 =\
    \ n;\n    long m8 = m;\n    long n8 = n;\n    long m9 = m;\n    long n9 = n;\n\
    \    long m10 = m;\n    long n10 = n;\n    long m11 = m;\n    long n11 = n;\n\
    \    long m12 = m;\n    long n12 = n;\n    long m13 = m;\n    long n13 = n;\n\
    \    long m14 = m;\n    long n14 = n;\n    long m15 = m;\n    long n15 = n;\n\
    \    long m16 = m;\n    long n16 = n;\n    long m17 = m;\n    long n17 = n;\n\
    \    long m18 = m;\n    long n18 = n;\n    long m19 = m;\n    long n19 = n;\n\
    \    long m20 = m;\n    long n20 = n;\n    long m21 = m;\n    long n21 = n;\n\
    \    long m22 = m;\n    long n22 = n;\n    long m23 = m;\n    long n23 = n;\n\
    \    long m24 = m;\n    long n24 = n;\n    long m25 = m;\n    long n25 = n;\n\
    \    long m26 = m;\n    long n26 = n;\n    long m27 = m;\n    long n27 = n;\n\
    \    long m28 = m;\n    long n28 = n;\n    long m29 = m;\n    long n29 = n;\n\
    \    long m30 = m;\n    long n30 = n;\n    long m31 = m;\n    long n31 = n;\n\
    \    long m32 = m;\n    long n32 = n;\n    long m33 = m;\n    long n33 = n;\n\
    \    long m34 = m;\n    long n34 = n;\n    long m35 = m;\n    long n35 = n;\n\
    \    long m36 = m;\n    long n36 = n;\n    ", "{\n    Tuple!(long, long)[] result\
    \ = new Tuple!(long, long)[lst.length];\n    \n    for(int i = 0; i < lst.length;\
    \ i++)\n    {\n        if(lst[i][0] == x)\n        {\n            result[i] =\
    \ new Tuple!(lst[i][0], lst[i][1]);\n        }\n    }\n    \n    for(int i = 0;\
    \ i < lst.length; i++)\n    {\n        if(lst[i][1] > x)\n        {\n        \
    \    result[i] = new Tuple!(lst[i][0], lst[i][1] - 1);\n        }\n    }\n   \
    \ \n    for(int i = 0; i < lst.length; i++)\n    {\n        if(lst[i][1] < x)\n\
    \        {\n            result[i] = new Tuple!(lst[i][0], lst[i][1] + 1);\n  \
    \      }\n    }\n    \n    for(int i = 0; i < lst.length; i++)\n    {\n      \
    \  if(lst[i][1] > x && lst[i][1] < lst[i][0])\n        {\n            result[i]\
    \ = new Tuple!(lst[i][0], lst[i][1]);\n        }\n    }\n    \n    for(int i =\
    \ 0; i < lst.length; i++)\n    {\n        if(lst[i][1] < x && lst[i][1] > lst[i][0])\n\
    \        {\n            result[i] = new Tuple!(lst[i][0], lst[i][1]);\n      \
    \  }\n    }\n    \n    for(int i = 0; i < lst.length; i++)\n    {\n        if(lst[i][1]\
    \ > x && lst[i][1] < lst[i][0])\n        {\n            result[i] = new Tuple!(lst[i][0],\
    \ lst[i][1]);\n        }\n    }\n    \n    for(int i = 0; i < lst.length; i++)\n\
    \    {\n        if(lst[i][1] < x && lst[i][1] > lst[i][0])\n        {\n      \
    \      result[i] = new Tuple!(lst[i][0], lst[i][1]);\n        }\n    }\n    \n\
    \    for(int i = 0; i < lst.length; i++)\n    {\n        if(lst[i][1] > x && lst[i][1]\
    \ < lst[i][0])\n        {\n            result[i] = new Tuple!(lst[i][0], lst[i][1]);\n\
    \        }\n    }\n    \n    for(int i = 0; i < lst.length; i++)\n    {\n    \
    \    if(lst[i][1] < x && lst[i][1] > lst[i][0])\n        {\n            result[i]\
    \ = new Tuple!(lst[i][0], lst[i][1]);\n        }\n    }\n    \n    for(int i =\
    \ 0; i < lst.length; i++)\n    {\n        if(lst[i][1] > x && lst[i][1] < lst[i][0])\n\
    \        {\n            result[i] = new Tuple!(lst[i][0], lst[i][1]);\n      \
    \  }\n    }\n    \n    for(int i = 0; i < lst.length; i++)\n    {\n        if(lst[i][1]\
    \ < x && lst[i][1] > lst[i][0])\n        {\n            result[i] = new Tuple!(lst[i][0],\
    \ lst[i][1]);\n        }\n    }\n    \n    for(int i = 0; i < lst.length; i++)\n\
    \    {\n        if(lst[i][1] > x && lst[i][1] < lst[i][0])\n        {\n      \
    \      result[i] = new Tuple", "{\n    long n = lst.length;\n    long m = lst[0].length;\n\
    \    long i, j, k, l, m, n, m, i, j, k, l, m, n, m, i, j, k, l, m, n, m, i, j,\
    \ k, l, m, n, m, i, j, k, l, m, n, m, i, j, k, l, m, n, m, i, j, k, l, m, n, m,\
    \ i, j, k, l, m, n, m, i, j, k, l, m, n, m, i, j, k, l, m, n, m, i, j, k, l, m,\
    \ n, m, i, j, k, l, m, n, m, i, j, k, l, m, n, m, i, j, k, l, m, n, m, i, j, k,\
    \ l, m, n, m, i, j, k, l, m, n, m, i, j, k, l, m, n, m, i, j, k, l, m, n, m, i,\
    \ j, k, l, m, n, m, i, j, k, l, m, n, m, i, j, k, l, m, n, m, i, j, k, l, m, n,\
    \ m, i, j, k, l, m, n, m, i, j, k, l, m, n, m, i, j, k, l, m, n, m, i, j, k, l,\
    \ m, n, m, i, j, k, l, m, n, m, i, j, k, l, m, n, m, i, j, k, l, m, n, m, i, j,\
    \ k, l, m, n, m, i, j, k, l, m, n, m, i, j, k, l, m, n, m, i, j, k, l, m, n, m,\
    \ i, j, k, l, m, n, m, i, j, k, l, m, n, m, i, j, k, l, m, n, m, i, j, k, l, m,\
    \ n, m, i, j, k, l, m, n, m, i, j, k, l, m, n, m, i, j, k, l, m, n, m, i, j, k,\
    \ l, m, n, m, i, j, k, l, m, n, m, i, j, k, l, m, n, m, i, j, k, l, m, n, m, i,\
    \ j, k, l, m, n, m, i, j, k, l, m, n, m, i, j, k, l, m, n, m, i, j, k, l, m, n,\
    \ m, i, j, k, l, m, n, m, i, j, k, l, m, n, m, i, j, k, l, m, n, m, i, j, k, l,\
    \ m, n, m, i, j, k, l, m, n, m, i, j, k, l, m, n, m, i, j, k, l, m, n, m, i, j,\
    \ k, l, m, n, m, i, j, k, l, m, n, m, i, j, k, l, m, n, m, i, j, k, l, m, n, m,\
    \ i, j, k, l, m, n, m, i, j, k, l, m, n, m, i, j, k, l, m, n, m, i, j, k, l, m,\
    \ n, m, i, j, k, l, m, n, m, i, j, k, l, m, n, m, i, j, k, l, m, n, m, i, j, k,\
    \ l, m, n, m, i, j, k, l, m, n, m, i, j, k, l, m, n, m, i, j, k, l, m, n, m, i,\
    \ j, k, l, m, ", "{\n    long n = lst.length;\n    long m = lst[0].length;\n \
    \   long result[][] = new long[n][m];\n    long row = 0;\n    long col = 0;\n\
    \    \n    for(long i = 0; i < n; i++)\n    {\n        for(long j = 0; j < m;\
    \ j++)\n        {\n            if(lst[i][j] == x)\n            {\n           \
    \     result[row][col] = i;\n                result[row][col + 1] = j;\n     \
    \           row++;\n                col++;\n            }\n        }\n    }\n\
    \    \n    for(long i = 0; i < n; i++)\n    {\n        for(long j = 0; j < m;\
    \ j++)\n        {\n            if(lst[i][j] > x)\n            {\n            \
    \    result[row][col] = i;\n                result[row][col + 1] = j;\n      \
    \          row++;\n                col++;\n            }\n        }\n    }\n \
    \   \n    for(long i = 0; i < n; i++)\n    {\n        for(long j = 0; j < m; j++)\n\
    \        {\n            if(lst[i][j] < x)\n            {\n                result[row][col]\
    \ = i;\n                result[row][col + 1] = j;\n                row++;\n  \
    \              col++;\n            }\n        }\n    }\n    \n    for(long i =\
    \ 0; i < n; i++)\n    {\n        for(long j = 0; j < m; j++)\n        {\n    \
    \        if(lst[i][j] == x)\n            {\n                result[row][col] =\
    \ i;\n                result[row][col + 1] = j;\n                row++;\n    \
    \            col++;\n            }\n        }\n    }\n    \n    for(long i = 0;\
    \ i < n; i++)\n    {\n        for(long j = 0; j < m; j++)\n        {\n       \
    \     if(lst[i][j] > x)\n            {\n                result[row][col] = i;\n\
    \                result[row][col + 1] = j;\n                row++;\n         \
    \       col++;\n            }\n        }\n    }\n    \n    for(long i = 0; i <\
    \ n; i++)\n    {\n        for(long j = 0; j < m; j++)\n        {\n           \
    \ if(lst[i][j] < x)\n            {\n                result[row][col] = i;\n  \
    \              result[row][col + 1] = j;\n                row++;\n           \
    \     col++;\n            }\n        }\n    }\n    \n    for(long i = 0; i < n;\
    \ i++)\n    {\n        for(long j = 0; j < m; j++)\n        {\n            if(lst[i][j]\
    \ == x)\n            {\n                result[row][col] = i;\n              \
    \  result[row][col + 1] = j;\n                row++;\n                col++;\n\
    \            }\n        }\n    }\n    \n    for(long i = 0; i < n; i++)\n    {\n\
    \        for(long j = 0; j < m; j++)\n        {\n            if(lst[i][j] > x)\n\
    \            {\n                result[row][col] = i;\n                result[row][col\
    \ + 1] = j;\n                row++;\n                col++;\n            }\n \
    \       }\n    }\n    \n    ", "{\n    Tuple!(long, long)[] ans;\n    \n    foreach(row:\
    \ lst, i: 0)\n    {\n        foreach(col: row, j: 0)\n        {\n            if(col\
    \ == x)\n            {\n                ans = Tuple!(long, long)[](Tuple!(i +\
    \ 1, j + 1), Tuple!(i + 1, j));\n            }\n        }\n    }\n    \n    foreach(row:\
    \ lst, i: 0)\n    {\n        foreach(col: row, j: 0)\n        {\n            if(col\
    \ != x)\n            {\n                ans = Tuple!(long, long)[](Tuple!(i +\
    \ 1, j + 1), Tuple!(i + 1, j));\n            }\n        }\n    }\n    \n    return\
    \ ans;\n}", "{\n    long n = lst.length;\n    long m = lst[0].length;\n    long\
    \ i, j, k;\n    \n    for(i = 0; i < n; i++)\n    {\n        for(j = 0; j < m;\
    \ j++)\n        {\n            if(lst[i][j] == x)\n            {\n           \
    \     return Tuple!(long, long)[Tuple!(i-1, j), Tuple!(i, j-1)];\n           \
    \ }\n        }\n    }\n    return Tuple!(long, long)[Tuple!(n, m)];\n}", "{\n\
    \    long n = lst.length;\n    long m = lst[0].length;\n    long[] res = new long[n];\n\
    \    for(int i = 0; i < n; i++)\n    {\n        for(int j = 0; j < m; j++)\n \
    \       {\n            if(lst[i][j] == x)\n            {\n                res[i]\
    \ = j;\n                break;\n            }\n        }\n    }\n    return Tuple!(long,\
    \ long)[](res, n - 1);\n}", "{\n    long n = lst.length;\n    long m = lst[0].length;\n\
    \    long i, j, k;\n    Tuple!(long, long)[] result = new Tuple!(long, long)[n];\n\
    \    \n    for(i = 0; i < n; i++)\n    {\n        for(j = 0; j < m; j++)\n   \
    \     {\n            if(lst[i][j] == x)\n            {\n                result[i]\
    \ = Tuple!(long, long)[i, j];\n                break;\n            }\n       \
    \ }\n    }\n    \n    for(i = 0; i < n; i++)\n    {\n        for(j = m-1; j >=\
    \ 0; j--)\n        {\n            if(lst[i][j] == x)\n            {\n        \
    \        result[i] = Tuple!(long, long)[i, j];\n                break;\n     \
    \       }\n        }\n    }\n    \n    for(i = 0; i < n; i++)\n    {\n       \
    \ for(j = 0; j < m; j++)\n        {\n            if(lst[i][j] == x)\n        \
    \    {\n                result[i] = Tuple!(long, long)[i, j];\n              \
    \  break;\n            }\n        }\n    }\n    \n    for(i = 0; i < n; i++)\n\
    \    {\n        for(j = 0; j < m; j++)\n        {\n            if(lst[i][j] ==\
    \ x)\n            {\n                result[i] = Tuple!(long, long)[i, j];\n \
    \               break;\n            }\n        }\n    }\n    \n    for(i = 0;\
    \ i < n; i++)\n    {\n        for(j = 0; j < m; j++)\n        {\n            if(lst[i][j]\
    \ == x)\n            {\n                result[i] = Tuple!(long, long)[i, j];\n\
    \                break;\n            }\n        }\n    }\n    \n    for(i = 0;\
    \ i < n; i++)\n    {\n        for(j = 0; j < m; j++)\n        {\n            if(lst[i][j]\
    \ == x)\n            {\n                result[i] = Tuple!(long, long)[i, j];\n\
    \                break;\n            }\n        }\n    }\n    \n    for(i = 0;\
    \ i < n; i++)\n    {\n        for(j = 0; j < m; j++)\n        {\n            if(lst[i][j]\
    \ == x)\n            {\n                result[i] = Tuple!(long, long)[i, j];\n\
    \                break;\n            }\n        }\n    }\n    \n    for(i = 0;\
    \ i < n; i++)\n    {\n        for(j = 0; j < m; j++)\n        {\n            if(lst[i][j]\
    \ == x)\n            {\n                result[i] = Tuple!(long, long)[i, j];\n\
    \                break;\n            }\n        }\n    }\n    \n    for(i = 0;\
    \ i < n; i++)\n    {\n        for(j = 0; j < m; j++)\n        {\n            if(lst[i][j]\
    \ == x)\n            {\n                result[i] = Tuple!(long, long)[i, j];\n\
    \                break;\n            }\n        }\n    }\n    \n    for(i = 0;\
    \ i < n; i++)\n    {\n        for(j = 0; j < m; j++)\n        {\n            if(lst[i][j]\
    \ == x)\n            {\n                result[i] = Tuple!(long, long)[i, j];\n\
    \                break;\n            }\n        }\n    }\n    \n    for(i = 0;\
    \ i < n; i++)\n    {\n        for(j = 0; j < m; j++)\n        {\n            if(lst",
  "{\n    Tuple!(long, long)[] ans;\n    \n    foreach(row,lst)\n    {\n        foreach(col,row)\n\
    \        {\n            if(col == x)\n            {\n                ans = Tuple!(long,\
    \ long)[Tuple!(0, col), Tuple!(1, col)];\n                break;\n           \
    \ }\n        }\n    }\n    \n    foreach(row,lst)\n    {\n        foreach(col,row)\n\
    \        {\n            if(col > x)\n            {\n                ans = Tuple!(long,\
    \ long)[Tuple!(0, col), Tuple!(1, col)];\n                break;\n           \
    \ }\n        }\n    }\n    \n    return ans;\n}", "{\n    Tuple!(long, long)[]\
    \ res = null;\n    foreach(row,lst)\n    {\n        foreach(col,row)\n       \
    \ {\n            if(col == x)\n            {\n                res = Tuple!(long,\
    \ long)[Tuple!(0, col), Tuple!(1, col)];\n                break;\n           \
    \ }\n        }\n    }\n    return res;\n}", "{\n    long[] res = new long[lst.length];\n\
    \    for(int i = 0; i < lst.length; i++)\n    {\n        if(lst[i][0] == x)\n\
    \        {\n            res[i] = lst[i][1];\n        }\n    }\n    return Tuple!(long,\
    \ long)[](res);\n}", "{\n    long n = lst.length;\n    long m = lst[0].length;\n\
    \    long i, j, k;\n    Tuple!(long, long)[] res = new Tuple!(long, long)[n];\n\
    \    \n    for(i = 0; i < n; i++)\n    {\n        for(j = 0; j < m; j++)\n   \
    \     {\n            if(lst[i][j] == x)\n            {\n                res[i]\
    \ = Tuple!(i, j);\n                break;\n            }\n        }\n    }\n \
    \   \n    for(i = 0; i < n; i++)\n    {\n        for(j = 0; j < m; j++)\n    \
    \    {\n            if(lst[i][j] > x)\n            {\n                res[i] =\
    \ Tuple!(i, j);\n                break;\n            }\n        }\n    }\n   \
    \ \n    return res;\n}", "{\n    Tuple!(long, long)[] res = new Tuple!(long, long)[0];\n\
    \    for(int i = 0; i < lst.length; ++i)\n    {\n        if(lst[i][0] == x)\n\
    \        {\n            Tuple!(long, long)[] row = new Tuple!(long, long)[lst[i].length];\n\
    \            for(int j = 0; j < lst[i].length; ++j)\n            {\n         \
    \       row[j] = (lst[i][0], lst[i][1]);\n            }\n            res = Tuple!(long,\
    \ long)[res];\n            res = Tuple!(long, long)[res];\n            res = Tuple!(long,\
    \ long)[res];\n            res = Tuple!(long, long)[res];\n            res = Tuple!(long,\
    \ long)[res];\n            res = Tuple!(long, long)[res];\n            res = Tuple!(long,\
    \ long)[res];\n            res = Tuple!(long, long)[res];\n            res = Tuple!(long,\
    \ long)[res];\n            res = Tuple!(long, long)[res];\n            res = Tuple!(long,\
    \ long)[res];\n            res = Tuple!(long, long)[res];\n            res = Tuple!(long,\
    \ long)[res];\n            res = Tuple!(long, long)[res];\n            res = Tuple!(long,\
    \ long)[res];\n            res = Tuple!(long, long)[res];\n            res = Tuple!(long,\
    \ long)[res];\n            res = Tuple!(long, long)[res];\n            res = Tuple!(long,\
    \ long)[res];\n            res = Tuple!(long, long)[res];\n            res = Tuple!(long,\
    \ long)[res];\n            res = Tuple!(long, long)[res];\n            res = Tuple!(long,\
    \ long)[res];\n            res = Tuple!(long, long)[res];\n            res = Tuple!(long,\
    \ long)[res];\n            res = Tuple!(long, long)[res];\n            res = Tuple!(long,\
    \ long)[res];\n            res = Tuple!(long, long)[res];\n            res = Tuple!(long,\
    \ long)[res];\n            res = Tuple!(long, long)[res];\n            res = Tuple!(long,\
    \ long)[res];\n            res = Tuple!(long, long)[res];\n            res = Tuple!(long,\
    \ long)[res];\n            res = Tuple!(long, long)[res];\n            res = Tuple!(long,\
    \ long)[res];\n            res = Tuple!(long, long)[res];\n            res = Tuple!(long,\
    \ long)[res];\n            res = Tuple!(long, long)[res];\n            res = Tuple!(long,\
    \ long)[res];\n            res = Tuple!(long, long)[res];\n            res = Tuple!(long,\
    \ long)[res];\n            res = Tuple!(long, long)[res];\n            res = Tuple!(long,\
    \ long)[res];\n            res = Tuple!(long, long)[res];\n            res = Tuple!(long,\
    \ long)[res];\n            res = Tuple!(long, long)[res];\n            res = Tuple!(long,\
    \ long)[res];\n            res = Tuple!(long, long)[res];\n            res = Tuple!(long, ",
  "{\n    long rows = lst.length;\n    long cols = lst[0].length;\n    long[] res\
    \ = new long[rows*cols];\n    for(int i = 0; i < rows; i++)\n    {\n        for(int\
    \ j = 0; j < cols; j++)\n        {\n            if(lst[i][j] == x)\n         \
    \   {\n                res[i*cols + j] = i;\n                res[i*cols + j +\
    \ 1] = j;\n            }\n        }\n    }\n    Arrays.sort(res);\n    return\
    \ Tuple!(long, long)[](res, rows);\n}", "{\n    long n = lst.len();\n    long\
    \ m = lst[0].len();\n    long[][] res = new long[n][m];\n    for(int i = 0; i\
    \ < n; i++)\n    {\n        for(int j = 0; j < m; j++)\n        {\n          \
    \  if(lst[i][j] == x)\n            {\n                res[i][j] = 1;\n       \
    \         break;\n            }\n        }\n    }\n    \n    Arrays.sort(res,\
    \ (a, b) -> {\n        if(a[0] > b[0])\n            return 1;\n        if(a[0]\
    \ < b[0])\n            return -1;\n        return 0;\n    });\n    \n    Arrays.sort(res,\
    \ (a, b) -> {\n        if(a[1] > b[1])\n            return 1;\n        if(a[1]\
    \ < b[1])\n            return -1;\n        return 0;\n    });\n    \n    return\
    \ res;\n}", "{\n    Tuple!(long, long)[] result = null;\n    \n    foreach(row:\
    \ lst, row: row) \n    {\n        foreach(column: row, column: column) \n    \
    \    {\n            if(column == x) \n            {\n                result =\
    \ Tuple!(long, long)[](row, column);\n                break;\n            }\n\
    \        }\n    }\n    \n    return result;\n}", "{\n    long n = lst.length;\n\
    \    long m = lst[0].length;\n    long i, j;\n    Tuple!(long, long)[] res = null;\n\
    \    \n    for (i = 0; i < n; i++)\n    {\n        for (j = 0; j < m; j++)\n \
    \       {\n            if (lst[i][j] == x)\n            {\n                res\
    \ = new Tuple!(long, long)[](i, j);\n                break;\n            }\n \
    \       }\n    }\n    \n    return res;\n}", "{\n    Tuple!(long, long)[] ret\
    \ = new Tuple!(long, long)[lst.length];\n    \n    for(int i = 0; i < lst.length;\
    \ i++)\n    {\n        if(lst[i][0] == x)\n        {\n            ret[i] = Tuple!(lst[i][0],\
    \ lst[i][1]);\n        }\n    }\n    \n    Arrays.sort(ret);\n    \n    return\
    \ ret;\n}", "{\n    Tuple!(long, long)[] res = null;\n    foreach(row: lst, row_index:\
    \ 0) \n    {\n        foreach(col: row, col_index: 0) \n        {\n          \
    \  if(col == x) \n            {\n                res = Tuple!(long, long)[](row_index,\
    \ col_index);\n                break;\n            }\n        }\n    }\n    return\
    \ res;\n}", "{\n    Tuple!(long, long)[] res = null;\n    foreach(row,lst)\n \
    \   {\n        foreach(col,row)\n        {\n            if(col == x)\n       \
    \     {\n                res = Tuple!(long, long)[](row,col);\n              \
    \  break;\n            }\n        }\n        if(res != null)\n            break;\n\
    \    }\n    return res;\n}", "{\n    Tuple!(long, long)[] res = new Tuple!(long,\
    \ long)[0];\n    for(long i = 0; i < lst.length; ++i)\n    {\n        if(lst[i][0]\
    \ == x)\n        {\n            Tuple!(long, long)[] row = new Tuple!(long, long)[lst[i].length];\n\
    \            for(long j = 0; j < lst[i].length; ++j)\n            {\n        \
    \        row[j] = (i, lst[i][j]);\n            }\n            sort(row, true);\n\
    \            sort(row, false);\n            for(long j = 0; j < row.length; ++j)\n\
    \            {\n                res[res.length] = row[j];\n            }\n   \
    \     }\n    }\n    return res;\n}", "{\n    Tuple!(long, long)[] result = new\
    \ Tuple!(long, long)[lst.length];\n    for(int i = 0; i < lst.length; i++){\n\
    \        if(lst[i][0] == x){\n            result[i] = Tuple!(lst[i][0], lst[i][1]);\n\
    \        }\n    }\n    \n    for(int i = 0; i < lst.length; i++){\n        if(lst[i][1]\
    \ < x){\n            for(int j = i; j < lst.length; j++){\n                if(lst[j][1]\
    \ > x){\n                    swap(lst[i], lst[j]);\n                }\n      \
    \      }\n        }\n    }\n    \n    for(int i = 0; i < lst.length; i++){\n \
    \       if(lst[i][1] < x){\n            for(int j = i; j < lst.length; j++){\n\
    \                if(lst[j][1] > x){\n                    swap(lst[i], lst[j]);\n\
    \                }\n            }\n        }\n    }\n    \n    for(int i = 0;\
    \ i < lst.length; i++){\n        for(int j = 0; j < lst[i].length; j++){\n   \
    \         if(lst[i][j] > x){\n                swap(lst[i][j], lst[i][0]);\n  \
    \          }\n        }\n    }\n    \n    for(int i = 0; i < lst.length; i++){\n\
    \        for(int j = 0; j < lst[i].length; j++){\n            if(lst[i][j] > x){\n\
    \                swap(lst[i][j], lst[i][0]);\n            }\n        }\n    }\n\
    \    \n    for(int i = 0; i < lst.length; i++){\n        for(int j = 0; j < lst[i].length;\
    \ j++){\n            if(lst[i][j] > x){\n                swap(lst[i][j], lst[i][0]);\n\
    \            }\n        }\n    }\n    \n    for(int i = 0; i < lst.length; i++){\n\
    \        for(int j = 0; j < lst[i].length; j++){\n            if(lst[i][j] > x){\n\
    \                swap(lst[i][j], lst[i][0]);\n            }\n        }\n    }\n\
    \    \n    for(int i = 0; i < lst.length; i++){\n        for(int j = 0; j < lst[i].length;\
    \ j++){\n            if(lst[i][j] > x){\n                swap(lst[i][j], lst[i][0]);\n\
    \            }\n        }\n    }\n    \n    for(int i = 0; i < lst.length; i++){\n\
    \        for(int j = 0; j < lst[i].length; j++){\n            if(lst[i][j] > x){\n\
    \                swap(lst[i][j], lst[i][0]);\n            }\n        }\n    }\n\
    \    \n    for(int i = 0; i < lst.length; i++){\n        for(int j = 0; j < lst[i].length;\
    \ j++){\n            if(lst[i][j] > x){\n                swap(lst[i][j], lst[i][0]);\n\
    \            }\n        }\n    }\n    \n    for(int i = 0; i < lst.length; i++){\n\
    \        for(int j = 0; j < lst[i].length; j++){\n            if(lst[i][j] > x){\n\
    \                swap(lst[i][j], lst[i][0]);\n            }\n        }\n    }\n\
    \    \n    for(int i = 0; i < lst.length; i++){", "{\n    long n = lst.length;\n\
    \    long m = lst[0].length;\n    long result[][] = new long[n][m];\n    for(int\
    \ i = 0; i < n; i++)\n    {\n        for(int j = 0; j < m; j++)\n        {\n \
    \           if(lst[i][j] == x)\n            {\n                result[i][j] =\
    \ 1;\n            }\n        }\n    }\n    \n    for(int i = 0; i < n; i++)\n\
    \    {\n        for(int j = 0; j < m; j++)\n        {\n            if(result[i][j]\
    \ == 1)\n            {\n                long temp = i;\n                i = j;\n\
    \                j = temp;\n            }\n        }\n    }\n    \n    for(int\
    \ i = 0; i < n; i++)\n    {\n        for(int j = 0; j < m; j++)\n        {\n \
    \           if(result[i][j] == 1)\n            {\n                long temp =\
    \ i;\n                i = j;\n                j = temp;\n            }\n     \
    \   }\n    }\n    \n    for(int i = 0; i < n; i++)\n    {\n        for(int j =\
    \ 0; j < m; j++)\n        {\n            if(result[i][j] == 1)\n            {\n\
    \                long temp = i;\n                i = j;\n                j = temp;\n\
    \            }\n        }\n    }\n    \n    for(int i = 0; i < n; i++)\n    {\n\
    \        for(int j = 0; j < m; j++)\n        {\n            if(result[i][j] ==\
    \ 1)\n            {\n                long temp = i;\n                i = j;\n\
    \                j = temp;\n            }\n        }\n    }\n    \n    for(int\
    \ i = 0; i < n; i++)\n    {\n        for(int j = 0; j < m; j++)\n        {\n \
    \           if(result[i][j] == 1)\n            {\n                long temp =\
    \ i;\n                i = j;\n                j = temp;\n            }\n     \
    \   }\n    }\n    \n    for(int i = 0; i < n; i++)\n    {\n        for(int j =\
    \ 0; j < m; j++)\n        {\n            if(result[i][j] == 1)\n            {\n\
    \                long temp = i;\n                i = j;\n                j = temp;\n\
    \            }\n        }\n    }\n    \n    for(int i = 0; i < n; i++)\n    {\n\
    \        for(int j = 0; j < m; j++)\n        {\n            if(result[i][j] ==\
    \ 1)\n            {\n                long temp = i;\n                i = j;\n\
    \                j = temp;\n            }\n        }\n    }\n    \n    for(int\
    \ i = 0; i < n; i++)\n    {\n        for(int j = 0; j < m; j++)\n        {\n \
    \           if(result[i][j] == 1)\n            {\n                long temp =\
    \ i;\n                i = j;\n                j = temp;\n            }\n     \
    \   }\n    }\n    \n    for(int i = 0; i < n; i++)\n    {\n        for(int j =\
    \ 0; j < m; j++)\n        {\n            if(result[i][j] == 1)\n            {\n\
    \                long temp = i;\n                i = j;\n                j = temp;\n\
    \            }\n        }\n    }\n    \n    for(int i = 0; i < n; i++)\n    {\n\
    \        for(int j = 0; j < m; j++)\n", "{\n    Tuple!(long, long)[] res = new\
    \ Tuple!(long, long)[0];\n    foreach(i : 0..lst.len) \n    {\n        foreach(j\
    \ : 0..lst[i].len) \n        {\n            if(lst[i][j] == x) \n            {\n\
    \                res = append(res, Tuple!(i, j));\n            }\n        }\n\
    \    }\n    sort(res);\n    return res;\n}", "{\n    Tuple!(long, long)[] res\
    \ = null;\n    foreach(i : 0..lst.len())\n    {\n        if(lst[i][0] == x)\n\
    \        {\n            res = lst[i];\n            break;\n        }\n    }\n\
    \    return res;\n}", "{\n    Tuple!(long, long)[] res = null;\n    foreach(row,lst)\n\
    \    {\n        foreach(col,row)\n        {\n            if(col == x)\n      \
    \      {\n                res = Tuple!(long, long)[Tuple!(0, col), Tuple!(1, col)];\n\
    \            }\n        }\n    }\n    return res;\n}", "{\n    Tuple!(long, long)[]\
    \ result = null;\n    foreach(row: lst, row_index: 0) \n    {\n        foreach(column:\
    \ row, column_index: 0) \n        {\n            if(column_index == x) \n    \
    \        {\n                result = Tuple!(long, long)[Tuple!((row_index, column_index)),\
    \ Tuple!((row_index, column_index + 1))];\n            }\n        }\n    }\n \
    \   return result;\n}", "{\n    long[] res = new long[lst[0].length];\n    for(int\
    \ i = 0; i < lst.length; ++i)\n    {\n        for(int j = 0; j < lst[i].length;\
    \ ++j)\n        {\n            if(lst[i][j] == x)\n            {\n           \
    \     res[i] = j;\n                break;\n            }\n        }\n    }\n \
    \   \n    Arrays.sort(res);\n    Arrays.sort(res, (a, b) => b - a);\n    \n  \
    \  Tuple!(long, long)[] res = new Tuple!(long, long)[lst.length];\n    for(int\
    \ i = 0; i < lst.length; ++i)\n    {\n        res[i] = new Tuple!(long, long)(i,\
    \ res[i]);\n    }\n    \n    return res;\n}", "{\n    long n = lst.length;\n \
    \   long m = lst[0].length;\n    long result[][] = new long[n][m];\n    long i,\
    \ j;\n    \n    for(i = 0; i < n; i++)\n    {\n        for(j = 0; j < m; j++)\n\
    \        {\n            if(lst[i][j] == x)\n            {\n                result[i][j]\
    \ = 1;\n                break;\n            }\n        }\n    }\n    \n    for(i\
    \ = 0; i < n; i++)\n    {\n        for(j = 0; j < m; j++)\n        {\n       \
    \     if(lst[i][j] == 1)\n            {\n                for(k = j; k < m; k++)\n\
    \                {\n                    lst[i][k] = lst[i][k - 1];\n         \
    \       }\n                \n                for(k = j; k < m; k++)\n        \
    \        {\n                    lst[i][k] = lst[i][k + 1];\n                }\n\
    \                \n                for(k = j; k < m; k++)\n                {\n\
    \                    lst[i][k] = lst[i][k];\n                }\n             \
    \   \n                for(k = j; k < m; k++)\n                {\n            \
    \        lst[i][k] = lst[i][k];\n                }\n                \n       \
    \         for(k = j; k < m; k++)\n                {\n                    lst[i][k]\
    \ = lst[i][k];\n                }\n                \n                for(k = j;\
    \ k < m; k++)\n                {\n                    lst[i][k] = lst[i][k];\n\
    \                }\n                \n                for(k = j; k < m; k++)\n\
    \                {\n                    lst[i][k] = lst[i][k];\n             \
    \   }\n                \n                for(k = j; k < m; k++)\n            \
    \    {\n                    lst[i][k] = lst[i][k];\n                }\n      \
    \          \n                for(k = j; k < m; k++)\n                {\n     \
    \               lst[i][k] = lst[i][k];\n                }\n                \n\
    \                for(k = j; k < m; k++)\n                {\n                 \
    \   lst[i][k] = lst[i][k];\n                }\n                \n            \
    \    for(k = j; k < m; k++)\n                {\n                    lst[i][k]\
    \ = lst[i][k];\n                }\n                \n                for(k = j;\
    \ k < m; k++)\n                {\n                    lst[i][k] = lst[i][k];\n\
    \                }\n                \n                for(k = j; k < m; k++)\n\
    \                {\n                    lst[i][k] = lst[i][k];\n             \
    \   }\n                \n                for(k = j; k < m; k++)\n            \
    \    {\n                    lst[i][k] = lst[i][k];\n                }\n      \
    \          \n                for(k = j; k < m; k++)\n                {\n     \
    \               lst[i][k] = lst[i][k];\n                }\n                \n\
    \                for(k = j; k < ", "{\n    Tuple!(long, long)[] result = new Tuple!(long,\
    \ long)[0];\n    \n    foreach(row: lst, row: row) \n    {\n        foreach(col:\
    \ row, col: col) \n        {\n            if(col == x) \n            {\n     \
    \           foreach(coord: row, coord: coord) \n                {\n          \
    \          result.push(Tuple!(coord, row));\n                }\n             \
    \   break;\n            }\n        }\n    }\n    \n    foreach(coord: result,\
    \ coord: coord) \n    {\n        foreach(row: coord, row: row) \n        {\n \
    \           foreach(col: row, col: col) \n            {\n                if(col\
    \ > x) \n                {\n                    result.push(Tuple!(col, row));\n\
    \                }\n            }\n        }\n    }\n    \n    foreach(coord:\
    \ result, coord: coord) \n    {\n        foreach(row: coord, row: row) \n    \
    \    {\n            foreach(col: row, col: col) \n            {\n            \
    \    if(col < x) \n                {\n                    result.push(Tuple!(col,\
    \ row));\n                }\n            }\n        }\n    }\n    \n    foreach(coord:\
    \ result, coord: coord) \n    {\n        foreach(row: coord, row: row) \n    \
    \    {\n            foreach(col: row, col: col) \n            {\n            \
    \    if(col == x) \n                {\n                    result.push(Tuple!(col,\
    \ row));\n                }\n            }\n        }\n    }\n    \n    foreach(coord:\
    \ result, coord: coord) \n    {\n        foreach(row: coord, row: row) \n    \
    \    {\n            foreach(col: row, col: col) \n            {\n            \
    \    if(col > x) \n                {\n                    result.push(Tuple!(col,\
    \ row));\n                }\n            }\n        }\n    }\n    \n    foreach(coord:\
    \ result, coord: coord) \n    {\n        foreach(row: coord, row: row) \n    \
    \    {\n            foreach(col: row, col: col) \n            {\n            \
    \    if(col < x) \n                {\n                    result.push(Tuple!(col,\
    \ row));\n                }\n            }\n        }\n    }\n    \n    foreach(coord:\
    \ result, coord: coord) \n    {\n        foreach(row: coord, row: row) \n    \
    \    {\n            foreach(col: row, col: col) \n            {\n            \
    \    if(col == x) \n                {\n                    result.push(Tuple!(col,\
    \ row));\n                }\n            }\n        }\n    }\n    \n    foreach(coord:\
    \ result, coord: coord) \n    {\n        foreach(row: coord, row: row) \n    \
    \    {\n            foreach(col: row, col: col) ", "{\n    long n = lst.length;\n\
    \    long m = lst[0].length;\n    long i, j, k;\n    long[][] result = new long[n][m];\n\
    \    \n    for (i = 0; i < n; i++)\n    {\n        for (j = 0; j < m; j++)\n \
    \       {\n            if (lst[i][j] == x)\n            {\n                result[i][j]\
    \ = 1;\n                break;\n            }\n        }\n    }\n    \n    Arrays.sort(result,\
    \ (a, b) => b[0] - a[0]);\n    Arrays.sort(result, (a, b) => b[1] - a[1]);\n \
    \   \n    Arrays.sort(result, (a, b) => b[0] - a[0]);\n    Arrays.sort(result,\
    \ (a, b) => b[1] - a[1]);\n    \n    Arrays.sort(result, (a, b) => b[0] - a[0]);\n\
    \    Arrays.sort(result, (a, b) => b[1] - a[1]);\n    \n    Arrays.sort(result,\
    \ (a, b) => b[0] - a[0]);\n    Arrays.sort(result, (a, b) => b[1] - a[1]);\n \
    \   \n    Arrays.sort(result, (a, b) => b[0] - a[0]);\n    Arrays.sort(result,\
    \ (a, b) => b[1] - a[1]);\n    \n    Arrays.sort(result, (a, b) => b[0] - a[0]);\n\
    \    Arrays.sort(result, (a, b) => b[1] - a[1]);\n    \n    Arrays.sort(result,\
    \ (a, b) => b[0] - a[0]);\n    Arrays.sort(result, (a, b) => b[1] - a[1]);\n \
    \   \n    Arrays.sort(result, (a, b) => b[0] - a[0]);\n    Arrays.sort(result,\
    \ (a, b) => b[1] - a[1]);\n    \n    Arrays.sort(result, (a, b) => b[0] - a[0]);\n\
    \    Arrays.sort(result, (a, b) => b[1] - a[1]);\n    \n    Arrays.sort(result,\
    \ (a, b) => b[0] - a[0]);\n    Arrays.sort(result, (a, b) => b[1] - a[1]);\n \
    \   \n    Arrays.sort(result, (a, b) => b[0] - a[0]);\n    Arrays.sort(result,\
    \ (a, b) => b[1] - a[1]);\n    \n    Arrays.sort(result, (a, b) => b[0] - a[0]);\n\
    \    Arrays.sort(result, (a, b) => b[1] - a[1]);\n    \n    Arrays.sort(result,\
    \ (a, b) => b[0] - a[0]);\n    Arrays.sort(result, (a, b) => b[1] - a[1]);\n \
    \   \n    Arrays.sort(result, (a, b) => b[0] - a[0]);\n    Arrays.sort(result,\
    \ (a, b) => b[1] - a[1]);\n    \n    Arrays.sort(result, (a, b) => b[0] - a[0]);\n\
    \    Arrays.sort(result, (a, b) => b[1] - a[1]);\n    \n    Arrays.sort(result,\
    \ (a, b) => b[0] - a[0]);\n    Arrays.sort(result, (a, b) => b[1] - a[1]);\n \
    \   \n    Arrays.sort(result, (a, b) => b[0] - a[0]);\n    Arrays.sort(result,\
    \ (a, b) => b[1] - a[1]);\n    \n    Arrays.sort(result, (a, b) => b[0] - a[0]);\n\
    \    Arrays.sort(result, (a, b) => b[1] - a[1]);\n    \n    Arrays.sort(result,\
    \ (a, b) => b", "{\n    Tuple!(long, long)[] result = null;\n    foreach(row:\
    \ lst, row: row) \n    {\n        foreach(column: row, column: column) \n    \
    \    {\n            if(column == x) \n            {\n                result =\
    \ Tuple!(long, long)[](row, column);\n                break;\n            }\n\
    \        }\n    }\n    return result;\n}", "{\n    Tuple!(long, long)[] res =\
    \ null;\n    foreach(i : 0..lst.len())\n    {\n        foreach(j : 0..lst[i].len())\n\
    \        {\n            if(lst[i][j] == x)\n            {\n                res\
    \ = Tuple!(long, long)[i, j];\n                break;\n            }\n       \
    \ }\n    }\n    return res;\n}", "{\n    long n = lst.length;\n    long m = lst[0].length;\n\
    \    long i, j, k, l, m, n, m, i, j, k, l, m, n, m, i, j, k, l, m, n, m, i, j,\
    \ k, l, m, n, m, i, j, k, l, m, n, m, i, j, k, l, m, n, m, i, j, k, l, m, n, m,\
    \ i, j, k, l, m, n, m, i, j, k, l, m, n, m, i, j, k, l, m, n, m, i, j, k, l, m,\
    \ n, m, i, j, k, l, m, n, m, i, j, k, l, m, n, m, i, j, k, l, m, n, m, i, j, k,\
    \ l, m, n, m, i, j, k, l, m, n, m, i, j, k, l, m, n, m, i, j, k, l, m, n, m, i,\
    \ j, k, l, m, n, m, i, j, k, l, m, n, m, i, j, k, l, m, n, m, i, j, k, l, m, n,\
    \ m, i, j, k, l, m, n, m, i, j, k, l, m, n, m, i, j, k, l, m, n, m, i, j, k, l,\
    \ m, n, m, i, j, k, l, m, n, m, i, j, k, l, m, n, m, i, j, k, l, m, n, m, i, j,\
    \ k, l, m, n, m, i, j, k, l, m, n, m, i, j, k, l, m, n, m, i, j, k, l, m, n, m,\
    \ i, j, k, l, m, n, m, i, j, k, l, m, n, m, i, j, k, l, m, n, m, i, j, k, l, m,\
    \ n, m, i, j, k, l, m, n, m, i, j, k, l, m, n, m, i, j, k, l, m, n, m, i, j, k,\
    \ l, m, n, m, i, j, k, l, m, n, m, i, j, k, l, m, n, m, i, j, k, l, m, n, m, i,\
    \ j, k, l, m, n, m, i, j, k, l, m, n, m, i, j, k, l, m, n, m, i, j, k, l, m, n,\
    \ m, i, j, k, l, m, n, m, i, j, k, l, m, n, m, i, j, k, l, m, n, m, i, j, k, l,\
    \ m, n, m, i, j, k, l, m, n, m, i, j, k, l, m, n, m, i, j, k, l, m, n, m, i, j,\
    \ k, l, m, n, m, i, j, k, l, m, n, m, i, j, k, l, m, n, m, i, j, k, l, m, n, m,\
    \ i, j, k, l, m, n, m, i, j, k, l, m, n, m, i, j, k, l, m, n, m, i, j, k, l, m,\
    \ n, m, i, j, k, l, m, n, m, i, j, k, l, m, n, m, i, j, k, l, m, n, m, i, j, k,\
    \ l, m, n, m, i, j, k, l, m, n, m, i, j, k, l, m, n, m, i, j, k, l, m, n, m, i,\
    \ j, k, l, m, ", "{\n    Tuple!(long, long)[] res = null;\n    foreach(row: lst,\
    \ row_index: 0) \n    {\n        foreach(col: row, col_index: 0) \n        {\n\
    \            if(col == x) \n            {\n                res = Tuple!(long,\
    \ long)[](row_index, col_index);\n                break;\n            }\n    \
    \    }\n    }\n    return res;\n}", "{\n    Tuple!(long, long)[] res = new Tuple!(long,\
    \ long)[lst.length];\n    for(int i = 0; i < lst.length; ++i)\n    {\n       \
    \ if(lst[i][0] == x)\n        {\n            res[i] = new Tuple!(lst[i][0], lst[i][1]);\n\
    \        }\n    }\n    Arrays.sort(res);\n    return res;\n}", "{\n    Tuple!(long,\
    \ long)[] res = new Tuple!(long, long)[lst.length];\n    for(int i = 0; i < lst.length;\
    \ i++)\n    {\n        if(lst[i][0] == x)\n        {\n            res[i] = new\
    \ Tuple!(lst[i][0], lst[i][1]);\n        }\n    }\n    \n    Arrays.sort(res,\
    \ (a, b) -> {\n        if(a.first > b.first)\n            return 1;\n        if(a.first\
    \ < b.first)\n            return -1;\n        return 0;\n    });\n    \n    Arrays.sort(res,\
    \ (a, b) -> {\n        if(a.second > b.second)\n            return 1;\n      \
    \  if(a.second < b.second)\n            return -1;\n        return 0;\n    });\n\
    \    \n    return res;\n}", "{\n    Tuple!(long, long)[] result = null;\n    foreach(row:\
    \ lst, row_index: long in\n        enumerate(row))\n    {\n        foreach(col:\
    \ row, col_index: long in\n            enumerate(col))\n        {\n          \
    \  if(col_index == x)\n            {\n                result = Tuple!(long, long)[Tuple!(0,\
    \ row_index)];\n                break;\n            }\n        }\n    }\n    return\
    \ result;\n}", "{\n    long n = lst.length;\n    long m = lst[0].length;\n   \
    \ long i, j, k;\n    Tuple!(long, long)[] res = new Tuple!(long, long)[n];\n \
    \   for(i = 0; i < n; i++)\n    {\n        for(j = 0; j < m; j++)\n        {\n\
    \            if(lst[i][j] == x)\n            {\n                res[i] = Tuple!(long,\
    \ long)[i, j];\n                break;\n            }\n        }\n    }\n    sort(res);\n\
    \    for(i = 0; i < n; i++)\n    {\n        res[i] = res[i].swap;\n    }\n   \
    \ return res;\n}", "{\n    long[][] res = new long[lst.length][lst[0].length];\n\
    \    for(int i = 0; i < lst.length; ++i)\n    {\n        for(int j = 0; j < lst[i].length;\
    \ ++j)\n        {\n            if(lst[i][j] == x)\n            {\n           \
    \     res[i][j] = 1;\n            }\n        }\n    }\n    \n    Arrays.sort(res,\
    \ (a, b) => a[0] - b[0]);\n    Arrays.sort(res, (a, b) => a[1] - b[1]);\n    \n\
    \    return res;\n}", "{\n    Tuple!(long, long)[] result = new Tuple!(long, long)[0];\n\
    \    \n    for(long i = 0; i < lst.Length; i++)\n    {\n        if(lst[i][0] ==\
    \ x)\n        {\n            Tuple!(long, long)[] row = new Tuple!(long, long)[i];\n\
    \            \n            for(long j = 0; j < lst[i].Length; j++)\n         \
    \   {\n                if(lst[i][j] > x)\n                {\n                \
    \    row.Add(lst[i][j], j);\n                }\n            }\n            \n\
    \            row.Sort();\n            \n            for(long j = 0; j < row.Length;\
    \ j++)\n            {\n                result.Add(row[j], i);\n            }\n\
    \        }\n    }\n    \n    result.Sort();\n    \n    return result;\n}", "{\n\
    \    long[] res = new long[lst.length];\n    for(int i = 0; i < lst.length; ++i)\n\
    \    {\n        for(int j = 0; j < lst[i].length; ++j)\n        {\n          \
    \  if(lst[i][j] == x)\n            {\n                res[i] = j;\n          \
    \      break;\n            }\n        }\n    }\n    return Tuple!(long, long)[](res,\
    \ lst.length);\n}", "{\n    long n = lst.length;\n    long m = lst[0].length;\n\
    \    long[] res = new long[n];\n    for(int i = 0; i < n; i++)\n    {\n      \
    \  for(int j = 0; j < m; j++)\n        {\n            if(lst[i][j] == x)\n   \
    \         {\n                res[i] = j;\n                break;\n           \
    \ }\n        }\n    }\n    return Tuple!(long, long)[](res, n - 1);\n}", "{\n\
    \    long n = lst.length;\n    long[] res = new long[n];\n    for(int i = 0; i\
    \ < n; i++)\n    {\n        if(lst[i][0] == x)\n        {\n            res[i]\
    \ = lst[i][1];\n        }\n    }\n    return Tuple!(long, long)[](res);\n}", "{\n\
    \    long rows = 0;\n    long cols = 0;\n    \n    foreach(long y, lst)\n    {\n\
    \        foreach(long x, y)\n        {\n            if(x != x)\n            {\n\
    \                cols++;\n            }\n            else\n            {\n   \
    \             rows++;\n            }\n        }\n    }\n    \n    Tuple!(long,\
    \ long)[] result = new Tuple!(long, long)[rows];\n    \n    foreach(long y, lst)\n\
    \    {\n        foreach(long x, y)\n        {\n            if(x != x)\n      \
    \      {\n                result[rows] = new Tuple!(long, long)(x, y);\n     \
    \       }\n        }\n    }\n    \n    foreach(long y, lst)\n    {\n        foreach(long\
    \ x, y)\n        {\n            if(x != x)\n            {\n                result[rows]\
    \ = new Tuple!(long, long)(x, y);\n            }\n        }\n    }\n    \n   \
    \ return result;\n}", "{\n    long n = lst.length;\n    long m = lst[0].length;\n\
    \    long i, j;\n    long row = 0;\n    long col = 0;\n    \n    for(i = 0; i\
    \ < n; i++)\n    {\n        for(j = 0; j < m; j++)\n        {\n            if(lst[i][j]\
    \ == x)\n            {\n                return Tuple!(long, long)[](row, col);\n\
    \            }\n        }\n    }\n    return Tuple!(long, long)[](row, col);\n\
    }", "{\n    long n = lst.length;\n    long m = lst[0].length;\n    long result[][]\
    \ = new long[n][m];\n    for(int i = 0; i < n; i++)\n    {\n        for(int j\
    \ = 0; j < m; j++)\n        {\n            if(lst[i][j] == x)\n            {\n\
    \                result[i][j] = 1;\n            }\n        }\n    }\n    \n  \
    \  for(int i = 0; i < n; i++)\n    {\n        for(int j = 0; j < m; j++)\n   \
    \     {\n            if(result[i][j] == 1)\n            {\n                long\
    \ temp[][] = new long[m][2];\n                for(int k = 0; k < m; k++)\n   \
    \             {\n                    temp[k][0] = (int)i;\n                  \
    \  temp[k][1] = (int)j;\n                }\n                Arrays.sort(temp,\
    \ (x, y) -> {\n                    return y[0] - x[0];\n                });\n\
    \                \n                Tuple!(long, long)[] res = new Tuple!(long,\
    \ long)[temp.length];\n                for(int k = 0; k < temp.length; k++)\n\
    \                {\n                    res[k] = new Tuple!(long, long)[temp[k].length];\n\
    \                    res[k][0] = (long)temp[k][0];\n                    res[k][1]\
    \ = (long)temp[k][1];\n                }\n                return res;\n      \
    \      }\n        }\n    }\n    return null;\n}", "{\n    long n = lst.length;\n\
    \    long m = lst[0].length;\n    long[][] res = new long[n][m];\n    for(int\
    \ i = 0; i < n; i++)\n    {\n        for(int j = 0; j < m; j++)\n        {\n \
    \           if(lst[i][j] == x)\n            {\n                res[i][j] = 1;\n\
    \            }\n        }\n    }\n    Arrays.sort(res);\n    Arrays.sort(res,\
    \ (a, b) -> b[0] - a[0]);\n    return res;\n}", "{\n    long n = lst.length;\n\
    \    long[] res = new long[n];\n    for(int i = 0; i < n; i++)\n    {\n      \
    \  if(lst[i][0] == x)\n        {\n            res[i] = lst[i][1];\n        }\n\
    \    }\n    return Tuple!(long[], long[])[](res);\n}", "{\n    long[] row = new\
    \ long[lst[0].Length];\n    for(int i = 0; i < lst[0].Length; i++)\n    {\n  \
    \      row[i] = lst[0][i];\n    }\n    \n    for(int i = 0; i < lst[0].Length;\
    \ i++)\n    {\n        if(row[i] == x)\n        {\n            Tuple!(long, long)[]\
    \ res = new Tuple!(long, long)[lst[0].Length];\n            for(int j = 0; j <\
    \ lst[0].Length; j++)\n            {\n                res[j] = (i, j);\n     \
    \       }\n            return res;\n        }\n    }\n    return null;\n}", "{\n\
    \    Tuple!(long, long)[] result = new Tuple!(long, long)[lst.length];\n    \n\
    \    for(int i = 0; i < lst.length; i++)\n    {\n        if(lst[i][0] == x)\n\
    \        {\n            result[i] = Tuple!(lst[i][0], lst[i][1]);\n        }\n\
    \    }\n    \n    for(int i = 0; i < lst.length; i++)\n    {\n        if(lst[i][1]\
    \ > x)\n        {\n            for(int j = lst[i][1]; j > x; j--)\n          \
    \  {\n                result[i] = Tuple!(lst[i][0], j);\n            }\n     \
    \   }\n    }\n    \n    for(int i = 0; i < lst.length; i++)\n    {\n        if(lst[i][1]\
    \ < x)\n        {\n            for(int j = lst[i][1]; j < x; j++)\n          \
    \  {\n                result[i] = Tuple!(lst[i][0], j);\n            }\n     \
    \   }\n    }\n    \n    for(int i = 0; i < lst.length; i++)\n    {\n        if(lst[i][1]\
    \ > x)\n        {\n            for(int j = lst[i][1]; j > x; j--)\n          \
    \  {\n                result[i] = Tuple!(lst[i][0], j);\n            }\n     \
    \   }\n    }\n    \n    for(int i = 0; i < lst.length; i++)\n    {\n        if(lst[i][1]\
    \ < x)\n        {\n            for(int j = lst[i][1]; j < x; j++)\n          \
    \  {\n                result[i] = Tuple!(lst[i][0], j);\n            }\n     \
    \   }\n    }\n    \n    for(int i = 0; i < lst.length; i++)\n    {\n        if(lst[i][1]\
    \ > x)\n        {\n            for(int j = lst[i][1]; j > x; j--)\n          \
    \  {\n                result[i] = Tuple!(lst[i][0], j);\n            }\n     \
    \   }\n    }\n    \n    for(int i = 0; i < lst.length; i++)\n    {\n        if(lst[i][1]\
    \ < x)\n        {\n            for(int j = lst[i][1]; j < x; j++)\n          \
    \  {\n                result[i] = Tuple!(lst[i][0], j);\n            }\n     \
    \   }\n    }\n    \n    for(int i = 0; i < lst.length; i++)\n    {\n        if(lst[i][1]\
    \ > x)\n        {\n            for(int j = lst[i][1]; j > x; j--)\n          \
    \  {\n                result[i] = Tuple!(lst[i][0], j);\n            }\n     \
    \   }\n    }\n    \n    for(int i = 0; i < lst.length; i++)\n    {\n        if(lst[i][1]\
    \ < x)\n        {\n            for(int j = lst[i][1]; j < x; j++)\n          \
    \  {\n                result[i] = Tuple!(lst[i][0], j);\n            }\n     \
    \   }\n    }\n    \n    for(int i = 0; i < lst.length; i++)\n    {\n        if(lst[i][1]\
    \ > x)\n        {\n            for(int j = lst[i][1]; j > x; j--)\n          \
    \  {\n                result[i] = Tuple!(lst[i][0], j);\n            }\n     \
    \   }\n    }\n    \n    for(int ", "{\n    Tuple!(long, long)[] res = new Tuple!(long,\
    \ long)[lst.length];\n    for(int i = 0; i < lst.length; ++i)\n    {\n       \
    \ for(int j = 0; j < lst[i].length; ++j)\n        {\n            if(lst[i][j]\
    \ == x)\n            {\n                res[i] = Tuple!(i, j);\n            }\n\
    \        }\n    }\n    \n    sort(res);\n    \n    return res;\n}", "{\n    long\
    \ n = lst.length;\n    long m = lst[0].length;\n    long result[][] = new long[n][m];\n\
    \    long i, j, k;\n    for(i = 0; i < n; i++)\n    {\n        for(j = 0; j <\
    \ m; j++)\n        {\n            if(lst[i][j] == x)\n            {\n        \
    \        result[i][j] = 1;\n                break;\n            }\n        }\n\
    \    }\n    for(i = 0; i < n; i++)\n    {\n        for(j = 0; j < m; j++)\n  \
    \      {\n            if(lst[i][j] == 1)\n            {\n                k = j;\n\
    \                break;\n            }\n        }\n        for(j = k - 1; j >=\
    \ 0; j--)\n        {\n            result[i][j] = result[i][j + 1];\n        }\n\
    \    }\n    for(i = 0; i < n; i++)\n    {\n        for(j = 0; j < m; j++)\n  \
    \      {\n            result[i][j] = result[i][j] - 1;\n        }\n    }\n   \
    \ for(i = 0; i < n; i++)\n    {\n        for(j = 0; j < m; j++)\n        {\n \
    \           result[i][j] = result[i][j] + 1;\n        }\n    }\n    for(i = 0;\
    \ i < n; i++)\n    {\n        for(j = 0; j < m; j++)\n        {\n            if(result[i][j]\
    \ == 0)\n            {\n                result[i][j] = 1;\n                break;\n\
    \            }\n        }\n    }\n    for(i = 0; i < n; i++)\n    {\n        for(j\
    \ = 0; j < m; j++)\n        {\n            if(result[i][j] == 1)\n           \
    \ {\n                k = j;\n                break;\n            }\n        }\n\
    \        for(j = k - 1; j >= 0; j--)\n        {\n            result[i][j] = result[i][j\
    \ + 1];\n        }\n    }\n    for(i = 0; i < n; i++)\n    {\n        for(j =\
    \ 0; j < m; j++)\n        {\n            result[i][j] = result[i][j] - 1;\n  \
    \      }\n    }\n    for(i = 0; i < n; i++)\n    {\n        for(j = 0; j < m;\
    \ j++)\n        {\n            result[i][j] = result[i][j] + 1;\n        }\n \
    \   }\n    for(i = 0; i < n; i++)\n    {\n        for(j = 0; j < m; j++)\n   \
    \     {\n            if(result[i][j] == 0)\n            {\n                result[i][j]\
    \ = 1;\n                break;\n            }\n        }\n    }\n    for(i = 0;\
    \ i < n; i++)\n    {\n        for(j = 0; j < m; j++)\n        {\n            if(result[i][j]\
    \ == 1)\n            {\n                k = j;\n                break;\n     \
    \       }\n        }\n        for(j = k - 1; j >= 0; j--)\n        {\n       \
    \     result[i][j] = result[i][j + 1];\n        }\n    }\n    for(i = 0; i < n;\
    \ i++)\n    {\n        for(j = 0; j < m; j++)\n        {\n            result[i][j]\
    \ = result[i][j] - 1;\n        }\n    }\n    for(i = 0; i < n; i++)\n    {\n \
    \       for(j = 0; j < m; j++)\n        {\n            result[i][j] = result[i][j]\
    \ + 1;\n        }\n    }\n    for(i = 0; i < n; i++)", "{\n    Tuple!(long, long)[]\
    \ result = null;\n    \n    foreach(row: lst, row_index: 0) \n    {\n        foreach(column:\
    \ row, column_index: 0) \n        {\n            if(column_index == x) \n    \
    \        {\n                result = Tuple!(long, long)[](row_index, column_index);\n\
    \            }\n        }\n    }\n    \n    return result;\n}", "{\n    long n\
    \ = lst.length;\n    long m = lst[0].length;\n    long result[][] = new long[n][m];\n\
    \    long i, j, k;\n    \n    for(i = 0; i < n; i++)\n    {\n        for(j = 0;\
    \ j < m; j++)\n        {\n            if(lst[i][j] == x)\n            {\n    \
    \            result[i][j] = 1;\n                break;\n            }\n      \
    \  }\n    }\n    \n    for(i = 0; i < n; i++)\n    {\n        for(j = 0; j < m;\
    \ j++)\n        {\n            if(result[i][j] == 1)\n            {\n        \
    \        k = j;\n                break;\n            }\n        }\n        \n\
    \        if(k == m)\n        {\n            k = j;\n        }\n        \n    \
    \    for(j = k; j < m; j++)\n        {\n            result[i][j] = -1;\n     \
    \   }\n    }\n    \n    for(i = 0; i < n; i++)\n    {\n        for(j = 0; j <\
    \ m; j++)\n        {\n            if(result[i][j] == 1)\n            {\n     \
    \           k = j;\n                break;\n            }\n        }\n       \
    \ \n        if(k == m)\n        {\n            k = j;\n        }\n        \n \
    \       for(j = k; j < m; j++)\n        {\n            result[i][j] = -1;\n  \
    \      }\n    }\n    \n    for(i = 0; i < n; i++)\n    {\n        for(j = 0; j\
    \ < m; j++)\n        {\n            if(result[i][j] == -1)\n            {\n  \
    \              k = j;\n                break;\n            }\n        }\n    \
    \    \n        if(k == m)\n        {\n            k = j;\n        }\n        \n\
    \        for(j = k; j < m; j++)\n        {\n            result[i][j] = -1;\n \
    \       }\n    }\n    \n    for(i = 0; i < n; i++)\n    {\n        for(j = 0;\
    \ j < m; j++)\n        {\n            if(result[i][j] == -1)\n            {\n\
    \                k = j;\n                break;\n            }\n        }\n  \
    \      \n        if(k == m)\n        {\n            k = j;\n        }\n      \
    \  \n        for(j = k; j < m; j++)\n        {\n            result[i][j] = -1;\n\
    \        }\n    }\n    \n    for(i = 0; i < n; i++)\n    {\n        for(j = 0;\
    \ j < m; j++)\n        {\n            if(result[i][j] == -1)\n            {\n\
    \                k = j;\n                break;\n            }\n        }\n  \
    \      \n        if(k == m)\n        {\n            k = j;\n        }\n      \
    \  \n        for(j = k; j < m; j++)\n        {\n            result[i][j] = -1;\n\
    \        }\n    }\n    \n    for(i = 0; i < n; i++)\n    {\n        for(j = 0;\
    \ j < m; j++)\n        {\n            if(result[i][j] == -1)\n            {\n\
    \                k = j;\n                break;\n            }\n        }\n  \
    \      \n        if(k == m)\n        {\n            k = j;\n        }\n", "{\n\
    \    Tuple!(long, long)[] res = new Tuple!(long, long)[0];\n    foreach(row,lst)\n\
    \    {\n        foreach(col,row)\n        {\n            if(col == x)\n      \
    \      {\n                res[res.length] = Tuple!(row,col);\n            }\n\
    \        }\n    }\n    sort(res,fun(x1,x2)->x1.1 > x2.1);\n    sort(res,fun(x1,x2)->x1.2\
    \ > x2.2);\n    return res;\n}", "{\n    long n = lst.Length;\n    long m = lst[0].Length;\n\
    \    long[] res = new long[n];\n    for(int i = 0; i < n; i++)\n    {\n      \
    \  for(int j = 0; j < m; j++)\n        {\n            if(lst[i][j] == x)\n   \
    \         {\n                res[i] = j;\n                break;\n           \
    \ }\n        }\n    }\n    return Tuple!(long, long)[](res, n - 1);\n}", "{\n\
    \    long n = lst.length;\n    long m = lst[0].length;\n    long ans = 0;\n  \
    \  long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n    long m1\
    \ = m;\n    long m2 = m;\n    long m3 = m;\n    long m4 = m;\n    long m5 = m;\n\
    \    long m6 = m;\n    long m7 = m;\n    long m8 = m;\n    long m9 = m;\n    long\
    \ m10 = m;\n    long m11 = m;\n    long m12 = m;\n    long m13 = m;\n    long\
    \ m14 = m;\n    long m15 = m;\n    long m16 = m;\n    long m17 = m;\n    long\
    \ m18 = m;\n    long m19 = m;\n    long m20 = m;\n    long m21 = m;\n    long\
    \ m22 = m;\n    long m23 = m;\n    long m24 = m;\n    long m25 = m;\n    long\
    \ m26 = m;\n    long m27 = m;\n    long m28 = m;\n    long m29 = m;\n    long\
    \ m30 = m;\n    long m31 = m;\n    long m32 = m;\n    long m33 = m;\n    long\
    \ m34 = m;\n    long m35 = m;\n    long m36 = m;\n    long m37 = m;\n    long\
    \ m38 = m;\n    long m39 = m;\n    long m40 = m;\n    long m41 = m;\n    long\
    \ m42 = m;\n    long m43 = m;\n    long m44 = m;\n    long m45 = m;\n    long\
    \ m46 = m;\n    long m47 = m;\n    long m48 = m;\n    long m49 = m;\n    long\
    \ m50 = m;\n    long m51 = m;\n    long m52 = m;\n    long m53 = m;\n    long\
    \ m54 = m;\n    long m55 = m;\n    long m56 = m;\n    long m57 = m;\n    long\
    \ m58 = m;\n    long m59 = m;\n    long m60 = m;\n    long m61 = m;\n    long\
    \ m62 = m;\n    long m63 = m;\n    long m64 = m;\n    long m65 = m;\n    long\
    \ m66 = m;\n    long m67 = m;\n    long m68 = m;\n    long m69 = m;\n    long\
    \ m70", "{\n    Tuple!(long, long)[] res = new Tuple!(long, long)[lst.length];\n\
    \    for(int i = 0; i < lst.length; ++i)\n    {\n        if(lst[i][0] == x)\n\
    \        {\n            res[i] = Tuple!(lst[i][0], lst[i][1]);\n        }\n  \
    \  }\n    sort(res);\n    return res;\n}", "{\n    long n = lst.length;\n    long\
    \ m = lst[0].length;\n    long[][] res = new long[n][m];\n    \n    for(int i\
    \ = 0; i < n; i++)\n    {\n        for(int j = 0; j < m; j++)\n        {\n   \
    \         if(lst[i][j] == x)\n            {\n                res[i][j] = 1;\n\
    \            }\n        }\n    }\n    \n    for(int i = 0; i < n; i++)\n    {\n\
    \        for(int j = 0; j < m; j++)\n        {\n            if(res[i][j] == 1)\n\
    \            {\n                res[i][j] = j;\n            }\n        }\n   \
    \ }\n    \n    for(int i = 0; i < n; i++)\n    {\n        for(int j = 0; j < m;\
    \ j++)\n        {\n            if(res[i][j] == j)\n            {\n           \
    \     res[i][j] = i;\n            }\n        }\n    }\n    \n    for(int i = 0;\
    \ i < n; i++)\n    {\n        for(int j = 0; j < m; j++)\n        {\n        \
    \    if(res[i][j] == i)\n            {\n                res[i][j] = j;\n     \
    \       }\n        }\n    }\n    \n    for(int i = 0; i < n; i++)\n    {\n   \
    \     for(int j = 0; j < m; j++)\n        {\n            if(res[i][j] == j)\n\
    \            {\n                res[i][j] = i;\n            }\n        }\n   \
    \ }\n    \n    for(int i = 0; i < n; i++)\n    {\n        for(int j = 0; j < m;\
    \ j++)\n        {\n            if(res[i][j] == i)\n            {\n           \
    \     res[i][j] = j;\n            }\n        }\n    }\n    \n    for(int i = 0;\
    \ i < n; i++)\n    {\n        for(int j = 0; j < m; j++)\n        {\n        \
    \    if(res[i][j] == j)\n            {\n                res[i][j] = i;\n     \
    \       }\n        }\n    }\n    \n    for(int i = 0; i < n; i++)\n    {\n   \
    \     for(int j = 0; j < m; j++)\n        {\n            if(res[i][j] == i)\n\
    \            {\n                res[i][j] = j;\n            }\n        }\n   \
    \ }\n    \n    for(int i = 0; i < n; i++)\n    {\n        for(int j = 0; j < m;\
    \ j++)\n        {\n            if(res[i][j] == j)\n            {\n           \
    \     res[i][j] = i;\n            }\n        }\n    }\n    \n    for(int i = 0;\
    \ i < n; i++)\n    {\n        for(int j = 0; j < m; j++)\n        {\n        \
    \    if(res[i][j] == i)\n            {\n                res[i][j] = j;\n     \
    \       }\n        }\n    }\n    \n    for(int i = 0; i < n; i++)\n    {\n   \
    \     for(int j = 0; j < m; j++)\n        {\n            if(res[i][j] == j)\n\
    \            {\n                res[i][j] = i;\n            }\n        }\n   \
    \ }\n    \n    for(int i = 0; i < n; i++)\n    {\n        for(int j = 0; j < m;\
    \ j++)\n        {\n            if(res[i][j] == i)\n            {\n           \
    \     res[i][j] = j;\n            }\n        }\n    }\n    \n    for(int i = 0;\
    \ i < n; i++)\n    {\n        ", "{\n    Tuple!(long, long)[] result = new Tuple!(long,\
    \ long)[0];\n    \n    for(int i = 0; i < lst.length; ++i)\n    {\n        if(lst[i][0]\
    \ == x)\n        {\n            for(int j = 0; j < lst[i].length; ++j)\n     \
    \       {\n                result.push((lst[i][0], lst[i][j]));\n            }\n\
    \        }\n    }\n    \n    result.sort(function(a, b){return a[0] - b[0]});\n\
    \    result.sort(function(a, b){return b[1] - a[1]});\n    \n    return result;\n\
    }", "{\n    long n = lst.length;\n    long m = lst[0].length;\n    long[] res\
    \ = new long[m];\n    for(int i = 0; i < m; i++)\n    {\n        res[i] = 0;\n\
    \    }\n    for(int i = 0; i < n; i++)\n    {\n        for(int j = 0; j < m; j++)\n\
    \        {\n            if(lst[i][j] == x)\n            {\n                res[j]++;\n\
    \            }\n        }\n    }\n    for(int i = 0; i < m; i++)\n    {\n    \
    \    res[i] = res[i] / n;\n    }\n    return Tuple!(long, long)[](res, m);\n}",
  "{\n    Tuple!(long, long)[] result = null;\n    \n    foreach(row: lst, row_index:\
    \ 0) \n    {\n        foreach(column: row, column_index: 0) \n        {\n    \
    \        if(column_index == x) \n            {\n                result = Tuple!(long,\
    \ long)[](row_index, column_index);\n                break;\n            }\n \
    \       }\n    }\n    \n    return result;\n}", "{\n    long n = lst.length;\n\
    \    long m = lst[0].length;\n    long i, j;\n    long min = 0;\n    long max\
    \ = 0;\n    long sum = 0;\n    long count = 0;\n    long[][] res = new long[n][m];\n\
    \    for(i = 0; i < n; i++)\n    {\n        for(j = 0; j < m; j++)\n        {\n\
    \            sum += lst[i][j];\n            if(sum == x)\n            {\n    \
    \            res[i][j] = 1;\n                count++;\n            }\n       \
    \     else if(sum > x)\n            {\n                min = j;\n            \
    \    break;\n            }\n            else\n            {\n                max\
    \ = j;\n                break;\n            }\n        }\n    }\n    for(i = 0;\
    \ i < n; i++)\n    {\n        for(j = 0; j < m; j++)\n        {\n            if(res[i][j]\
    \ == 1)\n            {\n                res[i][j] = count;\n            }\n  \
    \      }\n    }\n    for(i = 0; i < n; i++)\n    {\n        for(j = 0; j < m;\
    \ j++)\n        {\n            if(res[i][j] > max)\n            {\n          \
    \      max = res[i][j];\n            }\n            if(res[i][j] < min)\n    \
    \        {\n                min = res[i][j];\n            }\n        }\n    }\n\
    \    for(i = 0; i < n; i++)\n    {\n        for(j = 0; j < m; j++)\n        {\n\
    \            if(res[i][j] > max)\n            {\n                max = res[i][j];\n\
    \            }\n            if(res[i][j] < min)\n            {\n             \
    \   min = res[i][j];\n            }\n        }\n    }\n    for(i = 0; i < n; i++)\n\
    \    {\n        for(j = 0; j < m; j++)\n        {\n            if(res[i][j] >\
    \ max)\n            {\n                max = res[i][j];\n            }\n     \
    \       if(res[i][j] < min)\n            {\n                min = res[i][j];\n\
    \            }\n        }\n    }\n    for(i = 0; i < n; i++)\n    {\n        for(j\
    \ = 0; j < m; j++)\n        {\n            if(res[i][j] > max)\n            {\n\
    \                max = res[i][j];\n            }\n            if(res[i][j] < min)\n\
    \            {\n                min = res[i][j];\n            }\n        }\n \
    \   }\n    for(i = 0; i < n; i++)\n    {\n        for(j = 0; j < m; j++)\n   \
    \     {\n            if(res[i][j] > max)\n            {\n                max =\
    \ res[i][j];\n            }\n            if(res[i][j] < min)\n            {\n\
    \                min = res[i][j];\n            }\n        }\n    }\n    for(i\
    \ = 0; i < n; i++)\n    {\n        for(j = 0; j < m; j++)\n        {\n       \
    \     if(res[i][j] > max)\n            {\n                max = res[i][j];\n \
    \           }\n            if(res[i][j] < min)\n            {\n              \
    \  min = res[i][j];\n            }\n        }\n    }\n    for(i = 0; i < n; i++)\n\
    \    {\n        for(j = 0; j < m; j++)\n        {\n            if(res[i][j] >\
    \ max)\n            {\n                max = res[i][j", "{\n    long n = lst.length;\n\
    \    long m = lst[0].length;\n    long i, j, k;\n    Tuple!(long, long)[] result\
    \ = new Tuple!(long, long)[n];\n    \n    for(i = 0; i < n; i++)\n    {\n    \
    \    for(j = 0; j < m; j++)\n        {\n            if(lst[i][j] == x)\n     \
    \       {\n                result[i] = Tuple!(long, long)[i, j];\n           \
    \     break;\n            }\n        }\n    }\n    \n    for(i = 0; i < n; i++)\n\
    \    {\n        for(j = 0; j < m; j++)\n        {\n            if(lst[i][j] >\
    \ x)\n            {\n                k = j;\n                for(; k < m; k++)\n\
    \                {\n                    if(lst[i][k] > x)\n                  \
    \  {\n                        break;\n                    }\n                }\n\
    \                \n                result[i] = Tuple!(long, long)[i, k];\n   \
    \             break;\n            }\n        }\n    }\n    \n    return result;\n\
    }", "{\n    long[] res = new long[lst.Length];\n    for(int i = 0; i < lst.Length;\
    \ i++)\n    {\n        if(lst[i][0] == x)\n        {\n            res[i] = lst[i][1];\n\
    \        }\n    }\n    return Tuple!(long, long)[res];\n}", "{\n    Tuple!(long,\
    \ long)[] ret = new Tuple!(long, long)[0];\n    for(long i = 0; i < lst.length;\
    \ i++)\n    {\n        if(lst[i][0] == x)\n        {\n            ret.push(new\
    \ Tuple!(lst[i][0], lst[i][1]));\n        }\n    }\n    \n    sort(ret, (x, y)\
    \ => y._1 - x._1);\n    sort(ret, (x, y) => y._2 - x._2);\n    return ret;\n}",
  "{\n    Tuple!(long, long)[] result = new Tuple!(long, long)[];\n    \n    for(int\
    \ i = 0; i < lst.length; i++)\n    {\n        if(lst[i][0] == x)\n        {\n\
    \            result.add(new Tuple!(lst[i][1], i));\n        }\n    }\n    \n \
    \   result.sort(function(a, b) {\n        return a.1 < b.1;\n    });\n    \n \
    \   result.sort(function(a, b) {\n        return b.1 < a.1;\n    });\n    \n \
    \   return result;\n}", "{\n    long[][] res = new long[lst.length][lst[0].length];\n\
    \    for(int i = 0; i < lst.length; i++)\n    {\n        for(int j = 0; j < lst[i].length;\
    \ j++)\n        {\n            if(lst[i][j] == x)\n            {\n           \
    \     res[i][j] = 1;\n            }\n        }\n    }\n    \n    for(int i = 0;\
    \ i < lst.length; i++)\n    {\n        for(int j = 0; j < lst[i].length; j++)\n\
    \        {\n            if(res[i][j] == 0)\n            {\n                res[i][j]\
    \ = -1;\n            }\n        }\n    }\n    \n    for(int i = 0; i < lst.length;\
    \ i++)\n    {\n        for(int j = 0; j < lst[i].length; j++)\n        {\n   \
    \         if(res[i][j] == -1)\n            {\n                res[i][j] = -1;\n\
    \            }\n        }\n    }\n    \n    for(int i = 0; i < lst.length; i++)\n\
    \    {\n        for(int j = 0; j < lst[i].length; j++)\n        {\n          \
    \  if(res[i][j] == -1)\n            {\n                res[i][j] = -1;\n     \
    \       }\n        }\n    }\n    \n    for(int i = 0; i < lst.length; i++)\n \
    \   {\n        for(int j = 0; j < lst[i].length; j++)\n        {\n           \
    \ if(res[i][j] == -1)\n            {\n                res[i][j] = -1;\n      \
    \      }\n        }\n    }\n    \n    for(int i = 0; i < lst.length; i++)\n  \
    \  {\n        for(int j = 0; j < lst[i].length; j++)\n        {\n            if(res[i][j]\
    \ == -1)\n            {\n                res[i][j] = -1;\n            }\n    \
    \    }\n    }\n    \n    for(int i = 0; i < lst.length; i++)\n    {\n        for(int\
    \ j = 0; j < lst[i].length; j++)\n        {\n            if(res[i][j] == -1)\n\
    \            {\n                res[i][j] = -1;\n            }\n        }\n  \
    \  }\n    \n    for(int i = 0; i < lst.length; i++)\n    {\n        for(int j\
    \ = 0; j < lst[i].length; j++)\n        {\n            if(res[i][j] == -1)\n \
    \           {\n                res[i][j] = -1;\n            }\n        }\n   \
    \ }\n    \n    for(int i = 0; i < lst.length; i++)\n    {\n        for(int j =\
    \ 0; j < lst[i].length; j++)\n        {\n            if(res[i][j] == -1)\n   \
    \         {\n                res[i][j] = -1;\n            }\n        }\n    }\n\
    \    \n    for(int i = 0; i < lst.length; i++)\n    {\n        for(int j = 0;\
    \ j < lst[i].length; j++)\n        {\n            if(res[i][j] == -1)\n      \
    \      {\n                res[i][j] = -1;\n            }\n        }\n    }\n \
    \   \n    for(int i = 0; i < lst.length; i++)\n    {\n        for(int j = 0; j\
    \ < lst[i].length; j++)\n        {\n            if(res[i][j] == -1)\n        \
    \    {\n                res[i][j] = -1;\n            }\n        }\n    }\n   \
    \ \n    for(int i = 0; i < lst.length; i++)\n    {\n        for(int j = 0; j <\
    \ lst[i].length; j++)\n        {\n            if(res[i][j] == -1)\n          \
    \  {\n                res[i][j] = ", "{\n    long n = lst.length;\n    long m\
    \ = lst[0].length;\n    long[] res = new long[(n + 1) * (m + 1)];\n    long i\
    \ = 0, j = 0, k = 0;\n    \n    for(i = 0; i < n; i++)\n    {\n        for(j =\
    \ 0; j < m; j++)\n        {\n            if(lst[i][j] == x)\n            {\n \
    \               res[k] = Tuple!(i, j);\n                k++;\n            }\n\
    \        }\n    }\n    \n    Arrays.sort(res);\n    \n    Arrays.sort(res, (a,\
    \ b) => Tuple!(b[0], a[0]));\n    \n    return res;\n}", "{\n    Tuple!(long,\
    \ long)[] result = new Tuple!(long, long)[lst.length];\n    for(int i = 0; i <\
    \ lst.length; i++)\n    {\n        if(lst[i][0] == x)\n        {\n           \
    \ result[i] = Tuple!(lst[i][0], lst[i][1]);\n        }\n    }\n    \n    Arrays.sort(result,\
    \ (a, b) => (a.0 < b.0) ? 1 : ((b.0 < a.0) ? -1 : 0));\n    Arrays.sort(result,\
    \ (a, b) => (a.1 < b.1) ? 1 : ((b.1 < a.1) ? -1 : 0));\n    \n    return result;\n\
    }", "{\n    Tuple!(long, long)[] result = new Tuple!(long, long)[0];\n    \n \
    \   foreach(i : 0..lst.len())\n    {\n        if(lst[i][0] == x)\n        {\n\
    \            result = append(result, Tuple!(long, long)[lst[i][1], lst[i][2]]);\n\
    \        }\n    }\n    \n    sort(result);\n    sort(result, 1, 2);\n    \n  \
    \  return result;\n}", "{\n    Tuple!(long, long)[] res = null;\n    foreach(row,lst)\n\
    \    {\n        foreach(col,row)\n        {\n            if(col == x)\n      \
    \      {\n                res = Tuple!(long, long)[](row,col);\n             \
    \   break;\n            }\n        }\n        if(res != null)\n            break;\n\
    \    }\n    return res;\n}", "{\n    long n = lst.length;\n    long m = lst[0].length;\n\
    \    long result[][] = new long[n][m];\n    for(int i = 0; i < n; i++)\n    {\n\
    \        for(int j = 0; j < m; j++)\n        {\n            if(lst[i][j] == x)\n\
    \            {\n                result[i][j] = 1;\n            }\n        }\n\
    \    }\n    \n    for(int i = 0; i < n; i++)\n    {\n        for(int j = 0; j\
    \ < m; j++)\n        {\n            if(result[i][j] == 1)\n            {\n   \
    \             long temp[][] = new long[m][2];\n                for(int k = 0;\
    \ k < m; k++)\n                {\n                    temp[k][0] = (int)i;\n \
    \                   temp[k][1] = (int)j;\n                }\n                \n\
    \                Arrays.sort(temp, (a, b) -> {\n                    if(a[0] >\
    \ b[0])\n                    {\n                        return 1;\n          \
    \          }\n                    if(a[0] == b[0])\n                    {\n  \
    \                      if(a[1] > b[1])\n                        {\n          \
    \                  return 1;\n                        }\n                    \
    \    if(a[1] == b[1])\n                        {\n                           \
    \ return 0;\n                        }\n                    }\n              \
    \      return -1;\n                });\n                \n                for(int\
    \ k = 0; k < m; k++)\n                {\n                    result[i][k] = temp[k][0];\n\
    \                    result[j][k] = temp[k][1];\n                }\n         \
    \   }\n        }\n    }\n    \n    Arrays.sort(result, (a, b) -> {\n        if(a[0]\
    \ > b[0])\n        {\n            return 1;\n        }\n        if(a[0] == b[0])\n\
    \        {\n            if(a[1] > b[1])\n            {\n                return\
    \ 1;\n            }\n            if(a[1] == b[1])\n            {\n           \
    \     return 0;\n            }\n        }\n        return -1;\n    });\n    \n\
    \    for(int i = 0; i < n; i++)\n    {\n        for(int j = 0; j < m; j++)\n \
    \       {\n            if(result[i][j] == 1)\n            {\n                return\
    \ Tuple!((long)i, (long)j);\n            }\n        }\n    }\n    return Tuple!();\n\
    }", "{\n    long n = lst.length;\n    long m = lst[0].length;\n    long[] res\
    \ = new long[n];\n    for(int i = 0; i < n; i++)\n    {\n        for(int j = 0;\
    \ j < m; j++)\n        {\n            if(lst[i][j] == x)\n            {\n    \
    \            res[i] = j;\n                break;\n            }\n        }\n \
    \   }\n    return Tuple!(long, long)[](res, n - 1);\n}", "{\n    Tuple!(long,\
    \ long)[] ans;\n    \n    for(int i = 0; i < lst.length; ++i)\n    {\n       \
    \ if(lst[i][0] == x)\n        {\n            ans = lst[i];\n            break;\n\
    \        }\n    }\n    \n    return ans;\n}", "{\n    long n = lst.length;\n \
    \   long m = lst[0].length;\n    long result[][] = new long[n][m];\n    for(int\
    \ i = 0; i < n; i++)\n    {\n        for(int j = 0; j < m; j++)\n        {\n \
    \           if(lst[i][j] == x)\n            {\n                result[i][j] =\
    \ 1;\n            }\n        }\n    }\n    Arrays.sort(result);\n    Arrays.sort(result,\
    \ (a, b) -> b[0] - a[0]);\n    Arrays.sort(result, (a, b) -> b[1] - a[1]);\n \
    \   return result;\n}", "{\n    long rows = 0;\n    long cols = 0;\n    for(long\
    \ i = 0; i < lst.length; ++i)\n    {\n        if(lst[i][0] == x)\n        {\n\
    \            rows = i;\n            break;\n        }\n    }\n    for(long i =\
    \ 0; i < lst.length; ++i)\n    {\n        if(lst[i][cols] == x)\n        {\n \
    \           cols = i;\n            break;\n        }\n    }\n    Tuple!(long,\
    \ long)[] res = new Tuple!(long, long)[rows];\n    for(long i = 0; i < rows; ++i)\n\
    \    {\n        res[i] = new Tuple!(long, long)[cols];\n        for(long j = 0;\
    \ j < cols; ++j)\n        {\n            res[i][j] = new Tuple!(long, long)();\n\
    \        }\n    }\n    return res;\n}", "{\n    long n = lst.length;\n    long\
    \ m = lst[0].length;\n    long ans = 0;\n    \n    for(long i = 0; i < n; i++)\n\
    \    {\n        for(long j = 0; j < m; j++)\n        {\n            if(lst[i][j]\
    \ == x)\n            {\n                ans += 1;\n                break;\n  \
    \          }\n        }\n    }\n    \n    Tuple!(long, long)[] ans = new Tuple!(long,\
    \ long)[ans];\n    \n    for(long i = 0; i < n; i++)\n    {\n        for(long\
    \ j = 0; j < m; j++)\n        {\n            if(lst[i][j] == x)\n            {\n\
    \                ans[ans].0 = i;\n                ans[ans].1 = j;\n          \
    \      break;\n            }\n        }\n    }\n    \n    return ans;\n}", "{\n\
    \    long n = lst.len();\n    long m = lst[0].len();\n    long result[][] = new\
    \ long[n][m];\n    long i, j, k;\n    \n    for(i = 0; i < n; i++)\n    {\n  \
    \      for(j = 0; j < m; j++)\n        {\n            if(lst[i][j] == x)\n   \
    \         {\n                result[i][j] = 1;\n                break;\n     \
    \       }\n        }\n    }\n    \n    for(i = 0; i < n; i++)\n    {\n       \
    \ for(j = 0; j < m; j++)\n        {\n            if(result[i][j] == 1)\n     \
    \       {\n                k = j;\n                while(k >= 0 && lst[i][k] ==\
    \ x)\n                {\n                    result[i][k] = 2;\n             \
    \       k--;\n                }\n                k = j;\n                while(k\
    \ >= 0 && lst[i][k] == x)\n                {\n                    result[i][k]\
    \ = 1;\n                    k--;\n                }\n                break;\n\
    \            }\n        }\n    }\n    \n    for(i = 0; i < n; i++)\n    {\n  \
    \      for(j = 0; j < m; j++)\n        {\n            if(result[i][j] == 1)\n\
    \            {\n                k = j;\n                while(k >= 0 && lst[i][k]\
    \ == x)\n                {\n                    result[i][k] = 2;\n          \
    \          k--;\n                }\n                break;\n            }\n  \
    \      }\n    }\n    \n    for(i = 0; i < n; i++)\n    {\n        for(j = 0; j\
    \ < m; j++)\n        {\n            if(result[i][j] == 2)\n            {\n   \
    \             k = j;\n                while(k >= 0 && lst[i][k] == x)\n      \
    \          {\n                    result[i][k] = 1;\n                    k--;\n\
    \                }\n                break;\n            }\n        }\n    }\n\
    \    \n    for(i = 0; i < n; i++)\n    {\n        for(j = 0; j < m; j++)\n   \
    \     {\n            if(result[i][j] == 2)\n            {\n                k =\
    \ j;\n                while(k >= 0 && lst[i][k] == x)\n                {\n   \
    \                 result[i][k] = 1;\n                    k--;\n              \
    \  }\n                break;\n            }\n        }\n    }\n    \n    for(i\
    \ = 0; i < n; i++)\n    {\n        for(j = 0; j < m; j++)\n        {\n       \
    \     if(result[i][j] == 2)\n            {\n                k = j;\n         \
    \       while(k >= 0 && lst[i][k] == x)\n                {\n                 \
    \   result[i][k] = 1;\n                    k--;\n                }\n         \
    \       break;\n            }\n        }\n    }\n    \n    for(i = 0; i < n; i++)\n\
    \    {\n        for(j = 0; j < m; j++)\n        {\n            if(result[i][j]\
    \ == 2)\n            {\n                k = j;\n                while(k >= 0 &&\
    \ lst[i][k] == x)\n                {\n                    result[i][k] = 1;\n\
    \                    k--;\n                }\n                break;\n       \
    \     }\n        }\n    }\n    \n    for(i = 0; i < n; i++)\n    {", "{\n    Tuple!(long,\
    \ long)[] ans;\n    \n    for(int i = 0; i < lst.length; ++i)\n    {\n       \
    \ if(lst[i][0] == x)\n        {\n            ans = Tuple!(long, long)[Tuple!(i\
    \ + 1, lst[i][1])];\n            break;\n        }\n    }\n    \n    return ans;\n\
    }", "{\n    long n = lst.length;\n    long m = lst[0].length;\n    long i, j,\
    \ k;\n    Tuple!(long, long)[] res = null;\n    \n    for(i = 0; i < n; i++) {\n\
    \        for(j = 0; j < m; j++) {\n            if(lst[i][j] == x) {\n        \
    \        res = new Tuple!(long, long)[new Tuple!(i, j)]; \n                break;\n\
    \            }\n        }\n    }\n    \n    if(res == null) {\n        throw new\
    \ Exception(\"Invalid coordinate\");\n    }\n    \n    for(i = 0; i < n; i++)\
    \ {\n        for(j = 0; j < m; j++) {\n            if(lst[i][j] > x) {\n     \
    \           k = j;\n                break;\n            }\n        }\n       \
    \ \n        if(k > m) {\n            k = m;\n        }\n        \n        for(;\
    \ k < m; k++) {\n            res[new Tuple!(i, k)] = new Tuple!(i, k);\n     \
    \   }\n    }\n    \n    for(i = 0; i < n; i++) {\n        for(j = 0; j < m; j++)\
    \ {\n            if(lst[i][j] < x) {\n                k = j;\n               \
    \ break;\n            }\n        }\n        \n        if(k > m) {\n          \
    \  k = m;\n        }\n        \n        for(; k < m; k++) {\n            res[new\
    \ Tuple!(i, k)] = new Tuple!(i, k);\n        }\n    }\n    \n    return res;\n\
    }", "{\n    long n = lst.length;\n    long m = lst[0].length;\n    long[] res\
    \ = new long[(n + 1) * (m + 1)];\n    \n    for(int i = 0; i < n; i++)\n    {\n\
    \        for(int j = 0; j < m; j++)\n        {\n            if(lst[i][j] == x)\n\
    \            {\n                res[(i * m) + j] = (i * m) + j;\n            }\n\
    \        }\n    }\n    \n    Arrays.sort(res);\n    \n    for(int i = 0; i < n;\
    \ i++)\n    {\n        for(int j = 0; j < m; j++)\n        {\n            if(res[(i\
    \ * m) + j] != (i * m) + j)\n            {\n                res[(i * m) + j] =\
    \ (i * m) + j;\n            }\n        }\n    }\n    \n    Arrays.sort(res, (a,\
    \ b) -> b - a);\n    \n    Tuple!(long, long)[] res = new Tuple!(long, long)[(n\
    \ + 1) * (m + 1)];\n    \n    for(int i = 0; i < n; i++)\n    {\n        for(int\
    \ j = 0; j < m; j++)\n        {\n            if(res[(i * m) + j] != (i * m) +\
    \ j)\n            {\n                res[(i * m) + j] = (i * m) + j;\n       \
    \     }\n        }\n    }\n    \n    return res;\n}", "{\n    Tuple!(long, long)[]\
    \ res = null;\n    foreach(row: lst, row: row) \n    {\n        foreach(col: row,\
    \ col: col) \n        {\n            if(col == x) \n            {\n          \
    \      res = Tuple!(long, long)[](row, col);\n                break;\n       \
    \     }\n        }\n    }\n    return res;\n}", "{\n    Tuple!(long, long)[] res\
    \ = null;\n    foreach(row: lst, row_index: 0) \n    {\n        foreach(col: row,\
    \ col_index: 0) \n        {\n            if(col == x) \n            {\n      \
    \          res = Tuple!(long, long)[](row_index, col_index);\n            }\n\
    \        }\n    }\n    return res;\n}", "{\n    long[] res = new long[lst.length];\n\
    \    for(int i = 0; i < lst.length; i++)\n    {\n        if(lst[i][0] == x)\n\
    \        {\n            res[i] = lst[i][1];\n        }\n    }\n    return Tuple!(long,\
    \ long)[](res, lst.length);\n}", "{\n    long n = lst.length;\n    long m = lst[0].length;\n\
    \    long[] res = new long[n];\n    for(int i = 0; i < n; i++)\n    {\n      \
    \  for(int j = 0; j < m; j++)\n        {\n            if(lst[i][j] == x)\n   \
    \         {\n                res[i] = j;\n                break;\n           \
    \ }\n        }\n    }\n    return Tuple!(long, long)[](res, n - 1);\n}", "{\n\
    \    long n = lst.length;\n    long m = lst[0].length;\n    long[] res = new long[n];\n\
    \    for(int i = 0; i < n; i++)\n    {\n        for(int j = 0; j < m; j++)\n \
    \       {\n            if(lst[i][j] == x)\n            {\n                res[i]\
    \ = j;\n                break;\n            }\n        }\n    }\n    return Tuple!<long,\
    \ long>[res];\n}", "{\n    long[] res = new long[lst.length];\n    for(int i =\
    \ 0; i < lst.length; i++)\n    {\n        if(lst[i][0] == x)\n        {\n    \
    \        res[i] = lst[i][1];\n        }\n    }\n    return Tuple!(long, long)[res];\n\
    }", "{\n    Tuple!(long, long)[] result = null;\n    \n    foreach(row: lst, row_index:\
    \ 0) \n    {\n        foreach(column: row, column_index: 0) \n        {\n    \
    \        if(column_index == x) \n            {\n                result = Tuple!(long,\
    \ long)[Tuple!((row_index, column_index), Tuple!((row_index, column_index))];\n\
    \            }\n        }\n    }\n    \n    return result;\n}", "{\n    long n\
    \ = lst.length;\n    long m = lst[0].length;\n    long[][] res = new long[n][m];\n\
    \    for(int i = 0; i < n; i++)\n    {\n        for(int j = 0; j < m; j++)\n \
    \       {\n            if(lst[i][j] == x)\n            {\n                res[i][j]\
    \ = 1;\n            }\n            else\n            {\n                res[i][j]\
    \ = 0;\n            }\n        }\n    }\n    return Tuple!(long, long)[](sort(res),\
    \ sort(res));\n}", "{\n    Tuple!(long, long)[] res = null;\n    foreach(row,lst)\n\
    \    {\n        foreach(col,row)\n        {\n            if(col == x)\n      \
    \      {\n                res = Tuple!(long, long)[](row,col);\n             \
    \   break;\n            }\n        }\n    }\n    return res;\n}", "{\n    Tuple!(long,\
    \ long)[] res = new Tuple!(long, long)[lst.length];\n    for(int i = 0; i < lst.length;\
    \ i++){\n        if(lst[i][0] == x){\n            res[i] = Tuple!(lst[i][0], lst[i][1]);\n\
    \        }\n    }\n    sort(res);\n    return res;\n}", "{\n    Tuple!(long, long)[]\
    \ result = new Tuple!(long, long)[lst.length];\n    for(int i = 0; i < lst.length;\
    \ ++i)\n    {\n        if(lst[i][0] == x)\n        {\n            result[i] =\
    \ new Tuple!(lst[i][0], lst[i][1]);\n        }\n    }\n    \n    for(int i = 0;\
    \ i < lst.length; ++i)\n    {\n        for(int j = 0; j < lst[i][1]; ++j)\n  \
    \      {\n            if(lst[i][0] == j)\n            {\n                result[i]\
    \ = new Tuple!(lst[i][0], lst[i][1]);\n            }\n        }\n    }\n    \n\
    \    for(int i = 0; i < lst.length; ++i)\n    {\n        for(int j = 0; j < lst[i][1];\
    \ ++j)\n        {\n            if(lst[i][0] == j)\n            {\n           \
    \     result[i] = new Tuple!(lst[i][0], lst[i][1]);\n            }\n        }\n\
    \    }\n    \n    for(int i = 0; i < lst.length; ++i)\n    {\n        for(int\
    \ j = 0; j < lst[i][1]; ++j)\n        {\n            if(lst[i][0] == j)\n    \
    \        {\n                result[i] = new Tuple!(lst[i][0], lst[i][1]);\n  \
    \          }\n        }\n    }\n    \n    for(int i = 0; i < lst.length; ++i)\n\
    \    {\n        for(int j = 0; j < lst[i][1]; ++j)\n        {\n            if(lst[i][0]\
    \ == j)\n            {\n                result[i] = new Tuple!(lst[i][0], lst[i][1]);\n\
    \            }\n        }\n    }\n    \n    for(int i = 0; i < lst.length; ++i)\n\
    \    {\n        for(int j = 0; j < lst[i][1]; ++j)\n        {\n            if(lst[i][0]\
    \ == j)\n            {\n                result[i] = new Tuple!(lst[i][0], lst[i][1]);\n\
    \            }\n        }\n    }\n    \n    for(int i = 0; i < lst.length; ++i)\n\
    \    {\n        for(int j = 0; j < lst[i][1]; ++j)\n        {\n            if(lst[i][0]\
    \ == j)\n            {\n                result[i] = new Tuple!(lst[i][0], lst[i][1]);\n\
    \            }\n        }\n    }\n    \n    for(int i = 0; i < lst.length; ++i)\n\
    \    {\n        for(int j = 0; j < lst[i][1]; ++j)\n        {\n            if(lst[i][0]\
    \ == j)\n            {\n                result[i] = new Tuple!(lst[i][0], lst[i][1]);\n\
    \            }\n        }\n    }\n    \n    for(int i = 0; i < lst.length; ++i)\n\
    \    {\n        for(int j = 0; j < lst[i][1]; ++j)\n        {\n            if(lst[i][0]\
    \ == j)\n            {\n                result[i] = new Tuple!(lst[i][0], lst[i][1]);\n\
    \            }\n        }\n    }\n    \n    for(int i = 0; i < lst.length; ++i)\n\
    \    {\n        for(int j = 0; j < lst[i][1]; ++j)\n        {\n            if(lst[i][0]\
    \ == j)\n            {\n                result[i] = new Tuple!(lst[i][0], lst[i][1]);\n\
    \            }\n        }\n    }\n    \n    for(int i = 0; i < lst.length; ++i)\n\
    \    {\n        for(int j = 0; j < lst[i][1]", "{\n    long n = lst.Length;\n\
    \    long m = lst[0].Length;\n    long[] res = new long[n];\n    for(int i = 0;\
    \ i < n; i++)\n    {\n        for(int j = 0; j < m; j++)\n        {\n        \
    \    if(lst[i][j] == x)\n            {\n                res[i] = j;\n        \
    \        break;\n            }\n        }\n    }\n    return Tuple!(long, long)[](res,\
    \ n - 1);\n}", "{\n    Tuple!(long, long)[] res = null;\n    foreach(row: lst,\
    \ row: row) \n    {\n        foreach(col: row, col: col) \n        {\n       \
    \     if(col == x) \n            {\n                res = Tuple!(long, long)[](row,\
    \ col);\n                break;\n            }\n        }\n    }\n    return res;\n\
    }", "{\n    long n = lst.len();\n    long m = lst[0].len();\n    long result[][]\
    \ = new long[n][m];\n    long row = 0;\n    long col = 0;\n    for(long i = 0;\
    \ i < n; i++)\n    {\n        for(long j = 0; j < m; j++)\n        {\n       \
    \     if(lst[i][j] == x)\n            {\n                result[row][col] = i;\n\
    \                result[row][col + 1] = j;\n                row++;\n         \
    \       col = 0;\n            }\n            else\n            {\n           \
    \     col++;\n            }\n        }\n    }\n    Arrays.sort(result);\n    return\
    \ result;\n}", "{\n    Tuple!(long, long)[] res = new Tuple!(long, long)[lst.length];\n\
    \    for(int i = 0; i < lst.length; i++)\n    {\n        if(lst[i][0] == x)\n\
    \        {\n            res[i] = new Tuple!(lst[i][0], lst[i][1]);\n        }\n\
    \    }\n    sort(res);\n    return res;\n}", "{\n    long n = lst.length;\n  \
    \  long[] res = new long[n];\n    for(int i = 0; i < n; i++)\n    {\n        if(lst[i][0]\
    \ == x)\n        {\n            res[i] = lst[i][1];\n        }\n    }\n    return\
    \ Tuple!(long, long)[](res);\n}", "{\n    long rows = 0;\n    long cols = 0;\n\
    \    for(long i = 0; i < lst.Length; i++)\n    {\n        if(lst[i][0] == x)\n\
    \        {\n            rows++;\n        }\n        else\n        {\n        \
    \    cols++;\n        }\n    }\n    Tuple!(long, long)[] res = new Tuple!(long,\
    \ long)[rows];\n    for(long i = 0; i < rows; i++)\n    {\n        res[i] = new\
    \ Tuple!(long, long)[cols];\n        for(long j = 0; j < cols; j++)\n        {\n\
    \            res[i][j] = new Tuple!(long, long)[i, j];\n        }\n    }\n   \
    \ return res;\n}", "{\n    long n = lst.length;\n    long m = lst[0].length;\n\
    \    long result[][] = new long[n][m];\n    for(int i = 0; i < n; i++)\n    {\n\
    \        for(int j = 0; j < m; j++)\n        {\n            if(lst[i][j] == x)\n\
    \            {\n                result[i][j] = 1;\n            }\n        }\n\
    \    }\n    Arrays.sort(result);\n    Arrays.sort(result, (a, b) -> b[0] - a[0]);\n\
    \    Arrays.sort(result, (a, b) -> b[1] - a[1]);\n    return result;\n}", "{\n\
    \    Tuple!(long, long)[] res = new Tuple!(long, long)[0];\n    foreach(i : 0..lst.length-1)\n\
    \    {\n        foreach(j : 0..lst[i].length-1)\n        {\n            if(lst[i][j]\
    \ == x)\n            {\n                res = append(res, Tuple!(i, j));\n   \
    \         }\n        }\n    }\n    return res;\n}", "{\n    long n = lst.length;\n\
    \    long m = lst[0].length;\n    long result[][] = new long[n][m];\n    long\
    \ i, j, k;\n    for(i = 0; i < n; i++)\n    {\n        for(j = 0; j < m; j++)\n\
    \        {\n            if(lst[i][j] == x)\n            {\n                result[i][j]\
    \ = 1;\n                break;\n            }\n        }\n    }\n    for(i = 0;\
    \ i < n; i++)\n    {\n        for(j = 0; j < m; j++)\n        {\n            if(result[i][j]\
    \ == 1)\n            {\n                k = j;\n                break;\n     \
    \       }\n        }\n        for(j = k; j < m; j++)\n        {\n            if(result[i][j]\
    \ == 1)\n            {\n                result[i][j] = 2;\n                break;\n\
    \            }\n        }\n    }\n    for(i = 0; i < n; i++)\n    {\n        for(j\
    \ = 0; j < m; j++)\n        {\n            if(result[i][j] == 2)\n           \
    \ {\n                result[i][j] = 0;\n                break;\n            }\n\
    \        }\n    }\n    for(i = 0; i < n; i++)\n    {\n        for(j = 0; j < m;\
    \ j++)\n        {\n            if(result[i][j] == 0)\n            {\n        \
    \        result[i][j] = 1;\n                break;\n            }\n        }\n\
    \    }\n    for(i = 0; i < n; i++)\n    {\n        for(j = 0; j < m; j++)\n  \
    \      {\n            if(result[i][j] == 1)\n            {\n                result[i][j]\
    \ = 2;\n                break;\n            }\n        }\n    }\n    for(i = 0;\
    \ i < n; i++)\n    {\n        for(j = 0; j < m; j++)\n        {\n            if(result[i][j]\
    \ == 2)\n            {\n                result[i][j] = 0;\n                break;\n\
    \            }\n        }\n    }\n    for(i = 0; i < n; i++)\n    {\n        for(j\
    \ = 0; j < m; j++)\n        {\n            if(result[i][j] == 0)\n           \
    \ {\n                result[i][j] = 1;\n                break;\n            }\n\
    \        }\n    }\n    for(i = 0; i < n; i++)\n    {\n        for(j = 0; j < m;\
    \ j++)\n        {\n            if(result[i][j] == 1)\n            {\n        \
    \        result[i][j] = 2;\n                break;\n            }\n        }\n\
    \    }\n    for(i = 0; i < n; i++)\n    {\n        for(j = 0; j < m; j++)\n  \
    \      {\n            if(result[i][j] == 2)\n            {\n                result[i][j]\
    \ = 0;\n                break;\n            }\n        }\n    }\n    for(i = 0;\
    \ i < n; i++)\n    {\n        for(j = 0; j < m; j++)\n        {\n            if(result[i][j]\
    \ == 0)\n            {\n                result[i][j] = 1;\n                break;\n\
    \            }\n        }\n    }\n    for(i = 0; i < n; i++)\n    {\n        for(j\
    \ = 0; j < m; j++)\n        {\n            if(result[i][j] == 1)\n           \
    \ {\n                result[i][j] = 2;\n                break;\n            }\n\
    \        }\n    }\n    for(i = 0; i < n; i++)\n    {\n        for(j = 0; j < m;\
    \ j++)\n        {\n            if(result[i][j] == 2)\n            {\n        \
    \        result[i][j] = 0;\n                break;\n            }\n", "{\n   \
    \ Tuple!(long, long)[] result = null;\n    \n    foreach(row: lst, row: row) \n\
    \    {\n        foreach(column: row, column: column) \n        {\n           \
    \ if(column == x) \n            {\n                result = Tuple!(long, long)[](row,\
    \ column);\n                break;\n            }\n        }\n    }\n    \n  \
    \  return result;\n}", "{\n    long n = lst.length;\n    long m = lst[0].length;\n\
    \    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n    long\
    \ m1 = m;\n    long n1 = n;\n    long m2 = m;\n    long n2 = n;\n    long m3 =\
    \ m;\n    long n3 = n;\n    long m4 = m;\n    long n4 = n;\n    long m5 = m;\n\
    \    long n5 = n;\n    long m6 = m;\n    long n6 = n;\n    long m7 = m;\n    long\
    \ n7 = n;\n    long m8 = m;\n    long n8 = n;\n    long m9 = m;\n    long n9 =\
    \ n;\n    long m10 = m;\n    long n10 = n;\n    long m11 = m;\n    long n11 =\
    \ n;\n    long m12 = m;\n    long n12 = n;\n    long m13 = m;\n    long n13 =\
    \ n;\n    long m14 = m;\n    long n14 = n;\n    long m15 = m;\n    long n15 =\
    \ n;\n    long m16 = m;\n    long n16 = n;\n    long m17 = m;\n    long n17 =\
    \ n;\n    long m18 = m;\n    long n18 = n;\n    long m19 = m;\n    long n19 =\
    \ n;\n    long m20 = m;\n    long n20 = n;\n    long m21 = m;\n    long n21 =\
    \ n;\n    long m22 = m;\n    long n22 = n;\n    long m23 = m;\n    long n23 =\
    \ n;\n    long m24 = m;\n    long n24 = n;\n    long m25 = m;\n    long n25 =\
    \ n;\n    long m26 = m;\n    long n26 = n;\n    long m27 = m;\n    long n27 =\
    \ n;\n    long m28 = m;\n    long n28 = n;\n    long m29 = m;\n    long n29 =\
    \ n;\n    long m30 = m;\n    long n30 = n;\n    long m31 = m;\n    long n31 =\
    \ n;\n    long m32 = m;\n    long n32 = n;\n    long m33 = m;\n    long n33 =\
    \ n;\n    long m34 = m;\n    long n34 = n;\n    long m35 = m;\n    long n35 =\
    \ n;\n    long m36 = m;\n    long n36 = n;\n    ", "{\n    long n = lst.lenght;\n\
    \    long m = lst[0].lenght;\n    long[] res = new long[n];\n    for(int i = 0;\
    \ i < n; i++)\n    {\n        for(int j = 0; j < m; j++)\n        {\n        \
    \    if(lst[i][j] == x)\n            {\n                res[i] = j;\n        \
    \        break;\n            }\n        }\n    }\n    return Tuple!(long, long)[](res);\n\
    }", "{\n    long n = lst.len();\n    long m = lst[0].len();\n    long i = 0;\n\
    \    long j = 0;\n    long k = 0;\n    long l = 0;\n    long m1 = 0;\n    long\
    \ m2 = 0;\n    long m3 = 0;\n    long m4 = 0;\n    long m5 = 0;\n    long m6 =\
    \ 0;\n    long m7 = 0;\n    long m8 = 0;\n    long m9 = 0;\n    long m10 = 0;\n\
    \    long m11 = 0;\n    long m12 = 0;\n    long m13 = 0;\n    long m14 = 0;\n\
    \    long m15 = 0;\n    long m16 = 0;\n    long m17 = 0;\n    long m18 = 0;\n\
    \    long m19 = 0;\n    long m20 = 0;\n    long m21 = 0;\n    long m22 = 0;\n\
    \    long m23 = 0;\n    long m24 = 0;\n    long m25 = 0;\n    long m26 = 0;\n\
    \    long m27 = 0;\n    long m28 = 0;\n    long m29 = 0;\n    long m30 = 0;\n\
    \    long m31 = 0;\n    long m32 = 0;\n    long m33 = 0;\n    long m34 = 0;\n\
    \    long m35 = 0;\n    long m36 = 0;\n    long m37 = 0;\n    long m38 = 0;\n\
    \    long m39 = 0;\n    long m40 = 0;\n    long m41 = 0;\n    long m42 = 0;\n\
    \    long m43 = 0;\n    long m44 = 0;\n    long m45 = 0;\n    long m46 = 0;\n\
    \    long m47 = 0;\n    long m48 = 0;\n    long m49 = 0;\n    long m50 = 0;\n\
    \    long m51 = 0;\n    long m52 = 0;\n    long m53 = 0;\n    long m54 = 0;\n\
    \    long m55 = 0;\n    long m56 = 0;\n    long m57 = 0;\n    long m58 = 0;\n\
    \    long m59 = 0;\n    long m60 = 0;\n    long m61 = 0;\n    long m62 = 0;\n\
    \    long m63 = 0;\n    long m64 = 0;\n    long m65 = 0;\n    long m66 = 0;\n\
    \    long m67 = 0;\n    long m68 = 0;\n    long m69 = 0;\n    long m70 = 0;\n\
    \    long m71 = 0;\n    long m72 = 0;\n    long m73 = 0;\n    long m74 = 0;\n\
    \    long m75 = 0;\n    long m76 = 0;\n    long m77 = 0;\n    long m78 = 0;\n\
    \    long m79 = 0;\n    long m80 = 0;\n", "{\n    long n = lst.len();\n    long\
    \ m = lst[0].len();\n    long result[][] = new long[n][m];\n    long i, j, k;\n\
    \    for(i = 0; i < n; i++)\n    {\n        for(j = 0; j < m; j++)\n        {\n\
    \            if(lst[i][j] == x)\n            {\n                result[i][j] =\
    \ 1;\n                break;\n            }\n        }\n    }\n    for(i = 0;\
    \ i < n; i++)\n    {\n        for(j = 0; j < m; j++)\n        {\n            if(result[i][j]\
    \ == 1)\n            {\n                k = j;\n                while(k >= 0 &&\
    \ lst[i][k] == x)\n                {\n                    result[i][k] = 2;\n\
    \                    k--;\n                }\n                k = j;\n       \
    \         while(k >= 0 && lst[i][k] == x)\n                {\n               \
    \     result[i][k] = 1;\n                    k--;\n                }\n       \
    \         break;\n            }\n        }\n    }\n    for(i = 0; i < n; i++)\n\
    \    {\n        for(j = 0; j < m; j++)\n        {\n            if(result[i][j]\
    \ == 1)\n            {\n                k = j;\n                while(k >= 0 &&\
    \ lst[i][k] == x)\n                {\n                    result[i][k] = 2;\n\
    \                    k--;\n                }\n                break;\n       \
    \     }\n        }\n    }\n    for(i = 0; i < n; i++)\n    {\n        for(j =\
    \ 0; j < m; j++)\n        {\n            if(result[i][j] == 2)\n            {\n\
    \                k = j;\n                while(k >= 0 && lst[i][k] == x)\n   \
    \             {\n                    result[i][k] = 1;\n                    k--;\n\
    \                }\n                break;\n            }\n        }\n    }\n\
    \    for(i = 0; i < n; i++)\n    {\n        for(j = 0; j < m; j++)\n        {\n\
    \            if(result[i][j] == 2)\n            {\n                k = j;\n  \
    \              while(k >= 0 && lst[i][k] == x)\n                {\n          \
    \          result[i][k] = 1;\n                    k--;\n                }\n  \
    \              break;\n            }\n        }\n    }\n    for(i = 0; i < n;\
    \ i++)\n    {\n        for(j = 0; j < m; j++)\n        {\n            if(result[i][j]\
    \ == 1)\n            {\n                k = j;\n                while(k >= 0 &&\
    \ lst[i][k] == x)\n                {\n                    result[i][k] = 2;\n\
    \                    k--;\n                }\n                break;\n       \
    \     }\n        }\n    }\n    for(i = 0; i < n; i++)\n    {\n        for(j =\
    \ 0; j < m; j++)\n        {\n            if(result[i][j] == 2)\n            {\n\
    \                k = j;\n                while(k >= 0 && lst[i][k] == x)\n   \
    \             {\n                    result[i][k] = 1;\n                    k--;\n\
    \                }\n                break;\n            }\n        }\n    }\n\
    \    for(i = 0; i < n; i++)\n    {\n        for(j = 0; j < m; j++)\n        {\n\
    \            if(result[i][j] == 1)\n", "{\n    Tuple!(long, long)[] res = new\
    \ Tuple!(long, long)[0];\n    for(long i = 0; i < lst.Length; i++)\n    {\n  \
    \      if(lst[i][0] == x)\n        {\n            Tuple!(long, long)[] row = new\
    \ Tuple!(long, long)[i];\n            for(long j = 0; j < lst[i].Length; j++)\n\
    \            {\n                if(lst[i][j] > x)\n                {\n       \
    \             row.Add(lst[i][j], j);\n                }\n            }\n     \
    \       res.Add(row);\n        }\n    }\n    return res;\n}", "{\n    Tuple!(long,\
    \ long)[] res = new Tuple!(long, long)[0];\n    for(int i = 0; i < lst.length;\
    \ i++)\n    {\n        if(lst[i][0] == x)\n        {\n            Tuple!(long,\
    \ long)[] row = new Tuple!(long, long)[lst[i].length];\n            for(int j\
    \ = 0; j < lst[i].length; j++)\n            {\n                row[j] = (lst[i][0],\
    \ lst[i][1]);\n            }\n            sort(row);\n            sort(res);\n\
    \            res = new Tuple!(long, long)[res.length + 1];\n            res[res.length\
    \ - 1] = row;\n        }\n    }\n    return res;\n}", "{\n    long[][] result\
    \ = new long[lst.length][];\n    for(int i = 0; i < lst.length; ++i)\n    {\n\
    \        if(lst[i][x] != 0)\n        {\n            result[i] = new long[] {lst[i][x],\
    \ i};\n        }\n    }\n    Arrays.sort(result);\n    Arrays.sort(result, (a,\
    \ b) => b[0] - a[0]);\n    return result;\n}", "{\n    long n = lst.length;\n\
    \    long m = lst[0].length;\n    long[] result = new long[n];\n    for(int i\
    \ = 0; i < n; i++)\n    {\n        for(int j = 0; j < m; j++)\n        {\n   \
    \         if(lst[i][j] == x)\n            {\n                result[i] = j;\n\
    \                break;\n            }\n        }\n    }\n    Arrays.sort(result);\n\
    \    Arrays.sort(result, (a, b) -> b - a);\n    return result;\n}", "{\n    Tuple!(long,\
    \ long)[] res = new Tuple!(long, long)[0];\n    foreach(i : 0..lst.Length-1)\n\
    \    {\n        if(lst[i][0] == x)\n        {\n            foreach(j : 0..lst[i][1]-1)\n\
    \            {\n                res.Add(Tuple!(i, j));\n            }\n      \
    \  }\n    }\n    return res;\n}", "{\n    long n = lst.lenght;\n    long m = lst[0].lenght;\n\
    \    long result[][] = new long[n][m];\n    long j = 0;\n    for(long i = 0; i\
    \ < n; i++)\n    {\n        for(long k = 0; k < m; k++)\n        {\n         \
    \   if(lst[i][j] == x)\n            {\n                result[i][j] = k;\n   \
    \             break;\n            }\n        }\n    }\n    \n    Arrays.sort(result,\
    \ (a, b) => (a[0] - b[0]) * (a[1] - b[1]));\n    Arrays.sort(result, (a, b) =>\
    \ (b[0] - a[0]) * (b[1] - a[1]));\n    \n    return result;\n}", "{\n    Tuple!(long,\
    \ long)[] res = null;\n    foreach(row: lst, row: row) \n    {\n        foreach(col:\
    \ row, col: col) \n        {\n            if(col == x) \n            {\n     \
    \           res = Tuple!(long, long)[Tuple!(0, row), Tuple!(1, row)];\n      \
    \      }\n        }\n    }\n    return res;\n}", "{\n    Tuple!(long, long)[]\
    \ result = new Tuple!(long, long)[];\n    \n    foreach(i : 0..lst.len) \n   \
    \ {\n        foreach(j : 0..lst[i].len) \n        {\n            if(lst[i][j]\
    \ == x) \n            {\n                result.add(Tuple!(i, j));\n         \
    \   }\n        }\n    }\n    \n    result.sort(byRow);\n    result.sort(byCol);\n\
    \    \n    return result;\n}", "{\n    long n = lst.length;\n    long m = lst[0].length;\n\
    \    long result[][] = new long[n][m];\n    \n    for(long i = 0; i < n; i++)\n\
    \    {\n        for(long j = 0; j < m; j++)\n        {\n            if(lst[i][j]\
    \ == x)\n            {\n                result[i][j] = 1;\n            }\n   \
    \     }\n    }\n    \n    for(long i = 0; i < n; i++)\n    {\n        for(long\
    \ j = 0; j < m; j++)\n        {\n            if(lst[i][j] == 1)\n            {\n\
    \                long temp[][] = new long[m][2];\n                for(long k =\
    \ 0; k < m; k++)\n                {\n                    temp[k][0] = (int)i;\n\
    \                    temp[k][1] = (int)j;\n                }\n               \
    \ \n                sort(temp, (a, b) => b[0] - a[0]);\n                \n   \
    \             for(long k = 0; k < m; k++)\n                {\n               \
    \     if(temp[k][0] > i)\n                    {\n                        swap(temp[k],\
    \ temp[k - 1]);\n                    }\n                    if(temp[k][1] > j)\n\
    \                    {\n                        swap(temp[k], temp[k - 1]);\n\
    \                    }\n                }\n                \n                for(long\
    \ k = 0; k < m; k++)\n                {\n                    if(temp[k][0] > i)\n\
    \                    {\n                        swap(temp[k], temp[k - 1]);\n\
    \                    }\n                    if(temp[k][1] > j)\n             \
    \       {\n                        swap(temp[k], temp[k - 1]);\n             \
    \       }\n                }\n                \n                for(long k = 0;\
    \ k < m; k++)\n                {\n                    if(temp[k][0] > i)\n   \
    \                 {\n                        swap(temp[k], temp[k - 1]);\n   \
    \                 }\n                    if(temp[k][1] > j)\n                \
    \    {\n                        swap(temp[k], temp[k - 1]);\n                \
    \    }\n                }\n                \n                for(long k = 0; k\
    \ < m; k++)\n                {\n                    if(temp[k][0] > i)\n     \
    \               {\n                        swap(temp[k], temp[k - 1]);\n     \
    \               }\n                    if(temp[k][1] > j)\n                  \
    \  {\n                        swap(temp[k], temp[k - 1]);\n                  \
    \  }\n                }\n                \n                for(long k = 0; k <\
    \ m; k++)\n                {\n                    if(temp[k][0] > i)\n       \
    \             {\n                        swap(temp[k], temp[k - 1]);\n       \
    \             }\n                    if(temp[k][1] > j)\n                    {\n\
    \                        swap(temp[k], temp[k - 1]);\n                    }\n\
    \                }\n                \n                for(long k = 0; k < m; k++)\n\
    \                {\n                    if(temp[k][0] > i)\n                 \
    \   {\n                        swap(temp[k], temp[k - 1]);\n                 \
    \   }\n                    if(temp[k][1] > j)", "{\n    long n = lst.length;\n\
    \    long m = lst[0].length;\n    long[] res = new long[n];\n    for(int i = 0;\
    \ i < n; i++)\n    {\n        for(int j = 0; j < m; j++)\n        {\n        \
    \    if(lst[i][j] == x)\n            {\n                res[i] = j;\n        \
    \        break;\n            }\n        }\n    }\n    return Tuple!(long, long)[res];\n\
    }", "{\n    long rows = 0;\n    long cols = 0;\n    \n    foreach(long y, lst)\n\
    \    {\n        if(y == x)\n        {\n            return Tuple!(long, long[])[](rows,\
    \ cols);\n        }\n        \n        foreach(long x, lst)\n        {\n     \
    \       if(y == x)\n            {\n                cols++;\n            }\n  \
    \      }\n        rows++;\n        cols = 0;\n    }\n    \n    return Tuple!(long,\
    \ long[])[](rows, cols);\n}", "{\n    long rows = 0;\n    long cols = 0;\n   \
    \ for(long i = 0; i < lst.length; ++i)\n    {\n        if(lst[i][0] == x)\n  \
    \      {\n            rows = i;\n            break;\n        }\n    }\n    for(long\
    \ i = 0; i < lst.length; ++i)\n    {\n        if(lst[i][1] == x)\n        {\n\
    \            cols = i;\n            break;\n        }\n    }\n    Tuple!(long,\
    \ long)[] result = new Tuple!(long, long)[rows];\n    for(long i = 0; i < rows;\
    \ ++i)\n    {\n        result[i] = new Tuple!(long, long)[cols];\n        for(long\
    \ j = 0; j < cols; ++j)\n        {\n            result[i][j] = new Tuple!(long,\
    \ long)(i, j);\n        }\n    }\n    return result;\n}", "{\n    Tuple!(long,\
    \ long)[] result = new Tuple!(long, long)[0];\n    \n    foreach(row: lst, row:\
    \ row) \n    {\n        foreach(column: row, column: column) \n        {\n   \
    \         if(column == x) \n            {\n                result.push((row, column));\n\
    \            }\n        }\n    }\n    \n    result.sort(function(a, b) -> a.first\
    \ > b.first);\n    result.sort(function(a, b) -> a.second > b.second);\n    \n\
    \    return result;\n}", "{\n    long n = lst.length;\n    long m = lst[0].length;\n\
    \    long i, j, k;\n    Tuple!(long, long)[] res = new Tuple!(long, long)[n];\n\
    \    \n    for(i = 0; i < n; i++)\n    {\n        for(j = 0; j < m; j++)\n   \
    \     {\n            if(lst[i][j] == x)\n            {\n                res[i]\
    \ = new Tuple!(i, j);\n                break;\n            }\n        }\n    }\n\
    \    \n    for(i = 0; i < n; i++)\n    {\n        for(j = m-1; j >= 0; j--)\n\
    \        {\n            if(lst[i][j] == x)\n            {\n                res[i]\
    \ = new Tuple!(i, j);\n                break;\n            }\n        }\n    }\n\
    \    \n    for(i = 0; i < n; i++)\n    {\n        for(j = 0; j < m; j++)\n   \
    \     {\n            if(lst[i][j] == x)\n            {\n                res[i]\
    \ = new Tuple!(i, j);\n                break;\n            }\n        }\n    }\n\
    \    \n    for(i = 0; i < n; i++)\n    {\n        for(j = 0; j < m; j++)\n   \
    \     {\n            if(lst[i][j] == x)\n            {\n                res[i]\
    \ = new Tuple!(i, j);\n                break;\n            }\n        }\n    }\n\
    \    \n    for(i = 0; i < n; i++)\n    {\n        for(j = 0; j < m; j++)\n   \
    \     {\n            if(lst[i][j] == x)\n            {\n                res[i]\
    \ = new Tuple!(i, j);\n                break;\n            }\n        }\n    }\n\
    \    \n    for(i = 0; i < n; i++)\n    {\n        for(j = 0; j < m; j++)\n   \
    \     {\n            if(lst[i][j] == x)\n            {\n                res[i]\
    \ = new Tuple!(i, j);\n                break;\n            }\n        }\n    }\n\
    \    \n    for(i = 0; i < n; i++)\n    {\n        for(j = 0; j < m; j++)\n   \
    \     {\n            if(lst[i][j] == x)\n            {\n                res[i]\
    \ = new Tuple!(i, j);\n                break;\n            }\n        }\n    }\n\
    \    \n    for(i = 0; i < n; i++)\n    {\n        for(j = 0; j < m; j++)\n   \
    \     {\n            if(lst[i][j] == x)\n            {\n                res[i]\
    \ = new Tuple!(i, j);\n                break;\n            }\n        }\n    }\n\
    \    \n    for(i = 0; i < n; i++)\n    {\n        for(j = 0; j < m; j++)\n   \
    \     {\n            if(lst[i][j] == x)\n            {\n                res[i]\
    \ = new Tuple!(i, j);\n                break;\n            }\n        }\n    }\n\
    \    \n    for(i = 0; i < n; i++)\n    {\n        for(j = 0; j < m; j++)\n   \
    \     {\n            if(lst[i][j] == x)\n            {\n                res[i]\
    \ = new Tuple!(i, j);\n                break;\n            }\n        }\n    }\n\
    \    \n    for(i = 0; i < n; i++)\n    {\n        for(j = 0; j < m; j++)\n   \
    \     {\n            if(lst[i][j] == x)\n            {\n                res[i]\
    \ = new ", "{\n    long rows = 0;\n    long cols = 0;\n    foreach(long y, lst)\n\
    \    {\n        foreach(long x, y)\n        {\n            if(x != x)\n      \
    \      {\n                cols++;\n            }\n            else\n         \
    \   {\n                rows++;\n            }\n        }\n    }\n    Tuple!(long,\
    \ long)[] res = new Tuple!(long, long)[rows];\n    foreach(long y, lst)\n    {\n\
    \        foreach(long x, y)\n        {\n            if(x != x)\n            {\n\
    \                res[rows] = new Tuple!(long, long)(x, y);\n                rows++;\n\
    \            }\n            else\n            {\n                res[rows] = new\
    \ Tuple!(long, long)(x, y);\n                cols--;\n            }\n        }\n\
    \    }\n    return res;\n}", "{\n    Tuple!(long, long)[] result = new Tuple!(long,\
    \ long)[lst.length];\n    for(int i = 0; i < lst.length; i++)\n    {\n       \
    \ if(lst[i][0] == x)\n        {\n            result[i] = new Tuple!(lst[i][0],\
    \ lst[i][1]);\n        }\n    }\n    \n    for(int i = 0; i < lst.length; i++)\n\
    \    {\n        for(int j = 0; j < lst[i].length; j++)\n        {\n          \
    \  if(lst[i][j] > lst[i][0])\n            {\n                Tuple!(long, long)[]\
    \ temp = new Tuple!(long, long)[lst[i].length];\n                for(int k = 0;\
    \ k < lst[i].length; k++)\n                {\n                    temp[k] = new\
    \ Tuple!(lst[i][j], k);\n                }\n                Arrays.sort(temp,\
    \ (x, y) => y._1 > x._1);\n                for(int k = 0; k < temp.length; k++)\n\
    \                {\n                    result[i] = result[i].__append(temp[k]);\n\
    \                }\n            }\n        }\n    }\n    \n    Arrays.sort(result,\
    \ (x, y) => y._1 > x._1);\n    \n    return result;\n}", "{\n    long n = lst.length;\n\
    \    long m = lst[0].length;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n\
    \    long l = 0;\n    long m1 = m;\n    long n1 = n;\n    long x1;\n    long x2;\n\
    \    long y1;\n    long y2;\n    long z = 0;\n    long z1 = 0;\n    long z2 =\
    \ 0;\n    long z3 = 0;\n    long z4 = 0;\n    long z5 = 0;\n    long z6 = 0;\n\
    \    long z7 = 0;\n    long z8 = 0;\n    long z9 = 0;\n    long z10 = 0;\n   \
    \ long z11 = 0;\n    long z12 = 0;\n    long z13 = 0;\n    long z14 = 0;\n   \
    \ long z15 = 0;\n    long z16 = 0;\n    long z17 = 0;\n    long z18 = 0;\n   \
    \ long z19 = 0;\n    long z20 = 0;\n    long z21 = 0;\n    long z22 = 0;\n   \
    \ long z23 = 0;\n    long z24 = 0;\n    long z25 = 0;\n    long z26 = 0;\n   \
    \ long z27 = 0;\n    long z28 = 0;\n    long z29 = 0;\n    long z30 = 0;\n   \
    \ long z31 = 0;\n    long z32 = 0;\n    long z33 = 0;\n    long z34 = 0;\n   \
    \ long z35 = 0;\n    long z36 = 0;\n    long z37 = 0;\n    long z38 = 0;\n   \
    \ long z39 = 0;\n    long z40 = 0;\n    long z41 = 0;\n    long z42 = 0;\n   \
    \ long z43 = 0;\n    long z44 = 0;\n    long z45 = 0;\n    long z46 = 0;\n   \
    \ long z47 = 0;\n    long z48 = 0;\n    long z49 = 0;\n    long z50 = 0;\n   \
    \ long z51 = 0;\n    long z52 = 0;\n    long z53 = 0;\n    long z54 = 0;\n   \
    \ long z55 = 0;\n    long z56 = 0;\n    long z57 = 0;\n    long z58 = 0;\n   \
    \ long z59 = 0;\n    long z60 = 0;\n    long z61 = 0;\n    long z62 = 0;\n   \
    \ long z63 = 0;\n    long z64 = 0;\n    long z65 = 0;\n    long z66 = 0;\n   \
    \ long z67 = 0;\n    long z68 = 0;\n    long z69 = 0;\n    long z70 = 0;\n   \
    \ long z71 = 0;\n    long z72 = 0;\n    long z73 = 0;\n    long z74 = 0;\n   \
    \ long ", "{\n    Tuple!(long, long)[] ans;\n    \n    foreach(i : 0..lst.len())\n\
    \    {\n        foreach(j : 0..lst[i].len())\n        {\n            if(lst[i][j]\
    \ == x)\n            {\n                ans = Tuple!(long, long)[](Tuple!(i +\
    \ 1, j + 1), Tuple!(i + 1, j));\n            }\n        }\n    }\n    \n    foreach(i\
    \ : 0..lst.len())\n    {\n        foreach(j : 0..lst[i].len())\n        {\n  \
    \          if(lst[i][j] > x)\n            {\n                ans = Tuple!(long,\
    \ long)[](Tuple!(i + 1, j + 1), Tuple!(i + 1, j));\n            }\n        }\n\
    \    }\n    \n    return ans;\n}", "{\n    Tuple!(long, long)[] ret = new Tuple!(long,\
    \ long)[0];\n    foreach(row,lst)\n    {\n        foreach(col,row)\n        {\n\
    \            if(col == x)\n            {\n                ret = new Tuple!(long,\
    \ long)[ret.length + 1];\n                ret[ret.length] = Tuple!(row, col);\n\
    \            }\n        }\n    }\n    \n    return ret;\n}", "{\n    Tuple!(long,\
    \ long)[] result = new Tuple!(long, long)[lst.length];\n    for(int i = 0; i <\
    \ lst.length; i++)\n    {\n        if(lst[i][0] == x)\n        {\n           \
    \ result[i] = new Tuple!(lst[i][0], lst[i][1]);\n        }\n    }\n    \n    for(int\
    \ i = 0; i < lst.length; i++)\n    {\n        for(int j = 0; j < lst[i].length;\
    \ j++)\n        {\n            if(lst[i][j] > x)\n            {\n            \
    \    for(int k = j; k < lst[i].length; k++)\n                {\n             \
    \       lst[i][k] = lst[i][k - 1];\n                }\n                lst[i][0]\
    \ = x;\n                break;\n            }\n        }\n    }\n    \n    for(int\
    \ i = 0; i < lst.length; i++)\n    {\n        for(int j = 0; j < lst[i].length;\
    \ j++)\n        {\n            if(lst[i][j] < x)\n            {\n            \
    \    for(int k = j; k < lst[i].length; k++)\n                {\n             \
    \       lst[i][k] = lst[i][k + 1];\n                }\n                lst[i][1]\
    \ = x;\n                break;\n            }\n        }\n    }\n    \n    for(int\
    \ i = 0; i < lst.length; i++)\n    {\n        for(int j = 0; j < lst[i].length;\
    \ j++)\n        {\n            if(lst[i][j] == x)\n            {\n           \
    \     result[i] = new Tuple!(lst[i][0], lst[i][1]);\n            }\n        }\n\
    \    }\n    \n    for(int i = 0; i < lst.length; i++)\n    {\n        for(int\
    \ j = 0; j < lst[i].length; j++)\n        {\n            if(lst[i][j] > x)\n \
    \           {\n                for(int k = j; k < lst[i].length; k++)\n      \
    \          {\n                    lst[i][k] = lst[i][k - 1];\n               \
    \ }\n                lst[i][0] = x;\n                break;\n            }\n \
    \       }\n    }\n    \n    for(int i = 0; i < lst.length; i++)\n    {\n     \
    \   for(int j = 0; j < lst[i].length; j++)\n        {\n            if(lst[i][j]\
    \ < x)\n            {\n                for(int k = j; k < lst[i].length; k++)\n\
    \                {\n                    lst[i][k] = lst[i][k + 1];\n         \
    \       }\n                lst[i][1] = x;\n                break;\n          \
    \  }\n        }\n    }\n    \n    for(int i = 0; i < lst.length; i++)\n    {\n\
    \        for(int j = 0; j < lst[i].length; j++)\n        {\n            if(lst[i][j]\
    \ == x)\n            {\n                result[i] = new Tuple!(lst[i][0], lst[i][1]);\n\
    \            }\n        }\n    }\n    \n    return result;\n}", "{\n    long rows\
    \ = 0;\n    long cols = 0;\n    for(long i = 0; i < lst.length; ++i)\n    {\n\
    \        if(lst[i][0] == x)\n        {\n            rows = i;\n            break;\n\
    \        }\n    }\n    for(long i = 0; i < lst.length; ++i)\n    {\n        if(lst[i][1]\
    \ == x)\n        {\n            cols = i;\n            break;\n        }\n   \
    \ }\n    Tuple!(long, long)[] res = new Tuple!(long, long)[rows];\n    for(long\
    \ i = 0; i < rows; ++i)\n    {\n        res[i] = new Tuple!(long, long)[cols];\n\
    \        for(long j = 0; j < cols; ++j)\n        {\n            res[i][j] = new\
    \ Tuple!(long, long)();\n        }\n    }\n    return res;\n}", "{\n    Tuple!(long,\
    \ long)[] result = new Tuple!(long, long)[lst.length];\n    for(int i = 0; i <\
    \ lst.length; ++i)\n    {\n        if(lst[i][0] == x)\n        {\n           \
    \ result[i] = Tuple!(lst[i][0], lst[i][1]);\n        }\n    }\n    Arrays.sort(result,\
    \ (x, y) => y._1 - x._1);\n    Arrays.sort(result, (x, y) => y._2 - x._2);\n \
    \   return result;\n}", "{\n    Tuple!(long, long)[] ret = new Tuple!(long, long)[0];\n\
    \    foreach(row: lst, i: 0) {\n        foreach(col: row, j: 0) {\n          \
    \  if(col == x) {\n                ret.add((i, j));\n            }\n        }\n\
    \    }\n    sort(ret);\n    return ret;\n}", "{\n    long n = lst.len();\n   \
    \ long m = lst[0].len();\n    long result[][] = new long[n][m];\n    long i, j,\
    \ k;\n    for(i = 0; i < n; i++)\n    {\n        for(j = 0; j < m; j++)\n    \
    \    {\n            if(lst[i][j] == x)\n            {\n                for(k =\
    \ 0; k < m; k++)\n                {\n                    result[i][k] = j;\n \
    \               }\n            }\n        }\n    }\n    \n    Arrays.sort(result,\
    \ (a, b) => (a[0] > b[0]) ? 1 : ((b[0] > a[0]) ? -1 : 0));\n    Arrays.sort(result,\
    \ (a, b) => (a[1] > b[1]) ? 1 : ((b[1] > a[1]) ? -1 : 0));\n    \n    return result;\n\
    }", "{\n    long[] res = new long[lst[0].Length];\n    for(int i = 0; i < lst[0].Length;\
    \ i++)\n    {\n        res[i] = lst[0][i];\n    }\n    for(int i = 1; i < lst.Length;\
    \ i++)\n    {\n        for(int j = 0; j < lst[i].Length; j++)\n        {\n   \
    \         if(res[j] == x)\n            {\n                Tuple!(long, long)[]\
    \ ret = new Tuple!(long, long)[lst[i].Length];\n                for(int k = 0;\
    \ k < lst[i].Length; k++)\n                {\n                    ret[k] = Tuple!(long,\
    \ long)[i, k];\n                }\n                return ret;\n            }\n\
    \        }\n    }\n    return null;\n}", "{\n    long n = lst.length;\n    long\
    \ m = lst[0].length;\n    long[][] res = new long[n][m];\n    for(int i = 0; i\
    \ < n; i++)\n    {\n        for(int j = 0; j < m; j++)\n        {\n          \
    \  if(lst[i][j] == x)\n            {\n                res[i][j] = 1;\n       \
    \         break;\n            }\n        }\n    }\n    Arrays.sort(res);\n   \
    \ Arrays.sort(res, (a, b) -> {\n        if(a[0] == b[0])\n            return a[1]\
    \ - b[1];\n        return a[0] - b[0];\n    });\n    return res;\n}", "{\n   \
    \ long n = lst.length;\n    long m = lst[0].length;\n    long i = 0;\n    long\
    \ j = 0;\n    long k = 0;\n    long l = 0;\n    long m1 = m;\n    long n1 = n;\n\
    \    long m2 = m;\n    long n2 = n;\n    long m3 = m;\n    long n3 = n;\n    long\
    \ m4 = m;\n    long n4 = n;\n    long m5 = m;\n    long n5 = n;\n    long m6 =\
    \ m;\n    long n6 = n;\n    long m7 = m;\n    long n7 = n;\n    long m8 = m;\n\
    \    long n8 = n;\n    long m9 = m;\n    long n9 = n;\n    long m10 = m;\n   \
    \ long n10 = n;\n    long m11 = m;\n    long n11 = n;\n    long m12 = m;\n   \
    \ long n12 = n;\n    long m13 = m;\n    long n13 = n;\n    long m14 = m;\n   \
    \ long n14 = n;\n    long m15 = m;\n    long n15 = n;\n    long m16 = m;\n   \
    \ long n16 = n;\n    long m17 = m;\n    long n17 = n;\n    long m18 = m;\n   \
    \ long n18 = n;\n    long m19 = m;\n    long n19 = n;\n    long m20 = m;\n   \
    \ long n20 = n;\n    long m21 = m;\n    long n21 = n;\n    long m22 = m;\n   \
    \ long n22 = n;\n    long m23 = m;\n    long n23 = n;\n    long m24 = m;\n   \
    \ long n24 = n;\n    long m25 = m;\n    long n25 = n;\n    long m26 = m;\n   \
    \ long n26 = n;\n    long m27 = m;\n    long n27 = n;\n    long m28 = m;\n   \
    \ long n28 = n;\n    long m29 = m;\n    long n29 = n;\n    long m30 = m;\n   \
    \ long n30 = n;\n    long m31 = m;\n    long n31 = n;\n    long m32 = m;\n   \
    \ long n32 = n;\n    long m33 = m;\n    long n33 = n;\n    long m34 = m;\n   \
    \ long n34 = n;\n    long m35 = m;\n    long n35 = n;\n    long m36 = m;\n   \
    \ long n36 = n;\n    ", "{\n    Tuple!(long, long)[] res = new Tuple!(long, long)[0];\n\
    \    foreach(row: lst, i: 0) \n    {\n        foreach(col: row, j: 0) \n     \
    \   {\n            if(col == x) \n            {\n                res[res.length]\
    \ = Tuple!(i, j);\n            }\n        }\n    }\n    sort(res);\n    return\
    \ res;\n}", "{\n    Tuple!(long, long)[] res = null;\n    foreach(row,lst)\n \
    \   {\n        foreach(col,row)\n        {\n            if(col == x)\n       \
    \     {\n                res = Tuple!(long, long)[](row,col);\n              \
    \  break;\n            }\n        }\n    }\n    return res;\n}", "{\n    Tuple!(long,\
    \ long)[] result = new Tuple!(long, long)[lst.length];\n    \n    for(int i =\
    \ 0; i < lst.length; i++)\n    {\n        if(lst[i][0] == x)\n        {\n    \
    \        result[i] = new Tuple!(lst[i][0], lst[i][1]);\n        }\n    }\n   \
    \ \n    for(int i = 0; i < lst.length; i++)\n    {\n        if(lst[i][1] > x)\n\
    \        {\n            result[i] = new Tuple!(lst[i][0], lst[i][1] - 1);\n  \
    \      }\n    }\n    \n    for(int i = 0; i < lst.length; i++)\n    {\n      \
    \  if(lst[i][1] < x)\n        {\n            result[i] = new Tuple!(lst[i][0],\
    \ lst[i][1] + 1);\n        }\n    }\n    \n    return result;\n}", "{\n    Tuple!(long,\
    \ long)[] result = new Tuple!(long, long)[0];\n    \n    foreach(row: lst, row_index:\
    \ 0) \n    {\n        foreach(column: row, column_index: 0) \n        {\n    \
    \        if(column_index == x) \n            {\n                foreach(coor:\
    \ row, coor_index: 0) \n                {\n                    if(coor_index ==\
    \ row_index) \n                    {\n                        result.push(Tuple!(long,\
    \ long)((row_index, column_index)));\n                    }\n                }\n\
    \            }\n        }\n    }\n    \n    sort(result, (a, b) => a.1 < b.1);\n\
    \    sort(result, (a, b) => a.2 < b.2);\n    \n    return result;\n}", "{\n  \
    \  long n = lst.len();\n    long m = lst[0].len();\n    long[][] res = new long[n][m];\n\
    \    for(int i = 0; i < n; ++i)\n    {\n        for(int j = 0; j < m; ++j)\n \
    \       {\n            if(lst[i][j] == x)\n            {\n                res[i][j]\
    \ = 1;\n            }\n        }\n    }\n    Arrays.sort(res, (a, b) -> {\n  \
    \      if(a[0] == b[0])\n        {\n            return a[1] - b[1];\n        }\n\
    \        return a[0] - b[0];\n    });\n    return res;\n}", "{\n    long rows\
    \ = 0;\n    long cols = 0;\n    for(long i = 0; i < lst.length; ++i)\n    {\n\
    \        if(lst[i][0] == x)\n        {\n            rows = i;\n            break;\n\
    \        }\n    }\n    for(long i = 0; i < lst.length; ++i)\n    {\n        if(lst[i][1]\
    \ == x)\n        {\n            cols = i;\n            break;\n        }\n   \
    \ }\n    Tuple!(long, long)[] ret = new Tuple!(long, long)[rows];\n    for(long\
    \ i = 0; i < rows; ++i)\n    {\n        ret[i] = new Tuple!(long, long)[cols];\n\
    \    }\n    for(long i = 0; i < rows; ++i)\n    {\n        for(long j = 0; j <\
    \ cols; ++j)\n        {\n            ret[i][j] = new Tuple!(long, long)();\n \
    \       }\n    }\n    for(long i = 0; i < lst.length; ++i)\n    {\n        if(lst[i][0]\
    \ == x)\n        {\n            for(long j = 0; j < cols; ++j)\n            {\n\
    \                ret[i][j] = new Tuple!(long, long)();\n            }\n      \
    \  }\n    }\n    return ret;\n}", "{\n    long n = lst.length;\n    long m = lst[0].length;\n\
    \    long result[][] = new long[n][m];\n    \n    for(int i = 0; i < n; i++)\n\
    \    {\n        for(int j = 0; j < m; j++)\n        {\n            if(lst[i][j]\
    \ == x)\n            {\n                result[i][j] = 1;\n                break;\n\
    \            }\n        }\n    }\n    \n    for(int i = 0; i < n; i++)\n    {\n\
    \        for(int j = 0; j < m; j++)\n        {\n            if(result[i][j] ==\
    \ 1)\n            {\n                for(int k = j + 1; k < m; k++)\n        \
    \        {\n                    if(lst[i][k] > lst[i][j])\n                  \
    \  {\n                        result[i][j] = lst[i][k];\n                    \
    \    break;\n                    }\n                }\n                break;\n\
    \            }\n        }\n    }\n    \n    for(int i = 0; i < n; i++)\n    {\n\
    \        for(int j = 0; j < m; j++)\n        {\n            if(result[i][j] ==\
    \ 1)\n            {\n                for(int k = j + 1; k < m; k++)\n        \
    \        {\n                    if(lst[i][k] > lst[i][j])\n                  \
    \  {\n                        result[i][j] = lst[i][k];\n                    \
    \    break;\n                    }\n                }\n                break;\n\
    \            }\n        }\n    }\n    \n    for(int i = 0; i < n; i++)\n    {\n\
    \        for(int j = 0; j < m; j++)\n        {\n            if(result[i][j] ==\
    \ 1)\n            {\n                for(int k = j + 1; k < m; k++)\n        \
    \        {\n                    if(lst[i][k] > lst[i][j])\n                  \
    \  {\n                        result[i][j] = lst[i][k];\n                    \
    \    break;\n                    }\n                }\n                break;\n\
    \            }\n        }\n    }\n    \n    for(int i = 0; i < n; i++)\n    {\n\
    \        for(int j = 0; j < m; j++)\n        {\n            if(result[i][j] ==\
    \ 1)\n            {\n                for(int k = j + 1; k < m; k++)\n        \
    \        {\n                    if(lst[i][k] > lst[i][j])\n                  \
    \  {\n                        result[i][j] = lst[i][k];\n                    \
    \    break;\n                    }\n                }\n                break;\n\
    \            }\n        }\n    }\n    \n    for(int i = 0; i < n; i++)\n    {\n\
    \        for(int j = 0; j < m; j++)\n        {\n            if(result[i][j] ==\
    \ 1)\n            {\n                for(int k = j + 1; k < m; k++)\n        \
    \        {\n                    if(lst[i][k] > lst[i][j])\n                  \
    \  {\n                        result[i][j] = lst[i][k];\n                    \
    \    break;\n                    }\n                }\n                break;\n\
    \            }\n        }\n    }\n    \n    for(int i = 0; i < n; i++)\n    {\n\
    \        for(int j = 0; j < m; j++)\n        {\n            if(result[i][j] ==\
    \ 1)\n            {\n                for(int k = j + 1; k < m; k++)\n        \
    \        {\n                    if(lst[i][k] > lst[i][j])\n                  \
    \  {\n                        result[i][j] = lst[i][k", "{\n    long n = lst.length;\n\
    \    long m = lst[0].length;\n    long[] res = new long[(m * n) + 1];\n    long\
    \ i = 0, j = 0;\n    for(i = 0; i < n; i++) {\n        for(j = 0; j < m; j++)\
    \ {\n            if(lst[i][j] == x) {\n                res[i * m + j] = i;\n \
    \               res[i * m + j + 1] = j;\n            }\n        }\n    }\n   \
    \ sort(res, 0, res.length);\n    return res;\n}", "{\n    Tuple!(long, long)[]\
    \ result = new Tuple!(long, long)[lst.length];\n    for(int i = 0; i < lst.length;\
    \ i++)\n    {\n        if(lst[i][0] == x)\n        {\n            result[i] =\
    \ new Tuple!(lst[i][0], lst[i][1]);\n        }\n    }\n    Arrays.sort(result);\n\
    \    return result;\n}", "{\n    Tuple!(long, long)[] result = null;\n    \n \
    \   foreach(row: lst, row_index: 0) \n    {\n        foreach(column: row, column_index:\
    \ 0) \n        {\n            if(column_index == x) \n            {\n        \
    \        result = Tuple!(long, long)[Tuple!(row_index, column_index)];\n     \
    \       }\n        }\n    }\n    \n    return result;\n}", "{\n    Tuple!(long,\
    \ long)[] res = null;\n    foreach(i : 0..lst.len())\n    {\n        foreach(j\
    \ : 0..lst[i].len())\n        {\n            if(lst[i][j] == x)\n            {\n\
    \                res = Tuple!(long, long)[](Tuple!(i + 1, j), Tuple!(i + 1, j\
    \ + 1));\n            }\n        }\n    }\n    \n    return res;\n}", "{\n   \
    \ Tuple!(long, long)[] res = new Tuple!(long, long)[0];\n    for(long i = 0; i\
    \ < lst.length; ++i)\n    {\n        if(lst[i][0] == x)\n        {\n         \
    \   Tuple!(long, long)[] row = new Tuple!(long, long)[i];\n            for(long\
    \ j = 0; j < lst[i][1]; ++j)\n            {\n                row.push(new Tuple!(long,\
    \ long)[lst[i][j]]);\n            }\n            res.push(row);\n        }\n \
    \   }\n    return res;\n}", "{\n    Tuple!(long, long)[] res = null;\n    foreach(row:\
    \ lst, row_index: 0) \n    {\n        foreach(col: row, col_index: 0) \n     \
    \   {\n            if(col == x) \n            {\n                res = Tuple!(long,\
    \ long)[](row_index, col_index);\n            }\n        }\n    }\n    return\
    \ res;\n}", "{\n    Tuple!(long, long)[] result = new Tuple!(long, long)[lst.length];\n\
    \    for(int i = 0; i < lst.length; i++)\n    {\n        if(lst[i][0] == x)\n\
    \        {\n            result[i] = Tuple!(lst[i][0], lst[i][1]);\n        }\n\
    \    }\n    Arrays.sort(result);\n    return result;\n}", "{\n    Tuple!(long,\
    \ long)[] res = new Tuple!(long, long)[0];\n    \n    for(int i = 0; i < lst.length;\
    \ i++) \n    {\n        if(lst[i][0] == x) \n        {\n            Tuple!(long,\
    \ long)[] row = new Tuple!(long, long)[lst[i].length];\n            for(int j\
    \ = 0; j < lst[i].length; j++) \n            {\n                row[j] = (lst[i][j],\
    \ j);\n            }\n            \n            Arrays.sort(row);\n          \
    \  \n            for(int j = 0; j < row.length; j++) \n            {\n       \
    \         res[res.length] = row[j];\n            }\n        }\n    }\n    \n \
    \   return res;\n}", "{\n    long[] result = new long[lst.Length];\n    for(int\
    \ i = 0; i < lst.Length; i++)\n    {\n        result[i] = lst[i][0];\n    }\n\
    \    Array.Sort(result);\n    Array.Sort(result, (x, y) => { return y - x; });\n\
    \    Array.Sort(result, (x, y) => { return x - y; });\n    for(int i = 0; i <\
    \ lst.Length; i++)\n    {\n        if(result[i] == x)\n        {\n           \
    \ return Tuple!(long[], long[])[](Tuple!(long[], long[])[](Tuple!(0, i), Tuple!(0,\
    \ i + 1)), Tuple!(0, i + 1));\n        }\n    }\n    return Tuple!(long[], long[])[](Tuple!(0,\
    \ 0), Tuple!(0, 0));\n}", "{\n    Tuple!(long, long)[] result = new Tuple!(long,\
    \ long)[lst.length];\n    for(int i = 0; i < lst.length; ++i)\n    {\n       \
    \ if(lst[i][0] == x)\n        {\n            result[i] = new Tuple!(lst[i][0],\
    \ lst[i][1]);\n        }\n    }\n    \n    for(int i = 0; i < lst.length; ++i)\n\
    \    {\n        if(lst[i][1] > x)\n        {\n            for(int j = i; j < lst.length;\
    \ ++j)\n            {\n                if(lst[j][1] > x)\n                {\n\
    \                    result[i] = new Tuple!(lst[i][0], lst[j][1]);\n         \
    \           break;\n                }\n            }\n        }\n    }\n    \n\
    \    for(int i = 0; i < lst.length; ++i)\n    {\n        if(lst[i][1] < x)\n \
    \       {\n            for(int j = i; j < lst.length; ++j)\n            {\n  \
    \              if(lst[j][1] < x)\n                {\n                    result[i]\
    \ = new Tuple!(lst[i][0], lst[j][1]);\n                    break;\n          \
    \      }\n            }\n        }\n    }\n    \n    for(int i = 0; i < lst.length;\
    \ ++i)\n    {\n        if(lst[i][1] > x)\n        {\n            for(int j = i;\
    \ j < lst.length; ++j)\n            {\n                if(lst[j][1] > x)\n   \
    \             {\n                    result[i] = new Tuple!(lst[i][0], lst[j][1]);\n\
    \                    break;\n                }\n            }\n        }\n   \
    \ }\n    \n    for(int i = 0; i < lst.length; ++i)\n    {\n        if(lst[i][1]\
    \ < x)\n        {\n            for(int j = i; j < lst.length; ++j)\n         \
    \   {\n                if(lst[j][1] < x)\n                {\n                \
    \    result[i] = new Tuple!(lst[i][0], lst[j][1]);\n                    break;\n\
    \                }\n            }\n        }\n    }\n    \n    for(int i = 0;\
    \ i < lst.length; ++i)\n    {\n        if(lst[i][1] > x)\n        {\n        \
    \    for(int j = i; j < lst.length; ++j)\n            {\n                if(lst[j][1]\
    \ > x)\n                {\n                    result[i] = new Tuple!(lst[i][0],\
    \ lst[j][1]);\n                    break;\n                }\n            }\n\
    \        }\n    }\n    \n    for(int i = 0; i < lst.length; ++i)\n    {\n    \
    \    if(lst[i][1] < x)\n        {\n            for(int j = i; j < lst.length;\
    \ ++j)\n            {\n                if(lst[j][1] < x)\n                {\n\
    \                    result[i] = new Tuple!(lst[i][0], lst[j][1]);\n         \
    \           break;\n                }\n            }\n        }\n    }\n    \n\
    \    for(int i = 0; i < lst.length; ++i)\n    {\n        if(lst[i][1] > x)\n \
    \       {\n            for(int j = i; j < lst.length; ++j)\n            {\n  \
    \              if(lst[j][1] > x)\n                {\n                    result[i]\
    \ = new Tuple!(lst[i][0], lst[j][1]);\n                    break;\n          \
    \      }\n            }\n        }", "{\n    long n = lst.length;\n    long m\
    \ = lst[0].length;\n    long result[][] = new long[n][m];\n    for(int i = 0;\
    \ i < n; i++)\n    {\n        for(int j = 0; j < m; j++)\n        {\n        \
    \    if(lst[i][j] == x)\n            {\n                result[i][j] = 1;\n  \
    \          }\n        }\n    }\n    \n    for(int i = 0; i < n; i++)\n    {\n\
    \        for(int j = 0; j < m; j++)\n        {\n            if(result[i][j] ==\
    \ 1)\n            {\n                long temp[][] = new long[m][2];\n       \
    \         for(int k = 0; k < m; k++)\n                {\n                    temp[k][0]\
    \ = (long)i;\n                    temp[k][1] = (long)j;\n                }\n \
    \               sort(temp, false);\n                for(int k = 0; k < m; k++)\n\
    \                {\n                    result[i][k] = temp[k][0] * m + temp[k][1];\n\
    \                }\n            }\n        }\n    }\n    \n    for(int i = 0;\
    \ i < n; i++)\n    {\n        for(int j = 0; j < m; j++)\n        {\n        \
    \    if(result[i][j] == 1)\n            {\n                long temp[][] = new\
    \ long[m][2];\n                for(int k = 0; k < m; k++)\n                {\n\
    \                    temp[k][0] = (long)i;\n                    temp[k][1] = (long)j;\n\
    \                }\n                sort(temp, true);\n                for(int\
    \ k = 0; k < m; k++)\n                {\n                    result[i][j] = temp[k][0]\
    \ * m + temp[k][1];\n                }\n            }\n        }\n    }\n    \n\
    \    for(int i = 0; i < n; i++)\n    {\n        for(int j = 0; j < m; j++)\n \
    \       {\n            if(result[i][j] == 1)\n            {\n                long\
    \ temp[][] = new long[m][2];\n                for(int k = 0; k < m; k++)\n   \
    \             {\n                    temp[k][0] = (long)i;\n                 \
    \   temp[k][1] = (long)j;\n                }\n                sort(temp, true);\n\
    \                for(int k = 0; k < m; k++)\n                {\n             \
    \       result[i][j] = temp[k][0] * m + temp[k][1];\n                }\n     \
    \       }\n        }\n    }\n    \n    for(int i = 0; i < n; i++)\n    {\n   \
    \     for(int j = 0; j < m; j++)\n        {\n            if(result[i][j] == 1)\n\
    \            {\n                long temp[][] = new long[m][2];\n            \
    \    for(int k = 0; k < m; k++)\n                {\n                    temp[k][0]\
    \ = (long)i;\n                    temp[k][1] = (long)j;\n                }\n \
    \               sort(temp, true);\n                for(int k = 0; k < m; k++)\n\
    \                {\n                    result[i][j] = temp[k][0] * m + temp[k][1];\n\
    \                }\n            }\n        }\n    }\n    \n    for(int i = 0;\
    \ i < n; i++)\n    {\n        for(int j = 0; j < m; j++)\n        {\n", "{\n \
    \   Tuple!(long, long)[] result = new Tuple!(long, long)[];\n    \n    for(int\
    \ i = 0; i < lst.length; ++i)\n    {\n        if(lst[i][0] == x)\n        {\n\
    \            for(int j = 0; j < lst[i].length; ++j)\n            {\n         \
    \       if(lst[i][j] == x)\n                {\n                    result.add(new\
    \ Tuple!(i, j));\n                }\n            }\n        }\n    }\n    \n \
    \   result.sort(function(a, b){return b._1 - a._1});\n    result.sort(function(a,\
    \ b){return a._2 - b._2});\n    \n    return result;\n}", "{\n    long n = lst.length;\n\
    \    long m = lst[0].length;\n    long[][] res = new long[n][m];\n    for(int\
    \ i = 0; i < n; i++)\n    {\n        for(int j = 0; j < m; j++)\n        {\n \
    \           if(lst[i][j] == x)\n            {\n                res[i][j] = 1;\n\
    \            }\n        }\n    }\n    return Tuple!(long, long)[](res, m);\n}",
  "{\n    long n = lst.length;\n    long[] res = new long[n];\n    for(int i = 0;\
    \ i < n; i++)\n    {\n        if(lst[i][0] == x)\n        {\n            res[i]\
    \ = i;\n            break;\n        }\n    }\n    return Tuple!(long, long)[res];\n\
    }", "{\n    long n = lst.lenght;\n    long m = lst[0].lenght;\n    long i, j,\
    \ k;\n    Tuple!(long, long)[] res = new Tuple!(long, long)[n];\n    for(i = 0;\
    \ i < n; i++)\n    {\n        for(j = 0; j < m; j++)\n        {\n            if(lst[i][j]\
    \ == x)\n            {\n                res[i] = Tuple!(long, long)[i, j];\n \
    \               break;\n            }\n        }\n    }\n    for(i = 0; i < n;\
    \ i++)\n    {\n        for(j = 0; j < m; j++)\n        {\n            if(lst[i][j]\
    \ > x)\n            {\n                res[i] = Tuple!(long, long)[i, j];\n  \
    \              break;\n            }\n        }\n    }\n    return res;\n}", "{\n\
    \    Tuple!(long, long)[] ans;\n    \n    foreach(i : 0..lst.len())\n    {\n \
    \       foreach(j : 0..lst[i].len())\n        {\n            if(lst[i][j] == x)\n\
    \            {\n                ans = Tuple!(long, long)[i, j];\n            \
    \    break;\n            }\n        }\n    }\n    \n    return ans;\n}", "{\n\
    \    long n = lst.len();\n    long m = lst[0].len();\n    long result[][] = new\
    \ long[n][m];\n    long i, j;\n    \n    for (i = 0; i < n; i++)\n    {\n    \
    \    for (j = 0; j < m; j++)\n        {\n            if (lst[i][j] == x)\n   \
    \         {\n                result[i][j] = 1;\n                break;\n     \
    \       }\n        }\n    }\n    \n    Tuple!(long, long)[] res = new Tuple!(long,\
    \ long)[result.len()];\n    \n    for (i = 0; i < result.len(); i++)\n    {\n\
    \        res[i] = new Tuple!(long, long)[result[i].len()];\n        for (j = 0;\
    \ j < result[i].len(); j++)\n        {\n            res[i][j] = new Tuple!(long,\
    \ long)(0, 0);\n        }\n    }\n    \n    for (i = 0; i < n; i++)\n    {\n \
    \       for (j = 0; j < m; j++)\n        {\n            if (result[i][j] == 1)\n\
    \            {\n                res[i][j] = new Tuple!(long, long)(i, j);\n  \
    \          }\n        }\n    }\n    \n    sort!(res, (a, b) => (a.1, b.1), (a,\
    \ b) => (a.2, b.2), (a, b) => (a.3, b.3));\n    \n    return res;\n}", "{\n  \
    \  Tuple!(long, long)[] res = null;\n    foreach(row: lst, row_index: 0) \n  \
    \  {\n        foreach(col: row, col_index: 0) \n        {\n            if(col\
    \ == x) \n            {\n                res = Tuple!(long, long)[](row_index,\
    \ col_index);\n                break;\n            }\n        }\n        if(res\
    \ != null) break;\n    }\n    return res;\n}", "{\n    long[] res = new long[lst[0].length];\n\
    \    for(int i = 0; i < lst.length; i++) \n    {\n        for(int j = 0; j < lst[i].length;\
    \ j++) \n        {\n            if(lst[i][j] == x) \n            {\n         \
    \       res[i] = j;\n                break;\n            }\n        }\n    }\n\
    \    return Tuple!(long, long)[](res, res);\n}", "{\n    Tuple!(long, long)[]\
    \ result = new Tuple!(long, long)[lst.length];\n    for(int i = 0; i < lst.length;\
    \ i++)\n    {\n        if(lst[i][0] == x)\n        {\n            result[i] =\
    \ new Tuple!(lst[i][0], lst[i][1]);\n        }\n    }\n    \n    for(int i = 0;\
    \ i < lst.length; i++)\n    {\n        for(int j = 0; j < lst[i][1]; j++)\n  \
    \      {\n            if(lst[i][0] == j)\n            {\n                result[i]\
    \ = new Tuple!(lst[i][0], lst[i][1]);\n            }\n        }\n    }\n    \n\
    \    for(int i = 0; i < lst.length; i++)\n    {\n        for(int j = 0; j < lst[i][1];\
    \ j++)\n        {\n            for(int k = 0; k < lst[i][1]; k++)\n          \
    \  {\n                if(lst[i][0] == k)\n                {\n                \
    \    result[i] = new Tuple!(lst[i][0], lst[i][1]);\n                }\n      \
    \      }\n        }\n    }\n    \n    for(int i = 0; i < lst.length; i++)\n  \
    \  {\n        for(int j = 0; j < lst[i][1]; j++)\n        {\n            for(int\
    \ k = 0; k < lst[i][1]; k++)\n            {\n                for(int l = 0; l\
    \ < lst[i][1]; l++)\n                {\n                    if(lst[i][0] == l)\n\
    \                    {\n                        result[i] = new Tuple!(lst[i][0],\
    \ lst[i][1]);\n                    }\n                }\n            }\n     \
    \   }\n    }\n    \n    for(int i = 0; i < lst.length; i++)\n    {\n        for(int\
    \ j = 0; j < lst[i][1]; j++)\n        {\n            for(int k = 0; k < lst[i][1];\
    \ k++)\n            {\n                for(int l = 0; l < lst[i][1]; l++)\n  \
    \              {\n                    for(int m = 0; m < lst[i][1]; m++)\n   \
    \                 {\n                        if(lst[i][0] == m)\n            \
    \            {\n                            result[i] = new Tuple!(lst[i][0],\
    \ lst[i][1]);\n                        }\n                    }\n            \
    \    }\n            }\n        }\n    }\n    \n    for(int i = 0; i < lst.length;\
    \ i++)\n    {\n        for(int j = 0; j < lst[i][1]; j++)\n        {\n       \
    \     for(int k = 0; k < lst[i][1]; k++)\n            {\n                for(int\
    \ l = 0; l < lst[i][1]; l++)\n                {\n                    for(int m\
    \ = 0; m < lst[i][1]; m++)\n                    {\n                        for(int\
    \ n = 0; n < lst[i][1]; n++)\n                        {\n                    \
    \        if(lst[i][0] == n)\n                            {\n                 \
    \               result[i] = new Tuple!(lst[i][0], lst[i][1]);\n              \
    \              }\n                        }\n                    }\n         \
    \       }\n            }\n        }\n    }\n    \n    for(int i = 0; i < lst.length;\
    \ i++)\n    {\n        for(int j = 0; j < lst[i][1]; j++)\n        {\n       \
    \     for(int k = 0; k < lst[i][1]; k++)\n            {\n                for(int\
    \ l = 0; l < lst[i][1]; l", "{\n    long n = lst.length;\n    long m = lst[0].length;\n\
    \    long[] res = new long[(n + 1) * (m + 1)];\n    \n    for(int i = 0; i < n;\
    \ i++)\n    {\n        for(int j = 0; j < m; j++)\n        {\n            if(lst[i][j]\
    \ == x)\n            {\n                res[(i * m) + j] = i;\n              \
    \  res[(i * m) + j + 1] = j;\n            }\n        }\n    }\n    \n    Arrays.sort(res);\n\
    \    \n    Tuple!(long, long)[] res = new Tuple!(long, long)[(res.length / 2)\
    \ * (res.length / 2)];\n    \n    for(int i = 0; i < res.length / 2; i++)\n  \
    \  {\n        for(int j = 0; j < res.length / 2; j++)\n        {\n           \
    \ res[(i * res.length / 2) + j] = new Tuple!(long, long)((res[i + j * res.length\
    \ / 2]), res[i + j * res.length / 2 + 1]);\n        }\n    }\n    \n    return\
    \ res;\n}", "{\n    Tuple!(long, long)[] res = new Tuple!(long, long)[0];\n  \
    \  foreach(row: lst, i: 0) \n    {\n        foreach(col: row, j: 0) \n       \
    \ {\n            if(col == x) \n            {\n                Tuple!(long, long)[]\
    \ rowRes = new Tuple!(long, long)[row.Length];\n                foreach(colRes:\
    \ row, k: 0) \n                {\n                    rowRes[k] = Tuple!(long,\
    \ long)[i, k];\n                }\n                res = append(res, rowRes);\n\
    \            }\n        }\n    }\n    return res;\n}", "{\n    Tuple!(long, long)[]\
    \ res = null;\n    foreach(row: lst, row_index: 0) \n    {\n        foreach(col:\
    \ row, col_index: 0) \n        {\n            if(col == x) \n            {\n \
    \               res = Tuple!(long, long)[](row_index, col_index);\n          \
    \  }\n        }\n    }\n    return res;\n}", "{\n    long n = lst.length;\n  \
    \  long m = lst[0].length;\n    long[][] res = new long[n][m];\n    for(int i\
    \ = 0; i < n; i++)\n    {\n        for(int j = 0; j < m; j++)\n        {\n   \
    \         if(lst[i][j] == x)\n            {\n                res[i][j] = 1;\n\
    \            }\n        }\n    }\n    Arrays.sort(res);\n    Arrays.sort(res,\
    \ (a, b) -> b[0] - a[0]);\n    return res;\n}", "{\n    long n = lst.length;\n\
    \    long m = lst[0].length;\n    long i, j, k;\n    Tuple!(long, long)[] res\
    \ = new Tuple!(long, long)[n];\n    \n    for(i = 0; i < n; i++)\n    {\n    \
    \    for(j = 0; j < m; j++)\n        {\n            if(lst[i][j] == x)\n     \
    \       {\n                res[i] = Tuple!(long, long)[i, j];\n              \
    \  break;\n            }\n        }\n    }\n    \n    for(i = 0; i < n; i++)\n\
    \    {\n        for(j = 0; j < m; j++)\n        {\n            if(lst[i][j] >\
    \ x)\n            {\n                res[i] = Tuple!(long, long)[i, j];\n    \
    \            break;\n            }\n        }\n    }\n    \n    for(i = 0; i <\
    \ n; i++)\n    {\n        for(j = 0; j < m; j++)\n        {\n            if(lst[i][j]\
    \ < x)\n            {\n                res[i] = Tuple!(long, long)[i, j];\n  \
    \              break;\n            }\n        }\n    }\n    \n    return res;\n\
    }", "{\n    Tuple!(long, long)[] result = new Tuple!(long, long)[lst.length];\n\
    \    for(int i = 0; i < lst.length; i++){\n        if(lst[i][0] == x){\n     \
    \       result[i] = Tuple!(lst[i][0], lst[i][1]);\n        }\n    }\n    Arrays.sort(result);\n\
    \    return result;\n}", "{\n    Tuple!(long, long)[] res = null;\n    foreach(row,lst)\n\
    \    {\n        foreach(col,row)\n        {\n            if(col == x)\n      \
    \      {\n                res = Tuple!(long, long)[Tuple!(0, col), Tuple!(1, col)];\n\
    \                break;\n            }\n        }\n        if(res != null)\n \
    \           break;\n    }\n    return res;\n}", "{\n    Tuple!(long, long)[] result\
    \ = new Tuple!(long, long)[lst.length];\n    for(int i = 0; i < lst.length; ++i)\n\
    \    {\n        if(lst[i][0] == x)\n        {\n            result[i] = Tuple!(lst[i][0],\
    \ lst[i][1]);\n        }\n    }\n    \n    Arrays.sort(result, (a, b) => a.first\
    \ > b.first);\n    Arrays.sort(result, (a, b) => a.second > b.second);\n    \n\
    \    return result;\n}", "{\n    Tuple!(long, long)[] ans;\n    \n    for(int\
    \ i = 0; i < lst.length; ++i)\n    {\n        if(lst[i][0] == x)\n        {\n\
    \            ans = Tuple!(long, long)[Tuple!(i + 1, lst[i][1])];\n           \
    \ break;\n        }\n    }\n    \n    return ans;\n}", "{\n    long n = lst.length;\n\
    \    long m = lst[0].length;\n    long[][] res = new long[n][m];\n    for(int\
    \ i = 0; i < n; i++)\n    {\n        for(int j = 0; j < m; j++)\n        {\n \
    \           if(lst[i][j] == x)\n            {\n                res[i][j] = 1;\n\
    \            }\n        }\n    }\n    \n    Arrays.sort(res);\n    Arrays.sort(res,\
    \ (a, b) => b[0] - a[0]);\n    \n    for(int i = 0; i < n; i++)\n    {\n     \
    \   Arrays.sort(res[i], (a, b) => b[1] - a[1]);\n    }\n    \n    return res;\n\
    }", "{\n    Tuple!(long, long)[] ret = new Tuple!(long, long)[0];\n    \n    foreach(row:\
    \ lst, row_index: 0) \n    {\n        foreach(col: row, col_index: 0) \n     \
    \   {\n            if(col == x) \n            {\n                ret[ret.length]\
    \ = Tuple!(row_index, col_index);\n            }\n        }\n    }\n    \n   \
    \ sort(ret, (x, y) => Tuple!(x._1, y._1));\n    sort(ret, (x, y) => Tuple!(y._1,\
    \ x._1));\n    \n    return ret;\n}", "{\n    Tuple!(long, long)[] result = new\
    \ Tuple!(long, long)[0];\n    for(int i = 0; i < lst.Length; i++)\n    {\n   \
    \     if(lst[i][0] == x)\n        {\n            Tuple!(long, long)[] row = new\
    \ Tuple!(long, long)[i];\n            for(int j = 0; j < lst[i].Length; j++)\n\
    \            {\n                if(lst[i][j] > x)\n                {\n       \
    \             Tuple!(long, long)[] col = new Tuple!(long, long)[j];\n        \
    \            row.Add(col);\n                }\n            }\n            result.Add(row);\n\
    \        }\n    }\n    result.Sort();\n    return result;\n}", "{\n    Tuple!(long,\
    \ long)[] ans;\n    \n    foreach(i : 0..lst.len())\n    {\n        if(lst[i][0]\
    \ == x)\n        {\n            ans = Tuple!(long, long)[Tuple!(i + 1, lst[i][1])];\n\
    \            break;\n        }\n    }\n    \n    return ans;\n}", "{\n    Tuple!(long,\
    \ long)[] result = new Tuple!(long, long)[];\n    \n    for(int i = 0; i < lst.length;\
    \ i++)\n    {\n        if(lst[i][0] == x)\n        {\n            result.push((lst[i][1],\
    \ lst[i][2]));\n        }\n    }\n    \n    result.sort(function(a, b){return\
    \ a[0] - b[0]});\n    result.sort(function(a, b){return a[1] - b[1]});\n    \n\
    \    return result;\n}", "{\n    long n = lst.length;\n    long m = lst[0].length;\n\
    \    long i, j, k;\n    \n    for(i = 0; i < n; i++)\n    {\n        for(j = 0;\
    \ j < m; j++)\n        {\n            if(lst[i][j] == x)\n            {\n    \
    \            Tuple!(long, long)[] res = new Tuple!(long, long)[(n*m)];\n     \
    \           for(k = 0; k < n*m; k++)\n                {\n                    res[k]\
    \ = new Tuple!(long, long)(i, j);\n                }\n                return res;\n\
    \            }\n        }\n    }\n    return null;\n}", "{\n    long rows = 0;\n\
    \    long cols = 0;\n    for(long i = 0; i < lst.length; ++i)\n    {\n       \
    \ if(lst[i][0] == x)\n        {\n            rows = i;\n            break;\n \
    \       }\n    }\n    for(long i = 0; i < lst.length; ++i)\n    {\n        if(lst[i][cols]\
    \ == x)\n        {\n            cols = i;\n            break;\n        }\n   \
    \ }\n    Tuple!(long, long)[] res = new Tuple!(long, long)[rows];\n    for(long\
    \ i = 0; i < rows; ++i)\n    {\n        res[i] = new Tuple!(long, long)[cols];\n\
    \        for(long j = 0; j < cols; ++j)\n        {\n            res[i][j] = new\
    \ Tuple!(long, long)();\n        }\n    }\n    return res;\n}", "{\n    long rows\
    \ = 0;\n    long cols = 0;\n    for(long i = 0; i < lst.Length; i++)\n    {\n\
    \        if(lst[i][0] == x)\n        {\n            rows++;\n        }\n     \
    \   else\n        {\n            cols++;\n        }\n    }\n    Tuple!(long, long)[]\
    \ res = new Tuple!(long, long)[rows];\n    long row = 0;\n    long col = 0;\n\
    \    for(long i = 0; i < lst.Length; i++)\n    {\n        if(lst[i][0] == x)\n\
    \        {\n            res[row][0] = row;\n            res[row][1] = col;\n \
    \           row++;\n        }\n        else\n        {\n            res[row][0]\
    \ = row;\n            res[row][1] = col;\n            col++;\n        }\n    }\n\
    \    return res;\n}", "{\n    long[] res = new long[lst.Length];\n    for(int\
    \ i = 0; i < lst.Length; i++)\n    {\n        if(lst[i][0] == x)\n        {\n\
    \            res[i] = lst[i][1];\n        }\n    }\n    return Tuple!(long, long)[](res,\
    \ lst.Length);\n}", "{\n    long rows = 0;\n    long cols = 0;\n    for(long i\
    \ = 0; i < lst.length; i++){\n        if(lst[i][0] == x){\n            rows++;\n\
    \        }\n        if(lst[i][1] == x){\n            cols++;\n        }\n    }\n\
    \    Tuple!(long, long)[] res = new Tuple!(long, long)[rows];\n    for(int i =\
    \ 0; i < rows; i++){\n        res[i] = new Tuple!(long, long)[cols];\n       \
    \ for(int j = 0; j < cols; j++){\n            res[i][j] = new Tuple!(long, long)();\n\
    \        }\n    }\n    for(int i = 0; i < lst.length; i++){\n        if(lst[i][0]\
    \ == x){\n            res[lst[i][0]][lst[i][1]] = new Tuple!(long, long)();\n\
    \            res[lst[i][0]][lst[i][1]][0] = i;\n            res[lst[i][0]][lst[i][1]][1]\
    \ = lst[i][1];\n        }\n        if(lst[i][1] == x){\n            res[lst[i][0]][lst[i][1]][2]\
    \ = i;\n            res[lst[i][0]][lst[i][1]][3] = lst[i][0];\n        }\n   \
    \ }\n    return res;\n}", "{\n    Tuple!(long, long)[] res = null;\n    foreach(row:\
    \ lst, row: row) \n    {\n        foreach(col: row, col: col) \n        {\n  \
    \          if(col == x) \n            {\n                res = Tuple!(long, long)[](row,\
    \ col);\n            }\n        }\n    }\n    return res;\n}", "{\n    Tuple!(long,\
    \ long)[] ret = new Tuple!(long, long)[lst.length];\n    for(int i = 0; i < lst.length;\
    \ i++)\n    {\n        if(lst[i][0] == x)\n        {\n            ret[i] = Tuple!(lst[i][0],\
    \ lst[i][1]);\n        }\n    }\n    Arrays.sort(ret);\n    return ret;\n}", "{\n\
    \    long n = lst.length;\n    long m = lst[0].length;\n    long i, j, k;\n  \
    \  Tuple!(long, long)[] res = new Tuple!(long, long)[n];\n    \n    for(i = 0;\
    \ i < n; i++)\n    {\n        for(j = 0; j < m; j++)\n        {\n            if(lst[i][j]\
    \ == x)\n            {\n                res[i] = Tuple!(long, long)[i, j];\n \
    \               break;\n            }\n        }\n    }\n    \n    for(i = 0;\
    \ i < n; i++)\n    {\n        for(j = 0; j < m; j++)\n        {\n            if(lst[i][j]\
    \ > x)\n            {\n                res[i] = Tuple!(long, long)[i, j];\n  \
    \              break;\n            }\n        }\n    }\n    \n    return res;\n\
    }", "{\n    long n = lst.length;\n    long m = lst[0].length;\n    long result[][]\
    \ = new long[n][m];\n    for(int i = 0; i < n; i++)\n    {\n        for(int j\
    \ = 0; j < m; j++)\n        {\n            if(lst[i][j] == x)\n            {\n\
    \                result[i][j] = 1;\n            }\n        }\n    }\n    Arrays.sort(result,\
    \ (a, b) -> {\n        return a[0] - b[0];\n    });\n    Arrays.sort(result, (a,\
    \ b) -> {\n        return b[1] - a[1];\n    });\n    \n    Tuple!(long, long)[]\
    \ res = new Tuple!(long, long)[result.length];\n    for(int i = 0; i < result.length;\
    \ i++)\n    {\n        res[i] = new Tuple!(long, long)[result[i].length];\n  \
    \      for(int j = 0; j < result[i].length; j++)\n        {\n            res[i][j]\
    \ = new Tuple!(long, long)();\n            res[i][j].first = 0;\n            res[i][j].second\
    \ = result[i][j];\n        }\n    }\n    return res;\n}", "{\n    long n = lst.length;\n\
    \    long m = lst[0].length;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n\
    \    long l = 0;\n    long m1 = m;\n    long n1 = n;\n    long m2 = m;\n    long\
    \ n2 = n;\n    long m3 = m;\n    long n3 = n;\n    long m4 = m;\n    long n4 =\
    \ n;\n    long m5 = m;\n    long n5 = n;\n    long m6 = m;\n    long n6 = n;\n\
    \    long m7 = m;\n    long n7 = n;\n    long m8 = m;\n    long n8 = n;\n    long\
    \ m9 = m;\n    long n9 = n;\n    long m10 = m;\n    long n10 = n;\n    long m11\
    \ = m;\n    long n11 = n;\n    long m12 = m;\n    long n12 = n;\n    long m13\
    \ = m;\n    long n13 = n;\n    long m14 = m;\n    long n14 = n;\n    long m15\
    \ = m;\n    long n15 = n;\n    long m16 = m;\n    long n16 = n;\n    long m17\
    \ = m;\n    long n17 = n;\n    long m18 = m;\n    long n18 = n;\n    long m19\
    \ = m;\n    long n19 = n;\n    long m20 = m;\n    long n20 = n;\n    long m21\
    \ = m;\n    long n21 = n;\n    long m22 = m;\n    long n22 = n;\n    long m23\
    \ = m;\n    long n23 = n;\n    long m24 = m;\n    long n24 = n;\n    long m25\
    \ = m;\n    long n25 = n;\n    long m26 = m;\n    long n26 = n;\n    long m27\
    \ = m;\n    long n27 = n;\n    long m28 = m;\n    long n28 = n;\n    long m29\
    \ = m;\n    long n29 = n;\n    long m30 = m;\n    long n30 = n;\n    long m31\
    \ = m;\n    long n31 = n;\n    long m32 = m;\n    long n32 = n;\n    long m33\
    \ = m;\n    long n33 = n;\n    long m34 = m;\n    long n34 = n;\n    long m35\
    \ = m;\n    long n35 = n;\n    long m36 = m;\n    long n36 = n;\n    ", "{\n \
    \   Tuple!(long, long)[] result = null;\n    foreach(row,lst)\n    {\n       \
    \ foreach(column,row)\n        {\n            if(column == x)\n            {\n\
    \                result = Tuple!(long, long)[](row,column);\n                break;\n\
    \            }\n        }\n        if(result != null)\n            break;\n  \
    \  }\n    return result;\n}", "{\n    Tuple!(long, long)[] result = new Tuple!(long,\
    \ long)[0];\n    \n    foreach(row: lst, row_index: 0) \n    {\n        foreach(column:\
    \ row, column_index: 0) \n        {\n            if(column_index == x) \n    \
    \        {\n                foreach(tuple: result, tuple_index: 0) \n        \
    \        {\n                    tuple.item1 = row_index;\n                   \
    \ tuple.item2 = column_index;\n                }\n            }\n        }\n \
    \   }\n    \n    foreach(tuple: result, tuple_index: 0) \n    {\n        tuple.item1\
    \ = tuple.item1 * -1;\n        tuple.item2 = tuple.item2 * -1;\n    }\n    \n\
    \    foreach(tuple: result, tuple_index: 0) \n    {\n        tuple.item1 = tuple.item1\
    \ + 1;\n        tuple.item2 = tuple.item2 + 1;\n    }\n    \n    foreach(tuple:\
    \ result, tuple_index: 0) \n    {\n        tuple.item1 = tuple.item1 + 1;\n  \
    \      tuple.item2 = tuple.item2 + 1;\n    }\n    \n    foreach(tuple: result,\
    \ tuple_index: 0) \n    {\n        tuple.item1 = tuple.item1 + 1;\n        tuple.item2\
    \ = tuple.item2 + 1;\n    }\n    \n    foreach(tuple: result, tuple_index: 0)\
    \ \n    {\n        tuple.item1 = tuple.item1 + 1;\n        tuple.item2 = tuple.item2\
    \ + 1;\n    }\n    \n    foreach(tuple: result, tuple_index: 0) \n    {\n    \
    \    tuple.item1 = tuple.item1 + 1;\n        tuple.item2 = tuple.item2 + 1;\n\
    \    }\n    \n    foreach(tuple: result, tuple_index: 0) \n    {\n        tuple.item1\
    \ = tuple.item1 + 1;\n        tuple.item2 = tuple.item2 + 1;\n    }\n    \n  \
    \  foreach(tuple: result, tuple_index: 0) \n    {\n        tuple.item1 = tuple.item1\
    \ + 1;\n        tuple.item2 = tuple.item2 + 1;\n    }\n    \n    foreach(tuple:\
    \ result, tuple_index: 0) \n    {\n        tuple.item1 = tuple.item1 + 1;\n  \
    \      tuple.item2 = tuple.item2 + 1;\n    }\n    \n    foreach(tuple: result,\
    \ tuple_index: 0) \n    {\n        tuple.item1 = tuple.item1 + 1;\n        tuple.item2\
    \ = tuple.item2 + 1;\n    }\n    \n    foreach(tuple: result, tuple_index: 0)\
    \ \n    {\n        tuple.item1 = tuple.item1 + 1;\n        tuple.item2 = tuple.item2\
    \ + 1;\n    }\n    \n    foreach(tuple: result, tuple_index: 0) \n    {\n    \
    \    tuple.item1 = tuple.item1 + 1;\n        tuple.item2 = tuple.item2 + 1;\n\
    \    }\n    \n", "{\n    long rows = 0;\n    long cols = 0;\n    for(long i =\
    \ 0; i < lst.Length; i++)\n    {\n        if(lst[i][0] == x)\n        {\n    \
    \        rows++;\n        }\n        else\n        {\n            cols++;\n  \
    \      }\n    }\n    Tuple!(long, long)[] result = new Tuple!(long, long)[rows];\n\
    \    for(long i = 0; i < rows; i++)\n    {\n        result[i] = new Tuple!(long,\
    \ long)[cols];\n        for(long j = 0; j < cols; j++)\n        {\n          \
    \  result[i][j] = new Tuple!(long, long)(i, j);\n        }\n    }\n    return\
    \ result;\n}", "{\n    Tuple!(long, long)[] result = null;\n    \n    foreach(row:\
    \ lst, row_index: long in  0 .. row.length - 1)\n    {\n        foreach(column:\
    \ row[0..row.length - 1], column_index: long in  0 .. row.length - 1 - row_index)\n\
    \        {\n            if(column_index == x)\n            {\n               \
    \ result = Tuple!(long, long)[](row_index, column_index);\n                break;\n\
    \            }\n        }\n    }\n    \n    return result;\n}", "{\n    Tuple!(long,\
    \ long)[] result = new Tuple!(long, long)[0];\n    \n    for(long i = 0; i < lst.length;\
    \ ++i)\n    {\n        if(lst[i][0] == x)\n        {\n            for(long j =\
    \ 0; j < lst[i].length; ++j)\n            {\n                result.add((i, j));\n\
    \            }\n        }\n    }\n    \n    result.sort(function(a, b){return\
    \ a.0 < b.0;});\n    result.sort(function(a, b){return b.1 < a.1;});\n    \n \
    \   return result;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
